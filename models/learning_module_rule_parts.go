// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LearningModuleRuleParts learning module rule parts
//
// swagger:model LearningModuleRuleParts
type LearningModuleRuleParts struct {

	// The learning module rule operation
	// Required: true
	// Enum: [Include Exclude]
	Operation *string `json:"operation"`

	// The order of rules in learning module rule
	// Required: true
	Order *int32 `json:"order"`

	// The learning module rule selector
	// Required: true
	// Enum: [AcdSkills AgentName Division Group Location Queue Role Team]
	Selector *string `json:"selector"`

	// The value of rules
	// Required: true
	Value []string `json:"value"`
}

// Validate validates this learning module rule parts
func (m *LearningModuleRuleParts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var learningModuleRulePartsTypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Include","Exclude"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		learningModuleRulePartsTypeOperationPropEnum = append(learningModuleRulePartsTypeOperationPropEnum, v)
	}
}

const (

	// LearningModuleRulePartsOperationInclude captures enum value "Include"
	LearningModuleRulePartsOperationInclude string = "Include"

	// LearningModuleRulePartsOperationExclude captures enum value "Exclude"
	LearningModuleRulePartsOperationExclude string = "Exclude"
)

// prop value enum
func (m *LearningModuleRuleParts) validateOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, learningModuleRulePartsTypeOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LearningModuleRuleParts) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperationEnum("operation", "body", *m.Operation); err != nil {
		return err
	}

	return nil
}

func (m *LearningModuleRuleParts) validateOrder(formats strfmt.Registry) error {

	if err := validate.Required("order", "body", m.Order); err != nil {
		return err
	}

	return nil
}

var learningModuleRulePartsTypeSelectorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AcdSkills","AgentName","Division","Group","Location","Queue","Role","Team"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		learningModuleRulePartsTypeSelectorPropEnum = append(learningModuleRulePartsTypeSelectorPropEnum, v)
	}
}

const (

	// LearningModuleRulePartsSelectorAcdSkills captures enum value "AcdSkills"
	LearningModuleRulePartsSelectorAcdSkills string = "AcdSkills"

	// LearningModuleRulePartsSelectorAgentName captures enum value "AgentName"
	LearningModuleRulePartsSelectorAgentName string = "AgentName"

	// LearningModuleRulePartsSelectorDivision captures enum value "Division"
	LearningModuleRulePartsSelectorDivision string = "Division"

	// LearningModuleRulePartsSelectorGroup captures enum value "Group"
	LearningModuleRulePartsSelectorGroup string = "Group"

	// LearningModuleRulePartsSelectorLocation captures enum value "Location"
	LearningModuleRulePartsSelectorLocation string = "Location"

	// LearningModuleRulePartsSelectorQueue captures enum value "Queue"
	LearningModuleRulePartsSelectorQueue string = "Queue"

	// LearningModuleRulePartsSelectorRole captures enum value "Role"
	LearningModuleRulePartsSelectorRole string = "Role"

	// LearningModuleRulePartsSelectorTeam captures enum value "Team"
	LearningModuleRulePartsSelectorTeam string = "Team"
)

// prop value enum
func (m *LearningModuleRuleParts) validateSelectorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, learningModuleRulePartsTypeSelectorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LearningModuleRuleParts) validateSelector(formats strfmt.Registry) error {

	if err := validate.Required("selector", "body", m.Selector); err != nil {
		return err
	}

	// value enum
	if err := m.validateSelectorEnum("selector", "body", *m.Selector); err != nil {
		return err
	}

	return nil
}

func (m *LearningModuleRuleParts) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LearningModuleRuleParts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LearningModuleRuleParts) UnmarshalBinary(b []byte) error {
	var res LearningModuleRuleParts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

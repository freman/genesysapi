// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommunicationEndedEvent communication ended event
//
// swagger:model CommunicationEndedEvent
type CommunicationEndedEvent struct {

	// A unique Id (V4 UUID) identifying this communication
	// Required: true
	CommunicationID *string `json:"communicationId"`

	// A unique Id (V4 UUID) identifying this conversation
	// Required: true
	ConversationID *string `json:"conversationId"`

	// The id (V4 UUID) of the conversation that the communication is being moved to when conversations are merged.
	DestinationConversationID string `json:"destinationConversationId,omitempty"`

	// Indicates how this communication was ended.
	// Required: true
	// Enum: [Self Peer System Error Transfer TransferConsult TransferConference]
	DisconnectType *string `json:"disconnectType"`

	// A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Required: true
	// Format: date-time
	EventDateTime *strfmt.DateTime `json:"eventDateTime"`

	// A unique (V4 UUID) eventId for this event
	// Required: true
	EventID *string `json:"eventId"`
}

// Validate validates this communication ended event
func (m *CommunicationEndedEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommunicationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisconnectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommunicationEndedEvent) validateCommunicationID(formats strfmt.Registry) error {

	if err := validate.Required("communicationId", "body", m.CommunicationID); err != nil {
		return err
	}

	return nil
}

func (m *CommunicationEndedEvent) validateConversationID(formats strfmt.Registry) error {

	if err := validate.Required("conversationId", "body", m.ConversationID); err != nil {
		return err
	}

	return nil
}

var communicationEndedEventTypeDisconnectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Self","Peer","System","Error","Transfer","TransferConsult","TransferConference"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		communicationEndedEventTypeDisconnectTypePropEnum = append(communicationEndedEventTypeDisconnectTypePropEnum, v)
	}
}

const (

	// CommunicationEndedEventDisconnectTypeSelf captures enum value "Self"
	CommunicationEndedEventDisconnectTypeSelf string = "Self"

	// CommunicationEndedEventDisconnectTypePeer captures enum value "Peer"
	CommunicationEndedEventDisconnectTypePeer string = "Peer"

	// CommunicationEndedEventDisconnectTypeSystem captures enum value "System"
	CommunicationEndedEventDisconnectTypeSystem string = "System"

	// CommunicationEndedEventDisconnectTypeError captures enum value "Error"
	CommunicationEndedEventDisconnectTypeError string = "Error"

	// CommunicationEndedEventDisconnectTypeTransfer captures enum value "Transfer"
	CommunicationEndedEventDisconnectTypeTransfer string = "Transfer"

	// CommunicationEndedEventDisconnectTypeTransferConsult captures enum value "TransferConsult"
	CommunicationEndedEventDisconnectTypeTransferConsult string = "TransferConsult"

	// CommunicationEndedEventDisconnectTypeTransferConference captures enum value "TransferConference"
	CommunicationEndedEventDisconnectTypeTransferConference string = "TransferConference"
)

// prop value enum
func (m *CommunicationEndedEvent) validateDisconnectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, communicationEndedEventTypeDisconnectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommunicationEndedEvent) validateDisconnectType(formats strfmt.Registry) error {

	if err := validate.Required("disconnectType", "body", m.DisconnectType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDisconnectTypeEnum("disconnectType", "body", *m.DisconnectType); err != nil {
		return err
	}

	return nil
}

func (m *CommunicationEndedEvent) validateEventDateTime(formats strfmt.Registry) error {

	if err := validate.Required("eventDateTime", "body", m.EventDateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("eventDateTime", "body", "date-time", m.EventDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CommunicationEndedEvent) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("eventId", "body", m.EventID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommunicationEndedEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommunicationEndedEvent) UnmarshalBinary(b []byte) error {
	var res CommunicationEndedEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

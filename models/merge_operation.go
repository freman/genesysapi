// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MergeOperation merge operation
//
// swagger:model MergeOperation
type MergeOperation struct {

	// The contact created as a result of the merge operation
	// Read Only: true
	ResultingContact *AddressableEntityRef `json:"resultingContact,omitempty"`

	// The source contact for the merge operation
	// Read Only: true
	SourceContact *AddressableEntityRef `json:"sourceContact,omitempty"`

	// The target contact for the merge operation
	// Read Only: true
	TargetContact *AddressableEntityRef `json:"targetContact,omitempty"`
}

// Validate validates this merge operation
func (m *MergeOperation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResultingContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetContact(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MergeOperation) validateResultingContact(formats strfmt.Registry) error {

	if swag.IsZero(m.ResultingContact) { // not required
		return nil
	}

	if m.ResultingContact != nil {
		if err := m.ResultingContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resultingContact")
			}
			return err
		}
	}

	return nil
}

func (m *MergeOperation) validateSourceContact(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceContact) { // not required
		return nil
	}

	if m.SourceContact != nil {
		if err := m.SourceContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceContact")
			}
			return err
		}
	}

	return nil
}

func (m *MergeOperation) validateTargetContact(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetContact) { // not required
		return nil
	}

	if m.TargetContact != nil {
		if err := m.TargetContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetContact")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MergeOperation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MergeOperation) UnmarshalBinary(b []byte) error {
	var res MergeOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

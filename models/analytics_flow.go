// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalyticsFlow analytics flow
//
// swagger:model AnalyticsFlow
type AnalyticsFlow struct {

	// Flow ending language, e.g. en-us
	EndingLanguage string `json:"endingLanguage,omitempty"`

	// The particular entry reason for this flow, e.g. an address, userId, or flowId
	EntryReason string `json:"entryReason,omitempty"`

	// The entry type for this flow, e.g. dnis, dialer, agent, flow, or direct
	// Enum: [agent direct dnis flow outbound]
	EntryType string `json:"entryType,omitempty"`

	// The exit reason for this flow, e.g. DISCONNECT
	ExitReason string `json:"exitReason,omitempty"`

	// The unique identifier of this flow
	FlowID string `json:"flowId,omitempty"`

	// The name of this flow at the time of flow execution
	FlowName string `json:"flowName,omitempty"`

	// The type of this flow
	// Enum: [BOT COMMONMODULE DIGITALBOT INBOUNDCALL INBOUNDCHAT INBOUNDEMAIL INBOUNDSHORTMESSAGE INQUEUECALL INQUEUEEMAIL INQUEUESHORTMESSAGE OUTBOUNDCALL SECURECALL SPEECH SURVEYINVITE VOICE VOICEMAIL WORKFLOW WORKITEM]
	FlowType string `json:"flowType,omitempty"`

	// The version of this flow
	FlowVersion string `json:"flowVersion,omitempty"`

	// Flag indicating whether the flow issued a callback
	IssuedCallback bool `json:"issuedCallback"`

	// Flow outcomes
	Outcomes []*AnalyticsFlowOutcome `json:"outcomes"`

	// The recognition failure reason causing to exit/disconnect
	RecognitionFailureReason string `json:"recognitionFailureReason,omitempty"`

	// Flow starting language, e.g. en-us
	StartingLanguage string `json:"startingLanguage,omitempty"`

	// The address of a flow transfer target, e.g. a phone number, an email address, or a queueId
	TransferTargetAddress string `json:"transferTargetAddress,omitempty"`

	// The name of a flow transfer target
	TransferTargetName string `json:"transferTargetName,omitempty"`

	// The type of transfer for flows that ended with a transfer
	TransferType string `json:"transferType,omitempty"`
}

// Validate validates this analytics flow
func (m *AnalyticsFlow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlowType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutcomes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var analyticsFlowTypeEntryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["agent","direct","dnis","flow","outbound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analyticsFlowTypeEntryTypePropEnum = append(analyticsFlowTypeEntryTypePropEnum, v)
	}
}

const (

	// AnalyticsFlowEntryTypeAgent captures enum value "agent"
	AnalyticsFlowEntryTypeAgent string = "agent"

	// AnalyticsFlowEntryTypeDirect captures enum value "direct"
	AnalyticsFlowEntryTypeDirect string = "direct"

	// AnalyticsFlowEntryTypeDnis captures enum value "dnis"
	AnalyticsFlowEntryTypeDnis string = "dnis"

	// AnalyticsFlowEntryTypeFlow captures enum value "flow"
	AnalyticsFlowEntryTypeFlow string = "flow"

	// AnalyticsFlowEntryTypeOutbound captures enum value "outbound"
	AnalyticsFlowEntryTypeOutbound string = "outbound"
)

// prop value enum
func (m *AnalyticsFlow) validateEntryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, analyticsFlowTypeEntryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AnalyticsFlow) validateEntryType(formats strfmt.Registry) error {

	if swag.IsZero(m.EntryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntryTypeEnum("entryType", "body", m.EntryType); err != nil {
		return err
	}

	return nil
}

var analyticsFlowTypeFlowTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BOT","COMMONMODULE","DIGITALBOT","INBOUNDCALL","INBOUNDCHAT","INBOUNDEMAIL","INBOUNDSHORTMESSAGE","INQUEUECALL","INQUEUEEMAIL","INQUEUESHORTMESSAGE","OUTBOUNDCALL","SECURECALL","SPEECH","SURVEYINVITE","VOICE","VOICEMAIL","WORKFLOW","WORKITEM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analyticsFlowTypeFlowTypePropEnum = append(analyticsFlowTypeFlowTypePropEnum, v)
	}
}

const (

	// AnalyticsFlowFlowTypeBOT captures enum value "BOT"
	AnalyticsFlowFlowTypeBOT string = "BOT"

	// AnalyticsFlowFlowTypeCOMMONMODULE captures enum value "COMMONMODULE"
	AnalyticsFlowFlowTypeCOMMONMODULE string = "COMMONMODULE"

	// AnalyticsFlowFlowTypeDIGITALBOT captures enum value "DIGITALBOT"
	AnalyticsFlowFlowTypeDIGITALBOT string = "DIGITALBOT"

	// AnalyticsFlowFlowTypeINBOUNDCALL captures enum value "INBOUNDCALL"
	AnalyticsFlowFlowTypeINBOUNDCALL string = "INBOUNDCALL"

	// AnalyticsFlowFlowTypeINBOUNDCHAT captures enum value "INBOUNDCHAT"
	AnalyticsFlowFlowTypeINBOUNDCHAT string = "INBOUNDCHAT"

	// AnalyticsFlowFlowTypeINBOUNDEMAIL captures enum value "INBOUNDEMAIL"
	AnalyticsFlowFlowTypeINBOUNDEMAIL string = "INBOUNDEMAIL"

	// AnalyticsFlowFlowTypeINBOUNDSHORTMESSAGE captures enum value "INBOUNDSHORTMESSAGE"
	AnalyticsFlowFlowTypeINBOUNDSHORTMESSAGE string = "INBOUNDSHORTMESSAGE"

	// AnalyticsFlowFlowTypeINQUEUECALL captures enum value "INQUEUECALL"
	AnalyticsFlowFlowTypeINQUEUECALL string = "INQUEUECALL"

	// AnalyticsFlowFlowTypeINQUEUEEMAIL captures enum value "INQUEUEEMAIL"
	AnalyticsFlowFlowTypeINQUEUEEMAIL string = "INQUEUEEMAIL"

	// AnalyticsFlowFlowTypeINQUEUESHORTMESSAGE captures enum value "INQUEUESHORTMESSAGE"
	AnalyticsFlowFlowTypeINQUEUESHORTMESSAGE string = "INQUEUESHORTMESSAGE"

	// AnalyticsFlowFlowTypeOUTBOUNDCALL captures enum value "OUTBOUNDCALL"
	AnalyticsFlowFlowTypeOUTBOUNDCALL string = "OUTBOUNDCALL"

	// AnalyticsFlowFlowTypeSECURECALL captures enum value "SECURECALL"
	AnalyticsFlowFlowTypeSECURECALL string = "SECURECALL"

	// AnalyticsFlowFlowTypeSPEECH captures enum value "SPEECH"
	AnalyticsFlowFlowTypeSPEECH string = "SPEECH"

	// AnalyticsFlowFlowTypeSURVEYINVITE captures enum value "SURVEYINVITE"
	AnalyticsFlowFlowTypeSURVEYINVITE string = "SURVEYINVITE"

	// AnalyticsFlowFlowTypeVOICE captures enum value "VOICE"
	AnalyticsFlowFlowTypeVOICE string = "VOICE"

	// AnalyticsFlowFlowTypeVOICEMAIL captures enum value "VOICEMAIL"
	AnalyticsFlowFlowTypeVOICEMAIL string = "VOICEMAIL"

	// AnalyticsFlowFlowTypeWORKFLOW captures enum value "WORKFLOW"
	AnalyticsFlowFlowTypeWORKFLOW string = "WORKFLOW"

	// AnalyticsFlowFlowTypeWORKITEM captures enum value "WORKITEM"
	AnalyticsFlowFlowTypeWORKITEM string = "WORKITEM"
)

// prop value enum
func (m *AnalyticsFlow) validateFlowTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, analyticsFlowTypeFlowTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AnalyticsFlow) validateFlowType(formats strfmt.Registry) error {

	if swag.IsZero(m.FlowType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlowTypeEnum("flowType", "body", m.FlowType); err != nil {
		return err
	}

	return nil
}

func (m *AnalyticsFlow) validateOutcomes(formats strfmt.Registry) error {

	if swag.IsZero(m.Outcomes) { // not required
		return nil
	}

	for i := 0; i < len(m.Outcomes); i++ {
		if swag.IsZero(m.Outcomes[i]) { // not required
			continue
		}

		if m.Outcomes[i] != nil {
			if err := m.Outcomes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outcomes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnalyticsFlow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalyticsFlow) UnmarshalBinary(b []byte) error {
	var res AnalyticsFlow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

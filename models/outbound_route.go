// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OutboundRoute outbound route
//
// swagger:model OutboundRoute
type OutboundRoute struct {

	// The site associated to the outbound route.
	// Required: true
	ClassificationTypes []string `json:"classificationTypes"`

	// The ID of the user that created the resource.
	CreatedBy string `json:"createdBy,omitempty"`

	// The application that created the resource.
	CreatedByApp string `json:"createdByApp,omitempty"`

	// The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The resource's description.
	Description string `json:"description,omitempty"`

	// distribution
	// Enum: [SEQUENTIAL RANDOM]
	Distribution string `json:"distribution,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// Trunk base settings of trunkType "EXTERNAL".  This base must also be set on an edge logical interface for correct routing.
	ExternalTrunkBases []*DomainEntityRef `json:"externalTrunkBases"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Is this outbound route being managed remotely.
	// Read Only: true
	Managed *bool `json:"managed,omitempty"`

	// The ID of the user that last modified the resource.
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// The application that last modified the resource.
	ModifiedByApp string `json:"modifiedByApp,omitempty"`

	// The name of the entity.
	// Required: true
	Name *string `json:"name"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The site associated to the outbound route.
	// Read Only: true
	Site *Site `json:"site,omitempty"`

	// Indicates if the resource is active, inactive, or deleted.
	// Read Only: true
	// Enum: [active inactive deleted]
	State string `json:"state,omitempty"`

	// The current version of the resource.
	Version int32 `json:"version,omitempty"`
}

// Validate validates this outbound route
func (m *OutboundRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClassificationTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistribution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalTrunkBases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutboundRoute) validateClassificationTypes(formats strfmt.Registry) error {

	if err := validate.Required("classificationTypes", "body", m.ClassificationTypes); err != nil {
		return err
	}

	return nil
}

func (m *OutboundRoute) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OutboundRoute) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

var outboundRouteTypeDistributionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SEQUENTIAL","RANDOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		outboundRouteTypeDistributionPropEnum = append(outboundRouteTypeDistributionPropEnum, v)
	}
}

const (

	// OutboundRouteDistributionSEQUENTIAL captures enum value "SEQUENTIAL"
	OutboundRouteDistributionSEQUENTIAL string = "SEQUENTIAL"

	// OutboundRouteDistributionRANDOM captures enum value "RANDOM"
	OutboundRouteDistributionRANDOM string = "RANDOM"
)

// prop value enum
func (m *OutboundRoute) validateDistributionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, outboundRouteTypeDistributionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OutboundRoute) validateDistribution(formats strfmt.Registry) error {

	if swag.IsZero(m.Distribution) { // not required
		return nil
	}

	// value enum
	if err := m.validateDistributionEnum("distribution", "body", m.Distribution); err != nil {
		return err
	}

	return nil
}

func (m *OutboundRoute) validateExternalTrunkBases(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalTrunkBases) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalTrunkBases); i++ {
		if swag.IsZero(m.ExternalTrunkBases[i]) { // not required
			continue
		}

		if m.ExternalTrunkBases[i] != nil {
			if err := m.ExternalTrunkBases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalTrunkBases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundRoute) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *OutboundRoute) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OutboundRoute) validateSite(formats strfmt.Registry) error {

	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

var outboundRouteTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		outboundRouteTypeStatePropEnum = append(outboundRouteTypeStatePropEnum, v)
	}
}

const (

	// OutboundRouteStateActive captures enum value "active"
	OutboundRouteStateActive string = "active"

	// OutboundRouteStateInactive captures enum value "inactive"
	OutboundRouteStateInactive string = "inactive"

	// OutboundRouteStateDeleted captures enum value "deleted"
	OutboundRouteStateDeleted string = "deleted"
)

// prop value enum
func (m *OutboundRoute) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, outboundRouteTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OutboundRoute) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OutboundRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OutboundRoute) UnmarshalBinary(b []byte) error {
	var res OutboundRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

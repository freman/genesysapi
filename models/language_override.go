// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LanguageOverride language override
//
// swagger:model LanguageOverride
type LanguageOverride struct {

	// The ID of the TTS engine to use for this language override
	// Required: true
	Engine *string `json:"engine"`

	// The language code of the language being overridden
	// Required: true
	Language *string `json:"language"`

	// The ID of the voice to use for this language override. The voice must be supported by the chosen engine.
	// Required: true
	Voice *string `json:"voice"`
}

// Validate validates this language override
func (m *LanguageOverride) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEngine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVoice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LanguageOverride) validateEngine(formats strfmt.Registry) error {

	if err := validate.Required("engine", "body", m.Engine); err != nil {
		return err
	}

	return nil
}

func (m *LanguageOverride) validateLanguage(formats strfmt.Registry) error {

	if err := validate.Required("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

func (m *LanguageOverride) validateVoice(formats strfmt.Registry) error {

	if err := validate.Required("voice", "body", m.Voice); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this language override based on context it is used
func (m *LanguageOverride) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LanguageOverride) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LanguageOverride) UnmarshalBinary(b []byte) error {
	var res LanguageOverride
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DncListDivisionView dnc list division view
//
// swagger:model DncListDivisionView
type DncListDivisionView struct {

	// The contact method. Required if dncSourceType is rds.
	// Enum: [Email Phone Any]
	ContactMethod string `json:"contactMethod,omitempty"`

	// The division to which this entity belongs.
	Division *Division `json:"division,omitempty"`

	// The type of the DncList.
	// Read Only: true
	// Enum: [rds rds_custom dnc.com gryphon]
	DncSourceType string `json:"dncSourceType,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The status of the import process.
	// Read Only: true
	ImportStatus *ImportStatus `json:"importStatus,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The number of contacts in the DncList.
	// Read Only: true
	Size int64 `json:"size,omitempty"`
}

// Validate validates this dnc list division view
func (m *DncListDivisionView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDncSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dncListDivisionViewTypeContactMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Email","Phone","Any"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dncListDivisionViewTypeContactMethodPropEnum = append(dncListDivisionViewTypeContactMethodPropEnum, v)
	}
}

const (

	// DncListDivisionViewContactMethodEmail captures enum value "Email"
	DncListDivisionViewContactMethodEmail string = "Email"

	// DncListDivisionViewContactMethodPhone captures enum value "Phone"
	DncListDivisionViewContactMethodPhone string = "Phone"

	// DncListDivisionViewContactMethodAny captures enum value "Any"
	DncListDivisionViewContactMethodAny string = "Any"
)

// prop value enum
func (m *DncListDivisionView) validateContactMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dncListDivisionViewTypeContactMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DncListDivisionView) validateContactMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateContactMethodEnum("contactMethod", "body", m.ContactMethod); err != nil {
		return err
	}

	return nil
}

func (m *DncListDivisionView) validateDivision(formats strfmt.Registry) error {
	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if m.Division != nil {
		if err := m.Division.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

var dncListDivisionViewTypeDncSourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["rds","rds_custom","dnc.com","gryphon"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dncListDivisionViewTypeDncSourceTypePropEnum = append(dncListDivisionViewTypeDncSourceTypePropEnum, v)
	}
}

const (

	// DncListDivisionViewDncSourceTypeRds captures enum value "rds"
	DncListDivisionViewDncSourceTypeRds string = "rds"

	// DncListDivisionViewDncSourceTypeRdsCustom captures enum value "rds_custom"
	DncListDivisionViewDncSourceTypeRdsCustom string = "rds_custom"

	// DncListDivisionViewDncSourceTypeDncDotCom captures enum value "dnc.com"
	DncListDivisionViewDncSourceTypeDncDotCom string = "dnc.com"

	// DncListDivisionViewDncSourceTypeGryphon captures enum value "gryphon"
	DncListDivisionViewDncSourceTypeGryphon string = "gryphon"
)

// prop value enum
func (m *DncListDivisionView) validateDncSourceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dncListDivisionViewTypeDncSourceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DncListDivisionView) validateDncSourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.DncSourceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDncSourceTypeEnum("dncSourceType", "body", m.DncSourceType); err != nil {
		return err
	}

	return nil
}

func (m *DncListDivisionView) validateImportStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportStatus) { // not required
		return nil
	}

	if m.ImportStatus != nil {
		if err := m.ImportStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("importStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("importStatus")
			}
			return err
		}
	}

	return nil
}

func (m *DncListDivisionView) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this dnc list division view based on the context it is used
func (m *DncListDivisionView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDivision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDncSourceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImportStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DncListDivisionView) contextValidateDivision(ctx context.Context, formats strfmt.Registry) error {

	if m.Division != nil {
		if err := m.Division.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

func (m *DncListDivisionView) contextValidateDncSourceType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dncSourceType", "body", string(m.DncSourceType)); err != nil {
		return err
	}

	return nil
}

func (m *DncListDivisionView) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *DncListDivisionView) contextValidateImportStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ImportStatus != nil {
		if err := m.ImportStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("importStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("importStatus")
			}
			return err
		}
	}

	return nil
}

func (m *DncListDivisionView) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *DncListDivisionView) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "size", "body", int64(m.Size)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DncListDivisionView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DncListDivisionView) UnmarshalBinary(b []byte) error {
	var res DncListDivisionView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

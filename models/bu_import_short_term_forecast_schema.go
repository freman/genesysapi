// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuImportShortTermForecastSchema bu import short term forecast schema
//
// swagger:model BuImportShortTermForecastSchema
type BuImportShortTermForecastSchema struct {

	// Whether this forecast can be used for scheduling
	CanUseForScheduling bool `json:"canUseForScheduling"`

	// The description for the forecast
	// Required: true
	Description *string `json:"description"`

	// The long term planning group data
	LongTermPlanningGroups []*LongTermForecastPlanningGroupData `json:"longTermPlanningGroups"`

	// The short term planning group data
	// Required: true
	PlanningGroups []*ForecastPlanningGroupData `json:"planningGroups"`

	// The number of weeks covered by the forecast
	// Required: true
	WeekCount *int32 `json:"weekCount"`
}

// Validate validates this bu import short term forecast schema
func (m *BuImportShortTermForecastSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLongTermPlanningGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanningGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuImportShortTermForecastSchema) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *BuImportShortTermForecastSchema) validateLongTermPlanningGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.LongTermPlanningGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.LongTermPlanningGroups); i++ {
		if swag.IsZero(m.LongTermPlanningGroups[i]) { // not required
			continue
		}

		if m.LongTermPlanningGroups[i] != nil {
			if err := m.LongTermPlanningGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("longTermPlanningGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuImportShortTermForecastSchema) validatePlanningGroups(formats strfmt.Registry) error {

	if err := validate.Required("planningGroups", "body", m.PlanningGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.PlanningGroups); i++ {
		if swag.IsZero(m.PlanningGroups[i]) { // not required
			continue
		}

		if m.PlanningGroups[i] != nil {
			if err := m.PlanningGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("planningGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuImportShortTermForecastSchema) validateWeekCount(formats strfmt.Registry) error {

	if err := validate.Required("weekCount", "body", m.WeekCount); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuImportShortTermForecastSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuImportShortTermForecastSchema) UnmarshalBinary(b []byte) error {
	var res BuImportShortTermForecastSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

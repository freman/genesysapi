// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditEntityReference audit entity reference
//
// swagger:model AuditEntityReference
type AuditEntityReference struct {

	// action
	Action string `json:"action,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// self Uri
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// type
	// Enum: [ATTRIBUTE ATTRIBUTE_GROUP_INSTANCE DOCUMENT DOWNLOAD FAX GROUP RECORDING TAG WORKSPACE USER PUBLIC]
	Type string `json:"type,omitempty"`
}

// Validate validates this audit entity reference
func (m *AuditEntityReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditEntityReference) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var auditEntityReferenceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ATTRIBUTE","ATTRIBUTE_GROUP_INSTANCE","DOCUMENT","DOWNLOAD","FAX","GROUP","RECORDING","TAG","WORKSPACE","USER","PUBLIC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auditEntityReferenceTypeTypePropEnum = append(auditEntityReferenceTypeTypePropEnum, v)
	}
}

const (

	// AuditEntityReferenceTypeATTRIBUTE captures enum value "ATTRIBUTE"
	AuditEntityReferenceTypeATTRIBUTE string = "ATTRIBUTE"

	// AuditEntityReferenceTypeATTRIBUTEGROUPINSTANCE captures enum value "ATTRIBUTE_GROUP_INSTANCE"
	AuditEntityReferenceTypeATTRIBUTEGROUPINSTANCE string = "ATTRIBUTE_GROUP_INSTANCE"

	// AuditEntityReferenceTypeDOCUMENT captures enum value "DOCUMENT"
	AuditEntityReferenceTypeDOCUMENT string = "DOCUMENT"

	// AuditEntityReferenceTypeDOWNLOAD captures enum value "DOWNLOAD"
	AuditEntityReferenceTypeDOWNLOAD string = "DOWNLOAD"

	// AuditEntityReferenceTypeFAX captures enum value "FAX"
	AuditEntityReferenceTypeFAX string = "FAX"

	// AuditEntityReferenceTypeGROUP captures enum value "GROUP"
	AuditEntityReferenceTypeGROUP string = "GROUP"

	// AuditEntityReferenceTypeRECORDING captures enum value "RECORDING"
	AuditEntityReferenceTypeRECORDING string = "RECORDING"

	// AuditEntityReferenceTypeTAG captures enum value "TAG"
	AuditEntityReferenceTypeTAG string = "TAG"

	// AuditEntityReferenceTypeWORKSPACE captures enum value "WORKSPACE"
	AuditEntityReferenceTypeWORKSPACE string = "WORKSPACE"

	// AuditEntityReferenceTypeUSER captures enum value "USER"
	AuditEntityReferenceTypeUSER string = "USER"

	// AuditEntityReferenceTypePUBLIC captures enum value "PUBLIC"
	AuditEntityReferenceTypePUBLIC string = "PUBLIC"
)

// prop value enum
func (m *AuditEntityReference) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, auditEntityReferenceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AuditEntityReference) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditEntityReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditEntityReference) UnmarshalBinary(b []byte) error {
	var res AuditEntityReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

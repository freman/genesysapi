// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WfmHistoricalAdherenceResponse wfm historical adherence response
//
// swagger:model WfmHistoricalAdherenceResponse
type WfmHistoricalAdherenceResponse struct {

	// Result will always come via downloadUrls; however the schema is included for documentation
	DownloadResult *WfmHistoricalAdherenceResultWrapper `json:"downloadResult,omitempty"`

	// Deprecated. Use downloadUrls instead.
	DownloadURL string `json:"downloadUrl,omitempty"`

	// The uri list to GET the results of the Historical Adherence query. For notification purposes only
	DownloadUrls []string `json:"downloadUrls"`

	// The query ID to listen for
	ID string `json:"id,omitempty"`

	// The state of the adherence query
	// Enum: [Processing Complete Error]
	QueryState string `json:"queryState,omitempty"`
}

// Validate validates this wfm historical adherence response
func (m *WfmHistoricalAdherenceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDownloadResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WfmHistoricalAdherenceResponse) validateDownloadResult(formats strfmt.Registry) error {

	if swag.IsZero(m.DownloadResult) { // not required
		return nil
	}

	if m.DownloadResult != nil {
		if err := m.DownloadResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downloadResult")
			}
			return err
		}
	}

	return nil
}

var wfmHistoricalAdherenceResponseTypeQueryStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Processing","Complete","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		wfmHistoricalAdherenceResponseTypeQueryStatePropEnum = append(wfmHistoricalAdherenceResponseTypeQueryStatePropEnum, v)
	}
}

const (

	// WfmHistoricalAdherenceResponseQueryStateProcessing captures enum value "Processing"
	WfmHistoricalAdherenceResponseQueryStateProcessing string = "Processing"

	// WfmHistoricalAdherenceResponseQueryStateComplete captures enum value "Complete"
	WfmHistoricalAdherenceResponseQueryStateComplete string = "Complete"

	// WfmHistoricalAdherenceResponseQueryStateError captures enum value "Error"
	WfmHistoricalAdherenceResponseQueryStateError string = "Error"
)

// prop value enum
func (m *WfmHistoricalAdherenceResponse) validateQueryStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, wfmHistoricalAdherenceResponseTypeQueryStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WfmHistoricalAdherenceResponse) validateQueryState(formats strfmt.Registry) error {

	if swag.IsZero(m.QueryState) { // not required
		return nil
	}

	// value enum
	if err := m.validateQueryStateEnum("queryState", "body", m.QueryState); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WfmHistoricalAdherenceResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WfmHistoricalAdherenceResponse) UnmarshalBinary(b []byte) error {
	var res WfmHistoricalAdherenceResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

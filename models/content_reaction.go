// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentReaction User reaction to public message.
//
// swagger:model ContentReaction
type ContentReaction struct {

	// Number of users that reacted this way to the message.
	// Required: true
	Count *int32 `json:"count"`

	// Type of reaction.
	// Required: true
	// Enum: [Like Love Wow Haha Sad Angry Thankful Pride Care]
	ReactionType *string `json:"reactionType"`
}

// Validate validates this content reaction
func (m *ContentReaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReactionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentReaction) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	return nil
}

var contentReactionTypeReactionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Like","Love","Wow","Haha","Sad","Angry","Thankful","Pride","Care"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentReactionTypeReactionTypePropEnum = append(contentReactionTypeReactionTypePropEnum, v)
	}
}

const (

	// ContentReactionReactionTypeLike captures enum value "Like"
	ContentReactionReactionTypeLike string = "Like"

	// ContentReactionReactionTypeLove captures enum value "Love"
	ContentReactionReactionTypeLove string = "Love"

	// ContentReactionReactionTypeWow captures enum value "Wow"
	ContentReactionReactionTypeWow string = "Wow"

	// ContentReactionReactionTypeHaha captures enum value "Haha"
	ContentReactionReactionTypeHaha string = "Haha"

	// ContentReactionReactionTypeSad captures enum value "Sad"
	ContentReactionReactionTypeSad string = "Sad"

	// ContentReactionReactionTypeAngry captures enum value "Angry"
	ContentReactionReactionTypeAngry string = "Angry"

	// ContentReactionReactionTypeThankful captures enum value "Thankful"
	ContentReactionReactionTypeThankful string = "Thankful"

	// ContentReactionReactionTypePride captures enum value "Pride"
	ContentReactionReactionTypePride string = "Pride"

	// ContentReactionReactionTypeCare captures enum value "Care"
	ContentReactionReactionTypeCare string = "Care"
)

// prop value enum
func (m *ContentReaction) validateReactionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contentReactionTypeReactionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContentReaction) validateReactionType(formats strfmt.Registry) error {

	if err := validate.Required("reactionType", "body", m.ReactionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateReactionTypeEnum("reactionType", "body", *m.ReactionType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this content reaction based on context it is used
func (m *ContentReaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ContentReaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentReaction) UnmarshalBinary(b []byte) error {
	var res ContentReaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

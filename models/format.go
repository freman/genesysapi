// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Format format
//
// swagger:model Format
type Format struct {

	// The Set of prompt segment format flags i.e. each entry is a part of describing the overall format. E.g. "format": { "flags": [StringPlayChars] }
	// Unique: true
	Flags []string `json:"flags"`
}

// Validate validates this format
func (m *Format) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var formatFlagsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BoolPlayYesNo","CurrencyAsMinorUnits","CurrencyMajorUnitsOnly","CurrencyMinorUnitsOnly","CurrencyPlayDigits","DateLongYear","DateShortYear","DateShortMonthAndDay","DateDayOfWeekOnly","DateDayOnly","DateMonthOnly","DateShortYearOnly","DateLongYearOnly","TimeTwentyFourHours","TimeTwelveHours","TimePartDays","TimePartHours","TimePartMinutes","TimePartSeconds","StringPlayChars","NumberPlayDigits","NumberOrdinal","LanguageCaseArticle","LanguageCaseAccusative","LanguageCaseDative","LanguageCaseGenitive","LanguageCaseNominative","LanguageQuantityPlural","LanguageQuantitySingular","LanguageGenderCommon","LanguageGenderFeminine","LanguageGenderMasculine","LanguageGenderNeuter","CaseArticle","CaseAccusative","CaseDative","CaseGenitive","CaseNominative","QuantityPlural","QuantitySingular","GenderCommon","GenderFeminine","GenderMasculine","GenderNeuter"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		formatFlagsItemsEnum = append(formatFlagsItemsEnum, v)
	}
}

func (m *Format) validateFlagsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, formatFlagsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Format) validateFlags(formats strfmt.Registry) error {

	if swag.IsZero(m.Flags) { // not required
		return nil
	}

	if err := validate.UniqueItems("flags", "body", m.Flags); err != nil {
		return err
	}

	for i := 0; i < len(m.Flags); i++ {

		// value enum
		if err := m.validateFlagsItemsEnum("flags"+"."+strconv.Itoa(i), "body", m.Flags[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Format) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Format) UnmarshalBinary(b []byte) error {
	var res Format
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

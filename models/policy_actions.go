// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyActions policy actions
//
// swagger:model PolicyActions
type PolicyActions struct {

	// true to delete the recording associated with the conversation regardless of the values of retainRecording or deleteRecording. Default = false
	AlwaysDelete bool `json:"alwaysDelete"`

	// assign calibrations
	AssignCalibrations []*CalibrationAssignment `json:"assignCalibrations"`

	// assign evaluations
	AssignEvaluations []*EvaluationAssignment `json:"assignEvaluations"`

	// assign metered assignment by agent
	AssignMeteredAssignmentByAgent []*MeteredAssignmentByAgent `json:"assignMeteredAssignmentByAgent"`

	// assign metered evaluations
	AssignMeteredEvaluations []*MeteredEvaluationAssignment `json:"assignMeteredEvaluations"`

	// assign surveys
	AssignSurveys []*SurveyAssignment `json:"assignSurveys"`

	// true to delete the recording associated with the conversation. If retainRecording = true, this will be ignored. Default = false
	DeleteRecording bool `json:"deleteRecording"`

	// initiate screen recording
	InitiateScreenRecording *InitiateScreenRecording `json:"initiateScreenRecording,omitempty"`

	// Policy action for exporting recordings using an integration to 3rd party s3.
	IntegrationExport *IntegrationExport `json:"integrationExport,omitempty"`

	// media transcriptions
	MediaTranscriptions []*MediaTranscription `json:"mediaTranscriptions"`

	// true to retain the recording associated with the conversation. Default = true
	RetainRecording bool `json:"retainRecording"`

	// retention duration
	RetentionDuration *RetentionDuration `json:"retentionDuration,omitempty"`
}

// Validate validates this policy actions
func (m *PolicyActions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignCalibrations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignEvaluations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignMeteredAssignmentByAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignMeteredEvaluations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignSurveys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiateScreenRecording(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationExport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaTranscriptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetentionDuration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyActions) validateAssignCalibrations(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignCalibrations) { // not required
		return nil
	}

	for i := 0; i < len(m.AssignCalibrations); i++ {
		if swag.IsZero(m.AssignCalibrations[i]) { // not required
			continue
		}

		if m.AssignCalibrations[i] != nil {
			if err := m.AssignCalibrations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignCalibrations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignCalibrations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyActions) validateAssignEvaluations(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignEvaluations) { // not required
		return nil
	}

	for i := 0; i < len(m.AssignEvaluations); i++ {
		if swag.IsZero(m.AssignEvaluations[i]) { // not required
			continue
		}

		if m.AssignEvaluations[i] != nil {
			if err := m.AssignEvaluations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignEvaluations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignEvaluations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyActions) validateAssignMeteredAssignmentByAgent(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignMeteredAssignmentByAgent) { // not required
		return nil
	}

	for i := 0; i < len(m.AssignMeteredAssignmentByAgent); i++ {
		if swag.IsZero(m.AssignMeteredAssignmentByAgent[i]) { // not required
			continue
		}

		if m.AssignMeteredAssignmentByAgent[i] != nil {
			if err := m.AssignMeteredAssignmentByAgent[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignMeteredAssignmentByAgent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignMeteredAssignmentByAgent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyActions) validateAssignMeteredEvaluations(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignMeteredEvaluations) { // not required
		return nil
	}

	for i := 0; i < len(m.AssignMeteredEvaluations); i++ {
		if swag.IsZero(m.AssignMeteredEvaluations[i]) { // not required
			continue
		}

		if m.AssignMeteredEvaluations[i] != nil {
			if err := m.AssignMeteredEvaluations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignMeteredEvaluations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignMeteredEvaluations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyActions) validateAssignSurveys(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignSurveys) { // not required
		return nil
	}

	for i := 0; i < len(m.AssignSurveys); i++ {
		if swag.IsZero(m.AssignSurveys[i]) { // not required
			continue
		}

		if m.AssignSurveys[i] != nil {
			if err := m.AssignSurveys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignSurveys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignSurveys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyActions) validateInitiateScreenRecording(formats strfmt.Registry) error {
	if swag.IsZero(m.InitiateScreenRecording) { // not required
		return nil
	}

	if m.InitiateScreenRecording != nil {
		if err := m.InitiateScreenRecording.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initiateScreenRecording")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initiateScreenRecording")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyActions) validateIntegrationExport(formats strfmt.Registry) error {
	if swag.IsZero(m.IntegrationExport) { // not required
		return nil
	}

	if m.IntegrationExport != nil {
		if err := m.IntegrationExport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("integrationExport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("integrationExport")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyActions) validateMediaTranscriptions(formats strfmt.Registry) error {
	if swag.IsZero(m.MediaTranscriptions) { // not required
		return nil
	}

	for i := 0; i < len(m.MediaTranscriptions); i++ {
		if swag.IsZero(m.MediaTranscriptions[i]) { // not required
			continue
		}

		if m.MediaTranscriptions[i] != nil {
			if err := m.MediaTranscriptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mediaTranscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mediaTranscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyActions) validateRetentionDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.RetentionDuration) { // not required
		return nil
	}

	if m.RetentionDuration != nil {
		if err := m.RetentionDuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retentionDuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retentionDuration")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this policy actions based on the context it is used
func (m *PolicyActions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssignCalibrations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssignEvaluations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssignMeteredAssignmentByAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssignMeteredEvaluations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssignSurveys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitiateScreenRecording(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIntegrationExport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMediaTranscriptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetentionDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyActions) contextValidateAssignCalibrations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssignCalibrations); i++ {

		if m.AssignCalibrations[i] != nil {
			if err := m.AssignCalibrations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignCalibrations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignCalibrations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyActions) contextValidateAssignEvaluations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssignEvaluations); i++ {

		if m.AssignEvaluations[i] != nil {
			if err := m.AssignEvaluations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignEvaluations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignEvaluations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyActions) contextValidateAssignMeteredAssignmentByAgent(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssignMeteredAssignmentByAgent); i++ {

		if m.AssignMeteredAssignmentByAgent[i] != nil {
			if err := m.AssignMeteredAssignmentByAgent[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignMeteredAssignmentByAgent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignMeteredAssignmentByAgent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyActions) contextValidateAssignMeteredEvaluations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssignMeteredEvaluations); i++ {

		if m.AssignMeteredEvaluations[i] != nil {
			if err := m.AssignMeteredEvaluations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignMeteredEvaluations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignMeteredEvaluations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyActions) contextValidateAssignSurveys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssignSurveys); i++ {

		if m.AssignSurveys[i] != nil {
			if err := m.AssignSurveys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignSurveys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignSurveys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyActions) contextValidateInitiateScreenRecording(ctx context.Context, formats strfmt.Registry) error {

	if m.InitiateScreenRecording != nil {
		if err := m.InitiateScreenRecording.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initiateScreenRecording")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initiateScreenRecording")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyActions) contextValidateIntegrationExport(ctx context.Context, formats strfmt.Registry) error {

	if m.IntegrationExport != nil {
		if err := m.IntegrationExport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("integrationExport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("integrationExport")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyActions) contextValidateMediaTranscriptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MediaTranscriptions); i++ {

		if m.MediaTranscriptions[i] != nil {
			if err := m.MediaTranscriptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mediaTranscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mediaTranscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyActions) contextValidateRetentionDuration(ctx context.Context, formats strfmt.Registry) error {

	if m.RetentionDuration != nil {
		if err := m.RetentionDuration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retentionDuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retentionDuration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyActions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyActions) UnmarshalBinary(b []byte) error {
	var res PolicyActions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

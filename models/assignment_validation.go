// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AssignmentValidation assignment validation
//
// swagger:model AssignmentValidation
type AssignmentValidation struct {

	// The list of user id that are invalid for the gamfication service to handle
	InvalidMemberAssignments []*InvalidAssignment `json:"invalidMemberAssignments"`

	// The list of users that are already assigned to the requesting custom performance profile
	MembersAlreadyAssigned []*UserReference `json:"membersAlreadyAssigned"`

	// The list of users that are already assigned to other custom performance profiles
	MembersAlreadyAssignedToOther []*OtherProfileAssignment `json:"membersAlreadyAssignedToOther"`

	// The list of users that are not assigned to any custom performance profile
	MembersNotAssigned []*UserReference `json:"membersNotAssigned"`
}

// Validate validates this assignment validation
func (m *AssignmentValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInvalidMemberAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembersAlreadyAssigned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembersAlreadyAssignedToOther(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembersNotAssigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssignmentValidation) validateInvalidMemberAssignments(formats strfmt.Registry) error {

	if swag.IsZero(m.InvalidMemberAssignments) { // not required
		return nil
	}

	for i := 0; i < len(m.InvalidMemberAssignments); i++ {
		if swag.IsZero(m.InvalidMemberAssignments[i]) { // not required
			continue
		}

		if m.InvalidMemberAssignments[i] != nil {
			if err := m.InvalidMemberAssignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invalidMemberAssignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssignmentValidation) validateMembersAlreadyAssigned(formats strfmt.Registry) error {

	if swag.IsZero(m.MembersAlreadyAssigned) { // not required
		return nil
	}

	for i := 0; i < len(m.MembersAlreadyAssigned); i++ {
		if swag.IsZero(m.MembersAlreadyAssigned[i]) { // not required
			continue
		}

		if m.MembersAlreadyAssigned[i] != nil {
			if err := m.MembersAlreadyAssigned[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("membersAlreadyAssigned" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssignmentValidation) validateMembersAlreadyAssignedToOther(formats strfmt.Registry) error {

	if swag.IsZero(m.MembersAlreadyAssignedToOther) { // not required
		return nil
	}

	for i := 0; i < len(m.MembersAlreadyAssignedToOther); i++ {
		if swag.IsZero(m.MembersAlreadyAssignedToOther[i]) { // not required
			continue
		}

		if m.MembersAlreadyAssignedToOther[i] != nil {
			if err := m.MembersAlreadyAssignedToOther[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("membersAlreadyAssignedToOther" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssignmentValidation) validateMembersNotAssigned(formats strfmt.Registry) error {

	if swag.IsZero(m.MembersNotAssigned) { // not required
		return nil
	}

	for i := 0; i < len(m.MembersNotAssigned); i++ {
		if swag.IsZero(m.MembersNotAssigned[i]) { // not required
			continue
		}

		if m.MembersNotAssigned[i] != nil {
			if err := m.MembersNotAssigned[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("membersNotAssigned" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssignmentValidation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssignmentValidation) UnmarshalBinary(b []byte) error {
	var res AssignmentValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

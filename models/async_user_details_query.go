// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AsyncUserDetailsQuery async user details query
//
// swagger:model AsyncUserDetailsQuery
type AsyncUserDetailsQuery struct {

	// Specifies the date and time range of data being queried. Conversations MUST have started within this time range to potentially be included within the result set. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	// Required: true
	Interval *string `json:"interval"`

	// Specify number of results to be returned
	Limit int32 `json:"limit,omitempty"`

	// Sort the result set in ascending/descending order. Default is ascending
	// Enum: [asc desc unordered]
	Order string `json:"order,omitempty"`

	// Filters that target system and organization presence-level data
	PresenceFilters []*PresenceDetailQueryFilter `json:"presenceFilters"`

	// Filters that target agent routing status-level data
	RoutingStatusFilters []*RoutingStatusDetailQueryFilter `json:"routingStatusFilters"`

	// Filters that target the users to retrieve data for
	UserFilters []*UserDetailQueryFilter `json:"userFilters"`
}

// Validate validates this async user details query
func (m *AsyncUserDetailsQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresenceFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingStatusFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserFilters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AsyncUserDetailsQuery) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

var asyncUserDetailsQueryTypeOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["asc","desc","unordered"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		asyncUserDetailsQueryTypeOrderPropEnum = append(asyncUserDetailsQueryTypeOrderPropEnum, v)
	}
}

const (

	// AsyncUserDetailsQueryOrderAsc captures enum value "asc"
	AsyncUserDetailsQueryOrderAsc string = "asc"

	// AsyncUserDetailsQueryOrderDesc captures enum value "desc"
	AsyncUserDetailsQueryOrderDesc string = "desc"

	// AsyncUserDetailsQueryOrderUnordered captures enum value "unordered"
	AsyncUserDetailsQueryOrderUnordered string = "unordered"
)

// prop value enum
func (m *AsyncUserDetailsQuery) validateOrderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, asyncUserDetailsQueryTypeOrderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AsyncUserDetailsQuery) validateOrder(formats strfmt.Registry) error {
	if swag.IsZero(m.Order) { // not required
		return nil
	}

	// value enum
	if err := m.validateOrderEnum("order", "body", m.Order); err != nil {
		return err
	}

	return nil
}

func (m *AsyncUserDetailsQuery) validatePresenceFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.PresenceFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.PresenceFilters); i++ {
		if swag.IsZero(m.PresenceFilters[i]) { // not required
			continue
		}

		if m.PresenceFilters[i] != nil {
			if err := m.PresenceFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("presenceFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("presenceFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AsyncUserDetailsQuery) validateRoutingStatusFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.RoutingStatusFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.RoutingStatusFilters); i++ {
		if swag.IsZero(m.RoutingStatusFilters[i]) { // not required
			continue
		}

		if m.RoutingStatusFilters[i] != nil {
			if err := m.RoutingStatusFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routingStatusFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("routingStatusFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AsyncUserDetailsQuery) validateUserFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.UserFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.UserFilters); i++ {
		if swag.IsZero(m.UserFilters[i]) { // not required
			continue
		}

		if m.UserFilters[i] != nil {
			if err := m.UserFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this async user details query based on the context it is used
func (m *AsyncUserDetailsQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePresenceFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoutingStatusFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AsyncUserDetailsQuery) contextValidatePresenceFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PresenceFilters); i++ {

		if m.PresenceFilters[i] != nil {
			if err := m.PresenceFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("presenceFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("presenceFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AsyncUserDetailsQuery) contextValidateRoutingStatusFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RoutingStatusFilters); i++ {

		if m.RoutingStatusFilters[i] != nil {
			if err := m.RoutingStatusFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routingStatusFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("routingStatusFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AsyncUserDetailsQuery) contextValidateUserFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserFilters); i++ {

		if m.UserFilters[i] != nil {
			if err := m.UserFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AsyncUserDetailsQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AsyncUserDetailsQuery) UnmarshalBinary(b []byte) error {
	var res AsyncUserDetailsQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoutingStatus routing status
//
// swagger:model RoutingStatus
type RoutingStatus struct {

	// The timestamp when the agent went into this state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// Indicates the Routing State of the agent.  A value of OFF_QUEUE will be returned if the specified user does not exist.
	// Enum: [OFF_QUEUE IDLE INTERACTING NOT_RESPONDING COMMUNICATING]
	Status string `json:"status,omitempty"`

	// The userId of the agent
	UserID string `json:"userId,omitempty"`
}

// Validate validates this routing status
func (m *RoutingStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoutingStatus) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var routingStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OFF_QUEUE","IDLE","INTERACTING","NOT_RESPONDING","COMMUNICATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routingStatusTypeStatusPropEnum = append(routingStatusTypeStatusPropEnum, v)
	}
}

const (

	// RoutingStatusStatusOFFQUEUE captures enum value "OFF_QUEUE"
	RoutingStatusStatusOFFQUEUE string = "OFF_QUEUE"

	// RoutingStatusStatusIDLE captures enum value "IDLE"
	RoutingStatusStatusIDLE string = "IDLE"

	// RoutingStatusStatusINTERACTING captures enum value "INTERACTING"
	RoutingStatusStatusINTERACTING string = "INTERACTING"

	// RoutingStatusStatusNOTRESPONDING captures enum value "NOT_RESPONDING"
	RoutingStatusStatusNOTRESPONDING string = "NOT_RESPONDING"

	// RoutingStatusStatusCOMMUNICATING captures enum value "COMMUNICATING"
	RoutingStatusStatusCOMMUNICATING string = "COMMUNICATING"
)

// prop value enum
func (m *RoutingStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routingStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RoutingStatus) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoutingStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoutingStatus) UnmarshalBinary(b []byte) error {
	var res RoutingStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

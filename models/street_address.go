// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StreetAddress street address
//
// swagger:model StreetAddress
type StreetAddress struct {

	// State or Province
	// Required: true
	A1 *string `json:"A1"`

	// City or township
	// Required: true
	A3 *string `json:"A3"`

	// House Number
	// Required: true
	HNO *string `json:"HNO"`

	// extra location info like suite 300
	LOC string `json:"LOC,omitempty"`

	// Name of the customer
	NAM string `json:"NAM,omitempty"`

	// Postal code
	// Required: true
	PC *string `json:"PC"`

	// Number and street
	// Required: true
	RD *string `json:"RD"`

	// 2 Letter Country code, like US or GB
	// Required: true
	Country *string `json:"country"`
}

// Validate validates this street address
func (m *StreetAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateA1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateA3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHNO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRD(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StreetAddress) validateA1(formats strfmt.Registry) error {

	if err := validate.Required("A1", "body", m.A1); err != nil {
		return err
	}

	return nil
}

func (m *StreetAddress) validateA3(formats strfmt.Registry) error {

	if err := validate.Required("A3", "body", m.A3); err != nil {
		return err
	}

	return nil
}

func (m *StreetAddress) validateHNO(formats strfmt.Registry) error {

	if err := validate.Required("HNO", "body", m.HNO); err != nil {
		return err
	}

	return nil
}

func (m *StreetAddress) validatePC(formats strfmt.Registry) error {

	if err := validate.Required("PC", "body", m.PC); err != nil {
		return err
	}

	return nil
}

func (m *StreetAddress) validateRD(formats strfmt.Registry) error {

	if err := validate.Required("RD", "body", m.RD); err != nil {
		return err
	}

	return nil
}

func (m *StreetAddress) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this street address based on context it is used
func (m *StreetAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StreetAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StreetAddress) UnmarshalBinary(b []byte) error {
	var res StreetAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

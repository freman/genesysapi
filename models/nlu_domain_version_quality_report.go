// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NluDomainVersionQualityReport nlu domain version quality report
//
// swagger:model NluDomainVersionQualityReport
type NluDomainVersionQualityReport struct {

	// The confusion matrix for the Domain Version
	// Required: true
	ConfusionMatrix []*NluConfusionMatrixRow `json:"confusionMatrix"`

	// The quality report summary for the Domain Version
	// Required: true
	Summary *NluQualityReportSummary `json:"summary"`

	// The domain and version details of the quality report
	// Required: true
	Version *NluDomainVersion `json:"version"`
}

// Validate validates this nlu domain version quality report
func (m *NluDomainVersionQualityReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfusionMatrix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NluDomainVersionQualityReport) validateConfusionMatrix(formats strfmt.Registry) error {

	if err := validate.Required("confusionMatrix", "body", m.ConfusionMatrix); err != nil {
		return err
	}

	for i := 0; i < len(m.ConfusionMatrix); i++ {
		if swag.IsZero(m.ConfusionMatrix[i]) { // not required
			continue
		}

		if m.ConfusionMatrix[i] != nil {
			if err := m.ConfusionMatrix[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("confusionMatrix" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NluDomainVersionQualityReport) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("summary", "body", m.Summary); err != nil {
		return err
	}

	if m.Summary != nil {
		if err := m.Summary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summary")
			}
			return err
		}
	}

	return nil
}

func (m *NluDomainVersionQualityReport) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NluDomainVersionQualityReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NluDomainVersionQualityReport) UnmarshalBinary(b []byte) error {
	var res NluDomainVersionQualityReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

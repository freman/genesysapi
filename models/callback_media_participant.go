// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CallbackMediaParticipant callback media participant
//
// swagger:model CallbackMediaParticipant
type CallbackMediaParticipant struct {

	// The participant address.
	Address string `json:"address,omitempty"`

	// Specifies how long the agent has to answer an interaction before being marked as not responding.
	AlertingTimeoutMs int32 `json:"alertingTimeoutMs,omitempty"`

	// A list of ad-hoc attributes for the participant.
	Attributes map[string]string `json:"attributes,omitempty"`

	// The id of the config for automatically placing the callback (and handling the disposition). If absent, the callback will not be placed automatically but routed to an agent as per normal.
	AutomatedCallbackConfigID string `json:"automatedCallbackConfigId,omitempty"`

	// The list of phone number to use for this callback.
	CallbackNumbers []string `json:"callbackNumbers"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	CallbackScheduledTime strfmt.DateTime `json:"callbackScheduledTime,omitempty"`

	// The name of the callback target.
	CallbackUserName string `json:"callbackUserName,omitempty"`

	// The time when this participant went connected for this media (eg: video connected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	ConnectedTime strfmt.DateTime `json:"connectedTime,omitempty"`

	// Information on how a communication should be routed to an agent.
	ConversationRoutingData *ConversationRoutingData `json:"conversationRoutingData,omitempty"`

	// The participant's direction.  Values can be: 'inbound' or 'outbound'
	// Enum: [inbound outbound]
	Direction string `json:"direction,omitempty"`

	// The reason the participant was disconnected from the conversation.
	// Enum: [endpoint client system transfer transfer.conference transfer.consult transfer.forward transfer.noanswer transfer.notavailable transport.failure error peer other spam]
	DisconnectType string `json:"disconnectType,omitempty"`

	// The timestamp when this participant ended after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	EndAcwTime strfmt.DateTime `json:"endAcwTime,omitempty"`

	// The time when this participant went disconnected for this media (eg: video disconnected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// If the conversation ends in error, contains additional error details.
	ErrorInfo *ErrorInfo `json:"errorInfo,omitempty"`

	// True if the call for the callback uses external dialing.
	ExternalCampaign bool `json:"externalCampaign"`

	// If this participant represents an external contact, then this will be the reference for the external contact.
	ExternalContact *DomainEntityRef `json:"externalContact,omitempty"`

	// If this participant represents an external org, then this will be the reference for the external org.
	ExternalOrganization *DomainEntityRef `json:"externalOrganization,omitempty"`

	// The reason specifying why participant flagged the conversation.
	// Enum: [general]
	FlaggedReason string `json:"flaggedReason,omitempty"`

	// Value is true when the participant is on hold.
	Held bool `json:"held"`

	// The unique participant ID.
	ID string `json:"id,omitempty"`

	// Journey System data/context that is applicable to this communication.  When used for historical purposes, the context should be immutable.  When null, there is no applicable Journey System context.
	JourneyContext *JourneyContext `json:"journeyContext,omitempty"`

	// The display friendly name of the participant.
	Name string `json:"name,omitempty"`

	// The outbound preview associated with this callback.
	OutboundPreview *DialerPreview `json:"outboundPreview,omitempty"`

	// The peer communication corresponding to a matching leg for this communication.
	Peer string `json:"peer,omitempty"`

	// The source provider for the communication.
	Provider string `json:"provider,omitempty"`

	// The participant's purpose.  Values can be: 'agent', 'user', 'customer', 'external', 'acd', 'ivr
	Purpose string `json:"purpose,omitempty"`

	// The PureCloud queue for this participant.
	Queue *DomainEntityRef `json:"queue,omitempty"`

	// The Engage script that should be used by this participant.
	Script *DomainEntityRef `json:"script,omitempty"`

	// If true, the callback can be skipped.
	SkipEnabled bool `json:"skipEnabled"`

	// The timestamp when this participant started after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	StartAcwTime strfmt.DateTime `json:"startAcwTime,omitempty"`

	// The time when this participant's hold started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	StartHoldTime strfmt.DateTime `json:"startHoldTime,omitempty"`

	// The time when this participant first joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// The participant's state.  Values can be: 'alerting', 'connected', 'disconnected', 'dialing', 'contacting
	// Enum: [alerting dialing contacting offering connected disconnected terminated converting uploading transmitting none]
	State string `json:"state,omitempty"`

	// The PureCloud team for this participant.
	Team *DomainEntityRef `json:"team,omitempty"`

	// Duration in seconds before the callback will be auto-dialed.
	TimeoutSeconds int32 `json:"timeoutSeconds,omitempty"`

	// The PureCloud user for this participant.
	User *DomainEntityRef `json:"user,omitempty"`

	// The voicemail associated with this callback.
	Voicemail *Voicemail `json:"voicemail,omitempty"`

	// Wrapup for this participant, if it has been applied.
	Wrapup *Wrapup `json:"wrapup,omitempty"`

	// The wrap-up prompt indicating the type of wrap-up to be performed.
	WrapupPrompt string `json:"wrapupPrompt,omitempty"`

	// Value is true when the participant requires wrap-up.
	WrapupRequired bool `json:"wrapupRequired"`

	// Value is true when the participant has skipped wrap-up.
	WrapupSkipped bool `json:"wrapupSkipped"`

	// The amount of time the participant has to complete wrap-up.
	WrapupTimeoutMs int32 `json:"wrapupTimeoutMs,omitempty"`
}

// Validate validates this callback media participant
func (m *CallbackMediaParticipant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallbackScheduledTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversationRoutingData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisconnectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndAcwTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlaggedReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJourneyContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutboundPreview(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartAcwTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartHoldTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVoicemail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWrapup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CallbackMediaParticipant) validateCallbackScheduledTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CallbackScheduledTime) { // not required
		return nil
	}

	if err := validate.FormatOf("callbackScheduledTime", "body", "date-time", m.CallbackScheduledTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CallbackMediaParticipant) validateConnectedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("connectedTime", "body", "date-time", m.ConnectedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CallbackMediaParticipant) validateConversationRoutingData(formats strfmt.Registry) error {
	if swag.IsZero(m.ConversationRoutingData) { // not required
		return nil
	}

	if m.ConversationRoutingData != nil {
		if err := m.ConversationRoutingData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversationRoutingData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conversationRoutingData")
			}
			return err
		}
	}

	return nil
}

var callbackMediaParticipantTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["inbound","outbound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callbackMediaParticipantTypeDirectionPropEnum = append(callbackMediaParticipantTypeDirectionPropEnum, v)
	}
}

const (

	// CallbackMediaParticipantDirectionInbound captures enum value "inbound"
	CallbackMediaParticipantDirectionInbound string = "inbound"

	// CallbackMediaParticipantDirectionOutbound captures enum value "outbound"
	CallbackMediaParticipantDirectionOutbound string = "outbound"
)

// prop value enum
func (m *CallbackMediaParticipant) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, callbackMediaParticipantTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CallbackMediaParticipant) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

var callbackMediaParticipantTypeDisconnectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["endpoint","client","system","transfer","transfer.conference","transfer.consult","transfer.forward","transfer.noanswer","transfer.notavailable","transport.failure","error","peer","other","spam"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callbackMediaParticipantTypeDisconnectTypePropEnum = append(callbackMediaParticipantTypeDisconnectTypePropEnum, v)
	}
}

const (

	// CallbackMediaParticipantDisconnectTypeEndpoint captures enum value "endpoint"
	CallbackMediaParticipantDisconnectTypeEndpoint string = "endpoint"

	// CallbackMediaParticipantDisconnectTypeClient captures enum value "client"
	CallbackMediaParticipantDisconnectTypeClient string = "client"

	// CallbackMediaParticipantDisconnectTypeSystem captures enum value "system"
	CallbackMediaParticipantDisconnectTypeSystem string = "system"

	// CallbackMediaParticipantDisconnectTypeTransfer captures enum value "transfer"
	CallbackMediaParticipantDisconnectTypeTransfer string = "transfer"

	// CallbackMediaParticipantDisconnectTypeTransferDotConference captures enum value "transfer.conference"
	CallbackMediaParticipantDisconnectTypeTransferDotConference string = "transfer.conference"

	// CallbackMediaParticipantDisconnectTypeTransferDotConsult captures enum value "transfer.consult"
	CallbackMediaParticipantDisconnectTypeTransferDotConsult string = "transfer.consult"

	// CallbackMediaParticipantDisconnectTypeTransferDotForward captures enum value "transfer.forward"
	CallbackMediaParticipantDisconnectTypeTransferDotForward string = "transfer.forward"

	// CallbackMediaParticipantDisconnectTypeTransferDotNoanswer captures enum value "transfer.noanswer"
	CallbackMediaParticipantDisconnectTypeTransferDotNoanswer string = "transfer.noanswer"

	// CallbackMediaParticipantDisconnectTypeTransferDotNotavailable captures enum value "transfer.notavailable"
	CallbackMediaParticipantDisconnectTypeTransferDotNotavailable string = "transfer.notavailable"

	// CallbackMediaParticipantDisconnectTypeTransportDotFailure captures enum value "transport.failure"
	CallbackMediaParticipantDisconnectTypeTransportDotFailure string = "transport.failure"

	// CallbackMediaParticipantDisconnectTypeError captures enum value "error"
	CallbackMediaParticipantDisconnectTypeError string = "error"

	// CallbackMediaParticipantDisconnectTypePeer captures enum value "peer"
	CallbackMediaParticipantDisconnectTypePeer string = "peer"

	// CallbackMediaParticipantDisconnectTypeOther captures enum value "other"
	CallbackMediaParticipantDisconnectTypeOther string = "other"

	// CallbackMediaParticipantDisconnectTypeSpam captures enum value "spam"
	CallbackMediaParticipantDisconnectTypeSpam string = "spam"
)

// prop value enum
func (m *CallbackMediaParticipant) validateDisconnectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, callbackMediaParticipantTypeDisconnectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CallbackMediaParticipant) validateDisconnectType(formats strfmt.Registry) error {
	if swag.IsZero(m.DisconnectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDisconnectTypeEnum("disconnectType", "body", m.DisconnectType); err != nil {
		return err
	}

	return nil
}

func (m *CallbackMediaParticipant) validateEndAcwTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndAcwTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endAcwTime", "body", "date-time", m.EndAcwTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CallbackMediaParticipant) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CallbackMediaParticipant) validateErrorInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorInfo) { // not required
		return nil
	}

	if m.ErrorInfo != nil {
		if err := m.ErrorInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) validateExternalContact(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalContact) { // not required
		return nil
	}

	if m.ExternalContact != nil {
		if err := m.ExternalContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalContact")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) validateExternalOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalOrganization) { // not required
		return nil
	}

	if m.ExternalOrganization != nil {
		if err := m.ExternalOrganization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalOrganization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalOrganization")
			}
			return err
		}
	}

	return nil
}

var callbackMediaParticipantTypeFlaggedReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["general"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callbackMediaParticipantTypeFlaggedReasonPropEnum = append(callbackMediaParticipantTypeFlaggedReasonPropEnum, v)
	}
}

const (

	// CallbackMediaParticipantFlaggedReasonGeneral captures enum value "general"
	CallbackMediaParticipantFlaggedReasonGeneral string = "general"
)

// prop value enum
func (m *CallbackMediaParticipant) validateFlaggedReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, callbackMediaParticipantTypeFlaggedReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CallbackMediaParticipant) validateFlaggedReason(formats strfmt.Registry) error {
	if swag.IsZero(m.FlaggedReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlaggedReasonEnum("flaggedReason", "body", m.FlaggedReason); err != nil {
		return err
	}

	return nil
}

func (m *CallbackMediaParticipant) validateJourneyContext(formats strfmt.Registry) error {
	if swag.IsZero(m.JourneyContext) { // not required
		return nil
	}

	if m.JourneyContext != nil {
		if err := m.JourneyContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("journeyContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("journeyContext")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) validateOutboundPreview(formats strfmt.Registry) error {
	if swag.IsZero(m.OutboundPreview) { // not required
		return nil
	}

	if m.OutboundPreview != nil {
		if err := m.OutboundPreview.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outboundPreview")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outboundPreview")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) validateQueue(formats strfmt.Registry) error {
	if swag.IsZero(m.Queue) { // not required
		return nil
	}

	if m.Queue != nil {
		if err := m.Queue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) validateScript(formats strfmt.Registry) error {
	if swag.IsZero(m.Script) { // not required
		return nil
	}

	if m.Script != nil {
		if err := m.Script.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("script")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("script")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) validateStartAcwTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartAcwTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startAcwTime", "body", "date-time", m.StartAcwTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CallbackMediaParticipant) validateStartHoldTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartHoldTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startHoldTime", "body", "date-time", m.StartHoldTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CallbackMediaParticipant) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var callbackMediaParticipantTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["alerting","dialing","contacting","offering","connected","disconnected","terminated","converting","uploading","transmitting","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callbackMediaParticipantTypeStatePropEnum = append(callbackMediaParticipantTypeStatePropEnum, v)
	}
}

const (

	// CallbackMediaParticipantStateAlerting captures enum value "alerting"
	CallbackMediaParticipantStateAlerting string = "alerting"

	// CallbackMediaParticipantStateDialing captures enum value "dialing"
	CallbackMediaParticipantStateDialing string = "dialing"

	// CallbackMediaParticipantStateContacting captures enum value "contacting"
	CallbackMediaParticipantStateContacting string = "contacting"

	// CallbackMediaParticipantStateOffering captures enum value "offering"
	CallbackMediaParticipantStateOffering string = "offering"

	// CallbackMediaParticipantStateConnected captures enum value "connected"
	CallbackMediaParticipantStateConnected string = "connected"

	// CallbackMediaParticipantStateDisconnected captures enum value "disconnected"
	CallbackMediaParticipantStateDisconnected string = "disconnected"

	// CallbackMediaParticipantStateTerminated captures enum value "terminated"
	CallbackMediaParticipantStateTerminated string = "terminated"

	// CallbackMediaParticipantStateConverting captures enum value "converting"
	CallbackMediaParticipantStateConverting string = "converting"

	// CallbackMediaParticipantStateUploading captures enum value "uploading"
	CallbackMediaParticipantStateUploading string = "uploading"

	// CallbackMediaParticipantStateTransmitting captures enum value "transmitting"
	CallbackMediaParticipantStateTransmitting string = "transmitting"

	// CallbackMediaParticipantStateNone captures enum value "none"
	CallbackMediaParticipantStateNone string = "none"
)

// prop value enum
func (m *CallbackMediaParticipant) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, callbackMediaParticipantTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CallbackMediaParticipant) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *CallbackMediaParticipant) validateTeam(formats strfmt.Registry) error {
	if swag.IsZero(m.Team) { // not required
		return nil
	}

	if m.Team != nil {
		if err := m.Team.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("team")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) validateVoicemail(formats strfmt.Registry) error {
	if swag.IsZero(m.Voicemail) { // not required
		return nil
	}

	if m.Voicemail != nil {
		if err := m.Voicemail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("voicemail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("voicemail")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) validateWrapup(formats strfmt.Registry) error {
	if swag.IsZero(m.Wrapup) { // not required
		return nil
	}

	if m.Wrapup != nil {
		if err := m.Wrapup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wrapup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wrapup")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this callback media participant based on the context it is used
func (m *CallbackMediaParticipant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConversationRoutingData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJourneyContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutboundPreview(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVoicemail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWrapup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CallbackMediaParticipant) contextValidateConversationRoutingData(ctx context.Context, formats strfmt.Registry) error {

	if m.ConversationRoutingData != nil {
		if err := m.ConversationRoutingData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversationRoutingData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conversationRoutingData")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) contextValidateErrorInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ErrorInfo != nil {
		if err := m.ErrorInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) contextValidateExternalContact(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalContact != nil {
		if err := m.ExternalContact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalContact")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) contextValidateExternalOrganization(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalOrganization != nil {
		if err := m.ExternalOrganization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalOrganization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalOrganization")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) contextValidateJourneyContext(ctx context.Context, formats strfmt.Registry) error {

	if m.JourneyContext != nil {
		if err := m.JourneyContext.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("journeyContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("journeyContext")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) contextValidateOutboundPreview(ctx context.Context, formats strfmt.Registry) error {

	if m.OutboundPreview != nil {
		if err := m.OutboundPreview.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outboundPreview")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outboundPreview")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) contextValidateQueue(ctx context.Context, formats strfmt.Registry) error {

	if m.Queue != nil {
		if err := m.Queue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) contextValidateScript(ctx context.Context, formats strfmt.Registry) error {

	if m.Script != nil {
		if err := m.Script.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("script")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("script")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) contextValidateTeam(ctx context.Context, formats strfmt.Registry) error {

	if m.Team != nil {
		if err := m.Team.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("team")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) contextValidateVoicemail(ctx context.Context, formats strfmt.Registry) error {

	if m.Voicemail != nil {
		if err := m.Voicemail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("voicemail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("voicemail")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackMediaParticipant) contextValidateWrapup(ctx context.Context, formats strfmt.Registry) error {

	if m.Wrapup != nil {
		if err := m.Wrapup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wrapup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wrapup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CallbackMediaParticipant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CallbackMediaParticipant) UnmarshalBinary(b []byte) error {
	var res CallbackMediaParticipant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

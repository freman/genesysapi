// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchCallToAction patch call to action
//
// swagger:model PatchCallToAction
type PatchCallToAction struct {

	// Where the URL should be opened when the user clicks on the call to action button.
	// Enum: [Blank Self]
	Target string `json:"target,omitempty"`

	// Text displayed on the call to action button.
	Text string `json:"text,omitempty"`

	// URL to open when user clicks on the call to action button.
	URL string `json:"url,omitempty"`
}

// Validate validates this patch call to action
func (m *PatchCallToAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchCallToActionTypeTargetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Blank","Self"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchCallToActionTypeTargetPropEnum = append(patchCallToActionTypeTargetPropEnum, v)
	}
}

const (

	// PatchCallToActionTargetBlank captures enum value "Blank"
	PatchCallToActionTargetBlank string = "Blank"

	// PatchCallToActionTargetSelf captures enum value "Self"
	PatchCallToActionTargetSelf string = "Self"
)

// prop value enum
func (m *PatchCallToAction) validateTargetEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchCallToActionTypeTargetPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PatchCallToAction) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(m.Target) { // not required
		return nil
	}

	// value enum
	if err := m.validateTargetEnum("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchCallToAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchCallToAction) UnmarshalBinary(b []byte) error {
	var res PatchCallToAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

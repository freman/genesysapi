// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RuleSetDiagnostic rule set diagnostic
//
// swagger:model RuleSetDiagnostic
type RuleSetDiagnostic struct {

	// A campaign rule set
	// Read Only: true
	RuleSet *DomainEntityRef `json:"ruleSet,omitempty"`

	// Diagnostic warnings for the rule set
	// Read Only: true
	Warnings []string `json:"warnings"`
}

// Validate validates this rule set diagnostic
func (m *RuleSetDiagnostic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRuleSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuleSetDiagnostic) validateRuleSet(formats strfmt.Registry) error {

	if swag.IsZero(m.RuleSet) { // not required
		return nil
	}

	if m.RuleSet != nil {
		if err := m.RuleSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ruleSet")
			}
			return err
		}
	}

	return nil
}

var ruleSetDiagnosticWarningsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WRAPUP_CODE_NOT_IN_QUEUE","CONTACT_ATTRIBUTE_NOT_IN_CONTACT_LIST","NO_DNC_LIST_FOR_APPEND","PHONE_CONDITIONS_WITH_MULTICOLUMN_PREVIEW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ruleSetDiagnosticWarningsItemsEnum = append(ruleSetDiagnosticWarningsItemsEnum, v)
	}
}

func (m *RuleSetDiagnostic) validateWarningsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ruleSetDiagnosticWarningsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RuleSetDiagnostic) validateWarnings(formats strfmt.Registry) error {

	if swag.IsZero(m.Warnings) { // not required
		return nil
	}

	for i := 0; i < len(m.Warnings); i++ {

		// value enum
		if err := m.validateWarningsItemsEnum("warnings"+"."+strconv.Itoa(i), "body", m.Warnings[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RuleSetDiagnostic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RuleSetDiagnostic) UnmarshalBinary(b []byte) error {
	var res RuleSetDiagnostic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

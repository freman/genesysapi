// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExternalOrganization external organization
//
// swagger:model ExternalOrganization
type ExternalOrganization struct {

	// address
	Address *ContactAddress `json:"address,omitempty"`

	// company type
	CompanyType string `json:"companyType,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	CreateDate strfmt.DateTime `json:"createDate,omitempty"`

	// Custom fields defined in the schema referenced by schemaId and schemaVersion.
	CustomFields map[string]interface{} `json:"customFields,omitempty"`

	// employee count
	EmployeeCount int64 `json:"employeeCount,omitempty"`

	// Links to the sources of data (e.g. one source might be a CRM) that contributed data to this record.  Read-only, and only populated when requested via expand param.
	// Read Only: true
	ExternalDataSources []*ExternalDataSource `json:"externalDataSources"`

	// A string that identifies an external system-of-record resource that may have more detailed information on the organization. It should be a valid URL (including the http/https protocol, port, and path [if any]). The value is automatically trimmed of any leading and trailing whitespace.
	ExternalSystemURL string `json:"externalSystemUrl,omitempty"`

	// fax number
	FaxNumber *PhoneNumber `json:"faxNumber,omitempty"`

	// The globally unique identifier for the object.
	ID string `json:"id,omitempty"`

	// industry
	Industry string `json:"industry,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	ModifyDate strfmt.DateTime `json:"modifyDate,omitempty"`

	// The name of the company.
	// Required: true
	Name *string `json:"name"`

	// phone number
	PhoneNumber *PhoneNumber `json:"phoneNumber,omitempty"`

	// primary contact Id
	PrimaryContactID string `json:"primaryContactId,omitempty"`

	// revenue
	Revenue int64 `json:"revenue,omitempty"`

	// The schema defining custom fields for this contact
	Schema *DataSchema `json:"schema,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// tickers
	Tickers []*Ticker `json:"tickers"`

	// trustor
	Trustor *Trustor `json:"trustor,omitempty"`

	// twitter Id
	TwitterID *TwitterID `json:"twitterId,omitempty"`

	// websites
	Websites []string `json:"websites"`
}

// Validate validates this external organization
func (m *ExternalOrganization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalDataSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFaxNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifyDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTickers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrustor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTwitterID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExternalOrganization) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalOrganization) validateCreateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createDate", "body", "date-time", m.CreateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExternalOrganization) validateExternalDataSources(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalDataSources) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalDataSources); i++ {
		if swag.IsZero(m.ExternalDataSources[i]) { // not required
			continue
		}

		if m.ExternalDataSources[i] != nil {
			if err := m.ExternalDataSources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalDataSources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExternalOrganization) validateFaxNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.FaxNumber) { // not required
		return nil
	}

	if m.FaxNumber != nil {
		if err := m.FaxNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("faxNumber")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalOrganization) validateModifyDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifyDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modifyDate", "body", "date-time", m.ModifyDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExternalOrganization) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ExternalOrganization) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumber) { // not required
		return nil
	}

	if m.PhoneNumber != nil {
		if err := m.PhoneNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phoneNumber")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalOrganization) validateSchema(formats strfmt.Registry) error {

	if swag.IsZero(m.Schema) { // not required
		return nil
	}

	if m.Schema != nil {
		if err := m.Schema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalOrganization) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExternalOrganization) validateTickers(formats strfmt.Registry) error {

	if swag.IsZero(m.Tickers) { // not required
		return nil
	}

	for i := 0; i < len(m.Tickers); i++ {
		if swag.IsZero(m.Tickers[i]) { // not required
			continue
		}

		if m.Tickers[i] != nil {
			if err := m.Tickers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tickers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExternalOrganization) validateTrustor(formats strfmt.Registry) error {

	if swag.IsZero(m.Trustor) { // not required
		return nil
	}

	if m.Trustor != nil {
		if err := m.Trustor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trustor")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalOrganization) validateTwitterID(formats strfmt.Registry) error {

	if swag.IsZero(m.TwitterID) { // not required
		return nil
	}

	if m.TwitterID != nil {
		if err := m.TwitterID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("twitterId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExternalOrganization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExternalOrganization) UnmarshalBinary(b []byte) error {
	var res ExternalOrganization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchShiftTradesRequest search shift trades request
//
// swagger:model SearchShiftTradesRequest
type SearchShiftTradesRequest struct {

	// The ID of the schedule for which to search for available shift trades
	// Required: true
	ReceivingScheduleID *string `json:"receivingScheduleId"`

	// The IDs of shifts that the receiving user would potentially be willing to trade. If empty, only returns one sided trades (pick up a shift)
	// Unique: true
	ReceivingShiftIds []string `json:"receivingShiftIds"`
}

// Validate validates this search shift trades request
func (m *SearchShiftTradesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReceivingScheduleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivingShiftIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchShiftTradesRequest) validateReceivingScheduleID(formats strfmt.Registry) error {

	if err := validate.Required("receivingScheduleId", "body", m.ReceivingScheduleID); err != nil {
		return err
	}

	return nil
}

func (m *SearchShiftTradesRequest) validateReceivingShiftIds(formats strfmt.Registry) error {

	if swag.IsZero(m.ReceivingShiftIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("receivingShiftIds", "body", m.ReceivingShiftIds); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchShiftTradesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchShiftTradesRequest) UnmarshalBinary(b []byte) error {
	var res SearchShiftTradesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

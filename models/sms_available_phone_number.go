// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmsAvailablePhoneNumber sms available phone number
//
// swagger:model SmsAvailablePhoneNumber
type SmsAvailablePhoneNumber struct {

	// The address requirement needed for provisioning this number. If there is a requirement, the address must be the residence or place of business of the individual or entity using the phone number.
	// Enum: [none any local foreign]
	AddressRequirement string `json:"addressRequirement,omitempty"`

	// The capabilities of the phone number available for provisioning.
	Capabilities []string `json:"capabilities"`

	// The city the phone number is associated with.
	City string `json:"city,omitempty"`

	// The ISO 3166-1 alpha-2 country code of the country this phone number is associated with.
	CountryCode string `json:"countryCode,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// A phone number available for provisioning in E.164 format. E.g. +13175555555 or +34234234234
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// The type of phone number available for provisioning.
	// Enum: [local mobile tollfree shortcode]
	PhoneNumberType string `json:"phoneNumberType,omitempty"`

	// The region/province/state the phone number is associated with.
	Region string `json:"region,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this sms available phone number
func (m *SmsAvailablePhoneNumber) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressRequirement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumberType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var smsAvailablePhoneNumberTypeAddressRequirementPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","any","local","foreign"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smsAvailablePhoneNumberTypeAddressRequirementPropEnum = append(smsAvailablePhoneNumberTypeAddressRequirementPropEnum, v)
	}
}

const (

	// SmsAvailablePhoneNumberAddressRequirementNone captures enum value "none"
	SmsAvailablePhoneNumberAddressRequirementNone string = "none"

	// SmsAvailablePhoneNumberAddressRequirementAny captures enum value "any"
	SmsAvailablePhoneNumberAddressRequirementAny string = "any"

	// SmsAvailablePhoneNumberAddressRequirementLocal captures enum value "local"
	SmsAvailablePhoneNumberAddressRequirementLocal string = "local"

	// SmsAvailablePhoneNumberAddressRequirementForeign captures enum value "foreign"
	SmsAvailablePhoneNumberAddressRequirementForeign string = "foreign"
)

// prop value enum
func (m *SmsAvailablePhoneNumber) validateAddressRequirementEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, smsAvailablePhoneNumberTypeAddressRequirementPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmsAvailablePhoneNumber) validateAddressRequirement(formats strfmt.Registry) error {
	if swag.IsZero(m.AddressRequirement) { // not required
		return nil
	}

	// value enum
	if err := m.validateAddressRequirementEnum("addressRequirement", "body", m.AddressRequirement); err != nil {
		return err
	}

	return nil
}

var smsAvailablePhoneNumberCapabilitiesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sms","mms","voice"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smsAvailablePhoneNumberCapabilitiesItemsEnum = append(smsAvailablePhoneNumberCapabilitiesItemsEnum, v)
	}
}

func (m *SmsAvailablePhoneNumber) validateCapabilitiesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, smsAvailablePhoneNumberCapabilitiesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmsAvailablePhoneNumber) validateCapabilities(formats strfmt.Registry) error {
	if swag.IsZero(m.Capabilities) { // not required
		return nil
	}

	for i := 0; i < len(m.Capabilities); i++ {

		// value enum
		if err := m.validateCapabilitiesItemsEnum("capabilities"+"."+strconv.Itoa(i), "body", m.Capabilities[i]); err != nil {
			return err
		}

	}

	return nil
}

var smsAvailablePhoneNumberTypePhoneNumberTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["local","mobile","tollfree","shortcode"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smsAvailablePhoneNumberTypePhoneNumberTypePropEnum = append(smsAvailablePhoneNumberTypePhoneNumberTypePropEnum, v)
	}
}

const (

	// SmsAvailablePhoneNumberPhoneNumberTypeLocal captures enum value "local"
	SmsAvailablePhoneNumberPhoneNumberTypeLocal string = "local"

	// SmsAvailablePhoneNumberPhoneNumberTypeMobile captures enum value "mobile"
	SmsAvailablePhoneNumberPhoneNumberTypeMobile string = "mobile"

	// SmsAvailablePhoneNumberPhoneNumberTypeTollfree captures enum value "tollfree"
	SmsAvailablePhoneNumberPhoneNumberTypeTollfree string = "tollfree"

	// SmsAvailablePhoneNumberPhoneNumberTypeShortcode captures enum value "shortcode"
	SmsAvailablePhoneNumberPhoneNumberTypeShortcode string = "shortcode"
)

// prop value enum
func (m *SmsAvailablePhoneNumber) validatePhoneNumberTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, smsAvailablePhoneNumberTypePhoneNumberTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmsAvailablePhoneNumber) validatePhoneNumberType(formats strfmt.Registry) error {
	if swag.IsZero(m.PhoneNumberType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePhoneNumberTypeEnum("phoneNumberType", "body", m.PhoneNumberType); err != nil {
		return err
	}

	return nil
}

func (m *SmsAvailablePhoneNumber) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this sms available phone number based on the context it is used
func (m *SmsAvailablePhoneNumber) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmsAvailablePhoneNumber) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *SmsAvailablePhoneNumber) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmsAvailablePhoneNumber) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmsAvailablePhoneNumber) UnmarshalBinary(b []byte) error {
	var res SmsAvailablePhoneNumber
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

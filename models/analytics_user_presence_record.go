// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalyticsUserPresenceRecord analytics user presence record
//
// swagger:model AnalyticsUserPresenceRecord
type AnalyticsUserPresenceRecord struct {

	// The end time of the record. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// The identifier for the user's organization presence
	OrganizationPresenceID string `json:"organizationPresenceId,omitempty"`

	// The start time of the record. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// The user's system presence
	// Enum: [AVAILABLE AWAY BUSY OFFLINE IDLE ON_QUEUE MEAL TRAINING MEETING BREAK]
	SystemPresence string `json:"systemPresence,omitempty"`
}

// Validate validates this analytics user presence record
func (m *AnalyticsUserPresenceRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemPresence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyticsUserPresenceRecord) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnalyticsUserPresenceRecord) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var analyticsUserPresenceRecordTypeSystemPresencePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AVAILABLE","AWAY","BUSY","OFFLINE","IDLE","ON_QUEUE","MEAL","TRAINING","MEETING","BREAK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analyticsUserPresenceRecordTypeSystemPresencePropEnum = append(analyticsUserPresenceRecordTypeSystemPresencePropEnum, v)
	}
}

const (

	// AnalyticsUserPresenceRecordSystemPresenceAVAILABLE captures enum value "AVAILABLE"
	AnalyticsUserPresenceRecordSystemPresenceAVAILABLE string = "AVAILABLE"

	// AnalyticsUserPresenceRecordSystemPresenceAWAY captures enum value "AWAY"
	AnalyticsUserPresenceRecordSystemPresenceAWAY string = "AWAY"

	// AnalyticsUserPresenceRecordSystemPresenceBUSY captures enum value "BUSY"
	AnalyticsUserPresenceRecordSystemPresenceBUSY string = "BUSY"

	// AnalyticsUserPresenceRecordSystemPresenceOFFLINE captures enum value "OFFLINE"
	AnalyticsUserPresenceRecordSystemPresenceOFFLINE string = "OFFLINE"

	// AnalyticsUserPresenceRecordSystemPresenceIDLE captures enum value "IDLE"
	AnalyticsUserPresenceRecordSystemPresenceIDLE string = "IDLE"

	// AnalyticsUserPresenceRecordSystemPresenceONQUEUE captures enum value "ON_QUEUE"
	AnalyticsUserPresenceRecordSystemPresenceONQUEUE string = "ON_QUEUE"

	// AnalyticsUserPresenceRecordSystemPresenceMEAL captures enum value "MEAL"
	AnalyticsUserPresenceRecordSystemPresenceMEAL string = "MEAL"

	// AnalyticsUserPresenceRecordSystemPresenceTRAINING captures enum value "TRAINING"
	AnalyticsUserPresenceRecordSystemPresenceTRAINING string = "TRAINING"

	// AnalyticsUserPresenceRecordSystemPresenceMEETING captures enum value "MEETING"
	AnalyticsUserPresenceRecordSystemPresenceMEETING string = "MEETING"

	// AnalyticsUserPresenceRecordSystemPresenceBREAK captures enum value "BREAK"
	AnalyticsUserPresenceRecordSystemPresenceBREAK string = "BREAK"
)

// prop value enum
func (m *AnalyticsUserPresenceRecord) validateSystemPresenceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, analyticsUserPresenceRecordTypeSystemPresencePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AnalyticsUserPresenceRecord) validateSystemPresence(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemPresence) { // not required
		return nil
	}

	// value enum
	if err := m.validateSystemPresenceEnum("systemPresence", "body", m.SystemPresence); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this analytics user presence record based on context it is used
func (m *AnalyticsUserPresenceRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AnalyticsUserPresenceRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalyticsUserPresenceRecord) UnmarshalBinary(b []byte) error {
	var res AnalyticsUserPresenceRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

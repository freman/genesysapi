// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NamedEntityTypeBinding named entity type binding
//
// swagger:model NamedEntityTypeBinding
type NamedEntityTypeBinding struct {

	// The name that this named entity type is bound to.
	// Required: true
	EntityName *string `json:"entityName"`

	// The named entity type of the binding. It can be a built-in one such as builtin:number or a custom entity type such as BeverageType.
	// Required: true
	EntityType *string `json:"entityType"`
}

// Validate validates this named entity type binding
func (m *NamedEntityTypeBinding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NamedEntityTypeBinding) validateEntityName(formats strfmt.Registry) error {

	if err := validate.Required("entityName", "body", m.EntityName); err != nil {
		return err
	}

	return nil
}

func (m *NamedEntityTypeBinding) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entityType", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this named entity type binding based on context it is used
func (m *NamedEntityTypeBinding) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NamedEntityTypeBinding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NamedEntityTypeBinding) UnmarshalBinary(b []byte) error {
	var res NamedEntityTypeBinding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

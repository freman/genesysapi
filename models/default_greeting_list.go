// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DefaultGreetingList default greeting list
//
// swagger:model DefaultGreetingList
type DefaultGreetingList struct {

	// created by
	// Format: uri
	CreatedBy strfmt.URI `json:"createdBy,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// greetings
	Greetings map[string]Greeting `json:"greetings,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// modified by
	// Format: uri
	ModifiedBy strfmt.URI `json:"modifiedBy,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	ModifiedDate strfmt.DateTime `json:"modifiedDate,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owner
	Owner *GreetingOwner `json:"owner,omitempty"`

	// owner type
	// Enum: [USER ORGANIZATION GROUP]
	OwnerType string `json:"ownerType,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this default greeting list
func (m *DefaultGreetingList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGreetings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DefaultGreetingList) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if err := validate.FormatOf("createdBy", "body", "uri", m.CreatedBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DefaultGreetingList) validateCreatedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DefaultGreetingList) validateGreetings(formats strfmt.Registry) error {
	if swag.IsZero(m.Greetings) { // not required
		return nil
	}

	for k := range m.Greetings {

		if err := validate.Required("greetings"+"."+k, "body", m.Greetings[k]); err != nil {
			return err
		}
		if val, ok := m.Greetings[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("greetings" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("greetings" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *DefaultGreetingList) validateModifiedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedBy) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedBy", "body", "uri", m.ModifiedBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DefaultGreetingList) validateModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedDate", "body", "date-time", m.ModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DefaultGreetingList) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

var defaultGreetingListTypeOwnerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USER","ORGANIZATION","GROUP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		defaultGreetingListTypeOwnerTypePropEnum = append(defaultGreetingListTypeOwnerTypePropEnum, v)
	}
}

const (

	// DefaultGreetingListOwnerTypeUSER captures enum value "USER"
	DefaultGreetingListOwnerTypeUSER string = "USER"

	// DefaultGreetingListOwnerTypeORGANIZATION captures enum value "ORGANIZATION"
	DefaultGreetingListOwnerTypeORGANIZATION string = "ORGANIZATION"

	// DefaultGreetingListOwnerTypeGROUP captures enum value "GROUP"
	DefaultGreetingListOwnerTypeGROUP string = "GROUP"
)

// prop value enum
func (m *DefaultGreetingList) validateOwnerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, defaultGreetingListTypeOwnerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DefaultGreetingList) validateOwnerType(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOwnerTypeEnum("ownerType", "body", m.OwnerType); err != nil {
		return err
	}

	return nil
}

func (m *DefaultGreetingList) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this default greeting list based on the context it is used
func (m *DefaultGreetingList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGreetings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DefaultGreetingList) contextValidateGreetings(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Greetings {

		if val, ok := m.Greetings[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DefaultGreetingList) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *DefaultGreetingList) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {
		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultGreetingList) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DefaultGreetingList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefaultGreetingList) UnmarshalBinary(b []byte) error {
	var res DefaultGreetingList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

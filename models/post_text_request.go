// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostTextRequest post text request
//
// swagger:model PostTextRequest
type PostTextRequest struct {

	// amazon lex request
	AmazonLexRequest *AmazonLexRequest `json:"amazonLexRequest,omitempty"`

	// Alias/Version of the bot
	BotAlias string `json:"botAlias,omitempty"`

	// The channels this bot is utilizing
	BotChannels []string `json:"botChannels"`

	// Id for tracking the activity - this will be returned in the response
	BotCorrelationID string `json:"botCorrelationId,omitempty"`

	// ID of the bot to send the text to.
	// Required: true
	BotID *string `json:"botId"`

	// GUID for this bot's session
	// Required: true
	BotSessionID *string `json:"botSessionId"`

	// Override timeout for the bot session. This should be greater than 10 minutes.
	BotSessionTimeoutMinutes int32 `json:"botSessionTimeoutMinutes,omitempty"`

	// google dialogflow
	GoogleDialogflow *GoogleDialogflowCustomSettings `json:"googleDialogflow,omitempty"`

	// the integration service id for the bot's credentials
	// Required: true
	IntegrationID *string `json:"integrationId"`

	// The launguage code the bot will run under
	LanguageCode string `json:"languageCode,omitempty"`

	// Message to send to the bot
	// Required: true
	PostTextMessage *PostTextMessage `json:"postTextMessage"`
}

// Validate validates this post text request
func (m *PostTextRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonLexRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBotChannels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBotID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBotSessionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGoogleDialogflow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostTextMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostTextRequest) validateAmazonLexRequest(formats strfmt.Registry) error {

	if swag.IsZero(m.AmazonLexRequest) { // not required
		return nil
	}

	if m.AmazonLexRequest != nil {
		if err := m.AmazonLexRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonLexRequest")
			}
			return err
		}
	}

	return nil
}

var postTextRequestBotChannelsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Call","Callback","Messaging","Webchat"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postTextRequestBotChannelsItemsEnum = append(postTextRequestBotChannelsItemsEnum, v)
	}
}

func (m *PostTextRequest) validateBotChannelsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postTextRequestBotChannelsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PostTextRequest) validateBotChannels(formats strfmt.Registry) error {

	if swag.IsZero(m.BotChannels) { // not required
		return nil
	}

	for i := 0; i < len(m.BotChannels); i++ {

		// value enum
		if err := m.validateBotChannelsItemsEnum("botChannels"+"."+strconv.Itoa(i), "body", m.BotChannels[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *PostTextRequest) validateBotID(formats strfmt.Registry) error {

	if err := validate.Required("botId", "body", m.BotID); err != nil {
		return err
	}

	return nil
}

func (m *PostTextRequest) validateBotSessionID(formats strfmt.Registry) error {

	if err := validate.Required("botSessionId", "body", m.BotSessionID); err != nil {
		return err
	}

	return nil
}

func (m *PostTextRequest) validateGoogleDialogflow(formats strfmt.Registry) error {

	if swag.IsZero(m.GoogleDialogflow) { // not required
		return nil
	}

	if m.GoogleDialogflow != nil {
		if err := m.GoogleDialogflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("googleDialogflow")
			}
			return err
		}
	}

	return nil
}

func (m *PostTextRequest) validateIntegrationID(formats strfmt.Registry) error {

	if err := validate.Required("integrationId", "body", m.IntegrationID); err != nil {
		return err
	}

	return nil
}

func (m *PostTextRequest) validatePostTextMessage(formats strfmt.Registry) error {

	if err := validate.Required("postTextMessage", "body", m.PostTextMessage); err != nil {
		return err
	}

	if m.PostTextMessage != nil {
		if err := m.PostTextMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postTextMessage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostTextRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostTextRequest) UnmarshalBinary(b []byte) error {
	var res PostTextRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

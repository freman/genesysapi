// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BuAgentScheduleRescheduleResponse bu agent schedule reschedule response
//
// swagger:model BuAgentScheduleRescheduleResponse
type BuAgentScheduleRescheduleResponse struct {

	// Full day time off markers which apply to this agent schedule
	FullDayTimeOffMarkers []*BuFullDayTimeOffMarker `json:"fullDayTimeOffMarkers"`

	// The shift definitions for this agent schedule
	Shifts []*BuAgentScheduleShift `json:"shifts"`

	// The user to whom this agent schedule applies
	User *UserReference `json:"user,omitempty"`

	// The work plan for this user
	WorkPlan *WorkPlanReference `json:"workPlan,omitempty"`

	// The work plans per week for this user from the work plan rotation. Null values in the list denotes that user is not part of any work plan for that week
	WorkPlansPerWeek []*WorkPlanReference `json:"workPlansPerWeek"`
}

// Validate validates this bu agent schedule reschedule response
func (m *BuAgentScheduleRescheduleResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFullDayTimeOffMarkers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShifts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkPlansPerWeek(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuAgentScheduleRescheduleResponse) validateFullDayTimeOffMarkers(formats strfmt.Registry) error {

	if swag.IsZero(m.FullDayTimeOffMarkers) { // not required
		return nil
	}

	for i := 0; i < len(m.FullDayTimeOffMarkers); i++ {
		if swag.IsZero(m.FullDayTimeOffMarkers[i]) { // not required
			continue
		}

		if m.FullDayTimeOffMarkers[i] != nil {
			if err := m.FullDayTimeOffMarkers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fullDayTimeOffMarkers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuAgentScheduleRescheduleResponse) validateShifts(formats strfmt.Registry) error {

	if swag.IsZero(m.Shifts) { // not required
		return nil
	}

	for i := 0; i < len(m.Shifts); i++ {
		if swag.IsZero(m.Shifts[i]) { // not required
			continue
		}

		if m.Shifts[i] != nil {
			if err := m.Shifts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shifts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuAgentScheduleRescheduleResponse) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *BuAgentScheduleRescheduleResponse) validateWorkPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkPlan) { // not required
		return nil
	}

	if m.WorkPlan != nil {
		if err := m.WorkPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workPlan")
			}
			return err
		}
	}

	return nil
}

func (m *BuAgentScheduleRescheduleResponse) validateWorkPlansPerWeek(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkPlansPerWeek) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkPlansPerWeek); i++ {
		if swag.IsZero(m.WorkPlansPerWeek[i]) { // not required
			continue
		}

		if m.WorkPlansPerWeek[i] != nil {
			if err := m.WorkPlansPerWeek[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workPlansPerWeek" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuAgentScheduleRescheduleResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuAgentScheduleRescheduleResponse) UnmarshalBinary(b []byte) error {
	var res BuAgentScheduleRescheduleResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

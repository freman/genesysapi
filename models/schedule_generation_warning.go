// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduleGenerationWarning Schedule generation warning
//
// swagger:model ScheduleGenerationWarning
type ScheduleGenerationWarning struct {

	// Days agent was scheduled but there was no need to meet. The scheduled days have no effect on service levels
	// Unique: true
	NoNeedDays []string `json:"noNeedDays"`

	// Whether the schedule did not meet the minimum time between shifts defined in the agent work plan
	ShiftsTooCloseTogether bool `json:"shiftsTooCloseTogether"`

	// Whether the number of scheduled days exceeded the maximum days to schedule defined in the agent work plan
	UnableToMeetMaxDays bool `json:"unableToMeetMaxDays"`

	// Whether the schedule exceeded the maximum paid time for the week defined in the agent work plan
	UnableToMeetMaxPaidForTheWeek bool `json:"unableToMeetMaxPaidForTheWeek"`

	// Whether the schedule did not meet the minimum paid time for the week defined in the agent work plan
	UnableToMeetMinPaidForTheWeek bool `json:"unableToMeetMinPaidForTheWeek"`

	// Days indicated as required to work in agent work plan where no viable shift was found to schedule
	// Unique: true
	UnableToScheduleRequiredDays []string `json:"unableToScheduleRequiredDays"`

	// ID of the user in the warning
	UserID string `json:"userId,omitempty"`

	// Whether the user does not have the appropriate license to be scheduled
	UserNotLicensed bool `json:"userNotLicensed"`
}

// Validate validates this schedule generation warning
func (m *ScheduleGenerationWarning) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNoNeedDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnableToScheduleRequiredDays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var scheduleGenerationWarningNoNeedDaysItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleGenerationWarningNoNeedDaysItemsEnum = append(scheduleGenerationWarningNoNeedDaysItemsEnum, v)
	}
}

func (m *ScheduleGenerationWarning) validateNoNeedDaysItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduleGenerationWarningNoNeedDaysItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScheduleGenerationWarning) validateNoNeedDays(formats strfmt.Registry) error {

	if swag.IsZero(m.NoNeedDays) { // not required
		return nil
	}

	if err := validate.UniqueItems("noNeedDays", "body", m.NoNeedDays); err != nil {
		return err
	}

	for i := 0; i < len(m.NoNeedDays); i++ {

		// value enum
		if err := m.validateNoNeedDaysItemsEnum("noNeedDays"+"."+strconv.Itoa(i), "body", m.NoNeedDays[i]); err != nil {
			return err
		}

	}

	return nil
}

var scheduleGenerationWarningUnableToScheduleRequiredDaysItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleGenerationWarningUnableToScheduleRequiredDaysItemsEnum = append(scheduleGenerationWarningUnableToScheduleRequiredDaysItemsEnum, v)
	}
}

func (m *ScheduleGenerationWarning) validateUnableToScheduleRequiredDaysItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduleGenerationWarningUnableToScheduleRequiredDaysItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScheduleGenerationWarning) validateUnableToScheduleRequiredDays(formats strfmt.Registry) error {

	if swag.IsZero(m.UnableToScheduleRequiredDays) { // not required
		return nil
	}

	if err := validate.UniqueItems("unableToScheduleRequiredDays", "body", m.UnableToScheduleRequiredDays); err != nil {
		return err
	}

	for i := 0; i < len(m.UnableToScheduleRequiredDays); i++ {

		// value enum
		if err := m.validateUnableToScheduleRequiredDaysItemsEnum("unableToScheduleRequiredDays"+"."+strconv.Itoa(i), "body", m.UnableToScheduleRequiredDays[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleGenerationWarning) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleGenerationWarning) UnmarshalBinary(b []byte) error {
	var res ScheduleGenerationWarning
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

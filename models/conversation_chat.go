// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConversationChat conversation chat
//
// swagger:model ConversationChat
type ConversationChat struct {

	// After-call work for the communication.
	AfterCallWork *AfterCallWork `json:"afterCallWork,omitempty"`

	// Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.
	AfterCallWorkRequired bool `json:"afterCallWorkRequired"`

	// If available, the URI to the avatar image of this communication.
	AvatarImageURL string `json:"avatarImageUrl,omitempty"`

	// The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	ConnectedTime strfmt.DateTime `json:"connectedTime,omitempty"`

	// The direction of the chat
	// Enum: [inbound outbound]
	Direction string `json:"direction,omitempty"`

	// System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
	// Enum: [endpoint client system transfer transfer.conference transfer.consult transfer.forward error peer other uncallable timeout]
	DisconnectType string `json:"disconnectType,omitempty"`

	// The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DisconnectedTime strfmt.DateTime `json:"disconnectedTime,omitempty"`

	// True if this call is held and the person on this side hears silence.
	Held bool `json:"held"`

	// A globally unique identifier for this communication.
	ID string `json:"id,omitempty"`

	// A subset of the Journey System's data relevant to a part of a conversation (for external linkage and internal usage/context).
	JourneyContext *JourneyContext `json:"journeyContext,omitempty"`

	// The id of the peer communication corresponding to a matching leg for this communication.
	PeerID string `json:"peerId,omitempty"`

	// The source provider for the email.
	Provider string `json:"provider,omitempty"`

	// A globally unique identifier for the recording associated with this chat.
	RecordingID string `json:"recordingId,omitempty"`

	// The room id for the chat.
	RoomID string `json:"roomId,omitempty"`

	// The UUID of the script to use.
	ScriptID string `json:"scriptId,omitempty"`

	// The time line of the participant's chat, divided into activity segments.
	Segments []*Segment `json:"segments"`

	// The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	StartAlertingTime strfmt.DateTime `json:"startAlertingTime,omitempty"`

	// The timestamp the chat was placed on hold in the cloud clock if the chat is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	StartHoldTime strfmt.DateTime `json:"startHoldTime,omitempty"`

	// The connection state of this communication.
	// Enum: [alerting dialing contacting offering connected disconnected terminated none]
	State string `json:"state,omitempty"`

	// Call wrap up or disposition data.
	Wrapup *Wrapup `json:"wrapup,omitempty"`
}

// Validate validates this conversation chat
func (m *ConversationChat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAfterCallWork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisconnectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisconnectedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJourneyContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSegments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartAlertingTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartHoldTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWrapup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConversationChat) validateAfterCallWork(formats strfmt.Registry) error {

	if swag.IsZero(m.AfterCallWork) { // not required
		return nil
	}

	if m.AfterCallWork != nil {
		if err := m.AfterCallWork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("afterCallWork")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationChat) validateConnectedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("connectedTime", "body", "date-time", m.ConnectedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var conversationChatTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["inbound","outbound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conversationChatTypeDirectionPropEnum = append(conversationChatTypeDirectionPropEnum, v)
	}
}

const (

	// ConversationChatDirectionInbound captures enum value "inbound"
	ConversationChatDirectionInbound string = "inbound"

	// ConversationChatDirectionOutbound captures enum value "outbound"
	ConversationChatDirectionOutbound string = "outbound"
)

// prop value enum
func (m *ConversationChat) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, conversationChatTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConversationChat) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

var conversationChatTypeDisconnectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["endpoint","client","system","transfer","transfer.conference","transfer.consult","transfer.forward","error","peer","other","uncallable","timeout"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conversationChatTypeDisconnectTypePropEnum = append(conversationChatTypeDisconnectTypePropEnum, v)
	}
}

const (

	// ConversationChatDisconnectTypeEndpoint captures enum value "endpoint"
	ConversationChatDisconnectTypeEndpoint string = "endpoint"

	// ConversationChatDisconnectTypeClient captures enum value "client"
	ConversationChatDisconnectTypeClient string = "client"

	// ConversationChatDisconnectTypeSystem captures enum value "system"
	ConversationChatDisconnectTypeSystem string = "system"

	// ConversationChatDisconnectTypeTransfer captures enum value "transfer"
	ConversationChatDisconnectTypeTransfer string = "transfer"

	// ConversationChatDisconnectTypeTransferConference captures enum value "transfer.conference"
	ConversationChatDisconnectTypeTransferConference string = "transfer.conference"

	// ConversationChatDisconnectTypeTransferConsult captures enum value "transfer.consult"
	ConversationChatDisconnectTypeTransferConsult string = "transfer.consult"

	// ConversationChatDisconnectTypeTransferForward captures enum value "transfer.forward"
	ConversationChatDisconnectTypeTransferForward string = "transfer.forward"

	// ConversationChatDisconnectTypeError captures enum value "error"
	ConversationChatDisconnectTypeError string = "error"

	// ConversationChatDisconnectTypePeer captures enum value "peer"
	ConversationChatDisconnectTypePeer string = "peer"

	// ConversationChatDisconnectTypeOther captures enum value "other"
	ConversationChatDisconnectTypeOther string = "other"

	// ConversationChatDisconnectTypeUncallable captures enum value "uncallable"
	ConversationChatDisconnectTypeUncallable string = "uncallable"

	// ConversationChatDisconnectTypeTimeout captures enum value "timeout"
	ConversationChatDisconnectTypeTimeout string = "timeout"
)

// prop value enum
func (m *ConversationChat) validateDisconnectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, conversationChatTypeDisconnectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConversationChat) validateDisconnectType(formats strfmt.Registry) error {

	if swag.IsZero(m.DisconnectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDisconnectTypeEnum("disconnectType", "body", m.DisconnectType); err != nil {
		return err
	}

	return nil
}

func (m *ConversationChat) validateDisconnectedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.DisconnectedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("disconnectedTime", "body", "date-time", m.DisconnectedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConversationChat) validateJourneyContext(formats strfmt.Registry) error {

	if swag.IsZero(m.JourneyContext) { // not required
		return nil
	}

	if m.JourneyContext != nil {
		if err := m.JourneyContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("journeyContext")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationChat) validateSegments(formats strfmt.Registry) error {

	if swag.IsZero(m.Segments) { // not required
		return nil
	}

	for i := 0; i < len(m.Segments); i++ {
		if swag.IsZero(m.Segments[i]) { // not required
			continue
		}

		if m.Segments[i] != nil {
			if err := m.Segments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConversationChat) validateStartAlertingTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartAlertingTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startAlertingTime", "body", "date-time", m.StartAlertingTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConversationChat) validateStartHoldTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartHoldTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startHoldTime", "body", "date-time", m.StartHoldTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var conversationChatTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["alerting","dialing","contacting","offering","connected","disconnected","terminated","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conversationChatTypeStatePropEnum = append(conversationChatTypeStatePropEnum, v)
	}
}

const (

	// ConversationChatStateAlerting captures enum value "alerting"
	ConversationChatStateAlerting string = "alerting"

	// ConversationChatStateDialing captures enum value "dialing"
	ConversationChatStateDialing string = "dialing"

	// ConversationChatStateContacting captures enum value "contacting"
	ConversationChatStateContacting string = "contacting"

	// ConversationChatStateOffering captures enum value "offering"
	ConversationChatStateOffering string = "offering"

	// ConversationChatStateConnected captures enum value "connected"
	ConversationChatStateConnected string = "connected"

	// ConversationChatStateDisconnected captures enum value "disconnected"
	ConversationChatStateDisconnected string = "disconnected"

	// ConversationChatStateTerminated captures enum value "terminated"
	ConversationChatStateTerminated string = "terminated"

	// ConversationChatStateNone captures enum value "none"
	ConversationChatStateNone string = "none"
)

// prop value enum
func (m *ConversationChat) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, conversationChatTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConversationChat) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *ConversationChat) validateWrapup(formats strfmt.Registry) error {

	if swag.IsZero(m.Wrapup) { // not required
		return nil
	}

	if m.Wrapup != nil {
		if err := m.Wrapup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wrapup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConversationChat) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConversationChat) UnmarshalBinary(b []byte) error {
	var res ConversationChat
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

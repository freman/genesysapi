// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditMessage audit message
//
// swagger:model AuditMessage
type AuditMessage struct {

	// A string representing the action that took place
	Action string `json:"action,omitempty"`

	// The context of a system-level action
	ActionContext string `json:"actionContext,omitempty"`

	// The application through which the action of this AuditMessage was initiated.
	Application string `json:"application,omitempty"`

	// Details about any changes that occurred in this audit
	Changes []*Change `json:"changes"`

	// Correlation ID.
	CorrelationID string `json:"correlationId,omitempty"`

	// entity
	Entity *AuditEntity `json:"entity,omitempty"`

	// AuditMessage ID.
	// Required: true
	ID *string `json:"id"`

	// The level of this audit. USER or SYSTEM.
	// Required: true
	Level *string `json:"level"`

	// The time at which this AuditMessage was received.
	// Required: true
	ReceivedTimestamp *string `json:"receivedTimestamp"`

	// The service-specific context associated with this AuditMessage.
	ServiceContext *ServiceContext `json:"serviceContext,omitempty"`

	// The name of the service which sent this AuditMessage.
	// Required: true
	ServiceName *string `json:"serviceName"`

	// The status of the action of this AuditMessage
	// Required: true
	Status *string `json:"status"`

	// The time at which the action of this AuditMessage was initiated.
	Timestamp string `json:"timestamp,omitempty"`

	// Transaction ID.
	TransactionID string `json:"transactionId,omitempty"`

	// Whether or not this audit can be considered the initiator of the transaction it is a part of.
	TransactionInitiator bool `json:"transactionInitiator"`

	// user
	User *AuditUser `json:"user,omitempty"`
}

// Validate validates this audit message
func (m *AuditMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditMessage) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AuditMessage) validateEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	if m.Entity != nil {
		if err := m.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *AuditMessage) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AuditMessage) validateLevel(formats strfmt.Registry) error {

	if err := validate.Required("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

func (m *AuditMessage) validateReceivedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("receivedTimestamp", "body", m.ReceivedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *AuditMessage) validateServiceContext(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceContext) { // not required
		return nil
	}

	if m.ServiceContext != nil {
		if err := m.ServiceContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceContext")
			}
			return err
		}
	}

	return nil
}

func (m *AuditMessage) validateServiceName(formats strfmt.Registry) error {

	if err := validate.Required("serviceName", "body", m.ServiceName); err != nil {
		return err
	}

	return nil
}

func (m *AuditMessage) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *AuditMessage) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditMessage) UnmarshalBinary(b []byte) error {
	var res AuditMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

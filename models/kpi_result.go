// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KpiResult kpi result
//
// swagger:model KpiResult
type KpiResult struct {

	// Total interactions not routed by predictive routing (GPR was off)
	// Read Only: true
	InteractionCountOff int32 `json:"interactionCountOff,omitempty"`

	// Total interactions handled by predictive routing (GPR was on)
	// Read Only: true
	InteractionCountOn int32 `json:"interactionCountOn,omitempty"`

	// Absolute metric (in which the KPI is based) total for the interactions not routed by predictive routing (GPR was off)
	// Read Only: true
	KpiTotalOff int32 `json:"kpiTotalOff,omitempty"`

	// Absolute metric (in which the KPI is based) total for the interactions handled by predictive routing (GPR was on)
	// Read Only: true
	KpiTotalOn int32 `json:"kpiTotalOn,omitempty"`

	// Media type used for the KPI
	// Read Only: true
	// Enum: [Voice Email Message]
	MediaType string `json:"mediaType,omitempty"`
}

// Validate validates this kpi result
func (m *KpiResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var kpiResultTypeMediaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Voice","Email","Message"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kpiResultTypeMediaTypePropEnum = append(kpiResultTypeMediaTypePropEnum, v)
	}
}

const (

	// KpiResultMediaTypeVoice captures enum value "Voice"
	KpiResultMediaTypeVoice string = "Voice"

	// KpiResultMediaTypeEmail captures enum value "Email"
	KpiResultMediaTypeEmail string = "Email"

	// KpiResultMediaTypeMessage captures enum value "Message"
	KpiResultMediaTypeMessage string = "Message"
)

// prop value enum
func (m *KpiResult) validateMediaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kpiResultTypeMediaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KpiResult) validateMediaType(formats strfmt.Registry) error {

	if swag.IsZero(m.MediaType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMediaTypeEnum("mediaType", "body", m.MediaType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KpiResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KpiResult) UnmarshalBinary(b []byte) error {
	var res KpiResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Device device
//
// swagger:model Device
type Device struct {

	// Device category.
	// Required: true
	// Enum: [desktop mobile tablet other]
	Category *string `json:"category"`

	// Fingerprint generated by looking at the individual device features.
	Fingerprint string `json:"fingerprint,omitempty"`

	// Flag that is true for mobile devices.
	IsMobile bool `json:"isMobile"`

	// Operating system family.
	// Required: true
	OsFamily *string `json:"osFamily"`

	// Operating system version.
	// Required: true
	OsVersion *string `json:"osVersion"`

	// Device's screen height.
	ScreenHeight int32 `json:"screenHeight,omitempty"`

	// Device's screen width.
	ScreenWidth int32 `json:"screenWidth,omitempty"`

	// Device type (e.g. iPad, iPhone, Other).
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this device
func (m *Device) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsFamily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["desktop","mobile","tablet","other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceTypeCategoryPropEnum = append(deviceTypeCategoryPropEnum, v)
	}
}

const (

	// DeviceCategoryDesktop captures enum value "desktop"
	DeviceCategoryDesktop string = "desktop"

	// DeviceCategoryMobile captures enum value "mobile"
	DeviceCategoryMobile string = "mobile"

	// DeviceCategoryTablet captures enum value "tablet"
	DeviceCategoryTablet string = "tablet"

	// DeviceCategoryOther captures enum value "other"
	DeviceCategoryOther string = "other"
)

// prop value enum
func (m *Device) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceTypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Device) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", *m.Category); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateOsFamily(formats strfmt.Registry) error {

	if err := validate.Required("osFamily", "body", m.OsFamily); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateOsVersion(formats strfmt.Registry) error {

	if err := validate.Required("osVersion", "body", m.OsVersion); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this device based on context it is used
func (m *Device) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Device) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Device) UnmarshalBinary(b []byte) error {
	var res Device
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

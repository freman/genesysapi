// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TopicRequest topic request
//
// swagger:model TopicRequest
type TopicRequest struct {

	// The topic description
	Description string `json:"description,omitempty"`

	// The topic dialect
	// Required: true
	Dialect *string `json:"dialect"`

	// The topic name
	// Required: true
	Name *string `json:"name"`

	// The topic participants, default value is All
	// Enum: [External Internal All]
	Participants string `json:"participants,omitempty"`

	// The topic phrases
	Phrases []*Phrase `json:"phrases"`

	// The ids of programs associated to the topic
	ProgramIds []string `json:"programIds"`

	// The topic strictness, default value is 72
	// Enum: [1 55 65 72 85 90]
	Strictness string `json:"strictness,omitempty"`

	// The topic tags
	Tags []string `json:"tags"`
}

// Validate validates this topic request
func (m *TopicRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDialect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipants(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhrases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrictness(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopicRequest) validateDialect(formats strfmt.Registry) error {

	if err := validate.Required("dialect", "body", m.Dialect); err != nil {
		return err
	}

	return nil
}

func (m *TopicRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var topicRequestTypeParticipantsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["External","Internal","All"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		topicRequestTypeParticipantsPropEnum = append(topicRequestTypeParticipantsPropEnum, v)
	}
}

const (

	// TopicRequestParticipantsExternal captures enum value "External"
	TopicRequestParticipantsExternal string = "External"

	// TopicRequestParticipantsInternal captures enum value "Internal"
	TopicRequestParticipantsInternal string = "Internal"

	// TopicRequestParticipantsAll captures enum value "All"
	TopicRequestParticipantsAll string = "All"
)

// prop value enum
func (m *TopicRequest) validateParticipantsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, topicRequestTypeParticipantsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TopicRequest) validateParticipants(formats strfmt.Registry) error {
	if swag.IsZero(m.Participants) { // not required
		return nil
	}

	// value enum
	if err := m.validateParticipantsEnum("participants", "body", m.Participants); err != nil {
		return err
	}

	return nil
}

func (m *TopicRequest) validatePhrases(formats strfmt.Registry) error {
	if swag.IsZero(m.Phrases) { // not required
		return nil
	}

	for i := 0; i < len(m.Phrases); i++ {
		if swag.IsZero(m.Phrases[i]) { // not required
			continue
		}

		if m.Phrases[i] != nil {
			if err := m.Phrases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phrases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("phrases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var topicRequestTypeStrictnessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1","55","65","72","85","90"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		topicRequestTypeStrictnessPropEnum = append(topicRequestTypeStrictnessPropEnum, v)
	}
}

const (

	// TopicRequestStrictnessNr1 captures enum value "1"
	TopicRequestStrictnessNr1 string = "1"

	// TopicRequestStrictnessNr55 captures enum value "55"
	TopicRequestStrictnessNr55 string = "55"

	// TopicRequestStrictnessNr65 captures enum value "65"
	TopicRequestStrictnessNr65 string = "65"

	// TopicRequestStrictnessNr72 captures enum value "72"
	TopicRequestStrictnessNr72 string = "72"

	// TopicRequestStrictnessNr85 captures enum value "85"
	TopicRequestStrictnessNr85 string = "85"

	// TopicRequestStrictnessNr90 captures enum value "90"
	TopicRequestStrictnessNr90 string = "90"
)

// prop value enum
func (m *TopicRequest) validateStrictnessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, topicRequestTypeStrictnessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TopicRequest) validateStrictness(formats strfmt.Registry) error {
	if swag.IsZero(m.Strictness) { // not required
		return nil
	}

	// value enum
	if err := m.validateStrictnessEnum("strictness", "body", m.Strictness); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this topic request based on the context it is used
func (m *TopicRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePhrases(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopicRequest) contextValidatePhrases(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Phrases); i++ {

		if m.Phrases[i] != nil {
			if err := m.Phrases[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phrases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("phrases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TopicRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopicRequest) UnmarshalBinary(b []byte) error {
	var res TopicRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

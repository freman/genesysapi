// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ScheduleGenerationResult schedule generation result
//
// swagger:model ScheduleGenerationResult
type ScheduleGenerationResult struct {

	// Whether the schedule generation run failed
	Failed bool `json:"failed"`

	// The number of schedule generation messages for this schedule generation run
	MessageCount int32 `json:"messageCount,omitempty"`

	// The list of messages by severity in this schedule generation run
	MessageSeverities []*SchedulerMessageTypeSeverity `json:"messageSeverities"`

	// User facing messages related to the schedule generation run
	Messages []*ScheduleGenerationMessage `json:"messages"`

	// The ID of the schedule generation run. Reference this when requesting support
	RunID string `json:"runId,omitempty"`
}

// Validate validates this schedule generation result
func (m *ScheduleGenerationResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessageSeverities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleGenerationResult) validateMessageSeverities(formats strfmt.Registry) error {
	if swag.IsZero(m.MessageSeverities) { // not required
		return nil
	}

	for i := 0; i < len(m.MessageSeverities); i++ {
		if swag.IsZero(m.MessageSeverities[i]) { // not required
			continue
		}

		if m.MessageSeverities[i] != nil {
			if err := m.MessageSeverities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messageSeverities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messageSeverities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScheduleGenerationResult) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	for i := 0; i < len(m.Messages); i++ {
		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {
			if err := m.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this schedule generation result based on the context it is used
func (m *ScheduleGenerationResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMessageSeverities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleGenerationResult) contextValidateMessageSeverities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MessageSeverities); i++ {

		if m.MessageSeverities[i] != nil {
			if err := m.MessageSeverities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messageSeverities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messageSeverities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScheduleGenerationResult) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Messages); i++ {

		if m.Messages[i] != nil {
			if err := m.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleGenerationResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleGenerationResult) UnmarshalBinary(b []byte) error {
	var res ScheduleGenerationResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

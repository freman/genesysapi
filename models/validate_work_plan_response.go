// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ValidateWorkPlanResponse validate work plan response
//
// swagger:model ValidateWorkPlanResponse
type ValidateWorkPlanResponse struct {

	// Validation messages for this work plan
	Messages *ValidateWorkPlanMessages `json:"messages,omitempty"`

	// Whether the work plan is valid or not
	Valid bool `json:"valid"`

	// The work plan reference associated with this response
	WorkPlan *WorkPlanReference `json:"workPlan,omitempty"`
}

// Validate validates this validate work plan response
func (m *ValidateWorkPlanResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkPlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidateWorkPlanResponse) validateMessages(formats strfmt.Registry) error {

	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	if m.Messages != nil {
		if err := m.Messages.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messages")
			}
			return err
		}
	}

	return nil
}

func (m *ValidateWorkPlanResponse) validateWorkPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkPlan) { // not required
		return nil
	}

	if m.WorkPlan != nil {
		if err := m.WorkPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workPlan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidateWorkPlanResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidateWorkPlanResponse) UnmarshalBinary(b []byte) error {
	var res ValidateWorkPlanResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RealTimeAdherenceExplanation real time adherence explanation
//
// swagger:model RealTimeAdherenceExplanation
type RealTimeAdherenceExplanation struct {

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The length of the adherence explanation in minutes
	LengthMinutes int32 `json:"lengthMinutes,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The start timestamp of the adherence explanation in ISO-8601 format
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// The status of the adherence explanation
	// Enum: [Pending Approved Denied]
	Status string `json:"status,omitempty"`
}

// Validate validates this real time adherence explanation
func (m *RealTimeAdherenceExplanation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RealTimeAdherenceExplanation) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RealTimeAdherenceExplanation) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var realTimeAdherenceExplanationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Approved","Denied"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		realTimeAdherenceExplanationTypeStatusPropEnum = append(realTimeAdherenceExplanationTypeStatusPropEnum, v)
	}
}

const (

	// RealTimeAdherenceExplanationStatusPending captures enum value "Pending"
	RealTimeAdherenceExplanationStatusPending string = "Pending"

	// RealTimeAdherenceExplanationStatusApproved captures enum value "Approved"
	RealTimeAdherenceExplanationStatusApproved string = "Approved"

	// RealTimeAdherenceExplanationStatusDenied captures enum value "Denied"
	RealTimeAdherenceExplanationStatusDenied string = "Denied"
)

// prop value enum
func (m *RealTimeAdherenceExplanation) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, realTimeAdherenceExplanationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RealTimeAdherenceExplanation) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this real time adherence explanation based on the context it is used
func (m *RealTimeAdherenceExplanation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RealTimeAdherenceExplanation) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *RealTimeAdherenceExplanation) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RealTimeAdherenceExplanation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RealTimeAdherenceExplanation) UnmarshalBinary(b []byte) error {
	var res RealTimeAdherenceExplanation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

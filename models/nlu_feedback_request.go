// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NluFeedbackRequest nlu feedback request
//
// swagger:model NluFeedbackRequest
type NluFeedbackRequest struct {

	// Detected intent of the utterance
	// Required: true
	Intents []*IntentFeedback `json:"intents"`

	// The language of the version to which feedback is linked, e.g. en-us, de-de
	Language string `json:"language,omitempty"`

	// The feedback text.
	// Required: true
	Text *string `json:"text"`

	// The domain version ID of the feedback.
	// Required: true
	VersionID *string `json:"versionId"`
}

// Validate validates this nlu feedback request
func (m *NluFeedbackRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIntents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NluFeedbackRequest) validateIntents(formats strfmt.Registry) error {

	if err := validate.Required("intents", "body", m.Intents); err != nil {
		return err
	}

	for i := 0; i < len(m.Intents); i++ {
		if swag.IsZero(m.Intents[i]) { // not required
			continue
		}

		if m.Intents[i] != nil {
			if err := m.Intents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("intents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NluFeedbackRequest) validateText(formats strfmt.Registry) error {

	if err := validate.Required("text", "body", m.Text); err != nil {
		return err
	}

	return nil
}

func (m *NluFeedbackRequest) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("versionId", "body", m.VersionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this nlu feedback request based on the context it is used
func (m *NluFeedbackRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIntents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NluFeedbackRequest) contextValidateIntents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Intents); i++ {

		if m.Intents[i] != nil {
			if err := m.Intents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("intents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NluFeedbackRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NluFeedbackRequest) UnmarshalBinary(b []byte) error {
	var res NluFeedbackRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

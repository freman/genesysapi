// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataActionConditionSettings data action condition settings
//
// swagger:model DataActionConditionSettings
type DataActionConditionSettings struct {

	// A list of mappings defining which contact data fields will be passed to which data action input fields.
	ContactColumnToDataActionFieldMappings []*DataActionContactColumnFieldMapping `json:"contactColumnToDataActionFieldMappings"`

	// The input field from the data action that the contactId will be passed into.
	ContactIDField string `json:"contactIdField,omitempty"`

	// The Data Action Id to use for this condition.
	// Required: true
	DataActionID *string `json:"dataActionId"`

	// The result of this condition if the data action returns a result indicating there was no data.
	// Required: true
	DataNotFoundResolution *bool `json:"dataNotFoundResolution"`

	// A list of predicates defining the comparisons to use for this condition.
	Predicates []*DigitalDataActionConditionPredicate `json:"predicates"`
}

// Validate validates this data action condition settings
func (m *DataActionConditionSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactColumnToDataActionFieldMappings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataActionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataNotFoundResolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePredicates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataActionConditionSettings) validateContactColumnToDataActionFieldMappings(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactColumnToDataActionFieldMappings) { // not required
		return nil
	}

	for i := 0; i < len(m.ContactColumnToDataActionFieldMappings); i++ {
		if swag.IsZero(m.ContactColumnToDataActionFieldMappings[i]) { // not required
			continue
		}

		if m.ContactColumnToDataActionFieldMappings[i] != nil {
			if err := m.ContactColumnToDataActionFieldMappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contactColumnToDataActionFieldMappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contactColumnToDataActionFieldMappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataActionConditionSettings) validateDataActionID(formats strfmt.Registry) error {

	if err := validate.Required("dataActionId", "body", m.DataActionID); err != nil {
		return err
	}

	return nil
}

func (m *DataActionConditionSettings) validateDataNotFoundResolution(formats strfmt.Registry) error {

	if err := validate.Required("dataNotFoundResolution", "body", m.DataNotFoundResolution); err != nil {
		return err
	}

	return nil
}

func (m *DataActionConditionSettings) validatePredicates(formats strfmt.Registry) error {
	if swag.IsZero(m.Predicates) { // not required
		return nil
	}

	for i := 0; i < len(m.Predicates); i++ {
		if swag.IsZero(m.Predicates[i]) { // not required
			continue
		}

		if m.Predicates[i] != nil {
			if err := m.Predicates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("predicates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("predicates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this data action condition settings based on the context it is used
func (m *DataActionConditionSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContactColumnToDataActionFieldMappings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePredicates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataActionConditionSettings) contextValidateContactColumnToDataActionFieldMappings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ContactColumnToDataActionFieldMappings); i++ {

		if m.ContactColumnToDataActionFieldMappings[i] != nil {
			if err := m.ContactColumnToDataActionFieldMappings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contactColumnToDataActionFieldMappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contactColumnToDataActionFieldMappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataActionConditionSettings) contextValidatePredicates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Predicates); i++ {

		if m.Predicates[i] != nil {
			if err := m.Predicates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("predicates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("predicates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataActionConditionSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataActionConditionSettings) UnmarshalBinary(b []byte) error {
	var res DataActionConditionSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

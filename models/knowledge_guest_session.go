// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnowledgeGuestSession knowledge guest session
//
// swagger:model KnowledgeGuestSession
type KnowledgeGuestSession struct {

	// The app where the session is started.
	// Required: true
	App *KnowledgeGuestSessionApp `json:"app"`

	// The session contexts.
	Contexts []*KnowledgeGuestSessionContext `json:"contexts"`

	// An arbitrary ID for the customer starting the session. Used to track multiple sessions started by the same customer.
	// Required: true
	CustomerID *string `json:"customerId"`

	// Session ID.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// URL of the page where the session is started.
	PageURL string `json:"pageUrl,omitempty"`
}

// Validate validates this knowledge guest session
func (m *KnowledgeGuestSession) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContexts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeGuestSession) validateApp(formats strfmt.Registry) error {

	if err := validate.Required("app", "body", m.App); err != nil {
		return err
	}

	if m.App != nil {
		if err := m.App.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeGuestSession) validateContexts(formats strfmt.Registry) error {

	if swag.IsZero(m.Contexts) { // not required
		return nil
	}

	for i := 0; i < len(m.Contexts); i++ {
		if swag.IsZero(m.Contexts[i]) { // not required
			continue
		}

		if m.Contexts[i] != nil {
			if err := m.Contexts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contexts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KnowledgeGuestSession) validateCustomerID(formats strfmt.Registry) error {

	if err := validate.Required("customerId", "body", m.CustomerID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KnowledgeGuestSession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnowledgeGuestSession) UnmarshalBinary(b []byte) error {
	var res KnowledgeGuestSession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

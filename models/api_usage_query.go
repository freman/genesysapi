// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIUsageQuery Api usage query
//
// swagger:model ApiUsageQuery
type APIUsageQuery struct {

	// Date granularity of the results
	// Enum: [Day Week Month]
	Granularity string `json:"granularity,omitempty"`

	// Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.
	GroupBy []string `json:"groupBy"`

	// Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	// Required: true
	Interval *string `json:"interval"`

	// Behaves like a SQL SELECT clause. Enables retrieving only named metrics. If omitted, all metrics that are available will be returned (like SELECT *).
	Metrics []string `json:"metrics"`
}

// Validate validates this Api usage query
func (m *APIUsageQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGranularity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var apiUsageQueryTypeGranularityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Day","Week","Month"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiUsageQueryTypeGranularityPropEnum = append(apiUsageQueryTypeGranularityPropEnum, v)
	}
}

const (

	// APIUsageQueryGranularityDay captures enum value "Day"
	APIUsageQueryGranularityDay string = "Day"

	// APIUsageQueryGranularityWeek captures enum value "Week"
	APIUsageQueryGranularityWeek string = "Week"

	// APIUsageQueryGranularityMonth captures enum value "Month"
	APIUsageQueryGranularityMonth string = "Month"
)

// prop value enum
func (m *APIUsageQuery) validateGranularityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiUsageQueryTypeGranularityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIUsageQuery) validateGranularity(formats strfmt.Registry) error {
	if swag.IsZero(m.Granularity) { // not required
		return nil
	}

	// value enum
	if err := m.validateGranularityEnum("granularity", "body", m.Granularity); err != nil {
		return err
	}

	return nil
}

var apiUsageQueryGroupByItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OAuthClientId","OrganizationId","UserId","TemplateUri","HttpMethod"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiUsageQueryGroupByItemsEnum = append(apiUsageQueryGroupByItemsEnum, v)
	}
}

func (m *APIUsageQuery) validateGroupByItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiUsageQueryGroupByItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIUsageQuery) validateGroupBy(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupBy) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupBy); i++ {

		// value enum
		if err := m.validateGroupByItemsEnum("groupBy"+"."+strconv.Itoa(i), "body", m.GroupBy[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *APIUsageQuery) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

var apiUsageQueryMetricsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Status200","Status300","Status400","Status500","Status429","Requests"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiUsageQueryMetricsItemsEnum = append(apiUsageQueryMetricsItemsEnum, v)
	}
}

func (m *APIUsageQuery) validateMetricsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiUsageQueryMetricsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIUsageQuery) validateMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	for i := 0; i < len(m.Metrics); i++ {

		// value enum
		if err := m.validateMetricsItemsEnum("metrics"+"."+strconv.Itoa(i), "body", m.Metrics[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this Api usage query based on context it is used
func (m *APIUsageQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIUsageQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIUsageQuery) UnmarshalBinary(b []byte) error {
	var res APIUsageQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

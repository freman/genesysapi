// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeOffPlan time off plan
//
// swagger:model TimeOffPlan
type TimeOffPlan struct {

	// Whether this time off plan is currently being used by agents.
	Active bool `json:"active"`

	// The set of activity code IDs associated with this time off plan.
	// Unique: true
	ActivityCodeIds []string `json:"activityCodeIds"`

	// Auto approval rule for this time off plan
	// Enum: [Never Always CheckLimits]
	AutoApprovalRule string `json:"autoApprovalRule,omitempty"`

	// The number of days before the time off request start date for when the request will be expired from the waitlist.
	DaysBeforeStartToExpireFromWaitlist int32 `json:"daysBeforeStartToExpireFromWaitlist,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Version metadata for the time off plan.
	Metadata *WfmVersionedEntityMetadata `json:"metadata,omitempty"`

	// The name of this time off plan.
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The set of time off limit IDs associated with this time off plan.
	// Unique: true
	TimeOffLimits []*TimeOffLimitReference `json:"timeOffLimits"`
}

// Validate validates this time off plan
func (m *TimeOffPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityCodeIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoApprovalRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeOffLimits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeOffPlan) validateActivityCodeIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ActivityCodeIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("activityCodeIds", "body", m.ActivityCodeIds); err != nil {
		return err
	}

	return nil
}

var timeOffPlanTypeAutoApprovalRulePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Never","Always","CheckLimits"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeOffPlanTypeAutoApprovalRulePropEnum = append(timeOffPlanTypeAutoApprovalRulePropEnum, v)
	}
}

const (

	// TimeOffPlanAutoApprovalRuleNever captures enum value "Never"
	TimeOffPlanAutoApprovalRuleNever string = "Never"

	// TimeOffPlanAutoApprovalRuleAlways captures enum value "Always"
	TimeOffPlanAutoApprovalRuleAlways string = "Always"

	// TimeOffPlanAutoApprovalRuleCheckLimits captures enum value "CheckLimits"
	TimeOffPlanAutoApprovalRuleCheckLimits string = "CheckLimits"
)

// prop value enum
func (m *TimeOffPlan) validateAutoApprovalRuleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, timeOffPlanTypeAutoApprovalRulePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TimeOffPlan) validateAutoApprovalRule(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoApprovalRule) { // not required
		return nil
	}

	// value enum
	if err := m.validateAutoApprovalRuleEnum("autoApprovalRule", "body", m.AutoApprovalRule); err != nil {
		return err
	}

	return nil
}

func (m *TimeOffPlan) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *TimeOffPlan) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimeOffPlan) validateTimeOffLimits(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeOffLimits) { // not required
		return nil
	}

	if err := validate.UniqueItems("timeOffLimits", "body", m.TimeOffLimits); err != nil {
		return err
	}

	for i := 0; i < len(m.TimeOffLimits); i++ {
		if swag.IsZero(m.TimeOffLimits[i]) { // not required
			continue
		}

		if m.TimeOffLimits[i] != nil {
			if err := m.TimeOffLimits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeOffLimits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeOffLimits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this time off plan based on the context it is used
func (m *TimeOffPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeOffLimits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeOffPlan) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *TimeOffPlan) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *TimeOffPlan) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *TimeOffPlan) contextValidateTimeOffLimits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TimeOffLimits); i++ {

		if m.TimeOffLimits[i] != nil {
			if err := m.TimeOffLimits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeOffLimits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeOffLimits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeOffPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeOffPlan) UnmarshalBinary(b []byte) error {
	var res TimeOffPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConsultTransfer consult transfer
//
// swagger:model ConsultTransfer
type ConsultTransfer struct {

	// Destination phone number and name.
	// Required: true
	Destination *Destination `json:"destination"`

	// Determines to whom the initiating participant is speaking. Defaults to DESTINATION
	// Enum: [DESTINATION OBJECT BOTH]
	SpeakTo string `json:"speakTo,omitempty"`
}

// Validate validates this consult transfer
func (m *ConsultTransfer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeakTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsultTransfer) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("destination", "body", m.Destination); err != nil {
		return err
	}

	if m.Destination != nil {
		if err := m.Destination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

var consultTransferTypeSpeakToPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DESTINATION","OBJECT","BOTH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		consultTransferTypeSpeakToPropEnum = append(consultTransferTypeSpeakToPropEnum, v)
	}
}

const (

	// ConsultTransferSpeakToDESTINATION captures enum value "DESTINATION"
	ConsultTransferSpeakToDESTINATION string = "DESTINATION"

	// ConsultTransferSpeakToOBJECT captures enum value "OBJECT"
	ConsultTransferSpeakToOBJECT string = "OBJECT"

	// ConsultTransferSpeakToBOTH captures enum value "BOTH"
	ConsultTransferSpeakToBOTH string = "BOTH"
)

// prop value enum
func (m *ConsultTransfer) validateSpeakToEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, consultTransferTypeSpeakToPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConsultTransfer) validateSpeakTo(formats strfmt.Registry) error {
	if swag.IsZero(m.SpeakTo) { // not required
		return nil
	}

	// value enum
	if err := m.validateSpeakToEnum("speakTo", "body", m.SpeakTo); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this consult transfer based on the context it is used
func (m *ConsultTransfer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsultTransfer) contextValidateDestination(ctx context.Context, formats strfmt.Registry) error {

	if m.Destination != nil {
		if err := m.Destination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConsultTransfer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConsultTransfer) UnmarshalBinary(b []byte) error {
	var res ConsultTransfer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

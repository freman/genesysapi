// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventCondition event condition
//
// swagger:model EventCondition
type EventCondition struct {

	// The name of the event for which this condition can be satisfied.
	EventName string `json:"eventName,omitempty"`

	// The event key.
	// Required: true
	Key *string `json:"key"`

	// The comparison operator.
	// Enum: [containsAll containsAny notContainsAll notContainsAny equal notEqual greaterThan greaterThanOrEqual lessThan lessThanOrEqual startsWith endsWith]
	Operator string `json:"operator,omitempty"`

	// The session type for which this condition can be satisfied.
	// Required: true
	SessionType *string `json:"sessionType"`

	// The stream type for which this condition can be satisfied.
	// Required: true
	// Enum: [Web Custom Conversation]
	StreamType *string `json:"streamType"`

	// The event values.
	// Required: true
	Values []string `json:"values"`
}

// Validate validates this event condition
func (m *EventCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventCondition) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

var eventConditionTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["containsAll","containsAny","notContainsAll","notContainsAny","equal","notEqual","greaterThan","greaterThanOrEqual","lessThan","lessThanOrEqual","startsWith","endsWith"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventConditionTypeOperatorPropEnum = append(eventConditionTypeOperatorPropEnum, v)
	}
}

const (

	// EventConditionOperatorContainsAll captures enum value "containsAll"
	EventConditionOperatorContainsAll string = "containsAll"

	// EventConditionOperatorContainsAny captures enum value "containsAny"
	EventConditionOperatorContainsAny string = "containsAny"

	// EventConditionOperatorNotContainsAll captures enum value "notContainsAll"
	EventConditionOperatorNotContainsAll string = "notContainsAll"

	// EventConditionOperatorNotContainsAny captures enum value "notContainsAny"
	EventConditionOperatorNotContainsAny string = "notContainsAny"

	// EventConditionOperatorEqual captures enum value "equal"
	EventConditionOperatorEqual string = "equal"

	// EventConditionOperatorNotEqual captures enum value "notEqual"
	EventConditionOperatorNotEqual string = "notEqual"

	// EventConditionOperatorGreaterThan captures enum value "greaterThan"
	EventConditionOperatorGreaterThan string = "greaterThan"

	// EventConditionOperatorGreaterThanOrEqual captures enum value "greaterThanOrEqual"
	EventConditionOperatorGreaterThanOrEqual string = "greaterThanOrEqual"

	// EventConditionOperatorLessThan captures enum value "lessThan"
	EventConditionOperatorLessThan string = "lessThan"

	// EventConditionOperatorLessThanOrEqual captures enum value "lessThanOrEqual"
	EventConditionOperatorLessThanOrEqual string = "lessThanOrEqual"

	// EventConditionOperatorStartsWith captures enum value "startsWith"
	EventConditionOperatorStartsWith string = "startsWith"

	// EventConditionOperatorEndsWith captures enum value "endsWith"
	EventConditionOperatorEndsWith string = "endsWith"
)

// prop value enum
func (m *EventCondition) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eventConditionTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EventCondition) validateOperator(formats strfmt.Registry) error {

	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *EventCondition) validateSessionType(formats strfmt.Registry) error {

	if err := validate.Required("sessionType", "body", m.SessionType); err != nil {
		return err
	}

	return nil
}

var eventConditionTypeStreamTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Web","Custom","Conversation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventConditionTypeStreamTypePropEnum = append(eventConditionTypeStreamTypePropEnum, v)
	}
}

const (

	// EventConditionStreamTypeWeb captures enum value "Web"
	EventConditionStreamTypeWeb string = "Web"

	// EventConditionStreamTypeCustom captures enum value "Custom"
	EventConditionStreamTypeCustom string = "Custom"

	// EventConditionStreamTypeConversation captures enum value "Conversation"
	EventConditionStreamTypeConversation string = "Conversation"
)

// prop value enum
func (m *EventCondition) validateStreamTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eventConditionTypeStreamTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EventCondition) validateStreamType(formats strfmt.Registry) error {

	if err := validate.Required("streamType", "body", m.StreamType); err != nil {
		return err
	}

	// value enum
	if err := m.validateStreamTypeEnum("streamType", "body", *m.StreamType); err != nil {
		return err
	}

	return nil
}

func (m *EventCondition) validateValues(formats strfmt.Registry) error {

	if err := validate.Required("values", "body", m.Values); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventCondition) UnmarshalBinary(b []byte) error {
	var res EventCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddAdherenceExplanationAgentRequest add adherence explanation agent request
//
// swagger:model AddAdherenceExplanationAgentRequest
type AddAdherenceExplanationAgentRequest struct {

	// The length of the adherence explanation in minutes
	// Required: true
	LengthMinutes *int32 `json:"lengthMinutes"`

	// Notes about the adherence explanation
	Notes string `json:"notes,omitempty"`

	// The start timestamp of the adherence explanation in ISO-8601 format
	// Required: true
	// Format: date-time
	StartDate *strfmt.DateTime `json:"startDate"`

	// The type of the adherence explanation
	// Required: true
	// Enum: [Late]
	Type *string `json:"type"`
}

// Validate validates this add adherence explanation agent request
func (m *AddAdherenceExplanationAgentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLengthMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddAdherenceExplanationAgentRequest) validateLengthMinutes(formats strfmt.Registry) error {

	if err := validate.Required("lengthMinutes", "body", m.LengthMinutes); err != nil {
		return err
	}

	return nil
}

func (m *AddAdherenceExplanationAgentRequest) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var addAdherenceExplanationAgentRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Late"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addAdherenceExplanationAgentRequestTypeTypePropEnum = append(addAdherenceExplanationAgentRequestTypeTypePropEnum, v)
	}
}

const (

	// AddAdherenceExplanationAgentRequestTypeLate captures enum value "Late"
	AddAdherenceExplanationAgentRequestTypeLate string = "Late"
)

// prop value enum
func (m *AddAdherenceExplanationAgentRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addAdherenceExplanationAgentRequestTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AddAdherenceExplanationAgentRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add adherence explanation agent request based on context it is used
func (m *AddAdherenceExplanationAgentRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddAdherenceExplanationAgentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddAdherenceExplanationAgentRequest) UnmarshalBinary(b []byte) error {
	var res AddAdherenceExplanationAgentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

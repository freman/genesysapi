// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecordingJobFailedRecording recording job failed recording
//
// swagger:model RecordingJobFailedRecording
type RecordingJobFailedRecording struct {

	// Conversation
	// Read Only: true
	Conversation *AddressableEntityRef `json:"conversation,omitempty"`

	// Recording
	// Read Only: true
	Recording *AddressableEntityRef `json:"recording,omitempty"`
}

// Validate validates this recording job failed recording
func (m *RecordingJobFailedRecording) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConversation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecording(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecordingJobFailedRecording) validateConversation(formats strfmt.Registry) error {
	if swag.IsZero(m.Conversation) { // not required
		return nil
	}

	if m.Conversation != nil {
		if err := m.Conversation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conversation")
			}
			return err
		}
	}

	return nil
}

func (m *RecordingJobFailedRecording) validateRecording(formats strfmt.Registry) error {
	if swag.IsZero(m.Recording) { // not required
		return nil
	}

	if m.Recording != nil {
		if err := m.Recording.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recording")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recording")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recording job failed recording based on the context it is used
func (m *RecordingJobFailedRecording) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConversation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecording(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecordingJobFailedRecording) contextValidateConversation(ctx context.Context, formats strfmt.Registry) error {

	if m.Conversation != nil {
		if err := m.Conversation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conversation")
			}
			return err
		}
	}

	return nil
}

func (m *RecordingJobFailedRecording) contextValidateRecording(ctx context.Context, formats strfmt.Registry) error {

	if m.Recording != nil {
		if err := m.Recording.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recording")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recording")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecordingJobFailedRecording) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecordingJobFailedRecording) UnmarshalBinary(b []byte) error {
	var res RecordingJobFailedRecording
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

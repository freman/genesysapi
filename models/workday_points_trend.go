// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkdayPointsTrend workday points trend
//
// swagger:model WorkdayPointsTrend
type WorkdayPointsTrend struct {

	// The total average points
	// Read Only: true
	AveragePoints float64 `json:"averagePoints,omitempty"`

	// The end workday for the query range for the gamification points trend. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Read Only: true
	// Format: date
	DateEndWorkday strfmt.Date `json:"dateEndWorkday,omitempty"`

	// The start workday for the query range for the gamification points trend. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Read Only: true
	// Format: date
	DateStartWorkday strfmt.Date `json:"dateStartWorkday,omitempty"`

	// Aggregated for same day comparison
	// Read Only: true
	// Enum: [Sunday Monday Tuesday Wednesday Thursday Friday Saturday]
	DayOfWeek string `json:"dayOfWeek,omitempty"`

	// Daily points trends
	// Read Only: true
	Trend []*WorkdayPointsTrendItem `json:"trend"`

	// The targeted user for the query
	// Read Only: true
	User *UserReference `json:"user,omitempty"`
}

// Validate validates this workday points trend
func (m *WorkdayPointsTrend) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateEndWorkday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStartWorkday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkdayPointsTrend) validateDateEndWorkday(formats strfmt.Registry) error {

	if swag.IsZero(m.DateEndWorkday) { // not required
		return nil
	}

	if err := validate.FormatOf("dateEndWorkday", "body", "date", m.DateEndWorkday.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WorkdayPointsTrend) validateDateStartWorkday(formats strfmt.Registry) error {

	if swag.IsZero(m.DateStartWorkday) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStartWorkday", "body", "date", m.DateStartWorkday.String(), formats); err != nil {
		return err
	}

	return nil
}

var workdayPointsTrendTypeDayOfWeekPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workdayPointsTrendTypeDayOfWeekPropEnum = append(workdayPointsTrendTypeDayOfWeekPropEnum, v)
	}
}

const (

	// WorkdayPointsTrendDayOfWeekSunday captures enum value "Sunday"
	WorkdayPointsTrendDayOfWeekSunday string = "Sunday"

	// WorkdayPointsTrendDayOfWeekMonday captures enum value "Monday"
	WorkdayPointsTrendDayOfWeekMonday string = "Monday"

	// WorkdayPointsTrendDayOfWeekTuesday captures enum value "Tuesday"
	WorkdayPointsTrendDayOfWeekTuesday string = "Tuesday"

	// WorkdayPointsTrendDayOfWeekWednesday captures enum value "Wednesday"
	WorkdayPointsTrendDayOfWeekWednesday string = "Wednesday"

	// WorkdayPointsTrendDayOfWeekThursday captures enum value "Thursday"
	WorkdayPointsTrendDayOfWeekThursday string = "Thursday"

	// WorkdayPointsTrendDayOfWeekFriday captures enum value "Friday"
	WorkdayPointsTrendDayOfWeekFriday string = "Friday"

	// WorkdayPointsTrendDayOfWeekSaturday captures enum value "Saturday"
	WorkdayPointsTrendDayOfWeekSaturday string = "Saturday"
)

// prop value enum
func (m *WorkdayPointsTrend) validateDayOfWeekEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workdayPointsTrendTypeDayOfWeekPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkdayPointsTrend) validateDayOfWeek(formats strfmt.Registry) error {

	if swag.IsZero(m.DayOfWeek) { // not required
		return nil
	}

	// value enum
	if err := m.validateDayOfWeekEnum("dayOfWeek", "body", m.DayOfWeek); err != nil {
		return err
	}

	return nil
}

func (m *WorkdayPointsTrend) validateTrend(formats strfmt.Registry) error {

	if swag.IsZero(m.Trend) { // not required
		return nil
	}

	for i := 0; i < len(m.Trend); i++ {
		if swag.IsZero(m.Trend[i]) { // not required
			continue
		}

		if m.Trend[i] != nil {
			if err := m.Trend[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trend" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkdayPointsTrend) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkdayPointsTrend) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkdayPointsTrend) UnmarshalBinary(b []byte) error {
	var res WorkdayPointsTrend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

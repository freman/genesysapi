// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportingTurnAction reporting turn action
//
// swagger:model ReportingTurnAction
type ReportingTurnAction struct {

	// The ID of the action in the bot flow.
	ActionID string `json:"actionId,omitempty"`

	// The name of the action in the bot flow.
	ActionName string `json:"actionName,omitempty"`

	// The number of the action in the bot flow.
	ActionNumber int32 `json:"actionNumber,omitempty"`

	// action type
	// Enum: [AddFlowMilestoneAction AskForNLUIntentAction AskForBooleanAction AskForSlotAction AskForNLUNextIntentAction BotState CallTaskAction ClearSlotAction DisconnectAction EndTaskAction ExitBotFlowAction UpdateVariableAction CommunicateAction DecisionAction FindGrammarAction FindGroupAction FindLanguageSkillAction FindQueueAction FindQueueByIdAction FindSkillAction FindSystemPromptAction FindUserAction FindUserByIdAction FindUsersByIdAction FindUserPromptAction SwitchAction DataAction DataTableLookupAction GetExternalContactAction GetExternalOrganizationAction LoopAction ExitLoopAction NextLoopAction LoopUntilAction SetActiveIntentAction SetFlowOutcomeAction InitializeFlowOutcomeAction AskForStringAction SendResponseAction GetResponseAction ExtractSecureDataAction SecureAction TransferTaskAction DigitalMenuAction WaitForInputAction ShowKnowledgeArticleAction SetLocaleAction TransferPureMatchAction Unknown]
	ActionType string `json:"actionType,omitempty"`
}

// Validate validates this reporting turn action
func (m *ReportingTurnAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var reportingTurnActionTypeActionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AddFlowMilestoneAction","AskForNLUIntentAction","AskForBooleanAction","AskForSlotAction","AskForNLUNextIntentAction","BotState","CallTaskAction","ClearSlotAction","DisconnectAction","EndTaskAction","ExitBotFlowAction","UpdateVariableAction","CommunicateAction","DecisionAction","FindGrammarAction","FindGroupAction","FindLanguageSkillAction","FindQueueAction","FindQueueByIdAction","FindSkillAction","FindSystemPromptAction","FindUserAction","FindUserByIdAction","FindUsersByIdAction","FindUserPromptAction","SwitchAction","DataAction","DataTableLookupAction","GetExternalContactAction","GetExternalOrganizationAction","LoopAction","ExitLoopAction","NextLoopAction","LoopUntilAction","SetActiveIntentAction","SetFlowOutcomeAction","InitializeFlowOutcomeAction","AskForStringAction","SendResponseAction","GetResponseAction","ExtractSecureDataAction","SecureAction","TransferTaskAction","DigitalMenuAction","WaitForInputAction","ShowKnowledgeArticleAction","SetLocaleAction","TransferPureMatchAction","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reportingTurnActionTypeActionTypePropEnum = append(reportingTurnActionTypeActionTypePropEnum, v)
	}
}

const (

	// ReportingTurnActionActionTypeAddFlowMilestoneAction captures enum value "AddFlowMilestoneAction"
	ReportingTurnActionActionTypeAddFlowMilestoneAction string = "AddFlowMilestoneAction"

	// ReportingTurnActionActionTypeAskForNLUIntentAction captures enum value "AskForNLUIntentAction"
	ReportingTurnActionActionTypeAskForNLUIntentAction string = "AskForNLUIntentAction"

	// ReportingTurnActionActionTypeAskForBooleanAction captures enum value "AskForBooleanAction"
	ReportingTurnActionActionTypeAskForBooleanAction string = "AskForBooleanAction"

	// ReportingTurnActionActionTypeAskForSlotAction captures enum value "AskForSlotAction"
	ReportingTurnActionActionTypeAskForSlotAction string = "AskForSlotAction"

	// ReportingTurnActionActionTypeAskForNLUNextIntentAction captures enum value "AskForNLUNextIntentAction"
	ReportingTurnActionActionTypeAskForNLUNextIntentAction string = "AskForNLUNextIntentAction"

	// ReportingTurnActionActionTypeBotState captures enum value "BotState"
	ReportingTurnActionActionTypeBotState string = "BotState"

	// ReportingTurnActionActionTypeCallTaskAction captures enum value "CallTaskAction"
	ReportingTurnActionActionTypeCallTaskAction string = "CallTaskAction"

	// ReportingTurnActionActionTypeClearSlotAction captures enum value "ClearSlotAction"
	ReportingTurnActionActionTypeClearSlotAction string = "ClearSlotAction"

	// ReportingTurnActionActionTypeDisconnectAction captures enum value "DisconnectAction"
	ReportingTurnActionActionTypeDisconnectAction string = "DisconnectAction"

	// ReportingTurnActionActionTypeEndTaskAction captures enum value "EndTaskAction"
	ReportingTurnActionActionTypeEndTaskAction string = "EndTaskAction"

	// ReportingTurnActionActionTypeExitBotFlowAction captures enum value "ExitBotFlowAction"
	ReportingTurnActionActionTypeExitBotFlowAction string = "ExitBotFlowAction"

	// ReportingTurnActionActionTypeUpdateVariableAction captures enum value "UpdateVariableAction"
	ReportingTurnActionActionTypeUpdateVariableAction string = "UpdateVariableAction"

	// ReportingTurnActionActionTypeCommunicateAction captures enum value "CommunicateAction"
	ReportingTurnActionActionTypeCommunicateAction string = "CommunicateAction"

	// ReportingTurnActionActionTypeDecisionAction captures enum value "DecisionAction"
	ReportingTurnActionActionTypeDecisionAction string = "DecisionAction"

	// ReportingTurnActionActionTypeFindGrammarAction captures enum value "FindGrammarAction"
	ReportingTurnActionActionTypeFindGrammarAction string = "FindGrammarAction"

	// ReportingTurnActionActionTypeFindGroupAction captures enum value "FindGroupAction"
	ReportingTurnActionActionTypeFindGroupAction string = "FindGroupAction"

	// ReportingTurnActionActionTypeFindLanguageSkillAction captures enum value "FindLanguageSkillAction"
	ReportingTurnActionActionTypeFindLanguageSkillAction string = "FindLanguageSkillAction"

	// ReportingTurnActionActionTypeFindQueueAction captures enum value "FindQueueAction"
	ReportingTurnActionActionTypeFindQueueAction string = "FindQueueAction"

	// ReportingTurnActionActionTypeFindQueueByIDAction captures enum value "FindQueueByIdAction"
	ReportingTurnActionActionTypeFindQueueByIDAction string = "FindQueueByIdAction"

	// ReportingTurnActionActionTypeFindSkillAction captures enum value "FindSkillAction"
	ReportingTurnActionActionTypeFindSkillAction string = "FindSkillAction"

	// ReportingTurnActionActionTypeFindSystemPromptAction captures enum value "FindSystemPromptAction"
	ReportingTurnActionActionTypeFindSystemPromptAction string = "FindSystemPromptAction"

	// ReportingTurnActionActionTypeFindUserAction captures enum value "FindUserAction"
	ReportingTurnActionActionTypeFindUserAction string = "FindUserAction"

	// ReportingTurnActionActionTypeFindUserByIDAction captures enum value "FindUserByIdAction"
	ReportingTurnActionActionTypeFindUserByIDAction string = "FindUserByIdAction"

	// ReportingTurnActionActionTypeFindUsersByIDAction captures enum value "FindUsersByIdAction"
	ReportingTurnActionActionTypeFindUsersByIDAction string = "FindUsersByIdAction"

	// ReportingTurnActionActionTypeFindUserPromptAction captures enum value "FindUserPromptAction"
	ReportingTurnActionActionTypeFindUserPromptAction string = "FindUserPromptAction"

	// ReportingTurnActionActionTypeSwitchAction captures enum value "SwitchAction"
	ReportingTurnActionActionTypeSwitchAction string = "SwitchAction"

	// ReportingTurnActionActionTypeDataAction captures enum value "DataAction"
	ReportingTurnActionActionTypeDataAction string = "DataAction"

	// ReportingTurnActionActionTypeDataTableLookupAction captures enum value "DataTableLookupAction"
	ReportingTurnActionActionTypeDataTableLookupAction string = "DataTableLookupAction"

	// ReportingTurnActionActionTypeGetExternalContactAction captures enum value "GetExternalContactAction"
	ReportingTurnActionActionTypeGetExternalContactAction string = "GetExternalContactAction"

	// ReportingTurnActionActionTypeGetExternalOrganizationAction captures enum value "GetExternalOrganizationAction"
	ReportingTurnActionActionTypeGetExternalOrganizationAction string = "GetExternalOrganizationAction"

	// ReportingTurnActionActionTypeLoopAction captures enum value "LoopAction"
	ReportingTurnActionActionTypeLoopAction string = "LoopAction"

	// ReportingTurnActionActionTypeExitLoopAction captures enum value "ExitLoopAction"
	ReportingTurnActionActionTypeExitLoopAction string = "ExitLoopAction"

	// ReportingTurnActionActionTypeNextLoopAction captures enum value "NextLoopAction"
	ReportingTurnActionActionTypeNextLoopAction string = "NextLoopAction"

	// ReportingTurnActionActionTypeLoopUntilAction captures enum value "LoopUntilAction"
	ReportingTurnActionActionTypeLoopUntilAction string = "LoopUntilAction"

	// ReportingTurnActionActionTypeSetActiveIntentAction captures enum value "SetActiveIntentAction"
	ReportingTurnActionActionTypeSetActiveIntentAction string = "SetActiveIntentAction"

	// ReportingTurnActionActionTypeSetFlowOutcomeAction captures enum value "SetFlowOutcomeAction"
	ReportingTurnActionActionTypeSetFlowOutcomeAction string = "SetFlowOutcomeAction"

	// ReportingTurnActionActionTypeInitializeFlowOutcomeAction captures enum value "InitializeFlowOutcomeAction"
	ReportingTurnActionActionTypeInitializeFlowOutcomeAction string = "InitializeFlowOutcomeAction"

	// ReportingTurnActionActionTypeAskForStringAction captures enum value "AskForStringAction"
	ReportingTurnActionActionTypeAskForStringAction string = "AskForStringAction"

	// ReportingTurnActionActionTypeSendResponseAction captures enum value "SendResponseAction"
	ReportingTurnActionActionTypeSendResponseAction string = "SendResponseAction"

	// ReportingTurnActionActionTypeGetResponseAction captures enum value "GetResponseAction"
	ReportingTurnActionActionTypeGetResponseAction string = "GetResponseAction"

	// ReportingTurnActionActionTypeExtractSecureDataAction captures enum value "ExtractSecureDataAction"
	ReportingTurnActionActionTypeExtractSecureDataAction string = "ExtractSecureDataAction"

	// ReportingTurnActionActionTypeSecureAction captures enum value "SecureAction"
	ReportingTurnActionActionTypeSecureAction string = "SecureAction"

	// ReportingTurnActionActionTypeTransferTaskAction captures enum value "TransferTaskAction"
	ReportingTurnActionActionTypeTransferTaskAction string = "TransferTaskAction"

	// ReportingTurnActionActionTypeDigitalMenuAction captures enum value "DigitalMenuAction"
	ReportingTurnActionActionTypeDigitalMenuAction string = "DigitalMenuAction"

	// ReportingTurnActionActionTypeWaitForInputAction captures enum value "WaitForInputAction"
	ReportingTurnActionActionTypeWaitForInputAction string = "WaitForInputAction"

	// ReportingTurnActionActionTypeShowKnowledgeArticleAction captures enum value "ShowKnowledgeArticleAction"
	ReportingTurnActionActionTypeShowKnowledgeArticleAction string = "ShowKnowledgeArticleAction"

	// ReportingTurnActionActionTypeSetLocaleAction captures enum value "SetLocaleAction"
	ReportingTurnActionActionTypeSetLocaleAction string = "SetLocaleAction"

	// ReportingTurnActionActionTypeTransferPureMatchAction captures enum value "TransferPureMatchAction"
	ReportingTurnActionActionTypeTransferPureMatchAction string = "TransferPureMatchAction"

	// ReportingTurnActionActionTypeUnknown captures enum value "Unknown"
	ReportingTurnActionActionTypeUnknown string = "Unknown"
)

// prop value enum
func (m *ReportingTurnAction) validateActionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, reportingTurnActionTypeActionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReportingTurnAction) validateActionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionTypeEnum("actionType", "body", m.ActionType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this reporting turn action based on context it is used
func (m *ReportingTurnAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReportingTurnAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportingTurnAction) UnmarshalBinary(b []byte) error {
	var res ReportingTurnAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

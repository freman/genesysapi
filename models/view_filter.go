// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ViewFilter view filter
//
// swagger:model ViewFilter
type ViewFilter struct {

	// The abandon durations in milliseconds used to filter the view
	AbandonDurationsMilliseconds []*NumericRange `json:"abandonDurationsMilliseconds"`

	// Indicates filtering for abandons
	Abandoned bool `json:"abandoned"`

	// The acd durations in milliseconds used to filter the view
	AcdDurationsMilliseconds []*NumericRange `json:"acdDurationsMilliseconds"`

	// Deprecated - Please use integrationIds instead
	ActionCategoryName string `json:"actionCategoryName,omitempty"`

	// The acw durations in milliseconds used to filter the view
	AcwDurationsMilliseconds []*NumericRange `json:"acwDurationsMilliseconds"`

	// The address from values are used to filter the view
	AddressFroms []string `json:"addressFroms"`

	// The address To values are used to filter the view
	AddressTos []string `json:"addressTos"`

	// The list of callback owners used to filter interactions
	AgentCallbackOwnerIds []string `json:"agentCallbackOwnerIds"`

	// The list of Alert Rule IDs
	AlertRuleIds []string `json:"alertRuleIds"`

	// The ani list ids are used to filter the view
	AniList []string `json:"aniList"`

	// Indicates filtering for answered interactions
	Answered bool `json:"answered"`

	// Filter to indicate the availability of the dashboard is public or private.
	// Enum: [Public Private]
	AvailableDashboard string `json:"availableDashboard,omitempty"`

	// The list of blocked reason used to filter action map constraints views
	BlockedReasons []string `json:"blockedReasons"`

	// The list of bot final intents used to filter bot views
	BotFinalIntentList []string `json:"botFinalIntentList"`

	// The list of bot IDs used to filter bot views
	BotIds []string `json:"botIds"`

	// The list of bot intents used to filter bot views
	BotIntentList []string `json:"botIntentList"`

	// The list of bot message types used to filter bot views
	BotMessageTypes []string `json:"botMessageTypes"`

	// The list of bot products used to filter bot views
	BotProductList []string `json:"botProductList"`

	// The list of bot providers used to filter bot views
	BotProviderList []string `json:"botProviderList"`

	// The list of bot recognition failure reasons used to filter bot views
	BotRecognitionFailureReasonList []string `json:"botRecognitionFailureReasonList"`

	// The list of bot results used to filter bot views
	BotResultList []string `json:"botResultList"`

	// The list of bot slots used to filter bot views
	BotSlotList []string `json:"botSlotList"`

	// The list of bot versions used to filter bot views
	BotVersions []string `json:"botVersions"`

	// An interval of time to filter for scheduled callbacks. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	CallbackInterval string `json:"callbackInterval,omitempty"`

	// A list of callback numbers or substrings of numbers (ex: ["317", "13172222222"])
	CallbackNumberList []string `json:"callbackNumberList"`

	// The canonical contact ids are used to filter the view
	CanonicalContactIds []string `json:"canonicalContactIds"`

	// The contact ids are used to filter the view
	ContactIds []string `json:"contactIds"`

	// The list of conversation ids used to filter the view
	ConversationIds []string `json:"conversationIds"`

	// The list to filter based on Brands (Bot/User/Agent) or End User who initiated the first message in the conversation
	ConversationInitiators []string `json:"conversationInitiators"`

	// A grouping of conversation level filters
	ConversationProperties *ConversationProperties `json:"conversationProperties,omitempty"`

	// The customer sentiment score used to filter the view
	CustomerSentimentScore *NumericRange `json:"customerSentimentScore,omitempty"`

	// The customer sentiment trend used to filter the view
	CustomerSentimentTrend *NumericRange `json:"customerSentimentTrend,omitempty"`

	// The list of Data Action IDs
	DataActionIds []string `json:"dataActionIds"`

	// Indicates filtering for development activities
	DevelopmentActivityOverdue bool `json:"developmentActivityOverdue"`

	// The list of development moduleIds used to filter agent development view
	DevelopmentModuleIds []string `json:"developmentModuleIds"`

	// Filter for development name
	DevelopmentName string `json:"developmentName,omitempty"`

	// The list of development roles used to filter agent development view
	DevelopmentRoleList []string `json:"developmentRoleList"`

	// The list of development status used to filter agent development view
	DevelopmentStatusList []string `json:"developmentStatusList"`

	// The list of development types used to filter agent development view
	DevelopmentTypeList []string `json:"developmentTypeList"`

	// The directions are used to filter the view
	Directions []string `json:"directions"`

	// The divison Ids used to filter the view
	DivisionIds []string `json:"divisionIds"`

	// The dnis list is used to filter the view
	DnisList []string `json:"dnisList"`

	// The durations in milliseconds used to filter the view
	DurationsMilliseconds []*NumericRange `json:"durationsMilliseconds"`

	// The list of email delivery statuses used to filter views
	EmailDeliveryStatusList []string `json:"emailDeliveryStatusList"`

	// The evaluated agent ids are used to filter the view
	EvaluatedAgentIds []string `json:"evaluatedAgentIds"`

	// The evaluationCriticalScore is used to filter the view
	EvaluationCriticalScore *NumericRange `json:"evaluationCriticalScore,omitempty"`

	// The list of Evaluation Form Context IDs
	EvaluationFormContextIds []string `json:"evaluationFormContextIds"`

	// The evaluation form ids are used to filter the view
	EvaluationFormIds []string `json:"evaluationFormIds"`

	// The evaluationScore is used to filter the view
	EvaluationScore *NumericRange `json:"evaluationScore,omitempty"`

	// The evaluation statuses that are used to filter the view
	EvaluationStatuses []string `json:"evaluationStatuses"`

	// The evaluator ids are used to filter the view
	EvaluatorIds []string `json:"evaluatorIds"`

	// The external contact ids are used to filter the view
	ExternalContactIds []string `json:"externalContactIds"`

	// The external org ids are used to filter the view
	ExternalOrgIds []string `json:"externalOrgIds"`

	// The list of external Tags used to filter conversation data
	ExternalTags []string `json:"externalTags"`

	// Filter to indicate whether the dashboard is favorite or unfavorite.
	FavouriteDashboard bool `json:"favouriteDashboard"`

	// The user ids are used to fetch associated queues for the view
	FilterQueuesByUserIds []string `json:"filterQueuesByUserIds"`

	// The queue ids are used to fetch associated users for the view
	FilterUsersByQueueIds []string `json:"filterUsersByQueueIds"`

	// The team ids are used to fetch associated users for the view
	FilterUsersByTeamIds []string `json:"filterUsersByTeamIds"`

	// The list of destination types of the flow
	FlowDestinationTypes []string `json:"flowDestinationTypes"`

	// The list of reasons for the flow to disconnect
	FlowDisconnectReasons []string `json:"flowDisconnectReasons"`

	// A list of reasons of flow entry
	FlowEntryReasons []string `json:"flowEntryReasons"`

	// A list of types of the flow entry
	FlowEntryTypes []string `json:"flowEntryTypes"`

	// The list of flow Ids
	FlowIds []string `json:"flowIds"`

	// The list of flow milestones to filter exports
	FlowMilestoneIds []string `json:"flowMilestoneIds"`

	// A list of flow out types
	FlowOutTypes []string `json:"flowOutTypes"`

	// A list of outcome ids of the flow
	FlowOutcomeIds []string `json:"flowOutcomeIds"`

	// A list of outcome values of the flow
	FlowOutcomeValues []string `json:"flowOutcomeValues"`

	// The list of transfer targets used to filter flow data
	FlowTransferTargets []string `json:"flowTransferTargets"`

	// A list of types of the flow
	FlowTypes []string `json:"flowTypes"`

	// A list of versions of a flow
	FlowVersions []string `json:"flowVersions"`

	// A list of directory group ids
	GroupIds []string `json:"groupIds"`

	// The handle durations in milliseconds used to filter the view
	HandleDurationsMilliseconds []*NumericRange `json:"handleDurationsMilliseconds"`

	// Indicates filtering for agent assist id
	HasAgentAssistID bool `json:"hasAgentAssistId"`

	// Indicates if the customer has participated in an initiated conversation
	HasCustomerParticipated bool `json:"hasCustomerParticipated"`

	// Indicates filtering for evaluation
	HasEvaluation bool `json:"hasEvaluation"`

	// Filters to indicate if interaction has FAX
	HasFax bool `json:"hasFax"`

	// Indicates filtering for Journey action map id
	HasJourneyActionMapID bool `json:"hasJourneyActionMapId"`

	// Indicates filtering for journey customer id
	HasJourneyCustomerID bool `json:"hasJourneyCustomerId"`

	// Indicates filtering for Journey visit id
	HasJourneyVisitID bool `json:"hasJourneyVisitId"`

	// Indicates filtering for presence of MMS media
	HasMedia bool `json:"hasMedia"`

	// Indicates filtering for scored evaluation
	HasScoredEvaluation bool `json:"hasScoredEvaluation"`

	// Filter to indicate the transcript contains sensitive data.
	HasSensitiveData bool `json:"hasSensitiveData"`

	// The hold durations in milliseconds used to filter the view
	HoldDurationsMilliseconds []*NumericRange `json:"holdDurationsMilliseconds"`

	// The list of integration IDs for Data Action
	IntegrationIds []string `json:"integrationIds"`

	// Filter to indicate if interaction was ACD or non-ACD
	IsAcdInteraction bool `json:"isAcdInteraction"`

	// Indicates filtering for agent owned callback interactions
	IsAgentOwnedCallback bool `json:"isAgentOwnedCallback"`

	// Filter to indicate the transcript has been analyzed for sensitive data.
	IsAnalyzedForSensitiveData bool `json:"isAnalyzedForSensitiveData"`

	// Filter to indicate if Agent passed assessment or not
	IsAssessmentPassed bool `json:"isAssessmentPassed"`

	// Indicates filtering for the authenticated chat
	IsAuthenticated bool `json:"isAuthenticated"`

	// Indicates filtering for blind transferred
	IsBlindTransferred bool `json:"isBlindTransferred"`

	// Indicates filtering for campaign
	IsCampaign bool `json:"isCampaign"`

	// Indicates filtering for consult transferred
	IsConsultTransferred bool `json:"isConsultTransferred"`

	// Indicates filtering for consulted
	IsConsulted bool `json:"isConsulted"`

	// Indicates filtering for ended
	IsEnded bool `json:"isEnded"`

	// Indicates filtering for not responding users
	IsNotResponding bool `json:"isNotResponding"`

	// Indicates filtering for recorded
	IsRecorded bool `json:"isRecorded"`

	// Indicates filtering for survey
	IsSurveyed bool `json:"isSurveyed"`

	// The journey action map ids are used to fetch action maps for the associated view
	JourneyActionMapIds []string `json:"journeyActionMapIds"`

	// The journey action map types are used to filter action map data for the associated view
	JourneyActionMapTypes []string `json:"journeyActionMapTypes"`

	// The list of action targets to filter offer constraints
	JourneyActionTargetIds []string `json:"journeyActionTargetIds"`

	// The list of blocking action maps to filter offer constraints
	JourneyBlockingActionMapIds []string `json:"journeyBlockingActionMapIds"`

	// The list of emergency schedule groups to filter offer constraints
	JourneyBlockingEmergencyScheduleGroupIds []string `json:"journeyBlockingEmergencyScheduleGroupIds"`

	// The list of blocking schedule groups to filter offer constraints
	JourneyBlockingScheduleGroupIds []string `json:"journeyBlockingScheduleGroupIds"`

	// The list of frequency cap reasons to filter offer constraints
	JourneyFrequencyCapReasons []string `json:"journeyFrequencyCapReasons"`

	// The journey outcome ids are used to fetch outcomes for the associated view
	JourneyOutcomeIds []string `json:"journeyOutcomeIds"`

	// The journey segment ids are used to fetch segments for the associated view
	JourneySegmentIds []string `json:"journeySegmentIds"`

	// The list of url contains all conditions to filter offer constraints
	JourneyURLContainsAllConditions []string `json:"journeyUrlContainsAllConditions"`

	// The list of url contains any conditions to filter offer constraints
	JourneyURLContainsAnyConditions []string `json:"journeyUrlContainsAnyConditions"`

	// The list of url ends with conditions to filter offer constraints
	JourneyURLEndsWithConditions []string `json:"journeyUrlEndsWithConditions"`

	// The list of url equal conditions to filter offer constraints
	JourneyURLEqualConditions []string `json:"journeyUrlEqualConditions"`

	// The list of url not contains all conditions to filter offer constraints
	JourneyURLNotContainsAllConditions []string `json:"journeyUrlNotContainsAllConditions"`

	// The list of url not contains any conditions to filter offer constraints
	JourneyURLNotContainsAnyConditions []string `json:"journeyUrlNotContainsAnyConditions"`

	// The list of url not equal conditions to filter offer constraints
	JourneyURLNotEqualConditions []string `json:"journeyUrlNotEqualConditions"`

	// The list of url starts with conditions to filter offer constraints
	JourneyURLStartsWithConditions []string `json:"journeyUrlStartsWithConditions"`

	// The language groups used to filter the view
	LanguageGroups []string `json:"languageGroups"`

	// The language ids are used to filter the view
	LanguageIds []string `json:"languageIds"`

	// The location Ids used to filter the view
	LocationIds []string `json:"locationIds"`

	// The management unit ids are used to filter the view
	ManagementUnitIds []string `json:"managementUnitIds"`

	// The media types are used to filter the view
	MediaTypes []string `json:"mediaTypes"`

	// The message media types used to filter the view
	MessageTypes []string `json:"messageTypes"`

	// The desired range for mos values
	Mos *NumericRange `json:"mos,omitempty"`

	// Filter to indicate the dashboard owned by the user.
	MyDashboard bool `json:"myDashboard"`

	// The list of orginating directions used to filter the view
	OriginatingDirections []string `json:"originatingDirections"`

	// The outbound campaign ids are used to filter the view
	OutboundCampaignIds []string `json:"outboundCampaignIds"`

	// The outbound contact list ids are used to filter the view
	OutboundContactListIds []string `json:"outboundContactListIds"`

	// A list of participant purpose requested
	ParticipantPurposes []string `json:"participantPurposes"`

	// The list of promoter score ranges used to filter the view
	PromoterScores []*NumericRange `json:"promoterScores"`

	// A list of providers
	ProviderList []string `json:"providerList"`

	// The queue ids are used to filter the view
	QueueIds []string `json:"queueIds"`

	// The list of remote participants used to filter the view
	RemoteParticipants []string `json:"remoteParticipants"`

	// The report to user IDs used to filter the view
	ReportsTos []string `json:"reportsTos"`

	// A list of routing types requested
	RequestedRoutingTypes []string `json:"requestedRoutingTypes"`

	// The list of Response codes for Data Action
	ResponseStatuses []string `json:"responseStatuses"`

	// The role Ids used to filter the view
	RoleIds []string `json:"roleIds"`

	// The list of session dnis used to filter the view
	SessionDnisList []string `json:"sessionDnisList"`

	// Indicates filtering for first queue data
	ShowFirstQueue bool `json:"showFirstQueue"`

	// The list of SIP call ids used to filter the view
	SipCallIds []string `json:"sipCallIds"`

	// The skill groups used to filter the view
	SkillGroups []string `json:"skillGroups"`

	// The skill ids are used to filter the view
	SkillIds []string `json:"skillIds"`

	// The list of agent errors that are related to station
	StationErrors []string `json:"stationErrors"`

	// Filter for Sub Path
	SubPath string `json:"subPath,omitempty"`

	// The list of survey form context ids used to filter the view
	SurveyFormContextIds []string `json:"surveyFormContextIds"`

	// The survey form ids used to filter the view
	SurveyFormIds []string `json:"surveyFormIds"`

	// The survey NPS score used to filter the view
	SurveyNpsScore *NumericRange `json:"surveyNpsScore,omitempty"`

	// The survey promoter score used to filter the view
	SurveyPromoterScore *NumericRange `json:"surveyPromoterScore,omitempty"`

	// The survey question group score used to filter the view
	SurveyQuestionGroupScore *NumericRange `json:"surveyQuestionGroupScore,omitempty"`

	// The list of survey score ranges used to filter the view
	SurveyScores []*NumericRange `json:"surveyScores"`

	// The list of survey statuses used to filter the view
	SurveyStatuses []string `json:"surveyStatuses"`

	// The survey total score used to filter the view
	SurveyTotalScore *NumericRange `json:"surveyTotalScore,omitempty"`

	// The talk durations in milliseconds used to filter the view
	TalkDurationsMilliseconds []*NumericRange `json:"talkDurationsMilliseconds"`

	// The team ids used to filter the view data
	TeamIds []string `json:"teamIds"`

	// Represents the topics detected in the transcript
	TopicIds []string `json:"topicIds"`

	// A list of transcript languages requested
	TranscriptLanguages []string `json:"transcriptLanguages"`

	// The list of transcript topics requested in filter
	TranscriptTopics []*TranscriptTopics `json:"transcriptTopics"`

	// A list of transcript contents requested
	Transcripts []*Transcripts `json:"transcripts"`

	// Indicates filtering for transfers
	Transferred bool `json:"transferred"`

	// A list of routing types used
	UsedRoutingTypes []string `json:"usedRoutingTypes"`

	// The user ids are used to filter the view
	UserIds []string `json:"userIds"`

	// The user supplied state value in the view
	// Enum: [ActiveAndInactive Active Inactive Deleted]
	UserState string `json:"userState,omitempty"`

	// The wrap up codes are used to filter the view
	WrapUpCodes []string `json:"wrapUpCodes"`
}

// Validate validates this view filter
func (m *ViewFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbandonDurationsMilliseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcdDurationsMilliseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcwDurationsMilliseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableDashboard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockedReasons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBotMessageTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBotProductList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBotProviderList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBotRecognitionFailureReasonList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBotResultList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversationProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerSentimentScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerSentimentTrend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevelopmentRoleList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevelopmentStatusList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevelopmentTypeList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationsMilliseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailDeliveryStatusList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvaluationCriticalScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvaluationScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvaluationStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlowDestinationTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlowDisconnectReasons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlowEntryTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlowOutcomeValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlowTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandleDurationsMilliseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHoldDurationsMilliseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJourneyActionMapTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginatingDirections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipantPurposes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromoterScores(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedRoutingTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSurveyNpsScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSurveyPromoterScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSurveyQuestionGroupScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSurveyScores(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSurveyTotalScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTalkDurationsMilliseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTranscriptTopics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTranscripts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedRoutingTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewFilter) validateAbandonDurationsMilliseconds(formats strfmt.Registry) error {
	if swag.IsZero(m.AbandonDurationsMilliseconds) { // not required
		return nil
	}

	for i := 0; i < len(m.AbandonDurationsMilliseconds); i++ {
		if swag.IsZero(m.AbandonDurationsMilliseconds[i]) { // not required
			continue
		}

		if m.AbandonDurationsMilliseconds[i] != nil {
			if err := m.AbandonDurationsMilliseconds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("abandonDurationsMilliseconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("abandonDurationsMilliseconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) validateAcdDurationsMilliseconds(formats strfmt.Registry) error {
	if swag.IsZero(m.AcdDurationsMilliseconds) { // not required
		return nil
	}

	for i := 0; i < len(m.AcdDurationsMilliseconds); i++ {
		if swag.IsZero(m.AcdDurationsMilliseconds[i]) { // not required
			continue
		}

		if m.AcdDurationsMilliseconds[i] != nil {
			if err := m.AcdDurationsMilliseconds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acdDurationsMilliseconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acdDurationsMilliseconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) validateAcwDurationsMilliseconds(formats strfmt.Registry) error {
	if swag.IsZero(m.AcwDurationsMilliseconds) { // not required
		return nil
	}

	for i := 0; i < len(m.AcwDurationsMilliseconds); i++ {
		if swag.IsZero(m.AcwDurationsMilliseconds[i]) { // not required
			continue
		}

		if m.AcwDurationsMilliseconds[i] != nil {
			if err := m.AcwDurationsMilliseconds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acwDurationsMilliseconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acwDurationsMilliseconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var viewFilterTypeAvailableDashboardPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Public","Private"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterTypeAvailableDashboardPropEnum = append(viewFilterTypeAvailableDashboardPropEnum, v)
	}
}

const (

	// ViewFilterAvailableDashboardPublic captures enum value "Public"
	ViewFilterAvailableDashboardPublic string = "Public"

	// ViewFilterAvailableDashboardPrivate captures enum value "Private"
	ViewFilterAvailableDashboardPrivate string = "Private"
)

// prop value enum
func (m *ViewFilter) validateAvailableDashboardEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterTypeAvailableDashboardPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateAvailableDashboard(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableDashboard) { // not required
		return nil
	}

	// value enum
	if err := m.validateAvailableDashboardEnum("availableDashboard", "body", m.AvailableDashboard); err != nil {
		return err
	}

	return nil
}

var viewFilterBlockedReasonsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PageUrlConditionsNotMatching","AlreadyExistingOffer","TriggerDateInFuture","MultipleSimultaneousOffers","FrequencyCapping","OfferedOutsideSchedule","ServiceLevelThrottling","NoAvailableAgents"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterBlockedReasonsItemsEnum = append(viewFilterBlockedReasonsItemsEnum, v)
	}
}

func (m *ViewFilter) validateBlockedReasonsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterBlockedReasonsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateBlockedReasons(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockedReasons) { // not required
		return nil
	}

	for i := 0; i < len(m.BlockedReasons); i++ {

		// value enum
		if err := m.validateBlockedReasonsItemsEnum("blockedReasons"+"."+strconv.Itoa(i), "body", m.BlockedReasons[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterBotMessageTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Phone","SMS","GenesysChatWidget","FacebookMessenger","WeChat","Whatsapp","AppleBusinessChat","Telegram","Slack","Signal","Line","Discord","TwitterDirectMessage","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterBotMessageTypesItemsEnum = append(viewFilterBotMessageTypesItemsEnum, v)
	}
}

func (m *ViewFilter) validateBotMessageTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterBotMessageTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateBotMessageTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.BotMessageTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.BotMessageTypes); i++ {

		// value enum
		if err := m.validateBotMessageTypesItemsEnum("botMessageTypes"+"."+strconv.Itoa(i), "body", m.BotMessageTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterBotProductListItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","GenesysDialogEngine","AmazonLex","GoogleDialogFlow","GoogleDialogFlowResell","GenesysBotFlow","NuanceDlg","GoogleDialogFlowCx","GenesysByob","AmazonLexV2","GoogleDialogFlowCxResell","GoogleSttBotFlow","MicrosoftSttBotFlow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterBotProductListItemsEnum = append(viewFilterBotProductListItemsEnum, v)
	}
}

func (m *ViewFilter) validateBotProductListItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterBotProductListItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateBotProductList(formats strfmt.Registry) error {
	if swag.IsZero(m.BotProductList) { // not required
		return nil
	}

	for i := 0; i < len(m.BotProductList); i++ {

		// value enum
		if err := m.validateBotProductListItemsEnum("botProductList"+"."+strconv.Itoa(i), "body", m.BotProductList[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterBotProviderListItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Genesys","Amazon","Google","Nuance"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterBotProviderListItemsEnum = append(viewFilterBotProviderListItemsEnum, v)
	}
}

func (m *ViewFilter) validateBotProviderListItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterBotProviderListItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateBotProviderList(formats strfmt.Registry) error {
	if swag.IsZero(m.BotProviderList) { // not required
		return nil
	}

	for i := 0; i < len(m.BotProviderList); i++ {

		// value enum
		if err := m.validateBotProviderListItemsEnum("botProviderList"+"."+strconv.Itoa(i), "body", m.BotProviderList[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterBotRecognitionFailureReasonListItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","NoInputCollection","NoInputConfirmation","NoMatchCollection","NoMatchConfirmation","MaxWrongMatch"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterBotRecognitionFailureReasonListItemsEnum = append(viewFilterBotRecognitionFailureReasonListItemsEnum, v)
	}
}

func (m *ViewFilter) validateBotRecognitionFailureReasonListItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterBotRecognitionFailureReasonListItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateBotRecognitionFailureReasonList(formats strfmt.Registry) error {
	if swag.IsZero(m.BotRecognitionFailureReasonList) { // not required
		return nil
	}

	for i := 0; i < len(m.BotRecognitionFailureReasonList); i++ {

		// value enum
		if err := m.validateBotRecognitionFailureReasonListItemsEnum("botRecognitionFailureReasonList"+"."+strconv.Itoa(i), "body", m.BotRecognitionFailureReasonList[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterBotResultListItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","ExitRequestedByUser","ExitRequestedByBot","ExitError","ExitRecognitionFailure","DisconnectRequestedByUser","DisconnectRequestedByBot","DisconnectSessionExpired","DisconnectError","DisconnectRecognitionFailure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterBotResultListItemsEnum = append(viewFilterBotResultListItemsEnum, v)
	}
}

func (m *ViewFilter) validateBotResultListItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterBotResultListItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateBotResultList(formats strfmt.Registry) error {
	if swag.IsZero(m.BotResultList) { // not required
		return nil
	}

	for i := 0; i < len(m.BotResultList); i++ {

		// value enum
		if err := m.validateBotResultListItemsEnum("botResultList"+"."+strconv.Itoa(i), "body", m.BotResultList[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ViewFilter) validateConversationProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.ConversationProperties) { // not required
		return nil
	}

	if m.ConversationProperties != nil {
		if err := m.ConversationProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversationProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conversationProperties")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) validateCustomerSentimentScore(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerSentimentScore) { // not required
		return nil
	}

	if m.CustomerSentimentScore != nil {
		if err := m.CustomerSentimentScore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerSentimentScore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customerSentimentScore")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) validateCustomerSentimentTrend(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerSentimentTrend) { // not required
		return nil
	}

	if m.CustomerSentimentTrend != nil {
		if err := m.CustomerSentimentTrend.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerSentimentTrend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customerSentimentTrend")
			}
			return err
		}
	}

	return nil
}

var viewFilterDevelopmentRoleListItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Creator","Facilitator","Attendee"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterDevelopmentRoleListItemsEnum = append(viewFilterDevelopmentRoleListItemsEnum, v)
	}
}

func (m *ViewFilter) validateDevelopmentRoleListItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterDevelopmentRoleListItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateDevelopmentRoleList(formats strfmt.Registry) error {
	if swag.IsZero(m.DevelopmentRoleList) { // not required
		return nil
	}

	for i := 0; i < len(m.DevelopmentRoleList); i++ {

		// value enum
		if err := m.validateDevelopmentRoleListItemsEnum("developmentRoleList"+"."+strconv.Itoa(i), "body", m.DevelopmentRoleList[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterDevelopmentStatusListItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Planned","Scheduled","InvalidSchedule","InProgress","Completed","NotCompleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterDevelopmentStatusListItemsEnum = append(viewFilterDevelopmentStatusListItemsEnum, v)
	}
}

func (m *ViewFilter) validateDevelopmentStatusListItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterDevelopmentStatusListItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateDevelopmentStatusList(formats strfmt.Registry) error {
	if swag.IsZero(m.DevelopmentStatusList) { // not required
		return nil
	}

	for i := 0; i < len(m.DevelopmentStatusList); i++ {

		// value enum
		if err := m.validateDevelopmentStatusListItemsEnum("developmentStatusList"+"."+strconv.Itoa(i), "body", m.DevelopmentStatusList[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterDevelopmentTypeListItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Informational","Coaching","Assessment","AssessedContent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterDevelopmentTypeListItemsEnum = append(viewFilterDevelopmentTypeListItemsEnum, v)
	}
}

func (m *ViewFilter) validateDevelopmentTypeListItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterDevelopmentTypeListItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateDevelopmentTypeList(formats strfmt.Registry) error {
	if swag.IsZero(m.DevelopmentTypeList) { // not required
		return nil
	}

	for i := 0; i < len(m.DevelopmentTypeList); i++ {

		// value enum
		if err := m.validateDevelopmentTypeListItemsEnum("developmentTypeList"+"."+strconv.Itoa(i), "body", m.DevelopmentTypeList[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterDirectionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["inbound","outbound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterDirectionsItemsEnum = append(viewFilterDirectionsItemsEnum, v)
	}
}

func (m *ViewFilter) validateDirectionsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterDirectionsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateDirections(formats strfmt.Registry) error {
	if swag.IsZero(m.Directions) { // not required
		return nil
	}

	for i := 0; i < len(m.Directions); i++ {

		// value enum
		if err := m.validateDirectionsItemsEnum("directions"+"."+strconv.Itoa(i), "body", m.Directions[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ViewFilter) validateDurationsMilliseconds(formats strfmt.Registry) error {
	if swag.IsZero(m.DurationsMilliseconds) { // not required
		return nil
	}

	for i := 0; i < len(m.DurationsMilliseconds); i++ {
		if swag.IsZero(m.DurationsMilliseconds[i]) { // not required
			continue
		}

		if m.DurationsMilliseconds[i] != nil {
			if err := m.DurationsMilliseconds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("durationsMilliseconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("durationsMilliseconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var viewFilterEmailDeliveryStatusListItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DeliveryFailed","DeliverySuccess","Failed","Queued","Read","Received","Sent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterEmailDeliveryStatusListItemsEnum = append(viewFilterEmailDeliveryStatusListItemsEnum, v)
	}
}

func (m *ViewFilter) validateEmailDeliveryStatusListItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterEmailDeliveryStatusListItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateEmailDeliveryStatusList(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailDeliveryStatusList) { // not required
		return nil
	}

	for i := 0; i < len(m.EmailDeliveryStatusList); i++ {

		// value enum
		if err := m.validateEmailDeliveryStatusListItemsEnum("emailDeliveryStatusList"+"."+strconv.Itoa(i), "body", m.EmailDeliveryStatusList[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ViewFilter) validateEvaluationCriticalScore(formats strfmt.Registry) error {
	if swag.IsZero(m.EvaluationCriticalScore) { // not required
		return nil
	}

	if m.EvaluationCriticalScore != nil {
		if err := m.EvaluationCriticalScore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evaluationCriticalScore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evaluationCriticalScore")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) validateEvaluationScore(formats strfmt.Registry) error {
	if swag.IsZero(m.EvaluationScore) { // not required
		return nil
	}

	if m.EvaluationScore != nil {
		if err := m.EvaluationScore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evaluationScore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evaluationScore")
			}
			return err
		}
	}

	return nil
}

var viewFilterEvaluationStatusesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Finished","InProgress","InReview","Pending","Retracted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterEvaluationStatusesItemsEnum = append(viewFilterEvaluationStatusesItemsEnum, v)
	}
}

func (m *ViewFilter) validateEvaluationStatusesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterEvaluationStatusesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateEvaluationStatuses(formats strfmt.Registry) error {
	if swag.IsZero(m.EvaluationStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.EvaluationStatuses); i++ {

		// value enum
		if err := m.validateEvaluationStatusesItemsEnum("evaluationStatuses"+"."+strconv.Itoa(i), "body", m.EvaluationStatuses[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterFlowDestinationTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACD","USER","GROUP","NUMBER","FLOW","SECURE_FLOW","ACD_VOICEMAIL","USER_VOICEMAIL","GROUP_VOICEMAIL","RETURN_TO_AGENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterFlowDestinationTypesItemsEnum = append(viewFilterFlowDestinationTypesItemsEnum, v)
	}
}

func (m *ViewFilter) validateFlowDestinationTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterFlowDestinationTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateFlowDestinationTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowDestinationTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.FlowDestinationTypes); i++ {

		// value enum
		if err := m.validateFlowDestinationTypesItemsEnum("flowDestinationTypes"+"."+strconv.Itoa(i), "body", m.FlowDestinationTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterFlowDisconnectReasonsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FLOW_DISCONNECT","FLOW_ERROR_DISCONNECT","DISCONNECT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterFlowDisconnectReasonsItemsEnum = append(viewFilterFlowDisconnectReasonsItemsEnum, v)
	}
}

func (m *ViewFilter) validateFlowDisconnectReasonsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterFlowDisconnectReasonsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateFlowDisconnectReasons(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowDisconnectReasons) { // not required
		return nil
	}

	for i := 0; i < len(m.FlowDisconnectReasons); i++ {

		// value enum
		if err := m.validateFlowDisconnectReasonsItemsEnum("flowDisconnectReasons"+"."+strconv.Itoa(i), "body", m.FlowDisconnectReasons[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterFlowEntryTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["agent","direct","dnis","flow","outbound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterFlowEntryTypesItemsEnum = append(viewFilterFlowEntryTypesItemsEnum, v)
	}
}

func (m *ViewFilter) validateFlowEntryTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterFlowEntryTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateFlowEntryTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowEntryTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.FlowEntryTypes); i++ {

		// value enum
		if err := m.validateFlowEntryTypesItemsEnum("flowEntryTypes"+"."+strconv.Itoa(i), "body", m.FlowEntryTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterFlowOutcomeValuesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCESS","FAILURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterFlowOutcomeValuesItemsEnum = append(viewFilterFlowOutcomeValuesItemsEnum, v)
	}
}

func (m *ViewFilter) validateFlowOutcomeValuesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterFlowOutcomeValuesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateFlowOutcomeValues(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowOutcomeValues) { // not required
		return nil
	}

	for i := 0; i < len(m.FlowOutcomeValues); i++ {

		// value enum
		if err := m.validateFlowOutcomeValuesItemsEnum("flowOutcomeValues"+"."+strconv.Itoa(i), "body", m.FlowOutcomeValues[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterFlowTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bot","commonmodule","digitalbot","inboundcall","inboundchat","inboundemail","inboundshortmessage","inqueuecall","inqueueshortmessage","inqueueemail","outboundcall","securecall","surveyinvite","voice","voicemail","workflow","workitem"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterFlowTypesItemsEnum = append(viewFilterFlowTypesItemsEnum, v)
	}
}

func (m *ViewFilter) validateFlowTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterFlowTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateFlowTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.FlowTypes); i++ {

		// value enum
		if err := m.validateFlowTypesItemsEnum("flowTypes"+"."+strconv.Itoa(i), "body", m.FlowTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ViewFilter) validateHandleDurationsMilliseconds(formats strfmt.Registry) error {
	if swag.IsZero(m.HandleDurationsMilliseconds) { // not required
		return nil
	}

	for i := 0; i < len(m.HandleDurationsMilliseconds); i++ {
		if swag.IsZero(m.HandleDurationsMilliseconds[i]) { // not required
			continue
		}

		if m.HandleDurationsMilliseconds[i] != nil {
			if err := m.HandleDurationsMilliseconds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("handleDurationsMilliseconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("handleDurationsMilliseconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) validateHoldDurationsMilliseconds(formats strfmt.Registry) error {
	if swag.IsZero(m.HoldDurationsMilliseconds) { // not required
		return nil
	}

	for i := 0; i < len(m.HoldDurationsMilliseconds); i++ {
		if swag.IsZero(m.HoldDurationsMilliseconds[i]) { // not required
			continue
		}

		if m.HoldDurationsMilliseconds[i] != nil {
			if err := m.HoldDurationsMilliseconds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("holdDurationsMilliseconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("holdDurationsMilliseconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var viewFilterJourneyActionMapTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["webchat","webMessagingOffer","contentOffer","integrationAction","architectFlow","openAction"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterJourneyActionMapTypesItemsEnum = append(viewFilterJourneyActionMapTypesItemsEnum, v)
	}
}

func (m *ViewFilter) validateJourneyActionMapTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterJourneyActionMapTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateJourneyActionMapTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.JourneyActionMapTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.JourneyActionMapTypes); i++ {

		// value enum
		if err := m.validateJourneyActionMapTypesItemsEnum("journeyActionMapTypes"+"."+strconv.Itoa(i), "body", m.JourneyActionMapTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterMediaTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["callback","chat","cobrowse","email","message","screenshare","unknown","video","voice"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterMediaTypesItemsEnum = append(viewFilterMediaTypesItemsEnum, v)
	}
}

func (m *ViewFilter) validateMediaTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterMediaTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateMediaTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.MediaTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.MediaTypes); i++ {

		// value enum
		if err := m.validateMediaTypesItemsEnum("mediaTypes"+"."+strconv.Itoa(i), "body", m.MediaTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterMessageTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sms","twitter","line","facebook","whatsapp","webmessaging","open","instagram"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterMessageTypesItemsEnum = append(viewFilterMessageTypesItemsEnum, v)
	}
}

func (m *ViewFilter) validateMessageTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterMessageTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateMessageTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.MessageTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.MessageTypes); i++ {

		// value enum
		if err := m.validateMessageTypesItemsEnum("messageTypes"+"."+strconv.Itoa(i), "body", m.MessageTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ViewFilter) validateMos(formats strfmt.Registry) error {
	if swag.IsZero(m.Mos) { // not required
		return nil
	}

	if m.Mos != nil {
		if err := m.Mos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mos")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mos")
			}
			return err
		}
	}

	return nil
}

var viewFilterOriginatingDirectionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["inbound","outbound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterOriginatingDirectionsItemsEnum = append(viewFilterOriginatingDirectionsItemsEnum, v)
	}
}

func (m *ViewFilter) validateOriginatingDirectionsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterOriginatingDirectionsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateOriginatingDirections(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginatingDirections) { // not required
		return nil
	}

	for i := 0; i < len(m.OriginatingDirections); i++ {

		// value enum
		if err := m.validateOriginatingDirectionsItemsEnum("originatingDirections"+"."+strconv.Itoa(i), "body", m.OriginatingDirections[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterParticipantPurposesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["internal","external"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterParticipantPurposesItemsEnum = append(viewFilterParticipantPurposesItemsEnum, v)
	}
}

func (m *ViewFilter) validateParticipantPurposesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterParticipantPurposesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateParticipantPurposes(formats strfmt.Registry) error {
	if swag.IsZero(m.ParticipantPurposes) { // not required
		return nil
	}

	for i := 0; i < len(m.ParticipantPurposes); i++ {

		// value enum
		if err := m.validateParticipantPurposesItemsEnum("participantPurposes"+"."+strconv.Itoa(i), "body", m.ParticipantPurposes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ViewFilter) validatePromoterScores(formats strfmt.Registry) error {
	if swag.IsZero(m.PromoterScores) { // not required
		return nil
	}

	for i := 0; i < len(m.PromoterScores); i++ {
		if swag.IsZero(m.PromoterScores[i]) { // not required
			continue
		}

		if m.PromoterScores[i] != nil {
			if err := m.PromoterScores[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("promoterScores" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("promoterScores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var viewFilterRequestedRoutingTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Bullseye","Conditional","Last","Manual","Predictive","Preferred","Standard","Vip"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterRequestedRoutingTypesItemsEnum = append(viewFilterRequestedRoutingTypesItemsEnum, v)
	}
}

func (m *ViewFilter) validateRequestedRoutingTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterRequestedRoutingTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateRequestedRoutingTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedRoutingTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.RequestedRoutingTypes); i++ {

		// value enum
		if err := m.validateRequestedRoutingTypesItemsEnum("requestedRoutingTypes"+"."+strconv.Itoa(i), "body", m.RequestedRoutingTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ViewFilter) validateSurveyNpsScore(formats strfmt.Registry) error {
	if swag.IsZero(m.SurveyNpsScore) { // not required
		return nil
	}

	if m.SurveyNpsScore != nil {
		if err := m.SurveyNpsScore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("surveyNpsScore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("surveyNpsScore")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) validateSurveyPromoterScore(formats strfmt.Registry) error {
	if swag.IsZero(m.SurveyPromoterScore) { // not required
		return nil
	}

	if m.SurveyPromoterScore != nil {
		if err := m.SurveyPromoterScore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("surveyPromoterScore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("surveyPromoterScore")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) validateSurveyQuestionGroupScore(formats strfmt.Registry) error {
	if swag.IsZero(m.SurveyQuestionGroupScore) { // not required
		return nil
	}

	if m.SurveyQuestionGroupScore != nil {
		if err := m.SurveyQuestionGroupScore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("surveyQuestionGroupScore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("surveyQuestionGroupScore")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) validateSurveyScores(formats strfmt.Registry) error {
	if swag.IsZero(m.SurveyScores) { // not required
		return nil
	}

	for i := 0; i < len(m.SurveyScores); i++ {
		if swag.IsZero(m.SurveyScores[i]) { // not required
			continue
		}

		if m.SurveyScores[i] != nil {
			if err := m.SurveyScores[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("surveyScores" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("surveyScores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) validateSurveyTotalScore(formats strfmt.Registry) error {
	if swag.IsZero(m.SurveyTotalScore) { // not required
		return nil
	}

	if m.SurveyTotalScore != nil {
		if err := m.SurveyTotalScore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("surveyTotalScore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("surveyTotalScore")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) validateTalkDurationsMilliseconds(formats strfmt.Registry) error {
	if swag.IsZero(m.TalkDurationsMilliseconds) { // not required
		return nil
	}

	for i := 0; i < len(m.TalkDurationsMilliseconds); i++ {
		if swag.IsZero(m.TalkDurationsMilliseconds[i]) { // not required
			continue
		}

		if m.TalkDurationsMilliseconds[i] != nil {
			if err := m.TalkDurationsMilliseconds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("talkDurationsMilliseconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("talkDurationsMilliseconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) validateTranscriptTopics(formats strfmt.Registry) error {
	if swag.IsZero(m.TranscriptTopics) { // not required
		return nil
	}

	for i := 0; i < len(m.TranscriptTopics); i++ {
		if swag.IsZero(m.TranscriptTopics[i]) { // not required
			continue
		}

		if m.TranscriptTopics[i] != nil {
			if err := m.TranscriptTopics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transcriptTopics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transcriptTopics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) validateTranscripts(formats strfmt.Registry) error {
	if swag.IsZero(m.Transcripts) { // not required
		return nil
	}

	for i := 0; i < len(m.Transcripts); i++ {
		if swag.IsZero(m.Transcripts[i]) { // not required
			continue
		}

		if m.Transcripts[i] != nil {
			if err := m.Transcripts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transcripts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transcripts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var viewFilterUsedRoutingTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Bullseye","Conditional","Last","Manual","Predictive","Preferred","Standard","Vip"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterUsedRoutingTypesItemsEnum = append(viewFilterUsedRoutingTypesItemsEnum, v)
	}
}

func (m *ViewFilter) validateUsedRoutingTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterUsedRoutingTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateUsedRoutingTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.UsedRoutingTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.UsedRoutingTypes); i++ {

		// value enum
		if err := m.validateUsedRoutingTypesItemsEnum("usedRoutingTypes"+"."+strconv.Itoa(i), "body", m.UsedRoutingTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

var viewFilterTypeUserStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ActiveAndInactive","Active","Inactive","Deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewFilterTypeUserStatePropEnum = append(viewFilterTypeUserStatePropEnum, v)
	}
}

const (

	// ViewFilterUserStateActiveAndInactive captures enum value "ActiveAndInactive"
	ViewFilterUserStateActiveAndInactive string = "ActiveAndInactive"

	// ViewFilterUserStateActive captures enum value "Active"
	ViewFilterUserStateActive string = "Active"

	// ViewFilterUserStateInactive captures enum value "Inactive"
	ViewFilterUserStateInactive string = "Inactive"

	// ViewFilterUserStateDeleted captures enum value "Deleted"
	ViewFilterUserStateDeleted string = "Deleted"
)

// prop value enum
func (m *ViewFilter) validateUserStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewFilterTypeUserStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewFilter) validateUserState(formats strfmt.Registry) error {
	if swag.IsZero(m.UserState) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserStateEnum("userState", "body", m.UserState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this view filter based on the context it is used
func (m *ViewFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAbandonDurationsMilliseconds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAcdDurationsMilliseconds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAcwDurationsMilliseconds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConversationProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomerSentimentScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomerSentimentTrend(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDurationsMilliseconds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvaluationCriticalScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvaluationScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHandleDurationsMilliseconds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHoldDurationsMilliseconds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePromoterScores(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSurveyNpsScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSurveyPromoterScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSurveyQuestionGroupScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSurveyScores(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSurveyTotalScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTalkDurationsMilliseconds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTranscriptTopics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTranscripts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewFilter) contextValidateAbandonDurationsMilliseconds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AbandonDurationsMilliseconds); i++ {

		if m.AbandonDurationsMilliseconds[i] != nil {
			if err := m.AbandonDurationsMilliseconds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("abandonDurationsMilliseconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("abandonDurationsMilliseconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) contextValidateAcdDurationsMilliseconds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AcdDurationsMilliseconds); i++ {

		if m.AcdDurationsMilliseconds[i] != nil {
			if err := m.AcdDurationsMilliseconds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acdDurationsMilliseconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acdDurationsMilliseconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) contextValidateAcwDurationsMilliseconds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AcwDurationsMilliseconds); i++ {

		if m.AcwDurationsMilliseconds[i] != nil {
			if err := m.AcwDurationsMilliseconds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acwDurationsMilliseconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acwDurationsMilliseconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) contextValidateConversationProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.ConversationProperties != nil {
		if err := m.ConversationProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversationProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conversationProperties")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) contextValidateCustomerSentimentScore(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomerSentimentScore != nil {
		if err := m.CustomerSentimentScore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerSentimentScore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customerSentimentScore")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) contextValidateCustomerSentimentTrend(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomerSentimentTrend != nil {
		if err := m.CustomerSentimentTrend.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerSentimentTrend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customerSentimentTrend")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) contextValidateDurationsMilliseconds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DurationsMilliseconds); i++ {

		if m.DurationsMilliseconds[i] != nil {
			if err := m.DurationsMilliseconds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("durationsMilliseconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("durationsMilliseconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) contextValidateEvaluationCriticalScore(ctx context.Context, formats strfmt.Registry) error {

	if m.EvaluationCriticalScore != nil {
		if err := m.EvaluationCriticalScore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evaluationCriticalScore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evaluationCriticalScore")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) contextValidateEvaluationScore(ctx context.Context, formats strfmt.Registry) error {

	if m.EvaluationScore != nil {
		if err := m.EvaluationScore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evaluationScore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evaluationScore")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) contextValidateHandleDurationsMilliseconds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HandleDurationsMilliseconds); i++ {

		if m.HandleDurationsMilliseconds[i] != nil {
			if err := m.HandleDurationsMilliseconds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("handleDurationsMilliseconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("handleDurationsMilliseconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) contextValidateHoldDurationsMilliseconds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HoldDurationsMilliseconds); i++ {

		if m.HoldDurationsMilliseconds[i] != nil {
			if err := m.HoldDurationsMilliseconds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("holdDurationsMilliseconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("holdDurationsMilliseconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) contextValidateMos(ctx context.Context, formats strfmt.Registry) error {

	if m.Mos != nil {
		if err := m.Mos.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mos")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mos")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) contextValidatePromoterScores(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PromoterScores); i++ {

		if m.PromoterScores[i] != nil {
			if err := m.PromoterScores[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("promoterScores" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("promoterScores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) contextValidateSurveyNpsScore(ctx context.Context, formats strfmt.Registry) error {

	if m.SurveyNpsScore != nil {
		if err := m.SurveyNpsScore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("surveyNpsScore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("surveyNpsScore")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) contextValidateSurveyPromoterScore(ctx context.Context, formats strfmt.Registry) error {

	if m.SurveyPromoterScore != nil {
		if err := m.SurveyPromoterScore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("surveyPromoterScore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("surveyPromoterScore")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) contextValidateSurveyQuestionGroupScore(ctx context.Context, formats strfmt.Registry) error {

	if m.SurveyQuestionGroupScore != nil {
		if err := m.SurveyQuestionGroupScore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("surveyQuestionGroupScore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("surveyQuestionGroupScore")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) contextValidateSurveyScores(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SurveyScores); i++ {

		if m.SurveyScores[i] != nil {
			if err := m.SurveyScores[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("surveyScores" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("surveyScores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) contextValidateSurveyTotalScore(ctx context.Context, formats strfmt.Registry) error {

	if m.SurveyTotalScore != nil {
		if err := m.SurveyTotalScore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("surveyTotalScore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("surveyTotalScore")
			}
			return err
		}
	}

	return nil
}

func (m *ViewFilter) contextValidateTalkDurationsMilliseconds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TalkDurationsMilliseconds); i++ {

		if m.TalkDurationsMilliseconds[i] != nil {
			if err := m.TalkDurationsMilliseconds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("talkDurationsMilliseconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("talkDurationsMilliseconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) contextValidateTranscriptTopics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TranscriptTopics); i++ {

		if m.TranscriptTopics[i] != nil {
			if err := m.TranscriptTopics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transcriptTopics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transcriptTopics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewFilter) contextValidateTranscripts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Transcripts); i++ {

		if m.Transcripts[i] != nil {
			if err := m.Transcripts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transcripts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transcripts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViewFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewFilter) UnmarshalBinary(b []byte) error {
	var res ViewFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

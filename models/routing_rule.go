// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoutingRule routing rule
//
// swagger:model RoutingRule
type RoutingRule struct {

	// matching operator.  MEETS_THRESHOLD matches any agent with a score at or above the rule's threshold.  ANY matches all specified agents, regardless of score.
	// Enum: [MEETS_THRESHOLD ANY]
	Operator string `json:"operator,omitempty"`

	// threshold required for routing attempt (generally an agent score).  may be null for operator ANY.
	Threshold int32 `json:"threshold,omitempty"`

	// seconds to wait in this rule before moving to the next
	WaitSeconds float64 `json:"waitSeconds,omitempty"`
}

// Validate validates this routing rule
func (m *RoutingRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var routingRuleTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MEETS_THRESHOLD","ANY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routingRuleTypeOperatorPropEnum = append(routingRuleTypeOperatorPropEnum, v)
	}
}

const (

	// RoutingRuleOperatorMEETSTHRESHOLD captures enum value "MEETS_THRESHOLD"
	RoutingRuleOperatorMEETSTHRESHOLD string = "MEETS_THRESHOLD"

	// RoutingRuleOperatorANY captures enum value "ANY"
	RoutingRuleOperatorANY string = "ANY"
)

// prop value enum
func (m *RoutingRule) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routingRuleTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RoutingRule) validateOperator(formats strfmt.Registry) error {

	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoutingRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoutingRule) UnmarshalBinary(b []byte) error {
	var res RoutingRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

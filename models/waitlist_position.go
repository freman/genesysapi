// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WaitlistPosition waitlist position
//
// swagger:model WaitlistPosition
type WaitlistPosition struct {

	// The date to which this wait list position applies, as defined by the time zone of the business unit. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Format: date
	Date strfmt.Date `json:"date,omitempty"`

	// The time off limit for which time off request is waitlisted
	TimeOffLimit *TimeOffLimitReference `json:"timeOffLimit,omitempty"`

	// The time off request for this wait list position
	TimeOffRequest *TimeOffRequestReference `json:"timeOffRequest,omitempty"`

	// The time off request's position in the waitlist on the date. 1 means time off is the first in the waitlist
	WaitlistPosition int32 `json:"waitlistPosition,omitempty"`
}

// Validate validates this waitlist position
func (m *WaitlistPosition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeOffLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeOffRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WaitlistPosition) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WaitlistPosition) validateTimeOffLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeOffLimit) { // not required
		return nil
	}

	if m.TimeOffLimit != nil {
		if err := m.TimeOffLimit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeOffLimit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeOffLimit")
			}
			return err
		}
	}

	return nil
}

func (m *WaitlistPosition) validateTimeOffRequest(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeOffRequest) { // not required
		return nil
	}

	if m.TimeOffRequest != nil {
		if err := m.TimeOffRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeOffRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeOffRequest")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this waitlist position based on the context it is used
func (m *WaitlistPosition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimeOffLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeOffRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WaitlistPosition) contextValidateTimeOffLimit(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeOffLimit != nil {
		if err := m.TimeOffLimit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeOffLimit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeOffLimit")
			}
			return err
		}
	}

	return nil
}

func (m *WaitlistPosition) contextValidateTimeOffRequest(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeOffRequest != nil {
		if err := m.TimeOffRequest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeOffRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeOffRequest")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WaitlistPosition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WaitlistPosition) UnmarshalBinary(b []byte) error {
	var res WaitlistPosition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DirectRouting direct routing
//
// swagger:model DirectRouting
type DirectRouting struct {

	// Time (in seconds) that a Direct Routing interaction will wait for Direct Routing agent before going to selected backup. Valid range [60, 864000].
	AgentWaitSeconds int32 `json:"agentWaitSeconds,omitempty"`

	// ID of queue to be used as the default backup if an agent does not have their Backup Settings configured.
	BackupQueueID string `json:"backupQueueId,omitempty"`

	// Direct Routing Settings specific to Call media.
	CallMediaSettings *DirectRoutingCallMediaSettings `json:"callMediaSettings,omitempty"`

	// Direct Routing Settings specific to Email media.
	EmailMediaSettings *DirectRoutingMediaSettings `json:"emailMediaSettings,omitempty"`

	// Direct Routing Settings specific to Message media.
	MessageMediaSettings *DirectRoutingMediaSettings `json:"messageMediaSettings,omitempty"`

	// Flag indicating if Direct Routing interactions should wait for Direct Routing agent or go immediately to selected backup.
	WaitForAgent bool `json:"waitForAgent"`
}

// Validate validates this direct routing
func (m *DirectRouting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallMediaSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailMediaSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageMediaSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectRouting) validateCallMediaSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.CallMediaSettings) { // not required
		return nil
	}

	if m.CallMediaSettings != nil {
		if err := m.CallMediaSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("callMediaSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("callMediaSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DirectRouting) validateEmailMediaSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailMediaSettings) { // not required
		return nil
	}

	if m.EmailMediaSettings != nil {
		if err := m.EmailMediaSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emailMediaSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emailMediaSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DirectRouting) validateMessageMediaSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.MessageMediaSettings) { // not required
		return nil
	}

	if m.MessageMediaSettings != nil {
		if err := m.MessageMediaSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messageMediaSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("messageMediaSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this direct routing based on the context it is used
func (m *DirectRouting) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCallMediaSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmailMediaSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessageMediaSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectRouting) contextValidateCallMediaSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.CallMediaSettings != nil {
		if err := m.CallMediaSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("callMediaSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("callMediaSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DirectRouting) contextValidateEmailMediaSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.EmailMediaSettings != nil {
		if err := m.EmailMediaSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emailMediaSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emailMediaSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DirectRouting) contextValidateMessageMediaSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.MessageMediaSettings != nil {
		if err := m.MessageMediaSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messageMediaSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("messageMediaSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectRouting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectRouting) UnmarshalBinary(b []byte) error {
	var res DirectRouting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClientAppConfigurationInfo Configuration information for the integration
//
// swagger:model ClientAppConfigurationInfo
type ClientAppConfigurationInfo struct {

	// The current, active configuration for the integration.
	// Read Only: true
	Current *IntegrationConfiguration `json:"current,omitempty"`

	// The effective configuration for the app, containing the integration specific configuration along with overrides specified in the integration type.
	// Read Only: true
	Effective *EffectiveConfiguration `json:"effective,omitempty"`
}

// Validate validates this client app configuration info
func (m *ClientAppConfigurationInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffective(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientAppConfigurationInfo) validateCurrent(formats strfmt.Registry) error {

	if swag.IsZero(m.Current) { // not required
		return nil
	}

	if m.Current != nil {
		if err := m.Current.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current")
			}
			return err
		}
	}

	return nil
}

func (m *ClientAppConfigurationInfo) validateEffective(formats strfmt.Registry) error {

	if swag.IsZero(m.Effective) { // not required
		return nil
	}

	if m.Effective != nil {
		if err := m.Effective.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("effective")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClientAppConfigurationInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientAppConfigurationInfo) UnmarshalBinary(b []byte) error {
	var res ClientAppConfigurationInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

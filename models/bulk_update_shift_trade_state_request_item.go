// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BulkUpdateShiftTradeStateRequestItem bulk update shift trade state request item
//
// swagger:model BulkUpdateShiftTradeStateRequestItem
type BulkUpdateShiftTradeStateRequestItem struct {

	// The globally unique identifier for the object.
	ID string `json:"id,omitempty"`

	// Version metadata for the shift trade
	// Required: true
	Metadata *WfmVersionedEntityMetadata `json:"metadata"`

	// The new state to set on the shift trade
	// Required: true
	// Enum: [Unmatched Matched Approved Denied Expired Canceled]
	State *string `json:"state"`
}

// Validate validates this bulk update shift trade state request item
func (m *BulkUpdateShiftTradeStateRequestItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkUpdateShiftTradeStateRequestItem) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("metadata", "body", m.Metadata); err != nil {
		return err
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

var bulkUpdateShiftTradeStateRequestItemTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unmatched","Matched","Approved","Denied","Expired","Canceled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bulkUpdateShiftTradeStateRequestItemTypeStatePropEnum = append(bulkUpdateShiftTradeStateRequestItemTypeStatePropEnum, v)
	}
}

const (

	// BulkUpdateShiftTradeStateRequestItemStateUnmatched captures enum value "Unmatched"
	BulkUpdateShiftTradeStateRequestItemStateUnmatched string = "Unmatched"

	// BulkUpdateShiftTradeStateRequestItemStateMatched captures enum value "Matched"
	BulkUpdateShiftTradeStateRequestItemStateMatched string = "Matched"

	// BulkUpdateShiftTradeStateRequestItemStateApproved captures enum value "Approved"
	BulkUpdateShiftTradeStateRequestItemStateApproved string = "Approved"

	// BulkUpdateShiftTradeStateRequestItemStateDenied captures enum value "Denied"
	BulkUpdateShiftTradeStateRequestItemStateDenied string = "Denied"

	// BulkUpdateShiftTradeStateRequestItemStateExpired captures enum value "Expired"
	BulkUpdateShiftTradeStateRequestItemStateExpired string = "Expired"

	// BulkUpdateShiftTradeStateRequestItemStateCanceled captures enum value "Canceled"
	BulkUpdateShiftTradeStateRequestItemStateCanceled string = "Canceled"
)

// prop value enum
func (m *BulkUpdateShiftTradeStateRequestItem) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bulkUpdateShiftTradeStateRequestItemTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BulkUpdateShiftTradeStateRequestItem) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this bulk update shift trade state request item based on the context it is used
func (m *BulkUpdateShiftTradeStateRequestItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkUpdateShiftTradeStateRequestItem) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BulkUpdateShiftTradeStateRequestItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkUpdateShiftTradeStateRequestItem) UnmarshalBinary(b []byte) error {
	var res BulkUpdateShiftTradeStateRequestItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

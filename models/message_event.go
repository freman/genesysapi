// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MessageEvent Message event element.  Examples include: system messages, typing indicators, cobrowse offerings.
//
// swagger:model MessageEvent
type MessageEvent struct {

	// CoBrowse event.
	CoBrowse *EventCoBrowse `json:"coBrowse,omitempty"`

	// Type of this event element
	// Required: true
	// Enum: [CoBrowse Typing Presence]
	EventType *string `json:"eventType"`

	// Presence event.
	Presence *EventPresence `json:"presence,omitempty"`

	// Typing event.
	Typing *EventTyping `json:"typing,omitempty"`
}

// Validate validates this message event
func (m *MessageEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoBrowse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTyping(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MessageEvent) validateCoBrowse(formats strfmt.Registry) error {
	if swag.IsZero(m.CoBrowse) { // not required
		return nil
	}

	if m.CoBrowse != nil {
		if err := m.CoBrowse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coBrowse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coBrowse")
			}
			return err
		}
	}

	return nil
}

var messageEventTypeEventTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CoBrowse","Typing","Presence"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messageEventTypeEventTypePropEnum = append(messageEventTypeEventTypePropEnum, v)
	}
}

const (

	// MessageEventEventTypeCoBrowse captures enum value "CoBrowse"
	MessageEventEventTypeCoBrowse string = "CoBrowse"

	// MessageEventEventTypeTyping captures enum value "Typing"
	MessageEventEventTypeTyping string = "Typing"

	// MessageEventEventTypePresence captures enum value "Presence"
	MessageEventEventTypePresence string = "Presence"
)

// prop value enum
func (m *MessageEvent) validateEventTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, messageEventTypeEventTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MessageEvent) validateEventType(formats strfmt.Registry) error {

	if err := validate.Required("eventType", "body", m.EventType); err != nil {
		return err
	}

	// value enum
	if err := m.validateEventTypeEnum("eventType", "body", *m.EventType); err != nil {
		return err
	}

	return nil
}

func (m *MessageEvent) validatePresence(formats strfmt.Registry) error {
	if swag.IsZero(m.Presence) { // not required
		return nil
	}

	if m.Presence != nil {
		if err := m.Presence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("presence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("presence")
			}
			return err
		}
	}

	return nil
}

func (m *MessageEvent) validateTyping(formats strfmt.Registry) error {
	if swag.IsZero(m.Typing) { // not required
		return nil
	}

	if m.Typing != nil {
		if err := m.Typing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("typing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("typing")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this message event based on the context it is used
func (m *MessageEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCoBrowse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePresence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTyping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MessageEvent) contextValidateCoBrowse(ctx context.Context, formats strfmt.Registry) error {

	if m.CoBrowse != nil {
		if err := m.CoBrowse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coBrowse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coBrowse")
			}
			return err
		}
	}

	return nil
}

func (m *MessageEvent) contextValidatePresence(ctx context.Context, formats strfmt.Registry) error {

	if m.Presence != nil {
		if err := m.Presence.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("presence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("presence")
			}
			return err
		}
	}

	return nil
}

func (m *MessageEvent) contextValidateTyping(ctx context.Context, formats strfmt.Registry) error {

	if m.Typing != nil {
		if err := m.Typing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("typing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("typing")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MessageEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MessageEvent) UnmarshalBinary(b []byte) error {
	var res MessageEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

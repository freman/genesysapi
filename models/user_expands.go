// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserExpands user expands
//
// swagger:model UserExpands
type UserExpands struct {

	// Roles and permissions assigned to the user
	// Read Only: true
	Authorization *UserAuthorization `json:"authorization,omitempty"`

	// Summary of conversion statistics for conversation types.
	// Read Only: true
	ConversationSummary *UserConversationSummary `json:"conversationSummary,omitempty"`

	// Current geolocation position
	// Read Only: true
	Geolocation *Geolocation `json:"geolocation,omitempty"`

	// Active 3rd party presence
	// Read Only: true
	IntegrationPresence *UserPresence `json:"integrationPresence,omitempty"`

	// Determine if out of office is enabled
	// Read Only: true
	OutOfOffice *OutOfOffice `json:"outOfOffice,omitempty"`

	// Active presence
	// Read Only: true
	Presence *UserPresence `json:"presence,omitempty"`

	// ACD routing status
	// Read Only: true
	RoutingStatus *RoutingStatus `json:"routingStatus,omitempty"`

	// Effective, default, and last station information
	// Read Only: true
	Station *UserStations `json:"station,omitempty"`
}

// Validate validates this user expands
func (m *UserExpands) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversationSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeolocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationPresence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutOfOffice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserExpands) validateAuthorization(formats strfmt.Registry) error {

	if swag.IsZero(m.Authorization) { // not required
		return nil
	}

	if m.Authorization != nil {
		if err := m.Authorization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization")
			}
			return err
		}
	}

	return nil
}

func (m *UserExpands) validateConversationSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.ConversationSummary) { // not required
		return nil
	}

	if m.ConversationSummary != nil {
		if err := m.ConversationSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversationSummary")
			}
			return err
		}
	}

	return nil
}

func (m *UserExpands) validateGeolocation(formats strfmt.Registry) error {

	if swag.IsZero(m.Geolocation) { // not required
		return nil
	}

	if m.Geolocation != nil {
		if err := m.Geolocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geolocation")
			}
			return err
		}
	}

	return nil
}

func (m *UserExpands) validateIntegrationPresence(formats strfmt.Registry) error {

	if swag.IsZero(m.IntegrationPresence) { // not required
		return nil
	}

	if m.IntegrationPresence != nil {
		if err := m.IntegrationPresence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("integrationPresence")
			}
			return err
		}
	}

	return nil
}

func (m *UserExpands) validateOutOfOffice(formats strfmt.Registry) error {

	if swag.IsZero(m.OutOfOffice) { // not required
		return nil
	}

	if m.OutOfOffice != nil {
		if err := m.OutOfOffice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outOfOffice")
			}
			return err
		}
	}

	return nil
}

func (m *UserExpands) validatePresence(formats strfmt.Registry) error {

	if swag.IsZero(m.Presence) { // not required
		return nil
	}

	if m.Presence != nil {
		if err := m.Presence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("presence")
			}
			return err
		}
	}

	return nil
}

func (m *UserExpands) validateRoutingStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutingStatus) { // not required
		return nil
	}

	if m.RoutingStatus != nil {
		if err := m.RoutingStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routingStatus")
			}
			return err
		}
	}

	return nil
}

func (m *UserExpands) validateStation(formats strfmt.Registry) error {

	if swag.IsZero(m.Station) { // not required
		return nil
	}

	if m.Station != nil {
		if err := m.Station.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("station")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserExpands) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserExpands) UnmarshalBinary(b []byte) error {
	var res UserExpands
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

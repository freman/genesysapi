// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateWorkPlanRotationAgentRequest update work plan rotation agent request
//
// swagger:model UpdateWorkPlanRotationAgentRequest
type UpdateWorkPlanRotationAgentRequest struct {

	// The date range to which this agent is effective in the work plan rotation
	DateRange *DateRangeWithOptionalEnd `json:"dateRange,omitempty"`

	// If marked true for this agent when updating, then this agent will be removed from this work plan rotation
	Delete bool `json:"delete"`

	// Start position of the work plan in the pattern for this agent in the work plan rotation. Position value starts from 0
	Position int32 `json:"position,omitempty"`

	// The ID of an agent in this work plan rotation
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this update work plan rotation agent request
func (m *UpdateWorkPlanRotationAgentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateWorkPlanRotationAgentRequest) validateDateRange(formats strfmt.Registry) error {
	if swag.IsZero(m.DateRange) { // not required
		return nil
	}

	if m.DateRange != nil {
		if err := m.DateRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dateRange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dateRange")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateWorkPlanRotationAgentRequest) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update work plan rotation agent request based on the context it is used
func (m *UpdateWorkPlanRotationAgentRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateWorkPlanRotationAgentRequest) contextValidateDateRange(ctx context.Context, formats strfmt.Registry) error {

	if m.DateRange != nil {
		if err := m.DateRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dateRange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dateRange")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateWorkPlanRotationAgentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateWorkPlanRotationAgentRequest) UnmarshalBinary(b []byte) error {
	var res UpdateWorkPlanRotationAgentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

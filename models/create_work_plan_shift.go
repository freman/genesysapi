// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateWorkPlanShift create work plan shift
//
// swagger:model CreateWorkPlanShift
type CreateWorkPlanShift struct {

	// Activities configured for this shift
	Activities []*CreateWorkPlanActivity `json:"activities"`

	// Whether the contiguous time constraint for the shift is enabled
	ConstrainContiguousWorkTime bool `json:"constrainContiguousWorkTime"`

	// Whether day off rule is enabled
	ConstrainDayOff bool `json:"constrainDayOff"`

	// Whether the earliest stop time constraint for the shift is enabled
	ConstrainEarliestStopTime bool `json:"constrainEarliestStopTime"`

	// Whether the latest stop time constraint for the shift is enabled
	ConstrainLatestStopTime bool `json:"constrainLatestStopTime"`

	// Whether the latest stop time constraint for the shift is enabled.  Deprecated, use constrainLatestStopTime instead
	ConstrainStopTime bool `json:"constrainStopTime"`

	// The day off rule for agents to have next day off or previous day off. used if constrainDayOff = true
	// Enum: [NextDayOff PreviousDayOff]
	DayOffRule string `json:"dayOffRule,omitempty"`

	// Days of the week applicable for this shift
	Days *SetWrapperDayOfWeek `json:"days,omitempty"`

	// Earliest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true
	EarliestStartTimeMinutesFromMidnight int32 `json:"earliestStartTimeMinutesFromMidnight,omitempty"`

	// This is the earliest time a shift can end
	EarliestStopTimeMinutesFromMidnight int32 `json:"earliestStopTimeMinutesFromMidnight,omitempty"`

	// Exact paid time in minutes configured for the shift. Used if flexiblePaidTime == false
	ExactPaidTimeMinutes int32 `json:"exactPaidTimeMinutes,omitempty"`

	// Exact start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == false
	ExactStartTimeMinutesFromMidnight int32 `json:"exactStartTimeMinutesFromMidnight,omitempty"`

	// Whether the paid time setting for the shift is flexible
	FlexiblePaidTime bool `json:"flexiblePaidTime"`

	// Whether the start time of the shift is flexible
	FlexibleStartTime bool `json:"flexibleStartTime"`

	// Latest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true
	LatestStartTimeMinutesFromMidnight int32 `json:"latestStartTimeMinutesFromMidnight,omitempty"`

	// Latest stop time of the shift defined as offset minutes from midnight. Used if constrainStopTime == true
	LatestStopTimeMinutesFromMidnight int32 `json:"latestStopTimeMinutesFromMidnight,omitempty"`

	// Maximum contiguous time in minutes configured for the shift. Used if constrainContiguousWorkTime == true
	MaximumContiguousWorkTimeMinutes int32 `json:"maximumContiguousWorkTimeMinutes,omitempty"`

	// Maximum paid time in minutes configured for the shift. Used if flexiblePaidTime == true
	MaximumPaidTimeMinutes int32 `json:"maximumPaidTimeMinutes,omitempty"`

	// Minimum contiguous time in minutes configured for the shift. Used if constrainContiguousWorkTime == true
	MinimumContiguousWorkTimeMinutes int32 `json:"minimumContiguousWorkTimeMinutes,omitempty"`

	// Minimum paid time in minutes configured for the shift. Used if flexiblePaidTime == true
	MinimumPaidTimeMinutes int32 `json:"minimumPaidTimeMinutes,omitempty"`

	// Name of the shift
	// Required: true
	Name *string `json:"name"`

	// Increment in offset minutes that would contribute to different possible start times for the shift. Used if flexibleStartTime == true
	StartIncrementMinutes int32 `json:"startIncrementMinutes,omitempty"`
}

// Validate validates this create work plan shift
func (m *CreateWorkPlanShift) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayOffRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateWorkPlanShift) validateActivities(formats strfmt.Registry) error {
	if swag.IsZero(m.Activities) { // not required
		return nil
	}

	for i := 0; i < len(m.Activities); i++ {
		if swag.IsZero(m.Activities[i]) { // not required
			continue
		}

		if m.Activities[i] != nil {
			if err := m.Activities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var createWorkPlanShiftTypeDayOffRulePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NextDayOff","PreviousDayOff"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createWorkPlanShiftTypeDayOffRulePropEnum = append(createWorkPlanShiftTypeDayOffRulePropEnum, v)
	}
}

const (

	// CreateWorkPlanShiftDayOffRuleNextDayOff captures enum value "NextDayOff"
	CreateWorkPlanShiftDayOffRuleNextDayOff string = "NextDayOff"

	// CreateWorkPlanShiftDayOffRulePreviousDayOff captures enum value "PreviousDayOff"
	CreateWorkPlanShiftDayOffRulePreviousDayOff string = "PreviousDayOff"
)

// prop value enum
func (m *CreateWorkPlanShift) validateDayOffRuleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createWorkPlanShiftTypeDayOffRulePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateWorkPlanShift) validateDayOffRule(formats strfmt.Registry) error {
	if swag.IsZero(m.DayOffRule) { // not required
		return nil
	}

	// value enum
	if err := m.validateDayOffRuleEnum("dayOffRule", "body", m.DayOffRule); err != nil {
		return err
	}

	return nil
}

func (m *CreateWorkPlanShift) validateDays(formats strfmt.Registry) error {
	if swag.IsZero(m.Days) { // not required
		return nil
	}

	if m.Days != nil {
		if err := m.Days.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("days")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("days")
			}
			return err
		}
	}

	return nil
}

func (m *CreateWorkPlanShift) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create work plan shift based on the context it is used
func (m *CreateWorkPlanShift) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActivities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateWorkPlanShift) contextValidateActivities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Activities); i++ {

		if m.Activities[i] != nil {
			if err := m.Activities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateWorkPlanShift) contextValidateDays(ctx context.Context, formats strfmt.Registry) error {

	if m.Days != nil {
		if err := m.Days.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("days")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("days")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateWorkPlanShift) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateWorkPlanShift) UnmarshalBinary(b []byte) error {
	var res CreateWorkPlanShift
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

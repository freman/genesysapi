// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ForecastPlanningGroupResponse forecast planning group response
//
// swagger:model ForecastPlanningGroupResponse
type ForecastPlanningGroupResponse struct {

	// The ID of the planning group
	ID string `json:"id,omitempty"`

	// The name of the planning group
	Name string `json:"name,omitempty"`

	// Route path configuration for this planning group
	RoutePaths []*RoutePathResponse `json:"routePaths"`

	// Service goals for this planning group
	ServiceGoalTemplate *ForecastServiceGoalTemplateResponse `json:"serviceGoalTemplate,omitempty"`
}

// Validate validates this forecast planning group response
func (m *ForecastPlanningGroupResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoutePaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceGoalTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForecastPlanningGroupResponse) validateRoutePaths(formats strfmt.Registry) error {
	if swag.IsZero(m.RoutePaths) { // not required
		return nil
	}

	for i := 0; i < len(m.RoutePaths); i++ {
		if swag.IsZero(m.RoutePaths[i]) { // not required
			continue
		}

		if m.RoutePaths[i] != nil {
			if err := m.RoutePaths[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routePaths" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("routePaths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ForecastPlanningGroupResponse) validateServiceGoalTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceGoalTemplate) { // not required
		return nil
	}

	if m.ServiceGoalTemplate != nil {
		if err := m.ServiceGoalTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceGoalTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceGoalTemplate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this forecast planning group response based on the context it is used
func (m *ForecastPlanningGroupResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoutePaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceGoalTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForecastPlanningGroupResponse) contextValidateRoutePaths(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RoutePaths); i++ {

		if m.RoutePaths[i] != nil {
			if err := m.RoutePaths[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routePaths" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("routePaths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ForecastPlanningGroupResponse) contextValidateServiceGoalTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceGoalTemplate != nil {
		if err := m.ServiceGoalTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceGoalTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceGoalTemplate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ForecastPlanningGroupResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForecastPlanningGroupResponse) UnmarshalBinary(b []byte) error {
	var res ForecastPlanningGroupResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

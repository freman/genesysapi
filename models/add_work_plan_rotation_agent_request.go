// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddWorkPlanRotationAgentRequest add work plan rotation agent request
//
// swagger:model AddWorkPlanRotationAgentRequest
type AddWorkPlanRotationAgentRequest struct {

	// The date range to which this agent is effective in the work plan rotation
	// Required: true
	DateRange *DateRangeWithOptionalEnd `json:"dateRange"`

	// Start position of the work plan in the pattern for this agent in the work plan rotation. Position value starts from 0
	// Required: true
	Position *int32 `json:"position"`

	// The ID of an agent in this work plan rotation
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this add work plan rotation agent request
func (m *AddWorkPlanRotationAgentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddWorkPlanRotationAgentRequest) validateDateRange(formats strfmt.Registry) error {

	if err := validate.Required("dateRange", "body", m.DateRange); err != nil {
		return err
	}

	if m.DateRange != nil {
		if err := m.DateRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dateRange")
			}
			return err
		}
	}

	return nil
}

func (m *AddWorkPlanRotationAgentRequest) validatePosition(formats strfmt.Registry) error {

	if err := validate.Required("position", "body", m.Position); err != nil {
		return err
	}

	return nil
}

func (m *AddWorkPlanRotationAgentRequest) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddWorkPlanRotationAgentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddWorkPlanRotationAgentRequest) UnmarshalBinary(b []byte) error {
	var res AddWorkPlanRotationAgentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

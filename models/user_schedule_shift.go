// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserScheduleShift user schedule shift
//
// swagger:model UserScheduleShift
type UserScheduleShift struct {

	// List of activities in this shift
	Activities []*UserScheduleActivity `json:"activities"`

	// If marked true for updating this schedule shift, it will be deleted
	Delete bool `json:"delete"`

	// ID of the schedule shift. This is only for the case of updating and deleting an existing shift
	ID string `json:"id,omitempty"`

	// Length of this shift in minutes
	// Read Only: true
	LengthInMinutes int32 `json:"lengthInMinutes,omitempty"`

	// Whether the shift was set as manually edited
	ManuallyEdited bool `json:"manuallyEdited"`

	// Start time in UTC for this shift. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// The schedule to which this shift belongs
	// Read Only: true
	WeekSchedule *WeekScheduleReference `json:"weekSchedule,omitempty"`
}

// Validate validates this user schedule shift
func (m *UserScheduleShift) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserScheduleShift) validateActivities(formats strfmt.Registry) error {
	if swag.IsZero(m.Activities) { // not required
		return nil
	}

	for i := 0; i < len(m.Activities); i++ {
		if swag.IsZero(m.Activities[i]) { // not required
			continue
		}

		if m.Activities[i] != nil {
			if err := m.Activities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserScheduleShift) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserScheduleShift) validateWeekSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.WeekSchedule) { // not required
		return nil
	}

	if m.WeekSchedule != nil {
		if err := m.WeekSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weekSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weekSchedule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user schedule shift based on the context it is used
func (m *UserScheduleShift) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActivities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLengthInMinutes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeekSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserScheduleShift) contextValidateActivities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Activities); i++ {

		if m.Activities[i] != nil {
			if err := m.Activities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserScheduleShift) contextValidateLengthInMinutes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lengthInMinutes", "body", int32(m.LengthInMinutes)); err != nil {
		return err
	}

	return nil
}

func (m *UserScheduleShift) contextValidateStartDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "startDate", "body", strfmt.DateTime(m.StartDate)); err != nil {
		return err
	}

	return nil
}

func (m *UserScheduleShift) contextValidateWeekSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.WeekSchedule != nil {
		if err := m.WeekSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weekSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weekSchedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserScheduleShift) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserScheduleShift) UnmarshalBinary(b []byte) error {
	var res UserScheduleShift
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserBestPointsItem user best points item
//
// swagger:model UserBestPointsItem
type UserBestPointsItem struct {

	// End workday of the best points aggregation interval. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Read Only: true
	// Format: date
	DateEndWorkday strfmt.Date `json:"dateEndWorkday,omitempty"`

	// Start workday of the best points aggregation interval. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Read Only: true
	// Format: date
	DateStartWorkday strfmt.Date `json:"dateStartWorkday,omitempty"`

	// Best points aggregation interval granularity
	// Read Only: true
	// Enum: [Monthly Weekly Daily]
	GranularityType string `json:"granularityType,omitempty"`

	// Gamification points
	// Read Only: true
	Points int32 `json:"points,omitempty"`

	// The rank of this user
	// Read Only: true
	Rank int32 `json:"rank,omitempty"`
}

// Validate validates this user best points item
func (m *UserBestPointsItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateEndWorkday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStartWorkday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGranularityType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserBestPointsItem) validateDateEndWorkday(formats strfmt.Registry) error {

	if swag.IsZero(m.DateEndWorkday) { // not required
		return nil
	}

	if err := validate.FormatOf("dateEndWorkday", "body", "date", m.DateEndWorkday.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserBestPointsItem) validateDateStartWorkday(formats strfmt.Registry) error {

	if swag.IsZero(m.DateStartWorkday) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStartWorkday", "body", "date", m.DateStartWorkday.String(), formats); err != nil {
		return err
	}

	return nil
}

var userBestPointsItemTypeGranularityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Monthly","Weekly","Daily"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userBestPointsItemTypeGranularityTypePropEnum = append(userBestPointsItemTypeGranularityTypePropEnum, v)
	}
}

const (

	// UserBestPointsItemGranularityTypeMonthly captures enum value "Monthly"
	UserBestPointsItemGranularityTypeMonthly string = "Monthly"

	// UserBestPointsItemGranularityTypeWeekly captures enum value "Weekly"
	UserBestPointsItemGranularityTypeWeekly string = "Weekly"

	// UserBestPointsItemGranularityTypeDaily captures enum value "Daily"
	UserBestPointsItemGranularityTypeDaily string = "Daily"
)

// prop value enum
func (m *UserBestPointsItem) validateGranularityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userBestPointsItemTypeGranularityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserBestPointsItem) validateGranularityType(formats strfmt.Registry) error {

	if swag.IsZero(m.GranularityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateGranularityTypeEnum("granularityType", "body", m.GranularityType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserBestPointsItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserBestPointsItem) UnmarshalBinary(b []byte) error {
	var res UserBestPointsItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VoicemailsSearchResponse voicemails search response
//
// swagger:model VoicemailsSearchResponse
type VoicemailsSearchResponse struct {

	// Q64 value for the current page of results
	CurrentPage string `json:"currentPage,omitempty"`

	// Q64 value for the next page of results
	NextPage string `json:"nextPage,omitempty"`

	// The total number of pages
	// Required: true
	PageCount *int32 `json:"pageCount"`

	// The current page number
	// Required: true
	PageNumber *int32 `json:"pageNumber"`

	// The current page size
	// Required: true
	PageSize *int32 `json:"pageSize"`

	// Q64 value for the previous page of results
	PreviousPage string `json:"previousPage,omitempty"`

	// Search results
	// Required: true
	Results []*VoicemailMessage `json:"results"`

	// The total number of results found
	// Required: true
	Total *int64 `json:"total"`

	// Resource types the search was performed against
	// Required: true
	Types []string `json:"types"`
}

// Validate validates this voicemails search response
func (m *VoicemailsSearchResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePageCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VoicemailsSearchResponse) validatePageCount(formats strfmt.Registry) error {

	if err := validate.Required("pageCount", "body", m.PageCount); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailsSearchResponse) validatePageNumber(formats strfmt.Registry) error {

	if err := validate.Required("pageNumber", "body", m.PageNumber); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailsSearchResponse) validatePageSize(formats strfmt.Registry) error {

	if err := validate.Required("pageSize", "body", m.PageSize); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailsSearchResponse) validateResults(formats strfmt.Registry) error {

	if err := validate.Required("results", "body", m.Results); err != nil {
		return err
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VoicemailsSearchResponse) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailsSearchResponse) validateTypes(formats strfmt.Registry) error {

	if err := validate.Required("types", "body", m.Types); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this voicemails search response based on the context it is used
func (m *VoicemailsSearchResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VoicemailsSearchResponse) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Results); i++ {

		if m.Results[i] != nil {
			if err := m.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VoicemailsSearchResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VoicemailsSearchResponse) UnmarshalBinary(b []byte) error {
	var res VoicemailsSearchResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BuRescheduleAgentScheduleResult bu reschedule agent schedule result
//
// swagger:model BuRescheduleAgentScheduleResult
type BuRescheduleAgentScheduleResult struct {

	// The agent schedules.  Result will always come via the downloadUrl; however the schema is included for documentation
	DownloadResult *MuRescheduleResultWrapper `json:"downloadResult,omitempty"`

	// The download URL from which to fetch the result
	DownloadURL string `json:"downloadUrl,omitempty"`

	// The management unit to which this part of the result applies
	ManagementUnit *ManagementUnitReference `json:"managementUnit,omitempty"`
}

// Validate validates this bu reschedule agent schedule result
func (m *BuRescheduleAgentScheduleResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDownloadResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuRescheduleAgentScheduleResult) validateDownloadResult(formats strfmt.Registry) error {
	if swag.IsZero(m.DownloadResult) { // not required
		return nil
	}

	if m.DownloadResult != nil {
		if err := m.DownloadResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downloadResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downloadResult")
			}
			return err
		}
	}

	return nil
}

func (m *BuRescheduleAgentScheduleResult) validateManagementUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.ManagementUnit) { // not required
		return nil
	}

	if m.ManagementUnit != nil {
		if err := m.ManagementUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("managementUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("managementUnit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bu reschedule agent schedule result based on the context it is used
func (m *BuRescheduleAgentScheduleResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDownloadResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManagementUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuRescheduleAgentScheduleResult) contextValidateDownloadResult(ctx context.Context, formats strfmt.Registry) error {

	if m.DownloadResult != nil {
		if err := m.DownloadResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downloadResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downloadResult")
			}
			return err
		}
	}

	return nil
}

func (m *BuRescheduleAgentScheduleResult) contextValidateManagementUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.ManagementUnit != nil {
		if err := m.ManagementUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("managementUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("managementUnit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuRescheduleAgentScheduleResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuRescheduleAgentScheduleResult) UnmarshalBinary(b []byte) error {
	var res BuRescheduleAgentScheduleResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DraftTopics draft topics
//
// swagger:model DraftTopics
type DraftTopics struct {

	// Number of conversations where a topic has occurred.
	// Read Only: true
	ConversationCount int32 `json:"conversationCount,omitempty"`

	// Percentage of conversations where a topic has occurred.
	// Read Only: true
	ConversationPercent float32 `json:"conversationPercent,omitempty"`

	// Id for a topic.
	// Required: true
	ID *string `json:"id"`

	// The miner to which the topic belongs.
	// Read Only: true
	Miner *Miner `json:"miner,omitempty"`

	// Topic name.
	Name string `json:"name,omitempty"`

	// Number of unique phrases (sub-utterances) where a topic has occurred.
	// Read Only: true
	PhraseCount int32 `json:"phraseCount,omitempty"`

	// The phrases that are extracted for a topic.
	// Required: true
	Phrases []string `json:"phrases"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Number of unique utterances where a topic has occurred.
	// Read Only: true
	UtteranceCount int32 `json:"utteranceCount,omitempty"`
}

// Validate validates this draft topics
func (m *DraftTopics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhrases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DraftTopics) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DraftTopics) validateMiner(formats strfmt.Registry) error {
	if swag.IsZero(m.Miner) { // not required
		return nil
	}

	if m.Miner != nil {
		if err := m.Miner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("miner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("miner")
			}
			return err
		}
	}

	return nil
}

func (m *DraftTopics) validatePhrases(formats strfmt.Registry) error {

	if err := validate.Required("phrases", "body", m.Phrases); err != nil {
		return err
	}

	return nil
}

func (m *DraftTopics) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this draft topics based on the context it is used
func (m *DraftTopics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConversationCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConversationPercent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMiner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhraseCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUtteranceCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DraftTopics) contextValidateConversationCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "conversationCount", "body", int32(m.ConversationCount)); err != nil {
		return err
	}

	return nil
}

func (m *DraftTopics) contextValidateConversationPercent(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "conversationPercent", "body", float32(m.ConversationPercent)); err != nil {
		return err
	}

	return nil
}

func (m *DraftTopics) contextValidateMiner(ctx context.Context, formats strfmt.Registry) error {

	if m.Miner != nil {
		if err := m.Miner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("miner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("miner")
			}
			return err
		}
	}

	return nil
}

func (m *DraftTopics) contextValidatePhraseCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "phraseCount", "body", int32(m.PhraseCount)); err != nil {
		return err
	}

	return nil
}

func (m *DraftTopics) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *DraftTopics) contextValidateUtteranceCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "utteranceCount", "body", int32(m.UtteranceCount)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DraftTopics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DraftTopics) UnmarshalBinary(b []byte) error {
	var res DraftTopics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenIntegration open integration
//
// swagger:model OpenIntegration
type OpenIntegration struct {

	// Error information returned, if createStatus is set to Error
	// Read Only: true
	CreateError *ErrorBody `json:"createError,omitempty"`

	// Status of asynchronous create operation
	// Read Only: true
	// Enum: [Initiated Completed Error]
	CreateStatus string `json:"createStatus,omitempty"`

	// User reference that created this Integration
	CreatedBy *DomainEntityRef `json:"createdBy,omitempty"`

	// Date this Integration was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Date this Integration was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// A unique Integration Id.
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// messaging setting
	MessagingSetting *MessagingSettingReference `json:"messagingSetting,omitempty"`

	// User reference that last modified this Integration
	ModifiedBy *DomainEntityRef `json:"modifiedBy,omitempty"`

	// The name of the Open messaging integration.
	// Required: true
	Name *string `json:"name"`

	// The outbound notification webhook signature secret token.
	// Required: true
	OutboundNotificationWebhookSignatureSecretToken *string `json:"outboundNotificationWebhookSignatureSecretToken"`

	// The outbound notification webhook URL for the Open messaging integration.
	// Required: true
	OutboundNotificationWebhookURL *string `json:"outboundNotificationWebhookUrl"`

	// The recipient associated to the Open messaging Integration. This recipient is used to associate a flow to an integration
	// Read Only: true
	Recipient *DomainEntityRef `json:"recipient,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The status of the Open Integration
	Status string `json:"status,omitempty"`

	// Defines the SupportedContent profile configured for an integration
	SupportedContent *SupportedContentReference `json:"supportedContent,omitempty"`

	// The user specified headers for the Open messaging integration.
	WebhookHeaders map[string]string `json:"webhookHeaders,omitempty"`
}

// Validate validates this open integration
func (m *OpenIntegration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessagingSetting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutboundNotificationWebhookSignatureSecretToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutboundNotificationWebhookURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedContent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenIntegration) validateCreateError(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateError) { // not required
		return nil
	}

	if m.CreateError != nil {
		if err := m.CreateError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createError")
			}
			return err
		}
	}

	return nil
}

var openIntegrationTypeCreateStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Initiated","Completed","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openIntegrationTypeCreateStatusPropEnum = append(openIntegrationTypeCreateStatusPropEnum, v)
	}
}

const (

	// OpenIntegrationCreateStatusInitiated captures enum value "Initiated"
	OpenIntegrationCreateStatusInitiated string = "Initiated"

	// OpenIntegrationCreateStatusCompleted captures enum value "Completed"
	OpenIntegrationCreateStatusCompleted string = "Completed"

	// OpenIntegrationCreateStatusError captures enum value "Error"
	OpenIntegrationCreateStatusError string = "Error"
)

// prop value enum
func (m *OpenIntegration) validateCreateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, openIntegrationTypeCreateStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OpenIntegration) validateCreateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateCreateStatusEnum("createStatus", "body", m.CreateStatus); err != nil {
		return err
	}

	return nil
}

func (m *OpenIntegration) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *OpenIntegration) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenIntegration) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenIntegration) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *OpenIntegration) validateMessagingSetting(formats strfmt.Registry) error {
	if swag.IsZero(m.MessagingSetting) { // not required
		return nil
	}

	if m.MessagingSetting != nil {
		if err := m.MessagingSetting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messagingSetting")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("messagingSetting")
			}
			return err
		}
	}

	return nil
}

func (m *OpenIntegration) validateModifiedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedBy) { // not required
		return nil
	}

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modifiedBy")
			}
			return err
		}
	}

	return nil
}

func (m *OpenIntegration) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *OpenIntegration) validateOutboundNotificationWebhookSignatureSecretToken(formats strfmt.Registry) error {

	if err := validate.Required("outboundNotificationWebhookSignatureSecretToken", "body", m.OutboundNotificationWebhookSignatureSecretToken); err != nil {
		return err
	}

	return nil
}

func (m *OpenIntegration) validateOutboundNotificationWebhookURL(formats strfmt.Registry) error {

	if err := validate.Required("outboundNotificationWebhookUrl", "body", m.OutboundNotificationWebhookURL); err != nil {
		return err
	}

	return nil
}

func (m *OpenIntegration) validateRecipient(formats strfmt.Registry) error {
	if swag.IsZero(m.Recipient) { // not required
		return nil
	}

	if m.Recipient != nil {
		if err := m.Recipient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recipient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recipient")
			}
			return err
		}
	}

	return nil
}

func (m *OpenIntegration) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenIntegration) validateSupportedContent(formats strfmt.Registry) error {
	if swag.IsZero(m.SupportedContent) { // not required
		return nil
	}

	if m.SupportedContent != nil {
		if err := m.SupportedContent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportedContent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supportedContent")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this open integration based on the context it is used
func (m *OpenIntegration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessagingSetting(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifiedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecipient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupportedContent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenIntegration) contextValidateCreateError(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateError != nil {
		if err := m.CreateError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createError")
			}
			return err
		}
	}

	return nil
}

func (m *OpenIntegration) contextValidateCreateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createStatus", "body", string(m.CreateStatus)); err != nil {
		return err
	}

	return nil
}

func (m *OpenIntegration) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {
		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *OpenIntegration) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *OpenIntegration) contextValidateMessagingSetting(ctx context.Context, formats strfmt.Registry) error {

	if m.MessagingSetting != nil {
		if err := m.MessagingSetting.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messagingSetting")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("messagingSetting")
			}
			return err
		}
	}

	return nil
}

func (m *OpenIntegration) contextValidateModifiedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modifiedBy")
			}
			return err
		}
	}

	return nil
}

func (m *OpenIntegration) contextValidateRecipient(ctx context.Context, formats strfmt.Registry) error {

	if m.Recipient != nil {
		if err := m.Recipient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recipient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recipient")
			}
			return err
		}
	}

	return nil
}

func (m *OpenIntegration) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *OpenIntegration) contextValidateSupportedContent(ctx context.Context, formats strfmt.Registry) error {

	if m.SupportedContent != nil {
		if err := m.SupportedContent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportedContent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supportedContent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenIntegration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenIntegration) UnmarshalBinary(b []byte) error {
	var res OpenIntegration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

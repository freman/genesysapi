// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Annotation annotation
//
// swagger:model Annotation
type Annotation struct {

	// Duration of annotation (milliseconds).
	AbsoluteDurationMs int64 `json:"absoluteDurationMs,omitempty"`

	// Offset of annotation (milliseconds) from start of recording.
	AbsoluteLocation int64 `json:"absoluteLocation,omitempty"`

	// A modifier to the evaluation score when the phrase is spotted in the agent channel.
	// Required: true
	AgentScoreModifier *string `json:"agentScoreModifier"`

	// Actual confidence that this is an accurate match.
	Confidence float32 `json:"confidence,omitempty"`

	// A modifier to the evaluation score when the phrase is spotted in the customer channel.
	// Required: true
	CustomerScoreModifier *string `json:"customerScoreModifier"`

	// Text of annotation.
	Description string `json:"description,omitempty"`

	// Duration of annotation in milliseconds.
	DurationMs int64 `json:"durationMs,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Configured sensitivity threshold that can be increased to lower false positives or decreased to reduce false negatives.
	KeywordConfidenceThreshold string `json:"keywordConfidenceThreshold,omitempty"`

	// The word or phrase which is being looked for with speech recognition.
	KeywordName string `json:"keywordName,omitempty"`

	// A unique identifier for the keyword set to which this spotted keyword belongs.
	KeywordSetID string `json:"keywordSetId,omitempty"`

	// The keyword set to which this spotted keyword belongs.
	KeywordSetName string `json:"keywordSetName,omitempty"`

	// Offset of annotation in milliseconds.
	Location int64 `json:"location,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Duration of annotation (milliseconds), adjusted for any recording cuts.
	RecordingDurationMs int64 `json:"recordingDurationMs,omitempty"`

	// Offset of annotation (milliseconds) from start of recording, adjusted for any recording cuts
	RecordingLocation int64 `json:"recordingLocation,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Beginning time offset of the keyword spot match.
	TimeBegin string `json:"timeBegin,omitempty"`

	// Ending time offset of the keyword spot match.
	TimeEnd string `json:"timeEnd,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// User that created this annotation (if any).
	User *User `json:"user,omitempty"`

	// The phonetic spellings for the phrase and alternate spellings.
	Utterance string `json:"utterance,omitempty"`
}

// Validate validates this annotation
func (m *Annotation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentScoreModifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerScoreModifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Annotation) validateAgentScoreModifier(formats strfmt.Registry) error {

	if err := validate.Required("agentScoreModifier", "body", m.AgentScoreModifier); err != nil {
		return err
	}

	return nil
}

func (m *Annotation) validateCustomerScoreModifier(formats strfmt.Registry) error {

	if err := validate.Required("customerScoreModifier", "body", m.CustomerScoreModifier); err != nil {
		return err
	}

	return nil
}

func (m *Annotation) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Annotation) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Annotation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Annotation) UnmarshalBinary(b []byte) error {
	var res Annotation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

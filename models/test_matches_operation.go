// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TestMatchesOperation Information about the Trigger test mode processing step
//
// swagger:model TestMatchesOperation
type TestMatchesOperation struct {

	// Details about why the operation did or did not succeed
	Details []*MatchCriteriaTestResult `json:"details"`

	// Whether or not the operation matches expectations
	Matches bool `json:"matches"`

	// The name of the processing step
	Name string `json:"name,omitempty"`

	// The number of the processing step
	Step int32 `json:"step,omitempty"`
}

// Validate validates this test matches operation
func (m *TestMatchesOperation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestMatchesOperation) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	for i := 0; i < len(m.Details); i++ {
		if swag.IsZero(m.Details[i]) { // not required
			continue
		}

		if m.Details[i] != nil {
			if err := m.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestMatchesOperation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestMatchesOperation) UnmarshalBinary(b []byte) error {
	var res TestMatchesOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

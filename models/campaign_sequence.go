// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CampaignSequence campaign sequence
//
// swagger:model CampaignSequence
type CampaignSequence struct {

	// The ordered list of Campaigns that this CampaignSequence will run.
	// Required: true
	Campaigns []*DomainEntityRef `json:"campaigns"`

	// A zero-based index indicating which Campaign this CampaignSequence is currently on.
	// Required: true
	// Read Only: true
	CurrentCampaign int32 `json:"currentCampaign"`

	// Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Indicates if a sequence should repeat from the beginning after the last campaign completes. Default is false.
	Repeat bool `json:"repeat,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The current status of the CampaignSequence. A CampaignSequence can be turned 'on' or 'off'.
	// Required: true
	// Enum: [on off complete]
	Status *string `json:"status"`

	// A message indicating if and why a CampaignSequence has stopped unexpectedly.
	// Read Only: true
	StopMessage string `json:"stopMessage,omitempty"`

	// Required for updates, must match the version number of the most recent update
	Version int32 `json:"version,omitempty"`
}

// Validate validates this campaign sequence
func (m *CampaignSequence) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaigns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentCampaign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CampaignSequence) validateCampaigns(formats strfmt.Registry) error {

	if err := validate.Required("campaigns", "body", m.Campaigns); err != nil {
		return err
	}

	for i := 0; i < len(m.Campaigns); i++ {
		if swag.IsZero(m.Campaigns[i]) { // not required
			continue
		}

		if m.Campaigns[i] != nil {
			if err := m.Campaigns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("campaigns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CampaignSequence) validateCurrentCampaign(formats strfmt.Registry) error {

	if err := validate.Required("currentCampaign", "body", int32(m.CurrentCampaign)); err != nil {
		return err
	}

	return nil
}

func (m *CampaignSequence) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CampaignSequence) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CampaignSequence) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var campaignSequenceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["on","off","complete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		campaignSequenceTypeStatusPropEnum = append(campaignSequenceTypeStatusPropEnum, v)
	}
}

const (

	// CampaignSequenceStatusOn captures enum value "on"
	CampaignSequenceStatusOn string = "on"

	// CampaignSequenceStatusOff captures enum value "off"
	CampaignSequenceStatusOff string = "off"

	// CampaignSequenceStatusComplete captures enum value "complete"
	CampaignSequenceStatusComplete string = "complete"
)

// prop value enum
func (m *CampaignSequence) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, campaignSequenceTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CampaignSequence) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CampaignSequence) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CampaignSequence) UnmarshalBinary(b []byte) error {
	var res CampaignSequence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

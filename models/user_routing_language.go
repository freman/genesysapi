// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserRoutingLanguage Represents an organization langauge assigned to a user. When assigning to a user specify the organization language id as the id.
//
// swagger:model UserRoutingLanguage
type UserRoutingLanguage struct {

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// URI to the organization language used by this user langauge.
	// Read Only: true
	// Format: uri
	LanguageURI strfmt.URI `json:"languageUri,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Proficiency is a rating from 0.0 to 5.0 on how competent an agent is for a particular language. It is used when a queue is set to "Best available language" mode to allow acd interactions to target agents with higher proficiency ratings.
	Proficiency float64 `json:"proficiency,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Activate or deactivate this routing langauge.
	// Enum: [active inactive deleted]
	State string `json:"state,omitempty"`
}

// Validate validates this user routing language
func (m *UserRoutingLanguage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLanguageURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserRoutingLanguage) validateLanguageURI(formats strfmt.Registry) error {

	if swag.IsZero(m.LanguageURI) { // not required
		return nil
	}

	if err := validate.FormatOf("languageUri", "body", "uri", m.LanguageURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserRoutingLanguage) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var userRoutingLanguageTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userRoutingLanguageTypeStatePropEnum = append(userRoutingLanguageTypeStatePropEnum, v)
	}
}

const (

	// UserRoutingLanguageStateActive captures enum value "active"
	UserRoutingLanguageStateActive string = "active"

	// UserRoutingLanguageStateInactive captures enum value "inactive"
	UserRoutingLanguageStateInactive string = "inactive"

	// UserRoutingLanguageStateDeleted captures enum value "deleted"
	UserRoutingLanguageStateDeleted string = "deleted"
)

// prop value enum
func (m *UserRoutingLanguage) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userRoutingLanguageTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserRoutingLanguage) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserRoutingLanguage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserRoutingLanguage) UnmarshalBinary(b []byte) error {
	var res UserRoutingLanguage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TextBotFlowLaunchRequest Settings for launching an instance of a bot flow.
//
// swagger:model TextBotFlowLaunchRequest
type TextBotFlowLaunchRequest struct {

	// Channel information relevant to the bot flow.
	// Required: true
	Channel *TextBotChannel `json:"channel"`

	// A conversation ID to associate with the bot flow, if available.
	ConversationID string `json:"conversationId,omitempty"`

	// The ID of the external session that is associated with the bot flow.
	// Required: true
	ExternalSessionID *string `json:"externalSessionId"`

	// Specifies which Bot Flow to launch.
	// Required: true
	Flow *TextBotFlow `json:"flow"`

	// Input values to the flow. Valid values are defined by the flow's input JSON schema.
	InputData *TextBotInputOutputData `json:"inputData,omitempty"`

	// The language that the bot will use in the session. Validated against list of supported languages and if the value is omitted or is invalid, the default language will be used.
	Language string `json:"language,omitempty"`
}

// Validate validates this text bot flow launch request
func (m *TextBotFlowLaunchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalSessionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TextBotFlowLaunchRequest) validateChannel(formats strfmt.Registry) error {

	if err := validate.Required("channel", "body", m.Channel); err != nil {
		return err
	}

	if m.Channel != nil {
		if err := m.Channel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channel")
			}
			return err
		}
	}

	return nil
}

func (m *TextBotFlowLaunchRequest) validateExternalSessionID(formats strfmt.Registry) error {

	if err := validate.Required("externalSessionId", "body", m.ExternalSessionID); err != nil {
		return err
	}

	return nil
}

func (m *TextBotFlowLaunchRequest) validateFlow(formats strfmt.Registry) error {

	if err := validate.Required("flow", "body", m.Flow); err != nil {
		return err
	}

	if m.Flow != nil {
		if err := m.Flow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flow")
			}
			return err
		}
	}

	return nil
}

func (m *TextBotFlowLaunchRequest) validateInputData(formats strfmt.Registry) error {
	if swag.IsZero(m.InputData) { // not required
		return nil
	}

	if m.InputData != nil {
		if err := m.InputData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputData")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this text bot flow launch request based on the context it is used
func (m *TextBotFlowLaunchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInputData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TextBotFlowLaunchRequest) contextValidateChannel(ctx context.Context, formats strfmt.Registry) error {

	if m.Channel != nil {
		if err := m.Channel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channel")
			}
			return err
		}
	}

	return nil
}

func (m *TextBotFlowLaunchRequest) contextValidateFlow(ctx context.Context, formats strfmt.Registry) error {

	if m.Flow != nil {
		if err := m.Flow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flow")
			}
			return err
		}
	}

	return nil
}

func (m *TextBotFlowLaunchRequest) contextValidateInputData(ctx context.Context, formats strfmt.Registry) error {

	if m.InputData != nil {
		if err := m.InputData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TextBotFlowLaunchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TextBotFlowLaunchRequest) UnmarshalBinary(b []byte) error {
	var res TextBotFlowLaunchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

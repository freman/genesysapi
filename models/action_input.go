// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ActionInput Input requirements of Action.
//
// swagger:model ActionInput
type ActionInput struct {

	// JSON Schema that defines the body of the request that the client (edge/architect/postman) is sending to the service, on the /execute path. If the 'flatten' query parameter is omitted or false, this field will be returned. Either inputSchema or inputSchemaFlattened will be returned, not both.
	InputSchema *JSONSchemaDocument `json:"inputSchema,omitempty"`

	// JSON Schema that defines the body of the request that the client (edge/architect/postman) is sending to the service, on the /execute path. The schema is transformed based on Architect's flattened format. If the 'flatten' query parameter is supplied as true, this field will be returned. Either inputSchema or inputSchemaFlattened will be returned, not both.
	InputSchemaFlattened *JSONSchemaDocument `json:"inputSchemaFlattened,omitempty"`

	// The URI of the input schema
	InputSchemaURI string `json:"inputSchemaUri,omitempty"`
}

// Validate validates this action input
func (m *ActionInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputSchemaFlattened(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActionInput) validateInputSchema(formats strfmt.Registry) error {
	if swag.IsZero(m.InputSchema) { // not required
		return nil
	}

	if m.InputSchema != nil {
		if err := m.InputSchema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputSchema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputSchema")
			}
			return err
		}
	}

	return nil
}

func (m *ActionInput) validateInputSchemaFlattened(formats strfmt.Registry) error {
	if swag.IsZero(m.InputSchemaFlattened) { // not required
		return nil
	}

	if m.InputSchemaFlattened != nil {
		if err := m.InputSchemaFlattened.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputSchemaFlattened")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputSchemaFlattened")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this action input based on the context it is used
func (m *ActionInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInputSchema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInputSchemaFlattened(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActionInput) contextValidateInputSchema(ctx context.Context, formats strfmt.Registry) error {

	if m.InputSchema != nil {
		if err := m.InputSchema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputSchema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputSchema")
			}
			return err
		}
	}

	return nil
}

func (m *ActionInput) contextValidateInputSchemaFlattened(ctx context.Context, formats strfmt.Registry) error {

	if m.InputSchemaFlattened != nil {
		if err := m.InputSchemaFlattened.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputSchemaFlattened")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputSchemaFlattened")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActionInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActionInput) UnmarshalBinary(b []byte) error {
	var res ActionInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalyticsProperty analytics property
//
// swagger:model AnalyticsProperty
type AnalyticsProperty struct {

	// User-defined rather than intrinsic system-observed values. These are tagged onto segments by other components within PureCloud or by API users directly.  This is the name of the user-defined property.
	Property string `json:"property,omitempty"`

	// Indicates what the data type is (e.g. integer vs string) and therefore how to evaluate what would constitute a match
	// Enum: [bool integer real date string uuid]
	PropertyType string `json:"propertyType,omitempty"`

	// What property value to match against
	Value string `json:"value,omitempty"`
}

// Validate validates this analytics property
func (m *AnalyticsProperty) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePropertyType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var analyticsPropertyTypePropertyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bool","integer","real","date","string","uuid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analyticsPropertyTypePropertyTypePropEnum = append(analyticsPropertyTypePropertyTypePropEnum, v)
	}
}

const (

	// AnalyticsPropertyPropertyTypeBool captures enum value "bool"
	AnalyticsPropertyPropertyTypeBool string = "bool"

	// AnalyticsPropertyPropertyTypeInteger captures enum value "integer"
	AnalyticsPropertyPropertyTypeInteger string = "integer"

	// AnalyticsPropertyPropertyTypeReal captures enum value "real"
	AnalyticsPropertyPropertyTypeReal string = "real"

	// AnalyticsPropertyPropertyTypeDate captures enum value "date"
	AnalyticsPropertyPropertyTypeDate string = "date"

	// AnalyticsPropertyPropertyTypeString captures enum value "string"
	AnalyticsPropertyPropertyTypeString string = "string"

	// AnalyticsPropertyPropertyTypeUUID captures enum value "uuid"
	AnalyticsPropertyPropertyTypeUUID string = "uuid"
)

// prop value enum
func (m *AnalyticsProperty) validatePropertyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, analyticsPropertyTypePropertyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AnalyticsProperty) validatePropertyType(formats strfmt.Registry) error {
	if swag.IsZero(m.PropertyType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePropertyTypeEnum("propertyType", "body", m.PropertyType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this analytics property based on context it is used
func (m *AnalyticsProperty) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AnalyticsProperty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalyticsProperty) UnmarshalBinary(b []byte) error {
	var res AnalyticsProperty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

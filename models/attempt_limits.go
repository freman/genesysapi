// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttemptLimits attempt limits
//
// swagger:model AttemptLimits
type AttemptLimits struct {

	// Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The maximum number of times a contact can be called within the resetPeriod. Required if maxAttemptsPerNumber is not defined.
	MaxAttemptsPerContact int32 `json:"maxAttemptsPerContact,omitempty"`

	// The maximum number of times a phone number can be called within the resetPeriod. Required if maxAttemptsPerContact is not defined.
	MaxAttemptsPerNumber int32 `json:"maxAttemptsPerNumber,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Configuration for recall attempts.
	RecallEntries map[string]RecallEntry `json:"recallEntries,omitempty"`

	// After how long the number of attempts will be set back to 0. Defaults to NEVER.
	// Enum: [NEVER TODAY]
	ResetPeriod string `json:"resetPeriod,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// If the resetPeriod is TODAY, this specifies the timezone in which TODAY occurs. Required if the resetPeriod is TODAY.
	TimeZoneID string `json:"timeZoneId,omitempty"`

	// Required for updates, must match the version number of the most recent update
	Version int32 `json:"version,omitempty"`
}

// Validate validates this attempt limits
func (m *AttemptLimits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecallEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResetPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttemptLimits) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AttemptLimits) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AttemptLimits) validateRecallEntries(formats strfmt.Registry) error {

	if swag.IsZero(m.RecallEntries) { // not required
		return nil
	}

	for k := range m.RecallEntries {

		if err := validate.Required("recallEntries"+"."+k, "body", m.RecallEntries[k]); err != nil {
			return err
		}
		if val, ok := m.RecallEntries[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

var attemptLimitsTypeResetPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NEVER","TODAY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		attemptLimitsTypeResetPeriodPropEnum = append(attemptLimitsTypeResetPeriodPropEnum, v)
	}
}

const (

	// AttemptLimitsResetPeriodNEVER captures enum value "NEVER"
	AttemptLimitsResetPeriodNEVER string = "NEVER"

	// AttemptLimitsResetPeriodTODAY captures enum value "TODAY"
	AttemptLimitsResetPeriodTODAY string = "TODAY"
)

// prop value enum
func (m *AttemptLimits) validateResetPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, attemptLimitsTypeResetPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AttemptLimits) validateResetPeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.ResetPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateResetPeriodEnum("resetPeriod", "body", m.ResetPeriod); err != nil {
		return err
	}

	return nil
}

func (m *AttemptLimits) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AttemptLimits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttemptLimits) UnmarshalBinary(b []byte) error {
	var res AttemptLimits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

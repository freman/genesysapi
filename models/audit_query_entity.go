// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditQueryEntity audit query entity
//
// swagger:model AuditQueryEntity
type AuditQueryEntity struct {

	// List of Actions
	Actions []string `json:"actions"`

	// Name of the Entity
	// Enum: [Document Queue Recording Role VoicemailUserPolicy WrapupCode AccessToken OAuthClient OAuthClientAuthorization AuthOrganization AuthUser BulkActions Feedback Topic Program Segment Outcome ClickstreamSettings Schedule Trigger]
	Name string `json:"name,omitempty"`
}

// Validate validates this audit query entity
func (m *AuditQueryEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var auditQueryEntityActionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Create","View","Update","Delete","Download","MemberAdd","MemberUpdate","MemberRemove","Read","ApplyProtection","RevokeProtection","UpdateRetention","ReadAll","Execute","Publish","Unpublish","Enable","Disable","Authorize","Deauthorize","Authenticate","ChangePassword"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auditQueryEntityActionsItemsEnum = append(auditQueryEntityActionsItemsEnum, v)
	}
}

func (m *AuditQueryEntity) validateActionsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, auditQueryEntityActionsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AuditQueryEntity) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {

		// value enum
		if err := m.validateActionsItemsEnum("actions"+"."+strconv.Itoa(i), "body", m.Actions[i]); err != nil {
			return err
		}

	}

	return nil
}

var auditQueryEntityTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Document","Queue","Recording","Role","VoicemailUserPolicy","WrapupCode","AccessToken","OAuthClient","OAuthClientAuthorization","AuthOrganization","AuthUser","BulkActions","Feedback","Topic","Program","Segment","Outcome","ClickstreamSettings","Schedule","Trigger"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auditQueryEntityTypeNamePropEnum = append(auditQueryEntityTypeNamePropEnum, v)
	}
}

const (

	// AuditQueryEntityNameDocument captures enum value "Document"
	AuditQueryEntityNameDocument string = "Document"

	// AuditQueryEntityNameQueue captures enum value "Queue"
	AuditQueryEntityNameQueue string = "Queue"

	// AuditQueryEntityNameRecording captures enum value "Recording"
	AuditQueryEntityNameRecording string = "Recording"

	// AuditQueryEntityNameRole captures enum value "Role"
	AuditQueryEntityNameRole string = "Role"

	// AuditQueryEntityNameVoicemailUserPolicy captures enum value "VoicemailUserPolicy"
	AuditQueryEntityNameVoicemailUserPolicy string = "VoicemailUserPolicy"

	// AuditQueryEntityNameWrapupCode captures enum value "WrapupCode"
	AuditQueryEntityNameWrapupCode string = "WrapupCode"

	// AuditQueryEntityNameAccessToken captures enum value "AccessToken"
	AuditQueryEntityNameAccessToken string = "AccessToken"

	// AuditQueryEntityNameOAuthClient captures enum value "OAuthClient"
	AuditQueryEntityNameOAuthClient string = "OAuthClient"

	// AuditQueryEntityNameOAuthClientAuthorization captures enum value "OAuthClientAuthorization"
	AuditQueryEntityNameOAuthClientAuthorization string = "OAuthClientAuthorization"

	// AuditQueryEntityNameAuthOrganization captures enum value "AuthOrganization"
	AuditQueryEntityNameAuthOrganization string = "AuthOrganization"

	// AuditQueryEntityNameAuthUser captures enum value "AuthUser"
	AuditQueryEntityNameAuthUser string = "AuthUser"

	// AuditQueryEntityNameBulkActions captures enum value "BulkActions"
	AuditQueryEntityNameBulkActions string = "BulkActions"

	// AuditQueryEntityNameFeedback captures enum value "Feedback"
	AuditQueryEntityNameFeedback string = "Feedback"

	// AuditQueryEntityNameTopic captures enum value "Topic"
	AuditQueryEntityNameTopic string = "Topic"

	// AuditQueryEntityNameProgram captures enum value "Program"
	AuditQueryEntityNameProgram string = "Program"

	// AuditQueryEntityNameSegment captures enum value "Segment"
	AuditQueryEntityNameSegment string = "Segment"

	// AuditQueryEntityNameOutcome captures enum value "Outcome"
	AuditQueryEntityNameOutcome string = "Outcome"

	// AuditQueryEntityNameClickstreamSettings captures enum value "ClickstreamSettings"
	AuditQueryEntityNameClickstreamSettings string = "ClickstreamSettings"

	// AuditQueryEntityNameSchedule captures enum value "Schedule"
	AuditQueryEntityNameSchedule string = "Schedule"

	// AuditQueryEntityNameTrigger captures enum value "Trigger"
	AuditQueryEntityNameTrigger string = "Trigger"
)

// prop value enum
func (m *AuditQueryEntity) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, auditQueryEntityTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AuditQueryEntity) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditQueryEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditQueryEntity) UnmarshalBinary(b []byte) error {
	var res AuditQueryEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

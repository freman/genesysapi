// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MessagingIntegration messaging integration
//
// swagger:model MessagingIntegration
type MessagingIntegration struct {

	// User reference that created this Integration
	// Read Only: true
	CreatedBy *DomainEntityRef `json:"createdBy,omitempty"`

	// Date this Integration was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Date this Integration was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// A unique Integration Id
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// messaging setting
	MessagingSetting *MessagingSettingReference `json:"messagingSetting,omitempty"`

	// The type of Messaging Integration
	// Required: true
	// Read Only: true
	// Enum: [sms facebook twitter line whatsapp webmessaging instagram open]
	MessengerType string `json:"messengerType"`

	// User reference that last modified this Integration
	// Read Only: true
	ModifiedBy *DomainEntityRef `json:"modifiedBy,omitempty"`

	// The name of the Integration
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// The recipient associated to the Integration. This recipient is used to associate a flow to an integration
	// Read Only: true
	Recipient *DomainEntityRef `json:"recipient,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The status of the Integration
	// Read Only: true
	// Enum: [Active Inactive Error Starting Incomplete Deleting DeletionFailed]
	Status string `json:"status,omitempty"`

	// Defines the SupportedContent profile configured for an integration
	SupportedContent *SupportedContentReference `json:"supportedContent,omitempty"`

	// Version number required for updates.
	// Required: true
	// Read Only: true
	Version int32 `json:"version"`
}

// Validate validates this messaging integration
func (m *MessagingIntegration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessagingSetting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessengerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MessagingIntegration) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *MessagingIntegration) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MessagingIntegration) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MessagingIntegration) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *MessagingIntegration) validateMessagingSetting(formats strfmt.Registry) error {

	if swag.IsZero(m.MessagingSetting) { // not required
		return nil
	}

	if m.MessagingSetting != nil {
		if err := m.MessagingSetting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messagingSetting")
			}
			return err
		}
	}

	return nil
}

var messagingIntegrationTypeMessengerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sms","facebook","twitter","line","whatsapp","webmessaging","instagram","open"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messagingIntegrationTypeMessengerTypePropEnum = append(messagingIntegrationTypeMessengerTypePropEnum, v)
	}
}

const (

	// MessagingIntegrationMessengerTypeSms captures enum value "sms"
	MessagingIntegrationMessengerTypeSms string = "sms"

	// MessagingIntegrationMessengerTypeFacebook captures enum value "facebook"
	MessagingIntegrationMessengerTypeFacebook string = "facebook"

	// MessagingIntegrationMessengerTypeTwitter captures enum value "twitter"
	MessagingIntegrationMessengerTypeTwitter string = "twitter"

	// MessagingIntegrationMessengerTypeLine captures enum value "line"
	MessagingIntegrationMessengerTypeLine string = "line"

	// MessagingIntegrationMessengerTypeWhatsapp captures enum value "whatsapp"
	MessagingIntegrationMessengerTypeWhatsapp string = "whatsapp"

	// MessagingIntegrationMessengerTypeWebmessaging captures enum value "webmessaging"
	MessagingIntegrationMessengerTypeWebmessaging string = "webmessaging"

	// MessagingIntegrationMessengerTypeInstagram captures enum value "instagram"
	MessagingIntegrationMessengerTypeInstagram string = "instagram"

	// MessagingIntegrationMessengerTypeOpen captures enum value "open"
	MessagingIntegrationMessengerTypeOpen string = "open"
)

// prop value enum
func (m *MessagingIntegration) validateMessengerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, messagingIntegrationTypeMessengerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MessagingIntegration) validateMessengerType(formats strfmt.Registry) error {

	if err := validate.RequiredString("messengerType", "body", string(m.MessengerType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateMessengerTypeEnum("messengerType", "body", m.MessengerType); err != nil {
		return err
	}

	return nil
}

func (m *MessagingIntegration) validateModifiedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedBy) { // not required
		return nil
	}

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedBy")
			}
			return err
		}
	}

	return nil
}

func (m *MessagingIntegration) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *MessagingIntegration) validateRecipient(formats strfmt.Registry) error {

	if swag.IsZero(m.Recipient) { // not required
		return nil
	}

	if m.Recipient != nil {
		if err := m.Recipient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recipient")
			}
			return err
		}
	}

	return nil
}

func (m *MessagingIntegration) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var messagingIntegrationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive","Error","Starting","Incomplete","Deleting","DeletionFailed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messagingIntegrationTypeStatusPropEnum = append(messagingIntegrationTypeStatusPropEnum, v)
	}
}

const (

	// MessagingIntegrationStatusActive captures enum value "Active"
	MessagingIntegrationStatusActive string = "Active"

	// MessagingIntegrationStatusInactive captures enum value "Inactive"
	MessagingIntegrationStatusInactive string = "Inactive"

	// MessagingIntegrationStatusError captures enum value "Error"
	MessagingIntegrationStatusError string = "Error"

	// MessagingIntegrationStatusStarting captures enum value "Starting"
	MessagingIntegrationStatusStarting string = "Starting"

	// MessagingIntegrationStatusIncomplete captures enum value "Incomplete"
	MessagingIntegrationStatusIncomplete string = "Incomplete"

	// MessagingIntegrationStatusDeleting captures enum value "Deleting"
	MessagingIntegrationStatusDeleting string = "Deleting"

	// MessagingIntegrationStatusDeletionFailed captures enum value "DeletionFailed"
	MessagingIntegrationStatusDeletionFailed string = "DeletionFailed"
)

// prop value enum
func (m *MessagingIntegration) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, messagingIntegrationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MessagingIntegration) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *MessagingIntegration) validateSupportedContent(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedContent) { // not required
		return nil
	}

	if m.SupportedContent != nil {
		if err := m.SupportedContent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportedContent")
			}
			return err
		}
	}

	return nil
}

func (m *MessagingIntegration) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", int32(m.Version)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MessagingIntegration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MessagingIntegration) UnmarshalBinary(b []byte) error {
	var res MessagingIntegration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationConfiguration Configuration for an Integration
//
// swagger:model IntegrationConfiguration
type IntegrationConfiguration struct {

	// Advanced configuration described by the schema in the advancedSchemaUri field.
	// Required: true
	Advanced interface{} `json:"advanced"`

	// Credentials required by the integration. The required keys are indicated in the credentials property of the Integration Type
	// Required: true
	Credentials map[string]CredentialInfo `json:"credentials"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the integration, used to distinguish this integration from others of the same type.
	// Required: true
	Name *string `json:"name"`

	// Notes about the integration.
	// Required: true
	Notes *string `json:"notes"`

	// Key-value configuration settings described by the schema in the propertiesSchemaUri field.
	// Required: true
	Properties interface{} `json:"properties"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Version number required for updates.
	// Required: true
	Version *int32 `json:"version"`
}

// Validate validates this integration configuration
func (m *IntegrationConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvanced(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationConfiguration) validateAdvanced(formats strfmt.Registry) error {

	if err := validate.Required("advanced", "body", m.Advanced); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationConfiguration) validateCredentials(formats strfmt.Registry) error {

	for k := range m.Credentials {

		if err := validate.Required("credentials"+"."+k, "body", m.Credentials[k]); err != nil {
			return err
		}
		if val, ok := m.Credentials[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IntegrationConfiguration) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationConfiguration) validateNotes(formats strfmt.Registry) error {

	if err := validate.Required("notes", "body", m.Notes); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationConfiguration) validateProperties(formats strfmt.Registry) error {

	if err := validate.Required("properties", "body", m.Properties); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationConfiguration) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationConfiguration) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationConfiguration) UnmarshalBinary(b []byte) error {
	var res IntegrationConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

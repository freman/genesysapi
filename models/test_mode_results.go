// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TestModeResults Information about trigger test mode execution
//
// swagger:model TestModeResults
type TestModeResults struct {

	// Information about the json path matching criteria
	JSONPathValidation *TestMatchesOperation `json:"jsonPathValidation,omitempty"`

	// Information about the validation of the schema of the event body passed in to test mode
	SchemaValidation *TestSchemaOperation `json:"schemaValidation,omitempty"`

	// Information about the validation of the trigger target
	TargetValidation *TestTargetOperation `json:"targetValidation,omitempty"`

	// Whether the trigger would have matched on the provided event body
	TriggerMatches bool `json:"triggerMatches"`
}

// Validate validates this test mode results
func (m *TestModeResults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJSONPathValidation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemaValidation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestModeResults) validateJSONPathValidation(formats strfmt.Registry) error {

	if swag.IsZero(m.JSONPathValidation) { // not required
		return nil
	}

	if m.JSONPathValidation != nil {
		if err := m.JSONPathValidation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jsonPathValidation")
			}
			return err
		}
	}

	return nil
}

func (m *TestModeResults) validateSchemaValidation(formats strfmt.Registry) error {

	if swag.IsZero(m.SchemaValidation) { // not required
		return nil
	}

	if m.SchemaValidation != nil {
		if err := m.SchemaValidation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schemaValidation")
			}
			return err
		}
	}

	return nil
}

func (m *TestModeResults) validateTargetValidation(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetValidation) { // not required
		return nil
	}

	if m.TargetValidation != nil {
		if err := m.TargetValidation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetValidation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestModeResults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestModeResults) UnmarshalBinary(b []byte) error {
	var res TestModeResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

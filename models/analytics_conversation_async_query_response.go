// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalyticsConversationAsyncQueryResponse analytics conversation async query response
//
// swagger:model AnalyticsConversationAsyncQueryResponse
type AnalyticsConversationAsyncQueryResponse struct {

	// conversations
	Conversations []*AnalyticsConversation `json:"conversations"`

	// Optional cursor to indicate where to resume the results
	Cursor string `json:"cursor,omitempty"`

	// Data available up to at least this datetime. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DataAvailabilityDate strfmt.DateTime `json:"dataAvailabilityDate,omitempty"`
}

// Validate validates this analytics conversation async query response
func (m *AnalyticsConversationAsyncQueryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConversations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataAvailabilityDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyticsConversationAsyncQueryResponse) validateConversations(formats strfmt.Registry) error {
	if swag.IsZero(m.Conversations) { // not required
		return nil
	}

	for i := 0; i < len(m.Conversations); i++ {
		if swag.IsZero(m.Conversations[i]) { // not required
			continue
		}

		if m.Conversations[i] != nil {
			if err := m.Conversations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conversations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conversations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AnalyticsConversationAsyncQueryResponse) validateDataAvailabilityDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DataAvailabilityDate) { // not required
		return nil
	}

	if err := validate.FormatOf("dataAvailabilityDate", "body", "date-time", m.DataAvailabilityDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this analytics conversation async query response based on the context it is used
func (m *AnalyticsConversationAsyncQueryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConversations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyticsConversationAsyncQueryResponse) contextValidateConversations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conversations); i++ {

		if m.Conversations[i] != nil {
			if err := m.Conversations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conversations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conversations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnalyticsConversationAsyncQueryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalyticsConversationAsyncQueryResponse) UnmarshalBinary(b []byte) error {
	var res AnalyticsConversationAsyncQueryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

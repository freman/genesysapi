// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainResourceConditionNode domain resource condition node
//
// swagger:model DomainResourceConditionNode
type DomainResourceConditionNode struct {

	// conjunction
	// Enum: [AND OR]
	Conjunction string `json:"conjunction,omitempty"`

	// operands
	Operands []*DomainResourceConditionValue `json:"operands"`

	// operator
	// Enum: [EQ IN GE GT LE LT]
	Operator string `json:"operator,omitempty"`

	// terms
	Terms []*DomainResourceConditionNode `json:"terms"`

	// variable name
	VariableName string `json:"variableName,omitempty"`
}

// Validate validates this domain resource condition node
func (m *DomainResourceConditionNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConjunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var domainResourceConditionNodeTypeConjunctionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AND","OR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainResourceConditionNodeTypeConjunctionPropEnum = append(domainResourceConditionNodeTypeConjunctionPropEnum, v)
	}
}

const (

	// DomainResourceConditionNodeConjunctionAND captures enum value "AND"
	DomainResourceConditionNodeConjunctionAND string = "AND"

	// DomainResourceConditionNodeConjunctionOR captures enum value "OR"
	DomainResourceConditionNodeConjunctionOR string = "OR"
)

// prop value enum
func (m *DomainResourceConditionNode) validateConjunctionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, domainResourceConditionNodeTypeConjunctionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DomainResourceConditionNode) validateConjunction(formats strfmt.Registry) error {
	if swag.IsZero(m.Conjunction) { // not required
		return nil
	}

	// value enum
	if err := m.validateConjunctionEnum("conjunction", "body", m.Conjunction); err != nil {
		return err
	}

	return nil
}

func (m *DomainResourceConditionNode) validateOperands(formats strfmt.Registry) error {
	if swag.IsZero(m.Operands) { // not required
		return nil
	}

	for i := 0; i < len(m.Operands); i++ {
		if swag.IsZero(m.Operands[i]) { // not required
			continue
		}

		if m.Operands[i] != nil {
			if err := m.Operands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("operands" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("operands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var domainResourceConditionNodeTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EQ","IN","GE","GT","LE","LT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainResourceConditionNodeTypeOperatorPropEnum = append(domainResourceConditionNodeTypeOperatorPropEnum, v)
	}
}

const (

	// DomainResourceConditionNodeOperatorEQ captures enum value "EQ"
	DomainResourceConditionNodeOperatorEQ string = "EQ"

	// DomainResourceConditionNodeOperatorIN captures enum value "IN"
	DomainResourceConditionNodeOperatorIN string = "IN"

	// DomainResourceConditionNodeOperatorGE captures enum value "GE"
	DomainResourceConditionNodeOperatorGE string = "GE"

	// DomainResourceConditionNodeOperatorGT captures enum value "GT"
	DomainResourceConditionNodeOperatorGT string = "GT"

	// DomainResourceConditionNodeOperatorLE captures enum value "LE"
	DomainResourceConditionNodeOperatorLE string = "LE"

	// DomainResourceConditionNodeOperatorLT captures enum value "LT"
	DomainResourceConditionNodeOperatorLT string = "LT"
)

// prop value enum
func (m *DomainResourceConditionNode) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, domainResourceConditionNodeTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DomainResourceConditionNode) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *DomainResourceConditionNode) validateTerms(formats strfmt.Registry) error {
	if swag.IsZero(m.Terms) { // not required
		return nil
	}

	for i := 0; i < len(m.Terms); i++ {
		if swag.IsZero(m.Terms[i]) { // not required
			continue
		}

		if m.Terms[i] != nil {
			if err := m.Terms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("terms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("terms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this domain resource condition node based on the context it is used
func (m *DomainResourceConditionNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperands(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTerms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainResourceConditionNode) contextValidateOperands(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Operands); i++ {

		if m.Operands[i] != nil {
			if err := m.Operands[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("operands" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("operands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainResourceConditionNode) contextValidateTerms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Terms); i++ {

		if m.Terms[i] != nil {
			if err := m.Terms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("terms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("terms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainResourceConditionNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainResourceConditionNode) UnmarshalBinary(b []byte) error {
	var res DomainResourceConditionNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

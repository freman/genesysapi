// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TopicOffset topic offset
//
// swagger:model TopicOffset
type TopicOffset struct {

	// Count of characters before the topic
	// Read Only: true
	CharacterCount int64 `json:"characterCount,omitempty"`

	// Count of words before the topic
	// Read Only: true
	WordCount int64 `json:"wordCount,omitempty"`
}

// Validate validates this topic offset
func (m *TopicOffset) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this topic offset based on the context it is used
func (m *TopicOffset) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCharacterCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWordCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopicOffset) contextValidateCharacterCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "characterCount", "body", int64(m.CharacterCount)); err != nil {
		return err
	}

	return nil
}

func (m *TopicOffset) contextValidateWordCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "wordCount", "body", int64(m.WordCount)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TopicOffset) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopicOffset) UnmarshalBinary(b []byte) error {
	var res TopicOffset
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

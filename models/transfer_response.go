// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransferResponse transfer response
//
// swagger:model TransferResponse
type TransferResponse struct {

	// The date/time that this command was issued. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateIssued strfmt.DateTime `json:"dateIssued,omitempty"`

	// The destination of the command.
	Destination *TransferDestination `json:"destination,omitempty"`

	// The id of the command.
	ID string `json:"id,omitempty"`

	// The initiator of the command.
	Initiator *TransferInitiator `json:"initiator,omitempty"`

	// The state of the command.
	// Enum: [Pending Active Complete Canceled Failed Timeout Unknown]
	State string `json:"state,omitempty"`

	// The type of transfer to perform.
	// Enum: [Attended Unattended]
	TransferType string `json:"transferType,omitempty"`
}

// Validate validates this transfer response
func (m *TransferResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateIssued(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferResponse) validateDateIssued(formats strfmt.Registry) error {
	if swag.IsZero(m.DateIssued) { // not required
		return nil
	}

	if err := validate.FormatOf("dateIssued", "body", "date-time", m.DateIssued.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransferResponse) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	if m.Destination != nil {
		if err := m.Destination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *TransferResponse) validateInitiator(formats strfmt.Registry) error {
	if swag.IsZero(m.Initiator) { // not required
		return nil
	}

	if m.Initiator != nil {
		if err := m.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initiator")
			}
			return err
		}
	}

	return nil
}

var transferResponseTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Active","Complete","Canceled","Failed","Timeout","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transferResponseTypeStatePropEnum = append(transferResponseTypeStatePropEnum, v)
	}
}

const (

	// TransferResponseStatePending captures enum value "Pending"
	TransferResponseStatePending string = "Pending"

	// TransferResponseStateActive captures enum value "Active"
	TransferResponseStateActive string = "Active"

	// TransferResponseStateComplete captures enum value "Complete"
	TransferResponseStateComplete string = "Complete"

	// TransferResponseStateCanceled captures enum value "Canceled"
	TransferResponseStateCanceled string = "Canceled"

	// TransferResponseStateFailed captures enum value "Failed"
	TransferResponseStateFailed string = "Failed"

	// TransferResponseStateTimeout captures enum value "Timeout"
	TransferResponseStateTimeout string = "Timeout"

	// TransferResponseStateUnknown captures enum value "Unknown"
	TransferResponseStateUnknown string = "Unknown"
)

// prop value enum
func (m *TransferResponse) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, transferResponseTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TransferResponse) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var transferResponseTypeTransferTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Attended","Unattended"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transferResponseTypeTransferTypePropEnum = append(transferResponseTypeTransferTypePropEnum, v)
	}
}

const (

	// TransferResponseTransferTypeAttended captures enum value "Attended"
	TransferResponseTransferTypeAttended string = "Attended"

	// TransferResponseTransferTypeUnattended captures enum value "Unattended"
	TransferResponseTransferTypeUnattended string = "Unattended"
)

// prop value enum
func (m *TransferResponse) validateTransferTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, transferResponseTypeTransferTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TransferResponse) validateTransferType(formats strfmt.Registry) error {
	if swag.IsZero(m.TransferType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransferTypeEnum("transferType", "body", m.TransferType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this transfer response based on the context it is used
func (m *TransferResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitiator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferResponse) contextValidateDestination(ctx context.Context, formats strfmt.Registry) error {

	if m.Destination != nil {
		if err := m.Destination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *TransferResponse) contextValidateInitiator(ctx context.Context, formats strfmt.Registry) error {

	if m.Initiator != nil {
		if err := m.Initiator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransferResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransferResponse) UnmarshalBinary(b []byte) error {
	var res TransferResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

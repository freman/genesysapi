// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditQuerySort audit query sort
//
// swagger:model AuditQuerySort
type AuditQuerySort struct {

	// Name of the property to sort.
	// Required: true
	// Enum: [Timestamp]
	Name *string `json:"name"`

	// Sort Order
	// Required: true
	// Enum: [ascending descending]
	SortOrder *string `json:"sortOrder"`
}

// Validate validates this audit query sort
func (m *AuditQuerySort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortOrder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var auditQuerySortTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Timestamp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auditQuerySortTypeNamePropEnum = append(auditQuerySortTypeNamePropEnum, v)
	}
}

const (

	// AuditQuerySortNameTimestamp captures enum value "Timestamp"
	AuditQuerySortNameTimestamp string = "Timestamp"
)

// prop value enum
func (m *AuditQuerySort) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, auditQuerySortTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AuditQuerySort) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	// value enum
	if err := m.validateNameEnum("name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

var auditQuerySortTypeSortOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ascending","descending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auditQuerySortTypeSortOrderPropEnum = append(auditQuerySortTypeSortOrderPropEnum, v)
	}
}

const (

	// AuditQuerySortSortOrderAscending captures enum value "ascending"
	AuditQuerySortSortOrderAscending string = "ascending"

	// AuditQuerySortSortOrderDescending captures enum value "descending"
	AuditQuerySortSortOrderDescending string = "descending"
)

// prop value enum
func (m *AuditQuerySort) validateSortOrderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, auditQuerySortTypeSortOrderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AuditQuerySort) validateSortOrder(formats strfmt.Registry) error {

	if err := validate.Required("sortOrder", "body", m.SortOrder); err != nil {
		return err
	}

	// value enum
	if err := m.validateSortOrderEnum("sortOrder", "body", *m.SortOrder); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this audit query sort based on context it is used
func (m *AuditQuerySort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuditQuerySort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditQuerySort) UnmarshalBinary(b []byte) error {
	var res AuditQuerySort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

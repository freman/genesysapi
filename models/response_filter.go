// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResponseFilter Used to filter response queries
//
// swagger:model ResponseFilter
type ResponseFilter struct {

	// Field to filter on. Allowed values are 'name', 'libraryId', 'text.contentType', 'messagingTemplate' and 'responseType'
	// Required: true
	Name *string `json:"name"`

	// Filter operation: IN, EQUALS, NOTEQUALS.
	// Required: true
	// Enum: [IN EQUALS NOTEQUALS]
	Operator *string `json:"operator"`

	// Values to filter on. If name is 'responseType' then allowed values are 'CampaignSmsTemplate', 'CampaignEmailTemplate', 'Footer' and 'Signature'
	// Required: true
	Values []string `json:"values"`
}

// Validate validates this response filter
func (m *ResponseFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseFilter) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var responseFilterTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IN","EQUALS","NOTEQUALS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responseFilterTypeOperatorPropEnum = append(responseFilterTypeOperatorPropEnum, v)
	}
}

const (

	// ResponseFilterOperatorIN captures enum value "IN"
	ResponseFilterOperatorIN string = "IN"

	// ResponseFilterOperatorEQUALS captures enum value "EQUALS"
	ResponseFilterOperatorEQUALS string = "EQUALS"

	// ResponseFilterOperatorNOTEQUALS captures enum value "NOTEQUALS"
	ResponseFilterOperatorNOTEQUALS string = "NOTEQUALS"
)

// prop value enum
func (m *ResponseFilter) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, responseFilterTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResponseFilter) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *ResponseFilter) validateValues(formats strfmt.Registry) error {

	if err := validate.Required("values", "body", m.Values); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this response filter based on context it is used
func (m *ResponseFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResponseFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseFilter) UnmarshalBinary(b []byte) error {
	var res ResponseFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

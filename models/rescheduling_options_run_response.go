// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReschedulingOptionsRunResponse rescheduling options run response
//
// swagger:model ReschedulingOptionsRunResponse
type ReschedulingOptionsRunResponse struct {

	// The IDs of the activity codes being considered for reschedule
	// Unique: true
	ActivityCodeIds []string `json:"activityCodeIds"`

	// The number of agents to be considered in the reschedule
	AgentCount int32 `json:"agentCount,omitempty"`

	// Whether daily paid time is allowed to be changed
	DoNotChangeDailyPaidTime bool `json:"doNotChangeDailyPaidTime,omitempty"`

	// Whether manually edited shifts are allowed to be changed
	DoNotChangeManuallyEditedShifts bool `json:"doNotChangeManuallyEditedShifts,omitempty"`

	// Whether shift start times are allowed to be changed
	DoNotChangeShiftStartTimes bool `json:"doNotChangeShiftStartTimes,omitempty"`

	// Whether weekly paid time is allowed to be changed
	DoNotChangeWeeklyPaidTime bool `json:"doNotChangeWeeklyPaidTime,omitempty"`

	// The end date of the period to reschedule. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// The existing schedule to which this reschedule run applies
	ExistingSchedule *BuScheduleReference `json:"existingSchedule,omitempty"`

	// Per-management unit rescheduling options
	ManagementUnits []*ReschedulingManagementUnitResponse `json:"managementUnits"`

	// The start date of the period to reschedule. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`
}

// Validate validates this rescheduling options run response
func (m *ReschedulingOptionsRunResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityCodeIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExistingSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReschedulingOptionsRunResponse) validateActivityCodeIds(formats strfmt.Registry) error {

	if swag.IsZero(m.ActivityCodeIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("activityCodeIds", "body", m.ActivityCodeIds); err != nil {
		return err
	}

	return nil
}

func (m *ReschedulingOptionsRunResponse) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReschedulingOptionsRunResponse) validateExistingSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.ExistingSchedule) { // not required
		return nil
	}

	if m.ExistingSchedule != nil {
		if err := m.ExistingSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("existingSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *ReschedulingOptionsRunResponse) validateManagementUnits(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagementUnits) { // not required
		return nil
	}

	for i := 0; i < len(m.ManagementUnits); i++ {
		if swag.IsZero(m.ManagementUnits[i]) { // not required
			continue
		}

		if m.ManagementUnits[i] != nil {
			if err := m.ManagementUnits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("managementUnits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReschedulingOptionsRunResponse) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReschedulingOptionsRunResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReschedulingOptionsRunResponse) UnmarshalBinary(b []byte) error {
	var res ReschedulingOptionsRunResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

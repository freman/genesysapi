// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JourneyPage journey page
//
// swagger:model JourneyPage
type JourneyPage struct {

	// Hierarchy of the current page in relation to the website's structure.
	Breadcrumb []string `json:"breadcrumb"`

	// Domain of the page's URL.
	// Required: true
	Domain *string `json:"domain"`

	// Fragment or hash of the page's URL.
	Fragment string `json:"fragment,omitempty"`

	// Hostname of the page's URL.
	// Required: true
	Hostname *string `json:"hostname"`

	// Keywords from the HTML {@code <meta>} tag of the page.
	Keywords string `json:"keywords,omitempty"`

	// ISO 639-1 language code for the page as defined in the {@code <html>} tag.
	Lang string `json:"lang,omitempty"`

	// Path name of the page for the event.
	// Required: true
	Pathname *string `json:"pathname"`

	// Query string that is passed to the page in the current event.
	QueryString string `json:"queryString,omitempty"`

	// Title of the page.
	Title string `json:"title,omitempty"`

	// The page URL.
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this journey page
func (m *JourneyPage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePathname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JourneyPage) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *JourneyPage) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("hostname", "body", m.Hostname); err != nil {
		return err
	}

	return nil
}

func (m *JourneyPage) validatePathname(formats strfmt.Registry) error {

	if err := validate.Required("pathname", "body", m.Pathname); err != nil {
		return err
	}

	return nil
}

func (m *JourneyPage) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this journey page based on context it is used
func (m *JourneyPage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JourneyPage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JourneyPage) UnmarshalBinary(b []byte) error {
	var res JourneyPage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

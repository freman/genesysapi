// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InboundDomain inbound domain
//
// swagger:model InboundDomain
type InboundDomain struct {

	// The custom SMTP server integration to use when sending outbound emails from this domain.
	CustomSMTPServer *DomainEntityRef `json:"customSMTPServer,omitempty"`

	// Unique Id of the domain such as: example.com
	ID string `json:"id,omitempty"`

	// The DNS settings if the inbound domain is using a custom Mail From. These settings can only be used on InboundDomains where subDomain is false.
	MailFromSettings *MailFromResult `json:"mailFromSettings,omitempty"`

	// Mx Record Status
	// Enum: [VALID INVALID NOT_AVAILABLE]
	MxRecordStatus string `json:"mxRecordStatus,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Indicates if this a PureCloud sub-domain.  If true, then the appropriate DNS records are created for sending/receiving email.
	SubDomain bool `json:"subDomain"`
}

// Validate validates this inbound domain
func (m *InboundDomain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomSMTPServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMailFromSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMxRecordStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundDomain) validateCustomSMTPServer(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomSMTPServer) { // not required
		return nil
	}

	if m.CustomSMTPServer != nil {
		if err := m.CustomSMTPServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customSMTPServer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customSMTPServer")
			}
			return err
		}
	}

	return nil
}

func (m *InboundDomain) validateMailFromSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.MailFromSettings) { // not required
		return nil
	}

	if m.MailFromSettings != nil {
		if err := m.MailFromSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mailFromSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mailFromSettings")
			}
			return err
		}
	}

	return nil
}

var inboundDomainTypeMxRecordStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VALID","INVALID","NOT_AVAILABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inboundDomainTypeMxRecordStatusPropEnum = append(inboundDomainTypeMxRecordStatusPropEnum, v)
	}
}

const (

	// InboundDomainMxRecordStatusVALID captures enum value "VALID"
	InboundDomainMxRecordStatusVALID string = "VALID"

	// InboundDomainMxRecordStatusINVALID captures enum value "INVALID"
	InboundDomainMxRecordStatusINVALID string = "INVALID"

	// InboundDomainMxRecordStatusNOTAVAILABLE captures enum value "NOT_AVAILABLE"
	InboundDomainMxRecordStatusNOTAVAILABLE string = "NOT_AVAILABLE"
)

// prop value enum
func (m *InboundDomain) validateMxRecordStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, inboundDomainTypeMxRecordStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InboundDomain) validateMxRecordStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.MxRecordStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateMxRecordStatusEnum("mxRecordStatus", "body", m.MxRecordStatus); err != nil {
		return err
	}

	return nil
}

func (m *InboundDomain) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this inbound domain based on the context it is used
func (m *InboundDomain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomSMTPServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMailFromSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundDomain) contextValidateCustomSMTPServer(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomSMTPServer != nil {
		if err := m.CustomSMTPServer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customSMTPServer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customSMTPServer")
			}
			return err
		}
	}

	return nil
}

func (m *InboundDomain) contextValidateMailFromSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.MailFromSettings != nil {
		if err := m.MailFromSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mailFromSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mailFromSettings")
			}
			return err
		}
	}

	return nil
}

func (m *InboundDomain) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InboundDomain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InboundDomain) UnmarshalBinary(b []byte) error {
	var res InboundDomain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

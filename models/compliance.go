// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Compliance compliance
//
// swagger:model Compliance
type Compliance struct {

	// List of configurations for 'HelpSettings' compliance
	// Required: true
	HelpSettings []*HelpSettings `json:"helpSettings"`

	// List of configurations for 'OptInSettings' compliance
	// Required: true
	OptInSettings []*OptInSettings `json:"optInSettings"`

	// List of configurations for 'StopSettings' compliance
	// Required: true
	StopSettings []*StopSettings `json:"stopSettings"`
}

// Validate validates this compliance
func (m *Compliance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHelpSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptInSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Compliance) validateHelpSettings(formats strfmt.Registry) error {

	if err := validate.Required("helpSettings", "body", m.HelpSettings); err != nil {
		return err
	}

	for i := 0; i < len(m.HelpSettings); i++ {
		if swag.IsZero(m.HelpSettings[i]) { // not required
			continue
		}

		if m.HelpSettings[i] != nil {
			if err := m.HelpSettings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("helpSettings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("helpSettings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Compliance) validateOptInSettings(formats strfmt.Registry) error {

	if err := validate.Required("optInSettings", "body", m.OptInSettings); err != nil {
		return err
	}

	for i := 0; i < len(m.OptInSettings); i++ {
		if swag.IsZero(m.OptInSettings[i]) { // not required
			continue
		}

		if m.OptInSettings[i] != nil {
			if err := m.OptInSettings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("optInSettings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("optInSettings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Compliance) validateStopSettings(formats strfmt.Registry) error {

	if err := validate.Required("stopSettings", "body", m.StopSettings); err != nil {
		return err
	}

	for i := 0; i < len(m.StopSettings); i++ {
		if swag.IsZero(m.StopSettings[i]) { // not required
			continue
		}

		if m.StopSettings[i] != nil {
			if err := m.StopSettings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stopSettings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stopSettings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this compliance based on the context it is used
func (m *Compliance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHelpSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptInSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStopSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Compliance) contextValidateHelpSettings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HelpSettings); i++ {

		if m.HelpSettings[i] != nil {
			if err := m.HelpSettings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("helpSettings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("helpSettings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Compliance) contextValidateOptInSettings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OptInSettings); i++ {

		if m.OptInSettings[i] != nil {
			if err := m.OptInSettings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("optInSettings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("optInSettings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Compliance) contextValidateStopSettings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StopSettings); i++ {

		if m.StopSettings[i] != nil {
			if err := m.StopSettings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stopSettings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stopSettings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Compliance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Compliance) UnmarshalBinary(b []byte) error {
	var res Compliance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

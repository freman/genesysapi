// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthzGrant authz grant
//
// swagger:model AuthzGrant
type AuthzGrant struct {

	// division
	Division *AuthzDivision `json:"division,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	GrantMadeAt strfmt.DateTime `json:"grantMadeAt,omitempty"`

	// role
	Role *AuthzGrantRole `json:"role,omitempty"`

	// subject Id
	SubjectID string `json:"subjectId,omitempty"`
}

// Validate validates this authz grant
func (m *AuthzGrant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrantMadeAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthzGrant) validateDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if m.Division != nil {
		if err := m.Division.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

func (m *AuthzGrant) validateGrantMadeAt(formats strfmt.Registry) error {

	if swag.IsZero(m.GrantMadeAt) { // not required
		return nil
	}

	if err := validate.FormatOf("grantMadeAt", "body", "date-time", m.GrantMadeAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuthzGrant) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthzGrant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthzGrant) UnmarshalBinary(b []byte) error {
	var res AuthzGrant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

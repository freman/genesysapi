// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContactList contact list
//
// swagger:model ContactList
type ContactList struct {

	// AttemptLimits for this ContactList.
	AttemptLimits *DomainEntityRef `json:"attemptLimits,omitempty"`

	// Indicates if automatic time zone mapping is to be used for this ContactList.
	AutomaticTimeZoneMapping bool `json:"automaticTimeZoneMapping"`

	// The names of the contact data columns.
	// Required: true
	ColumnNames []string `json:"columnNames"`

	// Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The division this entity belongs to.
	Division *DomainEntityRef `json:"division,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The status of the import process.
	// Read Only: true
	ImportStatus *ImportStatus `json:"importStatus,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Indicates which columns are phone numbers.
	PhoneColumns []*ContactPhoneNumberColumn `json:"phoneColumns"`

	// The values in the previewModeColumnName column that indicate a contact should always be dialed in preview mode.
	PreviewModeAcceptedValues []string `json:"previewModeAcceptedValues"`

	// A column to check if a contact should always be dialed in preview mode.
	PreviewModeColumnName string `json:"previewModeColumnName,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The number of contacts in the ContactList.
	// Read Only: true
	Size int64 `json:"size,omitempty"`

	// Required for updates, must match the version number of the most recent update
	Version int32 `json:"version,omitempty"`

	// The name of contact list column containing the zip code for use with automatic time zone mapping. Only allowed if 'automaticTimeZoneMapping' is set to true.
	ZipCodeColumnName string `json:"zipCodeColumnName,omitempty"`
}

// Validate validates this contact list
func (m *ContactList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttemptLimits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateColumnNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneColumns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactList) validateAttemptLimits(formats strfmt.Registry) error {

	if swag.IsZero(m.AttemptLimits) { // not required
		return nil
	}

	if m.AttemptLimits != nil {
		if err := m.AttemptLimits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attemptLimits")
			}
			return err
		}
	}

	return nil
}

func (m *ContactList) validateColumnNames(formats strfmt.Registry) error {

	if err := validate.Required("columnNames", "body", m.ColumnNames); err != nil {
		return err
	}

	return nil
}

func (m *ContactList) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ContactList) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ContactList) validateDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if m.Division != nil {
		if err := m.Division.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

func (m *ContactList) validateImportStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ImportStatus) { // not required
		return nil
	}

	if m.ImportStatus != nil {
		if err := m.ImportStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("importStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ContactList) validatePhoneColumns(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneColumns) { // not required
		return nil
	}

	for i := 0; i < len(m.PhoneColumns); i++ {
		if swag.IsZero(m.PhoneColumns[i]) { // not required
			continue
		}

		if m.PhoneColumns[i] != nil {
			if err := m.PhoneColumns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phoneColumns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContactList) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContactList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactList) UnmarshalBinary(b []byte) error {
	var res ContactList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

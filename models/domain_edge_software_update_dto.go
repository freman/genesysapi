// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainEdgeSoftwareUpdateDto domain edge software update dto
//
// swagger:model DomainEdgeSoftwareUpdateDto
type DomainEdgeSoftwareUpdateDto struct {

	// call draining wait time seconds
	CallDrainingWaitTimeSeconds int64 `json:"callDrainingWaitTimeSeconds,omitempty"`

	// current
	Current bool `json:"current,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	DownloadStartTime strfmt.DateTime `json:"downloadStartTime,omitempty"`

	// edge Uri
	// Format: uri
	EdgeURI strfmt.URI `json:"edgeUri,omitempty"`

	// execute on idle
	ExecuteOnIdle bool `json:"executeOnIdle,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	ExecuteStartTime strfmt.DateTime `json:"executeStartTime,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	ExecuteStopTime strfmt.DateTime `json:"executeStopTime,omitempty"`

	// max download rate
	MaxDownloadRate int32 `json:"maxDownloadRate,omitempty"`

	// status
	// Enum: [NONE INIT IN_PROGRESS EXPIRED EXCEPTION ABORTED FAILED SUCCEEDED DELETE]
	Status string `json:"status,omitempty"`

	// Version
	// Required: true
	Version *DomainEdgeSoftwareVersionDto `json:"version"`
}

// Validate validates this domain edge software update dto
func (m *DomainEdgeSoftwareUpdateDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDownloadStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecuteStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecuteStopTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainEdgeSoftwareUpdateDto) validateDownloadStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.DownloadStartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("downloadStartTime", "body", "date-time", m.DownloadStartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainEdgeSoftwareUpdateDto) validateEdgeURI(formats strfmt.Registry) error {

	if swag.IsZero(m.EdgeURI) { // not required
		return nil
	}

	if err := validate.FormatOf("edgeUri", "body", "uri", m.EdgeURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainEdgeSoftwareUpdateDto) validateExecuteStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecuteStartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("executeStartTime", "body", "date-time", m.ExecuteStartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainEdgeSoftwareUpdateDto) validateExecuteStopTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecuteStopTime) { // not required
		return nil
	}

	if err := validate.FormatOf("executeStopTime", "body", "date-time", m.ExecuteStopTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var domainEdgeSoftwareUpdateDtoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","INIT","IN_PROGRESS","EXPIRED","EXCEPTION","ABORTED","FAILED","SUCCEEDED","DELETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainEdgeSoftwareUpdateDtoTypeStatusPropEnum = append(domainEdgeSoftwareUpdateDtoTypeStatusPropEnum, v)
	}
}

const (

	// DomainEdgeSoftwareUpdateDtoStatusNONE captures enum value "NONE"
	DomainEdgeSoftwareUpdateDtoStatusNONE string = "NONE"

	// DomainEdgeSoftwareUpdateDtoStatusINIT captures enum value "INIT"
	DomainEdgeSoftwareUpdateDtoStatusINIT string = "INIT"

	// DomainEdgeSoftwareUpdateDtoStatusINPROGRESS captures enum value "IN_PROGRESS"
	DomainEdgeSoftwareUpdateDtoStatusINPROGRESS string = "IN_PROGRESS"

	// DomainEdgeSoftwareUpdateDtoStatusEXPIRED captures enum value "EXPIRED"
	DomainEdgeSoftwareUpdateDtoStatusEXPIRED string = "EXPIRED"

	// DomainEdgeSoftwareUpdateDtoStatusEXCEPTION captures enum value "EXCEPTION"
	DomainEdgeSoftwareUpdateDtoStatusEXCEPTION string = "EXCEPTION"

	// DomainEdgeSoftwareUpdateDtoStatusABORTED captures enum value "ABORTED"
	DomainEdgeSoftwareUpdateDtoStatusABORTED string = "ABORTED"

	// DomainEdgeSoftwareUpdateDtoStatusFAILED captures enum value "FAILED"
	DomainEdgeSoftwareUpdateDtoStatusFAILED string = "FAILED"

	// DomainEdgeSoftwareUpdateDtoStatusSUCCEEDED captures enum value "SUCCEEDED"
	DomainEdgeSoftwareUpdateDtoStatusSUCCEEDED string = "SUCCEEDED"

	// DomainEdgeSoftwareUpdateDtoStatusDELETE captures enum value "DELETE"
	DomainEdgeSoftwareUpdateDtoStatusDELETE string = "DELETE"
)

// prop value enum
func (m *DomainEdgeSoftwareUpdateDto) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, domainEdgeSoftwareUpdateDtoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DomainEdgeSoftwareUpdateDto) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DomainEdgeSoftwareUpdateDto) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainEdgeSoftwareUpdateDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainEdgeSoftwareUpdateDto) UnmarshalBinary(b []byte) error {
	var res DomainEdgeSoftwareUpdateDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

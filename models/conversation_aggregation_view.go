// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConversationAggregationView conversation aggregation view
//
// swagger:model ConversationAggregationView
type ConversationAggregationView struct {

	// Type of view you wish to create
	// Required: true
	// Enum: [rangeBound]
	Function *string `json:"function"`

	// A unique name for this view. Must be distinct from other views and built-in metric names.
	// Required: true
	Name *string `json:"name"`

	// Range of numbers for slicing up data
	Range *AggregationRange `json:"range,omitempty"`

	// Target metric name
	// Required: true
	// Enum: [nBlindTransferred nCobrowseSessions nConnected nConsult nConsultTransferred nError nOffered nOutbound nOutboundAbandoned nOutboundAttempted nOutboundConnected nOverSla nStateTransitionError nTransferred oExternalMediaCount oMediaCount oMessageTurn oServiceLevel oServiceTarget tAbandon tAcd tAcw tAgentResponseTime tAlert tAnswered tBarging tCallback tCallbackComplete tCoaching tCoachingComplete tConnected tContacting tDialing tFirstConnect tFirstDial tFlowOut tHandle tHeld tHeldComplete tIvr tMonitoring tMonitoringComplete tNotResponding tShortAbandon tTalk tTalkComplete tUserResponseTime tVoicemail tWait]
	Target *string `json:"target"`
}

// Validate validates this conversation aggregation view
func (m *ConversationAggregationView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var conversationAggregationViewTypeFunctionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["rangeBound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conversationAggregationViewTypeFunctionPropEnum = append(conversationAggregationViewTypeFunctionPropEnum, v)
	}
}

const (

	// ConversationAggregationViewFunctionRangeBound captures enum value "rangeBound"
	ConversationAggregationViewFunctionRangeBound string = "rangeBound"
)

// prop value enum
func (m *ConversationAggregationView) validateFunctionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, conversationAggregationViewTypeFunctionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConversationAggregationView) validateFunction(formats strfmt.Registry) error {

	if err := validate.Required("function", "body", m.Function); err != nil {
		return err
	}

	// value enum
	if err := m.validateFunctionEnum("function", "body", *m.Function); err != nil {
		return err
	}

	return nil
}

func (m *ConversationAggregationView) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ConversationAggregationView) validateRange(formats strfmt.Registry) error {

	if swag.IsZero(m.Range) { // not required
		return nil
	}

	if m.Range != nil {
		if err := m.Range.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

var conversationAggregationViewTypeTargetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nBlindTransferred","nCobrowseSessions","nConnected","nConsult","nConsultTransferred","nError","nOffered","nOutbound","nOutboundAbandoned","nOutboundAttempted","nOutboundConnected","nOverSla","nStateTransitionError","nTransferred","oExternalMediaCount","oMediaCount","oMessageTurn","oServiceLevel","oServiceTarget","tAbandon","tAcd","tAcw","tAgentResponseTime","tAlert","tAnswered","tBarging","tCallback","tCallbackComplete","tCoaching","tCoachingComplete","tConnected","tContacting","tDialing","tFirstConnect","tFirstDial","tFlowOut","tHandle","tHeld","tHeldComplete","tIvr","tMonitoring","tMonitoringComplete","tNotResponding","tShortAbandon","tTalk","tTalkComplete","tUserResponseTime","tVoicemail","tWait"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conversationAggregationViewTypeTargetPropEnum = append(conversationAggregationViewTypeTargetPropEnum, v)
	}
}

const (

	// ConversationAggregationViewTargetNBlindTransferred captures enum value "nBlindTransferred"
	ConversationAggregationViewTargetNBlindTransferred string = "nBlindTransferred"

	// ConversationAggregationViewTargetNCobrowseSessions captures enum value "nCobrowseSessions"
	ConversationAggregationViewTargetNCobrowseSessions string = "nCobrowseSessions"

	// ConversationAggregationViewTargetNConnected captures enum value "nConnected"
	ConversationAggregationViewTargetNConnected string = "nConnected"

	// ConversationAggregationViewTargetNConsult captures enum value "nConsult"
	ConversationAggregationViewTargetNConsult string = "nConsult"

	// ConversationAggregationViewTargetNConsultTransferred captures enum value "nConsultTransferred"
	ConversationAggregationViewTargetNConsultTransferred string = "nConsultTransferred"

	// ConversationAggregationViewTargetNError captures enum value "nError"
	ConversationAggregationViewTargetNError string = "nError"

	// ConversationAggregationViewTargetNOffered captures enum value "nOffered"
	ConversationAggregationViewTargetNOffered string = "nOffered"

	// ConversationAggregationViewTargetNOutbound captures enum value "nOutbound"
	ConversationAggregationViewTargetNOutbound string = "nOutbound"

	// ConversationAggregationViewTargetNOutboundAbandoned captures enum value "nOutboundAbandoned"
	ConversationAggregationViewTargetNOutboundAbandoned string = "nOutboundAbandoned"

	// ConversationAggregationViewTargetNOutboundAttempted captures enum value "nOutboundAttempted"
	ConversationAggregationViewTargetNOutboundAttempted string = "nOutboundAttempted"

	// ConversationAggregationViewTargetNOutboundConnected captures enum value "nOutboundConnected"
	ConversationAggregationViewTargetNOutboundConnected string = "nOutboundConnected"

	// ConversationAggregationViewTargetNOverSLA captures enum value "nOverSla"
	ConversationAggregationViewTargetNOverSLA string = "nOverSla"

	// ConversationAggregationViewTargetNStateTransitionError captures enum value "nStateTransitionError"
	ConversationAggregationViewTargetNStateTransitionError string = "nStateTransitionError"

	// ConversationAggregationViewTargetNTransferred captures enum value "nTransferred"
	ConversationAggregationViewTargetNTransferred string = "nTransferred"

	// ConversationAggregationViewTargetOExternalMediaCount captures enum value "oExternalMediaCount"
	ConversationAggregationViewTargetOExternalMediaCount string = "oExternalMediaCount"

	// ConversationAggregationViewTargetOMediaCount captures enum value "oMediaCount"
	ConversationAggregationViewTargetOMediaCount string = "oMediaCount"

	// ConversationAggregationViewTargetOMessageTurn captures enum value "oMessageTurn"
	ConversationAggregationViewTargetOMessageTurn string = "oMessageTurn"

	// ConversationAggregationViewTargetOServiceLevel captures enum value "oServiceLevel"
	ConversationAggregationViewTargetOServiceLevel string = "oServiceLevel"

	// ConversationAggregationViewTargetOServiceTarget captures enum value "oServiceTarget"
	ConversationAggregationViewTargetOServiceTarget string = "oServiceTarget"

	// ConversationAggregationViewTargetTAbandon captures enum value "tAbandon"
	ConversationAggregationViewTargetTAbandon string = "tAbandon"

	// ConversationAggregationViewTargetTAcd captures enum value "tAcd"
	ConversationAggregationViewTargetTAcd string = "tAcd"

	// ConversationAggregationViewTargetTAcw captures enum value "tAcw"
	ConversationAggregationViewTargetTAcw string = "tAcw"

	// ConversationAggregationViewTargetTAgentResponseTime captures enum value "tAgentResponseTime"
	ConversationAggregationViewTargetTAgentResponseTime string = "tAgentResponseTime"

	// ConversationAggregationViewTargetTAlert captures enum value "tAlert"
	ConversationAggregationViewTargetTAlert string = "tAlert"

	// ConversationAggregationViewTargetTAnswered captures enum value "tAnswered"
	ConversationAggregationViewTargetTAnswered string = "tAnswered"

	// ConversationAggregationViewTargetTBarging captures enum value "tBarging"
	ConversationAggregationViewTargetTBarging string = "tBarging"

	// ConversationAggregationViewTargetTCallback captures enum value "tCallback"
	ConversationAggregationViewTargetTCallback string = "tCallback"

	// ConversationAggregationViewTargetTCallbackComplete captures enum value "tCallbackComplete"
	ConversationAggregationViewTargetTCallbackComplete string = "tCallbackComplete"

	// ConversationAggregationViewTargetTCoaching captures enum value "tCoaching"
	ConversationAggregationViewTargetTCoaching string = "tCoaching"

	// ConversationAggregationViewTargetTCoachingComplete captures enum value "tCoachingComplete"
	ConversationAggregationViewTargetTCoachingComplete string = "tCoachingComplete"

	// ConversationAggregationViewTargetTConnected captures enum value "tConnected"
	ConversationAggregationViewTargetTConnected string = "tConnected"

	// ConversationAggregationViewTargetTContacting captures enum value "tContacting"
	ConversationAggregationViewTargetTContacting string = "tContacting"

	// ConversationAggregationViewTargetTDialing captures enum value "tDialing"
	ConversationAggregationViewTargetTDialing string = "tDialing"

	// ConversationAggregationViewTargetTFirstConnect captures enum value "tFirstConnect"
	ConversationAggregationViewTargetTFirstConnect string = "tFirstConnect"

	// ConversationAggregationViewTargetTFirstDial captures enum value "tFirstDial"
	ConversationAggregationViewTargetTFirstDial string = "tFirstDial"

	// ConversationAggregationViewTargetTFlowOut captures enum value "tFlowOut"
	ConversationAggregationViewTargetTFlowOut string = "tFlowOut"

	// ConversationAggregationViewTargetTHandle captures enum value "tHandle"
	ConversationAggregationViewTargetTHandle string = "tHandle"

	// ConversationAggregationViewTargetTHeld captures enum value "tHeld"
	ConversationAggregationViewTargetTHeld string = "tHeld"

	// ConversationAggregationViewTargetTHeldComplete captures enum value "tHeldComplete"
	ConversationAggregationViewTargetTHeldComplete string = "tHeldComplete"

	// ConversationAggregationViewTargetTIvr captures enum value "tIvr"
	ConversationAggregationViewTargetTIvr string = "tIvr"

	// ConversationAggregationViewTargetTMonitoring captures enum value "tMonitoring"
	ConversationAggregationViewTargetTMonitoring string = "tMonitoring"

	// ConversationAggregationViewTargetTMonitoringComplete captures enum value "tMonitoringComplete"
	ConversationAggregationViewTargetTMonitoringComplete string = "tMonitoringComplete"

	// ConversationAggregationViewTargetTNotResponding captures enum value "tNotResponding"
	ConversationAggregationViewTargetTNotResponding string = "tNotResponding"

	// ConversationAggregationViewTargetTShortAbandon captures enum value "tShortAbandon"
	ConversationAggregationViewTargetTShortAbandon string = "tShortAbandon"

	// ConversationAggregationViewTargetTTalk captures enum value "tTalk"
	ConversationAggregationViewTargetTTalk string = "tTalk"

	// ConversationAggregationViewTargetTTalkComplete captures enum value "tTalkComplete"
	ConversationAggregationViewTargetTTalkComplete string = "tTalkComplete"

	// ConversationAggregationViewTargetTUserResponseTime captures enum value "tUserResponseTime"
	ConversationAggregationViewTargetTUserResponseTime string = "tUserResponseTime"

	// ConversationAggregationViewTargetTVoicemail captures enum value "tVoicemail"
	ConversationAggregationViewTargetTVoicemail string = "tVoicemail"

	// ConversationAggregationViewTargetTWait captures enum value "tWait"
	ConversationAggregationViewTargetTWait string = "tWait"
)

// prop value enum
func (m *ConversationAggregationView) validateTargetEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, conversationAggregationViewTypeTargetPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConversationAggregationView) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetEnum("target", "body", *m.Target); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConversationAggregationView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConversationAggregationView) UnmarshalBinary(b []byte) error {
	var res ConversationAggregationView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GroupContact group contact
//
// swagger:model GroupContact
type GroupContact struct {

	// Phone number for this contact type
	// Required: true
	Address *string `json:"address"`

	// Formatted version of the address property
	// Read Only: true
	Display string `json:"display,omitempty"`

	// Extension is set if the number is e164 valid
	Extension string `json:"extension,omitempty"`

	// Media type of the address
	// Required: true
	// Enum: [PHONE]
	MediaType *string `json:"mediaType"`

	// Contact type of the address
	// Required: true
	// Enum: [GROUPRING GROUPPHONE]
	Type *string `json:"type"`
}

// Validate validates this group contact
func (m *GroupContact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupContact) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

var groupContactTypeMediaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PHONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		groupContactTypeMediaTypePropEnum = append(groupContactTypeMediaTypePropEnum, v)
	}
}

const (

	// GroupContactMediaTypePHONE captures enum value "PHONE"
	GroupContactMediaTypePHONE string = "PHONE"
)

// prop value enum
func (m *GroupContact) validateMediaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, groupContactTypeMediaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GroupContact) validateMediaType(formats strfmt.Registry) error {

	if err := validate.Required("mediaType", "body", m.MediaType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMediaTypeEnum("mediaType", "body", *m.MediaType); err != nil {
		return err
	}

	return nil
}

var groupContactTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GROUPRING","GROUPPHONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		groupContactTypeTypePropEnum = append(groupContactTypeTypePropEnum, v)
	}
}

const (

	// GroupContactTypeGROUPRING captures enum value "GROUPRING"
	GroupContactTypeGROUPRING string = "GROUPRING"

	// GroupContactTypeGROUPPHONE captures enum value "GROUPPHONE"
	GroupContactTypeGROUPPHONE string = "GROUPPHONE"
)

// prop value enum
func (m *GroupContact) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, groupContactTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GroupContact) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupContact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupContact) UnmarshalBinary(b []byte) error {
	var res GroupContact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

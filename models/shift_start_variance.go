// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShiftStartVariance Variance in minutes among start times of shifts in work plan
//
// swagger:model ShiftStartVariance
type ShiftStartVariance struct {

	// Days for which shift start variance is configured
	// Required: true
	// Unique: true
	ApplicableDays []string `json:"applicableDays"`

	// Maximum variance in minutes across shift starts
	// Required: true
	MaxShiftStartVarianceMinutes *int32 `json:"maxShiftStartVarianceMinutes"`
}

// Validate validates this shift start variance
func (m *ShiftStartVariance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicableDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxShiftStartVarianceMinutes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var shiftStartVarianceApplicableDaysItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shiftStartVarianceApplicableDaysItemsEnum = append(shiftStartVarianceApplicableDaysItemsEnum, v)
	}
}

func (m *ShiftStartVariance) validateApplicableDaysItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, shiftStartVarianceApplicableDaysItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ShiftStartVariance) validateApplicableDays(formats strfmt.Registry) error {

	if err := validate.Required("applicableDays", "body", m.ApplicableDays); err != nil {
		return err
	}

	if err := validate.UniqueItems("applicableDays", "body", m.ApplicableDays); err != nil {
		return err
	}

	for i := 0; i < len(m.ApplicableDays); i++ {

		// value enum
		if err := m.validateApplicableDaysItemsEnum("applicableDays"+"."+strconv.Itoa(i), "body", m.ApplicableDays[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ShiftStartVariance) validateMaxShiftStartVarianceMinutes(formats strfmt.Registry) error {

	if err := validate.Required("maxShiftStartVarianceMinutes", "body", m.MaxShiftStartVarianceMinutes); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShiftStartVariance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShiftStartVariance) UnmarshalBinary(b []byte) error {
	var res ShiftStartVariance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

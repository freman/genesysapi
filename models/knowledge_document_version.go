// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnowledgeDocumentVersion knowledge document version
//
// swagger:model KnowledgeDocumentVersion
type KnowledgeDocumentVersion struct {

	// Expiry date of document version, applicable only to the 'Archived' version of the document. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateExpires strfmt.DateTime `json:"dateExpires,omitempty"`

	// Published date of document version. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DatePublished strfmt.DateTime `json:"datePublished,omitempty"`

	// The document which is versioned.
	// Read Only: true
	Document *KnowledgeDocumentResponse `json:"document,omitempty"`

	// Globally unique identifier for the document version.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The globally unique identifier for the document version. If the value is provided, the document is restored to the given version. If not, it publishes the draft changes as a new version of the document.
	// Required: true
	RestoreFromVersionID *string `json:"restoreFromVersionId"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Version Number of the document.
	// Read Only: true
	VersionNumber int32 `json:"versionNumber,omitempty"`
}

// Validate validates this knowledge document version
func (m *KnowledgeDocumentVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatePublished(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreFromVersionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeDocumentVersion) validateDateExpires(formats strfmt.Registry) error {
	if swag.IsZero(m.DateExpires) { // not required
		return nil
	}

	if err := validate.FormatOf("dateExpires", "body", "date-time", m.DateExpires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeDocumentVersion) validateDatePublished(formats strfmt.Registry) error {
	if swag.IsZero(m.DatePublished) { // not required
		return nil
	}

	if err := validate.FormatOf("datePublished", "body", "date-time", m.DatePublished.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeDocumentVersion) validateDocument(formats strfmt.Registry) error {
	if swag.IsZero(m.Document) { // not required
		return nil
	}

	if m.Document != nil {
		if err := m.Document.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("document")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("document")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeDocumentVersion) validateRestoreFromVersionID(formats strfmt.Registry) error {

	if err := validate.Required("restoreFromVersionId", "body", m.RestoreFromVersionID); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeDocumentVersion) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this knowledge document version based on the context it is used
func (m *KnowledgeDocumentVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateExpires(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatePublished(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDocument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeDocumentVersion) contextValidateDateExpires(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateExpires", "body", strfmt.DateTime(m.DateExpires)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeDocumentVersion) contextValidateDatePublished(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "datePublished", "body", strfmt.DateTime(m.DatePublished)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeDocumentVersion) contextValidateDocument(ctx context.Context, formats strfmt.Registry) error {

	if m.Document != nil {
		if err := m.Document.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("document")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("document")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeDocumentVersion) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeDocumentVersion) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeDocumentVersion) contextValidateVersionNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "versionNumber", "body", int32(m.VersionNumber)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KnowledgeDocumentVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnowledgeDocumentVersion) UnmarshalBinary(b []byte) error {
	var res KnowledgeDocumentVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

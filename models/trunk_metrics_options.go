// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrunkMetricsOptions trunk metrics options
//
// swagger:model TrunkMetricsOptions
type TrunkMetricsOptions struct {

	// error info
	ErrorInfo *TrunkErrorInfo `json:"errorInfo,omitempty"`

	// option state
	OptionState bool `json:"optionState,omitempty"`

	// ISO 8601 format UTC absolute date & time of the last change of the option state.
	// Format: date-time
	OptionStateTime strfmt.DateTime `json:"optionStateTime,omitempty"`

	// Server proxy address that this options array element represents.
	ProxyAddress string `json:"proxyAddress,omitempty"`
}

// Validate validates this trunk metrics options
func (m *TrunkMetricsOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionStateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrunkMetricsOptions) validateErrorInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorInfo) { // not required
		return nil
	}

	if m.ErrorInfo != nil {
		if err := m.ErrorInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInfo")
			}
			return err
		}
	}

	return nil
}

func (m *TrunkMetricsOptions) validateOptionStateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.OptionStateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("optionStateTime", "body", "date-time", m.OptionStateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrunkMetricsOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrunkMetricsOptions) UnmarshalBinary(b []byte) error {
	var res TrunkMetricsOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentList List content object
//
// swagger:model ContentList
type ContentList struct {

	// User actions available on the content. All actions are optional and all actions are executed simultaneously.
	Actions *ContentActions `json:"actions,omitempty"`

	// An array of component objects
	Components []*ListItemComponent `json:"components"`

	// Text to show in the description row. This is immediately below the title
	Description string `json:"description,omitempty"`

	// An ID assigned to this rich message content. Each instance inside the content array has a unique ID.
	ID string `json:"id,omitempty"`

	// The type of list this instance represents
	// Enum: [Selection Vertical]
	ListType string `json:"listType,omitempty"`

	// Label for Submit button
	SubmitLabel string `json:"submitLabel,omitempty"`

	// Text to show in the title row
	Title string `json:"title,omitempty"`
}

// Validate validates this content list
func (m *ContentList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentList) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	if m.Actions != nil {
		if err := m.Actions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions")
			}
			return err
		}
	}

	return nil
}

func (m *ContentList) validateComponents(formats strfmt.Registry) error {

	if swag.IsZero(m.Components) { // not required
		return nil
	}

	for i := 0; i < len(m.Components); i++ {
		if swag.IsZero(m.Components[i]) { // not required
			continue
		}

		if m.Components[i] != nil {
			if err := m.Components[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var contentListTypeListTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Selection","Vertical"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentListTypeListTypePropEnum = append(contentListTypeListTypePropEnum, v)
	}
}

const (

	// ContentListListTypeSelection captures enum value "Selection"
	ContentListListTypeSelection string = "Selection"

	// ContentListListTypeVertical captures enum value "Vertical"
	ContentListListTypeVertical string = "Vertical"
)

// prop value enum
func (m *ContentList) validateListTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contentListTypeListTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContentList) validateListType(formats strfmt.Registry) error {

	if swag.IsZero(m.ListType) { // not required
		return nil
	}

	// value enum
	if err := m.validateListTypeEnum("listType", "body", m.ListType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentList) UnmarshalBinary(b []byte) error {
	var res ContentList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

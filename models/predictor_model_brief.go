// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PredictorModelBrief predictor model brief
//
// swagger:model PredictorModelBrief
type PredictorModelBrief struct {

	// The date the model was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The media type of the model.
	// Read Only: true
	// Enum: [voice email message]
	MediaType string `json:"mediaType,omitempty"`

	// The model's retraining errors.
	// Read Only: true
	RetrainingErrors []*PredictorModelRetrainingError `json:"retrainingErrors"`

	// The state of the model
	// Read Only: true
	// Enum: [Trained Error InvalidDataset Inactive]
	State string `json:"state,omitempty"`
}

// Validate validates this predictor model brief
func (m *PredictorModelBrief) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetrainingErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PredictorModelBrief) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

var predictorModelBriefTypeMediaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["voice","email","message"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		predictorModelBriefTypeMediaTypePropEnum = append(predictorModelBriefTypeMediaTypePropEnum, v)
	}
}

const (

	// PredictorModelBriefMediaTypeVoice captures enum value "voice"
	PredictorModelBriefMediaTypeVoice string = "voice"

	// PredictorModelBriefMediaTypeEmail captures enum value "email"
	PredictorModelBriefMediaTypeEmail string = "email"

	// PredictorModelBriefMediaTypeMessage captures enum value "message"
	PredictorModelBriefMediaTypeMessage string = "message"
)

// prop value enum
func (m *PredictorModelBrief) validateMediaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, predictorModelBriefTypeMediaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PredictorModelBrief) validateMediaType(formats strfmt.Registry) error {
	if swag.IsZero(m.MediaType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMediaTypeEnum("mediaType", "body", m.MediaType); err != nil {
		return err
	}

	return nil
}

func (m *PredictorModelBrief) validateRetrainingErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.RetrainingErrors) { // not required
		return nil
	}

	for i := 0; i < len(m.RetrainingErrors); i++ {
		if swag.IsZero(m.RetrainingErrors[i]) { // not required
			continue
		}

		if m.RetrainingErrors[i] != nil {
			if err := m.RetrainingErrors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("retrainingErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("retrainingErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var predictorModelBriefTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Trained","Error","InvalidDataset","Inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		predictorModelBriefTypeStatePropEnum = append(predictorModelBriefTypeStatePropEnum, v)
	}
}

const (

	// PredictorModelBriefStateTrained captures enum value "Trained"
	PredictorModelBriefStateTrained string = "Trained"

	// PredictorModelBriefStateError captures enum value "Error"
	PredictorModelBriefStateError string = "Error"

	// PredictorModelBriefStateInvalidDataset captures enum value "InvalidDataset"
	PredictorModelBriefStateInvalidDataset string = "InvalidDataset"

	// PredictorModelBriefStateInactive captures enum value "Inactive"
	PredictorModelBriefStateInactive string = "Inactive"
)

// prop value enum
func (m *PredictorModelBrief) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, predictorModelBriefTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PredictorModelBrief) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this predictor model brief based on the context it is used
func (m *PredictorModelBrief) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateModified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMediaType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetrainingErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PredictorModelBrief) contextValidateDateModified(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateModified", "body", strfmt.DateTime(m.DateModified)); err != nil {
		return err
	}

	return nil
}

func (m *PredictorModelBrief) contextValidateMediaType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "mediaType", "body", string(m.MediaType)); err != nil {
		return err
	}

	return nil
}

func (m *PredictorModelBrief) contextValidateRetrainingErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "retrainingErrors", "body", []*PredictorModelRetrainingError(m.RetrainingErrors)); err != nil {
		return err
	}

	for i := 0; i < len(m.RetrainingErrors); i++ {

		if m.RetrainingErrors[i] != nil {
			if err := m.RetrainingErrors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("retrainingErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("retrainingErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PredictorModelBrief) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PredictorModelBrief) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PredictorModelBrief) UnmarshalBinary(b []byte) error {
	var res PredictorModelBrief
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

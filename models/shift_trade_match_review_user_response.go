// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ShiftTradeMatchReviewUserResponse shift trade match review user response
//
// swagger:model ShiftTradeMatchReviewUserResponse
type ShiftTradeMatchReviewUserResponse struct {

	// Preview of what the shift will look like for the opposite side of this trade after the match is approved
	PostTradeNewShift *ShiftTradePreviewResponse `json:"postTradeNewShift,omitempty"`

	// The paid minutes on the week schedule for this user if the shift trade is approved
	PostTradeSchedulePaidMinutes int32 `json:"postTradeSchedulePaidMinutes,omitempty"`

	// The paid minutes on the week schedule for this user prior to the shift trade
	PreTradeSchedulePaidMinutes int32 `json:"preTradeSchedulePaidMinutes,omitempty"`

	// The maximum weekly paid minutes for this user per the work plan tied to the agent schedule
	WeeklyMaximumPaidMinutes int32 `json:"weeklyMaximumPaidMinutes,omitempty"`

	// The minimum weekly paid minutes for this user per the work plan tied to the agent schedule
	WeeklyMinimumPaidMinutes int32 `json:"weeklyMinimumPaidMinutes,omitempty"`
}

// Validate validates this shift trade match review user response
func (m *ShiftTradeMatchReviewUserResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostTradeNewShift(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShiftTradeMatchReviewUserResponse) validatePostTradeNewShift(formats strfmt.Registry) error {
	if swag.IsZero(m.PostTradeNewShift) { // not required
		return nil
	}

	if m.PostTradeNewShift != nil {
		if err := m.PostTradeNewShift.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postTradeNewShift")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postTradeNewShift")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this shift trade match review user response based on the context it is used
func (m *ShiftTradeMatchReviewUserResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePostTradeNewShift(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShiftTradeMatchReviewUserResponse) contextValidatePostTradeNewShift(ctx context.Context, formats strfmt.Registry) error {

	if m.PostTradeNewShift != nil {
		if err := m.PostTradeNewShift.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postTradeNewShift")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postTradeNewShift")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShiftTradeMatchReviewUserResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShiftTradeMatchReviewUserResponse) UnmarshalBinary(b []byte) error {
	var res ShiftTradeMatchReviewUserResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

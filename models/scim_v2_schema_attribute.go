// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScimV2SchemaAttribute A complex type that defines service provider attributes, or sub-attributes and their qualities.
//
// swagger:model ScimV2SchemaAttribute
type ScimV2SchemaAttribute struct {

	// A collection of suggested canonical values that MAY be used (e.g., "work" and "home").  In some cases, service providers MAY choose to ignore unsupported values.  OPTIONAL.
	// Read Only: true
	CanonicalValues []string `json:"canonicalValues"`

	// A Boolean value that specifies whether or not a string attribute is case sensitive.  The server SHALL use case sensitivity when evaluating filters.  For attributes that are case exact, the server SHALL preserve case for any value submitted.  If the attribute is case insensitive, the server MAY alter case for a submitted value.  Case sensitivity also impacts how attribute values MAY be compared against filter values (see Section 3.4.2.2 of [RFC7644])
	// Read Only: true
	CaseExact *bool `json:"caseExact,omitempty"`

	// The attribute's human-readable description.
	// Read Only: true
	Description string `json:"description,omitempty"`

	// A Boolean value indicating the attribute's plurality.
	// Read Only: true
	MultiValued *bool `json:"multiValued,omitempty"`

	// A single keyword indicating the circumstances under which the value of the attribute can be (re)defined. Value are readOnly, readWrite, immutable, writeOnly
	// Read Only: true
	// Enum: [readWrite readOnly immutable writeOnly]
	Mutability string `json:"mutability,omitempty"`

	// The attribute's name
	// Read Only: true
	Name string `json:"name,omitempty"`

	// A multi-valued array of JSON strings that indicate the SCIM resource types that may be referenced. Values include User, Group, external and uri.
	// Read Only: true
	ReferenceTypes []string `json:"referenceTypes"`

	// A Boolean value that specifies whether or not the attribute is required.
	// Read Only: true
	Required *bool `json:"required,omitempty"`

	// A single keyword that indicates when an attribute and associated values are returned in response to a GET request, or in response to a PUT, POST, or PATCH request.  Valid keywords are as follows: always, never, default, request
	// Read Only: true
	// Enum: [ALWAYS NEVER DEFAULT REQUEST]
	Returned string `json:"returned,omitempty"`

	// When an attribute is of type "complex", "subAttributes" defines a set of sub-attributes. "subAttributes" has the same schema sub-attributes as "attributes"
	// Read Only: true
	SubAttributes []*ScimV2SchemaAttribute `json:"subAttributes"`

	// The attribute's data type.  Valid values are "string", "boolean", "decimal", "integer", "dateTime", "reference", and "complex".
	// Read Only: true
	// Enum: [STRING BOOLEAN DECIMAL INTEGER DATE_TIME REFERENCE COMPLEX]
	Type string `json:"type,omitempty"`

	// A single keyword value that specifies how the service provider enforces uniqueness of attribute values.  A server MAY reject an invalid value based on uniqueness by returning HTTP response code 400 (Bad Request).  A client MAY enforce uniqueness on the client side to a greater degree than the service provider enforces.  For example, a client could make a value unique while the server has uniqueness of "none".  Valid keywords are as follows: none, server, global
	// Read Only: true
	// Enum: [NONE SERVER GLOBAL]
	Uniqueness string `json:"uniqueness,omitempty"`
}

// Validate validates this scim v2 schema attribute
func (m *ScimV2SchemaAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMutability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniqueness(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var scimV2SchemaAttributeTypeMutabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["readWrite","readOnly","immutable","writeOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scimV2SchemaAttributeTypeMutabilityPropEnum = append(scimV2SchemaAttributeTypeMutabilityPropEnum, v)
	}
}

const (

	// ScimV2SchemaAttributeMutabilityReadWrite captures enum value "readWrite"
	ScimV2SchemaAttributeMutabilityReadWrite string = "readWrite"

	// ScimV2SchemaAttributeMutabilityReadOnly captures enum value "readOnly"
	ScimV2SchemaAttributeMutabilityReadOnly string = "readOnly"

	// ScimV2SchemaAttributeMutabilityImmutable captures enum value "immutable"
	ScimV2SchemaAttributeMutabilityImmutable string = "immutable"

	// ScimV2SchemaAttributeMutabilityWriteOnly captures enum value "writeOnly"
	ScimV2SchemaAttributeMutabilityWriteOnly string = "writeOnly"
)

// prop value enum
func (m *ScimV2SchemaAttribute) validateMutabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scimV2SchemaAttributeTypeMutabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScimV2SchemaAttribute) validateMutability(formats strfmt.Registry) error {

	if swag.IsZero(m.Mutability) { // not required
		return nil
	}

	// value enum
	if err := m.validateMutabilityEnum("mutability", "body", m.Mutability); err != nil {
		return err
	}

	return nil
}

var scimV2SchemaAttributeReferenceTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USER","GROUP","EXTERNAL","URI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scimV2SchemaAttributeReferenceTypesItemsEnum = append(scimV2SchemaAttributeReferenceTypesItemsEnum, v)
	}
}

func (m *ScimV2SchemaAttribute) validateReferenceTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scimV2SchemaAttributeReferenceTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScimV2SchemaAttribute) validateReferenceTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.ReferenceTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.ReferenceTypes); i++ {

		// value enum
		if err := m.validateReferenceTypesItemsEnum("referenceTypes"+"."+strconv.Itoa(i), "body", m.ReferenceTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

var scimV2SchemaAttributeTypeReturnedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALWAYS","NEVER","DEFAULT","REQUEST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scimV2SchemaAttributeTypeReturnedPropEnum = append(scimV2SchemaAttributeTypeReturnedPropEnum, v)
	}
}

const (

	// ScimV2SchemaAttributeReturnedALWAYS captures enum value "ALWAYS"
	ScimV2SchemaAttributeReturnedALWAYS string = "ALWAYS"

	// ScimV2SchemaAttributeReturnedNEVER captures enum value "NEVER"
	ScimV2SchemaAttributeReturnedNEVER string = "NEVER"

	// ScimV2SchemaAttributeReturnedDEFAULT captures enum value "DEFAULT"
	ScimV2SchemaAttributeReturnedDEFAULT string = "DEFAULT"

	// ScimV2SchemaAttributeReturnedREQUEST captures enum value "REQUEST"
	ScimV2SchemaAttributeReturnedREQUEST string = "REQUEST"
)

// prop value enum
func (m *ScimV2SchemaAttribute) validateReturnedEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scimV2SchemaAttributeTypeReturnedPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScimV2SchemaAttribute) validateReturned(formats strfmt.Registry) error {

	if swag.IsZero(m.Returned) { // not required
		return nil
	}

	// value enum
	if err := m.validateReturnedEnum("returned", "body", m.Returned); err != nil {
		return err
	}

	return nil
}

func (m *ScimV2SchemaAttribute) validateSubAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.SubAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.SubAttributes); i++ {
		if swag.IsZero(m.SubAttributes[i]) { // not required
			continue
		}

		if m.SubAttributes[i] != nil {
			if err := m.SubAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var scimV2SchemaAttributeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STRING","BOOLEAN","DECIMAL","INTEGER","DATE_TIME","REFERENCE","COMPLEX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scimV2SchemaAttributeTypeTypePropEnum = append(scimV2SchemaAttributeTypeTypePropEnum, v)
	}
}

const (

	// ScimV2SchemaAttributeTypeSTRING captures enum value "STRING"
	ScimV2SchemaAttributeTypeSTRING string = "STRING"

	// ScimV2SchemaAttributeTypeBOOLEAN captures enum value "BOOLEAN"
	ScimV2SchemaAttributeTypeBOOLEAN string = "BOOLEAN"

	// ScimV2SchemaAttributeTypeDECIMAL captures enum value "DECIMAL"
	ScimV2SchemaAttributeTypeDECIMAL string = "DECIMAL"

	// ScimV2SchemaAttributeTypeINTEGER captures enum value "INTEGER"
	ScimV2SchemaAttributeTypeINTEGER string = "INTEGER"

	// ScimV2SchemaAttributeTypeDATETIME captures enum value "DATE_TIME"
	ScimV2SchemaAttributeTypeDATETIME string = "DATE_TIME"

	// ScimV2SchemaAttributeTypeREFERENCE captures enum value "REFERENCE"
	ScimV2SchemaAttributeTypeREFERENCE string = "REFERENCE"

	// ScimV2SchemaAttributeTypeCOMPLEX captures enum value "COMPLEX"
	ScimV2SchemaAttributeTypeCOMPLEX string = "COMPLEX"
)

// prop value enum
func (m *ScimV2SchemaAttribute) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scimV2SchemaAttributeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScimV2SchemaAttribute) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

var scimV2SchemaAttributeTypeUniquenessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","SERVER","GLOBAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scimV2SchemaAttributeTypeUniquenessPropEnum = append(scimV2SchemaAttributeTypeUniquenessPropEnum, v)
	}
}

const (

	// ScimV2SchemaAttributeUniquenessNONE captures enum value "NONE"
	ScimV2SchemaAttributeUniquenessNONE string = "NONE"

	// ScimV2SchemaAttributeUniquenessSERVER captures enum value "SERVER"
	ScimV2SchemaAttributeUniquenessSERVER string = "SERVER"

	// ScimV2SchemaAttributeUniquenessGLOBAL captures enum value "GLOBAL"
	ScimV2SchemaAttributeUniquenessGLOBAL string = "GLOBAL"
)

// prop value enum
func (m *ScimV2SchemaAttribute) validateUniquenessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scimV2SchemaAttributeTypeUniquenessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScimV2SchemaAttribute) validateUniqueness(formats strfmt.Registry) error {

	if swag.IsZero(m.Uniqueness) { // not required
		return nil
	}

	// value enum
	if err := m.validateUniquenessEnum("uniqueness", "body", m.Uniqueness); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScimV2SchemaAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScimV2SchemaAttribute) UnmarshalBinary(b []byte) error {
	var res ScimV2SchemaAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

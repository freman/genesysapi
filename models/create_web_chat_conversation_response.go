// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateWebChatConversationResponse create web chat conversation response
//
// swagger:model CreateWebChatConversationResponse
type CreateWebChatConversationResponse struct {

	// The URI which provides the conversation event stream.
	// Format: uri
	EventStreamURI strfmt.URI `json:"eventStreamUri,omitempty"`

	// Chat Conversation identifier
	ID string `json:"id,omitempty"`

	// The JWT that you can use to identify subsequent calls on this conversation
	Jwt string `json:"jwt,omitempty"`

	// Chat Member
	Member *WebChatMemberInfo `json:"member,omitempty"`
}

// Validate validates this create web chat conversation response
func (m *CreateWebChatConversationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventStreamURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateWebChatConversationResponse) validateEventStreamURI(formats strfmt.Registry) error {

	if swag.IsZero(m.EventStreamURI) { // not required
		return nil
	}

	if err := validate.FormatOf("eventStreamUri", "body", "uri", m.EventStreamURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateWebChatConversationResponse) validateMember(formats strfmt.Registry) error {

	if swag.IsZero(m.Member) { // not required
		return nil
	}

	if m.Member != nil {
		if err := m.Member.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("member")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateWebChatConversationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateWebChatConversationResponse) UnmarshalBinary(b []byte) error {
	var res CreateWebChatConversationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

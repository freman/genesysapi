// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JourneyPattern journey pattern
//
// swagger:model JourneyPattern
type JourneyPattern struct {

	// The number of times the pattern must match.
	Count int32 `json:"count,omitempty"`

	// A list of one or more criteria to satisfy.
	// Required: true
	Criteria []*Criteria `json:"criteria"`

	// The name of the event for which this pattern can be matched on.
	EventName string `json:"eventName,omitempty"`

	// The session type for which this pattern can be matched on.
	// Required: true
	SessionType *string `json:"sessionType"`

	// The stream type for which this pattern can be matched on.
	// Required: true
	// Enum: [Web Custom Conversation]
	StreamType *string `json:"streamType"`
}

// Validate validates this journey pattern
func (m *JourneyPattern) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JourneyPattern) validateCriteria(formats strfmt.Registry) error {

	if err := validate.Required("criteria", "body", m.Criteria); err != nil {
		return err
	}

	for i := 0; i < len(m.Criteria); i++ {
		if swag.IsZero(m.Criteria[i]) { // not required
			continue
		}

		if m.Criteria[i] != nil {
			if err := m.Criteria[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JourneyPattern) validateSessionType(formats strfmt.Registry) error {

	if err := validate.Required("sessionType", "body", m.SessionType); err != nil {
		return err
	}

	return nil
}

var journeyPatternTypeStreamTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Web","Custom","Conversation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		journeyPatternTypeStreamTypePropEnum = append(journeyPatternTypeStreamTypePropEnum, v)
	}
}

const (

	// JourneyPatternStreamTypeWeb captures enum value "Web"
	JourneyPatternStreamTypeWeb string = "Web"

	// JourneyPatternStreamTypeCustom captures enum value "Custom"
	JourneyPatternStreamTypeCustom string = "Custom"

	// JourneyPatternStreamTypeConversation captures enum value "Conversation"
	JourneyPatternStreamTypeConversation string = "Conversation"
)

// prop value enum
func (m *JourneyPattern) validateStreamTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, journeyPatternTypeStreamTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JourneyPattern) validateStreamType(formats strfmt.Registry) error {

	if err := validate.Required("streamType", "body", m.StreamType); err != nil {
		return err
	}

	// value enum
	if err := m.validateStreamTypeEnum("streamType", "body", *m.StreamType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JourneyPattern) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JourneyPattern) UnmarshalBinary(b []byte) error {
	var res JourneyPattern
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

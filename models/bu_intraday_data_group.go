// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuIntradayDataGroup bu intraday data group
//
// swagger:model BuIntradayDataGroup
type BuIntradayDataGroup struct {

	// Forecast data per interval for this date range
	ForecastDataPerInterval []*BuIntradayForecastData `json:"forecastDataPerInterval"`

	// Forecast data summary for this date range
	ForecastDataSummary *BuIntradayForecastData `json:"forecastDataSummary,omitempty"`

	// The media type associated with this intraday group
	// Enum: [Voice Chat Email Callback Message]
	MediaType string `json:"mediaType,omitempty"`

	// Performance prediction data per interval for this date range
	PerformancePredictionDataPerInterval []*IntradayPerformancePredictionData `json:"performancePredictionDataPerInterval"`

	// Performance prediction data summary for this date range
	PerformancePredictionDataSummary *IntradayPerformancePredictionData `json:"performancePredictionDataSummary,omitempty"`

	// Schedule data per interval for this date range
	ScheduleDataPerInterval []*BuIntradayScheduleData `json:"scheduleDataPerInterval"`

	// Schedule data summary for this date range
	ScheduleDataSummary *BuIntradayScheduleData `json:"scheduleDataSummary,omitempty"`
}

// Validate validates this bu intraday data group
func (m *BuIntradayDataGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateForecastDataPerInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForecastDataSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformancePredictionDataPerInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformancePredictionDataSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleDataPerInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleDataSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuIntradayDataGroup) validateForecastDataPerInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.ForecastDataPerInterval) { // not required
		return nil
	}

	for i := 0; i < len(m.ForecastDataPerInterval); i++ {
		if swag.IsZero(m.ForecastDataPerInterval[i]) { // not required
			continue
		}

		if m.ForecastDataPerInterval[i] != nil {
			if err := m.ForecastDataPerInterval[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("forecastDataPerInterval" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("forecastDataPerInterval" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuIntradayDataGroup) validateForecastDataSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.ForecastDataSummary) { // not required
		return nil
	}

	if m.ForecastDataSummary != nil {
		if err := m.ForecastDataSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forecastDataSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forecastDataSummary")
			}
			return err
		}
	}

	return nil
}

var buIntradayDataGroupTypeMediaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Voice","Chat","Email","Callback","Message"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		buIntradayDataGroupTypeMediaTypePropEnum = append(buIntradayDataGroupTypeMediaTypePropEnum, v)
	}
}

const (

	// BuIntradayDataGroupMediaTypeVoice captures enum value "Voice"
	BuIntradayDataGroupMediaTypeVoice string = "Voice"

	// BuIntradayDataGroupMediaTypeChat captures enum value "Chat"
	BuIntradayDataGroupMediaTypeChat string = "Chat"

	// BuIntradayDataGroupMediaTypeEmail captures enum value "Email"
	BuIntradayDataGroupMediaTypeEmail string = "Email"

	// BuIntradayDataGroupMediaTypeCallback captures enum value "Callback"
	BuIntradayDataGroupMediaTypeCallback string = "Callback"

	// BuIntradayDataGroupMediaTypeMessage captures enum value "Message"
	BuIntradayDataGroupMediaTypeMessage string = "Message"
)

// prop value enum
func (m *BuIntradayDataGroup) validateMediaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, buIntradayDataGroupTypeMediaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BuIntradayDataGroup) validateMediaType(formats strfmt.Registry) error {
	if swag.IsZero(m.MediaType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMediaTypeEnum("mediaType", "body", m.MediaType); err != nil {
		return err
	}

	return nil
}

func (m *BuIntradayDataGroup) validatePerformancePredictionDataPerInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformancePredictionDataPerInterval) { // not required
		return nil
	}

	for i := 0; i < len(m.PerformancePredictionDataPerInterval); i++ {
		if swag.IsZero(m.PerformancePredictionDataPerInterval[i]) { // not required
			continue
		}

		if m.PerformancePredictionDataPerInterval[i] != nil {
			if err := m.PerformancePredictionDataPerInterval[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("performancePredictionDataPerInterval" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("performancePredictionDataPerInterval" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuIntradayDataGroup) validatePerformancePredictionDataSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformancePredictionDataSummary) { // not required
		return nil
	}

	if m.PerformancePredictionDataSummary != nil {
		if err := m.PerformancePredictionDataSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performancePredictionDataSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("performancePredictionDataSummary")
			}
			return err
		}
	}

	return nil
}

func (m *BuIntradayDataGroup) validateScheduleDataPerInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleDataPerInterval) { // not required
		return nil
	}

	for i := 0; i < len(m.ScheduleDataPerInterval); i++ {
		if swag.IsZero(m.ScheduleDataPerInterval[i]) { // not required
			continue
		}

		if m.ScheduleDataPerInterval[i] != nil {
			if err := m.ScheduleDataPerInterval[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scheduleDataPerInterval" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scheduleDataPerInterval" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuIntradayDataGroup) validateScheduleDataSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleDataSummary) { // not required
		return nil
	}

	if m.ScheduleDataSummary != nil {
		if err := m.ScheduleDataSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduleDataSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduleDataSummary")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bu intraday data group based on the context it is used
func (m *BuIntradayDataGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateForecastDataPerInterval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateForecastDataSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerformancePredictionDataPerInterval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerformancePredictionDataSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduleDataPerInterval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduleDataSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuIntradayDataGroup) contextValidateForecastDataPerInterval(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ForecastDataPerInterval); i++ {

		if m.ForecastDataPerInterval[i] != nil {
			if err := m.ForecastDataPerInterval[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("forecastDataPerInterval" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("forecastDataPerInterval" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuIntradayDataGroup) contextValidateForecastDataSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.ForecastDataSummary != nil {
		if err := m.ForecastDataSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forecastDataSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forecastDataSummary")
			}
			return err
		}
	}

	return nil
}

func (m *BuIntradayDataGroup) contextValidatePerformancePredictionDataPerInterval(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PerformancePredictionDataPerInterval); i++ {

		if m.PerformancePredictionDataPerInterval[i] != nil {
			if err := m.PerformancePredictionDataPerInterval[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("performancePredictionDataPerInterval" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("performancePredictionDataPerInterval" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuIntradayDataGroup) contextValidatePerformancePredictionDataSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.PerformancePredictionDataSummary != nil {
		if err := m.PerformancePredictionDataSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performancePredictionDataSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("performancePredictionDataSummary")
			}
			return err
		}
	}

	return nil
}

func (m *BuIntradayDataGroup) contextValidateScheduleDataPerInterval(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ScheduleDataPerInterval); i++ {

		if m.ScheduleDataPerInterval[i] != nil {
			if err := m.ScheduleDataPerInterval[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scheduleDataPerInterval" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scheduleDataPerInterval" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuIntradayDataGroup) contextValidateScheduleDataSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.ScheduleDataSummary != nil {
		if err := m.ScheduleDataSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduleDataSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduleDataSummary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuIntradayDataGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuIntradayDataGroup) UnmarshalBinary(b []byte) error {
	var res BuIntradayDataGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

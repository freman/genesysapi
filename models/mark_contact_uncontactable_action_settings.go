// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MarkContactUncontactableActionSettings mark contact uncontactable action settings
//
// swagger:model MarkContactUncontactableActionSettings
type MarkContactUncontactableActionSettings struct {

	// A list of media types to evaluate.
	// Required: true
	MediaTypes []string `json:"mediaTypes"`
}

// Validate validates this mark contact uncontactable action settings
func (m *MarkContactUncontactableActionSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMediaTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var markContactUncontactableActionSettingsMediaTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Voice","Email","Sms"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		markContactUncontactableActionSettingsMediaTypesItemsEnum = append(markContactUncontactableActionSettingsMediaTypesItemsEnum, v)
	}
}

func (m *MarkContactUncontactableActionSettings) validateMediaTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, markContactUncontactableActionSettingsMediaTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MarkContactUncontactableActionSettings) validateMediaTypes(formats strfmt.Registry) error {

	if err := validate.Required("mediaTypes", "body", m.MediaTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.MediaTypes); i++ {

		// value enum
		if err := m.validateMediaTypesItemsEnum("mediaTypes"+"."+strconv.Itoa(i), "body", m.MediaTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this mark contact uncontactable action settings based on context it is used
func (m *MarkContactUncontactableActionSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MarkContactUncontactableActionSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MarkContactUncontactableActionSettings) UnmarshalBinary(b []byte) error {
	var res MarkContactUncontactableActionSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

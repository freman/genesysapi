// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WritableDialerContact writable dialer contact
//
// swagger:model WritableDialerContact
type WritableDialerContact struct {

	// Indicates whether or not the contact can be called.
	Callable bool `json:"callable"`

	// The identifier of the contact list containing this contact.
	// Required: true
	ContactListID *string `json:"contactListId"`

	// An ordered map of the contact's columns and corresponding values.
	// Required: true
	Data map[string]interface{} `json:"data"`

	// The globally unique identifier for the object.
	ID string `json:"id,omitempty"`

	// A map of SMS records for the contact phone columns.
	// Read Only: true
	LatestSmsEvaluations map[string]MessageEvaluation `json:"latestSmsEvaluations,omitempty"`

	// A map of phone number columns to PhoneNumberStatuses, which indicate if the phone number is callable or not.
	PhoneNumberStatus map[string]PhoneNumberStatus `json:"phoneNumberStatus,omitempty"`
}

// Validate validates this writable dialer contact
func (m *WritableDialerContact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactListID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestSmsEvaluations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumberStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WritableDialerContact) validateContactListID(formats strfmt.Registry) error {

	if err := validate.Required("contactListId", "body", m.ContactListID); err != nil {
		return err
	}

	return nil
}

func (m *WritableDialerContact) validateData(formats strfmt.Registry) error {

	for k := range m.Data {

		if err := validate.Required("data"+"."+k, "body", m.Data[k]); err != nil {
			return err
		}

		if err := validate.Required("data"+"."+k, "body", m.Data[k]); err != nil {
			return err
		}

	}

	return nil
}

func (m *WritableDialerContact) validateLatestSmsEvaluations(formats strfmt.Registry) error {

	if swag.IsZero(m.LatestSmsEvaluations) { // not required
		return nil
	}

	for k := range m.LatestSmsEvaluations {

		if err := validate.Required("latestSmsEvaluations"+"."+k, "body", m.LatestSmsEvaluations[k]); err != nil {
			return err
		}
		if val, ok := m.LatestSmsEvaluations[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *WritableDialerContact) validatePhoneNumberStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumberStatus) { // not required
		return nil
	}

	for k := range m.PhoneNumberStatus {

		if err := validate.Required("phoneNumberStatus"+"."+k, "body", m.PhoneNumberStatus[k]); err != nil {
			return err
		}
		if val, ok := m.PhoneNumberStatus[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WritableDialerContact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WritableDialerContact) UnmarshalBinary(b []byte) error {
	var res WritableDialerContact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CoachingSlot coaching slot
//
// swagger:model CoachingSlot
type CoachingSlot struct {

	// Start date and time of scheduled coaching appointment slot. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateStart strfmt.DateTime `json:"dateStart,omitempty"`

	// Rating based on the staffing difference for scheduled slot
	// Read Only: true
	// Enum: [Poor Neutral Good]
	DifferenceRating string `json:"differenceRating,omitempty"`

	// Length of coaching appointment slot in minutes
	// Read Only: true
	LengthInMinutes int32 `json:"lengthInMinutes,omitempty"`

	// Difference between scheduled and forecast headcount for this slot after scheduling the coaching appointment
	// Read Only: true
	StaffingDifference float64 `json:"staffingDifference,omitempty"`

	// Workforce Management schedule information associated with the slot
	// Read Only: true
	WfmSchedule *WfmScheduleReference `json:"wfmSchedule,omitempty"`
}

// Validate validates this coaching slot
func (m *CoachingSlot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDifferenceRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWfmSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CoachingSlot) validateDateStart(formats strfmt.Registry) error {
	if swag.IsZero(m.DateStart) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStart", "body", "date-time", m.DateStart.String(), formats); err != nil {
		return err
	}

	return nil
}

var coachingSlotTypeDifferenceRatingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Poor","Neutral","Good"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		coachingSlotTypeDifferenceRatingPropEnum = append(coachingSlotTypeDifferenceRatingPropEnum, v)
	}
}

const (

	// CoachingSlotDifferenceRatingPoor captures enum value "Poor"
	CoachingSlotDifferenceRatingPoor string = "Poor"

	// CoachingSlotDifferenceRatingNeutral captures enum value "Neutral"
	CoachingSlotDifferenceRatingNeutral string = "Neutral"

	// CoachingSlotDifferenceRatingGood captures enum value "Good"
	CoachingSlotDifferenceRatingGood string = "Good"
)

// prop value enum
func (m *CoachingSlot) validateDifferenceRatingEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, coachingSlotTypeDifferenceRatingPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CoachingSlot) validateDifferenceRating(formats strfmt.Registry) error {
	if swag.IsZero(m.DifferenceRating) { // not required
		return nil
	}

	// value enum
	if err := m.validateDifferenceRatingEnum("differenceRating", "body", m.DifferenceRating); err != nil {
		return err
	}

	return nil
}

func (m *CoachingSlot) validateWfmSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.WfmSchedule) { // not required
		return nil
	}

	if m.WfmSchedule != nil {
		if err := m.WfmSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wfmSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wfmSchedule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this coaching slot based on the context it is used
func (m *CoachingSlot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateStart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDifferenceRating(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLengthInMinutes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStaffingDifference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWfmSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CoachingSlot) contextValidateDateStart(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateStart", "body", strfmt.DateTime(m.DateStart)); err != nil {
		return err
	}

	return nil
}

func (m *CoachingSlot) contextValidateDifferenceRating(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "differenceRating", "body", string(m.DifferenceRating)); err != nil {
		return err
	}

	return nil
}

func (m *CoachingSlot) contextValidateLengthInMinutes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lengthInMinutes", "body", int32(m.LengthInMinutes)); err != nil {
		return err
	}

	return nil
}

func (m *CoachingSlot) contextValidateStaffingDifference(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "staffingDifference", "body", float64(m.StaffingDifference)); err != nil {
		return err
	}

	return nil
}

func (m *CoachingSlot) contextValidateWfmSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.WfmSchedule != nil {
		if err := m.WfmSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wfmSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wfmSchedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CoachingSlot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoachingSlot) UnmarshalBinary(b []byte) error {
	var res CoachingSlot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentFacetFilterItem content facet filter item
//
// swagger:model ContentFacetFilterItem
type ContentFacetFilterItem struct {

	// name
	Name string `json:"name,omitempty"`

	// operator
	// Enum: [IN RANGE EQUALS NOTEQUALS LESSTHAN LESSTHANEQUALS GREATERTHAN GREATERTHANEQUALS CONTAINS]
	Operator string `json:"operator,omitempty"`

	// type
	// Enum: [NUMBER STRING DATE BOOLEAN LIST]
	Type string `json:"type,omitempty"`

	// values
	Values []string `json:"values"`
}

// Validate validates this content facet filter item
func (m *ContentFacetFilterItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var contentFacetFilterItemTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IN","RANGE","EQUALS","NOTEQUALS","LESSTHAN","LESSTHANEQUALS","GREATERTHAN","GREATERTHANEQUALS","CONTAINS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentFacetFilterItemTypeOperatorPropEnum = append(contentFacetFilterItemTypeOperatorPropEnum, v)
	}
}

const (

	// ContentFacetFilterItemOperatorIN captures enum value "IN"
	ContentFacetFilterItemOperatorIN string = "IN"

	// ContentFacetFilterItemOperatorRANGE captures enum value "RANGE"
	ContentFacetFilterItemOperatorRANGE string = "RANGE"

	// ContentFacetFilterItemOperatorEQUALS captures enum value "EQUALS"
	ContentFacetFilterItemOperatorEQUALS string = "EQUALS"

	// ContentFacetFilterItemOperatorNOTEQUALS captures enum value "NOTEQUALS"
	ContentFacetFilterItemOperatorNOTEQUALS string = "NOTEQUALS"

	// ContentFacetFilterItemOperatorLESSTHAN captures enum value "LESSTHAN"
	ContentFacetFilterItemOperatorLESSTHAN string = "LESSTHAN"

	// ContentFacetFilterItemOperatorLESSTHANEQUALS captures enum value "LESSTHANEQUALS"
	ContentFacetFilterItemOperatorLESSTHANEQUALS string = "LESSTHANEQUALS"

	// ContentFacetFilterItemOperatorGREATERTHAN captures enum value "GREATERTHAN"
	ContentFacetFilterItemOperatorGREATERTHAN string = "GREATERTHAN"

	// ContentFacetFilterItemOperatorGREATERTHANEQUALS captures enum value "GREATERTHANEQUALS"
	ContentFacetFilterItemOperatorGREATERTHANEQUALS string = "GREATERTHANEQUALS"

	// ContentFacetFilterItemOperatorCONTAINS captures enum value "CONTAINS"
	ContentFacetFilterItemOperatorCONTAINS string = "CONTAINS"
)

// prop value enum
func (m *ContentFacetFilterItem) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contentFacetFilterItemTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContentFacetFilterItem) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

var contentFacetFilterItemTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NUMBER","STRING","DATE","BOOLEAN","LIST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentFacetFilterItemTypeTypePropEnum = append(contentFacetFilterItemTypeTypePropEnum, v)
	}
}

const (

	// ContentFacetFilterItemTypeNUMBER captures enum value "NUMBER"
	ContentFacetFilterItemTypeNUMBER string = "NUMBER"

	// ContentFacetFilterItemTypeSTRING captures enum value "STRING"
	ContentFacetFilterItemTypeSTRING string = "STRING"

	// ContentFacetFilterItemTypeDATE captures enum value "DATE"
	ContentFacetFilterItemTypeDATE string = "DATE"

	// ContentFacetFilterItemTypeBOOLEAN captures enum value "BOOLEAN"
	ContentFacetFilterItemTypeBOOLEAN string = "BOOLEAN"

	// ContentFacetFilterItemTypeLIST captures enum value "LIST"
	ContentFacetFilterItemTypeLIST string = "LIST"
)

// prop value enum
func (m *ContentFacetFilterItem) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contentFacetFilterItemTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContentFacetFilterItem) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this content facet filter item based on context it is used
func (m *ContentFacetFilterItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ContentFacetFilterItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentFacetFilterItem) UnmarshalBinary(b []byte) error {
	var res ContentFacetFilterItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialSpecification Specifies the requirements for a credential that can be provided for configuring an integration
//
// swagger:model CredentialSpecification
type CredentialSpecification struct {

	// List of acceptable credential types that can be provided for this credential.
	// Read Only: true
	CredentialTypes []string `json:"credentialTypes"`

	// Indicates if the credential must be provided in order for the integration configuration to be valid.
	// Read Only: true
	Required *bool `json:"required"`

	// Title describing the usage for this credential.
	// Read Only: true
	Title string `json:"title,omitempty"`
}

// Validate validates this credential specification
func (m *CredentialSpecification) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this credential specification based on the context it is used
func (m *CredentialSpecification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentialTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequired(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTitle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialSpecification) contextValidateCredentialTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "credentialTypes", "body", []string(m.CredentialTypes)); err != nil {
		return err
	}

	return nil
}

func (m *CredentialSpecification) contextValidateRequired(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "required", "body", m.Required); err != nil {
		return err
	}

	return nil
}

func (m *CredentialSpecification) contextValidateTitle(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "title", "body", string(m.Title)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialSpecification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialSpecification) UnmarshalBinary(b []byte) error {
	var res CredentialSpecification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

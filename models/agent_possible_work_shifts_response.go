// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgentPossibleWorkShiftsResponse agent possible work shifts response
//
// swagger:model AgentPossibleWorkShiftsResponse
type AgentPossibleWorkShiftsResponse struct {

	// Each element is the ID of an effective work plan for a specific week
	Pattern []int32 `json:"pattern"`

	// Number of minutes in each interval in the intervalScheduleProbabilities
	SchedulerIntervalLengthMinutes int32 `json:"schedulerIntervalLengthMinutes,omitempty"`

	// The time zone of the business unit
	TimeZone string `json:"timeZone,omitempty"`

	// Start date of requested effective work plan. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Format: date
	WeekStartDate strfmt.Date `json:"weekStartDate,omitempty"`

	// Each element is a weekly effective work plan that can be used for multiple weeks
	WeeklyPossibleWorkShifts []*PossibleWorkShiftsForWeek `json:"weeklyPossibleWorkShifts"`
}

// Validate validates this agent possible work shifts response
func (m *AgentPossibleWorkShiftsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWeekStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeeklyPossibleWorkShifts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentPossibleWorkShiftsResponse) validateWeekStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.WeekStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("weekStartDate", "body", "date", m.WeekStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AgentPossibleWorkShiftsResponse) validateWeeklyPossibleWorkShifts(formats strfmt.Registry) error {
	if swag.IsZero(m.WeeklyPossibleWorkShifts) { // not required
		return nil
	}

	for i := 0; i < len(m.WeeklyPossibleWorkShifts); i++ {
		if swag.IsZero(m.WeeklyPossibleWorkShifts[i]) { // not required
			continue
		}

		if m.WeeklyPossibleWorkShifts[i] != nil {
			if err := m.WeeklyPossibleWorkShifts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("weeklyPossibleWorkShifts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("weeklyPossibleWorkShifts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this agent possible work shifts response based on the context it is used
func (m *AgentPossibleWorkShiftsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWeeklyPossibleWorkShifts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentPossibleWorkShiftsResponse) contextValidateWeeklyPossibleWorkShifts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WeeklyPossibleWorkShifts); i++ {

		if m.WeeklyPossibleWorkShifts[i] != nil {
			if err := m.WeeklyPossibleWorkShifts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("weeklyPossibleWorkShifts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("weeklyPossibleWorkShifts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgentPossibleWorkShiftsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentPossibleWorkShiftsResponse) UnmarshalBinary(b []byte) error {
	var res AgentPossibleWorkShiftsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

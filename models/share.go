// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Share share
//
// swagger:model Share
type Share struct {

	// group
	Group *Group `json:"group,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// member
	Member *DomainEntityRef `json:"member,omitempty"`

	// member type
	// Enum: [USER GROUP PUBLIC]
	MemberType string `json:"memberType,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// shared by
	SharedBy *DomainEntityRef `json:"sharedBy,omitempty"`

	// shared entity
	SharedEntity *DomainEntityRef `json:"sharedEntity,omitempty"`

	// shared entity type
	// Enum: [DOCUMENT]
	SharedEntityType string `json:"sharedEntityType,omitempty"`

	// user
	User *User `json:"user,omitempty"`

	// workspace
	Workspace *DomainEntityRef `json:"workspace,omitempty"`
}

// Validate validates this share
func (m *Share) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharedEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharedEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Share) validateGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if m.Group != nil {
		if err := m.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (m *Share) validateMember(formats strfmt.Registry) error {

	if swag.IsZero(m.Member) { // not required
		return nil
	}

	if m.Member != nil {
		if err := m.Member.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("member")
			}
			return err
		}
	}

	return nil
}

var shareTypeMemberTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USER","GROUP","PUBLIC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shareTypeMemberTypePropEnum = append(shareTypeMemberTypePropEnum, v)
	}
}

const (

	// ShareMemberTypeUSER captures enum value "USER"
	ShareMemberTypeUSER string = "USER"

	// ShareMemberTypeGROUP captures enum value "GROUP"
	ShareMemberTypeGROUP string = "GROUP"

	// ShareMemberTypePUBLIC captures enum value "PUBLIC"
	ShareMemberTypePUBLIC string = "PUBLIC"
)

// prop value enum
func (m *Share) validateMemberTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, shareTypeMemberTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Share) validateMemberType(formats strfmt.Registry) error {

	if swag.IsZero(m.MemberType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMemberTypeEnum("memberType", "body", m.MemberType); err != nil {
		return err
	}

	return nil
}

func (m *Share) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Share) validateSharedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.SharedBy) { // not required
		return nil
	}

	if m.SharedBy != nil {
		if err := m.SharedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharedBy")
			}
			return err
		}
	}

	return nil
}

func (m *Share) validateSharedEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.SharedEntity) { // not required
		return nil
	}

	if m.SharedEntity != nil {
		if err := m.SharedEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharedEntity")
			}
			return err
		}
	}

	return nil
}

var shareTypeSharedEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DOCUMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shareTypeSharedEntityTypePropEnum = append(shareTypeSharedEntityTypePropEnum, v)
	}
}

const (

	// ShareSharedEntityTypeDOCUMENT captures enum value "DOCUMENT"
	ShareSharedEntityTypeDOCUMENT string = "DOCUMENT"
)

// prop value enum
func (m *Share) validateSharedEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, shareTypeSharedEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Share) validateSharedEntityType(formats strfmt.Registry) error {

	if swag.IsZero(m.SharedEntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSharedEntityTypeEnum("sharedEntityType", "body", m.SharedEntityType); err != nil {
		return err
	}

	return nil
}

func (m *Share) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *Share) validateWorkspace(formats strfmt.Registry) error {

	if swag.IsZero(m.Workspace) { // not required
		return nil
	}

	if m.Workspace != nil {
		if err := m.Workspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Share) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Share) UnmarshalBinary(b []byte) error {
	var res Share
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

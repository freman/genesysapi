// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SiteConnection site connection
//
// swagger:model SiteConnection
type SiteConnection struct {

	// The core site
	// Read Only: true
	CoreSite *bool `json:"coreSite"`

	// All of the edges to which the site connects
	// Read Only: true
	EdgeList []*ConnectedEdge `json:"edgeList"`

	// Indicates if the current site is linked
	Enabled bool `json:"enabled"`

	// id
	ID string `json:"id,omitempty"`

	// managed
	Managed bool `json:"managed"`

	// Media model for the current site.
	// Read Only: true
	// Enum: [Premises Cloud]
	MediaModel string `json:"mediaModel,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// List of site ids names and selfUris for the primary core sites
	// Read Only: true
	PrimaryCoreSites []*DomainEntityRef `json:"primaryCoreSites"`

	// List of site ids names and selfUris for the secondary core sites
	// Read Only: true
	SecondaryCoreSites []*DomainEntityRef `json:"secondaryCoreSites"`

	// self Uri
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Connection method from site to site (Direct, Indirect, CloudProxy
	// Enum: [Direct Indirect CloudProxy]
	Type string `json:"type,omitempty"`
}

// Validate validates this site connection
func (m *SiteConnection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEdgeList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryCoreSites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryCoreSites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteConnection) validateEdgeList(formats strfmt.Registry) error {

	if swag.IsZero(m.EdgeList) { // not required
		return nil
	}

	for i := 0; i < len(m.EdgeList); i++ {
		if swag.IsZero(m.EdgeList[i]) { // not required
			continue
		}

		if m.EdgeList[i] != nil {
			if err := m.EdgeList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("edgeList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var siteConnectionTypeMediaModelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Premises","Cloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteConnectionTypeMediaModelPropEnum = append(siteConnectionTypeMediaModelPropEnum, v)
	}
}

const (

	// SiteConnectionMediaModelPremises captures enum value "Premises"
	SiteConnectionMediaModelPremises string = "Premises"

	// SiteConnectionMediaModelCloud captures enum value "Cloud"
	SiteConnectionMediaModelCloud string = "Cloud"
)

// prop value enum
func (m *SiteConnection) validateMediaModelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, siteConnectionTypeMediaModelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SiteConnection) validateMediaModel(formats strfmt.Registry) error {

	if swag.IsZero(m.MediaModel) { // not required
		return nil
	}

	// value enum
	if err := m.validateMediaModelEnum("mediaModel", "body", m.MediaModel); err != nil {
		return err
	}

	return nil
}

func (m *SiteConnection) validatePrimaryCoreSites(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryCoreSites) { // not required
		return nil
	}

	for i := 0; i < len(m.PrimaryCoreSites); i++ {
		if swag.IsZero(m.PrimaryCoreSites[i]) { // not required
			continue
		}

		if m.PrimaryCoreSites[i] != nil {
			if err := m.PrimaryCoreSites[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("primaryCoreSites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SiteConnection) validateSecondaryCoreSites(formats strfmt.Registry) error {

	if swag.IsZero(m.SecondaryCoreSites) { // not required
		return nil
	}

	for i := 0; i < len(m.SecondaryCoreSites); i++ {
		if swag.IsZero(m.SecondaryCoreSites[i]) { // not required
			continue
		}

		if m.SecondaryCoreSites[i] != nil {
			if err := m.SecondaryCoreSites[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secondaryCoreSites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SiteConnection) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var siteConnectionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Direct","Indirect","CloudProxy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteConnectionTypeTypePropEnum = append(siteConnectionTypeTypePropEnum, v)
	}
}

const (

	// SiteConnectionTypeDirect captures enum value "Direct"
	SiteConnectionTypeDirect string = "Direct"

	// SiteConnectionTypeIndirect captures enum value "Indirect"
	SiteConnectionTypeIndirect string = "Indirect"

	// SiteConnectionTypeCloudProxy captures enum value "CloudProxy"
	SiteConnectionTypeCloudProxy string = "CloudProxy"
)

// prop value enum
func (m *SiteConnection) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, siteConnectionTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SiteConnection) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteConnection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteConnection) UnmarshalBinary(b []byte) error {
	var res SiteConnection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchAction patch action
//
// swagger:model PatchAction
type PatchAction struct {

	// Action template associated with the action map.
	ActionTemplate *ActionMapActionTemplate `json:"actionTemplate,omitempty"`

	// Architect Flow Id and input contract.
	ArchitectFlowFields *ArchitectFlowFields `json:"architectFlowFields,omitempty"`

	// Media type of action.
	// Required: true
	// Enum: [webchat webMessagingOffer contentOffer integrationAction architectFlow]
	MediaType *string `json:"mediaType"`

	// Admin-configurable fields of a web messaging offer action.
	WebMessagingOfferFields *WebMessagingOfferFields `json:"webMessagingOfferFields,omitempty"`
}

// Validate validates this patch action
func (m *PatchAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchitectFlowFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebMessagingOfferFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchAction) validateActionTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionTemplate) { // not required
		return nil
	}

	if m.ActionTemplate != nil {
		if err := m.ActionTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *PatchAction) validateArchitectFlowFields(formats strfmt.Registry) error {

	if swag.IsZero(m.ArchitectFlowFields) { // not required
		return nil
	}

	if m.ArchitectFlowFields != nil {
		if err := m.ArchitectFlowFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architectFlowFields")
			}
			return err
		}
	}

	return nil
}

var patchActionTypeMediaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["webchat","webMessagingOffer","contentOffer","integrationAction","architectFlow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchActionTypeMediaTypePropEnum = append(patchActionTypeMediaTypePropEnum, v)
	}
}

const (

	// PatchActionMediaTypeWebchat captures enum value "webchat"
	PatchActionMediaTypeWebchat string = "webchat"

	// PatchActionMediaTypeWebMessagingOffer captures enum value "webMessagingOffer"
	PatchActionMediaTypeWebMessagingOffer string = "webMessagingOffer"

	// PatchActionMediaTypeContentOffer captures enum value "contentOffer"
	PatchActionMediaTypeContentOffer string = "contentOffer"

	// PatchActionMediaTypeIntegrationAction captures enum value "integrationAction"
	PatchActionMediaTypeIntegrationAction string = "integrationAction"

	// PatchActionMediaTypeArchitectFlow captures enum value "architectFlow"
	PatchActionMediaTypeArchitectFlow string = "architectFlow"
)

// prop value enum
func (m *PatchAction) validateMediaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchActionTypeMediaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PatchAction) validateMediaType(formats strfmt.Registry) error {

	if err := validate.Required("mediaType", "body", m.MediaType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMediaTypeEnum("mediaType", "body", *m.MediaType); err != nil {
		return err
	}

	return nil
}

func (m *PatchAction) validateWebMessagingOfferFields(formats strfmt.Registry) error {

	if swag.IsZero(m.WebMessagingOfferFields) { // not required
		return nil
	}

	if m.WebMessagingOfferFields != nil {
		if err := m.WebMessagingOfferFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webMessagingOfferFields")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchAction) UnmarshalBinary(b []byte) error {
	var res PatchAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

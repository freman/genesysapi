// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CoachingNotification coaching notification
//
// swagger:model CoachingNotification
type CoachingNotification struct {

	// Action causing the notification.
	// Read Only: true
	// Enum: [Create Update Delete StatusChange]
	ActionType string `json:"actionType,omitempty"`

	// The appointment
	// Read Only: true
	Appointment *CoachingAppointmentReference `json:"appointment,omitempty"`

	// The start time of the appointment relating to this notification. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Read Only: true
	// Format: date-time
	DateStart strfmt.DateTime `json:"dateStart,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The duration of the appointment on this notification
	// Read Only: true
	LengthInMinutes int32 `json:"lengthInMinutes,omitempty"`

	// Indicates if notification is read or unread
	MarkedAsRead bool `json:"markedAsRead"`

	// The name of the appointment for this notification.
	// Read Only: true
	Name string `json:"name,omitempty"`

	// The relationship of this user to this notification's appointment
	// Read Only: true
	// Enum: [Attendee Creator Facilitator]
	Relationship string `json:"relationship,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The status of the appointment for this notification
	// Read Only: true
	// Enum: [Scheduled InProgress Completed InvalidSchedule]
	Status string `json:"status,omitempty"`

	// The user of this notification
	// Read Only: true
	User *UserReference `json:"user,omitempty"`
}

// Validate validates this coaching notification
func (m *CoachingNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppointment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationship(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var coachingNotificationTypeActionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Create","Update","Delete","StatusChange"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		coachingNotificationTypeActionTypePropEnum = append(coachingNotificationTypeActionTypePropEnum, v)
	}
}

const (

	// CoachingNotificationActionTypeCreate captures enum value "Create"
	CoachingNotificationActionTypeCreate string = "Create"

	// CoachingNotificationActionTypeUpdate captures enum value "Update"
	CoachingNotificationActionTypeUpdate string = "Update"

	// CoachingNotificationActionTypeDelete captures enum value "Delete"
	CoachingNotificationActionTypeDelete string = "Delete"

	// CoachingNotificationActionTypeStatusChange captures enum value "StatusChange"
	CoachingNotificationActionTypeStatusChange string = "StatusChange"
)

// prop value enum
func (m *CoachingNotification) validateActionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, coachingNotificationTypeActionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CoachingNotification) validateActionType(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionTypeEnum("actionType", "body", m.ActionType); err != nil {
		return err
	}

	return nil
}

func (m *CoachingNotification) validateAppointment(formats strfmt.Registry) error {

	if swag.IsZero(m.Appointment) { // not required
		return nil
	}

	if m.Appointment != nil {
		if err := m.Appointment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointment")
			}
			return err
		}
	}

	return nil
}

func (m *CoachingNotification) validateDateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.DateStart) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStart", "body", "date-time", m.DateStart.String(), formats); err != nil {
		return err
	}

	return nil
}

var coachingNotificationTypeRelationshipPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Attendee","Creator","Facilitator"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		coachingNotificationTypeRelationshipPropEnum = append(coachingNotificationTypeRelationshipPropEnum, v)
	}
}

const (

	// CoachingNotificationRelationshipAttendee captures enum value "Attendee"
	CoachingNotificationRelationshipAttendee string = "Attendee"

	// CoachingNotificationRelationshipCreator captures enum value "Creator"
	CoachingNotificationRelationshipCreator string = "Creator"

	// CoachingNotificationRelationshipFacilitator captures enum value "Facilitator"
	CoachingNotificationRelationshipFacilitator string = "Facilitator"
)

// prop value enum
func (m *CoachingNotification) validateRelationshipEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, coachingNotificationTypeRelationshipPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CoachingNotification) validateRelationship(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationship) { // not required
		return nil
	}

	// value enum
	if err := m.validateRelationshipEnum("relationship", "body", m.Relationship); err != nil {
		return err
	}

	return nil
}

func (m *CoachingNotification) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var coachingNotificationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Scheduled","InProgress","Completed","InvalidSchedule"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		coachingNotificationTypeStatusPropEnum = append(coachingNotificationTypeStatusPropEnum, v)
	}
}

const (

	// CoachingNotificationStatusScheduled captures enum value "Scheduled"
	CoachingNotificationStatusScheduled string = "Scheduled"

	// CoachingNotificationStatusInProgress captures enum value "InProgress"
	CoachingNotificationStatusInProgress string = "InProgress"

	// CoachingNotificationStatusCompleted captures enum value "Completed"
	CoachingNotificationStatusCompleted string = "Completed"

	// CoachingNotificationStatusInvalidSchedule captures enum value "InvalidSchedule"
	CoachingNotificationStatusInvalidSchedule string = "InvalidSchedule"
)

// prop value enum
func (m *CoachingNotification) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, coachingNotificationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CoachingNotification) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *CoachingNotification) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CoachingNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoachingNotification) UnmarshalBinary(b []byte) error {
	var res CoachingNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

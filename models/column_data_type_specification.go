// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ColumnDataTypeSpecification column data type specification
//
// swagger:model ColumnDataTypeSpecification
type ColumnDataTypeSpecification struct {

	// The data type of the column selected for dynamic queueing (TEXT, NUMERIC or TIMESTAMP)
	// Enum: [NUMERIC TEXT TIMESTAMP]
	ColumnDataType string `json:"columnDataType,omitempty"`

	// The column name of a column selected for dynamic queueing
	ColumnName string `json:"columnName,omitempty"`

	// The maximum length of the numeric column selected for dynamic queueing
	Max int32 `json:"max,omitempty"`

	// The maximum length of the text column selected for dynamic queueing
	MaxLength int32 `json:"maxLength,omitempty"`

	// The minimum length of the numeric column selected for dynamic queueing
	Min int32 `json:"min,omitempty"`
}

// Validate validates this column data type specification
func (m *ColumnDataTypeSpecification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumnDataType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var columnDataTypeSpecificationTypeColumnDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NUMERIC","TEXT","TIMESTAMP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		columnDataTypeSpecificationTypeColumnDataTypePropEnum = append(columnDataTypeSpecificationTypeColumnDataTypePropEnum, v)
	}
}

const (

	// ColumnDataTypeSpecificationColumnDataTypeNUMERIC captures enum value "NUMERIC"
	ColumnDataTypeSpecificationColumnDataTypeNUMERIC string = "NUMERIC"

	// ColumnDataTypeSpecificationColumnDataTypeTEXT captures enum value "TEXT"
	ColumnDataTypeSpecificationColumnDataTypeTEXT string = "TEXT"

	// ColumnDataTypeSpecificationColumnDataTypeTIMESTAMP captures enum value "TIMESTAMP"
	ColumnDataTypeSpecificationColumnDataTypeTIMESTAMP string = "TIMESTAMP"
)

// prop value enum
func (m *ColumnDataTypeSpecification) validateColumnDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, columnDataTypeSpecificationTypeColumnDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ColumnDataTypeSpecification) validateColumnDataType(formats strfmt.Registry) error {
	if swag.IsZero(m.ColumnDataType) { // not required
		return nil
	}

	// value enum
	if err := m.validateColumnDataTypeEnum("columnDataType", "body", m.ColumnDataType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this column data type specification based on context it is used
func (m *ColumnDataTypeSpecification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ColumnDataTypeSpecification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ColumnDataTypeSpecification) UnmarshalBinary(b []byte) error {
	var res ColumnDataTypeSpecification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

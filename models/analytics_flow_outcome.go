// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalyticsFlowOutcome analytics flow outcome
//
// swagger:model AnalyticsFlowOutcome
type AnalyticsFlowOutcome struct {

	// Combination of unique flow outcome identifier and its value separated by colon
	FlowOutcome string `json:"flowOutcome,omitempty"`

	// The outcome ending timestamp in ISO 8601 format. This may be null if the outcome did not succeed.
	// Format: date-time
	FlowOutcomeEndTimestamp strfmt.DateTime `json:"flowOutcomeEndTimestamp,omitempty"`

	// Unique identifier of a flow outcome
	FlowOutcomeID string `json:"flowOutcomeId,omitempty"`

	// The outcome starting timestamp in ISO 8601 format
	// Format: date-time
	FlowOutcomeStartTimestamp strfmt.DateTime `json:"flowOutcomeStartTimestamp,omitempty"`

	// Flow outcome value, e.g. SUCCESS
	FlowOutcomeValue string `json:"flowOutcomeValue,omitempty"`
}

// Validate validates this analytics flow outcome
func (m *AnalyticsFlowOutcome) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlowOutcomeEndTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlowOutcomeStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyticsFlowOutcome) validateFlowOutcomeEndTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowOutcomeEndTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("flowOutcomeEndTimestamp", "body", "date-time", m.FlowOutcomeEndTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnalyticsFlowOutcome) validateFlowOutcomeStartTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowOutcomeStartTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("flowOutcomeStartTimestamp", "body", "date-time", m.FlowOutcomeStartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this analytics flow outcome based on context it is used
func (m *AnalyticsFlowOutcome) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AnalyticsFlowOutcome) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalyticsFlowOutcome) UnmarshalBinary(b []byte) error {
	var res AnalyticsFlowOutcome
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

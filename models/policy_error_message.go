// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyErrorMessage policy error message
//
// swagger:model PolicyErrorMessage
type PolicyErrorMessage struct {

	// correlation Id
	CorrelationID string `json:"correlationId,omitempty"`

	// error code
	ErrorCode string `json:"errorCode,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	InsertDate strfmt.DateTime `json:"insertDate,omitempty"`

	// status code
	StatusCode int32 `json:"statusCode,omitempty"`

	// user message
	UserMessage interface{} `json:"userMessage,omitempty"`

	// user params
	UserParams []*UserParam `json:"userParams"`

	// user params message
	UserParamsMessage string `json:"userParamsMessage,omitempty"`
}

// Validate validates this policy error message
func (m *PolicyErrorMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInsertDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyErrorMessage) validateInsertDate(formats strfmt.Registry) error {
	if swag.IsZero(m.InsertDate) { // not required
		return nil
	}

	if err := validate.FormatOf("insertDate", "body", "date-time", m.InsertDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PolicyErrorMessage) validateUserParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UserParams) { // not required
		return nil
	}

	for i := 0; i < len(m.UserParams); i++ {
		if swag.IsZero(m.UserParams[i]) { // not required
			continue
		}

		if m.UserParams[i] != nil {
			if err := m.UserParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this policy error message based on the context it is used
func (m *PolicyErrorMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyErrorMessage) contextValidateUserParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserParams); i++ {

		if m.UserParams[i] != nil {
			if err := m.UserParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyErrorMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyErrorMessage) UnmarshalBinary(b []byte) error {
	var res PolicyErrorMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

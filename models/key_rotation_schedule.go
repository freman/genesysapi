// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KeyRotationSchedule key rotation schedule
//
// swagger:model KeyRotationSchedule
type KeyRotationSchedule struct {

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Value to set schedule to
	// Required: true
	// Enum: [DISABLED DAILY WEEKLY MONTHLY YEARLY]
	Period *string `json:"period"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this key rotation schedule
func (m *KeyRotationSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var keyRotationScheduleTypePeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DISABLED","DAILY","WEEKLY","MONTHLY","YEARLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		keyRotationScheduleTypePeriodPropEnum = append(keyRotationScheduleTypePeriodPropEnum, v)
	}
}

const (

	// KeyRotationSchedulePeriodDISABLED captures enum value "DISABLED"
	KeyRotationSchedulePeriodDISABLED string = "DISABLED"

	// KeyRotationSchedulePeriodDAILY captures enum value "DAILY"
	KeyRotationSchedulePeriodDAILY string = "DAILY"

	// KeyRotationSchedulePeriodWEEKLY captures enum value "WEEKLY"
	KeyRotationSchedulePeriodWEEKLY string = "WEEKLY"

	// KeyRotationSchedulePeriodMONTHLY captures enum value "MONTHLY"
	KeyRotationSchedulePeriodMONTHLY string = "MONTHLY"

	// KeyRotationSchedulePeriodYEARLY captures enum value "YEARLY"
	KeyRotationSchedulePeriodYEARLY string = "YEARLY"
)

// prop value enum
func (m *KeyRotationSchedule) validatePeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, keyRotationScheduleTypePeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KeyRotationSchedule) validatePeriod(formats strfmt.Registry) error {

	if err := validate.Required("period", "body", m.Period); err != nil {
		return err
	}

	// value enum
	if err := m.validatePeriodEnum("period", "body", *m.Period); err != nil {
		return err
	}

	return nil
}

func (m *KeyRotationSchedule) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KeyRotationSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeyRotationSchedule) UnmarshalBinary(b []byte) error {
	var res KeyRotationSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

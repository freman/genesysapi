// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserProfile user profile
//
// swagger:model UserProfile
type UserProfile struct {

	// Datetime of the last modification. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// User information expansions
	// Read Only: true
	Expands *UserExpands `json:"expands,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The state of the user resource
	// Enum: [active inactive deleted]
	State string `json:"state,omitempty"`

	// The version of the group resource
	// Required: true
	Version *int64 `json:"version"`
}

// Validate validates this user profile
func (m *UserProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserProfile) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserProfile) validateExpands(formats strfmt.Registry) error {
	if swag.IsZero(m.Expands) { // not required
		return nil
	}

	if m.Expands != nil {
		if err := m.Expands.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expands")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expands")
			}
			return err
		}
	}

	return nil
}

func (m *UserProfile) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var userProfileTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userProfileTypeStatePropEnum = append(userProfileTypeStatePropEnum, v)
	}
}

const (

	// UserProfileStateActive captures enum value "active"
	UserProfileStateActive string = "active"

	// UserProfileStateInactive captures enum value "inactive"
	UserProfileStateInactive string = "inactive"

	// UserProfileStateDeleted captures enum value "deleted"
	UserProfileStateDeleted string = "deleted"
)

// prop value enum
func (m *UserProfile) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userProfileTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserProfile) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *UserProfile) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user profile based on the context it is used
func (m *UserProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateModified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpands(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserProfile) contextValidateDateModified(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateModified", "body", strfmt.DateTime(m.DateModified)); err != nil {
		return err
	}

	return nil
}

func (m *UserProfile) contextValidateExpands(ctx context.Context, formats strfmt.Registry) error {

	if m.Expands != nil {
		if err := m.Expands.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expands")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expands")
			}
			return err
		}
	}

	return nil
}

func (m *UserProfile) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *UserProfile) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserProfile) UnmarshalBinary(b []byte) error {
	var res UserProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Browser browser
//
// swagger:model Browser
type Browser struct {

	// Browser family (e.g. Chrome, Safari, Firefox).
	// Required: true
	Family *string `json:"family"`

	// Whether Flash is installed.
	FeaturesFlash bool `json:"featuresFlash"`

	// Whether Java is installed.
	FeaturesJava bool `json:"featuresJava"`

	// Whether the browser recognizes PDFs.
	FeaturesPdf bool `json:"featuresPdf"`

	// Whether WebRTC is supported.
	FeaturesWebrtc bool `json:"featuresWebrtc"`

	// Fingerprint generated by looking at the individual browser features.
	Fingerprint string `json:"fingerprint,omitempty"`

	// Flag that is true for mobile devices.
	IsMobile bool `json:"isMobile"`

	// Language the browser is set to. Must conform to BCP 47.
	Lang string `json:"lang,omitempty"`

	// Browser version (e.g. 68.0.3440.84).
	// Required: true
	Version *string `json:"version"`

	// Browser's viewport height.
	ViewHeight int32 `json:"viewHeight,omitempty"`

	// Browser's viewport width.
	ViewWidth int32 `json:"viewWidth,omitempty"`
}

// Validate validates this browser
func (m *Browser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFamily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Browser) validateFamily(formats strfmt.Registry) error {

	if err := validate.Required("family", "body", m.Family); err != nil {
		return err
	}

	return nil
}

func (m *Browser) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this browser based on context it is used
func (m *Browser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Browser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Browser) UnmarshalBinary(b []byte) error {
	var res Browser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ErrorDetails error details
//
// swagger:model ErrorDetails
type ErrorDetails struct {

	// code
	Code string `json:"code,omitempty"`

	// context Id
	ContextID string `json:"contextId,omitempty"`

	// details
	// Format: uri
	Details strfmt.URI `json:"details,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// message params
	MessageParams map[string]string `json:"messageParams,omitempty"`

	// message with params
	MessageWithParams string `json:"messageWithParams,omitempty"`

	// nested
	Nested *ErrorDetails `json:"nested,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`
}

// Validate validates this error details
func (m *ErrorDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNested(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorDetails) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	if err := validate.FormatOf("details", "body", "uri", m.Details.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ErrorDetails) validateNested(formats strfmt.Registry) error {

	if swag.IsZero(m.Nested) { // not required
		return nil
	}

	if m.Nested != nil {
		if err := m.Nested.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nested")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorDetails) UnmarshalBinary(b []byte) error {
	var res ErrorDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

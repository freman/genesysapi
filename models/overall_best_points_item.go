// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OverallBestPointsItem overall best points item
//
// swagger:model OverallBestPointsItem
type OverallBestPointsItem struct {

	// The count of the user IDs in the list
	// Read Only: true
	Count int32 `json:"count,omitempty"`

	// End workday of the best points aggregation interval. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Read Only: true
	// Format: date
	DateEndWorkday strfmt.Date `json:"dateEndWorkday,omitempty"`

	// Start workday of the best points aggregation interval. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Read Only: true
	// Format: date
	DateStartWorkday strfmt.Date `json:"dateStartWorkday,omitempty"`

	// Best points aggregation interval granularity
	// Read Only: true
	// Enum: [Daily Weekly Monthly]
	GranularityType string `json:"granularityType,omitempty"`

	// Gamification points
	// Read Only: true
	Points int32 `json:"points,omitempty"`

	// List of associated users with the equal points.
	// Read Only: true
	Users []*UserReference `json:"users"`
}

// Validate validates this overall best points item
func (m *OverallBestPointsItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateEndWorkday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStartWorkday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGranularityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OverallBestPointsItem) validateDateEndWorkday(formats strfmt.Registry) error {
	if swag.IsZero(m.DateEndWorkday) { // not required
		return nil
	}

	if err := validate.FormatOf("dateEndWorkday", "body", "date", m.DateEndWorkday.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OverallBestPointsItem) validateDateStartWorkday(formats strfmt.Registry) error {
	if swag.IsZero(m.DateStartWorkday) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStartWorkday", "body", "date", m.DateStartWorkday.String(), formats); err != nil {
		return err
	}

	return nil
}

var overallBestPointsItemTypeGranularityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Daily","Weekly","Monthly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		overallBestPointsItemTypeGranularityTypePropEnum = append(overallBestPointsItemTypeGranularityTypePropEnum, v)
	}
}

const (

	// OverallBestPointsItemGranularityTypeDaily captures enum value "Daily"
	OverallBestPointsItemGranularityTypeDaily string = "Daily"

	// OverallBestPointsItemGranularityTypeWeekly captures enum value "Weekly"
	OverallBestPointsItemGranularityTypeWeekly string = "Weekly"

	// OverallBestPointsItemGranularityTypeMonthly captures enum value "Monthly"
	OverallBestPointsItemGranularityTypeMonthly string = "Monthly"
)

// prop value enum
func (m *OverallBestPointsItem) validateGranularityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, overallBestPointsItemTypeGranularityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OverallBestPointsItem) validateGranularityType(formats strfmt.Registry) error {
	if swag.IsZero(m.GranularityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateGranularityTypeEnum("granularityType", "body", m.GranularityType); err != nil {
		return err
	}

	return nil
}

func (m *OverallBestPointsItem) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this overall best points item based on the context it is used
func (m *OverallBestPointsItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateEndWorkday(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateStartWorkday(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGranularityType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OverallBestPointsItem) contextValidateCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "count", "body", int32(m.Count)); err != nil {
		return err
	}

	return nil
}

func (m *OverallBestPointsItem) contextValidateDateEndWorkday(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateEndWorkday", "body", strfmt.Date(m.DateEndWorkday)); err != nil {
		return err
	}

	return nil
}

func (m *OverallBestPointsItem) contextValidateDateStartWorkday(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateStartWorkday", "body", strfmt.Date(m.DateStartWorkday)); err != nil {
		return err
	}

	return nil
}

func (m *OverallBestPointsItem) contextValidateGranularityType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "granularityType", "body", string(m.GranularityType)); err != nil {
		return err
	}

	return nil
}

func (m *OverallBestPointsItem) contextValidatePoints(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "points", "body", int32(m.Points)); err != nil {
		return err
	}

	return nil
}

func (m *OverallBestPointsItem) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "users", "body", []*UserReference(m.Users)); err != nil {
		return err
	}

	for i := 0; i < len(m.Users); i++ {

		if m.Users[i] != nil {
			if err := m.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OverallBestPointsItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OverallBestPointsItem) UnmarshalBinary(b []byte) error {
	var res OverallBestPointsItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

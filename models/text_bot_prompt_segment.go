// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TextBotPromptSegment Data for a single bot flow prompt segment.
//
// swagger:model TextBotPromptSegment
type TextBotPromptSegment struct {

	// Details to display Rich Media content. This is only populated when the segment 'type' is 'Rich Media'.
	Content []*MessageContent `json:"content"`

	// Additional details describing the segmentâ€™s contents, which the client should honour where possible.
	Format *Format `json:"format,omitempty"`

	// The text of this prompt segment.
	// Required: true
	Text *string `json:"text"`

	// The segment type which describes any semantics about the 'text' and also indicates which other field might include additional relevant info.
	// Required: true
	// Enum: [Text RichMedia]
	Type *string `json:"type"`
}

// Validate validates this text bot prompt segment
func (m *TextBotPromptSegment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TextBotPromptSegment) validateContent(formats strfmt.Registry) error {
	if swag.IsZero(m.Content) { // not required
		return nil
	}

	for i := 0; i < len(m.Content); i++ {
		if swag.IsZero(m.Content[i]) { // not required
			continue
		}

		if m.Content[i] != nil {
			if err := m.Content[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("content" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TextBotPromptSegment) validateFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.Format) { // not required
		return nil
	}

	if m.Format != nil {
		if err := m.Format.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("format")
			}
			return err
		}
	}

	return nil
}

func (m *TextBotPromptSegment) validateText(formats strfmt.Registry) error {

	if err := validate.Required("text", "body", m.Text); err != nil {
		return err
	}

	return nil
}

var textBotPromptSegmentTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Text","RichMedia"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		textBotPromptSegmentTypeTypePropEnum = append(textBotPromptSegmentTypeTypePropEnum, v)
	}
}

const (

	// TextBotPromptSegmentTypeText captures enum value "Text"
	TextBotPromptSegmentTypeText string = "Text"

	// TextBotPromptSegmentTypeRichMedia captures enum value "RichMedia"
	TextBotPromptSegmentTypeRichMedia string = "RichMedia"
)

// prop value enum
func (m *TextBotPromptSegment) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, textBotPromptSegmentTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TextBotPromptSegment) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this text bot prompt segment based on the context it is used
func (m *TextBotPromptSegment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TextBotPromptSegment) contextValidateContent(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Content); i++ {

		if m.Content[i] != nil {
			if err := m.Content[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("content" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TextBotPromptSegment) contextValidateFormat(ctx context.Context, formats strfmt.Registry) error {

	if m.Format != nil {
		if err := m.Format.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("format")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TextBotPromptSegment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TextBotPromptSegment) UnmarshalBinary(b []byte) error {
	var res TextBotPromptSegment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

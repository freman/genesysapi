// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LastAttemptByColumnConditionSettings last attempt by column condition settings
//
// swagger:model LastAttemptByColumnConditionSettings
type LastAttemptByColumnConditionSettings struct {

	// The name of the contact column to evaluate for Email.
	EmailColumnName string `json:"emailColumnName,omitempty"`

	// The operator to use when comparing values.
	// Required: true
	// Enum: [Before After]
	Operator *string `json:"operator"`

	// The name of the contact column to evaluate for SMS.
	SmsColumnName string `json:"smsColumnName,omitempty"`

	// The period value to compare against the contact's data.
	// Example: P1DT1H1M
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this last attempt by column condition settings
func (m *LastAttemptByColumnConditionSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lastAttemptByColumnConditionSettingsTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Before","After"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lastAttemptByColumnConditionSettingsTypeOperatorPropEnum = append(lastAttemptByColumnConditionSettingsTypeOperatorPropEnum, v)
	}
}

const (

	// LastAttemptByColumnConditionSettingsOperatorBefore captures enum value "Before"
	LastAttemptByColumnConditionSettingsOperatorBefore string = "Before"

	// LastAttemptByColumnConditionSettingsOperatorAfter captures enum value "After"
	LastAttemptByColumnConditionSettingsOperatorAfter string = "After"
)

// prop value enum
func (m *LastAttemptByColumnConditionSettings) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lastAttemptByColumnConditionSettingsTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LastAttemptByColumnConditionSettings) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *LastAttemptByColumnConditionSettings) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this last attempt by column condition settings based on context it is used
func (m *LastAttemptByColumnConditionSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LastAttemptByColumnConditionSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LastAttemptByColumnConditionSettings) UnmarshalBinary(b []byte) error {
	var res LastAttemptByColumnConditionSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

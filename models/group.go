// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Group group
//
// swagger:model Group
type Group struct {

	// addresses
	Addresses []*GroupContact `json:"addresses"`

	// Last modified date/time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// images
	Images []*UserImage `json:"images"`

	// Number of members.
	// Read Only: true
	MemberCount int64 `json:"memberCount,omitempty"`

	// The group name.
	// Required: true
	Name *string `json:"name"`

	// Owners of the group
	Owners []*User `json:"owners"`

	// Are membership rules visible to the person requesting to view the group
	// Required: true
	RulesVisible *bool `json:"rulesVisible"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Active, inactive, or deleted state.
	// Read Only: true
	// Enum: [active inactive deleted]
	State string `json:"state,omitempty"`

	// Type of group.
	// Required: true
	// Enum: [official social]
	Type *string `json:"type"`

	// Current version for this resource.
	// Read Only: true
	Version int32 `json:"version,omitempty"`

	// Who can view this group
	// Required: true
	// Enum: [public owners members]
	Visibility *string `json:"visibility"`
}

// Validate validates this group
func (m *Group) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRulesVisible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Group) validateAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.Addresses) { // not required
		return nil
	}

	for i := 0; i < len(m.Addresses); i++ {
		if swag.IsZero(m.Addresses[i]) { // not required
			continue
		}

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Group) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Group) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	for i := 0; i < len(m.Images); i++ {
		if swag.IsZero(m.Images[i]) { // not required
			continue
		}

		if m.Images[i] != nil {
			if err := m.Images[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Group) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Group) validateOwners(formats strfmt.Registry) error {

	if swag.IsZero(m.Owners) { // not required
		return nil
	}

	for i := 0; i < len(m.Owners); i++ {
		if swag.IsZero(m.Owners[i]) { // not required
			continue
		}

		if m.Owners[i] != nil {
			if err := m.Owners[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("owners" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Group) validateRulesVisible(formats strfmt.Registry) error {

	if err := validate.Required("rulesVisible", "body", m.RulesVisible); err != nil {
		return err
	}

	return nil
}

func (m *Group) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var groupTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		groupTypeStatePropEnum = append(groupTypeStatePropEnum, v)
	}
}

const (

	// GroupStateActive captures enum value "active"
	GroupStateActive string = "active"

	// GroupStateInactive captures enum value "inactive"
	GroupStateInactive string = "inactive"

	// GroupStateDeleted captures enum value "deleted"
	GroupStateDeleted string = "deleted"
)

// prop value enum
func (m *Group) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, groupTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Group) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var groupTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["official","social"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		groupTypeTypePropEnum = append(groupTypeTypePropEnum, v)
	}
}

const (

	// GroupTypeOfficial captures enum value "official"
	GroupTypeOfficial string = "official"

	// GroupTypeSocial captures enum value "social"
	GroupTypeSocial string = "social"
)

// prop value enum
func (m *Group) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, groupTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Group) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var groupTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public","owners","members"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		groupTypeVisibilityPropEnum = append(groupTypeVisibilityPropEnum, v)
	}
}

const (

	// GroupVisibilityPublic captures enum value "public"
	GroupVisibilityPublic string = "public"

	// GroupVisibilityOwners captures enum value "owners"
	GroupVisibilityOwners string = "owners"

	// GroupVisibilityMembers captures enum value "members"
	GroupVisibilityMembers string = "members"
)

// prop value enum
func (m *Group) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, groupTypeVisibilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Group) validateVisibility(formats strfmt.Registry) error {

	if err := validate.Required("visibility", "body", m.Visibility); err != nil {
		return err
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", *m.Visibility); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Group) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Group) UnmarshalBinary(b []byte) error {
	var res Group
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PunctualityEvent punctuality event
//
// swagger:model PunctualityEvent
type PunctualityEvent struct {

	// The activity code
	// Read Only: true
	ActivityCode string `json:"activityCode,omitempty"`

	// The ID of the activity code associated with this activity
	// Read Only: true
	ActivityCodeID string `json:"activityCodeId,omitempty"`

	// The activity name
	// Read Only: true
	ActivityName string `json:"activityName,omitempty"`

	// bullseye
	Bullseye bool `json:"bullseye"`

	// The category for the activity
	// Read Only: true
	Category string `json:"category,omitempty"`

	// The scheduled activity start time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateScheduleStart strfmt.DateTime `json:"dateScheduleStart,omitempty"`

	// The time the user started the activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateStart strfmt.DateTime `json:"dateStart,omitempty"`

	// Difference between this activity and the last activity in seconds
	// Read Only: true
	Delta float64 `json:"delta,omitempty"`

	// The description of the activity
	// Read Only: true
	Description string `json:"description,omitempty"`

	// The length of the activity in minutes
	// Read Only: true
	LengthMinutes int32 `json:"lengthMinutes,omitempty"`

	// The points earned for this activity
	// Read Only: true
	Points int32 `json:"points,omitempty"`
}

// Validate validates this punctuality event
func (m *PunctualityEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateScheduleStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PunctualityEvent) validateDateScheduleStart(formats strfmt.Registry) error {
	if swag.IsZero(m.DateScheduleStart) { // not required
		return nil
	}

	if err := validate.FormatOf("dateScheduleStart", "body", "date-time", m.DateScheduleStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PunctualityEvent) validateDateStart(formats strfmt.Registry) error {
	if swag.IsZero(m.DateStart) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStart", "body", "date-time", m.DateStart.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this punctuality event based on the context it is used
func (m *PunctualityEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActivityCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateActivityCodeID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateActivityName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateScheduleStart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateStart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDelta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLengthMinutes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PunctualityEvent) contextValidateActivityCode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "activityCode", "body", string(m.ActivityCode)); err != nil {
		return err
	}

	return nil
}

func (m *PunctualityEvent) contextValidateActivityCodeID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "activityCodeId", "body", string(m.ActivityCodeID)); err != nil {
		return err
	}

	return nil
}

func (m *PunctualityEvent) contextValidateActivityName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "activityName", "body", string(m.ActivityName)); err != nil {
		return err
	}

	return nil
}

func (m *PunctualityEvent) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "category", "body", string(m.Category)); err != nil {
		return err
	}

	return nil
}

func (m *PunctualityEvent) contextValidateDateScheduleStart(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateScheduleStart", "body", strfmt.DateTime(m.DateScheduleStart)); err != nil {
		return err
	}

	return nil
}

func (m *PunctualityEvent) contextValidateDateStart(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateStart", "body", strfmt.DateTime(m.DateStart)); err != nil {
		return err
	}

	return nil
}

func (m *PunctualityEvent) contextValidateDelta(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "delta", "body", float64(m.Delta)); err != nil {
		return err
	}

	return nil
}

func (m *PunctualityEvent) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *PunctualityEvent) contextValidateLengthMinutes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lengthMinutes", "body", int32(m.LengthMinutes)); err != nil {
		return err
	}

	return nil
}

func (m *PunctualityEvent) contextValidatePoints(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "points", "body", int32(m.Points)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PunctualityEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PunctualityEvent) UnmarshalBinary(b []byte) error {
	var res PunctualityEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

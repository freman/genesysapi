// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Signature signature
//
// swagger:model Signature
type Signature struct {

	// A toggle that defines if a signature is always included or only set on the first email in an email chain.
	AlwaysIncluded bool `json:"alwaysIncluded"`

	// The identifier referring to an email signature canned response.
	CannedResponseID string `json:"cannedResponseId,omitempty"`

	// A toggle to enable the signature on email send.
	Enabled bool `json:"enabled"`

	// The configuration to indicate when the signature of a conversation has to be included
	// Enum: [Draft Send SendOnce]
	InclusionType string `json:"inclusionType,omitempty"`
}

// Validate validates this signature
func (m *Signature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInclusionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var signatureTypeInclusionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Draft","Send","SendOnce"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		signatureTypeInclusionTypePropEnum = append(signatureTypeInclusionTypePropEnum, v)
	}
}

const (

	// SignatureInclusionTypeDraft captures enum value "Draft"
	SignatureInclusionTypeDraft string = "Draft"

	// SignatureInclusionTypeSend captures enum value "Send"
	SignatureInclusionTypeSend string = "Send"

	// SignatureInclusionTypeSendOnce captures enum value "SendOnce"
	SignatureInclusionTypeSendOnce string = "SendOnce"
)

// prop value enum
func (m *Signature) validateInclusionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, signatureTypeInclusionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Signature) validateInclusionType(formats strfmt.Registry) error {
	if swag.IsZero(m.InclusionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateInclusionTypeEnum("inclusionType", "body", m.InclusionType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this signature based on context it is used
func (m *Signature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Signature) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Signature) UnmarshalBinary(b []byte) error {
	var res Signature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

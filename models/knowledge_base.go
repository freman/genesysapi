// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnowledgeBase knowledge base
//
// swagger:model KnowledgeBase
type KnowledgeBase struct {

	// The count representing the number of documents of type Article in the KnowledgeBase
	// Read Only: true
	ArticleCount int32 `json:"articleCount,omitempty"`

	// Core language for knowledge base in which initial content must be created, language codes [en-US, en-UK, en-AU, de-DE] are supported currently, however the new DX knowledge will support all these language codes
	// Example: en-US
	// Required: true
	// Enum: [en-US en-UK en-AU en-CA en-HK en-IN en-IE en-NZ en-PH en-SG en-ZA de-DE de-AT de-CH es-AR es-CO es-MX es-US es-ES fr-FR fr-BE fr-CA fr-CH pt-BR pt-PT nl-NL nl-BE it-IT]
	CoreLanguage *string `json:"coreLanguage"`

	// Knowledge base creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The date representing when the last document is modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateDocumentLastModified strfmt.DateTime `json:"dateDocumentLastModified,omitempty"`

	// Knowledge base last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// Knowledge base description
	Description string `json:"description,omitempty"`

	// The count representing the number of documents of type FAQ in the KnowledgeBase
	// Read Only: true
	FaqCount int32 `json:"faqCount,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Flag that indicates the knowledge base is published
	// Read Only: true
	Published *bool `json:"published"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this knowledge base
func (m *KnowledgeBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoreLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateDocumentLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var knowledgeBaseTypeCoreLanguagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["en-US","en-UK","en-AU","en-CA","en-HK","en-IN","en-IE","en-NZ","en-PH","en-SG","en-ZA","de-DE","de-AT","de-CH","es-AR","es-CO","es-MX","es-US","es-ES","fr-FR","fr-BE","fr-CA","fr-CH","pt-BR","pt-PT","nl-NL","nl-BE","it-IT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		knowledgeBaseTypeCoreLanguagePropEnum = append(knowledgeBaseTypeCoreLanguagePropEnum, v)
	}
}

const (

	// KnowledgeBaseCoreLanguageEnDashUS captures enum value "en-US"
	KnowledgeBaseCoreLanguageEnDashUS string = "en-US"

	// KnowledgeBaseCoreLanguageEnDashUK captures enum value "en-UK"
	KnowledgeBaseCoreLanguageEnDashUK string = "en-UK"

	// KnowledgeBaseCoreLanguageEnDashAU captures enum value "en-AU"
	KnowledgeBaseCoreLanguageEnDashAU string = "en-AU"

	// KnowledgeBaseCoreLanguageEnDashCA captures enum value "en-CA"
	KnowledgeBaseCoreLanguageEnDashCA string = "en-CA"

	// KnowledgeBaseCoreLanguageEnDashHK captures enum value "en-HK"
	KnowledgeBaseCoreLanguageEnDashHK string = "en-HK"

	// KnowledgeBaseCoreLanguageEnDashIN captures enum value "en-IN"
	KnowledgeBaseCoreLanguageEnDashIN string = "en-IN"

	// KnowledgeBaseCoreLanguageEnDashIE captures enum value "en-IE"
	KnowledgeBaseCoreLanguageEnDashIE string = "en-IE"

	// KnowledgeBaseCoreLanguageEnDashNZ captures enum value "en-NZ"
	KnowledgeBaseCoreLanguageEnDashNZ string = "en-NZ"

	// KnowledgeBaseCoreLanguageEnDashPH captures enum value "en-PH"
	KnowledgeBaseCoreLanguageEnDashPH string = "en-PH"

	// KnowledgeBaseCoreLanguageEnDashSG captures enum value "en-SG"
	KnowledgeBaseCoreLanguageEnDashSG string = "en-SG"

	// KnowledgeBaseCoreLanguageEnDashZA captures enum value "en-ZA"
	KnowledgeBaseCoreLanguageEnDashZA string = "en-ZA"

	// KnowledgeBaseCoreLanguageDeDashDE captures enum value "de-DE"
	KnowledgeBaseCoreLanguageDeDashDE string = "de-DE"

	// KnowledgeBaseCoreLanguageDeDashAT captures enum value "de-AT"
	KnowledgeBaseCoreLanguageDeDashAT string = "de-AT"

	// KnowledgeBaseCoreLanguageDeDashCH captures enum value "de-CH"
	KnowledgeBaseCoreLanguageDeDashCH string = "de-CH"

	// KnowledgeBaseCoreLanguageEsDashAR captures enum value "es-AR"
	KnowledgeBaseCoreLanguageEsDashAR string = "es-AR"

	// KnowledgeBaseCoreLanguageEsDashCO captures enum value "es-CO"
	KnowledgeBaseCoreLanguageEsDashCO string = "es-CO"

	// KnowledgeBaseCoreLanguageEsDashMX captures enum value "es-MX"
	KnowledgeBaseCoreLanguageEsDashMX string = "es-MX"

	// KnowledgeBaseCoreLanguageEsDashUS captures enum value "es-US"
	KnowledgeBaseCoreLanguageEsDashUS string = "es-US"

	// KnowledgeBaseCoreLanguageEsDashES captures enum value "es-ES"
	KnowledgeBaseCoreLanguageEsDashES string = "es-ES"

	// KnowledgeBaseCoreLanguageFrDashFR captures enum value "fr-FR"
	KnowledgeBaseCoreLanguageFrDashFR string = "fr-FR"

	// KnowledgeBaseCoreLanguageFrDashBE captures enum value "fr-BE"
	KnowledgeBaseCoreLanguageFrDashBE string = "fr-BE"

	// KnowledgeBaseCoreLanguageFrDashCA captures enum value "fr-CA"
	KnowledgeBaseCoreLanguageFrDashCA string = "fr-CA"

	// KnowledgeBaseCoreLanguageFrDashCH captures enum value "fr-CH"
	KnowledgeBaseCoreLanguageFrDashCH string = "fr-CH"

	// KnowledgeBaseCoreLanguagePtDashBR captures enum value "pt-BR"
	KnowledgeBaseCoreLanguagePtDashBR string = "pt-BR"

	// KnowledgeBaseCoreLanguagePtDashPT captures enum value "pt-PT"
	KnowledgeBaseCoreLanguagePtDashPT string = "pt-PT"

	// KnowledgeBaseCoreLanguageNlDashNL captures enum value "nl-NL"
	KnowledgeBaseCoreLanguageNlDashNL string = "nl-NL"

	// KnowledgeBaseCoreLanguageNlDashBE captures enum value "nl-BE"
	KnowledgeBaseCoreLanguageNlDashBE string = "nl-BE"

	// KnowledgeBaseCoreLanguageItDashIT captures enum value "it-IT"
	KnowledgeBaseCoreLanguageItDashIT string = "it-IT"
)

// prop value enum
func (m *KnowledgeBase) validateCoreLanguageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, knowledgeBaseTypeCoreLanguagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KnowledgeBase) validateCoreLanguage(formats strfmt.Registry) error {

	if err := validate.Required("coreLanguage", "body", m.CoreLanguage); err != nil {
		return err
	}

	// value enum
	if err := m.validateCoreLanguageEnum("coreLanguage", "body", *m.CoreLanguage); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeBase) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeBase) validateDateDocumentLastModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateDocumentLastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateDocumentLastModified", "body", "date-time", m.DateDocumentLastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeBase) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeBase) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this knowledge base based on the context it is used
func (m *KnowledgeBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArticleCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateDocumentLastModified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateModified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFaqCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublished(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeBase) contextValidateArticleCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "articleCount", "body", int32(m.ArticleCount)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeBase) contextValidateDateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateCreated", "body", strfmt.DateTime(m.DateCreated)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeBase) contextValidateDateDocumentLastModified(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateDocumentLastModified", "body", strfmt.DateTime(m.DateDocumentLastModified)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeBase) contextValidateDateModified(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateModified", "body", strfmt.DateTime(m.DateModified)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeBase) contextValidateFaqCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "faqCount", "body", int32(m.FaqCount)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeBase) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeBase) contextValidatePublished(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "published", "body", m.Published); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeBase) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KnowledgeBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnowledgeBase) UnmarshalBinary(b []byte) error {
	var res KnowledgeBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

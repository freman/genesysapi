// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ForecastSourceDayPointer Pointer to look up source data for a short term forecast
//
// swagger:model ForecastSourceDayPointer
type ForecastSourceDayPointer struct {

	// The key to look up the forecast source data for this source day
	DataKey string `json:"dataKey,omitempty"`

	// The date this source data represents, in yyyy-MM-dd format
	Date string `json:"date,omitempty"`

	// The forecast day of week for this source data
	// Enum: [Sunday Monday Tuesday Wednesday Thursday Friday Saturday EighthDay]
	DayOfWeek string `json:"dayOfWeek,omitempty"`

	// The name of the source file this data came from if it originated from a data import
	FileName string `json:"fileName,omitempty"`

	// The relative weight to apply to this source data item for weighted averages
	Weight int32 `json:"weight,omitempty"`
}

// Validate validates this forecast source day pointer
func (m *ForecastSourceDayPointer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDayOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var forecastSourceDayPointerTypeDayOfWeekPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","EighthDay"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		forecastSourceDayPointerTypeDayOfWeekPropEnum = append(forecastSourceDayPointerTypeDayOfWeekPropEnum, v)
	}
}

const (

	// ForecastSourceDayPointerDayOfWeekSunday captures enum value "Sunday"
	ForecastSourceDayPointerDayOfWeekSunday string = "Sunday"

	// ForecastSourceDayPointerDayOfWeekMonday captures enum value "Monday"
	ForecastSourceDayPointerDayOfWeekMonday string = "Monday"

	// ForecastSourceDayPointerDayOfWeekTuesday captures enum value "Tuesday"
	ForecastSourceDayPointerDayOfWeekTuesday string = "Tuesday"

	// ForecastSourceDayPointerDayOfWeekWednesday captures enum value "Wednesday"
	ForecastSourceDayPointerDayOfWeekWednesday string = "Wednesday"

	// ForecastSourceDayPointerDayOfWeekThursday captures enum value "Thursday"
	ForecastSourceDayPointerDayOfWeekThursday string = "Thursday"

	// ForecastSourceDayPointerDayOfWeekFriday captures enum value "Friday"
	ForecastSourceDayPointerDayOfWeekFriday string = "Friday"

	// ForecastSourceDayPointerDayOfWeekSaturday captures enum value "Saturday"
	ForecastSourceDayPointerDayOfWeekSaturday string = "Saturday"

	// ForecastSourceDayPointerDayOfWeekEighthDay captures enum value "EighthDay"
	ForecastSourceDayPointerDayOfWeekEighthDay string = "EighthDay"
)

// prop value enum
func (m *ForecastSourceDayPointer) validateDayOfWeekEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, forecastSourceDayPointerTypeDayOfWeekPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ForecastSourceDayPointer) validateDayOfWeek(formats strfmt.Registry) error {

	if swag.IsZero(m.DayOfWeek) { // not required
		return nil
	}

	// value enum
	if err := m.validateDayOfWeekEnum("dayOfWeek", "body", m.DayOfWeek); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ForecastSourceDayPointer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForecastSourceDayPointer) UnmarshalBinary(b []byte) error {
	var res ForecastSourceDayPointer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

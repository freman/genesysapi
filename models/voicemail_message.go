// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VoicemailMessage voicemail message
//
// swagger:model VoicemailMessage
type VoicemailMessage struct {

	// The voicemail message's audio recording duration in seconds
	// Read Only: true
	AudioRecordingDurationSeconds int32 `json:"audioRecordingDurationSeconds,omitempty"`

	// The voicemail message's audio recording size in bytes
	// Read Only: true
	AudioRecordingSizeBytes int64 `json:"audioRecordingSizeBytes,omitempty"`

	// The caller address
	// Read Only: true
	CallerAddress string `json:"callerAddress,omitempty"`

	// Optionally the name of the caller that left the voicemail message if the caller was a known user
	// Read Only: true
	CallerName string `json:"callerName,omitempty"`

	// Optionally the user that left the voicemail message if the caller was a known user
	// Read Only: true
	CallerUser *User `json:"callerUser,omitempty"`

	// The conversation that the voicemail message is associated with
	// Read Only: true
	Conversation *Conversation `json:"conversation,omitempty"`

	// Represents where this voicemail message was copied from
	// Read Only: true
	CopiedFrom *VoicemailCopyRecord `json:"copiedFrom,omitempty"`

	// Represents where this voicemail has been copied to
	// Read Only: true
	CopiedTo []*VoicemailCopyRecord `json:"copiedTo"`

	// The date the voicemail message was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// The retention policy for this voicemail when deleted is set to true
	DeleteRetentionPolicy *VoicemailRetentionPolicy `json:"deleteRetentionPolicy,omitempty"`

	// Whether the voicemail message has been marked as deleted
	Deleted bool `json:"deleted"`

	// The date the voicemail message deleted property was set to true. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DeletedDate strfmt.DateTime `json:"deletedDate,omitempty"`

	// The group that the voicemail message belongs to or null which means the voicemail message belongs to a user or queue
	// Read Only: true
	Group *Group `json:"group,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The date the voicemail message was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	ModifiedDate strfmt.DateTime `json:"modifiedDate,omitempty"`

	// An optional note
	Note string `json:"note,omitempty"`

	// The queue that the voicemail message belongs to or null which means the voicemail message belongs to a user or group
	// Read Only: true
	Queue *Queue `json:"queue,omitempty"`

	// Whether the voicemail message is marked as read
	Read bool `json:"read"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The user that the voicemail message belongs to or null which means the voicemail message belongs to a group or queue
	// Read Only: true
	User *User `json:"user,omitempty"`
}

// Validate validates this voicemail message
func (m *VoicemailMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallerUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCopiedFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCopiedTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteRetentionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VoicemailMessage) validateCallerUser(formats strfmt.Registry) error {
	if swag.IsZero(m.CallerUser) { // not required
		return nil
	}

	if m.CallerUser != nil {
		if err := m.CallerUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("callerUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("callerUser")
			}
			return err
		}
	}

	return nil
}

func (m *VoicemailMessage) validateConversation(formats strfmt.Registry) error {
	if swag.IsZero(m.Conversation) { // not required
		return nil
	}

	if m.Conversation != nil {
		if err := m.Conversation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conversation")
			}
			return err
		}
	}

	return nil
}

func (m *VoicemailMessage) validateCopiedFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.CopiedFrom) { // not required
		return nil
	}

	if m.CopiedFrom != nil {
		if err := m.CopiedFrom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("copiedFrom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("copiedFrom")
			}
			return err
		}
	}

	return nil
}

func (m *VoicemailMessage) validateCopiedTo(formats strfmt.Registry) error {
	if swag.IsZero(m.CopiedTo) { // not required
		return nil
	}

	for i := 0; i < len(m.CopiedTo); i++ {
		if swag.IsZero(m.CopiedTo[i]) { // not required
			continue
		}

		if m.CopiedTo[i] != nil {
			if err := m.CopiedTo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("copiedTo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("copiedTo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VoicemailMessage) validateCreatedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailMessage) validateDeleteRetentionPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteRetentionPolicy) { // not required
		return nil
	}

	if m.DeleteRetentionPolicy != nil {
		if err := m.DeleteRetentionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteRetentionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteRetentionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *VoicemailMessage) validateDeletedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("deletedDate", "body", "date-time", m.DeletedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailMessage) validateGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if m.Group != nil {
		if err := m.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (m *VoicemailMessage) validateModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedDate", "body", "date-time", m.ModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailMessage) validateQueue(formats strfmt.Registry) error {
	if swag.IsZero(m.Queue) { // not required
		return nil
	}

	if m.Queue != nil {
		if err := m.Queue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

func (m *VoicemailMessage) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailMessage) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this voicemail message based on the context it is used
func (m *VoicemailMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAudioRecordingDurationSeconds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAudioRecordingSizeBytes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCallerAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCallerName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCallerUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConversation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCopiedFrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCopiedTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteRetentionPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeletedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifiedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VoicemailMessage) contextValidateAudioRecordingDurationSeconds(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "audioRecordingDurationSeconds", "body", int32(m.AudioRecordingDurationSeconds)); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailMessage) contextValidateAudioRecordingSizeBytes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "audioRecordingSizeBytes", "body", int64(m.AudioRecordingSizeBytes)); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailMessage) contextValidateCallerAddress(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "callerAddress", "body", string(m.CallerAddress)); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailMessage) contextValidateCallerName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "callerName", "body", string(m.CallerName)); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailMessage) contextValidateCallerUser(ctx context.Context, formats strfmt.Registry) error {

	if m.CallerUser != nil {
		if err := m.CallerUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("callerUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("callerUser")
			}
			return err
		}
	}

	return nil
}

func (m *VoicemailMessage) contextValidateConversation(ctx context.Context, formats strfmt.Registry) error {

	if m.Conversation != nil {
		if err := m.Conversation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conversation")
			}
			return err
		}
	}

	return nil
}

func (m *VoicemailMessage) contextValidateCopiedFrom(ctx context.Context, formats strfmt.Registry) error {

	if m.CopiedFrom != nil {
		if err := m.CopiedFrom.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("copiedFrom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("copiedFrom")
			}
			return err
		}
	}

	return nil
}

func (m *VoicemailMessage) contextValidateCopiedTo(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "copiedTo", "body", []*VoicemailCopyRecord(m.CopiedTo)); err != nil {
		return err
	}

	for i := 0; i < len(m.CopiedTo); i++ {

		if m.CopiedTo[i] != nil {
			if err := m.CopiedTo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("copiedTo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("copiedTo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VoicemailMessage) contextValidateCreatedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdDate", "body", strfmt.DateTime(m.CreatedDate)); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailMessage) contextValidateDeleteRetentionPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.DeleteRetentionPolicy != nil {
		if err := m.DeleteRetentionPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteRetentionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteRetentionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *VoicemailMessage) contextValidateDeletedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deletedDate", "body", strfmt.DateTime(m.DeletedDate)); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailMessage) contextValidateGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.Group != nil {
		if err := m.Group.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (m *VoicemailMessage) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailMessage) contextValidateModifiedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "modifiedDate", "body", strfmt.DateTime(m.ModifiedDate)); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailMessage) contextValidateQueue(ctx context.Context, formats strfmt.Registry) error {

	if m.Queue != nil {
		if err := m.Queue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

func (m *VoicemailMessage) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *VoicemailMessage) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VoicemailMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VoicemailMessage) UnmarshalBinary(b []byte) error {
	var res VoicemailMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Phone phone
//
// swagger:model Phone
type Phone struct {

	// capabilities
	Capabilities *PhoneCapabilities `json:"capabilities,omitempty"`

	// The ID of the user that created the resource.
	// Read Only: true
	CreatedBy string `json:"createdBy,omitempty"`

	// The application that created the resource.
	// Read Only: true
	CreatedByApp string `json:"createdByApp,omitempty"`

	// The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The resource's description.
	Description string `json:"description,omitempty"`

	// The division to which this entity belongs.
	Division *Division `json:"division,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// line base settings
	LineBaseSettings *DomainEntityRef `json:"lineBaseSettings,omitempty"`

	// Lines
	// Required: true
	Lines []*Line `json:"lines"`

	// The ID of the user that last modified the resource.
	// Read Only: true
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// The application that last modified the resource.
	// Read Only: true
	ModifiedByApp string `json:"modifiedByApp,omitempty"`

	// The name of the entity.
	// Required: true
	Name *string `json:"name"`

	// Phone Base Settings
	// Required: true
	PhoneBaseSettings *PhoneBaseSettings `json:"phoneBaseSettings"`

	// phone meta base
	PhoneMetaBase *DomainEntityRef `json:"phoneMetaBase,omitempty"`

	// primary edge
	PrimaryEdge *Edge `json:"primaryEdge,omitempty"`

	// properties
	Properties map[string]interface{} `json:"properties,omitempty"`

	// secondary edge
	SecondaryEdge *Edge `json:"secondaryEdge,omitempty"`

	// The status of the phone and lines from the secondary Edge.
	SecondaryStatus *PhoneStatus `json:"secondaryStatus,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The site associated to the phone.
	// Required: true
	Site *DomainEntityRef `json:"site"`

	// Indicates if the resource is active, inactive, or deleted.
	// Read Only: true
	// Enum: [active inactive deleted]
	State string `json:"state,omitempty"`

	// The status of the phone and lines from the primary Edge.
	Status *PhoneStatus `json:"status,omitempty"`

	// User Agent Information for this phone. This includes model, firmware version, and manufacturer.
	// Read Only: true
	UserAgentInfo *UserAgentInfo `json:"userAgentInfo,omitempty"`

	// The current version of the resource.
	Version int32 `json:"version,omitempty"`

	// This is the user associated with a WebRTC type phone.  It is required for all WebRTC phones.
	WebRtcUser *DomainEntityRef `json:"webRtcUser,omitempty"`
}

// Validate validates this phone
func (m *Phone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineBaseSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneBaseSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneMetaBase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryEdge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryEdge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAgentInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebRtcUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Phone) validateCapabilities(formats strfmt.Registry) error {
	if swag.IsZero(m.Capabilities) { // not required
		return nil
	}

	if m.Capabilities != nil {
		if err := m.Capabilities.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capabilities")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capabilities")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Phone) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Phone) validateDivision(formats strfmt.Registry) error {
	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if m.Division != nil {
		if err := m.Division.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) validateLineBaseSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.LineBaseSettings) { // not required
		return nil
	}

	if m.LineBaseSettings != nil {
		if err := m.LineBaseSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lineBaseSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lineBaseSettings")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) validateLines(formats strfmt.Registry) error {

	if err := validate.Required("lines", "body", m.Lines); err != nil {
		return err
	}

	for i := 0; i < len(m.Lines); i++ {
		if swag.IsZero(m.Lines[i]) { // not required
			continue
		}

		if m.Lines[i] != nil {
			if err := m.Lines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Phone) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Phone) validatePhoneBaseSettings(formats strfmt.Registry) error {

	if err := validate.Required("phoneBaseSettings", "body", m.PhoneBaseSettings); err != nil {
		return err
	}

	if m.PhoneBaseSettings != nil {
		if err := m.PhoneBaseSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phoneBaseSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phoneBaseSettings")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) validatePhoneMetaBase(formats strfmt.Registry) error {
	if swag.IsZero(m.PhoneMetaBase) { // not required
		return nil
	}

	if m.PhoneMetaBase != nil {
		if err := m.PhoneMetaBase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phoneMetaBase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phoneMetaBase")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) validatePrimaryEdge(formats strfmt.Registry) error {
	if swag.IsZero(m.PrimaryEdge) { // not required
		return nil
	}

	if m.PrimaryEdge != nil {
		if err := m.PrimaryEdge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryEdge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primaryEdge")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) validateSecondaryEdge(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryEdge) { // not required
		return nil
	}

	if m.SecondaryEdge != nil {
		if err := m.SecondaryEdge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryEdge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryEdge")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) validateSecondaryStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryStatus) { // not required
		return nil
	}

	if m.SecondaryStatus != nil {
		if err := m.SecondaryStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryStatus")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Phone) validateSite(formats strfmt.Registry) error {

	if err := validate.Required("site", "body", m.Site); err != nil {
		return err
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

var phoneTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phoneTypeStatePropEnum = append(phoneTypeStatePropEnum, v)
	}
}

const (

	// PhoneStateActive captures enum value "active"
	PhoneStateActive string = "active"

	// PhoneStateInactive captures enum value "inactive"
	PhoneStateInactive string = "inactive"

	// PhoneStateDeleted captures enum value "deleted"
	PhoneStateDeleted string = "deleted"
)

// prop value enum
func (m *Phone) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, phoneTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Phone) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *Phone) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) validateUserAgentInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.UserAgentInfo) { // not required
		return nil
	}

	if m.UserAgentInfo != nil {
		if err := m.UserAgentInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userAgentInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userAgentInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) validateWebRtcUser(formats strfmt.Registry) error {
	if swag.IsZero(m.WebRtcUser) { // not required
		return nil
	}

	if m.WebRtcUser != nil {
		if err := m.WebRtcUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webRtcUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webRtcUser")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this phone based on the context it is used
func (m *Phone) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedByApp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateModified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDivision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLineBaseSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLines(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifiedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifiedByApp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhoneBaseSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhoneMetaBase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrimaryEdge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryEdge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserAgentInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebRtcUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Phone) contextValidateCapabilities(ctx context.Context, formats strfmt.Registry) error {

	if m.Capabilities != nil {
		if err := m.Capabilities.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capabilities")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capabilities")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdBy", "body", string(m.CreatedBy)); err != nil {
		return err
	}

	return nil
}

func (m *Phone) contextValidateCreatedByApp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdByApp", "body", string(m.CreatedByApp)); err != nil {
		return err
	}

	return nil
}

func (m *Phone) contextValidateDateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateCreated", "body", strfmt.DateTime(m.DateCreated)); err != nil {
		return err
	}

	return nil
}

func (m *Phone) contextValidateDateModified(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateModified", "body", strfmt.DateTime(m.DateModified)); err != nil {
		return err
	}

	return nil
}

func (m *Phone) contextValidateDivision(ctx context.Context, formats strfmt.Registry) error {

	if m.Division != nil {
		if err := m.Division.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Phone) contextValidateLineBaseSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.LineBaseSettings != nil {
		if err := m.LineBaseSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lineBaseSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lineBaseSettings")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) contextValidateLines(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Lines); i++ {

		if m.Lines[i] != nil {
			if err := m.Lines[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Phone) contextValidateModifiedBy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "modifiedBy", "body", string(m.ModifiedBy)); err != nil {
		return err
	}

	return nil
}

func (m *Phone) contextValidateModifiedByApp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "modifiedByApp", "body", string(m.ModifiedByApp)); err != nil {
		return err
	}

	return nil
}

func (m *Phone) contextValidatePhoneBaseSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.PhoneBaseSettings != nil {
		if err := m.PhoneBaseSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phoneBaseSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phoneBaseSettings")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) contextValidatePhoneMetaBase(ctx context.Context, formats strfmt.Registry) error {

	if m.PhoneMetaBase != nil {
		if err := m.PhoneMetaBase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phoneMetaBase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phoneMetaBase")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) contextValidatePrimaryEdge(ctx context.Context, formats strfmt.Registry) error {

	if m.PrimaryEdge != nil {
		if err := m.PrimaryEdge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryEdge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primaryEdge")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) contextValidateSecondaryEdge(ctx context.Context, formats strfmt.Registry) error {

	if m.SecondaryEdge != nil {
		if err := m.SecondaryEdge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryEdge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryEdge")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) contextValidateSecondaryStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.SecondaryStatus != nil {
		if err := m.SecondaryStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryStatus")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *Phone) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {
		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

func (m *Phone) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) contextValidateUserAgentInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.UserAgentInfo != nil {
		if err := m.UserAgentInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userAgentInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userAgentInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Phone) contextValidateWebRtcUser(ctx context.Context, formats strfmt.Registry) error {

	if m.WebRtcUser != nil {
		if err := m.WebRtcUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webRtcUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webRtcUser")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Phone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Phone) UnmarshalBinary(b []byte) error {
	var res Phone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Ring ring
//
// swagger:model Ring
type Ring struct {

	// The actions that will be performed just before moving conversations to the next bullseye ring.
	Actions *Actions `json:"actions,omitempty"`

	// The conditions that will trigger conversations to move to the next bullseye ring.
	ExpansionCriteria []*ExpansionCriterium `json:"expansionCriteria"`

	// The groups of agents associated with the ring, if any.  Ring membership will update to match group membership changes.
	// Unique: true
	MemberGroups []*MemberGroup `json:"memberGroups"`
}

// Validate validates this ring
func (m *Ring) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpansionCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Ring) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	if m.Actions != nil {
		if err := m.Actions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions")
			}
			return err
		}
	}

	return nil
}

func (m *Ring) validateExpansionCriteria(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpansionCriteria) { // not required
		return nil
	}

	for i := 0; i < len(m.ExpansionCriteria); i++ {
		if swag.IsZero(m.ExpansionCriteria[i]) { // not required
			continue
		}

		if m.ExpansionCriteria[i] != nil {
			if err := m.ExpansionCriteria[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("expansionCriteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Ring) validateMemberGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.MemberGroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("memberGroups", "body", m.MemberGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.MemberGroups); i++ {
		if swag.IsZero(m.MemberGroups[i]) { // not required
			continue
		}

		if m.MemberGroups[i] != nil {
			if err := m.MemberGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Ring) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Ring) UnmarshalBinary(b []byte) error {
	var res Ring
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

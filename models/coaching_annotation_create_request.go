// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CoachingAnnotationCreateRequest coaching annotation create request
//
// swagger:model CoachingAnnotationCreateRequest
type CoachingAnnotationCreateRequest struct {

	// Determines the permissions required to view this item.
	// Required: true
	// Enum: [Public Private]
	AccessType *string `json:"accessType"`

	// The text of the annotation.
	// Required: true
	Text *string `json:"text"`
}

// Validate validates this coaching annotation create request
func (m *CoachingAnnotationCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var coachingAnnotationCreateRequestTypeAccessTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Public","Private"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		coachingAnnotationCreateRequestTypeAccessTypePropEnum = append(coachingAnnotationCreateRequestTypeAccessTypePropEnum, v)
	}
}

const (

	// CoachingAnnotationCreateRequestAccessTypePublic captures enum value "Public"
	CoachingAnnotationCreateRequestAccessTypePublic string = "Public"

	// CoachingAnnotationCreateRequestAccessTypePrivate captures enum value "Private"
	CoachingAnnotationCreateRequestAccessTypePrivate string = "Private"
)

// prop value enum
func (m *CoachingAnnotationCreateRequest) validateAccessTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, coachingAnnotationCreateRequestTypeAccessTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CoachingAnnotationCreateRequest) validateAccessType(formats strfmt.Registry) error {

	if err := validate.Required("accessType", "body", m.AccessType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccessTypeEnum("accessType", "body", *m.AccessType); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAnnotationCreateRequest) validateText(formats strfmt.Registry) error {

	if err := validate.Required("text", "body", m.Text); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this coaching annotation create request based on context it is used
func (m *CoachingAnnotationCreateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CoachingAnnotationCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoachingAnnotationCreateRequest) UnmarshalBinary(b []byte) error {
	var res CoachingAnnotationCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

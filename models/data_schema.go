// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataSchema data schema
//
// swagger:model DataSchema
type DataSchema struct {

	// One of "CONTACT" or "EXTERNAL_ORGANIZATION".  Indicates the built-in entity type to which this schema applies.
	// Read Only: true
	AppliesTo []string `json:"appliesTo"`

	// The URI of the user that created this schema.
	// Read Only: true
	CreatedBy *DomainEntityRef `json:"createdBy,omitempty"`

	// The date and time this schema was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The schema's enabled/disabled status. A disabled schema cannot be assigned to any other entities, but the data on those entities from the schema still exists.
	Enabled bool `json:"enabled"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// A JSON schema defining the extension to the built-in entity type.
	// Required: true
	JSONSchema *JSONSchemaDocument `json:"jsonSchema"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The schema's version, a positive integer. Required for updates.
	// Required: true
	Version *int32 `json:"version"`
}

// Validate validates this data schema
func (m *DataSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliesTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJSONSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataSchemaAppliesToItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONTACT","EXTERNAL_ORGANIZATION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSchemaAppliesToItemsEnum = append(dataSchemaAppliesToItemsEnum, v)
	}
}

func (m *DataSchema) validateAppliesToItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataSchemaAppliesToItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataSchema) validateAppliesTo(formats strfmt.Registry) error {

	if swag.IsZero(m.AppliesTo) { // not required
		return nil
	}

	for i := 0; i < len(m.AppliesTo); i++ {

		// value enum
		if err := m.validateAppliesToItemsEnum("appliesTo"+"."+strconv.Itoa(i), "body", m.AppliesTo[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *DataSchema) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *DataSchema) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DataSchema) validateJSONSchema(formats strfmt.Registry) error {

	if err := validate.Required("jsonSchema", "body", m.JSONSchema); err != nil {
		return err
	}

	if m.JSONSchema != nil {
		if err := m.JSONSchema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jsonSchema")
			}
			return err
		}
	}

	return nil
}

func (m *DataSchema) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DataSchema) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataSchema) UnmarshalBinary(b []byte) error {
	var res DataSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

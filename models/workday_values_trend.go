// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkdayValuesTrend workday values trend
//
// swagger:model WorkdayValuesTrend
type WorkdayValuesTrend struct {

	// The end workday for the query range for the metric value trend. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Read Only: true
	// Format: date
	DateEndWorkday strfmt.Date `json:"dateEndWorkday,omitempty"`

	// The reference workday used to determine the metric definition. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Read Only: true
	// Format: date
	DateReferenceWorkday strfmt.Date `json:"dateReferenceWorkday,omitempty"`

	// The start workday for the query range for the metric value trend. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Read Only: true
	// Format: date
	DateStartWorkday strfmt.Date `json:"dateStartWorkday,omitempty"`

	// The targeted division for the query
	// Read Only: true
	Division *Division `json:"division,omitempty"`

	// The targeted metric for the average points
	// Read Only: true
	Metric *AddressableEntityRef `json:"metric,omitempty"`

	// The targeted performance profile for the average points
	// Read Only: true
	PerformanceProfile *AddressableEntityRef `json:"performanceProfile,omitempty"`

	// The metric value trends
	// Read Only: true
	Results []*WorkdayValuesMetricItem `json:"results"`

	// The time zone used for aggregating metric values
	// Read Only: true
	Timezone string `json:"timezone,omitempty"`

	// The targeted user for the query
	// Read Only: true
	User *UserReference `json:"user,omitempty"`
}

// Validate validates this workday values trend
func (m *WorkdayValuesTrend) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateEndWorkday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateReferenceWorkday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStartWorkday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformanceProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkdayValuesTrend) validateDateEndWorkday(formats strfmt.Registry) error {
	if swag.IsZero(m.DateEndWorkday) { // not required
		return nil
	}

	if err := validate.FormatOf("dateEndWorkday", "body", "date", m.DateEndWorkday.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WorkdayValuesTrend) validateDateReferenceWorkday(formats strfmt.Registry) error {
	if swag.IsZero(m.DateReferenceWorkday) { // not required
		return nil
	}

	if err := validate.FormatOf("dateReferenceWorkday", "body", "date", m.DateReferenceWorkday.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WorkdayValuesTrend) validateDateStartWorkday(formats strfmt.Registry) error {
	if swag.IsZero(m.DateStartWorkday) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStartWorkday", "body", "date", m.DateStartWorkday.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WorkdayValuesTrend) validateDivision(formats strfmt.Registry) error {
	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if m.Division != nil {
		if err := m.Division.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

func (m *WorkdayValuesTrend) validateMetric(formats strfmt.Registry) error {
	if swag.IsZero(m.Metric) { // not required
		return nil
	}

	if m.Metric != nil {
		if err := m.Metric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric")
			}
			return err
		}
	}

	return nil
}

func (m *WorkdayValuesTrend) validatePerformanceProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformanceProfile) { // not required
		return nil
	}

	if m.PerformanceProfile != nil {
		if err := m.PerformanceProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performanceProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("performanceProfile")
			}
			return err
		}
	}

	return nil
}

func (m *WorkdayValuesTrend) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkdayValuesTrend) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this workday values trend based on the context it is used
func (m *WorkdayValuesTrend) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateEndWorkday(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateReferenceWorkday(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateStartWorkday(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDivision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerformanceProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimezone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkdayValuesTrend) contextValidateDateEndWorkday(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateEndWorkday", "body", strfmt.Date(m.DateEndWorkday)); err != nil {
		return err
	}

	return nil
}

func (m *WorkdayValuesTrend) contextValidateDateReferenceWorkday(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateReferenceWorkday", "body", strfmt.Date(m.DateReferenceWorkday)); err != nil {
		return err
	}

	return nil
}

func (m *WorkdayValuesTrend) contextValidateDateStartWorkday(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateStartWorkday", "body", strfmt.Date(m.DateStartWorkday)); err != nil {
		return err
	}

	return nil
}

func (m *WorkdayValuesTrend) contextValidateDivision(ctx context.Context, formats strfmt.Registry) error {

	if m.Division != nil {
		if err := m.Division.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

func (m *WorkdayValuesTrend) contextValidateMetric(ctx context.Context, formats strfmt.Registry) error {

	if m.Metric != nil {
		if err := m.Metric.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric")
			}
			return err
		}
	}

	return nil
}

func (m *WorkdayValuesTrend) contextValidatePerformanceProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.PerformanceProfile != nil {
		if err := m.PerformanceProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performanceProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("performanceProfile")
			}
			return err
		}
	}

	return nil
}

func (m *WorkdayValuesTrend) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "results", "body", []*WorkdayValuesMetricItem(m.Results)); err != nil {
		return err
	}

	for i := 0; i < len(m.Results); i++ {

		if m.Results[i] != nil {
			if err := m.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkdayValuesTrend) contextValidateTimezone(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "timezone", "body", string(m.Timezone)); err != nil {
		return err
	}

	return nil
}

func (m *WorkdayValuesTrend) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkdayValuesTrend) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkdayValuesTrend) UnmarshalBinary(b []byte) error {
	var res WorkdayValuesTrend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnowledgeConversationContext knowledge conversation context
//
// swagger:model KnowledgeConversationContext
type KnowledgeConversationContext struct {

	// The unique identifier of the conversation.
	// Required: true
	ConversationID *string `json:"conversationId"`

	// The external contact identifier of the end-user participant.
	ExternalContactID string `json:"externalContactId,omitempty"`

	// The media type of the conversation.
	// Enum: [Unknown Callback Chat Cobrowse Email Message Screenshare Video Voice]
	MediaType string `json:"mediaType,omitempty"`

	// The unique identifier of the queue used to assign the interaction to the user.
	QueueID string `json:"queueId,omitempty"`
}

// Validate validates this knowledge conversation context
func (m *KnowledgeConversationContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConversationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeConversationContext) validateConversationID(formats strfmt.Registry) error {

	if err := validate.Required("conversationId", "body", m.ConversationID); err != nil {
		return err
	}

	return nil
}

var knowledgeConversationContextTypeMediaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Callback","Chat","Cobrowse","Email","Message","Screenshare","Video","Voice"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		knowledgeConversationContextTypeMediaTypePropEnum = append(knowledgeConversationContextTypeMediaTypePropEnum, v)
	}
}

const (

	// KnowledgeConversationContextMediaTypeUnknown captures enum value "Unknown"
	KnowledgeConversationContextMediaTypeUnknown string = "Unknown"

	// KnowledgeConversationContextMediaTypeCallback captures enum value "Callback"
	KnowledgeConversationContextMediaTypeCallback string = "Callback"

	// KnowledgeConversationContextMediaTypeChat captures enum value "Chat"
	KnowledgeConversationContextMediaTypeChat string = "Chat"

	// KnowledgeConversationContextMediaTypeCobrowse captures enum value "Cobrowse"
	KnowledgeConversationContextMediaTypeCobrowse string = "Cobrowse"

	// KnowledgeConversationContextMediaTypeEmail captures enum value "Email"
	KnowledgeConversationContextMediaTypeEmail string = "Email"

	// KnowledgeConversationContextMediaTypeMessage captures enum value "Message"
	KnowledgeConversationContextMediaTypeMessage string = "Message"

	// KnowledgeConversationContextMediaTypeScreenshare captures enum value "Screenshare"
	KnowledgeConversationContextMediaTypeScreenshare string = "Screenshare"

	// KnowledgeConversationContextMediaTypeVideo captures enum value "Video"
	KnowledgeConversationContextMediaTypeVideo string = "Video"

	// KnowledgeConversationContextMediaTypeVoice captures enum value "Voice"
	KnowledgeConversationContextMediaTypeVoice string = "Voice"
)

// prop value enum
func (m *KnowledgeConversationContext) validateMediaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, knowledgeConversationContextTypeMediaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KnowledgeConversationContext) validateMediaType(formats strfmt.Registry) error {
	if swag.IsZero(m.MediaType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMediaTypeEnum("mediaType", "body", m.MediaType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this knowledge conversation context based on context it is used
func (m *KnowledgeConversationContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *KnowledgeConversationContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnowledgeConversationContext) UnmarshalBinary(b []byte) error {
	var res KnowledgeConversationContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MediaParticipantRequest media participant request
//
// swagger:model MediaParticipantRequest
type MediaParticipantRequest struct {

	// True to confine this conversation participant.  Should only be used for ad-hoc conferences
	Confined bool `json:"confined,omitempty"`

	// True to hold this conversation participant.
	Held bool `json:"held,omitempty"`

	// True to mute this conversation participant.
	Muted bool `json:"muted,omitempty"`

	// True to enable recording of this participant, otherwise false to disable recording.
	Recording bool `json:"recording,omitempty"`

	// The state to update to set for this participant's communications.  Possible values are: 'connected' and 'disconnected'.
	// Enum: [alerting dialing contacting offering connected disconnected terminated converting uploading transmitting none]
	State string `json:"state,omitempty"`

	// Wrap-up to assign to this participant.
	Wrapup *Wrapup `json:"wrapup,omitempty"`

	// True to skip wrap-up for this participant.
	WrapupSkipped bool `json:"wrapupSkipped,omitempty"`
}

// Validate validates this media participant request
func (m *MediaParticipantRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWrapup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mediaParticipantRequestTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["alerting","dialing","contacting","offering","connected","disconnected","terminated","converting","uploading","transmitting","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mediaParticipantRequestTypeStatePropEnum = append(mediaParticipantRequestTypeStatePropEnum, v)
	}
}

const (

	// MediaParticipantRequestStateAlerting captures enum value "alerting"
	MediaParticipantRequestStateAlerting string = "alerting"

	// MediaParticipantRequestStateDialing captures enum value "dialing"
	MediaParticipantRequestStateDialing string = "dialing"

	// MediaParticipantRequestStateContacting captures enum value "contacting"
	MediaParticipantRequestStateContacting string = "contacting"

	// MediaParticipantRequestStateOffering captures enum value "offering"
	MediaParticipantRequestStateOffering string = "offering"

	// MediaParticipantRequestStateConnected captures enum value "connected"
	MediaParticipantRequestStateConnected string = "connected"

	// MediaParticipantRequestStateDisconnected captures enum value "disconnected"
	MediaParticipantRequestStateDisconnected string = "disconnected"

	// MediaParticipantRequestStateTerminated captures enum value "terminated"
	MediaParticipantRequestStateTerminated string = "terminated"

	// MediaParticipantRequestStateConverting captures enum value "converting"
	MediaParticipantRequestStateConverting string = "converting"

	// MediaParticipantRequestStateUploading captures enum value "uploading"
	MediaParticipantRequestStateUploading string = "uploading"

	// MediaParticipantRequestStateTransmitting captures enum value "transmitting"
	MediaParticipantRequestStateTransmitting string = "transmitting"

	// MediaParticipantRequestStateNone captures enum value "none"
	MediaParticipantRequestStateNone string = "none"
)

// prop value enum
func (m *MediaParticipantRequest) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mediaParticipantRequestTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MediaParticipantRequest) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *MediaParticipantRequest) validateWrapup(formats strfmt.Registry) error {

	if swag.IsZero(m.Wrapup) { // not required
		return nil
	}

	if m.Wrapup != nil {
		if err := m.Wrapup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wrapup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MediaParticipantRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MediaParticipantRequest) UnmarshalBinary(b []byte) error {
	var res MediaParticipantRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

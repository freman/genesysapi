// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EdgeInterface edge interface
//
// swagger:model EdgeInterface
type EdgeInterface struct {

	// address family Id
	AddressFamilyID string `json:"addressFamilyId,omitempty"`

	// endpoints
	Endpoints []*DomainEntityRef `json:"endpoints"`

	// if name
	IfName string `json:"ifName,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// line types
	LineTypes []string `json:"lineTypes"`

	// mac address
	MacAddress string `json:"macAddress,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this edge interface
func (m *EdgeInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeInterface) validateEndpoints(formats strfmt.Registry) error {
	if swag.IsZero(m.Endpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.Endpoints); i++ {
		if swag.IsZero(m.Endpoints[i]) { // not required
			continue
		}

		if m.Endpoints[i] != nil {
			if err := m.Endpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var edgeInterfaceLineTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TIE","NETWORK","TRUNK","STATION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		edgeInterfaceLineTypesItemsEnum = append(edgeInterfaceLineTypesItemsEnum, v)
	}
}

func (m *EdgeInterface) validateLineTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, edgeInterfaceLineTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EdgeInterface) validateLineTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.LineTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.LineTypes); i++ {

		// value enum
		if err := m.validateLineTypesItemsEnum("lineTypes"+"."+strconv.Itoa(i), "body", m.LineTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this edge interface based on the context it is used
func (m *EdgeInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeInterface) contextValidateEndpoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Endpoints); i++ {

		if m.Endpoints[i] != nil {
			if err := m.Endpoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EdgeInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgeInterface) UnmarshalBinary(b []byte) error {
	var res EdgeInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CampaignRuleCondition campaign rule condition
//
// swagger:model CampaignRuleCondition
type CampaignRuleCondition struct {

	// The type of condition to evaluate.
	// Required: true
	// Enum: [campaignProgress campaignAgents]
	ConditionType *string `json:"conditionType"`

	// id
	ID string `json:"id,omitempty"`

	// The parameters for the CampaignRuleCondition.
	// Required: true
	Parameters *CampaignRuleParameters `json:"parameters"`
}

// Validate validates this campaign rule condition
func (m *CampaignRuleCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var campaignRuleConditionTypeConditionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["campaignProgress","campaignAgents"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		campaignRuleConditionTypeConditionTypePropEnum = append(campaignRuleConditionTypeConditionTypePropEnum, v)
	}
}

const (

	// CampaignRuleConditionConditionTypeCampaignProgress captures enum value "campaignProgress"
	CampaignRuleConditionConditionTypeCampaignProgress string = "campaignProgress"

	// CampaignRuleConditionConditionTypeCampaignAgents captures enum value "campaignAgents"
	CampaignRuleConditionConditionTypeCampaignAgents string = "campaignAgents"
)

// prop value enum
func (m *CampaignRuleCondition) validateConditionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, campaignRuleConditionTypeConditionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CampaignRuleCondition) validateConditionType(formats strfmt.Registry) error {

	if err := validate.Required("conditionType", "body", m.ConditionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateConditionTypeEnum("conditionType", "body", *m.ConditionType); err != nil {
		return err
	}

	return nil
}

func (m *CampaignRuleCondition) validateParameters(formats strfmt.Registry) error {

	if err := validate.Required("parameters", "body", m.Parameters); err != nil {
		return err
	}

	if m.Parameters != nil {
		if err := m.Parameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this campaign rule condition based on the context it is used
func (m *CampaignRuleCondition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CampaignRuleCondition) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.Parameters != nil {
		if err := m.Parameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CampaignRuleCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CampaignRuleCondition) UnmarshalBinary(b []byte) error {
	var res CampaignRuleCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

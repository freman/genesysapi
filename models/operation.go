// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Operation operation
//
// swagger:model Operation
type Operation struct {

	// Action name
	// Enum: [CREATE CHECKIN CHECKOUT DEBUG DELETE HISTORY PUBLISH REVERT SAVE STATE_CHANGE UPDATE VALIDATE]
	ActionName string `json:"actionName,omitempty"`

	// Action status
	// Enum: [LOCKED UNLOCKED STARTED PENDING_GENERATION PENDING_BACKEND_NOTIFICATION SUCCESS FAILURE]
	ActionStatus string `json:"actionStatus,omitempty"`

	// client
	Client *DomainEntityRef `json:"client,omitempty"`

	// complete
	Complete bool `json:"complete"`

	// error code
	ErrorCode string `json:"errorCode,omitempty"`

	// error details
	ErrorDetails []*Detail `json:"errorDetails"`

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// error message params
	ErrorMessageParams map[string]string `json:"errorMessageParams,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// user
	User *User `json:"user,omitempty"`
}

// Validate validates this operation
func (m *Operation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var operationTypeActionNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATE","CHECKIN","CHECKOUT","DEBUG","DELETE","HISTORY","PUBLISH","REVERT","SAVE","STATE_CHANGE","UPDATE","VALIDATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operationTypeActionNamePropEnum = append(operationTypeActionNamePropEnum, v)
	}
}

const (

	// OperationActionNameCREATE captures enum value "CREATE"
	OperationActionNameCREATE string = "CREATE"

	// OperationActionNameCHECKIN captures enum value "CHECKIN"
	OperationActionNameCHECKIN string = "CHECKIN"

	// OperationActionNameCHECKOUT captures enum value "CHECKOUT"
	OperationActionNameCHECKOUT string = "CHECKOUT"

	// OperationActionNameDEBUG captures enum value "DEBUG"
	OperationActionNameDEBUG string = "DEBUG"

	// OperationActionNameDELETE captures enum value "DELETE"
	OperationActionNameDELETE string = "DELETE"

	// OperationActionNameHISTORY captures enum value "HISTORY"
	OperationActionNameHISTORY string = "HISTORY"

	// OperationActionNamePUBLISH captures enum value "PUBLISH"
	OperationActionNamePUBLISH string = "PUBLISH"

	// OperationActionNameREVERT captures enum value "REVERT"
	OperationActionNameREVERT string = "REVERT"

	// OperationActionNameSAVE captures enum value "SAVE"
	OperationActionNameSAVE string = "SAVE"

	// OperationActionNameSTATECHANGE captures enum value "STATE_CHANGE"
	OperationActionNameSTATECHANGE string = "STATE_CHANGE"

	// OperationActionNameUPDATE captures enum value "UPDATE"
	OperationActionNameUPDATE string = "UPDATE"

	// OperationActionNameVALIDATE captures enum value "VALIDATE"
	OperationActionNameVALIDATE string = "VALIDATE"
)

// prop value enum
func (m *Operation) validateActionNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, operationTypeActionNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Operation) validateActionName(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionName) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionNameEnum("actionName", "body", m.ActionName); err != nil {
		return err
	}

	return nil
}

var operationTypeActionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOCKED","UNLOCKED","STARTED","PENDING_GENERATION","PENDING_BACKEND_NOTIFICATION","SUCCESS","FAILURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operationTypeActionStatusPropEnum = append(operationTypeActionStatusPropEnum, v)
	}
}

const (

	// OperationActionStatusLOCKED captures enum value "LOCKED"
	OperationActionStatusLOCKED string = "LOCKED"

	// OperationActionStatusUNLOCKED captures enum value "UNLOCKED"
	OperationActionStatusUNLOCKED string = "UNLOCKED"

	// OperationActionStatusSTARTED captures enum value "STARTED"
	OperationActionStatusSTARTED string = "STARTED"

	// OperationActionStatusPENDINGGENERATION captures enum value "PENDING_GENERATION"
	OperationActionStatusPENDINGGENERATION string = "PENDING_GENERATION"

	// OperationActionStatusPENDINGBACKENDNOTIFICATION captures enum value "PENDING_BACKEND_NOTIFICATION"
	OperationActionStatusPENDINGBACKENDNOTIFICATION string = "PENDING_BACKEND_NOTIFICATION"

	// OperationActionStatusSUCCESS captures enum value "SUCCESS"
	OperationActionStatusSUCCESS string = "SUCCESS"

	// OperationActionStatusFAILURE captures enum value "FAILURE"
	OperationActionStatusFAILURE string = "FAILURE"
)

// prop value enum
func (m *Operation) validateActionStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, operationTypeActionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Operation) validateActionStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionStatusEnum("actionStatus", "body", m.ActionStatus); err != nil {
		return err
	}

	return nil
}

func (m *Operation) validateClient(formats strfmt.Registry) error {
	if swag.IsZero(m.Client) { // not required
		return nil
	}

	if m.Client != nil {
		if err := m.Client.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

func (m *Operation) validateErrorDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.ErrorDetails); i++ {
		if swag.IsZero(m.ErrorDetails[i]) { // not required
			continue
		}

		if m.ErrorDetails[i] != nil {
			if err := m.ErrorDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Operation) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this operation based on the context it is used
func (m *Operation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Operation) contextValidateClient(ctx context.Context, formats strfmt.Registry) error {

	if m.Client != nil {
		if err := m.Client.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

func (m *Operation) contextValidateErrorDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ErrorDetails); i++ {

		if m.ErrorDetails[i] != nil {
			if err := m.ErrorDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Operation) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Operation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Operation) UnmarshalBinary(b []byte) error {
	var res Operation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

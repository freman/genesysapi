// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditQueryService audit query service
//
// swagger:model AuditQueryService
type AuditQueryService struct {

	// List of Entities
	Entities []*AuditQueryEntity `json:"entities"`

	// Name of the Service
	// Enum: [ContactCenter ContentManagement PeoplePermissions Quality LanguageUnderstanding TopicsDefinitions PredictiveEngagement WorkforceManagement Triggers]
	Name string `json:"name,omitempty"`
}

// Validate validates this audit query service
func (m *AuditQueryService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditQueryService) validateEntities(formats strfmt.Registry) error {

	if swag.IsZero(m.Entities) { // not required
		return nil
	}

	for i := 0; i < len(m.Entities); i++ {
		if swag.IsZero(m.Entities[i]) { // not required
			continue
		}

		if m.Entities[i] != nil {
			if err := m.Entities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var auditQueryServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ContactCenter","ContentManagement","PeoplePermissions","Quality","LanguageUnderstanding","TopicsDefinitions","PredictiveEngagement","WorkforceManagement","Triggers"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auditQueryServiceTypeNamePropEnum = append(auditQueryServiceTypeNamePropEnum, v)
	}
}

const (

	// AuditQueryServiceNameContactCenter captures enum value "ContactCenter"
	AuditQueryServiceNameContactCenter string = "ContactCenter"

	// AuditQueryServiceNameContentManagement captures enum value "ContentManagement"
	AuditQueryServiceNameContentManagement string = "ContentManagement"

	// AuditQueryServiceNamePeoplePermissions captures enum value "PeoplePermissions"
	AuditQueryServiceNamePeoplePermissions string = "PeoplePermissions"

	// AuditQueryServiceNameQuality captures enum value "Quality"
	AuditQueryServiceNameQuality string = "Quality"

	// AuditQueryServiceNameLanguageUnderstanding captures enum value "LanguageUnderstanding"
	AuditQueryServiceNameLanguageUnderstanding string = "LanguageUnderstanding"

	// AuditQueryServiceNameTopicsDefinitions captures enum value "TopicsDefinitions"
	AuditQueryServiceNameTopicsDefinitions string = "TopicsDefinitions"

	// AuditQueryServiceNamePredictiveEngagement captures enum value "PredictiveEngagement"
	AuditQueryServiceNamePredictiveEngagement string = "PredictiveEngagement"

	// AuditQueryServiceNameWorkforceManagement captures enum value "WorkforceManagement"
	AuditQueryServiceNameWorkforceManagement string = "WorkforceManagement"

	// AuditQueryServiceNameTriggers captures enum value "Triggers"
	AuditQueryServiceNameTriggers string = "Triggers"
)

// prop value enum
func (m *AuditQueryService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, auditQueryServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AuditQueryService) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditQueryService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditQueryService) UnmarshalBinary(b []byte) error {
	var res AuditQueryService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

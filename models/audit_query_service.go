// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditQueryService audit query service
//
// swagger:model AuditQueryService
type AuditQueryService struct {

	// List of Entities
	Entities []*AuditQueryEntity `json:"entities"`

	// Name of the Service
	// Enum: [AgentConfig AnalyticsReporting Architect Coaching ContactCenter ContentManagement Datatables Directory DynamicSchema Gamification Groups Integrations Knowledge LanguageUnderstanding Learning Limits LogCapture Outbound PeoplePermissions EmployeePerformance PredictiveEngagement Presence Quality ResponseManagement Routing SpeechAndTextAnalytics Telephony TopicsDefinitions Triggers ProcessAutomation Voicemail WebDeployments Webhooks WorkforceManagement Messaging Supportability Callback Workitems SCIM NumberPurchasing Marketplace]
	Name string `json:"name,omitempty"`
}

// Validate validates this audit query service
func (m *AuditQueryService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditQueryService) validateEntities(formats strfmt.Registry) error {

	if swag.IsZero(m.Entities) { // not required
		return nil
	}

	for i := 0; i < len(m.Entities); i++ {
		if swag.IsZero(m.Entities[i]) { // not required
			continue
		}

		if m.Entities[i] != nil {
			if err := m.Entities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var auditQueryServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AgentConfig","AnalyticsReporting","Architect","Coaching","ContactCenter","ContentManagement","Datatables","Directory","DynamicSchema","Gamification","Groups","Integrations","Knowledge","LanguageUnderstanding","Learning","Limits","LogCapture","Outbound","PeoplePermissions","EmployeePerformance","PredictiveEngagement","Presence","Quality","ResponseManagement","Routing","SpeechAndTextAnalytics","Telephony","TopicsDefinitions","Triggers","ProcessAutomation","Voicemail","WebDeployments","Webhooks","WorkforceManagement","Messaging","Supportability","Callback","Workitems","SCIM","NumberPurchasing","Marketplace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auditQueryServiceTypeNamePropEnum = append(auditQueryServiceTypeNamePropEnum, v)
	}
}

const (

	// AuditQueryServiceNameAgentConfig captures enum value "AgentConfig"
	AuditQueryServiceNameAgentConfig string = "AgentConfig"

	// AuditQueryServiceNameAnalyticsReporting captures enum value "AnalyticsReporting"
	AuditQueryServiceNameAnalyticsReporting string = "AnalyticsReporting"

	// AuditQueryServiceNameArchitect captures enum value "Architect"
	AuditQueryServiceNameArchitect string = "Architect"

	// AuditQueryServiceNameCoaching captures enum value "Coaching"
	AuditQueryServiceNameCoaching string = "Coaching"

	// AuditQueryServiceNameContactCenter captures enum value "ContactCenter"
	AuditQueryServiceNameContactCenter string = "ContactCenter"

	// AuditQueryServiceNameContentManagement captures enum value "ContentManagement"
	AuditQueryServiceNameContentManagement string = "ContentManagement"

	// AuditQueryServiceNameDatatables captures enum value "Datatables"
	AuditQueryServiceNameDatatables string = "Datatables"

	// AuditQueryServiceNameDirectory captures enum value "Directory"
	AuditQueryServiceNameDirectory string = "Directory"

	// AuditQueryServiceNameDynamicSchema captures enum value "DynamicSchema"
	AuditQueryServiceNameDynamicSchema string = "DynamicSchema"

	// AuditQueryServiceNameGamification captures enum value "Gamification"
	AuditQueryServiceNameGamification string = "Gamification"

	// AuditQueryServiceNameGroups captures enum value "Groups"
	AuditQueryServiceNameGroups string = "Groups"

	// AuditQueryServiceNameIntegrations captures enum value "Integrations"
	AuditQueryServiceNameIntegrations string = "Integrations"

	// AuditQueryServiceNameKnowledge captures enum value "Knowledge"
	AuditQueryServiceNameKnowledge string = "Knowledge"

	// AuditQueryServiceNameLanguageUnderstanding captures enum value "LanguageUnderstanding"
	AuditQueryServiceNameLanguageUnderstanding string = "LanguageUnderstanding"

	// AuditQueryServiceNameLearning captures enum value "Learning"
	AuditQueryServiceNameLearning string = "Learning"

	// AuditQueryServiceNameLimits captures enum value "Limits"
	AuditQueryServiceNameLimits string = "Limits"

	// AuditQueryServiceNameLogCapture captures enum value "LogCapture"
	AuditQueryServiceNameLogCapture string = "LogCapture"

	// AuditQueryServiceNameOutbound captures enum value "Outbound"
	AuditQueryServiceNameOutbound string = "Outbound"

	// AuditQueryServiceNamePeoplePermissions captures enum value "PeoplePermissions"
	AuditQueryServiceNamePeoplePermissions string = "PeoplePermissions"

	// AuditQueryServiceNameEmployeePerformance captures enum value "EmployeePerformance"
	AuditQueryServiceNameEmployeePerformance string = "EmployeePerformance"

	// AuditQueryServiceNamePredictiveEngagement captures enum value "PredictiveEngagement"
	AuditQueryServiceNamePredictiveEngagement string = "PredictiveEngagement"

	// AuditQueryServiceNamePresence captures enum value "Presence"
	AuditQueryServiceNamePresence string = "Presence"

	// AuditQueryServiceNameQuality captures enum value "Quality"
	AuditQueryServiceNameQuality string = "Quality"

	// AuditQueryServiceNameResponseManagement captures enum value "ResponseManagement"
	AuditQueryServiceNameResponseManagement string = "ResponseManagement"

	// AuditQueryServiceNameRouting captures enum value "Routing"
	AuditQueryServiceNameRouting string = "Routing"

	// AuditQueryServiceNameSpeechAndTextAnalytics captures enum value "SpeechAndTextAnalytics"
	AuditQueryServiceNameSpeechAndTextAnalytics string = "SpeechAndTextAnalytics"

	// AuditQueryServiceNameTelephony captures enum value "Telephony"
	AuditQueryServiceNameTelephony string = "Telephony"

	// AuditQueryServiceNameTopicsDefinitions captures enum value "TopicsDefinitions"
	AuditQueryServiceNameTopicsDefinitions string = "TopicsDefinitions"

	// AuditQueryServiceNameTriggers captures enum value "Triggers"
	AuditQueryServiceNameTriggers string = "Triggers"

	// AuditQueryServiceNameProcessAutomation captures enum value "ProcessAutomation"
	AuditQueryServiceNameProcessAutomation string = "ProcessAutomation"

	// AuditQueryServiceNameVoicemail captures enum value "Voicemail"
	AuditQueryServiceNameVoicemail string = "Voicemail"

	// AuditQueryServiceNameWebDeployments captures enum value "WebDeployments"
	AuditQueryServiceNameWebDeployments string = "WebDeployments"

	// AuditQueryServiceNameWebhooks captures enum value "Webhooks"
	AuditQueryServiceNameWebhooks string = "Webhooks"

	// AuditQueryServiceNameWorkforceManagement captures enum value "WorkforceManagement"
	AuditQueryServiceNameWorkforceManagement string = "WorkforceManagement"

	// AuditQueryServiceNameMessaging captures enum value "Messaging"
	AuditQueryServiceNameMessaging string = "Messaging"

	// AuditQueryServiceNameSupportability captures enum value "Supportability"
	AuditQueryServiceNameSupportability string = "Supportability"

	// AuditQueryServiceNameCallback captures enum value "Callback"
	AuditQueryServiceNameCallback string = "Callback"

	// AuditQueryServiceNameWorkitems captures enum value "Workitems"
	AuditQueryServiceNameWorkitems string = "Workitems"

	// AuditQueryServiceNameSCIM captures enum value "SCIM"
	AuditQueryServiceNameSCIM string = "SCIM"

	// AuditQueryServiceNameNumberPurchasing captures enum value "NumberPurchasing"
	AuditQueryServiceNameNumberPurchasing string = "NumberPurchasing"

	// AuditQueryServiceNameMarketplace captures enum value "Marketplace"
	AuditQueryServiceNameMarketplace string = "Marketplace"
)

// prop value enum
func (m *AuditQueryService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, auditQueryServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AuditQueryService) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditQueryService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditQueryService) UnmarshalBinary(b []byte) error {
	var res AuditQueryService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

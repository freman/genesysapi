// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreatePlanningGroupRequest create planning group request
//
// swagger:model CreatePlanningGroupRequest
type CreatePlanningGroupRequest struct {

	// The name of the planning group
	// Required: true
	Name *string `json:"name"`

	// Set of route paths to associate with the planning group
	// Required: true
	// Unique: true
	RoutePaths []*RoutePathRequest `json:"routePaths"`

	// The ID of the service goal template to associate with this planning group
	// Required: true
	ServiceGoalTemplateID *string `json:"serviceGoalTemplateId"`
}

// Validate validates this create planning group request
func (m *CreatePlanningGroupRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutePaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceGoalTemplateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreatePlanningGroupRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreatePlanningGroupRequest) validateRoutePaths(formats strfmt.Registry) error {

	if err := validate.Required("routePaths", "body", m.RoutePaths); err != nil {
		return err
	}

	if err := validate.UniqueItems("routePaths", "body", m.RoutePaths); err != nil {
		return err
	}

	for i := 0; i < len(m.RoutePaths); i++ {
		if swag.IsZero(m.RoutePaths[i]) { // not required
			continue
		}

		if m.RoutePaths[i] != nil {
			if err := m.RoutePaths[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routePaths" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("routePaths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreatePlanningGroupRequest) validateServiceGoalTemplateID(formats strfmt.Registry) error {

	if err := validate.Required("serviceGoalTemplateId", "body", m.ServiceGoalTemplateID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create planning group request based on the context it is used
func (m *CreatePlanningGroupRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoutePaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreatePlanningGroupRequest) contextValidateRoutePaths(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RoutePaths); i++ {

		if m.RoutePaths[i] != nil {
			if err := m.RoutePaths[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routePaths" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("routePaths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreatePlanningGroupRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreatePlanningGroupRequest) UnmarshalBinary(b []byte) error {
	var res CreatePlanningGroupRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

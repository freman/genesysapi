// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContactCallbackRequest contact callback request
//
// swagger:model ContactCallbackRequest
type ContactCallbackRequest struct {

	// Campaign identifier
	// Required: true
	CampaignID *string `json:"campaignId"`

	// Contact identifier
	// Required: true
	ContactID *string `json:"contactId"`

	// Contact list identifier
	// Required: true
	ContactListID *string `json:"contactListId"`

	// Name of the phone column containing the number to be called
	// Required: true
	PhoneColumn *string `json:"phoneColumn"`

	// The scheduled time for the callback as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ", example = "2016-01-02T16:59:59"
	// Required: true
	Schedule *string `json:"schedule"`
}

// Validate validates this contact callback request
func (m *ContactCallbackRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaignID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactListID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneColumn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactCallbackRequest) validateCampaignID(formats strfmt.Registry) error {

	if err := validate.Required("campaignId", "body", m.CampaignID); err != nil {
		return err
	}

	return nil
}

func (m *ContactCallbackRequest) validateContactID(formats strfmt.Registry) error {

	if err := validate.Required("contactId", "body", m.ContactID); err != nil {
		return err
	}

	return nil
}

func (m *ContactCallbackRequest) validateContactListID(formats strfmt.Registry) error {

	if err := validate.Required("contactListId", "body", m.ContactListID); err != nil {
		return err
	}

	return nil
}

func (m *ContactCallbackRequest) validatePhoneColumn(formats strfmt.Registry) error {

	if err := validate.Required("phoneColumn", "body", m.PhoneColumn); err != nil {
		return err
	}

	return nil
}

func (m *ContactCallbackRequest) validateSchedule(formats strfmt.Registry) error {

	if err := validate.Required("schedule", "body", m.Schedule); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this contact callback request based on context it is used
func (m *ContactCallbackRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ContactCallbackRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactCallbackRequest) UnmarshalBinary(b []byte) error {
	var res ContactCallbackRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

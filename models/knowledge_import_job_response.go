// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnowledgeImportJobResponse knowledge import job response
//
// swagger:model KnowledgeImportJobResponse
type KnowledgeImportJobResponse struct {

	// Created date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Last modified date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// File type of the document
	// Required: true
	// Enum: [Json Csv Xlsx]
	FileType *string `json:"fileType"`

	// Id of the import job
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Knowledge base which document import does belong to
	// Read Only: true
	KnowledgeBase *KnowledgeBase `json:"knowledgeBase,omitempty"`

	// Report of the import job
	// Read Only: true
	Report *KnowledgeImportJobReport `json:"report,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Additional optional settings
	Settings *KnowledgeImportJobSettings `json:"settings,omitempty"`

	// Status of the import job
	// Read Only: true
	// Enum: [Created ValidationInProgress ValidationCompleted ValidationFailed Started InProgress Completed PartialCompleted Failed AbortRequested Aborted]
	Status string `json:"status,omitempty"`

	// Upload key
	// Required: true
	UploadKey *string `json:"uploadKey"`
}

// Validate validates this knowledge import job response
func (m *KnowledgeImportJobResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKnowledgeBase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeImportJobResponse) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeImportJobResponse) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

var knowledgeImportJobResponseTypeFileTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Json","Csv","Xlsx"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		knowledgeImportJobResponseTypeFileTypePropEnum = append(knowledgeImportJobResponseTypeFileTypePropEnum, v)
	}
}

const (

	// KnowledgeImportJobResponseFileTypeJSON captures enum value "Json"
	KnowledgeImportJobResponseFileTypeJSON string = "Json"

	// KnowledgeImportJobResponseFileTypeCsv captures enum value "Csv"
	KnowledgeImportJobResponseFileTypeCsv string = "Csv"

	// KnowledgeImportJobResponseFileTypeXlsx captures enum value "Xlsx"
	KnowledgeImportJobResponseFileTypeXlsx string = "Xlsx"
)

// prop value enum
func (m *KnowledgeImportJobResponse) validateFileTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, knowledgeImportJobResponseTypeFileTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KnowledgeImportJobResponse) validateFileType(formats strfmt.Registry) error {

	if err := validate.Required("fileType", "body", m.FileType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFileTypeEnum("fileType", "body", *m.FileType); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeImportJobResponse) validateKnowledgeBase(formats strfmt.Registry) error {
	if swag.IsZero(m.KnowledgeBase) { // not required
		return nil
	}

	if m.KnowledgeBase != nil {
		if err := m.KnowledgeBase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("knowledgeBase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("knowledgeBase")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeImportJobResponse) validateReport(formats strfmt.Registry) error {
	if swag.IsZero(m.Report) { // not required
		return nil
	}

	if m.Report != nil {
		if err := m.Report.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("report")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("report")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeImportJobResponse) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeImportJobResponse) validateSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

var knowledgeImportJobResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Created","ValidationInProgress","ValidationCompleted","ValidationFailed","Started","InProgress","Completed","PartialCompleted","Failed","AbortRequested","Aborted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		knowledgeImportJobResponseTypeStatusPropEnum = append(knowledgeImportJobResponseTypeStatusPropEnum, v)
	}
}

const (

	// KnowledgeImportJobResponseStatusCreated captures enum value "Created"
	KnowledgeImportJobResponseStatusCreated string = "Created"

	// KnowledgeImportJobResponseStatusValidationInProgress captures enum value "ValidationInProgress"
	KnowledgeImportJobResponseStatusValidationInProgress string = "ValidationInProgress"

	// KnowledgeImportJobResponseStatusValidationCompleted captures enum value "ValidationCompleted"
	KnowledgeImportJobResponseStatusValidationCompleted string = "ValidationCompleted"

	// KnowledgeImportJobResponseStatusValidationFailed captures enum value "ValidationFailed"
	KnowledgeImportJobResponseStatusValidationFailed string = "ValidationFailed"

	// KnowledgeImportJobResponseStatusStarted captures enum value "Started"
	KnowledgeImportJobResponseStatusStarted string = "Started"

	// KnowledgeImportJobResponseStatusInProgress captures enum value "InProgress"
	KnowledgeImportJobResponseStatusInProgress string = "InProgress"

	// KnowledgeImportJobResponseStatusCompleted captures enum value "Completed"
	KnowledgeImportJobResponseStatusCompleted string = "Completed"

	// KnowledgeImportJobResponseStatusPartialCompleted captures enum value "PartialCompleted"
	KnowledgeImportJobResponseStatusPartialCompleted string = "PartialCompleted"

	// KnowledgeImportJobResponseStatusFailed captures enum value "Failed"
	KnowledgeImportJobResponseStatusFailed string = "Failed"

	// KnowledgeImportJobResponseStatusAbortRequested captures enum value "AbortRequested"
	KnowledgeImportJobResponseStatusAbortRequested string = "AbortRequested"

	// KnowledgeImportJobResponseStatusAborted captures enum value "Aborted"
	KnowledgeImportJobResponseStatusAborted string = "Aborted"
)

// prop value enum
func (m *KnowledgeImportJobResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, knowledgeImportJobResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KnowledgeImportJobResponse) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeImportJobResponse) validateUploadKey(formats strfmt.Registry) error {

	if err := validate.Required("uploadKey", "body", m.UploadKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this knowledge import job response based on the context it is used
func (m *KnowledgeImportJobResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateModified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKnowledgeBase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeImportJobResponse) contextValidateDateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateCreated", "body", strfmt.DateTime(m.DateCreated)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeImportJobResponse) contextValidateDateModified(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateModified", "body", strfmt.DateTime(m.DateModified)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeImportJobResponse) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeImportJobResponse) contextValidateKnowledgeBase(ctx context.Context, formats strfmt.Registry) error {

	if m.KnowledgeBase != nil {
		if err := m.KnowledgeBase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("knowledgeBase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("knowledgeBase")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeImportJobResponse) contextValidateReport(ctx context.Context, formats strfmt.Registry) error {

	if m.Report != nil {
		if err := m.Report.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("report")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("report")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeImportJobResponse) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeImportJobResponse) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Settings != nil {
		if err := m.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeImportJobResponse) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KnowledgeImportJobResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnowledgeImportJobResponse) UnmarshalBinary(b []byte) error {
	var res KnowledgeImportJobResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

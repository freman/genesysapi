// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShiftTradeMatchViolation shift trade match violation
//
// swagger:model ShiftTradeMatchViolation
type ShiftTradeMatchViolation struct {

	// Clarifying user params for constructing helpful error messages
	Params map[string]string `json:"params,omitempty"`

	// The type of constraint violation
	// Enum: [AgentCapabilityMismatch CannotTradeWithYourself DirectTradeForOtherUser InitiatingAgentScheduleDoesNotExist InitiatingShiftDisallowedActivityCategory InitiatingShiftDoesNotExist InitiatingShiftHasExternalActivities InitiatingShiftOverlapsExisting InitiatingShiftStartTooClose InitiatingShiftTimesChanged InitiatingWeeklyMaxPaidTime InitiatingWeeklyMinPaidTime InvalidState OneSidedTradeCreation ReceivingAgentScheduleDoesNotExist ReceivingShiftDisallowedActivityCategory ReceivingShiftDoesNotExist ReceivingShiftForOneSidedTrade ReceivingShiftHasExternalActivities ReceivingShiftMissingForTwoSidedTrade ReceivingShiftOutsideAcceptableIntervals ReceivingShiftOverlapsExisting ReceivingShiftStartTooClose ReceivingShiftTimesChanged ReceivingWeeklyMaxPaidTime ReceivingWeeklyMinPaidTime ShiftTradingNotEnabled UnequalPaidTime WeekScheduleDifferent WeekScheduleDoesNotExist WeekScheduleUnpublished]
	Type string `json:"type,omitempty"`
}

// Validate validates this shift trade match violation
func (m *ShiftTradeMatchViolation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var shiftTradeMatchViolationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AgentCapabilityMismatch","CannotTradeWithYourself","DirectTradeForOtherUser","InitiatingAgentScheduleDoesNotExist","InitiatingShiftDisallowedActivityCategory","InitiatingShiftDoesNotExist","InitiatingShiftHasExternalActivities","InitiatingShiftOverlapsExisting","InitiatingShiftStartTooClose","InitiatingShiftTimesChanged","InitiatingWeeklyMaxPaidTime","InitiatingWeeklyMinPaidTime","InvalidState","OneSidedTradeCreation","ReceivingAgentScheduleDoesNotExist","ReceivingShiftDisallowedActivityCategory","ReceivingShiftDoesNotExist","ReceivingShiftForOneSidedTrade","ReceivingShiftHasExternalActivities","ReceivingShiftMissingForTwoSidedTrade","ReceivingShiftOutsideAcceptableIntervals","ReceivingShiftOverlapsExisting","ReceivingShiftStartTooClose","ReceivingShiftTimesChanged","ReceivingWeeklyMaxPaidTime","ReceivingWeeklyMinPaidTime","ShiftTradingNotEnabled","UnequalPaidTime","WeekScheduleDifferent","WeekScheduleDoesNotExist","WeekScheduleUnpublished"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shiftTradeMatchViolationTypeTypePropEnum = append(shiftTradeMatchViolationTypeTypePropEnum, v)
	}
}

const (

	// ShiftTradeMatchViolationTypeAgentCapabilityMismatch captures enum value "AgentCapabilityMismatch"
	ShiftTradeMatchViolationTypeAgentCapabilityMismatch string = "AgentCapabilityMismatch"

	// ShiftTradeMatchViolationTypeCannotTradeWithYourself captures enum value "CannotTradeWithYourself"
	ShiftTradeMatchViolationTypeCannotTradeWithYourself string = "CannotTradeWithYourself"

	// ShiftTradeMatchViolationTypeDirectTradeForOtherUser captures enum value "DirectTradeForOtherUser"
	ShiftTradeMatchViolationTypeDirectTradeForOtherUser string = "DirectTradeForOtherUser"

	// ShiftTradeMatchViolationTypeInitiatingAgentScheduleDoesNotExist captures enum value "InitiatingAgentScheduleDoesNotExist"
	ShiftTradeMatchViolationTypeInitiatingAgentScheduleDoesNotExist string = "InitiatingAgentScheduleDoesNotExist"

	// ShiftTradeMatchViolationTypeInitiatingShiftDisallowedActivityCategory captures enum value "InitiatingShiftDisallowedActivityCategory"
	ShiftTradeMatchViolationTypeInitiatingShiftDisallowedActivityCategory string = "InitiatingShiftDisallowedActivityCategory"

	// ShiftTradeMatchViolationTypeInitiatingShiftDoesNotExist captures enum value "InitiatingShiftDoesNotExist"
	ShiftTradeMatchViolationTypeInitiatingShiftDoesNotExist string = "InitiatingShiftDoesNotExist"

	// ShiftTradeMatchViolationTypeInitiatingShiftHasExternalActivities captures enum value "InitiatingShiftHasExternalActivities"
	ShiftTradeMatchViolationTypeInitiatingShiftHasExternalActivities string = "InitiatingShiftHasExternalActivities"

	// ShiftTradeMatchViolationTypeInitiatingShiftOverlapsExisting captures enum value "InitiatingShiftOverlapsExisting"
	ShiftTradeMatchViolationTypeInitiatingShiftOverlapsExisting string = "InitiatingShiftOverlapsExisting"

	// ShiftTradeMatchViolationTypeInitiatingShiftStartTooClose captures enum value "InitiatingShiftStartTooClose"
	ShiftTradeMatchViolationTypeInitiatingShiftStartTooClose string = "InitiatingShiftStartTooClose"

	// ShiftTradeMatchViolationTypeInitiatingShiftTimesChanged captures enum value "InitiatingShiftTimesChanged"
	ShiftTradeMatchViolationTypeInitiatingShiftTimesChanged string = "InitiatingShiftTimesChanged"

	// ShiftTradeMatchViolationTypeInitiatingWeeklyMaxPaidTime captures enum value "InitiatingWeeklyMaxPaidTime"
	ShiftTradeMatchViolationTypeInitiatingWeeklyMaxPaidTime string = "InitiatingWeeklyMaxPaidTime"

	// ShiftTradeMatchViolationTypeInitiatingWeeklyMinPaidTime captures enum value "InitiatingWeeklyMinPaidTime"
	ShiftTradeMatchViolationTypeInitiatingWeeklyMinPaidTime string = "InitiatingWeeklyMinPaidTime"

	// ShiftTradeMatchViolationTypeInvalidState captures enum value "InvalidState"
	ShiftTradeMatchViolationTypeInvalidState string = "InvalidState"

	// ShiftTradeMatchViolationTypeOneSidedTradeCreation captures enum value "OneSidedTradeCreation"
	ShiftTradeMatchViolationTypeOneSidedTradeCreation string = "OneSidedTradeCreation"

	// ShiftTradeMatchViolationTypeReceivingAgentScheduleDoesNotExist captures enum value "ReceivingAgentScheduleDoesNotExist"
	ShiftTradeMatchViolationTypeReceivingAgentScheduleDoesNotExist string = "ReceivingAgentScheduleDoesNotExist"

	// ShiftTradeMatchViolationTypeReceivingShiftDisallowedActivityCategory captures enum value "ReceivingShiftDisallowedActivityCategory"
	ShiftTradeMatchViolationTypeReceivingShiftDisallowedActivityCategory string = "ReceivingShiftDisallowedActivityCategory"

	// ShiftTradeMatchViolationTypeReceivingShiftDoesNotExist captures enum value "ReceivingShiftDoesNotExist"
	ShiftTradeMatchViolationTypeReceivingShiftDoesNotExist string = "ReceivingShiftDoesNotExist"

	// ShiftTradeMatchViolationTypeReceivingShiftForOneSidedTrade captures enum value "ReceivingShiftForOneSidedTrade"
	ShiftTradeMatchViolationTypeReceivingShiftForOneSidedTrade string = "ReceivingShiftForOneSidedTrade"

	// ShiftTradeMatchViolationTypeReceivingShiftHasExternalActivities captures enum value "ReceivingShiftHasExternalActivities"
	ShiftTradeMatchViolationTypeReceivingShiftHasExternalActivities string = "ReceivingShiftHasExternalActivities"

	// ShiftTradeMatchViolationTypeReceivingShiftMissingForTwoSidedTrade captures enum value "ReceivingShiftMissingForTwoSidedTrade"
	ShiftTradeMatchViolationTypeReceivingShiftMissingForTwoSidedTrade string = "ReceivingShiftMissingForTwoSidedTrade"

	// ShiftTradeMatchViolationTypeReceivingShiftOutsideAcceptableIntervals captures enum value "ReceivingShiftOutsideAcceptableIntervals"
	ShiftTradeMatchViolationTypeReceivingShiftOutsideAcceptableIntervals string = "ReceivingShiftOutsideAcceptableIntervals"

	// ShiftTradeMatchViolationTypeReceivingShiftOverlapsExisting captures enum value "ReceivingShiftOverlapsExisting"
	ShiftTradeMatchViolationTypeReceivingShiftOverlapsExisting string = "ReceivingShiftOverlapsExisting"

	// ShiftTradeMatchViolationTypeReceivingShiftStartTooClose captures enum value "ReceivingShiftStartTooClose"
	ShiftTradeMatchViolationTypeReceivingShiftStartTooClose string = "ReceivingShiftStartTooClose"

	// ShiftTradeMatchViolationTypeReceivingShiftTimesChanged captures enum value "ReceivingShiftTimesChanged"
	ShiftTradeMatchViolationTypeReceivingShiftTimesChanged string = "ReceivingShiftTimesChanged"

	// ShiftTradeMatchViolationTypeReceivingWeeklyMaxPaidTime captures enum value "ReceivingWeeklyMaxPaidTime"
	ShiftTradeMatchViolationTypeReceivingWeeklyMaxPaidTime string = "ReceivingWeeklyMaxPaidTime"

	// ShiftTradeMatchViolationTypeReceivingWeeklyMinPaidTime captures enum value "ReceivingWeeklyMinPaidTime"
	ShiftTradeMatchViolationTypeReceivingWeeklyMinPaidTime string = "ReceivingWeeklyMinPaidTime"

	// ShiftTradeMatchViolationTypeShiftTradingNotEnabled captures enum value "ShiftTradingNotEnabled"
	ShiftTradeMatchViolationTypeShiftTradingNotEnabled string = "ShiftTradingNotEnabled"

	// ShiftTradeMatchViolationTypeUnequalPaidTime captures enum value "UnequalPaidTime"
	ShiftTradeMatchViolationTypeUnequalPaidTime string = "UnequalPaidTime"

	// ShiftTradeMatchViolationTypeWeekScheduleDifferent captures enum value "WeekScheduleDifferent"
	ShiftTradeMatchViolationTypeWeekScheduleDifferent string = "WeekScheduleDifferent"

	// ShiftTradeMatchViolationTypeWeekScheduleDoesNotExist captures enum value "WeekScheduleDoesNotExist"
	ShiftTradeMatchViolationTypeWeekScheduleDoesNotExist string = "WeekScheduleDoesNotExist"

	// ShiftTradeMatchViolationTypeWeekScheduleUnpublished captures enum value "WeekScheduleUnpublished"
	ShiftTradeMatchViolationTypeWeekScheduleUnpublished string = "WeekScheduleUnpublished"
)

// prop value enum
func (m *ShiftTradeMatchViolation) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, shiftTradeMatchViolationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ShiftTradeMatchViolation) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this shift trade match violation based on context it is used
func (m *ShiftTradeMatchViolation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ShiftTradeMatchViolation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShiftTradeMatchViolation) UnmarshalBinary(b []byte) error {
	var res ShiftTradeMatchViolation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

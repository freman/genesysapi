// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlanningGroup planning group
//
// swagger:model PlanningGroup
type PlanningGroup struct {

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Version metadata for the planning group
	Metadata *WfmVersionedEntityMetadata `json:"metadata,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Set of route paths associated with the planning group
	// Unique: true
	RoutePaths []*RoutePathResponse `json:"routePaths"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The ID of the service goal template associated with this planning group
	ServiceGoalTemplate *ServiceGoalTemplateReference `json:"serviceGoalTemplate,omitempty"`
}

// Validate validates this planning group
func (m *PlanningGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutePaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceGoalTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlanningGroup) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *PlanningGroup) validateRoutePaths(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutePaths) { // not required
		return nil
	}

	if err := validate.UniqueItems("routePaths", "body", m.RoutePaths); err != nil {
		return err
	}

	for i := 0; i < len(m.RoutePaths); i++ {
		if swag.IsZero(m.RoutePaths[i]) { // not required
			continue
		}

		if m.RoutePaths[i] != nil {
			if err := m.RoutePaths[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routePaths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PlanningGroup) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PlanningGroup) validateServiceGoalTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceGoalTemplate) { // not required
		return nil
	}

	if m.ServiceGoalTemplate != nil {
		if err := m.ServiceGoalTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceGoalTemplate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlanningGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlanningGroup) UnmarshalBinary(b []byte) error {
	var res PlanningGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

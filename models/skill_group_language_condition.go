// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SkillGroupLanguageCondition skill group language condition
//
// swagger:model SkillGroupLanguageCondition
type SkillGroupLanguageCondition struct {

	// Nested conditions to be applied to this skill condition
	ChildConditions []*SkillGroupCondition `json:"childConditions"`

	// Comparator that will be applied to the proficiency
	// Required: true
	// Enum: [EqualTo NotEqualTo LessThan GreaterThan GreaterThanOrEqualTo LessThanOrEqualTo]
	Comparator *string `json:"comparator"`

	// The language skill to be used in the skill condition query
	// Example: English-Written
	// Required: true
	LanguageSkill *string `json:"languageSkill"`

	// The skill proficiency that will be used for the language skill. Integer range 0-5
	// Example: 5
	// Required: true
	Proficiency *int32 `json:"proficiency"`
}

// Validate validates this skill group language condition
func (m *SkillGroupLanguageCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComparator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageSkill(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProficiency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SkillGroupLanguageCondition) validateChildConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.ChildConditions) { // not required
		return nil
	}

	for i := 0; i < len(m.ChildConditions); i++ {
		if swag.IsZero(m.ChildConditions[i]) { // not required
			continue
		}

		if m.ChildConditions[i] != nil {
			if err := m.ChildConditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childConditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("childConditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var skillGroupLanguageConditionTypeComparatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EqualTo","NotEqualTo","LessThan","GreaterThan","GreaterThanOrEqualTo","LessThanOrEqualTo"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		skillGroupLanguageConditionTypeComparatorPropEnum = append(skillGroupLanguageConditionTypeComparatorPropEnum, v)
	}
}

const (

	// SkillGroupLanguageConditionComparatorEqualTo captures enum value "EqualTo"
	SkillGroupLanguageConditionComparatorEqualTo string = "EqualTo"

	// SkillGroupLanguageConditionComparatorNotEqualTo captures enum value "NotEqualTo"
	SkillGroupLanguageConditionComparatorNotEqualTo string = "NotEqualTo"

	// SkillGroupLanguageConditionComparatorLessThan captures enum value "LessThan"
	SkillGroupLanguageConditionComparatorLessThan string = "LessThan"

	// SkillGroupLanguageConditionComparatorGreaterThan captures enum value "GreaterThan"
	SkillGroupLanguageConditionComparatorGreaterThan string = "GreaterThan"

	// SkillGroupLanguageConditionComparatorGreaterThanOrEqualTo captures enum value "GreaterThanOrEqualTo"
	SkillGroupLanguageConditionComparatorGreaterThanOrEqualTo string = "GreaterThanOrEqualTo"

	// SkillGroupLanguageConditionComparatorLessThanOrEqualTo captures enum value "LessThanOrEqualTo"
	SkillGroupLanguageConditionComparatorLessThanOrEqualTo string = "LessThanOrEqualTo"
)

// prop value enum
func (m *SkillGroupLanguageCondition) validateComparatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, skillGroupLanguageConditionTypeComparatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SkillGroupLanguageCondition) validateComparator(formats strfmt.Registry) error {

	if err := validate.Required("comparator", "body", m.Comparator); err != nil {
		return err
	}

	// value enum
	if err := m.validateComparatorEnum("comparator", "body", *m.Comparator); err != nil {
		return err
	}

	return nil
}

func (m *SkillGroupLanguageCondition) validateLanguageSkill(formats strfmt.Registry) error {

	if err := validate.Required("languageSkill", "body", m.LanguageSkill); err != nil {
		return err
	}

	return nil
}

func (m *SkillGroupLanguageCondition) validateProficiency(formats strfmt.Registry) error {

	if err := validate.Required("proficiency", "body", m.Proficiency); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this skill group language condition based on the context it is used
func (m *SkillGroupLanguageCondition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChildConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SkillGroupLanguageCondition) contextValidateChildConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChildConditions); i++ {

		if m.ChildConditions[i] != nil {
			if err := m.ChildConditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childConditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("childConditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SkillGroupLanguageCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SkillGroupLanguageCondition) UnmarshalBinary(b []byte) error {
	var res SkillGroupLanguageCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

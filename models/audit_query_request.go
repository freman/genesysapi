// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditQueryRequest audit query request
//
// swagger:model AuditQueryRequest
type AuditQueryRequest struct {

	// Additional filters for the query.
	Filters []*AuditQueryFilter `json:"filters"`

	// Date and time range of data to query. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	// Required: true
	Interval *string `json:"interval"`

	// Name of the service to query audits for.
	// Required: true
	// Enum: [AnalyticsReporting Architect Coaching ContactCenter ContentManagement Datatables Directory DynamicSchema Gamification Groups Integrations Knowledge LanguageUnderstanding Learning Limits Outbound PeoplePermissions EmployeePerformance PredictiveEngagement Presence Quality ResponseManagement Routing SpeechAndTextAnalytics Telephony TopicsDefinitions Triggers ProcessAutomation WebDeployments Webhooks WorkforceManagement Messaging Supportability Callback Workitems]
	ServiceName *string `json:"serviceName"`

	// Sort parameter for the query.
	Sort []*AuditQuerySort `json:"sort"`
}

// Validate validates this audit query request
func (m *AuditQueryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditQueryRequest) validateFilters(formats strfmt.Registry) error {

	if swag.IsZero(m.Filters) { // not required
		return nil
	}

	for i := 0; i < len(m.Filters); i++ {
		if swag.IsZero(m.Filters[i]) { // not required
			continue
		}

		if m.Filters[i] != nil {
			if err := m.Filters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AuditQueryRequest) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

var auditQueryRequestTypeServiceNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AnalyticsReporting","Architect","Coaching","ContactCenter","ContentManagement","Datatables","Directory","DynamicSchema","Gamification","Groups","Integrations","Knowledge","LanguageUnderstanding","Learning","Limits","Outbound","PeoplePermissions","EmployeePerformance","PredictiveEngagement","Presence","Quality","ResponseManagement","Routing","SpeechAndTextAnalytics","Telephony","TopicsDefinitions","Triggers","ProcessAutomation","WebDeployments","Webhooks","WorkforceManagement","Messaging","Supportability","Callback","Workitems"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auditQueryRequestTypeServiceNamePropEnum = append(auditQueryRequestTypeServiceNamePropEnum, v)
	}
}

const (

	// AuditQueryRequestServiceNameAnalyticsReporting captures enum value "AnalyticsReporting"
	AuditQueryRequestServiceNameAnalyticsReporting string = "AnalyticsReporting"

	// AuditQueryRequestServiceNameArchitect captures enum value "Architect"
	AuditQueryRequestServiceNameArchitect string = "Architect"

	// AuditQueryRequestServiceNameCoaching captures enum value "Coaching"
	AuditQueryRequestServiceNameCoaching string = "Coaching"

	// AuditQueryRequestServiceNameContactCenter captures enum value "ContactCenter"
	AuditQueryRequestServiceNameContactCenter string = "ContactCenter"

	// AuditQueryRequestServiceNameContentManagement captures enum value "ContentManagement"
	AuditQueryRequestServiceNameContentManagement string = "ContentManagement"

	// AuditQueryRequestServiceNameDatatables captures enum value "Datatables"
	AuditQueryRequestServiceNameDatatables string = "Datatables"

	// AuditQueryRequestServiceNameDirectory captures enum value "Directory"
	AuditQueryRequestServiceNameDirectory string = "Directory"

	// AuditQueryRequestServiceNameDynamicSchema captures enum value "DynamicSchema"
	AuditQueryRequestServiceNameDynamicSchema string = "DynamicSchema"

	// AuditQueryRequestServiceNameGamification captures enum value "Gamification"
	AuditQueryRequestServiceNameGamification string = "Gamification"

	// AuditQueryRequestServiceNameGroups captures enum value "Groups"
	AuditQueryRequestServiceNameGroups string = "Groups"

	// AuditQueryRequestServiceNameIntegrations captures enum value "Integrations"
	AuditQueryRequestServiceNameIntegrations string = "Integrations"

	// AuditQueryRequestServiceNameKnowledge captures enum value "Knowledge"
	AuditQueryRequestServiceNameKnowledge string = "Knowledge"

	// AuditQueryRequestServiceNameLanguageUnderstanding captures enum value "LanguageUnderstanding"
	AuditQueryRequestServiceNameLanguageUnderstanding string = "LanguageUnderstanding"

	// AuditQueryRequestServiceNameLearning captures enum value "Learning"
	AuditQueryRequestServiceNameLearning string = "Learning"

	// AuditQueryRequestServiceNameLimits captures enum value "Limits"
	AuditQueryRequestServiceNameLimits string = "Limits"

	// AuditQueryRequestServiceNameOutbound captures enum value "Outbound"
	AuditQueryRequestServiceNameOutbound string = "Outbound"

	// AuditQueryRequestServiceNamePeoplePermissions captures enum value "PeoplePermissions"
	AuditQueryRequestServiceNamePeoplePermissions string = "PeoplePermissions"

	// AuditQueryRequestServiceNameEmployeePerformance captures enum value "EmployeePerformance"
	AuditQueryRequestServiceNameEmployeePerformance string = "EmployeePerformance"

	// AuditQueryRequestServiceNamePredictiveEngagement captures enum value "PredictiveEngagement"
	AuditQueryRequestServiceNamePredictiveEngagement string = "PredictiveEngagement"

	// AuditQueryRequestServiceNamePresence captures enum value "Presence"
	AuditQueryRequestServiceNamePresence string = "Presence"

	// AuditQueryRequestServiceNameQuality captures enum value "Quality"
	AuditQueryRequestServiceNameQuality string = "Quality"

	// AuditQueryRequestServiceNameResponseManagement captures enum value "ResponseManagement"
	AuditQueryRequestServiceNameResponseManagement string = "ResponseManagement"

	// AuditQueryRequestServiceNameRouting captures enum value "Routing"
	AuditQueryRequestServiceNameRouting string = "Routing"

	// AuditQueryRequestServiceNameSpeechAndTextAnalytics captures enum value "SpeechAndTextAnalytics"
	AuditQueryRequestServiceNameSpeechAndTextAnalytics string = "SpeechAndTextAnalytics"

	// AuditQueryRequestServiceNameTelephony captures enum value "Telephony"
	AuditQueryRequestServiceNameTelephony string = "Telephony"

	// AuditQueryRequestServiceNameTopicsDefinitions captures enum value "TopicsDefinitions"
	AuditQueryRequestServiceNameTopicsDefinitions string = "TopicsDefinitions"

	// AuditQueryRequestServiceNameTriggers captures enum value "Triggers"
	AuditQueryRequestServiceNameTriggers string = "Triggers"

	// AuditQueryRequestServiceNameProcessAutomation captures enum value "ProcessAutomation"
	AuditQueryRequestServiceNameProcessAutomation string = "ProcessAutomation"

	// AuditQueryRequestServiceNameWebDeployments captures enum value "WebDeployments"
	AuditQueryRequestServiceNameWebDeployments string = "WebDeployments"

	// AuditQueryRequestServiceNameWebhooks captures enum value "Webhooks"
	AuditQueryRequestServiceNameWebhooks string = "Webhooks"

	// AuditQueryRequestServiceNameWorkforceManagement captures enum value "WorkforceManagement"
	AuditQueryRequestServiceNameWorkforceManagement string = "WorkforceManagement"

	// AuditQueryRequestServiceNameMessaging captures enum value "Messaging"
	AuditQueryRequestServiceNameMessaging string = "Messaging"

	// AuditQueryRequestServiceNameSupportability captures enum value "Supportability"
	AuditQueryRequestServiceNameSupportability string = "Supportability"

	// AuditQueryRequestServiceNameCallback captures enum value "Callback"
	AuditQueryRequestServiceNameCallback string = "Callback"

	// AuditQueryRequestServiceNameWorkitems captures enum value "Workitems"
	AuditQueryRequestServiceNameWorkitems string = "Workitems"
)

// prop value enum
func (m *AuditQueryRequest) validateServiceNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, auditQueryRequestTypeServiceNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AuditQueryRequest) validateServiceName(formats strfmt.Registry) error {

	if err := validate.Required("serviceName", "body", m.ServiceName); err != nil {
		return err
	}

	// value enum
	if err := m.validateServiceNameEnum("serviceName", "body", *m.ServiceName); err != nil {
		return err
	}

	return nil
}

func (m *AuditQueryRequest) validateSort(formats strfmt.Registry) error {

	if swag.IsZero(m.Sort) { // not required
		return nil
	}

	for i := 0; i < len(m.Sort); i++ {
		if swag.IsZero(m.Sort[i]) { // not required
			continue
		}

		if m.Sort[i] != nil {
			if err := m.Sort[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sort" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditQueryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditQueryRequest) UnmarshalBinary(b []byte) error {
	var res AuditQueryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

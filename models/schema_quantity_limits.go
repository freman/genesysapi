// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SchemaQuantityLimits schema quantity limits
//
// swagger:model SchemaQuantityLimits
type SchemaQuantityLimits struct {

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The maximum number of schema field description characters allowed.
	// Read Only: true
	MaxFieldDescriptionCharacters int32 `json:"maxFieldDescriptionCharacters,omitempty"`

	// The maximum number of schema field name characters allowed.
	// Read Only: true
	MaxFieldNameCharacters int32 `json:"maxFieldNameCharacters,omitempty"`

	// The maximum number of schema fields allowed per organization across all of their schemas.
	// Read Only: true
	MaxNumberOfFieldsPerOrg int32 `json:"maxNumberOfFieldsPerOrg,omitempty"`

	// The maximum number of schema fields allowed per schema.
	// Read Only: true
	MaxNumberOfFieldsPerSchema int32 `json:"maxNumberOfFieldsPerSchema,omitempty"`

	// The maximum number of schema allowed per org.
	// Read Only: true
	MaxNumberOfSchemasPerOrg int32 `json:"maxNumberOfSchemasPerOrg,omitempty"`

	// The maximum number of schema description characters allowed.
	// Read Only: true
	MaxSchemaDescriptionCharacters int32 `json:"maxSchemaDescriptionCharacters,omitempty"`

	// The maximum number of schema name characters allowed.
	// Read Only: true
	MaxSchemaNameCharacters int32 `json:"maxSchemaNameCharacters,omitempty"`

	// The minimum number of schema field description characters allowed.
	// Read Only: true
	MinFieldDescriptionCharacters int32 `json:"minFieldDescriptionCharacters,omitempty"`

	// The minimum number of schema field name characters allowed.
	// Read Only: true
	MinFieldNameCharacters int32 `json:"minFieldNameCharacters,omitempty"`

	// The minimum number of schema description characters allowed.
	// Read Only: true
	MinSchemaDescriptionCharacters int32 `json:"minSchemaDescriptionCharacters,omitempty"`

	// The minimum number of schema name characters allowed.
	// Read Only: true
	MinSchemaNameCharacters int32 `json:"minSchemaNameCharacters,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this schema quantity limits
func (m *SchemaQuantityLimits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaQuantityLimits) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchemaQuantityLimits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchemaQuantityLimits) UnmarshalBinary(b []byte) error {
	var res SchemaQuantityLimits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

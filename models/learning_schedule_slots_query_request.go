// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LearningScheduleSlotsQueryRequest learning schedule slots query request
//
// swagger:model LearningScheduleSlotsQueryRequest
type LearningScheduleSlotsQueryRequest struct {

	// Assignment ID to exclude from consideration when determining blocked slots
	InterruptibleAssignmentID string `json:"interruptibleAssignmentId,omitempty"`

	// Range of time to get slots for scheduling learning activities. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	// Required: true
	Interval *string `json:"interval"`

	// The duration of coaching appointment to schedule in 15 minutes granularity
	// Required: true
	LengthInMinutes *int32 `json:"lengthInMinutes"`

	// The user IDs for which to fetch schedules. Must be only 1.
	// Required: true
	UserIds []string `json:"userIds"`
}

// Validate validates this learning schedule slots query request
func (m *LearningScheduleSlotsQueryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLengthInMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LearningScheduleSlotsQueryRequest) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

func (m *LearningScheduleSlotsQueryRequest) validateLengthInMinutes(formats strfmt.Registry) error {

	if err := validate.Required("lengthInMinutes", "body", m.LengthInMinutes); err != nil {
		return err
	}

	return nil
}

func (m *LearningScheduleSlotsQueryRequest) validateUserIds(formats strfmt.Registry) error {

	if err := validate.Required("userIds", "body", m.UserIds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this learning schedule slots query request based on context it is used
func (m *LearningScheduleSlotsQueryRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LearningScheduleSlotsQueryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LearningScheduleSlotsQueryRequest) UnmarshalBinary(b []byte) error {
	var res LearningScheduleSlotsQueryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

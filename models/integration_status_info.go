// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationStatusInfo Status information for an Integration.
//
// swagger:model IntegrationStatusInfo
type IntegrationStatusInfo struct {

	// Machine-readable status as reported by the integration.
	// Read Only: true
	// Enum: [ACTIVE ACTIVATING INACTIVE DEACTIVATING ERROR]
	Code string `json:"code,omitempty"`

	// Localizable status details for the integration.
	// Read Only: true
	Detail *MessageInfo `json:"detail,omitempty"`

	// Localized, human-readable, effective status of the integration.
	// Read Only: true
	Effective string `json:"effective,omitempty"`

	// Date and time (in UTC) when the integration status (i.e. the code field) was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"lastUpdated,omitempty"`
}

// Validate validates this integration status info
func (m *IntegrationStatusInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var integrationStatusInfoTypeCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","ACTIVATING","INACTIVE","DEACTIVATING","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		integrationStatusInfoTypeCodePropEnum = append(integrationStatusInfoTypeCodePropEnum, v)
	}
}

const (

	// IntegrationStatusInfoCodeACTIVE captures enum value "ACTIVE"
	IntegrationStatusInfoCodeACTIVE string = "ACTIVE"

	// IntegrationStatusInfoCodeACTIVATING captures enum value "ACTIVATING"
	IntegrationStatusInfoCodeACTIVATING string = "ACTIVATING"

	// IntegrationStatusInfoCodeINACTIVE captures enum value "INACTIVE"
	IntegrationStatusInfoCodeINACTIVE string = "INACTIVE"

	// IntegrationStatusInfoCodeDEACTIVATING captures enum value "DEACTIVATING"
	IntegrationStatusInfoCodeDEACTIVATING string = "DEACTIVATING"

	// IntegrationStatusInfoCodeERROR captures enum value "ERROR"
	IntegrationStatusInfoCodeERROR string = "ERROR"
)

// prop value enum
func (m *IntegrationStatusInfo) validateCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, integrationStatusInfoTypeCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntegrationStatusInfo) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(m.Code) { // not required
		return nil
	}

	// value enum
	if err := m.validateCodeEnum("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationStatusInfo) validateDetail(formats strfmt.Registry) error {

	if swag.IsZero(m.Detail) { // not required
		return nil
	}

	if m.Detail != nil {
		if err := m.Detail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("detail")
			}
			return err
		}
	}

	return nil
}

func (m *IntegrationStatusInfo) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationStatusInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationStatusInfo) UnmarshalBinary(b []byte) error {
	var res IntegrationStatusInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

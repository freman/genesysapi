// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BatchConversationEventRequest A maximum of 100 events are allowed per request
//
// swagger:model BatchConversationEventRequest
type BatchConversationEventRequest struct {

	// AudioUpdated events for this batch
	AudioUpdatedEvents []*AudioUpdatedEvent `json:"audioUpdatedEvents"`

	// CommunicationAnswered events for this batch
	CommunicationAnsweredEvents []*CommunicationAnsweredEvent `json:"communicationAnsweredEvents"`

	// CommunicationDispositionApplied events for this batch
	CommunicationDispositionAppliedEvents []*CommunicationDispositionAppliedEvent `json:"communicationDispositionAppliedEvents"`

	// CommunicationEnded events for this batch
	CommunicationEndedEvents []*CommunicationEndedEvent `json:"communicationEndedEvents"`

	// ConsultTransfer events for this batch
	ConsultTransferEvents []*ConsultTransferEvent `json:"consultTransferEvents"`

	// EndConsultTransfer events for this batch
	EndConsultTransferEvents []*EndConsultTransferEvent `json:"endConsultTransferEvents"`

	// EndTransfer events for this batch
	EndTransferEvents []*EndTransferEvent `json:"endTransferEvents"`

	// ExternalEstablished events for this batch
	ExternalEstablishedEvents []*ExternalEstablishedEvent `json:"externalEstablishedEvents"`

	// HoldUpdated events for this batch
	HoldUpdatedEvents []*HoldUpdatedEvent `json:"holdUpdatedEvents"`

	// IvrEstablished events for this batch
	IvrEstablishedEvents []*IvrEstablishedEvent `json:"ivrEstablishedEvents"`

	// PhoneEstablished events for this batch
	PhoneEstablishedEvents []*PhoneEstablishedEvent `json:"phoneEstablishedEvents"`

	// PhoneTransfer events for this batch
	PhoneTransferEvents []*PhoneTransferEvent `json:"phoneTransferEvents"`

	// ProgressConsultTransfer events for this batch
	ProgressConsultTransferEvents []*ProgressConsultTransferEvent `json:"progressConsultTransferEvents"`

	// ProgressTransfer events for this batch
	ProgressTransferEvents []*ProgressTransferEvent `json:"progressTransferEvents"`

	// RoutingEstablished events for this batch
	RoutingEstablishedEvents []*RoutingEstablishedEvent `json:"routingEstablishedEvents"`

	// RoutingTransfer events for this batch
	RoutingTransferEvents []*RoutingTransferEvent `json:"routingTransferEvents"`

	// UserEstablished events for this batch
	UserEstablishedEvents []*UserEstablishedEvent `json:"userEstablishedEvents"`

	// UserTransfer events for this batch
	UserTransferEvents []*UserTransferEvent `json:"userTransferEvents"`
}

// Validate validates this batch conversation event request
func (m *BatchConversationEventRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudioUpdatedEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationAnsweredEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationDispositionAppliedEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationEndedEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsultTransferEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndConsultTransferEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTransferEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalEstablishedEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHoldUpdatedEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIvrEstablishedEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneEstablishedEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneTransferEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgressConsultTransferEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgressTransferEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingEstablishedEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingTransferEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserEstablishedEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserTransferEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchConversationEventRequest) validateAudioUpdatedEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.AudioUpdatedEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.AudioUpdatedEvents); i++ {
		if swag.IsZero(m.AudioUpdatedEvents[i]) { // not required
			continue
		}

		if m.AudioUpdatedEvents[i] != nil {
			if err := m.AudioUpdatedEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("audioUpdatedEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validateCommunicationAnsweredEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.CommunicationAnsweredEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.CommunicationAnsweredEvents); i++ {
		if swag.IsZero(m.CommunicationAnsweredEvents[i]) { // not required
			continue
		}

		if m.CommunicationAnsweredEvents[i] != nil {
			if err := m.CommunicationAnsweredEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("communicationAnsweredEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validateCommunicationDispositionAppliedEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.CommunicationDispositionAppliedEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.CommunicationDispositionAppliedEvents); i++ {
		if swag.IsZero(m.CommunicationDispositionAppliedEvents[i]) { // not required
			continue
		}

		if m.CommunicationDispositionAppliedEvents[i] != nil {
			if err := m.CommunicationDispositionAppliedEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("communicationDispositionAppliedEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validateCommunicationEndedEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.CommunicationEndedEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.CommunicationEndedEvents); i++ {
		if swag.IsZero(m.CommunicationEndedEvents[i]) { // not required
			continue
		}

		if m.CommunicationEndedEvents[i] != nil {
			if err := m.CommunicationEndedEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("communicationEndedEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validateConsultTransferEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.ConsultTransferEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.ConsultTransferEvents); i++ {
		if swag.IsZero(m.ConsultTransferEvents[i]) { // not required
			continue
		}

		if m.ConsultTransferEvents[i] != nil {
			if err := m.ConsultTransferEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consultTransferEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validateEndConsultTransferEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.EndConsultTransferEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.EndConsultTransferEvents); i++ {
		if swag.IsZero(m.EndConsultTransferEvents[i]) { // not required
			continue
		}

		if m.EndConsultTransferEvents[i] != nil {
			if err := m.EndConsultTransferEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endConsultTransferEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validateEndTransferEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTransferEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.EndTransferEvents); i++ {
		if swag.IsZero(m.EndTransferEvents[i]) { // not required
			continue
		}

		if m.EndTransferEvents[i] != nil {
			if err := m.EndTransferEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endTransferEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validateExternalEstablishedEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalEstablishedEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalEstablishedEvents); i++ {
		if swag.IsZero(m.ExternalEstablishedEvents[i]) { // not required
			continue
		}

		if m.ExternalEstablishedEvents[i] != nil {
			if err := m.ExternalEstablishedEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalEstablishedEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validateHoldUpdatedEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.HoldUpdatedEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.HoldUpdatedEvents); i++ {
		if swag.IsZero(m.HoldUpdatedEvents[i]) { // not required
			continue
		}

		if m.HoldUpdatedEvents[i] != nil {
			if err := m.HoldUpdatedEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("holdUpdatedEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validateIvrEstablishedEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.IvrEstablishedEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.IvrEstablishedEvents); i++ {
		if swag.IsZero(m.IvrEstablishedEvents[i]) { // not required
			continue
		}

		if m.IvrEstablishedEvents[i] != nil {
			if err := m.IvrEstablishedEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ivrEstablishedEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validatePhoneEstablishedEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneEstablishedEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.PhoneEstablishedEvents); i++ {
		if swag.IsZero(m.PhoneEstablishedEvents[i]) { // not required
			continue
		}

		if m.PhoneEstablishedEvents[i] != nil {
			if err := m.PhoneEstablishedEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phoneEstablishedEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validatePhoneTransferEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneTransferEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.PhoneTransferEvents); i++ {
		if swag.IsZero(m.PhoneTransferEvents[i]) { // not required
			continue
		}

		if m.PhoneTransferEvents[i] != nil {
			if err := m.PhoneTransferEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phoneTransferEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validateProgressConsultTransferEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.ProgressConsultTransferEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.ProgressConsultTransferEvents); i++ {
		if swag.IsZero(m.ProgressConsultTransferEvents[i]) { // not required
			continue
		}

		if m.ProgressConsultTransferEvents[i] != nil {
			if err := m.ProgressConsultTransferEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("progressConsultTransferEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validateProgressTransferEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.ProgressTransferEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.ProgressTransferEvents); i++ {
		if swag.IsZero(m.ProgressTransferEvents[i]) { // not required
			continue
		}

		if m.ProgressTransferEvents[i] != nil {
			if err := m.ProgressTransferEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("progressTransferEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validateRoutingEstablishedEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutingEstablishedEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.RoutingEstablishedEvents); i++ {
		if swag.IsZero(m.RoutingEstablishedEvents[i]) { // not required
			continue
		}

		if m.RoutingEstablishedEvents[i] != nil {
			if err := m.RoutingEstablishedEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routingEstablishedEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validateRoutingTransferEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutingTransferEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.RoutingTransferEvents); i++ {
		if swag.IsZero(m.RoutingTransferEvents[i]) { // not required
			continue
		}

		if m.RoutingTransferEvents[i] != nil {
			if err := m.RoutingTransferEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routingTransferEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validateUserEstablishedEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.UserEstablishedEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.UserEstablishedEvents); i++ {
		if swag.IsZero(m.UserEstablishedEvents[i]) { // not required
			continue
		}

		if m.UserEstablishedEvents[i] != nil {
			if err := m.UserEstablishedEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userEstablishedEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchConversationEventRequest) validateUserTransferEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.UserTransferEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.UserTransferEvents); i++ {
		if swag.IsZero(m.UserTransferEvents[i]) { // not required
			continue
		}

		if m.UserTransferEvents[i] != nil {
			if err := m.UserTransferEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userTransferEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BatchConversationEventRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BatchConversationEventRequest) UnmarshalBinary(b []byte) error {
	var res BatchConversationEventRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CoachingSlotsRequest coaching slots request
//
// swagger:model CoachingSlotsRequest
type CoachingSlotsRequest struct {

	// List of attendees to determine coaching appointment slots
	// Required: true
	// Unique: true
	AttendeeIds []string `json:"attendeeIds"`

	// List of facilitators to determine coaching appointment slots
	// Unique: true
	FacilitatorIds []string `json:"facilitatorIds"`

	// Range of time to get slots for scheduling coaching appointments. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	// Required: true
	Interval *string `json:"interval"`

	// The duration of coaching appointment to schedule in 15 minutes granularity up to maximum of 60 minutes
	// Required: true
	LengthInMinutes *int32 `json:"lengthInMinutes"`
}

// Validate validates this coaching slots request
func (m *CoachingSlotsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttendeeIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFacilitatorIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLengthInMinutes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CoachingSlotsRequest) validateAttendeeIds(formats strfmt.Registry) error {

	if err := validate.Required("attendeeIds", "body", m.AttendeeIds); err != nil {
		return err
	}

	if err := validate.UniqueItems("attendeeIds", "body", m.AttendeeIds); err != nil {
		return err
	}

	return nil
}

func (m *CoachingSlotsRequest) validateFacilitatorIds(formats strfmt.Registry) error {

	if swag.IsZero(m.FacilitatorIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("facilitatorIds", "body", m.FacilitatorIds); err != nil {
		return err
	}

	return nil
}

func (m *CoachingSlotsRequest) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

func (m *CoachingSlotsRequest) validateLengthInMinutes(formats strfmt.Registry) error {

	if err := validate.Required("lengthInMinutes", "body", m.LengthInMinutes); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CoachingSlotsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoachingSlotsRequest) UnmarshalBinary(b []byte) error {
	var res CoachingSlotsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

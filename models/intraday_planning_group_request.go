// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntradayPlanningGroupRequest intraday planning group request
//
// swagger:model IntradayPlanningGroupRequest
type IntradayPlanningGroupRequest struct {

	// Requested date in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Required: true
	// Format: date
	BusinessUnitDate *strfmt.Date `json:"businessUnitDate"`

	// The metric categories
	// Required: true
	Categories []string `json:"categories"`

	// The period/interval in minutes for which to aggregate the data. Required, defaults to 15
	IntervalLengthMinutes int32 `json:"intervalLengthMinutes,omitempty"`

	// The IDs of the planning groups for which to fetch data.  Omitting or passing an empty list will return all available planning groups
	PlanningGroupIds []string `json:"planningGroupIds"`
}

// Validate validates this intraday planning group request
func (m *IntradayPlanningGroupRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessUnitDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntradayPlanningGroupRequest) validateBusinessUnitDate(formats strfmt.Registry) error {

	if err := validate.Required("businessUnitDate", "body", m.BusinessUnitDate); err != nil {
		return err
	}

	if err := validate.FormatOf("businessUnitDate", "body", "date", m.BusinessUnitDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var intradayPlanningGroupRequestCategoriesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ForecastData","ScheduleData","PerformancePredictionData"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		intradayPlanningGroupRequestCategoriesItemsEnum = append(intradayPlanningGroupRequestCategoriesItemsEnum, v)
	}
}

func (m *IntradayPlanningGroupRequest) validateCategoriesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, intradayPlanningGroupRequestCategoriesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntradayPlanningGroupRequest) validateCategories(formats strfmt.Registry) error {

	if err := validate.Required("categories", "body", m.Categories); err != nil {
		return err
	}

	for i := 0; i < len(m.Categories); i++ {

		// value enum
		if err := m.validateCategoriesItemsEnum("categories"+"."+strconv.Itoa(i), "body", m.Categories[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntradayPlanningGroupRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntradayPlanningGroupRequest) UnmarshalBinary(b []byte) error {
	var res IntradayPlanningGroupRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

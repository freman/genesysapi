// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CallableContactsDiagnostic callable contacts diagnostic
//
// swagger:model CallableContactsDiagnostic
type CallableContactsDiagnostic struct {

	// Attempt limits for the campaign's contact list
	// Read Only: true
	AttemptLimits *DomainEntityRef `json:"attemptLimits,omitempty"`

	// Callable time sets for the campaign
	// Read Only: true
	CallableTimeSet *DomainEntityRef `json:"callableTimeSet,omitempty"`

	// Do not call lists for the campaign
	// Read Only: true
	DncLists []*DomainEntityRef `json:"dncLists"`

	// Rule sets for the campaign
	// Read Only: true
	RuleSets []*DomainEntityRef `json:"ruleSets"`
}

// Validate validates this callable contacts diagnostic
func (m *CallableContactsDiagnostic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttemptLimits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallableTimeSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDncLists(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleSets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CallableContactsDiagnostic) validateAttemptLimits(formats strfmt.Registry) error {

	if swag.IsZero(m.AttemptLimits) { // not required
		return nil
	}

	if m.AttemptLimits != nil {
		if err := m.AttemptLimits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attemptLimits")
			}
			return err
		}
	}

	return nil
}

func (m *CallableContactsDiagnostic) validateCallableTimeSet(formats strfmt.Registry) error {

	if swag.IsZero(m.CallableTimeSet) { // not required
		return nil
	}

	if m.CallableTimeSet != nil {
		if err := m.CallableTimeSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("callableTimeSet")
			}
			return err
		}
	}

	return nil
}

func (m *CallableContactsDiagnostic) validateDncLists(formats strfmt.Registry) error {

	if swag.IsZero(m.DncLists) { // not required
		return nil
	}

	for i := 0; i < len(m.DncLists); i++ {
		if swag.IsZero(m.DncLists[i]) { // not required
			continue
		}

		if m.DncLists[i] != nil {
			if err := m.DncLists[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dncLists" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CallableContactsDiagnostic) validateRuleSets(formats strfmt.Registry) error {

	if swag.IsZero(m.RuleSets) { // not required
		return nil
	}

	for i := 0; i < len(m.RuleSets); i++ {
		if swag.IsZero(m.RuleSets[i]) { // not required
			continue
		}

		if m.RuleSets[i] != nil {
			if err := m.RuleSets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ruleSets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CallableContactsDiagnostic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CallableContactsDiagnostic) UnmarshalBinary(b []byte) error {
	var res CallableContactsDiagnostic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActionTemplate action template
//
// swagger:model ActionTemplate
type ActionTemplate struct {

	// Properties used to configure an action of type content offer
	ContentOffer *ContentOffer `json:"contentOffer,omitempty"`

	// Date when action template was created in ISO-8601 format.
	// Read Only: true
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// Description of the action template's functionality.
	Description string `json:"description,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Media type of action described by the action template.
	// Required: true
	// Enum: [webchat webMessagingOffer contentOffer integrationAction architectFlow openAction]
	MediaType *string `json:"mediaType"`

	// Date when action template was last modified in ISO-8601 format.
	// Read Only: true
	// Format: date-time
	ModifiedDate strfmt.DateTime `json:"modifiedDate,omitempty"`

	// Name of the action template.
	// Required: true
	Name *string `json:"name"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Whether the action template is currently active, inactive or deleted.
	// Required: true
	// Enum: [Active Inactive Deleted]
	State *string `json:"state"`

	// The version of the action template.
	// Read Only: true
	Version int32 `json:"version,omitempty"`
}

// Validate validates this action template
func (m *ActionTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentOffer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActionTemplate) validateContentOffer(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentOffer) { // not required
		return nil
	}

	if m.ContentOffer != nil {
		if err := m.ContentOffer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentOffer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentOffer")
			}
			return err
		}
	}

	return nil
}

func (m *ActionTemplate) validateCreatedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var actionTemplateTypeMediaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["webchat","webMessagingOffer","contentOffer","integrationAction","architectFlow","openAction"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionTemplateTypeMediaTypePropEnum = append(actionTemplateTypeMediaTypePropEnum, v)
	}
}

const (

	// ActionTemplateMediaTypeWebchat captures enum value "webchat"
	ActionTemplateMediaTypeWebchat string = "webchat"

	// ActionTemplateMediaTypeWebMessagingOffer captures enum value "webMessagingOffer"
	ActionTemplateMediaTypeWebMessagingOffer string = "webMessagingOffer"

	// ActionTemplateMediaTypeContentOffer captures enum value "contentOffer"
	ActionTemplateMediaTypeContentOffer string = "contentOffer"

	// ActionTemplateMediaTypeIntegrationAction captures enum value "integrationAction"
	ActionTemplateMediaTypeIntegrationAction string = "integrationAction"

	// ActionTemplateMediaTypeArchitectFlow captures enum value "architectFlow"
	ActionTemplateMediaTypeArchitectFlow string = "architectFlow"

	// ActionTemplateMediaTypeOpenAction captures enum value "openAction"
	ActionTemplateMediaTypeOpenAction string = "openAction"
)

// prop value enum
func (m *ActionTemplate) validateMediaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, actionTemplateTypeMediaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActionTemplate) validateMediaType(formats strfmt.Registry) error {

	if err := validate.Required("mediaType", "body", m.MediaType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMediaTypeEnum("mediaType", "body", *m.MediaType); err != nil {
		return err
	}

	return nil
}

func (m *ActionTemplate) validateModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedDate", "body", "date-time", m.ModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ActionTemplate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ActionTemplate) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var actionTemplateTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive","Deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionTemplateTypeStatePropEnum = append(actionTemplateTypeStatePropEnum, v)
	}
}

const (

	// ActionTemplateStateActive captures enum value "Active"
	ActionTemplateStateActive string = "Active"

	// ActionTemplateStateInactive captures enum value "Inactive"
	ActionTemplateStateInactive string = "Inactive"

	// ActionTemplateStateDeleted captures enum value "Deleted"
	ActionTemplateStateDeleted string = "Deleted"
)

// prop value enum
func (m *ActionTemplate) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, actionTemplateTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActionTemplate) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this action template based on the context it is used
func (m *ActionTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContentOffer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifiedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActionTemplate) contextValidateContentOffer(ctx context.Context, formats strfmt.Registry) error {

	if m.ContentOffer != nil {
		if err := m.ContentOffer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentOffer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentOffer")
			}
			return err
		}
	}

	return nil
}

func (m *ActionTemplate) contextValidateCreatedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdDate", "body", strfmt.DateTime(m.CreatedDate)); err != nil {
		return err
	}

	return nil
}

func (m *ActionTemplate) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ActionTemplate) contextValidateModifiedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "modifiedDate", "body", strfmt.DateTime(m.ModifiedDate)); err != nil {
		return err
	}

	return nil
}

func (m *ActionTemplate) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *ActionTemplate) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "version", "body", int32(m.Version)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActionTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActionTemplate) UnmarshalBinary(b []byte) error {
	var res ActionTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShiftTradeActivityPreviewResponse shift trade activity preview response
//
// swagger:model ShiftTradeActivityPreviewResponse
type ShiftTradeActivityPreviewResponse struct {

	// The ID of the activity code for this activity
	ActivityCodeID string `json:"activityCodeId,omitempty"`

	// Whether this activity counts as paid time
	CountsAsPaidTime bool `json:"countsAsPaidTime"`

	// The length in minutes of this activity
	LengthMinutes int32 `json:"lengthMinutes,omitempty"`

	// The start date and time of this activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`
}

// Validate validates this shift trade activity preview response
func (m *ShiftTradeActivityPreviewResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShiftTradeActivityPreviewResponse) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShiftTradeActivityPreviewResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShiftTradeActivityPreviewResponse) UnmarshalBinary(b []byte) error {
	var res ShiftTradeActivityPreviewResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

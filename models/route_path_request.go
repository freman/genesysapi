// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoutePathRequest route path request
//
// swagger:model RoutePathRequest
type RoutePathRequest struct {

	// The ID of the language to associate with the route path
	LanguageID string `json:"languageId,omitempty"`

	// The media type of the given queue to associate with the route path
	// Required: true
	// Enum: [Voice Chat Email Callback Message]
	MediaType *string `json:"mediaType"`

	// The ID of the queue to associate with the route path
	// Required: true
	QueueID *string `json:"queueId"`

	// The set of skill IDs to associate with the route path
	// Unique: true
	SkillIds []string `json:"skillIds"`

	// The planning group from which to take route paths. This property is only needed if a route path already exists in another planning group.Note that taking a route path from another planning group will modify the other planning group
	SourcePlanningGroup *SourcePlanningGroupRequest `json:"sourcePlanningGroup,omitempty"`
}

// Validate validates this route path request
func (m *RoutePathRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkillIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourcePlanningGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var routePathRequestTypeMediaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Voice","Chat","Email","Callback","Message"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routePathRequestTypeMediaTypePropEnum = append(routePathRequestTypeMediaTypePropEnum, v)
	}
}

const (

	// RoutePathRequestMediaTypeVoice captures enum value "Voice"
	RoutePathRequestMediaTypeVoice string = "Voice"

	// RoutePathRequestMediaTypeChat captures enum value "Chat"
	RoutePathRequestMediaTypeChat string = "Chat"

	// RoutePathRequestMediaTypeEmail captures enum value "Email"
	RoutePathRequestMediaTypeEmail string = "Email"

	// RoutePathRequestMediaTypeCallback captures enum value "Callback"
	RoutePathRequestMediaTypeCallback string = "Callback"

	// RoutePathRequestMediaTypeMessage captures enum value "Message"
	RoutePathRequestMediaTypeMessage string = "Message"
)

// prop value enum
func (m *RoutePathRequest) validateMediaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routePathRequestTypeMediaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RoutePathRequest) validateMediaType(formats strfmt.Registry) error {

	if err := validate.Required("mediaType", "body", m.MediaType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMediaTypeEnum("mediaType", "body", *m.MediaType); err != nil {
		return err
	}

	return nil
}

func (m *RoutePathRequest) validateQueueID(formats strfmt.Registry) error {

	if err := validate.Required("queueId", "body", m.QueueID); err != nil {
		return err
	}

	return nil
}

func (m *RoutePathRequest) validateSkillIds(formats strfmt.Registry) error {

	if swag.IsZero(m.SkillIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("skillIds", "body", m.SkillIds); err != nil {
		return err
	}

	return nil
}

func (m *RoutePathRequest) validateSourcePlanningGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.SourcePlanningGroup) { // not required
		return nil
	}

	if m.SourcePlanningGroup != nil {
		if err := m.SourcePlanningGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourcePlanningGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoutePathRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoutePathRequest) UnmarshalBinary(b []byte) error {
	var res RoutePathRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

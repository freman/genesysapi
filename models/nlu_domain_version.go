// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NluDomainVersion nlu domain version
//
// swagger:model NluDomainVersion
type NluDomainVersion struct {

	// The date when the NLU domain version was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The date when the NLU domain version was updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The date when the NLU domain version was published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Read Only: true
	// Format: date-time
	DatePublished strfmt.DateTime `json:"datePublished,omitempty"`

	// The date when the NLU domain version was trained. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Read Only: true
	// Format: date-time
	DateTrained strfmt.DateTime `json:"dateTrained,omitempty"`

	// The description of the NLU domain version.
	Description string `json:"description,omitempty"`

	// The NLU domain of the version.
	// Read Only: true
	Domain *NluDomain `json:"domain,omitempty"`

	// The entity types defined for this NLU domain version.
	EntityTypes []*NamedEntityTypeDefinition `json:"entityTypes"`

	// The evaluation status of the NLU domain version.
	// Read Only: true
	// Enum: [Unevaluated Evaluating Evaluated Error]
	EvaluationStatus string `json:"evaluationStatus,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The intents defined for this NLU domain version.
	Intents []*IntentDefinition `json:"intents"`

	// The language that the NLU domain version supports.
	// Required: true
	Language *string `json:"language"`

	// Whether this NLU domain version has been published.
	// Read Only: true
	Published *bool `json:"published,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The training status of the NLU domain version.
	// Read Only: true
	// Enum: [Untrained Training Trained Error Unknown]
	TrainingStatus string `json:"trainingStatus,omitempty"`
}

// Validate validates this nlu domain version
func (m *NluDomainVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatePublished(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateTrained(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvaluationStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainingStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NluDomainVersion) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NluDomainVersion) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NluDomainVersion) validateDatePublished(formats strfmt.Registry) error {

	if swag.IsZero(m.DatePublished) { // not required
		return nil
	}

	if err := validate.FormatOf("datePublished", "body", "date-time", m.DatePublished.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NluDomainVersion) validateDateTrained(formats strfmt.Registry) error {

	if swag.IsZero(m.DateTrained) { // not required
		return nil
	}

	if err := validate.FormatOf("dateTrained", "body", "date-time", m.DateTrained.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NluDomainVersion) validateDomain(formats strfmt.Registry) error {

	if swag.IsZero(m.Domain) { // not required
		return nil
	}

	if m.Domain != nil {
		if err := m.Domain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

func (m *NluDomainVersion) validateEntityTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.EntityTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityTypes); i++ {
		if swag.IsZero(m.EntityTypes[i]) { // not required
			continue
		}

		if m.EntityTypes[i] != nil {
			if err := m.EntityTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entityTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var nluDomainVersionTypeEvaluationStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unevaluated","Evaluating","Evaluated","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nluDomainVersionTypeEvaluationStatusPropEnum = append(nluDomainVersionTypeEvaluationStatusPropEnum, v)
	}
}

const (

	// NluDomainVersionEvaluationStatusUnevaluated captures enum value "Unevaluated"
	NluDomainVersionEvaluationStatusUnevaluated string = "Unevaluated"

	// NluDomainVersionEvaluationStatusEvaluating captures enum value "Evaluating"
	NluDomainVersionEvaluationStatusEvaluating string = "Evaluating"

	// NluDomainVersionEvaluationStatusEvaluated captures enum value "Evaluated"
	NluDomainVersionEvaluationStatusEvaluated string = "Evaluated"

	// NluDomainVersionEvaluationStatusError captures enum value "Error"
	NluDomainVersionEvaluationStatusError string = "Error"
)

// prop value enum
func (m *NluDomainVersion) validateEvaluationStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nluDomainVersionTypeEvaluationStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NluDomainVersion) validateEvaluationStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.EvaluationStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateEvaluationStatusEnum("evaluationStatus", "body", m.EvaluationStatus); err != nil {
		return err
	}

	return nil
}

func (m *NluDomainVersion) validateIntents(formats strfmt.Registry) error {

	if swag.IsZero(m.Intents) { // not required
		return nil
	}

	for i := 0; i < len(m.Intents); i++ {
		if swag.IsZero(m.Intents[i]) { // not required
			continue
		}

		if m.Intents[i] != nil {
			if err := m.Intents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NluDomainVersion) validateLanguage(formats strfmt.Registry) error {

	if err := validate.Required("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

func (m *NluDomainVersion) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var nluDomainVersionTypeTrainingStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Untrained","Training","Trained","Error","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nluDomainVersionTypeTrainingStatusPropEnum = append(nluDomainVersionTypeTrainingStatusPropEnum, v)
	}
}

const (

	// NluDomainVersionTrainingStatusUntrained captures enum value "Untrained"
	NluDomainVersionTrainingStatusUntrained string = "Untrained"

	// NluDomainVersionTrainingStatusTraining captures enum value "Training"
	NluDomainVersionTrainingStatusTraining string = "Training"

	// NluDomainVersionTrainingStatusTrained captures enum value "Trained"
	NluDomainVersionTrainingStatusTrained string = "Trained"

	// NluDomainVersionTrainingStatusError captures enum value "Error"
	NluDomainVersionTrainingStatusError string = "Error"

	// NluDomainVersionTrainingStatusUnknown captures enum value "Unknown"
	NluDomainVersionTrainingStatusUnknown string = "Unknown"
)

// prop value enum
func (m *NluDomainVersion) validateTrainingStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nluDomainVersionTypeTrainingStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NluDomainVersion) validateTrainingStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.TrainingStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateTrainingStatusEnum("trainingStatus", "body", m.TrainingStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NluDomainVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NluDomainVersion) UnmarshalBinary(b []byte) error {
	var res NluDomainVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

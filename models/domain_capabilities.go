// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainCapabilities domain capabilities
//
// swagger:model DomainCapabilities
type DomainCapabilities struct {

	// True if the metric is being calculated automatically for the address family on this interface.
	AutoMetric bool `json:"autoMetric"`

	// True if this address family on the interface is using DHCP.
	Dhcp bool `json:"dhcp"`

	// True if this address family on the interface is enabled.
	Enabled bool `json:"enabled"`

	// The metric being used for the address family on this interface. Lower values will have a higher priority. If autoMetric is true, this value will be the automatically calculated metric. To set this value be sure autoMetric is false. If no value is returned, metric configuration is not supported on this Edge.
	Metric int32 `json:"metric,omitempty"`

	// Set to true to enable this address family on this interface to respond to ping requests.
	PingEnabled bool `json:"pingEnabled"`

	// True if metric configuration is supported.
	// Read Only: true
	SupportsMetric *bool `json:"supportsMetric"`
}

// Validate validates this domain capabilities
func (m *DomainCapabilities) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this domain capabilities based on the context it is used
func (m *DomainCapabilities) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSupportsMetric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainCapabilities) contextValidateSupportsMetric(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "supportsMetric", "body", m.SupportsMetric); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainCapabilities) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainCapabilities) UnmarshalBinary(b []byte) error {
	var res DomainCapabilities
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

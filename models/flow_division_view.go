// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FlowDivisionView flow division view
//
// swagger:model FlowDivisionView
type FlowDivisionView struct {

	// debug version information if there is a debug version
	DebugVersion *FlowVersion `json:"debugVersion,omitempty"`

	// The division to which this entity belongs.
	Division *WritableDivision `json:"division,omitempty"`

	// The flow identifier
	ID string `json:"id,omitempty"`

	// json schema describing the inputs for the flow
	InputSchema *JSONSchemaDocument `json:"inputSchema,omitempty"`

	// The flow name
	// Required: true
	Name *string `json:"name"`

	// json schema describing the outputs for the flow
	OutputSchema *JSONSchemaDocument `json:"outputSchema,omitempty"`

	// published version information if there is a published version
	PublishedVersion *FlowVersion `json:"publishedVersion,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// type
	// Enum: [BOT COMMONMODULE INBOUNDCALL INBOUNDCHAT INBOUNDEMAIL INBOUNDSHORTMESSAGE INQUEUECALL INQUEUEEMAIL INQUEUESHORTMESSAGE OUTBOUNDCALL SECURECALL SPEECH SURVEYINVITE WORKFLOW WORKITEM]
	Type string `json:"type,omitempty"`
}

// Validate validates this flow division view
func (m *FlowDivisionView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDebugVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlowDivisionView) validateDebugVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.DebugVersion) { // not required
		return nil
	}

	if m.DebugVersion != nil {
		if err := m.DebugVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debugVersion")
			}
			return err
		}
	}

	return nil
}

func (m *FlowDivisionView) validateDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if m.Division != nil {
		if err := m.Division.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

func (m *FlowDivisionView) validateInputSchema(formats strfmt.Registry) error {

	if swag.IsZero(m.InputSchema) { // not required
		return nil
	}

	if m.InputSchema != nil {
		if err := m.InputSchema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputSchema")
			}
			return err
		}
	}

	return nil
}

func (m *FlowDivisionView) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FlowDivisionView) validateOutputSchema(formats strfmt.Registry) error {

	if swag.IsZero(m.OutputSchema) { // not required
		return nil
	}

	if m.OutputSchema != nil {
		if err := m.OutputSchema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outputSchema")
			}
			return err
		}
	}

	return nil
}

func (m *FlowDivisionView) validatePublishedVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.PublishedVersion) { // not required
		return nil
	}

	if m.PublishedVersion != nil {
		if err := m.PublishedVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publishedVersion")
			}
			return err
		}
	}

	return nil
}

func (m *FlowDivisionView) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var flowDivisionViewTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BOT","COMMONMODULE","INBOUNDCALL","INBOUNDCHAT","INBOUNDEMAIL","INBOUNDSHORTMESSAGE","INQUEUECALL","INQUEUEEMAIL","INQUEUESHORTMESSAGE","OUTBOUNDCALL","SECURECALL","SPEECH","SURVEYINVITE","WORKFLOW","WORKITEM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		flowDivisionViewTypeTypePropEnum = append(flowDivisionViewTypeTypePropEnum, v)
	}
}

const (

	// FlowDivisionViewTypeBOT captures enum value "BOT"
	FlowDivisionViewTypeBOT string = "BOT"

	// FlowDivisionViewTypeCOMMONMODULE captures enum value "COMMONMODULE"
	FlowDivisionViewTypeCOMMONMODULE string = "COMMONMODULE"

	// FlowDivisionViewTypeINBOUNDCALL captures enum value "INBOUNDCALL"
	FlowDivisionViewTypeINBOUNDCALL string = "INBOUNDCALL"

	// FlowDivisionViewTypeINBOUNDCHAT captures enum value "INBOUNDCHAT"
	FlowDivisionViewTypeINBOUNDCHAT string = "INBOUNDCHAT"

	// FlowDivisionViewTypeINBOUNDEMAIL captures enum value "INBOUNDEMAIL"
	FlowDivisionViewTypeINBOUNDEMAIL string = "INBOUNDEMAIL"

	// FlowDivisionViewTypeINBOUNDSHORTMESSAGE captures enum value "INBOUNDSHORTMESSAGE"
	FlowDivisionViewTypeINBOUNDSHORTMESSAGE string = "INBOUNDSHORTMESSAGE"

	// FlowDivisionViewTypeINQUEUECALL captures enum value "INQUEUECALL"
	FlowDivisionViewTypeINQUEUECALL string = "INQUEUECALL"

	// FlowDivisionViewTypeINQUEUEEMAIL captures enum value "INQUEUEEMAIL"
	FlowDivisionViewTypeINQUEUEEMAIL string = "INQUEUEEMAIL"

	// FlowDivisionViewTypeINQUEUESHORTMESSAGE captures enum value "INQUEUESHORTMESSAGE"
	FlowDivisionViewTypeINQUEUESHORTMESSAGE string = "INQUEUESHORTMESSAGE"

	// FlowDivisionViewTypeOUTBOUNDCALL captures enum value "OUTBOUNDCALL"
	FlowDivisionViewTypeOUTBOUNDCALL string = "OUTBOUNDCALL"

	// FlowDivisionViewTypeSECURECALL captures enum value "SECURECALL"
	FlowDivisionViewTypeSECURECALL string = "SECURECALL"

	// FlowDivisionViewTypeSPEECH captures enum value "SPEECH"
	FlowDivisionViewTypeSPEECH string = "SPEECH"

	// FlowDivisionViewTypeSURVEYINVITE captures enum value "SURVEYINVITE"
	FlowDivisionViewTypeSURVEYINVITE string = "SURVEYINVITE"

	// FlowDivisionViewTypeWORKFLOW captures enum value "WORKFLOW"
	FlowDivisionViewTypeWORKFLOW string = "WORKFLOW"

	// FlowDivisionViewTypeWORKITEM captures enum value "WORKITEM"
	FlowDivisionViewTypeWORKITEM string = "WORKITEM"
)

// prop value enum
func (m *FlowDivisionView) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, flowDivisionViewTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FlowDivisionView) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FlowDivisionView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlowDivisionView) UnmarshalBinary(b []byte) error {
	var res FlowDivisionView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

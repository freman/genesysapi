// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SurveyForm survey form
//
// swagger:model SurveyForm
type SurveyForm struct {

	// Unique Id for all versions of this form
	// Required: true
	// Read Only: true
	ContextID string `json:"contextId"`

	// Is this form disabled
	Disabled bool `json:"disabled"`

	// Markdown text for the bottom of the form.
	Footer string `json:"footer,omitempty"`

	// Markdown text for the top of the form.
	Header string `json:"header,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Language for survey viewer localization. Currently localized languages: da, de, en-US, es, fi, fr, it, ja, ko, nl, no, pl, pt-BR, sv, th, tr, zh-CH, zh-TW
	// Required: true
	Language *string `json:"language"`

	// Last modified date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	ModifiedDate strfmt.DateTime `json:"modifiedDate,omitempty"`

	// The survey form name
	// Required: true
	Name *string `json:"name"`

	// Is this form published
	Published bool `json:"published"`

	// List of published version of this form
	// Read Only: true
	PublishedVersions *DomainEntityListingSurveyForm `json:"publishedVersions,omitempty"`

	// A list of question groups
	QuestionGroups []*SurveyQuestionGroup `json:"questionGroups"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this survey form
func (m *SurveyForm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContextID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuestionGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SurveyForm) validateContextID(formats strfmt.Registry) error {

	if err := validate.RequiredString("contextId", "body", m.ContextID); err != nil {
		return err
	}

	return nil
}

func (m *SurveyForm) validateLanguage(formats strfmt.Registry) error {

	if err := validate.Required("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

func (m *SurveyForm) validateModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedDate", "body", "date-time", m.ModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SurveyForm) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SurveyForm) validatePublishedVersions(formats strfmt.Registry) error {
	if swag.IsZero(m.PublishedVersions) { // not required
		return nil
	}

	if m.PublishedVersions != nil {
		if err := m.PublishedVersions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publishedVersions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publishedVersions")
			}
			return err
		}
	}

	return nil
}

func (m *SurveyForm) validateQuestionGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.QuestionGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.QuestionGroups); i++ {
		if swag.IsZero(m.QuestionGroups[i]) { // not required
			continue
		}

		if m.QuestionGroups[i] != nil {
			if err := m.QuestionGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("questionGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("questionGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SurveyForm) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this survey form based on the context it is used
func (m *SurveyForm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContextID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifiedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublishedVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuestionGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SurveyForm) contextValidateContextID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "contextId", "body", string(m.ContextID)); err != nil {
		return err
	}

	return nil
}

func (m *SurveyForm) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *SurveyForm) contextValidateModifiedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "modifiedDate", "body", strfmt.DateTime(m.ModifiedDate)); err != nil {
		return err
	}

	return nil
}

func (m *SurveyForm) contextValidatePublishedVersions(ctx context.Context, formats strfmt.Registry) error {

	if m.PublishedVersions != nil {
		if err := m.PublishedVersions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publishedVersions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publishedVersions")
			}
			return err
		}
	}

	return nil
}

func (m *SurveyForm) contextValidateQuestionGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.QuestionGroups); i++ {

		if m.QuestionGroups[i] != nil {
			if err := m.QuestionGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("questionGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("questionGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SurveyForm) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SurveyForm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SurveyForm) UnmarshalBinary(b []byte) error {
	var res SurveyForm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LockInfo lock info
//
// swagger:model LockInfo
type LockInfo struct {

	// action
	// Enum: [UPDATE DELETE COPY MOVE REPLACE THUMBNAIL TEXT_EXTRACTION]
	Action string `json:"action,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	DateExpires strfmt.DateTime `json:"dateExpires,omitempty"`

	// locked by
	LockedBy *DomainEntityRef `json:"lockedBy,omitempty"`
}

// Validate validates this lock info
func (m *LockInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lockInfoTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UPDATE","DELETE","COPY","MOVE","REPLACE","THUMBNAIL","TEXT_EXTRACTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lockInfoTypeActionPropEnum = append(lockInfoTypeActionPropEnum, v)
	}
}

const (

	// LockInfoActionUPDATE captures enum value "UPDATE"
	LockInfoActionUPDATE string = "UPDATE"

	// LockInfoActionDELETE captures enum value "DELETE"
	LockInfoActionDELETE string = "DELETE"

	// LockInfoActionCOPY captures enum value "COPY"
	LockInfoActionCOPY string = "COPY"

	// LockInfoActionMOVE captures enum value "MOVE"
	LockInfoActionMOVE string = "MOVE"

	// LockInfoActionREPLACE captures enum value "REPLACE"
	LockInfoActionREPLACE string = "REPLACE"

	// LockInfoActionTHUMBNAIL captures enum value "THUMBNAIL"
	LockInfoActionTHUMBNAIL string = "THUMBNAIL"

	// LockInfoActionTEXTEXTRACTION captures enum value "TEXT_EXTRACTION"
	LockInfoActionTEXTEXTRACTION string = "TEXT_EXTRACTION"
)

// prop value enum
func (m *LockInfo) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lockInfoTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LockInfo) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *LockInfo) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LockInfo) validateDateExpires(formats strfmt.Registry) error {

	if swag.IsZero(m.DateExpires) { // not required
		return nil
	}

	if err := validate.FormatOf("dateExpires", "body", "date-time", m.DateExpires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LockInfo) validateLockedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.LockedBy) { // not required
		return nil
	}

	if m.LockedBy != nil {
		if err := m.LockedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lockedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LockInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LockInfo) UnmarshalBinary(b []byte) error {
	var res LockInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DocumentText document text
//
// swagger:model DocumentText
type DocumentText struct {

	// The URL of the page that the hyperlink goes to.
	Hyperlink string `json:"hyperlink,omitempty"`

	// The unique list of marks (whether it is bold and/or underlined etc.) for the text.
	// Unique: true
	Marks []string `json:"marks"`

	// Text.
	// Required: true
	Text *string `json:"text"`
}

// Validate validates this document text
func (m *DocumentText) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMarks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var documentTextMarksItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Bold","Italic","Underline"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		documentTextMarksItemsEnum = append(documentTextMarksItemsEnum, v)
	}
}

func (m *DocumentText) validateMarksItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, documentTextMarksItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DocumentText) validateMarks(formats strfmt.Registry) error {

	if swag.IsZero(m.Marks) { // not required
		return nil
	}

	if err := validate.UniqueItems("marks", "body", m.Marks); err != nil {
		return err
	}

	for i := 0; i < len(m.Marks); i++ {

		// value enum
		if err := m.validateMarksItemsEnum("marks"+"."+strconv.Itoa(i), "body", m.Marks[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *DocumentText) validateText(formats strfmt.Registry) error {

	if err := validate.Required("text", "body", m.Text); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DocumentText) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DocumentText) UnmarshalBinary(b []byte) error {
	var res DocumentText
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

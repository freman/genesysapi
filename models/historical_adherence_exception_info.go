// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HistoricalAdherenceExceptionInfo historical adherence exception info
//
// swagger:model HistoricalAdherenceExceptionInfo
type HistoricalAdherenceExceptionInfo struct {

	// Activity for which the user is actually engaged
	// Enum: [OnQueueWork Break Meal Meeting OffQueueWork TimeOff Training Unavailable Unscheduled]
	ActualActivityCategory string `json:"actualActivityCategory,omitempty"`

	// Exception end offset in seconds relative to query start time
	EndOffsetSeconds int32 `json:"endOffsetSeconds,omitempty"`

	// The impact of the current adherence state for this user
	// Enum: [Positive Negative Neutral Unknown]
	Impact string `json:"impact,omitempty"`

	// Actual underlying routing status, used to determine whether a user is actually in adherence when OnQueue
	// Enum: [OFF_QUEUE IDLE INTERACTING NOT_RESPONDING COMMUNICATING]
	RoutingStatus string `json:"routingStatus,omitempty"`

	// Activity for which the user is scheduled
	// Enum: [OnQueueWork Break Meal Meeting OffQueueWork TimeOff Training Unavailable Unscheduled]
	ScheduledActivityCategory string `json:"scheduledActivityCategory,omitempty"`

	// The ID of the scheduled activity code for this user
	ScheduledActivityCodeID string `json:"scheduledActivityCodeId,omitempty"`

	// The lookup ID used to retrieve the actual secondary status from map of lookup ID to corresponding secondary presence ID
	SecondaryPresenceLookupID string `json:"secondaryPresenceLookupId,omitempty"`

	// Exception start offset in seconds relative to query start time
	StartOffsetSeconds int32 `json:"startOffsetSeconds,omitempty"`

	// Actual underlying system presence value
	// Enum: [Available Away Busy Offline Idle OnQueue Meal Training Meeting Break]
	SystemPresence string `json:"systemPresence,omitempty"`
}

// Validate validates this historical adherence exception info
func (m *HistoricalAdherenceExceptionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualActivityCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledActivityCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemPresence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var historicalAdherenceExceptionInfoTypeActualActivityCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OnQueueWork","Break","Meal","Meeting","OffQueueWork","TimeOff","Training","Unavailable","Unscheduled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historicalAdherenceExceptionInfoTypeActualActivityCategoryPropEnum = append(historicalAdherenceExceptionInfoTypeActualActivityCategoryPropEnum, v)
	}
}

const (

	// HistoricalAdherenceExceptionInfoActualActivityCategoryOnQueueWork captures enum value "OnQueueWork"
	HistoricalAdherenceExceptionInfoActualActivityCategoryOnQueueWork string = "OnQueueWork"

	// HistoricalAdherenceExceptionInfoActualActivityCategoryBreak captures enum value "Break"
	HistoricalAdherenceExceptionInfoActualActivityCategoryBreak string = "Break"

	// HistoricalAdherenceExceptionInfoActualActivityCategoryMeal captures enum value "Meal"
	HistoricalAdherenceExceptionInfoActualActivityCategoryMeal string = "Meal"

	// HistoricalAdherenceExceptionInfoActualActivityCategoryMeeting captures enum value "Meeting"
	HistoricalAdherenceExceptionInfoActualActivityCategoryMeeting string = "Meeting"

	// HistoricalAdherenceExceptionInfoActualActivityCategoryOffQueueWork captures enum value "OffQueueWork"
	HistoricalAdherenceExceptionInfoActualActivityCategoryOffQueueWork string = "OffQueueWork"

	// HistoricalAdherenceExceptionInfoActualActivityCategoryTimeOff captures enum value "TimeOff"
	HistoricalAdherenceExceptionInfoActualActivityCategoryTimeOff string = "TimeOff"

	// HistoricalAdherenceExceptionInfoActualActivityCategoryTraining captures enum value "Training"
	HistoricalAdherenceExceptionInfoActualActivityCategoryTraining string = "Training"

	// HistoricalAdherenceExceptionInfoActualActivityCategoryUnavailable captures enum value "Unavailable"
	HistoricalAdherenceExceptionInfoActualActivityCategoryUnavailable string = "Unavailable"

	// HistoricalAdherenceExceptionInfoActualActivityCategoryUnscheduled captures enum value "Unscheduled"
	HistoricalAdherenceExceptionInfoActualActivityCategoryUnscheduled string = "Unscheduled"
)

// prop value enum
func (m *HistoricalAdherenceExceptionInfo) validateActualActivityCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historicalAdherenceExceptionInfoTypeActualActivityCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HistoricalAdherenceExceptionInfo) validateActualActivityCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.ActualActivityCategory) { // not required
		return nil
	}

	// value enum
	if err := m.validateActualActivityCategoryEnum("actualActivityCategory", "body", m.ActualActivityCategory); err != nil {
		return err
	}

	return nil
}

var historicalAdherenceExceptionInfoTypeImpactPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Positive","Negative","Neutral","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historicalAdherenceExceptionInfoTypeImpactPropEnum = append(historicalAdherenceExceptionInfoTypeImpactPropEnum, v)
	}
}

const (

	// HistoricalAdherenceExceptionInfoImpactPositive captures enum value "Positive"
	HistoricalAdherenceExceptionInfoImpactPositive string = "Positive"

	// HistoricalAdherenceExceptionInfoImpactNegative captures enum value "Negative"
	HistoricalAdherenceExceptionInfoImpactNegative string = "Negative"

	// HistoricalAdherenceExceptionInfoImpactNeutral captures enum value "Neutral"
	HistoricalAdherenceExceptionInfoImpactNeutral string = "Neutral"

	// HistoricalAdherenceExceptionInfoImpactUnknown captures enum value "Unknown"
	HistoricalAdherenceExceptionInfoImpactUnknown string = "Unknown"
)

// prop value enum
func (m *HistoricalAdherenceExceptionInfo) validateImpactEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historicalAdherenceExceptionInfoTypeImpactPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HistoricalAdherenceExceptionInfo) validateImpact(formats strfmt.Registry) error {

	if swag.IsZero(m.Impact) { // not required
		return nil
	}

	// value enum
	if err := m.validateImpactEnum("impact", "body", m.Impact); err != nil {
		return err
	}

	return nil
}

var historicalAdherenceExceptionInfoTypeRoutingStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OFF_QUEUE","IDLE","INTERACTING","NOT_RESPONDING","COMMUNICATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historicalAdherenceExceptionInfoTypeRoutingStatusPropEnum = append(historicalAdherenceExceptionInfoTypeRoutingStatusPropEnum, v)
	}
}

const (

	// HistoricalAdherenceExceptionInfoRoutingStatusOFFQUEUE captures enum value "OFF_QUEUE"
	HistoricalAdherenceExceptionInfoRoutingStatusOFFQUEUE string = "OFF_QUEUE"

	// HistoricalAdherenceExceptionInfoRoutingStatusIDLE captures enum value "IDLE"
	HistoricalAdherenceExceptionInfoRoutingStatusIDLE string = "IDLE"

	// HistoricalAdherenceExceptionInfoRoutingStatusINTERACTING captures enum value "INTERACTING"
	HistoricalAdherenceExceptionInfoRoutingStatusINTERACTING string = "INTERACTING"

	// HistoricalAdherenceExceptionInfoRoutingStatusNOTRESPONDING captures enum value "NOT_RESPONDING"
	HistoricalAdherenceExceptionInfoRoutingStatusNOTRESPONDING string = "NOT_RESPONDING"

	// HistoricalAdherenceExceptionInfoRoutingStatusCOMMUNICATING captures enum value "COMMUNICATING"
	HistoricalAdherenceExceptionInfoRoutingStatusCOMMUNICATING string = "COMMUNICATING"
)

// prop value enum
func (m *HistoricalAdherenceExceptionInfo) validateRoutingStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historicalAdherenceExceptionInfoTypeRoutingStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HistoricalAdherenceExceptionInfo) validateRoutingStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutingStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoutingStatusEnum("routingStatus", "body", m.RoutingStatus); err != nil {
		return err
	}

	return nil
}

var historicalAdherenceExceptionInfoTypeScheduledActivityCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OnQueueWork","Break","Meal","Meeting","OffQueueWork","TimeOff","Training","Unavailable","Unscheduled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historicalAdherenceExceptionInfoTypeScheduledActivityCategoryPropEnum = append(historicalAdherenceExceptionInfoTypeScheduledActivityCategoryPropEnum, v)
	}
}

const (

	// HistoricalAdherenceExceptionInfoScheduledActivityCategoryOnQueueWork captures enum value "OnQueueWork"
	HistoricalAdherenceExceptionInfoScheduledActivityCategoryOnQueueWork string = "OnQueueWork"

	// HistoricalAdherenceExceptionInfoScheduledActivityCategoryBreak captures enum value "Break"
	HistoricalAdherenceExceptionInfoScheduledActivityCategoryBreak string = "Break"

	// HistoricalAdherenceExceptionInfoScheduledActivityCategoryMeal captures enum value "Meal"
	HistoricalAdherenceExceptionInfoScheduledActivityCategoryMeal string = "Meal"

	// HistoricalAdherenceExceptionInfoScheduledActivityCategoryMeeting captures enum value "Meeting"
	HistoricalAdherenceExceptionInfoScheduledActivityCategoryMeeting string = "Meeting"

	// HistoricalAdherenceExceptionInfoScheduledActivityCategoryOffQueueWork captures enum value "OffQueueWork"
	HistoricalAdherenceExceptionInfoScheduledActivityCategoryOffQueueWork string = "OffQueueWork"

	// HistoricalAdherenceExceptionInfoScheduledActivityCategoryTimeOff captures enum value "TimeOff"
	HistoricalAdherenceExceptionInfoScheduledActivityCategoryTimeOff string = "TimeOff"

	// HistoricalAdherenceExceptionInfoScheduledActivityCategoryTraining captures enum value "Training"
	HistoricalAdherenceExceptionInfoScheduledActivityCategoryTraining string = "Training"

	// HistoricalAdherenceExceptionInfoScheduledActivityCategoryUnavailable captures enum value "Unavailable"
	HistoricalAdherenceExceptionInfoScheduledActivityCategoryUnavailable string = "Unavailable"

	// HistoricalAdherenceExceptionInfoScheduledActivityCategoryUnscheduled captures enum value "Unscheduled"
	HistoricalAdherenceExceptionInfoScheduledActivityCategoryUnscheduled string = "Unscheduled"
)

// prop value enum
func (m *HistoricalAdherenceExceptionInfo) validateScheduledActivityCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historicalAdherenceExceptionInfoTypeScheduledActivityCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HistoricalAdherenceExceptionInfo) validateScheduledActivityCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.ScheduledActivityCategory) { // not required
		return nil
	}

	// value enum
	if err := m.validateScheduledActivityCategoryEnum("scheduledActivityCategory", "body", m.ScheduledActivityCategory); err != nil {
		return err
	}

	return nil
}

var historicalAdherenceExceptionInfoTypeSystemPresencePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Available","Away","Busy","Offline","Idle","OnQueue","Meal","Training","Meeting","Break"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historicalAdherenceExceptionInfoTypeSystemPresencePropEnum = append(historicalAdherenceExceptionInfoTypeSystemPresencePropEnum, v)
	}
}

const (

	// HistoricalAdherenceExceptionInfoSystemPresenceAvailable captures enum value "Available"
	HistoricalAdherenceExceptionInfoSystemPresenceAvailable string = "Available"

	// HistoricalAdherenceExceptionInfoSystemPresenceAway captures enum value "Away"
	HistoricalAdherenceExceptionInfoSystemPresenceAway string = "Away"

	// HistoricalAdherenceExceptionInfoSystemPresenceBusy captures enum value "Busy"
	HistoricalAdherenceExceptionInfoSystemPresenceBusy string = "Busy"

	// HistoricalAdherenceExceptionInfoSystemPresenceOffline captures enum value "Offline"
	HistoricalAdherenceExceptionInfoSystemPresenceOffline string = "Offline"

	// HistoricalAdherenceExceptionInfoSystemPresenceIdle captures enum value "Idle"
	HistoricalAdherenceExceptionInfoSystemPresenceIdle string = "Idle"

	// HistoricalAdherenceExceptionInfoSystemPresenceOnQueue captures enum value "OnQueue"
	HistoricalAdherenceExceptionInfoSystemPresenceOnQueue string = "OnQueue"

	// HistoricalAdherenceExceptionInfoSystemPresenceMeal captures enum value "Meal"
	HistoricalAdherenceExceptionInfoSystemPresenceMeal string = "Meal"

	// HistoricalAdherenceExceptionInfoSystemPresenceTraining captures enum value "Training"
	HistoricalAdherenceExceptionInfoSystemPresenceTraining string = "Training"

	// HistoricalAdherenceExceptionInfoSystemPresenceMeeting captures enum value "Meeting"
	HistoricalAdherenceExceptionInfoSystemPresenceMeeting string = "Meeting"

	// HistoricalAdherenceExceptionInfoSystemPresenceBreak captures enum value "Break"
	HistoricalAdherenceExceptionInfoSystemPresenceBreak string = "Break"
)

// prop value enum
func (m *HistoricalAdherenceExceptionInfo) validateSystemPresenceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historicalAdherenceExceptionInfoTypeSystemPresencePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HistoricalAdherenceExceptionInfo) validateSystemPresence(formats strfmt.Registry) error {

	if swag.IsZero(m.SystemPresence) { // not required
		return nil
	}

	// value enum
	if err := m.validateSystemPresenceEnum("systemPresence", "body", m.SystemPresence); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HistoricalAdherenceExceptionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoricalAdherenceExceptionInfo) UnmarshalBinary(b []byte) error {
	var res HistoricalAdherenceExceptionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

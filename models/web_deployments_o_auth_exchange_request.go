// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebDeploymentsOAuthExchangeRequest web deployments o auth exchange request
//
// swagger:model WebDeploymentsOAuthExchangeRequest
type WebDeploymentsOAuthExchangeRequest struct {

	// The WebDeployment ID
	// Required: true
	DeploymentID *string `json:"deploymentId"`

	// A Customer journey context.
	JourneyContext *WebDeploymentsJourneyContext `json:"journeyContext,omitempty"`

	// oauth
	Oauth *WebDeploymentsOAuthRequestParameters `json:"oauth,omitempty"`
}

// Validate validates this web deployments o auth exchange request
func (m *WebDeploymentsOAuthExchangeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeploymentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJourneyContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOauth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebDeploymentsOAuthExchangeRequest) validateDeploymentID(formats strfmt.Registry) error {

	if err := validate.Required("deploymentId", "body", m.DeploymentID); err != nil {
		return err
	}

	return nil
}

func (m *WebDeploymentsOAuthExchangeRequest) validateJourneyContext(formats strfmt.Registry) error {
	if swag.IsZero(m.JourneyContext) { // not required
		return nil
	}

	if m.JourneyContext != nil {
		if err := m.JourneyContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("journeyContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("journeyContext")
			}
			return err
		}
	}

	return nil
}

func (m *WebDeploymentsOAuthExchangeRequest) validateOauth(formats strfmt.Registry) error {
	if swag.IsZero(m.Oauth) { // not required
		return nil
	}

	if m.Oauth != nil {
		if err := m.Oauth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oauth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oauth")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this web deployments o auth exchange request based on the context it is used
func (m *WebDeploymentsOAuthExchangeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJourneyContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOauth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebDeploymentsOAuthExchangeRequest) contextValidateJourneyContext(ctx context.Context, formats strfmt.Registry) error {

	if m.JourneyContext != nil {
		if err := m.JourneyContext.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("journeyContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("journeyContext")
			}
			return err
		}
	}

	return nil
}

func (m *WebDeploymentsOAuthExchangeRequest) contextValidateOauth(ctx context.Context, formats strfmt.Registry) error {

	if m.Oauth != nil {
		if err := m.Oauth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oauth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oauth")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebDeploymentsOAuthExchangeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebDeploymentsOAuthExchangeRequest) UnmarshalBinary(b []byte) error {
	var res WebDeploymentsOAuthExchangeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

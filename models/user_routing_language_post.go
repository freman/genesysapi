// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserRoutingLanguagePost Represents an organization language assigned to a user. When assigning to a user specify the organization langauge id as the id.
//
// swagger:model UserRoutingLanguagePost
type UserRoutingLanguagePost struct {

	// The id of the existing routing language to add to the user
	// Required: true
	ID *string `json:"id"`

	// URI to the organization language used by this user language.
	// Read Only: true
	// Format: uri
	LanguageURI strfmt.URI `json:"languageUri,omitempty"`

	// Proficiency is a rating from 0.0 to 5.0 on how competent an agent is for a particular language. It is used when a queue is set to "Best available language" mode to allow acd interactions to target agents with higher proficiency ratings.
	// Required: true
	Proficiency *float64 `json:"proficiency"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this user routing language post
func (m *UserRoutingLanguagePost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProficiency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserRoutingLanguagePost) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *UserRoutingLanguagePost) validateLanguageURI(formats strfmt.Registry) error {

	if swag.IsZero(m.LanguageURI) { // not required
		return nil
	}

	if err := validate.FormatOf("languageUri", "body", "uri", m.LanguageURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserRoutingLanguagePost) validateProficiency(formats strfmt.Registry) error {

	if err := validate.Required("proficiency", "body", m.Proficiency); err != nil {
		return err
	}

	return nil
}

func (m *UserRoutingLanguagePost) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserRoutingLanguagePost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserRoutingLanguagePost) UnmarshalBinary(b []byte) error {
	var res UserRoutingLanguagePost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

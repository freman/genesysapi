// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocationCreateDefinition location create definition
//
// swagger:model LocationCreateDefinition
type LocationCreateDefinition struct {

	// Address of the location
	Address *LocationAddress `json:"address,omitempty"`

	// The user id of the location contact
	ContactUser string `json:"contactUser,omitempty"`

	// Emergency number for the location
	EmergencyNumber *LocationEmergencyNumber `json:"emergencyNumber,omitempty"`

	// The name of the Location. Required for creates, not required for updates
	// Required: true
	Name *string `json:"name"`

	// Notes for the location
	Notes string `json:"notes,omitempty"`

	// A list of ancestor ids
	Path []string `json:"path"`

	// Current activity status of the location.
	// Enum: [active deleted]
	State string `json:"state,omitempty"`

	// Current version of the location
	Version int32 `json:"version,omitempty"`
}

// Validate validates this location create definition
func (m *LocationCreateDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmergencyNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocationCreateDefinition) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *LocationCreateDefinition) validateEmergencyNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.EmergencyNumber) { // not required
		return nil
	}

	if m.EmergencyNumber != nil {
		if err := m.EmergencyNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emergencyNumber")
			}
			return err
		}
	}

	return nil
}

func (m *LocationCreateDefinition) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var locationCreateDefinitionTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		locationCreateDefinitionTypeStatePropEnum = append(locationCreateDefinitionTypeStatePropEnum, v)
	}
}

const (

	// LocationCreateDefinitionStateActive captures enum value "active"
	LocationCreateDefinitionStateActive string = "active"

	// LocationCreateDefinitionStateDeleted captures enum value "deleted"
	LocationCreateDefinitionStateDeleted string = "deleted"
)

// prop value enum
func (m *LocationCreateDefinition) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, locationCreateDefinitionTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LocationCreateDefinition) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LocationCreateDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocationCreateDefinition) UnmarshalBinary(b []byte) error {
	var res LocationCreateDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkPlanShift Shift in a work plan
//
// swagger:model WorkPlanShift
type WorkPlanShift struct {

	// Activities configured for this shift
	Activities []*WorkPlanActivity `json:"activities"`

	// Whether the contiguous time constraint for the shift is enabled
	ConstrainContiguousWorkTime bool `json:"constrainContiguousWorkTime,omitempty"`

	// Whether the latest stop time constraint for the shift is enabled
	ConstrainLatestStopTime bool `json:"constrainLatestStopTime,omitempty"`

	// Whether the latest stop time constraint for the shift is enabled.  Deprecated, use constrainLatestStopTime instead
	ConstrainStopTime bool `json:"constrainStopTime,omitempty"`

	// Days of the week applicable for this shift
	Days *SetWrapperDayOfWeek `json:"days,omitempty"`

	// If marked true for updating an existing shift, the shift will be permanently deleted
	Delete bool `json:"delete,omitempty"`

	// Earliest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true
	EarliestStartTimeMinutesFromMidnight int32 `json:"earliestStartTimeMinutesFromMidnight,omitempty"`

	// Exact paid time in minutes configured for the shift. Used if flexiblePaidTime == false
	ExactPaidTimeMinutes int32 `json:"exactPaidTimeMinutes,omitempty"`

	// Exact start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == false
	ExactStartTimeMinutesFromMidnight int32 `json:"exactStartTimeMinutesFromMidnight,omitempty"`

	// Whether the paid time setting for the shift is flexible
	FlexiblePaidTime bool `json:"flexiblePaidTime,omitempty"`

	// Whether the start time of the shift is flexible
	FlexibleStartTime bool `json:"flexibleStartTime,omitempty"`

	// ID of the shift. This is required only for the case of updating an existing shift
	ID string `json:"id,omitempty"`

	// Latest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true
	LatestStartTimeMinutesFromMidnight int32 `json:"latestStartTimeMinutesFromMidnight,omitempty"`

	// Latest stop time of the shift defined as offset minutes from midnight. Used if constrainStopTime == true
	LatestStopTimeMinutesFromMidnight int32 `json:"latestStopTimeMinutesFromMidnight,omitempty"`

	// Maximum contiguous time in minutes configured for the shift. Used if constrainContiguousWorkTime == true
	MaximumContiguousWorkTimeMinutes int32 `json:"maximumContiguousWorkTimeMinutes,omitempty"`

	// Maximum paid time in minutes configured for the shift. Used if flexiblePaidTime == true
	MaximumPaidTimeMinutes int32 `json:"maximumPaidTimeMinutes,omitempty"`

	// Minimum contiguous time in minutes configured for the shift. Used if constrainContiguousWorkTime == true
	MinimumContiguousWorkTimeMinutes int32 `json:"minimumContiguousWorkTimeMinutes,omitempty"`

	// Minimum paid time in minutes configured for the shift. Used if flexiblePaidTime == true
	MinimumPaidTimeMinutes int32 `json:"minimumPaidTimeMinutes,omitempty"`

	// Name of the shift
	// Required: true
	Name *string `json:"name"`

	// Increment in offset minutes that would contribute to different possible start times for the shift. Used if flexibleStartTime == true
	StartIncrementMinutes int32 `json:"startIncrementMinutes,omitempty"`
}

// Validate validates this work plan shift
func (m *WorkPlanShift) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkPlanShift) validateActivities(formats strfmt.Registry) error {

	if swag.IsZero(m.Activities) { // not required
		return nil
	}

	for i := 0; i < len(m.Activities); i++ {
		if swag.IsZero(m.Activities[i]) { // not required
			continue
		}

		if m.Activities[i] != nil {
			if err := m.Activities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkPlanShift) validateDays(formats strfmt.Registry) error {

	if swag.IsZero(m.Days) { // not required
		return nil
	}

	if m.Days != nil {
		if err := m.Days.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("days")
			}
			return err
		}
	}

	return nil
}

func (m *WorkPlanShift) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkPlanShift) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkPlanShift) UnmarshalBinary(b []byte) error {
	var res WorkPlanShift
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

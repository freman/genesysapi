// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WorkdayMetric workday metric
//
// swagger:model WorkdayMetric
type WorkdayMetric struct {

	// Gamification metric
	// Read Only: true
	Metric *Metric `json:"metric,omitempty"`

	// Current objective for this metric
	// Read Only: true
	Objective *Objective `json:"objective,omitempty"`

	// Gamification points earned for this metric
	// Read Only: true
	Points int32 `json:"points,omitempty"`

	// List of schedule activity events for punctuality metrics
	// Read Only: true
	PunctualityEvents []*PunctualityEvent `json:"punctualityEvents"`

	// Value of this metric
	// Read Only: true
	Value float64 `json:"value,omitempty"`
}

// Validate validates this workday metric
func (m *WorkdayMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjective(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePunctualityEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkdayMetric) validateMetric(formats strfmt.Registry) error {

	if swag.IsZero(m.Metric) { // not required
		return nil
	}

	if m.Metric != nil {
		if err := m.Metric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric")
			}
			return err
		}
	}

	return nil
}

func (m *WorkdayMetric) validateObjective(formats strfmt.Registry) error {

	if swag.IsZero(m.Objective) { // not required
		return nil
	}

	if m.Objective != nil {
		if err := m.Objective.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objective")
			}
			return err
		}
	}

	return nil
}

func (m *WorkdayMetric) validatePunctualityEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.PunctualityEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.PunctualityEvents); i++ {
		if swag.IsZero(m.PunctualityEvents[i]) { // not required
			continue
		}

		if m.PunctualityEvents[i] != nil {
			if err := m.PunctualityEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("punctualityEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkdayMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkdayMetric) UnmarshalBinary(b []byte) error {
	var res WorkdayMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CampaignProgress campaign progress
//
// swagger:model CampaignProgress
type CampaignProgress struct {

	// Identifier of the campaign
	// Required: true
	Campaign *DomainEntityRef `json:"campaign"`

	// Identifier of the contact list
	// Required: true
	ContactList *DomainEntityRef `json:"contactList"`

	// Number of contacts called during the campaign
	// Read Only: true
	NumberOfContactsCalled int64 `json:"numberOfContactsCalled,omitempty"`

	// Number of contacts messaged during the campaign
	// Read Only: true
	NumberOfContactsMessaged int64 `json:"numberOfContactsMessaged,omitempty"`

	// Percentage of contacts processed during the campaign
	// Read Only: true
	Percentage int64 `json:"percentage,omitempty"`

	// Total number of contacts in the campaign
	// Read Only: true
	TotalNumberOfContacts int64 `json:"totalNumberOfContacts,omitempty"`
}

// Validate validates this campaign progress
func (m *CampaignProgress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CampaignProgress) validateCampaign(formats strfmt.Registry) error {

	if err := validate.Required("campaign", "body", m.Campaign); err != nil {
		return err
	}

	if m.Campaign != nil {
		if err := m.Campaign.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("campaign")
			}
			return err
		}
	}

	return nil
}

func (m *CampaignProgress) validateContactList(formats strfmt.Registry) error {

	if err := validate.Required("contactList", "body", m.ContactList); err != nil {
		return err
	}

	if m.ContactList != nil {
		if err := m.ContactList.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactList")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CampaignProgress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CampaignProgress) UnmarshalBinary(b []byte) error {
	var res CampaignProgress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

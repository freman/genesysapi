// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Metric metric
//
// swagger:model Metric
type Metric struct {

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The id of associated metric definition
	// Required: true
	MetricDefinitionID *string `json:"metricDefinitionId"`

	// The name of this metric
	// Required: true
	Name *string `json:"name"`

	// Associated objective for this metric
	// Required: true
	Objective *Objective `json:"objective"`

	// Performance profile id of this metric
	// Required: true
	PerformanceProfileID *string `json:"performanceProfileId"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this metric
func (m *Metric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetricDefinitionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjective(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformanceProfileID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Metric) validateMetricDefinitionID(formats strfmt.Registry) error {

	if err := validate.Required("metricDefinitionId", "body", m.MetricDefinitionID); err != nil {
		return err
	}

	return nil
}

func (m *Metric) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Metric) validateObjective(formats strfmt.Registry) error {

	if err := validate.Required("objective", "body", m.Objective); err != nil {
		return err
	}

	if m.Objective != nil {
		if err := m.Objective.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objective")
			}
			return err
		}
	}

	return nil
}

func (m *Metric) validatePerformanceProfileID(formats strfmt.Registry) error {

	if err := validate.Required("performanceProfileId", "body", m.PerformanceProfileID); err != nil {
		return err
	}

	return nil
}

func (m *Metric) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Metric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Metric) UnmarshalBinary(b []byte) error {
	var res Metric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

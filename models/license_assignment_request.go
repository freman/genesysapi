// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LicenseAssignmentRequest license assignment request
//
// swagger:model LicenseAssignmentRequest
type LicenseAssignmentRequest struct {

	// The id of the license to assign/unassign.
	// Required: true
	LicenseID *string `json:"licenseId"`

	// The ids of users to assign this license to.
	// Required: true
	// Unique: true
	UserIdsAdd []string `json:"userIdsAdd"`

	// The ids of users to unassign this license from.
	// Required: true
	// Unique: true
	UserIdsRemove []string `json:"userIdsRemove"`
}

// Validate validates this license assignment request
func (m *LicenseAssignmentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLicenseID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserIdsAdd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserIdsRemove(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicenseAssignmentRequest) validateLicenseID(formats strfmt.Registry) error {

	if err := validate.Required("licenseId", "body", m.LicenseID); err != nil {
		return err
	}

	return nil
}

func (m *LicenseAssignmentRequest) validateUserIdsAdd(formats strfmt.Registry) error {

	if err := validate.Required("userIdsAdd", "body", m.UserIdsAdd); err != nil {
		return err
	}

	if err := validate.UniqueItems("userIdsAdd", "body", m.UserIdsAdd); err != nil {
		return err
	}

	return nil
}

func (m *LicenseAssignmentRequest) validateUserIdsRemove(formats strfmt.Registry) error {

	if err := validate.Required("userIdsRemove", "body", m.UserIdsRemove); err != nil {
		return err
	}

	if err := validate.UniqueItems("userIdsRemove", "body", m.UserIdsRemove); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicenseAssignmentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicenseAssignmentRequest) UnmarshalBinary(b []byte) error {
	var res LicenseAssignmentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AggregationResult aggregation result
//
// swagger:model AggregationResult
type AggregationResult struct {

	// count
	Count int64 `json:"count,omitempty"`

	// For termFrequency aggregations
	Dimension string `json:"dimension,omitempty"`

	// For numericRange aggregations
	Metric string `json:"metric,omitempty"`

	// results
	Results []*AggregationResultEntry `json:"results"`

	// type
	// Enum: [termFrequency numericRange]
	Type string `json:"type,omitempty"`
}

// Validate validates this aggregation result
func (m *AggregationResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AggregationResult) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var aggregationResultTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["termFrequency","numericRange"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aggregationResultTypeTypePropEnum = append(aggregationResultTypeTypePropEnum, v)
	}
}

const (

	// AggregationResultTypeTermFrequency captures enum value "termFrequency"
	AggregationResultTypeTermFrequency string = "termFrequency"

	// AggregationResultTypeNumericRange captures enum value "numericRange"
	AggregationResultTypeNumericRange string = "numericRange"
)

// prop value enum
func (m *AggregationResult) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, aggregationResultTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AggregationResult) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this aggregation result based on the context it is used
func (m *AggregationResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AggregationResult) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Results); i++ {

		if m.Results[i] != nil {
			if err := m.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AggregationResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AggregationResult) UnmarshalBinary(b []byte) error {
	var res AggregationResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

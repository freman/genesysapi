// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScorableSurvey scorable survey
//
// swagger:model ScorableSurvey
type ScorableSurvey struct {

	// answers
	Answers *SurveyScoringSet `json:"answers,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// status
	// Enum: [Pending Sent InProgress Finished OptOut Error Expired]
	Status string `json:"status,omitempty"`

	// Survey form used for this survey.
	SurveyForm *SurveyForm `json:"surveyForm,omitempty"`
}

// Validate validates this scorable survey
func (m *ScorableSurvey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnswers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSurveyForm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScorableSurvey) validateAnswers(formats strfmt.Registry) error {

	if swag.IsZero(m.Answers) { // not required
		return nil
	}

	if m.Answers != nil {
		if err := m.Answers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("answers")
			}
			return err
		}
	}

	return nil
}

func (m *ScorableSurvey) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var scorableSurveyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Sent","InProgress","Finished","OptOut","Error","Expired"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scorableSurveyTypeStatusPropEnum = append(scorableSurveyTypeStatusPropEnum, v)
	}
}

const (

	// ScorableSurveyStatusPending captures enum value "Pending"
	ScorableSurveyStatusPending string = "Pending"

	// ScorableSurveyStatusSent captures enum value "Sent"
	ScorableSurveyStatusSent string = "Sent"

	// ScorableSurveyStatusInProgress captures enum value "InProgress"
	ScorableSurveyStatusInProgress string = "InProgress"

	// ScorableSurveyStatusFinished captures enum value "Finished"
	ScorableSurveyStatusFinished string = "Finished"

	// ScorableSurveyStatusOptOut captures enum value "OptOut"
	ScorableSurveyStatusOptOut string = "OptOut"

	// ScorableSurveyStatusError captures enum value "Error"
	ScorableSurveyStatusError string = "Error"

	// ScorableSurveyStatusExpired captures enum value "Expired"
	ScorableSurveyStatusExpired string = "Expired"
)

// prop value enum
func (m *ScorableSurvey) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scorableSurveyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScorableSurvey) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ScorableSurvey) validateSurveyForm(formats strfmt.Registry) error {

	if swag.IsZero(m.SurveyForm) { // not required
		return nil
	}

	if m.SurveyForm != nil {
		if err := m.SurveyForm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("surveyForm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScorableSurvey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScorableSurvey) UnmarshalBinary(b []byte) error {
	var res ScorableSurvey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

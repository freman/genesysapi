// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnowledgeExportJobResponse knowledge export job response
//
// swagger:model KnowledgeExportJobResponse
type KnowledgeExportJobResponse struct {

	// The current count of the number of records processed.
	CountDocumentProcessed int32 `json:"countDocumentProcessed,omitempty"`

	// The timestamp of when the export began. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The timestamp of when the export stopped. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The URL of the location at which the caller can download the export file, when available.
	DownloadURL string `json:"downloadURL,omitempty"`

	// Any error information, or null of the processing is not in failed state.
	ErrorInformation *ErrorBody `json:"errorInformation,omitempty"`

	// Filters to narrow down what to export.
	ExportFilter *KnowledgeExportJobFilter `json:"exportFilter,omitempty"`

	// File type of the document
	// Required: true
	// Enum: [Json Csv Xlsx]
	FileType *string `json:"fileType"`

	// Id of the export job.
	ID string `json:"id,omitempty"`

	// Knowledge base which document export belongs to.
	KnowledgeBase *KnowledgeBase `json:"knowledgeBase,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The status of the export job.
	// Enum: [Created ValidationInProgress ValidationCompleted ValidationFailed Started InProgress Completed PartialCompleted Failed AbortRequested Aborted]
	Status string `json:"status,omitempty"`
}

// Validate validates this knowledge export job response
func (m *KnowledgeExportJobResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExportFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKnowledgeBase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeExportJobResponse) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeExportJobResponse) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeExportJobResponse) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorInformation) { // not required
		return nil
	}

	if m.ErrorInformation != nil {
		if err := m.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInformation")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeExportJobResponse) validateExportFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.ExportFilter) { // not required
		return nil
	}

	if m.ExportFilter != nil {
		if err := m.ExportFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exportFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exportFilter")
			}
			return err
		}
	}

	return nil
}

var knowledgeExportJobResponseTypeFileTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Json","Csv","Xlsx"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		knowledgeExportJobResponseTypeFileTypePropEnum = append(knowledgeExportJobResponseTypeFileTypePropEnum, v)
	}
}

const (

	// KnowledgeExportJobResponseFileTypeJSON captures enum value "Json"
	KnowledgeExportJobResponseFileTypeJSON string = "Json"

	// KnowledgeExportJobResponseFileTypeCsv captures enum value "Csv"
	KnowledgeExportJobResponseFileTypeCsv string = "Csv"

	// KnowledgeExportJobResponseFileTypeXlsx captures enum value "Xlsx"
	KnowledgeExportJobResponseFileTypeXlsx string = "Xlsx"
)

// prop value enum
func (m *KnowledgeExportJobResponse) validateFileTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, knowledgeExportJobResponseTypeFileTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KnowledgeExportJobResponse) validateFileType(formats strfmt.Registry) error {

	if err := validate.Required("fileType", "body", m.FileType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFileTypeEnum("fileType", "body", *m.FileType); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeExportJobResponse) validateKnowledgeBase(formats strfmt.Registry) error {
	if swag.IsZero(m.KnowledgeBase) { // not required
		return nil
	}

	if m.KnowledgeBase != nil {
		if err := m.KnowledgeBase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("knowledgeBase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("knowledgeBase")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeExportJobResponse) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var knowledgeExportJobResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Created","ValidationInProgress","ValidationCompleted","ValidationFailed","Started","InProgress","Completed","PartialCompleted","Failed","AbortRequested","Aborted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		knowledgeExportJobResponseTypeStatusPropEnum = append(knowledgeExportJobResponseTypeStatusPropEnum, v)
	}
}

const (

	// KnowledgeExportJobResponseStatusCreated captures enum value "Created"
	KnowledgeExportJobResponseStatusCreated string = "Created"

	// KnowledgeExportJobResponseStatusValidationInProgress captures enum value "ValidationInProgress"
	KnowledgeExportJobResponseStatusValidationInProgress string = "ValidationInProgress"

	// KnowledgeExportJobResponseStatusValidationCompleted captures enum value "ValidationCompleted"
	KnowledgeExportJobResponseStatusValidationCompleted string = "ValidationCompleted"

	// KnowledgeExportJobResponseStatusValidationFailed captures enum value "ValidationFailed"
	KnowledgeExportJobResponseStatusValidationFailed string = "ValidationFailed"

	// KnowledgeExportJobResponseStatusStarted captures enum value "Started"
	KnowledgeExportJobResponseStatusStarted string = "Started"

	// KnowledgeExportJobResponseStatusInProgress captures enum value "InProgress"
	KnowledgeExportJobResponseStatusInProgress string = "InProgress"

	// KnowledgeExportJobResponseStatusCompleted captures enum value "Completed"
	KnowledgeExportJobResponseStatusCompleted string = "Completed"

	// KnowledgeExportJobResponseStatusPartialCompleted captures enum value "PartialCompleted"
	KnowledgeExportJobResponseStatusPartialCompleted string = "PartialCompleted"

	// KnowledgeExportJobResponseStatusFailed captures enum value "Failed"
	KnowledgeExportJobResponseStatusFailed string = "Failed"

	// KnowledgeExportJobResponseStatusAbortRequested captures enum value "AbortRequested"
	KnowledgeExportJobResponseStatusAbortRequested string = "AbortRequested"

	// KnowledgeExportJobResponseStatusAborted captures enum value "Aborted"
	KnowledgeExportJobResponseStatusAborted string = "Aborted"
)

// prop value enum
func (m *KnowledgeExportJobResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, knowledgeExportJobResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KnowledgeExportJobResponse) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this knowledge export job response based on the context it is used
func (m *KnowledgeExportJobResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExportFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKnowledgeBase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeExportJobResponse) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.ErrorInformation != nil {
		if err := m.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInformation")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeExportJobResponse) contextValidateExportFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.ExportFilter != nil {
		if err := m.ExportFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exportFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exportFilter")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeExportJobResponse) contextValidateKnowledgeBase(ctx context.Context, formats strfmt.Registry) error {

	if m.KnowledgeBase != nil {
		if err := m.KnowledgeBase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("knowledgeBase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("knowledgeBase")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeExportJobResponse) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KnowledgeExportJobResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnowledgeExportJobResponse) UnmarshalBinary(b []byte) error {
	var res KnowledgeExportJobResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

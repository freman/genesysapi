// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueueObservationQuery queue observation query
//
// swagger:model QueueObservationQuery
type QueueObservationQuery struct {

	// Metrics for which to include additional detailed observations
	DetailMetrics []string `json:"detailMetrics"`

	// Filter to return a subset of observations. Expresses boolean logical predicates as well as dimensional filters
	// Required: true
	Filter *QueueObservationQueryFilter `json:"filter"`

	// Behaves like a SQL SELECT clause. Only named metrics will be retrieved.
	// Required: true
	Metrics []string `json:"metrics"`
}

// Validate validates this queue observation query
func (m *QueueObservationQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetailMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var queueObservationQueryDetailMetricsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["oActiveUsers","oAlerting","oInteracting","oMemberUsers","oOffQueueUsers","oOnQueueUsers","oUserPresences","oUserRoutingStatuses","oWaiting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queueObservationQueryDetailMetricsItemsEnum = append(queueObservationQueryDetailMetricsItemsEnum, v)
	}
}

func (m *QueueObservationQuery) validateDetailMetricsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, queueObservationQueryDetailMetricsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QueueObservationQuery) validateDetailMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.DetailMetrics) { // not required
		return nil
	}

	for i := 0; i < len(m.DetailMetrics); i++ {

		// value enum
		if err := m.validateDetailMetricsItemsEnum("detailMetrics"+"."+strconv.Itoa(i), "body", m.DetailMetrics[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *QueueObservationQuery) validateFilter(formats strfmt.Registry) error {

	if err := validate.Required("filter", "body", m.Filter); err != nil {
		return err
	}

	if m.Filter != nil {
		if err := m.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

var queueObservationQueryMetricsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["oActiveUsers","oAlerting","oInteracting","oMemberUsers","oOffQueueUsers","oOnQueueUsers","oUserPresences","oUserRoutingStatuses","oWaiting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queueObservationQueryMetricsItemsEnum = append(queueObservationQueryMetricsItemsEnum, v)
	}
}

func (m *QueueObservationQuery) validateMetricsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, queueObservationQueryMetricsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QueueObservationQuery) validateMetrics(formats strfmt.Registry) error {

	if err := validate.Required("metrics", "body", m.Metrics); err != nil {
		return err
	}

	for i := 0; i < len(m.Metrics); i++ {

		// value enum
		if err := m.validateMetricsItemsEnum("metrics"+"."+strconv.Itoa(i), "body", m.Metrics[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this queue observation query based on the context it is used
func (m *QueueObservationQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueueObservationQuery) contextValidateFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.Filter != nil {
		if err := m.Filter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueueObservationQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueueObservationQuery) UnmarshalBinary(b []byte) error {
	var res QueueObservationQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

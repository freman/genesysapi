// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkPlanConfigurationViolationMessage work plan configuration violation message
//
// swagger:model WorkPlanConfigurationViolationMessage
type WorkPlanConfigurationViolationMessage struct {

	// Arguments of the message that provide information about the misconfigured value or the threshold that is exceeded by the misconfigured value
	Arguments []*WorkPlanValidationMessageArgument `json:"arguments"`

	// Type of configuration violation message for this work plan
	// Enum: [DailyExactPaidMinutes DailyShiftMaximumPossibilitiesViolated MaxShifts NoShifts WeeklyExactPaidMinutes]
	Type string `json:"type,omitempty"`
}

// Validate validates this work plan configuration violation message
func (m *WorkPlanConfigurationViolationMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArguments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkPlanConfigurationViolationMessage) validateArguments(formats strfmt.Registry) error {

	if swag.IsZero(m.Arguments) { // not required
		return nil
	}

	for i := 0; i < len(m.Arguments); i++ {
		if swag.IsZero(m.Arguments[i]) { // not required
			continue
		}

		if m.Arguments[i] != nil {
			if err := m.Arguments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var workPlanConfigurationViolationMessageTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DailyExactPaidMinutes","DailyShiftMaximumPossibilitiesViolated","MaxShifts","NoShifts","WeeklyExactPaidMinutes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workPlanConfigurationViolationMessageTypeTypePropEnum = append(workPlanConfigurationViolationMessageTypeTypePropEnum, v)
	}
}

const (

	// WorkPlanConfigurationViolationMessageTypeDailyExactPaidMinutes captures enum value "DailyExactPaidMinutes"
	WorkPlanConfigurationViolationMessageTypeDailyExactPaidMinutes string = "DailyExactPaidMinutes"

	// WorkPlanConfigurationViolationMessageTypeDailyShiftMaximumPossibilitiesViolated captures enum value "DailyShiftMaximumPossibilitiesViolated"
	WorkPlanConfigurationViolationMessageTypeDailyShiftMaximumPossibilitiesViolated string = "DailyShiftMaximumPossibilitiesViolated"

	// WorkPlanConfigurationViolationMessageTypeMaxShifts captures enum value "MaxShifts"
	WorkPlanConfigurationViolationMessageTypeMaxShifts string = "MaxShifts"

	// WorkPlanConfigurationViolationMessageTypeNoShifts captures enum value "NoShifts"
	WorkPlanConfigurationViolationMessageTypeNoShifts string = "NoShifts"

	// WorkPlanConfigurationViolationMessageTypeWeeklyExactPaidMinutes captures enum value "WeeklyExactPaidMinutes"
	WorkPlanConfigurationViolationMessageTypeWeeklyExactPaidMinutes string = "WeeklyExactPaidMinutes"
)

// prop value enum
func (m *WorkPlanConfigurationViolationMessage) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workPlanConfigurationViolationMessageTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkPlanConfigurationViolationMessage) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkPlanConfigurationViolationMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkPlanConfigurationViolationMessage) UnmarshalBinary(b []byte) error {
	var res WorkPlanConfigurationViolationMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

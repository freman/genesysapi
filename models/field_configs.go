// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FieldConfigs field configs
//
// swagger:model FieldConfigs
type FieldConfigs struct {

	// external contact
	ExternalContact *FieldConfig `json:"externalContact,omitempty"`

	// group
	Group *FieldConfig `json:"group,omitempty"`

	// org
	Org *FieldConfig `json:"org,omitempty"`

	// person
	Person *FieldConfig `json:"person,omitempty"`
}

// Validate validates this field configs
func (m *FieldConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerson(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FieldConfigs) validateExternalContact(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalContact) { // not required
		return nil
	}

	if m.ExternalContact != nil {
		if err := m.ExternalContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalContact")
			}
			return err
		}
	}

	return nil
}

func (m *FieldConfigs) validateGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if m.Group != nil {
		if err := m.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (m *FieldConfigs) validateOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.Org) { // not required
		return nil
	}

	if m.Org != nil {
		if err := m.Org.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("org")
			}
			return err
		}
	}

	return nil
}

func (m *FieldConfigs) validatePerson(formats strfmt.Registry) error {

	if swag.IsZero(m.Person) { // not required
		return nil
	}

	if m.Person != nil {
		if err := m.Person.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("person")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FieldConfigs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FieldConfigs) UnmarshalBinary(b []byte) error {
	var res FieldConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

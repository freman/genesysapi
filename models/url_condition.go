// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// URLCondition Url condition
//
// swagger:model UrlCondition
type URLCondition struct {

	// The comparison operator.
	// Required: true
	// Enum: [containsAll containsAny notContainsAll notContainsAny equal notEqual greaterThan greaterThanOrEqual lessThan lessThanOrEqual startsWith endsWith]
	Operator *string `json:"operator"`

	// The URL condition value.
	// Required: true
	Values []string `json:"values"`
}

// Validate validates this Url condition
func (m *URLCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var urlConditionTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["containsAll","containsAny","notContainsAll","notContainsAny","equal","notEqual","greaterThan","greaterThanOrEqual","lessThan","lessThanOrEqual","startsWith","endsWith"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		urlConditionTypeOperatorPropEnum = append(urlConditionTypeOperatorPropEnum, v)
	}
}

const (

	// URLConditionOperatorContainsAll captures enum value "containsAll"
	URLConditionOperatorContainsAll string = "containsAll"

	// URLConditionOperatorContainsAny captures enum value "containsAny"
	URLConditionOperatorContainsAny string = "containsAny"

	// URLConditionOperatorNotContainsAll captures enum value "notContainsAll"
	URLConditionOperatorNotContainsAll string = "notContainsAll"

	// URLConditionOperatorNotContainsAny captures enum value "notContainsAny"
	URLConditionOperatorNotContainsAny string = "notContainsAny"

	// URLConditionOperatorEqual captures enum value "equal"
	URLConditionOperatorEqual string = "equal"

	// URLConditionOperatorNotEqual captures enum value "notEqual"
	URLConditionOperatorNotEqual string = "notEqual"

	// URLConditionOperatorGreaterThan captures enum value "greaterThan"
	URLConditionOperatorGreaterThan string = "greaterThan"

	// URLConditionOperatorGreaterThanOrEqual captures enum value "greaterThanOrEqual"
	URLConditionOperatorGreaterThanOrEqual string = "greaterThanOrEqual"

	// URLConditionOperatorLessThan captures enum value "lessThan"
	URLConditionOperatorLessThan string = "lessThan"

	// URLConditionOperatorLessThanOrEqual captures enum value "lessThanOrEqual"
	URLConditionOperatorLessThanOrEqual string = "lessThanOrEqual"

	// URLConditionOperatorStartsWith captures enum value "startsWith"
	URLConditionOperatorStartsWith string = "startsWith"

	// URLConditionOperatorEndsWith captures enum value "endsWith"
	URLConditionOperatorEndsWith string = "endsWith"
)

// prop value enum
func (m *URLCondition) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, urlConditionTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *URLCondition) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *URLCondition) validateValues(formats strfmt.Registry) error {

	if err := validate.Required("values", "body", m.Values); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *URLCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *URLCondition) UnmarshalBinary(b []byte) error {
	var res URLCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

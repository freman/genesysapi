// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnowledgeExtendedCategory knowledge extended category
//
// swagger:model KnowledgeExtendedCategory
type KnowledgeExtendedCategory struct {

	// Category children
	// Read Only: true
	Children []*KnowledgeCategory `json:"children"`

	// Category creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Category last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// Category description
	Description string `json:"description,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Knowledge base which category does belong to
	// Read Only: true
	KnowledgeBase *KnowledgeBase `json:"knowledgeBase,omitempty"`

	// Actual language of the category
	// Read Only: true
	// Enum: [en-US en-UK en-AU en-CA en-HK en-IN en-IE en-NZ en-PH en-SG en-ZA de-DE de-AT de-CH es-AR es-CO es-MX es-US es-ES fr-FR fr-BE fr-CA fr-CH pt-BR pt-PT nl-NL nl-BE it-IT]
	LanguageCode string `json:"languageCode,omitempty"`

	// Category name
	// Required: true
	Name *string `json:"name"`

	// Category parent
	// Read Only: true
	Parent *KnowledgeCategory `json:"parent,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this knowledge extended category
func (m *KnowledgeExtendedCategory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKnowledgeBase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeExtendedCategory) validateChildren(formats strfmt.Registry) error {
	if swag.IsZero(m.Children) { // not required
		return nil
	}

	for i := 0; i < len(m.Children); i++ {
		if swag.IsZero(m.Children[i]) { // not required
			continue
		}

		if m.Children[i] != nil {
			if err := m.Children[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KnowledgeExtendedCategory) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeExtendedCategory) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeExtendedCategory) validateKnowledgeBase(formats strfmt.Registry) error {
	if swag.IsZero(m.KnowledgeBase) { // not required
		return nil
	}

	if m.KnowledgeBase != nil {
		if err := m.KnowledgeBase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("knowledgeBase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("knowledgeBase")
			}
			return err
		}
	}

	return nil
}

var knowledgeExtendedCategoryTypeLanguageCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["en-US","en-UK","en-AU","en-CA","en-HK","en-IN","en-IE","en-NZ","en-PH","en-SG","en-ZA","de-DE","de-AT","de-CH","es-AR","es-CO","es-MX","es-US","es-ES","fr-FR","fr-BE","fr-CA","fr-CH","pt-BR","pt-PT","nl-NL","nl-BE","it-IT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		knowledgeExtendedCategoryTypeLanguageCodePropEnum = append(knowledgeExtendedCategoryTypeLanguageCodePropEnum, v)
	}
}

const (

	// KnowledgeExtendedCategoryLanguageCodeEnDashUS captures enum value "en-US"
	KnowledgeExtendedCategoryLanguageCodeEnDashUS string = "en-US"

	// KnowledgeExtendedCategoryLanguageCodeEnDashUK captures enum value "en-UK"
	KnowledgeExtendedCategoryLanguageCodeEnDashUK string = "en-UK"

	// KnowledgeExtendedCategoryLanguageCodeEnDashAU captures enum value "en-AU"
	KnowledgeExtendedCategoryLanguageCodeEnDashAU string = "en-AU"

	// KnowledgeExtendedCategoryLanguageCodeEnDashCA captures enum value "en-CA"
	KnowledgeExtendedCategoryLanguageCodeEnDashCA string = "en-CA"

	// KnowledgeExtendedCategoryLanguageCodeEnDashHK captures enum value "en-HK"
	KnowledgeExtendedCategoryLanguageCodeEnDashHK string = "en-HK"

	// KnowledgeExtendedCategoryLanguageCodeEnDashIN captures enum value "en-IN"
	KnowledgeExtendedCategoryLanguageCodeEnDashIN string = "en-IN"

	// KnowledgeExtendedCategoryLanguageCodeEnDashIE captures enum value "en-IE"
	KnowledgeExtendedCategoryLanguageCodeEnDashIE string = "en-IE"

	// KnowledgeExtendedCategoryLanguageCodeEnDashNZ captures enum value "en-NZ"
	KnowledgeExtendedCategoryLanguageCodeEnDashNZ string = "en-NZ"

	// KnowledgeExtendedCategoryLanguageCodeEnDashPH captures enum value "en-PH"
	KnowledgeExtendedCategoryLanguageCodeEnDashPH string = "en-PH"

	// KnowledgeExtendedCategoryLanguageCodeEnDashSG captures enum value "en-SG"
	KnowledgeExtendedCategoryLanguageCodeEnDashSG string = "en-SG"

	// KnowledgeExtendedCategoryLanguageCodeEnDashZA captures enum value "en-ZA"
	KnowledgeExtendedCategoryLanguageCodeEnDashZA string = "en-ZA"

	// KnowledgeExtendedCategoryLanguageCodeDeDashDE captures enum value "de-DE"
	KnowledgeExtendedCategoryLanguageCodeDeDashDE string = "de-DE"

	// KnowledgeExtendedCategoryLanguageCodeDeDashAT captures enum value "de-AT"
	KnowledgeExtendedCategoryLanguageCodeDeDashAT string = "de-AT"

	// KnowledgeExtendedCategoryLanguageCodeDeDashCH captures enum value "de-CH"
	KnowledgeExtendedCategoryLanguageCodeDeDashCH string = "de-CH"

	// KnowledgeExtendedCategoryLanguageCodeEsDashAR captures enum value "es-AR"
	KnowledgeExtendedCategoryLanguageCodeEsDashAR string = "es-AR"

	// KnowledgeExtendedCategoryLanguageCodeEsDashCO captures enum value "es-CO"
	KnowledgeExtendedCategoryLanguageCodeEsDashCO string = "es-CO"

	// KnowledgeExtendedCategoryLanguageCodeEsDashMX captures enum value "es-MX"
	KnowledgeExtendedCategoryLanguageCodeEsDashMX string = "es-MX"

	// KnowledgeExtendedCategoryLanguageCodeEsDashUS captures enum value "es-US"
	KnowledgeExtendedCategoryLanguageCodeEsDashUS string = "es-US"

	// KnowledgeExtendedCategoryLanguageCodeEsDashES captures enum value "es-ES"
	KnowledgeExtendedCategoryLanguageCodeEsDashES string = "es-ES"

	// KnowledgeExtendedCategoryLanguageCodeFrDashFR captures enum value "fr-FR"
	KnowledgeExtendedCategoryLanguageCodeFrDashFR string = "fr-FR"

	// KnowledgeExtendedCategoryLanguageCodeFrDashBE captures enum value "fr-BE"
	KnowledgeExtendedCategoryLanguageCodeFrDashBE string = "fr-BE"

	// KnowledgeExtendedCategoryLanguageCodeFrDashCA captures enum value "fr-CA"
	KnowledgeExtendedCategoryLanguageCodeFrDashCA string = "fr-CA"

	// KnowledgeExtendedCategoryLanguageCodeFrDashCH captures enum value "fr-CH"
	KnowledgeExtendedCategoryLanguageCodeFrDashCH string = "fr-CH"

	// KnowledgeExtendedCategoryLanguageCodePtDashBR captures enum value "pt-BR"
	KnowledgeExtendedCategoryLanguageCodePtDashBR string = "pt-BR"

	// KnowledgeExtendedCategoryLanguageCodePtDashPT captures enum value "pt-PT"
	KnowledgeExtendedCategoryLanguageCodePtDashPT string = "pt-PT"

	// KnowledgeExtendedCategoryLanguageCodeNlDashNL captures enum value "nl-NL"
	KnowledgeExtendedCategoryLanguageCodeNlDashNL string = "nl-NL"

	// KnowledgeExtendedCategoryLanguageCodeNlDashBE captures enum value "nl-BE"
	KnowledgeExtendedCategoryLanguageCodeNlDashBE string = "nl-BE"

	// KnowledgeExtendedCategoryLanguageCodeItDashIT captures enum value "it-IT"
	KnowledgeExtendedCategoryLanguageCodeItDashIT string = "it-IT"
)

// prop value enum
func (m *KnowledgeExtendedCategory) validateLanguageCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, knowledgeExtendedCategoryTypeLanguageCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KnowledgeExtendedCategory) validateLanguageCode(formats strfmt.Registry) error {
	if swag.IsZero(m.LanguageCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateLanguageCodeEnum("languageCode", "body", m.LanguageCode); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeExtendedCategory) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeExtendedCategory) validateParent(formats strfmt.Registry) error {
	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeExtendedCategory) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this knowledge extended category based on the context it is used
func (m *KnowledgeExtendedCategory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChildren(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateModified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKnowledgeBase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLanguageCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeExtendedCategory) contextValidateChildren(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "children", "body", []*KnowledgeCategory(m.Children)); err != nil {
		return err
	}

	for i := 0; i < len(m.Children); i++ {

		if m.Children[i] != nil {
			if err := m.Children[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KnowledgeExtendedCategory) contextValidateDateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateCreated", "body", strfmt.DateTime(m.DateCreated)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeExtendedCategory) contextValidateDateModified(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateModified", "body", strfmt.DateTime(m.DateModified)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeExtendedCategory) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeExtendedCategory) contextValidateKnowledgeBase(ctx context.Context, formats strfmt.Registry) error {

	if m.KnowledgeBase != nil {
		if err := m.KnowledgeBase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("knowledgeBase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("knowledgeBase")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeExtendedCategory) contextValidateLanguageCode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "languageCode", "body", string(m.LanguageCode)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeExtendedCategory) contextValidateParent(ctx context.Context, formats strfmt.Registry) error {

	if m.Parent != nil {
		if err := m.Parent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeExtendedCategory) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KnowledgeExtendedCategory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnowledgeExtendedCategory) UnmarshalBinary(b []byte) error {
	var res KnowledgeExtendedCategory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResponseAssetStatus response asset status
//
// swagger:model ResponseAssetStatus
type ResponseAssetStatus struct {

	// Error code. Used for localization
	// Read Only: true
	ErrorCode string `json:"errorCode,omitempty"`

	// Error message that explains upload failure status
	// Read Only: true
	ErrorMessage string `json:"errorMessage,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Upload status of the asset
	// Read Only: true
	// Enum: [InProgress Uploaded Failed]
	Status string `json:"status,omitempty"`
}

// Validate validates this response asset status
func (m *ResponseAssetStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var responseAssetStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InProgress","Uploaded","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responseAssetStatusTypeStatusPropEnum = append(responseAssetStatusTypeStatusPropEnum, v)
	}
}

const (

	// ResponseAssetStatusStatusInProgress captures enum value "InProgress"
	ResponseAssetStatusStatusInProgress string = "InProgress"

	// ResponseAssetStatusStatusUploaded captures enum value "Uploaded"
	ResponseAssetStatusStatusUploaded string = "Uploaded"

	// ResponseAssetStatusStatusFailed captures enum value "Failed"
	ResponseAssetStatusStatusFailed string = "Failed"
)

// prop value enum
func (m *ResponseAssetStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, responseAssetStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResponseAssetStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this response asset status based on the context it is used
func (m *ResponseAssetStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrorCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseAssetStatus) contextValidateErrorCode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "errorCode", "body", string(m.ErrorCode)); err != nil {
		return err
	}

	return nil
}

func (m *ResponseAssetStatus) contextValidateErrorMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "errorMessage", "body", string(m.ErrorMessage)); err != nil {
		return err
	}

	return nil
}

func (m *ResponseAssetStatus) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ResponseAssetStatus) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResponseAssetStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseAssetStatus) UnmarshalBinary(b []byte) error {
	var res ResponseAssetStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

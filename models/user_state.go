// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserState user state
//
// swagger:model UserState
type UserState struct {

	// User's current state.
	// Enum: [active inactive deleted]
	State string `json:"state,omitempty"`

	// Date that the state was last changed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	StateChangeDate strfmt.DateTime `json:"stateChangeDate,omitempty"`

	// Reason for a change in the user's state.
	// Enum: [Voluntary Seasonal Leave Performance Conduct Unknown]
	StateChangeReason string `json:"stateChangeReason,omitempty"`

	// Version of this user.
	Version int32 `json:"version,omitempty"`
}

// Validate validates this user state
func (m *UserState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateChangeDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateChangeReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userStateTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userStateTypeStatePropEnum = append(userStateTypeStatePropEnum, v)
	}
}

const (

	// UserStateStateActive captures enum value "active"
	UserStateStateActive string = "active"

	// UserStateStateInactive captures enum value "inactive"
	UserStateStateInactive string = "inactive"

	// UserStateStateDeleted captures enum value "deleted"
	UserStateStateDeleted string = "deleted"
)

// prop value enum
func (m *UserState) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userStateTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserState) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *UserState) validateStateChangeDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StateChangeDate) { // not required
		return nil
	}

	if err := validate.FormatOf("stateChangeDate", "body", "date-time", m.StateChangeDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var userStateTypeStateChangeReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Voluntary","Seasonal","Leave","Performance","Conduct","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userStateTypeStateChangeReasonPropEnum = append(userStateTypeStateChangeReasonPropEnum, v)
	}
}

const (

	// UserStateStateChangeReasonVoluntary captures enum value "Voluntary"
	UserStateStateChangeReasonVoluntary string = "Voluntary"

	// UserStateStateChangeReasonSeasonal captures enum value "Seasonal"
	UserStateStateChangeReasonSeasonal string = "Seasonal"

	// UserStateStateChangeReasonLeave captures enum value "Leave"
	UserStateStateChangeReasonLeave string = "Leave"

	// UserStateStateChangeReasonPerformance captures enum value "Performance"
	UserStateStateChangeReasonPerformance string = "Performance"

	// UserStateStateChangeReasonConduct captures enum value "Conduct"
	UserStateStateChangeReasonConduct string = "Conduct"

	// UserStateStateChangeReasonUnknown captures enum value "Unknown"
	UserStateStateChangeReasonUnknown string = "Unknown"
)

// prop value enum
func (m *UserState) validateStateChangeReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userStateTypeStateChangeReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserState) validateStateChangeReason(formats strfmt.Registry) error {

	if swag.IsZero(m.StateChangeReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateChangeReasonEnum("stateChangeReason", "body", m.StateChangeReason); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserState) UnmarshalBinary(b []byte) error {
	var res UserState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

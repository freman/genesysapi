// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkConnectivity network connectivity
//
// swagger:model NetworkConnectivity
type NetworkConnectivity struct {

	// Whether Bluetooth is enabled.
	// Required: true
	BluetoothEnabled *bool `json:"bluetoothEnabled"`

	// The name of the network carrier.
	Carrier string `json:"carrier,omitempty"`

	// Whether Cellular is enabled.
	// Required: true
	CellularEnabled *bool `json:"cellularEnabled"`

	// Whether Wi-Fi is enabled.
	// Required: true
	WifiEnabled *bool `json:"wifiEnabled"`
}

// Validate validates this network connectivity
func (m *NetworkConnectivity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBluetoothEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCellularEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWifiEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkConnectivity) validateBluetoothEnabled(formats strfmt.Registry) error {

	if err := validate.Required("bluetoothEnabled", "body", m.BluetoothEnabled); err != nil {
		return err
	}

	return nil
}

func (m *NetworkConnectivity) validateCellularEnabled(formats strfmt.Registry) error {

	if err := validate.Required("cellularEnabled", "body", m.CellularEnabled); err != nil {
		return err
	}

	return nil
}

func (m *NetworkConnectivity) validateWifiEnabled(formats strfmt.Registry) error {

	if err := validate.Required("wifiEnabled", "body", m.WifiEnabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this network connectivity based on context it is used
func (m *NetworkConnectivity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetworkConnectivity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkConnectivity) UnmarshalBinary(b []byte) error {
	var res NetworkConnectivity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

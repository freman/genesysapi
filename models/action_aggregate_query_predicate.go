// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActionAggregateQueryPredicate action aggregate query predicate
//
// swagger:model ActionAggregateQueryPredicate
type ActionAggregateQueryPredicate struct {

	// Left hand side for dimension predicates
	// Enum: [actionCategory actionId actionName correlationId errorType integrationId integrationName responseStatus]
	Dimension string `json:"dimension,omitempty"`

	// Optional operator, default is matches
	// Enum: [matches exists notExists]
	Operator string `json:"operator,omitempty"`

	// Right hand side for dimension predicates
	Range *NumericRange `json:"range,omitempty"`

	// Optional type, can usually be inferred
	// Enum: [dimension property metric]
	Type string `json:"type,omitempty"`

	// Right hand side for dimension predicates
	Value string `json:"value,omitempty"`
}

// Validate validates this action aggregate query predicate
func (m *ActionAggregateQueryPredicate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var actionAggregateQueryPredicateTypeDimensionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["actionCategory","actionId","actionName","correlationId","errorType","integrationId","integrationName","responseStatus"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionAggregateQueryPredicateTypeDimensionPropEnum = append(actionAggregateQueryPredicateTypeDimensionPropEnum, v)
	}
}

const (

	// ActionAggregateQueryPredicateDimensionActionCategory captures enum value "actionCategory"
	ActionAggregateQueryPredicateDimensionActionCategory string = "actionCategory"

	// ActionAggregateQueryPredicateDimensionActionID captures enum value "actionId"
	ActionAggregateQueryPredicateDimensionActionID string = "actionId"

	// ActionAggregateQueryPredicateDimensionActionName captures enum value "actionName"
	ActionAggregateQueryPredicateDimensionActionName string = "actionName"

	// ActionAggregateQueryPredicateDimensionCorrelationID captures enum value "correlationId"
	ActionAggregateQueryPredicateDimensionCorrelationID string = "correlationId"

	// ActionAggregateQueryPredicateDimensionErrorType captures enum value "errorType"
	ActionAggregateQueryPredicateDimensionErrorType string = "errorType"

	// ActionAggregateQueryPredicateDimensionIntegrationID captures enum value "integrationId"
	ActionAggregateQueryPredicateDimensionIntegrationID string = "integrationId"

	// ActionAggregateQueryPredicateDimensionIntegrationName captures enum value "integrationName"
	ActionAggregateQueryPredicateDimensionIntegrationName string = "integrationName"

	// ActionAggregateQueryPredicateDimensionResponseStatus captures enum value "responseStatus"
	ActionAggregateQueryPredicateDimensionResponseStatus string = "responseStatus"
)

// prop value enum
func (m *ActionAggregateQueryPredicate) validateDimensionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, actionAggregateQueryPredicateTypeDimensionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActionAggregateQueryPredicate) validateDimension(formats strfmt.Registry) error {
	if swag.IsZero(m.Dimension) { // not required
		return nil
	}

	// value enum
	if err := m.validateDimensionEnum("dimension", "body", m.Dimension); err != nil {
		return err
	}

	return nil
}

var actionAggregateQueryPredicateTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["matches","exists","notExists"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionAggregateQueryPredicateTypeOperatorPropEnum = append(actionAggregateQueryPredicateTypeOperatorPropEnum, v)
	}
}

const (

	// ActionAggregateQueryPredicateOperatorMatches captures enum value "matches"
	ActionAggregateQueryPredicateOperatorMatches string = "matches"

	// ActionAggregateQueryPredicateOperatorExists captures enum value "exists"
	ActionAggregateQueryPredicateOperatorExists string = "exists"

	// ActionAggregateQueryPredicateOperatorNotExists captures enum value "notExists"
	ActionAggregateQueryPredicateOperatorNotExists string = "notExists"
)

// prop value enum
func (m *ActionAggregateQueryPredicate) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, actionAggregateQueryPredicateTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActionAggregateQueryPredicate) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *ActionAggregateQueryPredicate) validateRange(formats strfmt.Registry) error {
	if swag.IsZero(m.Range) { // not required
		return nil
	}

	if m.Range != nil {
		if err := m.Range.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

var actionAggregateQueryPredicateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dimension","property","metric"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionAggregateQueryPredicateTypeTypePropEnum = append(actionAggregateQueryPredicateTypeTypePropEnum, v)
	}
}

const (

	// ActionAggregateQueryPredicateTypeDimension captures enum value "dimension"
	ActionAggregateQueryPredicateTypeDimension string = "dimension"

	// ActionAggregateQueryPredicateTypeProperty captures enum value "property"
	ActionAggregateQueryPredicateTypeProperty string = "property"

	// ActionAggregateQueryPredicateTypeMetric captures enum value "metric"
	ActionAggregateQueryPredicateTypeMetric string = "metric"
)

// prop value enum
func (m *ActionAggregateQueryPredicate) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, actionAggregateQueryPredicateTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActionAggregateQueryPredicate) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this action aggregate query predicate based on the context it is used
func (m *ActionAggregateQueryPredicate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActionAggregateQueryPredicate) contextValidateRange(ctx context.Context, formats strfmt.Registry) error {

	if m.Range != nil {
		if err := m.Range.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActionAggregateQueryPredicate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActionAggregateQueryPredicate) UnmarshalBinary(b []byte) error {
	var res ActionAggregateQueryPredicate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

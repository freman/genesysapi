// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventCoBrowse A CoBrowse event.
//
// swagger:model EventCoBrowse
type EventCoBrowse struct {

	// The CoBrowse session ID.
	SessionID string `json:"sessionId,omitempty"`

	// The CoBrowse session join token.
	SessionJoinToken string `json:"sessionJoinToken,omitempty"`

	// Describes the type of CoBrowse event.
	// Required: true
	// Enum: [Offering OfferingExpired OfferingAccepted OfferingRejected]
	Type *string `json:"type"`
}

// Validate validates this event co browse
func (m *EventCoBrowse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var eventCoBrowseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Offering","OfferingExpired","OfferingAccepted","OfferingRejected"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventCoBrowseTypeTypePropEnum = append(eventCoBrowseTypeTypePropEnum, v)
	}
}

const (

	// EventCoBrowseTypeOffering captures enum value "Offering"
	EventCoBrowseTypeOffering string = "Offering"

	// EventCoBrowseTypeOfferingExpired captures enum value "OfferingExpired"
	EventCoBrowseTypeOfferingExpired string = "OfferingExpired"

	// EventCoBrowseTypeOfferingAccepted captures enum value "OfferingAccepted"
	EventCoBrowseTypeOfferingAccepted string = "OfferingAccepted"

	// EventCoBrowseTypeOfferingRejected captures enum value "OfferingRejected"
	EventCoBrowseTypeOfferingRejected string = "OfferingRejected"
)

// prop value enum
func (m *EventCoBrowse) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eventCoBrowseTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EventCoBrowse) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventCoBrowse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventCoBrowse) UnmarshalBinary(b []byte) error {
	var res EventCoBrowse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NluDomain nlu domain
//
// swagger:model NluDomain
type NluDomain struct {

	// The date when the NLU domain was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The date when the NLU domain was updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The draft version of that NLU domain.
	// Read Only: true
	DraftVersion *NluDomainVersion `json:"draftVersion,omitempty"`

	// The version of the NLU engine to use.
	EngineVersion string `json:"engineVersion,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The language culture of the NLU domain, e.g. `en-us`, `de-de`.
	Language string `json:"language,omitempty"`

	// The last published version of that NLU domain.
	// Read Only: true
	LastPublishedVersion *NluDomainVersion `json:"lastPublishedVersion,omitempty"`

	// The name of the NLU domain.
	// Required: true
	Name *string `json:"name"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this nlu domain
func (m *NluDomain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDraftVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastPublishedVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NluDomain) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NluDomain) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NluDomain) validateDraftVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.DraftVersion) { // not required
		return nil
	}

	if m.DraftVersion != nil {
		if err := m.DraftVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("draftVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("draftVersion")
			}
			return err
		}
	}

	return nil
}

func (m *NluDomain) validateLastPublishedVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.LastPublishedVersion) { // not required
		return nil
	}

	if m.LastPublishedVersion != nil {
		if err := m.LastPublishedVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPublishedVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPublishedVersion")
			}
			return err
		}
	}

	return nil
}

func (m *NluDomain) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NluDomain) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this nlu domain based on the context it is used
func (m *NluDomain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateModified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDraftVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastPublishedVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NluDomain) contextValidateDateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateCreated", "body", strfmt.DateTime(m.DateCreated)); err != nil {
		return err
	}

	return nil
}

func (m *NluDomain) contextValidateDateModified(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateModified", "body", strfmt.DateTime(m.DateModified)); err != nil {
		return err
	}

	return nil
}

func (m *NluDomain) contextValidateDraftVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.DraftVersion != nil {
		if err := m.DraftVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("draftVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("draftVersion")
			}
			return err
		}
	}

	return nil
}

func (m *NluDomain) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *NluDomain) contextValidateLastPublishedVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.LastPublishedVersion != nil {
		if err := m.LastPublishedVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPublishedVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPublishedVersion")
			}
			return err
		}
	}

	return nil
}

func (m *NluDomain) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NluDomain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NluDomain) UnmarshalBinary(b []byte) error {
	var res NluDomain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchSort search sort
//
// swagger:model SearchSort
type SearchSort struct {

	// The field in the resource that you want to sort the results by
	SortBy string `json:"sortBy,omitempty"`

	// The sort order for results
	// Enum: [ASC DESC SCORE]
	SortOrder string `json:"sortOrder,omitempty"`
}

// Validate validates this search sort
func (m *SearchSort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSortOrder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var searchSortTypeSortOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ASC","DESC","SCORE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchSortTypeSortOrderPropEnum = append(searchSortTypeSortOrderPropEnum, v)
	}
}

const (

	// SearchSortSortOrderASC captures enum value "ASC"
	SearchSortSortOrderASC string = "ASC"

	// SearchSortSortOrderDESC captures enum value "DESC"
	SearchSortSortOrderDESC string = "DESC"

	// SearchSortSortOrderSCORE captures enum value "SCORE"
	SearchSortSortOrderSCORE string = "SCORE"
)

// prop value enum
func (m *SearchSort) validateSortOrderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchSortTypeSortOrderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchSort) validateSortOrder(formats strfmt.Registry) error {
	if swag.IsZero(m.SortOrder) { // not required
		return nil
	}

	// value enum
	if err := m.validateSortOrderEnum("sortOrder", "body", m.SortOrder); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this search sort based on context it is used
func (m *SearchSort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchSort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchSort) UnmarshalBinary(b []byte) error {
	var res SearchSort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

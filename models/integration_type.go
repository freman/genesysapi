// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationType Descriptor for a type of Integration.
//
// swagger:model IntegrationType
type IntegrationType struct {

	// Category describing the integration type.
	// Read Only: true
	Category string `json:"category,omitempty"`

	// URI of the schema describing the advanced JSON document needed to configure an integration of this type.
	// Read Only: true
	ConfigAdvancedSchemaURI string `json:"configAdvancedSchemaUri,omitempty"`

	// URI of the schema describing the key-value properties needed to configure an integration of this type.
	// Read Only: true
	ConfigPropertiesSchemaURI string `json:"configPropertiesSchemaUri,omitempty"`

	// Map of credentials for integrations of this type. The key is the name of a credential that can be provided in the credentials property of the integration configuration.
	// Read Only: true
	Credentials map[string]CredentialSpecification `json:"credentials,omitempty"`

	// Description of the integration type.
	// Read Only: true
	Description string `json:"description,omitempty"`

	// URI of frequently asked questions about the integration type
	// Read Only: true
	FaqURI string `json:"faqUri,omitempty"`

	// List of links to additional help resources
	// Read Only: true
	HelpLinks []*HelpLink `json:"helpLinks"`

	// URI of a page with more information about the integration type
	// Read Only: true
	HelpURI string `json:"helpUri,omitempty"`

	// The ID of the integration type.
	// Required: true
	ID *string `json:"id"`

	// Collection of logos.
	// Read Only: true
	Images []*UserImage `json:"images"`

	// URI of the marketplace listing for this integration type
	// Read Only: true
	MarketplaceURI string `json:"marketplaceUri,omitempty"`

	// The maximum number of integration instances allowable for this integration type
	// Read Only: true
	MaxInstances int32 `json:"maxInstances,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Indicates if the integration type is installable or not.
	// Read Only: true
	NonInstallable *bool `json:"nonInstallable,omitempty"`

	// URI of a privacy policy for users of the integration type
	// Read Only: true
	PrivacyPolicyURI string `json:"privacyPolicyUri,omitempty"`

	// PureCloud provider of the integration type.
	// Read Only: true
	Provider string `json:"provider,omitempty"`

	// URI for vendor sales information
	// Read Only: true
	SalesContactURI string `json:"salesContactUri,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// URI for vendor support
	// Read Only: true
	SupportContactURI string `json:"supportContactUri,omitempty"`

	// URI of a page with terms and conditions for the integration type
	// Read Only: true
	TermsOfServiceURI string `json:"termsOfServiceUri,omitempty"`

	// List of permissions required to permit user access to the integration type.
	// Read Only: true
	UserPermissions []string `json:"userPermissions"`

	// Name of the vendor of this integration type
	// Read Only: true
	VendorName string `json:"vendorName,omitempty"`

	// List of OAuth Client IDs that must be authorized when the integration is created.
	// Read Only: true
	VendorOAuthClientIds []string `json:"vendorOAuthClientIds"`

	// URI of the vendor's website
	// Read Only: true
	VendorWebsiteURI string `json:"vendorWebsiteUri,omitempty"`
}

// Validate validates this integration type
func (m *IntegrationType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelpLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationType) validateCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	for k := range m.Credentials {

		if err := validate.Required("credentials"+"."+k, "body", m.Credentials[k]); err != nil {
			return err
		}
		if val, ok := m.Credentials[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IntegrationType) validateHelpLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.HelpLinks) { // not required
		return nil
	}

	for i := 0; i < len(m.HelpLinks); i++ {
		if swag.IsZero(m.HelpLinks[i]) { // not required
			continue
		}

		if m.HelpLinks[i] != nil {
			if err := m.HelpLinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("helpLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IntegrationType) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationType) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	for i := 0; i < len(m.Images); i++ {
		if swag.IsZero(m.Images[i]) { // not required
			continue
		}

		if m.Images[i] != nil {
			if err := m.Images[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IntegrationType) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationType) UnmarshalBinary(b []byte) error {
	var res IntegrationType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

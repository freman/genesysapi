// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TextBotUserAgent Information about the caller executing a bot flow.
//
// swagger:model TextBotUserAgent
type TextBotUserAgent struct {

	// The name of the user agent.
	// Required: true
	// Enum: [Phone SMS GenesysWebWidget FacebookMessenger WeChat Whatsapp AppleBusinessChat Telegram Slack Signal Line Discord TwitterDirectMessage Other Unknown]
	Name *string `json:"name"`
}

// Validate validates this text bot user agent
func (m *TextBotUserAgent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var textBotUserAgentTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Phone","SMS","GenesysWebWidget","FacebookMessenger","WeChat","Whatsapp","AppleBusinessChat","Telegram","Slack","Signal","Line","Discord","TwitterDirectMessage","Other","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		textBotUserAgentTypeNamePropEnum = append(textBotUserAgentTypeNamePropEnum, v)
	}
}

const (

	// TextBotUserAgentNamePhone captures enum value "Phone"
	TextBotUserAgentNamePhone string = "Phone"

	// TextBotUserAgentNameSMS captures enum value "SMS"
	TextBotUserAgentNameSMS string = "SMS"

	// TextBotUserAgentNameGenesysWebWidget captures enum value "GenesysWebWidget"
	TextBotUserAgentNameGenesysWebWidget string = "GenesysWebWidget"

	// TextBotUserAgentNameFacebookMessenger captures enum value "FacebookMessenger"
	TextBotUserAgentNameFacebookMessenger string = "FacebookMessenger"

	// TextBotUserAgentNameWeChat captures enum value "WeChat"
	TextBotUserAgentNameWeChat string = "WeChat"

	// TextBotUserAgentNameWhatsapp captures enum value "Whatsapp"
	TextBotUserAgentNameWhatsapp string = "Whatsapp"

	// TextBotUserAgentNameAppleBusinessChat captures enum value "AppleBusinessChat"
	TextBotUserAgentNameAppleBusinessChat string = "AppleBusinessChat"

	// TextBotUserAgentNameTelegram captures enum value "Telegram"
	TextBotUserAgentNameTelegram string = "Telegram"

	// TextBotUserAgentNameSlack captures enum value "Slack"
	TextBotUserAgentNameSlack string = "Slack"

	// TextBotUserAgentNameSignal captures enum value "Signal"
	TextBotUserAgentNameSignal string = "Signal"

	// TextBotUserAgentNameLine captures enum value "Line"
	TextBotUserAgentNameLine string = "Line"

	// TextBotUserAgentNameDiscord captures enum value "Discord"
	TextBotUserAgentNameDiscord string = "Discord"

	// TextBotUserAgentNameTwitterDirectMessage captures enum value "TwitterDirectMessage"
	TextBotUserAgentNameTwitterDirectMessage string = "TwitterDirectMessage"

	// TextBotUserAgentNameOther captures enum value "Other"
	TextBotUserAgentNameOther string = "Other"

	// TextBotUserAgentNameUnknown captures enum value "Unknown"
	TextBotUserAgentNameUnknown string = "Unknown"
)

// prop value enum
func (m *TextBotUserAgent) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, textBotUserAgentTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TextBotUserAgent) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	// value enum
	if err := m.validateNameEnum("name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this text bot user agent based on context it is used
func (m *TextBotUserAgent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TextBotUserAgent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TextBotUserAgent) UnmarshalBinary(b []byte) error {
	var res TextBotUserAgent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

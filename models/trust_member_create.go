// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrustMemberCreate trust member create
//
// swagger:model TrustMemberCreate
type TrustMemberCreate struct {

	// Trustee User or Group Id
	// Required: true
	ID *string `json:"id"`

	// The list of trustor organization roles granting this user or group access paired with the divisions for those roles.
	RoleDivisions *RoleDivisionGrants `json:"roleDivisions,omitempty"`

	// The list of roles to be granted to this user or group. Roles will be granted in all divisions.
	RoleIds []string `json:"roleIds"`
}

// Validate validates this trust member create
func (m *TrustMemberCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleDivisions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrustMemberCreate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TrustMemberCreate) validateRoleDivisions(formats strfmt.Registry) error {

	if swag.IsZero(m.RoleDivisions) { // not required
		return nil
	}

	if m.RoleDivisions != nil {
		if err := m.RoleDivisions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roleDivisions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrustMemberCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrustMemberCreate) UnmarshalBinary(b []byte) error {
	var res TrustMemberCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

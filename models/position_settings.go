// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PositionSettings Settings concerning position
//
// swagger:model PositionSettings
type PositionSettings struct {

	// The alignment for position
	// Enum: [Auto Left Right]
	Alignment string `json:"alignment,omitempty"`

	// The bottomspace value for position
	BottomSpace int32 `json:"bottomSpace,omitempty"`

	// The sidespace value for position
	SideSpace int32 `json:"sideSpace,omitempty"`
}

// Validate validates this position settings
func (m *PositionSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlignment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var positionSettingsTypeAlignmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Auto","Left","Right"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		positionSettingsTypeAlignmentPropEnum = append(positionSettingsTypeAlignmentPropEnum, v)
	}
}

const (

	// PositionSettingsAlignmentAuto captures enum value "Auto"
	PositionSettingsAlignmentAuto string = "Auto"

	// PositionSettingsAlignmentLeft captures enum value "Left"
	PositionSettingsAlignmentLeft string = "Left"

	// PositionSettingsAlignmentRight captures enum value "Right"
	PositionSettingsAlignmentRight string = "Right"
)

// prop value enum
func (m *PositionSettings) validateAlignmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, positionSettingsTypeAlignmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PositionSettings) validateAlignment(formats strfmt.Registry) error {
	if swag.IsZero(m.Alignment) { // not required
		return nil
	}

	// value enum
	if err := m.validateAlignmentEnum("alignment", "body", m.Alignment); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this position settings based on context it is used
func (m *PositionSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PositionSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PositionSettings) UnmarshalBinary(b []byte) error {
	var res PositionSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

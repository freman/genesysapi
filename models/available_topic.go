// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AvailableTopic available topic
//
// swagger:model AvailableTopic
type AvailableTopic struct {

	// description
	Description string `json:"description,omitempty"`

	// Whether or not the permissions on this topic are enforced
	Enforced bool `json:"enforced"`

	// id
	ID string `json:"id,omitempty"`

	// Full detailed permissions required to subscribe to the topic
	PermissionDetails []*PermissionDetails `json:"permissionDetails"`

	// public Api template Uri paths
	PublicAPITemplateURIPaths []string `json:"publicApiTemplateUriPaths"`

	// If multiple permissions are required for this topic, such as both requiresCurrentUser and requiresDivisionPermissions, then true here indicates that meeting any one condition will satisfy the requirements; false indicates all conditions must be met.
	RequiresAnyValidator bool `json:"requiresAnyValidator"`

	// True if the topic user ID is required to match the subscribing user ID
	RequiresCurrentUser bool `json:"requiresCurrentUser"`

	// True if permissions are only required when the topic user ID does not match the subscribing user ID
	RequiresCurrentUserOrPermission bool `json:"requiresCurrentUserOrPermission"`

	// True if the subscribing user must belong to the same division as the topic object ID
	RequiresDivisionPermissions bool `json:"requiresDivisionPermissions"`

	// Permissions required to subscribe to the topic
	RequiresPermissions []string `json:"requiresPermissions"`

	// schema
	Schema map[string]interface{} `json:"schema,omitempty"`

	// Parameters in the topic name that can be substituted
	TopicParameters []string `json:"topicParameters"`

	// Transports that support events for the topic
	Transports []string `json:"transports"`

	// Visibility of this topic (Public or Preview)
	// Enum: [Public Preview]
	Visibility string `json:"visibility,omitempty"`
}

// Validate validates this available topic
func (m *AvailableTopic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermissionDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailableTopic) validatePermissionDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.PermissionDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.PermissionDetails); i++ {
		if swag.IsZero(m.PermissionDetails[i]) { // not required
			continue
		}

		if m.PermissionDetails[i] != nil {
			if err := m.PermissionDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissionDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var availableTopicTransportsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["All","Websocket","EventBridge"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		availableTopicTransportsItemsEnum = append(availableTopicTransportsItemsEnum, v)
	}
}

func (m *AvailableTopic) validateTransportsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, availableTopicTransportsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AvailableTopic) validateTransports(formats strfmt.Registry) error {

	if swag.IsZero(m.Transports) { // not required
		return nil
	}

	for i := 0; i < len(m.Transports); i++ {

		// value enum
		if err := m.validateTransportsItemsEnum("transports"+"."+strconv.Itoa(i), "body", m.Transports[i]); err != nil {
			return err
		}

	}

	return nil
}

var availableTopicTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Public","Preview"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		availableTopicTypeVisibilityPropEnum = append(availableTopicTypeVisibilityPropEnum, v)
	}
}

const (

	// AvailableTopicVisibilityPublic captures enum value "Public"
	AvailableTopicVisibilityPublic string = "Public"

	// AvailableTopicVisibilityPreview captures enum value "Preview"
	AvailableTopicVisibilityPreview string = "Preview"
)

// prop value enum
func (m *AvailableTopic) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, availableTopicTypeVisibilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AvailableTopic) validateVisibility(formats strfmt.Registry) error {

	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", m.Visibility); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AvailableTopic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AvailableTopic) UnmarshalBinary(b []byte) error {
	var res AvailableTopic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

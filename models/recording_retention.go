// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecordingRetention recording retention
//
// swagger:model RecordingRetention
type RecordingRetention struct {

	// The date the recording will be archived. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	ArchiveDate strfmt.DateTime `json:"archiveDate,omitempty"`

	// The type of archive medium used. Example: CloudArchive
	// Enum: [CLOUDARCHIVE]
	ArchiveMedium string `json:"archiveMedium,omitempty"`

	// conversation Id
	ConversationID string `json:"conversationId,omitempty"`

	// The creation time of the recording. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	CreationTime strfmt.DateTime `json:"creationTime,omitempty"`

	// The date the recording will be deleted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DeleteDate strfmt.DateTime `json:"deleteDate,omitempty"`

	// The date the recording will be exported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	ExportDate strfmt.DateTime `json:"exportDate,omitempty"`

	// The date the recording was exported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	ExportedDate strfmt.DateTime `json:"exportedDate,omitempty"`

	// recording Id
	RecordingID string `json:"recordingId,omitempty"`
}

// Validate validates this recording retention
func (m *RecordingRetention) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchiveMedium(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExportDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExportedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecordingRetention) validateArchiveDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ArchiveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("archiveDate", "body", "date-time", m.ArchiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var recordingRetentionTypeArchiveMediumPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLOUDARCHIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recordingRetentionTypeArchiveMediumPropEnum = append(recordingRetentionTypeArchiveMediumPropEnum, v)
	}
}

const (

	// RecordingRetentionArchiveMediumCLOUDARCHIVE captures enum value "CLOUDARCHIVE"
	RecordingRetentionArchiveMediumCLOUDARCHIVE string = "CLOUDARCHIVE"
)

// prop value enum
func (m *RecordingRetention) validateArchiveMediumEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recordingRetentionTypeArchiveMediumPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecordingRetention) validateArchiveMedium(formats strfmt.Registry) error {

	if swag.IsZero(m.ArchiveMedium) { // not required
		return nil
	}

	// value enum
	if err := m.validateArchiveMediumEnum("archiveMedium", "body", m.ArchiveMedium); err != nil {
		return err
	}

	return nil
}

func (m *RecordingRetention) validateCreationTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("creationTime", "body", "date-time", m.CreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RecordingRetention) validateDeleteDate(formats strfmt.Registry) error {

	if swag.IsZero(m.DeleteDate) { // not required
		return nil
	}

	if err := validate.FormatOf("deleteDate", "body", "date-time", m.DeleteDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RecordingRetention) validateExportDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExportDate) { // not required
		return nil
	}

	if err := validate.FormatOf("exportDate", "body", "date-time", m.ExportDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RecordingRetention) validateExportedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExportedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("exportedDate", "body", "date-time", m.ExportedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecordingRetention) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecordingRetention) UnmarshalBinary(b []byte) error {
	var res RecordingRetention
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

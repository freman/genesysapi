// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MailFromResult mail from result
//
// swagger:model MailFromResult
type MailFromResult struct {

	// The custom MAIL FROM domain.
	// Required: true
	MailFromDomain *string `json:"mailFromDomain"`

	// The list of DNS records that pertain that need to exist for verification.
	Records []*Record `json:"records"`

	// The verification status.
	// Enum: [FAILED PENDING VERIFIED UNKNOWN]
	Status string `json:"status,omitempty"`
}

// Validate validates this mail from result
func (m *MailFromResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMailFromDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MailFromResult) validateMailFromDomain(formats strfmt.Registry) error {

	if err := validate.Required("mailFromDomain", "body", m.MailFromDomain); err != nil {
		return err
	}

	return nil
}

func (m *MailFromResult) validateRecords(formats strfmt.Registry) error {

	if swag.IsZero(m.Records) { // not required
		return nil
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var mailFromResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FAILED","PENDING","VERIFIED","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mailFromResultTypeStatusPropEnum = append(mailFromResultTypeStatusPropEnum, v)
	}
}

const (

	// MailFromResultStatusFAILED captures enum value "FAILED"
	MailFromResultStatusFAILED string = "FAILED"

	// MailFromResultStatusPENDING captures enum value "PENDING"
	MailFromResultStatusPENDING string = "PENDING"

	// MailFromResultStatusVERIFIED captures enum value "VERIFIED"
	MailFromResultStatusVERIFIED string = "VERIFIED"

	// MailFromResultStatusUNKNOWN captures enum value "UNKNOWN"
	MailFromResultStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *MailFromResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mailFromResultTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MailFromResult) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MailFromResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MailFromResult) UnmarshalBinary(b []byte) error {
	var res MailFromResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

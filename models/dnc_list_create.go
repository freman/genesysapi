// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DncListCreate dnc list create
//
// swagger:model DncListCreate
type DncListCreate struct {

	// Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The division this DncList belongs to.
	Division *DomainEntityRef `json:"division,omitempty"`

	// The list of dnc.com codes to be treated as DNC. Required if the dncSourceType is dnc.com.
	// Unique: true
	DncCodes []string `json:"dncCodes"`

	// The type of the DncList.
	// Required: true
	// Enum: [rds dnc.com gryphon]
	DncSourceType *string `json:"dncSourceType"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The status of the import process
	// Read Only: true
	ImportStatus *ImportStatus `json:"importStatus,omitempty"`

	// A gryphon license number. Required if the dncSourceType is gryphon.
	LicenseID string `json:"licenseId,omitempty"`

	// A dnc.com loginId. Required if the dncSourceType is dnc.com.
	LoginID string `json:"loginId,omitempty"`

	// The name of the DncList.
	// Required: true
	Name *string `json:"name"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The total number of phone numbers in the DncList.
	// Read Only: true
	Size int64 `json:"size,omitempty"`

	// Required for updates, must match the version number of the most recent update
	Version int32 `json:"version,omitempty"`
}

// Validate validates this dnc list create
func (m *DncListCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDncCodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDncSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DncListCreate) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DncListCreate) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DncListCreate) validateDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if m.Division != nil {
		if err := m.Division.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

func (m *DncListCreate) validateDncCodes(formats strfmt.Registry) error {

	if swag.IsZero(m.DncCodes) { // not required
		return nil
	}

	if err := validate.UniqueItems("dncCodes", "body", m.DncCodes); err != nil {
		return err
	}

	return nil
}

var dncListCreateTypeDncSourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["rds","dnc.com","gryphon"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dncListCreateTypeDncSourceTypePropEnum = append(dncListCreateTypeDncSourceTypePropEnum, v)
	}
}

const (

	// DncListCreateDncSourceTypeRds captures enum value "rds"
	DncListCreateDncSourceTypeRds string = "rds"

	// DncListCreateDncSourceTypeDncCom captures enum value "dnc.com"
	DncListCreateDncSourceTypeDncCom string = "dnc.com"

	// DncListCreateDncSourceTypeGryphon captures enum value "gryphon"
	DncListCreateDncSourceTypeGryphon string = "gryphon"
)

// prop value enum
func (m *DncListCreate) validateDncSourceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dncListCreateTypeDncSourceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DncListCreate) validateDncSourceType(formats strfmt.Registry) error {

	if err := validate.Required("dncSourceType", "body", m.DncSourceType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDncSourceTypeEnum("dncSourceType", "body", *m.DncSourceType); err != nil {
		return err
	}

	return nil
}

func (m *DncListCreate) validateImportStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ImportStatus) { // not required
		return nil
	}

	if m.ImportStatus != nil {
		if err := m.ImportStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("importStatus")
			}
			return err
		}
	}

	return nil
}

func (m *DncListCreate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DncListCreate) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DncListCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DncListCreate) UnmarshalBinary(b []byte) error {
	var res DncListCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateTimeOffPlanRequest update time off plan request
//
// swagger:model UpdateTimeOffPlanRequest
type UpdateTimeOffPlanRequest struct {

	// Whether this time off plan should be used by agents.
	Active bool `json:"active"`

	// The set of activity code IDs to associate with this time off plan.
	ActivityCodeIds *SetWrapperString `json:"activityCodeIds,omitempty"`

	// Auto approval rule for the time off plan.
	// Enum: [Never Always CheckLimits]
	AutoApprovalRule string `json:"autoApprovalRule,omitempty"`

	// The number of days before the time off request start date for when the request will be expired from the waitlist.
	DaysBeforeStartToExpireFromWaitlist int32 `json:"daysBeforeStartToExpireFromWaitlist,omitempty"`

	// Version metadata for the time off plan
	// Required: true
	Metadata *WfmVersionedEntityMetadata `json:"metadata"`

	// The name of this time off plan.
	Name string `json:"name,omitempty"`

	// The set of time off limit IDs to associate with this time off plan.
	TimeOffLimitIds *SetWrapperString `json:"timeOffLimitIds,omitempty"`
}

// Validate validates this update time off plan request
func (m *UpdateTimeOffPlanRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityCodeIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoApprovalRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeOffLimitIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTimeOffPlanRequest) validateActivityCodeIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ActivityCodeIds) { // not required
		return nil
	}

	if m.ActivityCodeIds != nil {
		if err := m.ActivityCodeIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activityCodeIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activityCodeIds")
			}
			return err
		}
	}

	return nil
}

var updateTimeOffPlanRequestTypeAutoApprovalRulePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Never","Always","CheckLimits"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateTimeOffPlanRequestTypeAutoApprovalRulePropEnum = append(updateTimeOffPlanRequestTypeAutoApprovalRulePropEnum, v)
	}
}

const (

	// UpdateTimeOffPlanRequestAutoApprovalRuleNever captures enum value "Never"
	UpdateTimeOffPlanRequestAutoApprovalRuleNever string = "Never"

	// UpdateTimeOffPlanRequestAutoApprovalRuleAlways captures enum value "Always"
	UpdateTimeOffPlanRequestAutoApprovalRuleAlways string = "Always"

	// UpdateTimeOffPlanRequestAutoApprovalRuleCheckLimits captures enum value "CheckLimits"
	UpdateTimeOffPlanRequestAutoApprovalRuleCheckLimits string = "CheckLimits"
)

// prop value enum
func (m *UpdateTimeOffPlanRequest) validateAutoApprovalRuleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateTimeOffPlanRequestTypeAutoApprovalRulePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateTimeOffPlanRequest) validateAutoApprovalRule(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoApprovalRule) { // not required
		return nil
	}

	// value enum
	if err := m.validateAutoApprovalRuleEnum("autoApprovalRule", "body", m.AutoApprovalRule); err != nil {
		return err
	}

	return nil
}

func (m *UpdateTimeOffPlanRequest) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("metadata", "body", m.Metadata); err != nil {
		return err
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateTimeOffPlanRequest) validateTimeOffLimitIds(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeOffLimitIds) { // not required
		return nil
	}

	if m.TimeOffLimitIds != nil {
		if err := m.TimeOffLimitIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeOffLimitIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeOffLimitIds")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update time off plan request based on the context it is used
func (m *UpdateTimeOffPlanRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActivityCodeIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeOffLimitIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTimeOffPlanRequest) contextValidateActivityCodeIds(ctx context.Context, formats strfmt.Registry) error {

	if m.ActivityCodeIds != nil {
		if err := m.ActivityCodeIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activityCodeIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activityCodeIds")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateTimeOffPlanRequest) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateTimeOffPlanRequest) contextValidateTimeOffLimitIds(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeOffLimitIds != nil {
		if err := m.TimeOffLimitIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeOffLimitIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeOffLimitIds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateTimeOffPlanRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateTimeOffPlanRequest) UnmarshalBinary(b []byte) error {
	var res UpdateTimeOffPlanRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

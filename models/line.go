// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Line line
//
// swagger:model Line
type Line struct {

	// The ID of the user that created the resource.
	CreatedBy string `json:"createdBy,omitempty"`

	// The application that created the resource.
	CreatedByApp string `json:"createdByApp,omitempty"`

	// The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// default for user
	DefaultForUser *DomainEntityRef `json:"defaultForUser,omitempty"`

	// The resource's description.
	Description string `json:"description,omitempty"`

	// edge group
	EdgeGroup *DomainEntityRef `json:"edgeGroup,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// line base settings
	LineBaseSettings *DomainEntityRef `json:"lineBaseSettings,omitempty"`

	// logged in user
	LoggedInUser *DomainEntityRef `json:"loggedInUser,omitempty"`

	// The ID of the user that last modified the resource.
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// The application that last modified the resource.
	ModifiedByApp string `json:"modifiedByApp,omitempty"`

	// The name of the entity.
	// Required: true
	Name *string `json:"name"`

	// The primary edge associated to the line. (Deprecated)
	PrimaryEdge *Edge `json:"primaryEdge,omitempty"`

	// properties
	Properties map[string]interface{} `json:"properties,omitempty"`

	// The secondary edge associated to the line. (Deprecated)
	SecondaryEdge *Edge `json:"secondaryEdge,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// site
	Site *DomainEntityRef `json:"site,omitempty"`

	// Indicates if the resource is active, inactive, or deleted.
	// Read Only: true
	// Enum: [active inactive deleted]
	State string `json:"state,omitempty"`

	// template
	Template *DomainEntityRef `json:"template,omitempty"`

	// The current version of the resource.
	Version int32 `json:"version,omitempty"`
}

// Validate validates this line
func (m *Line) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultForUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineBaseSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoggedInUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryEdge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryEdge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Line) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Line) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Line) validateDefaultForUser(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultForUser) { // not required
		return nil
	}

	if m.DefaultForUser != nil {
		if err := m.DefaultForUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultForUser")
			}
			return err
		}
	}

	return nil
}

func (m *Line) validateEdgeGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.EdgeGroup) { // not required
		return nil
	}

	if m.EdgeGroup != nil {
		if err := m.EdgeGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeGroup")
			}
			return err
		}
	}

	return nil
}

func (m *Line) validateLineBaseSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.LineBaseSettings) { // not required
		return nil
	}

	if m.LineBaseSettings != nil {
		if err := m.LineBaseSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lineBaseSettings")
			}
			return err
		}
	}

	return nil
}

func (m *Line) validateLoggedInUser(formats strfmt.Registry) error {

	if swag.IsZero(m.LoggedInUser) { // not required
		return nil
	}

	if m.LoggedInUser != nil {
		if err := m.LoggedInUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loggedInUser")
			}
			return err
		}
	}

	return nil
}

func (m *Line) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Line) validatePrimaryEdge(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryEdge) { // not required
		return nil
	}

	if m.PrimaryEdge != nil {
		if err := m.PrimaryEdge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryEdge")
			}
			return err
		}
	}

	return nil
}

func (m *Line) validateSecondaryEdge(formats strfmt.Registry) error {

	if swag.IsZero(m.SecondaryEdge) { // not required
		return nil
	}

	if m.SecondaryEdge != nil {
		if err := m.SecondaryEdge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryEdge")
			}
			return err
		}
	}

	return nil
}

func (m *Line) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Line) validateSite(formats strfmt.Registry) error {

	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

var lineTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lineTypeStatePropEnum = append(lineTypeStatePropEnum, v)
	}
}

const (

	// LineStateActive captures enum value "active"
	LineStateActive string = "active"

	// LineStateInactive captures enum value "inactive"
	LineStateInactive string = "inactive"

	// LineStateDeleted captures enum value "deleted"
	LineStateDeleted string = "deleted"
)

// prop value enum
func (m *Line) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lineTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Line) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *Line) validateTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Line) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Line) UnmarshalBinary(b []byte) error {
	var res Line
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

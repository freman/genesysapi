// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommandStatus command status
//
// swagger:model CommandStatus
type CommandStatus struct {

	// command type
	// Enum: [UPLOAD COPYDOCUMENT MOVEDOCUMENT DELETEWORKSPACE DELETEDOCUMENT DELETETAG UPDATETAG REINDEX CLEANUP REPLACEDOCUMENT]
	CommandType string `json:"commandType,omitempty"`

	// document
	Document *Document `json:"document,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	Expiration strfmt.DateTime `json:"expiration,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// status code
	// Enum: [INPROGRESS COMPLETE ERROR CANCELING CANCELED]
	StatusCode string `json:"statusCode,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`
}

// Validate validates this command status
func (m *CommandStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commandStatusTypeCommandTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UPLOAD","COPYDOCUMENT","MOVEDOCUMENT","DELETEWORKSPACE","DELETEDOCUMENT","DELETETAG","UPDATETAG","REINDEX","CLEANUP","REPLACEDOCUMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commandStatusTypeCommandTypePropEnum = append(commandStatusTypeCommandTypePropEnum, v)
	}
}

const (

	// CommandStatusCommandTypeUPLOAD captures enum value "UPLOAD"
	CommandStatusCommandTypeUPLOAD string = "UPLOAD"

	// CommandStatusCommandTypeCOPYDOCUMENT captures enum value "COPYDOCUMENT"
	CommandStatusCommandTypeCOPYDOCUMENT string = "COPYDOCUMENT"

	// CommandStatusCommandTypeMOVEDOCUMENT captures enum value "MOVEDOCUMENT"
	CommandStatusCommandTypeMOVEDOCUMENT string = "MOVEDOCUMENT"

	// CommandStatusCommandTypeDELETEWORKSPACE captures enum value "DELETEWORKSPACE"
	CommandStatusCommandTypeDELETEWORKSPACE string = "DELETEWORKSPACE"

	// CommandStatusCommandTypeDELETEDOCUMENT captures enum value "DELETEDOCUMENT"
	CommandStatusCommandTypeDELETEDOCUMENT string = "DELETEDOCUMENT"

	// CommandStatusCommandTypeDELETETAG captures enum value "DELETETAG"
	CommandStatusCommandTypeDELETETAG string = "DELETETAG"

	// CommandStatusCommandTypeUPDATETAG captures enum value "UPDATETAG"
	CommandStatusCommandTypeUPDATETAG string = "UPDATETAG"

	// CommandStatusCommandTypeREINDEX captures enum value "REINDEX"
	CommandStatusCommandTypeREINDEX string = "REINDEX"

	// CommandStatusCommandTypeCLEANUP captures enum value "CLEANUP"
	CommandStatusCommandTypeCLEANUP string = "CLEANUP"

	// CommandStatusCommandTypeREPLACEDOCUMENT captures enum value "REPLACEDOCUMENT"
	CommandStatusCommandTypeREPLACEDOCUMENT string = "REPLACEDOCUMENT"
)

// prop value enum
func (m *CommandStatus) validateCommandTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commandStatusTypeCommandTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommandStatus) validateCommandType(formats strfmt.Registry) error {

	if swag.IsZero(m.CommandType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCommandTypeEnum("commandType", "body", m.CommandType); err != nil {
		return err
	}

	return nil
}

func (m *CommandStatus) validateDocument(formats strfmt.Registry) error {

	if swag.IsZero(m.Document) { // not required
		return nil
	}

	if m.Document != nil {
		if err := m.Document.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("document")
			}
			return err
		}
	}

	return nil
}

func (m *CommandStatus) validateExpiration(formats strfmt.Registry) error {

	if swag.IsZero(m.Expiration) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration", "body", "date-time", m.Expiration.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CommandStatus) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var commandStatusTypeStatusCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INPROGRESS","COMPLETE","ERROR","CANCELING","CANCELED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commandStatusTypeStatusCodePropEnum = append(commandStatusTypeStatusCodePropEnum, v)
	}
}

const (

	// CommandStatusStatusCodeINPROGRESS captures enum value "INPROGRESS"
	CommandStatusStatusCodeINPROGRESS string = "INPROGRESS"

	// CommandStatusStatusCodeCOMPLETE captures enum value "COMPLETE"
	CommandStatusStatusCodeCOMPLETE string = "COMPLETE"

	// CommandStatusStatusCodeERROR captures enum value "ERROR"
	CommandStatusStatusCodeERROR string = "ERROR"

	// CommandStatusStatusCodeCANCELING captures enum value "CANCELING"
	CommandStatusStatusCodeCANCELING string = "CANCELING"

	// CommandStatusStatusCodeCANCELED captures enum value "CANCELED"
	CommandStatusStatusCodeCANCELED string = "CANCELED"
)

// prop value enum
func (m *CommandStatus) validateStatusCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commandStatusTypeStatusCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommandStatus) validateStatusCode(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusCodeEnum("statusCode", "body", m.StatusCode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommandStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommandStatus) UnmarshalBinary(b []byte) error {
	var res CommandStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

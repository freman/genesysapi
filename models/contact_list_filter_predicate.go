// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContactListFilterPredicate contact list filter predicate
//
// swagger:model ContactListFilterPredicate
type ContactListFilterPredicate struct {

	// Contact list column from the ContactListFilter's contactList.
	Column string `json:"column,omitempty"`

	// The type of data in the contact column.
	// Enum: [numeric alphabetic]
	ColumnType string `json:"columnType,omitempty"`

	// Inverts the result of the predicate (i.e., if the predicate returns true, inverting it will return false).
	Inverted bool `json:"inverted"`

	// The operator for this ContactListFilterPredicate.
	// Enum: [EQUALS LESS_THAN LESS_THAN_EQUALS GREATER_THAN GREATER_THAN_EQUALS CONTAINS BEGINS_WITH ENDS_WITH BEFORE AFTER BETWEEN IN]
	Operator string `json:"operator,omitempty"`

	// A range of values. Required for operators BETWEEN and IN.
	Range *ContactListFilterRange `json:"range,omitempty"`

	// Value with which to compare the contact's data. This could be text, a number, or a relative time. A value for relative time should follow the format PxxDTyyHzzM, where xx, yy, and zz specify the days, hours and minutes. For example, a value of P01DT08H30M corresponds to 1 day, 8 hours, and 30 minutes from now. To specify a time in the past, include a negative sign before each numeric value. For example, a value of P-01DT-08H-30M corresponds to 1 day, 8 hours, and 30 minutes in the past. You can also do things like P01DT00H-30M, which would correspond to 23 hours and 30 minutes from now (1 day - 30 minutes).
	Value string `json:"value,omitempty"`
}

// Validate validates this contact list filter predicate
func (m *ContactListFilterPredicate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumnType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var contactListFilterPredicateTypeColumnTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["numeric","alphabetic"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contactListFilterPredicateTypeColumnTypePropEnum = append(contactListFilterPredicateTypeColumnTypePropEnum, v)
	}
}

const (

	// ContactListFilterPredicateColumnTypeNumeric captures enum value "numeric"
	ContactListFilterPredicateColumnTypeNumeric string = "numeric"

	// ContactListFilterPredicateColumnTypeAlphabetic captures enum value "alphabetic"
	ContactListFilterPredicateColumnTypeAlphabetic string = "alphabetic"
)

// prop value enum
func (m *ContactListFilterPredicate) validateColumnTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contactListFilterPredicateTypeColumnTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContactListFilterPredicate) validateColumnType(formats strfmt.Registry) error {
	if swag.IsZero(m.ColumnType) { // not required
		return nil
	}

	// value enum
	if err := m.validateColumnTypeEnum("columnType", "body", m.ColumnType); err != nil {
		return err
	}

	return nil
}

var contactListFilterPredicateTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EQUALS","LESS_THAN","LESS_THAN_EQUALS","GREATER_THAN","GREATER_THAN_EQUALS","CONTAINS","BEGINS_WITH","ENDS_WITH","BEFORE","AFTER","BETWEEN","IN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contactListFilterPredicateTypeOperatorPropEnum = append(contactListFilterPredicateTypeOperatorPropEnum, v)
	}
}

const (

	// ContactListFilterPredicateOperatorEQUALS captures enum value "EQUALS"
	ContactListFilterPredicateOperatorEQUALS string = "EQUALS"

	// ContactListFilterPredicateOperatorLESSTHAN captures enum value "LESS_THAN"
	ContactListFilterPredicateOperatorLESSTHAN string = "LESS_THAN"

	// ContactListFilterPredicateOperatorLESSTHANEQUALS captures enum value "LESS_THAN_EQUALS"
	ContactListFilterPredicateOperatorLESSTHANEQUALS string = "LESS_THAN_EQUALS"

	// ContactListFilterPredicateOperatorGREATERTHAN captures enum value "GREATER_THAN"
	ContactListFilterPredicateOperatorGREATERTHAN string = "GREATER_THAN"

	// ContactListFilterPredicateOperatorGREATERTHANEQUALS captures enum value "GREATER_THAN_EQUALS"
	ContactListFilterPredicateOperatorGREATERTHANEQUALS string = "GREATER_THAN_EQUALS"

	// ContactListFilterPredicateOperatorCONTAINS captures enum value "CONTAINS"
	ContactListFilterPredicateOperatorCONTAINS string = "CONTAINS"

	// ContactListFilterPredicateOperatorBEGINSWITH captures enum value "BEGINS_WITH"
	ContactListFilterPredicateOperatorBEGINSWITH string = "BEGINS_WITH"

	// ContactListFilterPredicateOperatorENDSWITH captures enum value "ENDS_WITH"
	ContactListFilterPredicateOperatorENDSWITH string = "ENDS_WITH"

	// ContactListFilterPredicateOperatorBEFORE captures enum value "BEFORE"
	ContactListFilterPredicateOperatorBEFORE string = "BEFORE"

	// ContactListFilterPredicateOperatorAFTER captures enum value "AFTER"
	ContactListFilterPredicateOperatorAFTER string = "AFTER"

	// ContactListFilterPredicateOperatorBETWEEN captures enum value "BETWEEN"
	ContactListFilterPredicateOperatorBETWEEN string = "BETWEEN"

	// ContactListFilterPredicateOperatorIN captures enum value "IN"
	ContactListFilterPredicateOperatorIN string = "IN"
)

// prop value enum
func (m *ContactListFilterPredicate) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contactListFilterPredicateTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContactListFilterPredicate) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *ContactListFilterPredicate) validateRange(formats strfmt.Registry) error {
	if swag.IsZero(m.Range) { // not required
		return nil
	}

	if m.Range != nil {
		if err := m.Range.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this contact list filter predicate based on the context it is used
func (m *ContactListFilterPredicate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactListFilterPredicate) contextValidateRange(ctx context.Context, formats strfmt.Registry) error {

	if m.Range != nil {
		if err := m.Range.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContactListFilterPredicate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactListFilterPredicate) UnmarshalBinary(b []byte) error {
	var res ContactListFilterPredicate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Survey survey
//
// swagger:model Survey
type Survey struct {

	// agent
	Agent *DomainEntityRef `json:"agent,omitempty"`

	// answers
	Answers *SurveyScoringSet `json:"answers,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	CompletedDate strfmt.DateTime `json:"completedDate,omitempty"`

	// conversation
	Conversation *ConversationReference `json:"conversation,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// queue
	Queue *QueueReference `json:"queue,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// status
	// Enum: [Pending Sent InProgress Finished OptOut Error Expired]
	Status string `json:"status,omitempty"`

	// Additional information about what happened when the survey is in Error status.
	SurveyErrorDetails *SurveyErrorDetails `json:"surveyErrorDetails,omitempty"`

	// Survey form used for this survey.
	SurveyForm *SurveyForm `json:"surveyForm,omitempty"`
}

// Validate validates this survey
func (m *Survey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnswers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSurveyErrorDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSurveyForm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Survey) validateAgent(formats strfmt.Registry) error {

	if swag.IsZero(m.Agent) { // not required
		return nil
	}

	if m.Agent != nil {
		if err := m.Agent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *Survey) validateAnswers(formats strfmt.Registry) error {

	if swag.IsZero(m.Answers) { // not required
		return nil
	}

	if m.Answers != nil {
		if err := m.Answers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("answers")
			}
			return err
		}
	}

	return nil
}

func (m *Survey) validateCompletedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("completedDate", "body", "date-time", m.CompletedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Survey) validateConversation(formats strfmt.Registry) error {

	if swag.IsZero(m.Conversation) { // not required
		return nil
	}

	if m.Conversation != nil {
		if err := m.Conversation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversation")
			}
			return err
		}
	}

	return nil
}

func (m *Survey) validateQueue(formats strfmt.Registry) error {

	if swag.IsZero(m.Queue) { // not required
		return nil
	}

	if m.Queue != nil {
		if err := m.Queue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

func (m *Survey) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var surveyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Sent","InProgress","Finished","OptOut","Error","Expired"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		surveyTypeStatusPropEnum = append(surveyTypeStatusPropEnum, v)
	}
}

const (

	// SurveyStatusPending captures enum value "Pending"
	SurveyStatusPending string = "Pending"

	// SurveyStatusSent captures enum value "Sent"
	SurveyStatusSent string = "Sent"

	// SurveyStatusInProgress captures enum value "InProgress"
	SurveyStatusInProgress string = "InProgress"

	// SurveyStatusFinished captures enum value "Finished"
	SurveyStatusFinished string = "Finished"

	// SurveyStatusOptOut captures enum value "OptOut"
	SurveyStatusOptOut string = "OptOut"

	// SurveyStatusError captures enum value "Error"
	SurveyStatusError string = "Error"

	// SurveyStatusExpired captures enum value "Expired"
	SurveyStatusExpired string = "Expired"
)

// prop value enum
func (m *Survey) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, surveyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Survey) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Survey) validateSurveyErrorDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.SurveyErrorDetails) { // not required
		return nil
	}

	if m.SurveyErrorDetails != nil {
		if err := m.SurveyErrorDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("surveyErrorDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Survey) validateSurveyForm(formats strfmt.Registry) error {

	if swag.IsZero(m.SurveyForm) { // not required
		return nil
	}

	if m.SurveyForm != nil {
		if err := m.SurveyForm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("surveyForm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Survey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Survey) UnmarshalBinary(b []byte) error {
	var res Survey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

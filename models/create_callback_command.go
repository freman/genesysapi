// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCallbackCommand create callback command
//
// swagger:model CreateCallbackCommand
type CreateCallbackCommand struct {

	// A list of phone numbers for the callback.
	// Required: true
	CallbackNumbers []string `json:"callbackNumbers"`

	// The scheduled date-time for the callback as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Example: 2015-01-02T16:59:59.000Z
	// Format: date-time
	CallbackScheduledTime strfmt.DateTime `json:"callbackScheduledTime,omitempty"`

	// The name of the party to be called back.
	CallbackUserName string `json:"callbackUserName,omitempty"`

	// The phone number displayed to recipients when a phone call is placed as part of the callback. Must conform to the E.164 format. May be overridden by other settings in the system such as external trunk settings. Telco support for "callerId" varies.
	CallerID string `json:"callerId,omitempty"`

	// The name displayed to recipients when a phone call is placed as part of the callback. May be overridden by other settings in the system such as external trunk settings. Telco support for "callerIdName" varies.
	CallerIDName string `json:"callerIdName,omitempty"`

	// The country code to be associated with the callback numbers.
	CountryCode string `json:"countryCode,omitempty"`

	// A map of key-value pairs containing additional data that can be associated to the callback. These values will appear in the attributes property on the conversation participant. Example: { "notes": "ready to close the deal!", "customerPreferredName": "Doc" }
	Data map[string]string `json:"data,omitempty"`

	// The identifier of the queue to be used for the callback. Either queueId or routingData is required.
	QueueID string `json:"queueId,omitempty"`

	// The routing data to be used for the callback. Either queueId or routingData is required.
	RoutingData *RoutingData `json:"routingData,omitempty"`

	// The identifier of the script to be used for the callback
	ScriptID string `json:"scriptId,omitempty"`

	// Whether or not to validate the callback numbers for phone number format.
	ValidateCallbackNumbers bool `json:"validateCallbackNumbers"`
}

// Validate validates this create callback command
func (m *CreateCallbackCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallbackNumbers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallbackScheduledTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCallbackCommand) validateCallbackNumbers(formats strfmt.Registry) error {

	if err := validate.Required("callbackNumbers", "body", m.CallbackNumbers); err != nil {
		return err
	}

	return nil
}

func (m *CreateCallbackCommand) validateCallbackScheduledTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CallbackScheduledTime) { // not required
		return nil
	}

	if err := validate.FormatOf("callbackScheduledTime", "body", "date-time", m.CallbackScheduledTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateCallbackCommand) validateRoutingData(formats strfmt.Registry) error {
	if swag.IsZero(m.RoutingData) { // not required
		return nil
	}

	if m.RoutingData != nil {
		if err := m.RoutingData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routingData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("routingData")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create callback command based on the context it is used
func (m *CreateCallbackCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoutingData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCallbackCommand) contextValidateRoutingData(ctx context.Context, formats strfmt.Registry) error {

	if m.RoutingData != nil {
		if err := m.RoutingData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routingData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("routingData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateCallbackCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCallbackCommand) UnmarshalBinary(b []byte) error {
	var res CreateCallbackCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Site site
//
// swagger:model Site
type Site struct {

	// addresses
	Addresses []*Contact `json:"addresses"`

	// Is this site a core site
	CoreSite bool `json:"coreSite"`

	// The ID of the user that created the resource.
	// Read Only: true
	CreatedBy string `json:"createdBy,omitempty"`

	// The application that created the resource.
	// Read Only: true
	CreatedByApp string `json:"createdByApp,omitempty"`

	// The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The resource's description.
	Description string `json:"description,omitempty"`

	// The division to which this entity belongs.
	Division *Division `json:"division,omitempty"`

	// Recurrance rule, time zone, and start/end settings for automatic edge updates for this site
	EdgeAutoUpdateConfig *EdgeAutoUpdateConfig `json:"edgeAutoUpdateConfig,omitempty"`

	// edges
	Edges []*Edge `json:"edges"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Location
	// Required: true
	Location *LocationDefinition `json:"location"`

	// managed
	Managed bool `json:"managed"`

	// Media model for the site
	// Enum: [Premises Cloud]
	MediaModel string `json:"mediaModel,omitempty"`

	// media regions use latency based
	MediaRegionsUseLatencyBased bool `json:"mediaRegionsUseLatencyBased"`

	// The ID of the user that last modified the resource.
	// Read Only: true
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// The application that last modified the resource.
	// Read Only: true
	ModifiedByApp string `json:"modifiedByApp,omitempty"`

	// The name of the entity.
	// Required: true
	Name *string `json:"name"`

	// Network Time Protocol settings for the site
	NtpSettings *NTPSettings `json:"ntpSettings,omitempty"`

	// primary edges
	PrimaryEdges []*Edge `json:"primaryEdges"`

	// primary sites
	PrimarySites []*DomainEntityRef `json:"primarySites"`

	// secondary edges
	SecondaryEdges []*Edge `json:"secondaryEdges"`

	// secondary sites
	SecondarySites []*DomainEntityRef `json:"secondarySites"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The site connections
	SiteConnections []*SiteConnection `json:"siteConnections"`

	// Indicates if the resource is active, inactive, or deleted.
	// Read Only: true
	// Enum: [active inactive deleted]
	State string `json:"state,omitempty"`

	// The current version of the resource.
	Version int32 `json:"version,omitempty"`
}

// Validate validates this site
func (m *Site) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeAutoUpdateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtpSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryEdges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimarySites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryEdges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondarySites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Site) validateAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.Addresses) { // not required
		return nil
	}

	for i := 0; i < len(m.Addresses); i++ {
		if swag.IsZero(m.Addresses[i]) { // not required
			continue
		}

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Site) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Site) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Site) validateDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if m.Division != nil {
		if err := m.Division.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

func (m *Site) validateEdgeAutoUpdateConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.EdgeAutoUpdateConfig) { // not required
		return nil
	}

	if m.EdgeAutoUpdateConfig != nil {
		if err := m.EdgeAutoUpdateConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeAutoUpdateConfig")
			}
			return err
		}
	}

	return nil
}

func (m *Site) validateEdges(formats strfmt.Registry) error {

	if swag.IsZero(m.Edges) { // not required
		return nil
	}

	for i := 0; i < len(m.Edges); i++ {
		if swag.IsZero(m.Edges[i]) { // not required
			continue
		}

		if m.Edges[i] != nil {
			if err := m.Edges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("edges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Site) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

var siteTypeMediaModelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Premises","Cloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteTypeMediaModelPropEnum = append(siteTypeMediaModelPropEnum, v)
	}
}

const (

	// SiteMediaModelPremises captures enum value "Premises"
	SiteMediaModelPremises string = "Premises"

	// SiteMediaModelCloud captures enum value "Cloud"
	SiteMediaModelCloud string = "Cloud"
)

// prop value enum
func (m *Site) validateMediaModelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, siteTypeMediaModelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Site) validateMediaModel(formats strfmt.Registry) error {

	if swag.IsZero(m.MediaModel) { // not required
		return nil
	}

	// value enum
	if err := m.validateMediaModelEnum("mediaModel", "body", m.MediaModel); err != nil {
		return err
	}

	return nil
}

func (m *Site) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Site) validateNtpSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.NtpSettings) { // not required
		return nil
	}

	if m.NtpSettings != nil {
		if err := m.NtpSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntpSettings")
			}
			return err
		}
	}

	return nil
}

func (m *Site) validatePrimaryEdges(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryEdges) { // not required
		return nil
	}

	for i := 0; i < len(m.PrimaryEdges); i++ {
		if swag.IsZero(m.PrimaryEdges[i]) { // not required
			continue
		}

		if m.PrimaryEdges[i] != nil {
			if err := m.PrimaryEdges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("primaryEdges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Site) validatePrimarySites(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimarySites) { // not required
		return nil
	}

	for i := 0; i < len(m.PrimarySites); i++ {
		if swag.IsZero(m.PrimarySites[i]) { // not required
			continue
		}

		if m.PrimarySites[i] != nil {
			if err := m.PrimarySites[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("primarySites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Site) validateSecondaryEdges(formats strfmt.Registry) error {

	if swag.IsZero(m.SecondaryEdges) { // not required
		return nil
	}

	for i := 0; i < len(m.SecondaryEdges); i++ {
		if swag.IsZero(m.SecondaryEdges[i]) { // not required
			continue
		}

		if m.SecondaryEdges[i] != nil {
			if err := m.SecondaryEdges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secondaryEdges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Site) validateSecondarySites(formats strfmt.Registry) error {

	if swag.IsZero(m.SecondarySites) { // not required
		return nil
	}

	for i := 0; i < len(m.SecondarySites); i++ {
		if swag.IsZero(m.SecondarySites[i]) { // not required
			continue
		}

		if m.SecondarySites[i] != nil {
			if err := m.SecondarySites[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secondarySites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Site) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Site) validateSiteConnections(formats strfmt.Registry) error {

	if swag.IsZero(m.SiteConnections) { // not required
		return nil
	}

	for i := 0; i < len(m.SiteConnections); i++ {
		if swag.IsZero(m.SiteConnections[i]) { // not required
			continue
		}

		if m.SiteConnections[i] != nil {
			if err := m.SiteConnections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("siteConnections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var siteTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteTypeStatePropEnum = append(siteTypeStatePropEnum, v)
	}
}

const (

	// SiteStateActive captures enum value "active"
	SiteStateActive string = "active"

	// SiteStateInactive captures enum value "inactive"
	SiteStateInactive string = "inactive"

	// SiteStateDeleted captures enum value "deleted"
	SiteStateDeleted string = "deleted"
)

// prop value enum
func (m *Site) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, siteTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Site) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Site) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Site) UnmarshalBinary(b []byte) error {
	var res Site
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

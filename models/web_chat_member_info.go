// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebChatMemberInfo web chat member info
//
// swagger:model WebChatMemberInfo
type WebChatMemberInfo struct {

	// If true, the guest member is an authenticated guest.
	AuthenticatedGuest bool `json:"authenticatedGuest"`

	// The url to the avatar image of the member.
	// Format: uri
	AvatarImageURL strfmt.URI `json:"avatarImageUrl,omitempty"`

	// Any custom fields of information pertaining to this member.
	CustomFields map[string]string `json:"customFields,omitempty"`

	// The display name of the member.
	DisplayName string `json:"displayName,omitempty"`

	// The email address of the member.
	Email string `json:"email,omitempty"`

	// The first name of the member.
	FirstName string `json:"firstName,omitempty"`

	// The communicationId of this member.
	ID string `json:"id,omitempty"`

	// The time the member joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	JoinDate strfmt.DateTime `json:"joinDate,omitempty"`

	// The last name of the member.
	LastName string `json:"lastName,omitempty"`

	// The time the member left the conversation, or null if the member is still active in the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	LeaveDate strfmt.DateTime `json:"leaveDate,omitempty"`

	// The phone number of the member.
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// The role of the member, one of [agent, customer, acd, workflow]
	// Required: true
	// Enum: [AGENT CUSTOMER WORKFLOW ACD]
	Role *string `json:"role"`

	// The connection state of this member.
	// Enum: [CONNECTED DISCONNECTED ALERTING]
	State string `json:"state,omitempty"`
}

// Validate validates this web chat member info
func (m *WebChatMemberInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvatarImageURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJoinDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLeaveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebChatMemberInfo) validateAvatarImageURL(formats strfmt.Registry) error {
	if swag.IsZero(m.AvatarImageURL) { // not required
		return nil
	}

	if err := validate.FormatOf("avatarImageUrl", "body", "uri", m.AvatarImageURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WebChatMemberInfo) validateJoinDate(formats strfmt.Registry) error {
	if swag.IsZero(m.JoinDate) { // not required
		return nil
	}

	if err := validate.FormatOf("joinDate", "body", "date-time", m.JoinDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WebChatMemberInfo) validateLeaveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LeaveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("leaveDate", "body", "date-time", m.LeaveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var webChatMemberInfoTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT","CUSTOMER","WORKFLOW","ACD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webChatMemberInfoTypeRolePropEnum = append(webChatMemberInfoTypeRolePropEnum, v)
	}
}

const (

	// WebChatMemberInfoRoleAGENT captures enum value "AGENT"
	WebChatMemberInfoRoleAGENT string = "AGENT"

	// WebChatMemberInfoRoleCUSTOMER captures enum value "CUSTOMER"
	WebChatMemberInfoRoleCUSTOMER string = "CUSTOMER"

	// WebChatMemberInfoRoleWORKFLOW captures enum value "WORKFLOW"
	WebChatMemberInfoRoleWORKFLOW string = "WORKFLOW"

	// WebChatMemberInfoRoleACD captures enum value "ACD"
	WebChatMemberInfoRoleACD string = "ACD"
)

// prop value enum
func (m *WebChatMemberInfo) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, webChatMemberInfoTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WebChatMemberInfo) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

var webChatMemberInfoTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONNECTED","DISCONNECTED","ALERTING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webChatMemberInfoTypeStatePropEnum = append(webChatMemberInfoTypeStatePropEnum, v)
	}
}

const (

	// WebChatMemberInfoStateCONNECTED captures enum value "CONNECTED"
	WebChatMemberInfoStateCONNECTED string = "CONNECTED"

	// WebChatMemberInfoStateDISCONNECTED captures enum value "DISCONNECTED"
	WebChatMemberInfoStateDISCONNECTED string = "DISCONNECTED"

	// WebChatMemberInfoStateALERTING captures enum value "ALERTING"
	WebChatMemberInfoStateALERTING string = "ALERTING"
)

// prop value enum
func (m *WebChatMemberInfo) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, webChatMemberInfoTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WebChatMemberInfo) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this web chat member info based on context it is used
func (m *WebChatMemberInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WebChatMemberInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebChatMemberInfo) UnmarshalBinary(b []byte) error {
	var res WebChatMemberInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

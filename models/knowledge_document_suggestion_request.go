// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnowledgeDocumentSuggestionRequest knowledge document suggestion request
//
// swagger:model KnowledgeDocumentSuggestionRequest
type KnowledgeDocumentSuggestionRequest struct {

	// Filter for the document suggestions.
	Filter *DocumentQuery `json:"filter,omitempty"`

	// Indicates whether the suggestion results would also include draft documents.
	IncludeDraftDocuments bool `json:"includeDraftDocuments"`

	// Retrieves the documents created/modified/published in specified date and time range.
	Interval *DocumentQueryInterval `json:"interval,omitempty"`

	// Page size of the returned results.
	PageSize int32 `json:"pageSize,omitempty"`

	// Query to get autocomplete suggestions for the matching knowledge documents.
	// Required: true
	Query *string `json:"query"`
}

// Validate validates this knowledge document suggestion request
func (m *KnowledgeDocumentSuggestionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeDocumentSuggestionRequest) validateFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.Filter) { // not required
		return nil
	}

	if m.Filter != nil {
		if err := m.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeDocumentSuggestionRequest) validateInterval(formats strfmt.Registry) error {

	if swag.IsZero(m.Interval) { // not required
		return nil
	}

	if m.Interval != nil {
		if err := m.Interval.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interval")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeDocumentSuggestionRequest) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KnowledgeDocumentSuggestionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnowledgeDocumentSuggestionRequest) UnmarshalBinary(b []byte) error {
	var res KnowledgeDocumentSuggestionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

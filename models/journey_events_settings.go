// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JourneyEventsSettings Settings concerning journey events
//
// swagger:model JourneyEventsSettings
type JourneyEventsSettings struct {

	// Tracks when and where a visitor clicks on a webpage.
	ClickEvents []*SelectorEventTrigger `json:"clickEvents"`

	// Whether or not journey event collection is enabled.
	Enabled bool `json:"enabled"`

	// List of parameters to be excluded from the query string.
	ExcludedQueryParameters []string `json:"excludedQueryParameters"`

	// Controls how the form submitted and form abandoned events are tracked after a visitor interacts with a form element.
	FormsTrackEvents []*FormsTrackTrigger `json:"formsTrackEvents"`

	// Tracks when and where a visitor becomes inactive on a webpage.
	IdleEvents []*IdleEventTrigger `json:"idleEvents"`

	// Tracks when elements become visible or hidden on screen.
	InViewportEvents []*SelectorEventTrigger `json:"inViewportEvents"`

	// Controls how the pageview events are tracked.
	// Enum: [Auto Once Off]
	PageviewConfig string `json:"pageviewConfig,omitempty"`

	// Tracks when a visitor scrolls to a specific percentage of a webpage.
	ScrollDepthEvents []*ScrollPercentageEventTrigger `json:"scrollDepthEvents"`

	// List of query parameters used for search (e.g. 'q').
	SearchQueryParameters []string `json:"searchQueryParameters"`

	// Whether or not to keep the URL fragment.
	ShouldKeepURLFragment bool `json:"shouldKeepUrlFragment"`
}

// Validate validates this journey events settings
func (m *JourneyEventsSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClickEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormsTrackEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdleEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInViewportEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageviewConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScrollDepthEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JourneyEventsSettings) validateClickEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.ClickEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.ClickEvents); i++ {
		if swag.IsZero(m.ClickEvents[i]) { // not required
			continue
		}

		if m.ClickEvents[i] != nil {
			if err := m.ClickEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clickEvents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clickEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JourneyEventsSettings) validateFormsTrackEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.FormsTrackEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.FormsTrackEvents); i++ {
		if swag.IsZero(m.FormsTrackEvents[i]) { // not required
			continue
		}

		if m.FormsTrackEvents[i] != nil {
			if err := m.FormsTrackEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("formsTrackEvents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("formsTrackEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JourneyEventsSettings) validateIdleEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.IdleEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.IdleEvents); i++ {
		if swag.IsZero(m.IdleEvents[i]) { // not required
			continue
		}

		if m.IdleEvents[i] != nil {
			if err := m.IdleEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("idleEvents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("idleEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JourneyEventsSettings) validateInViewportEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.InViewportEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.InViewportEvents); i++ {
		if swag.IsZero(m.InViewportEvents[i]) { // not required
			continue
		}

		if m.InViewportEvents[i] != nil {
			if err := m.InViewportEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inViewportEvents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inViewportEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var journeyEventsSettingsTypePageviewConfigPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Auto","Once","Off"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		journeyEventsSettingsTypePageviewConfigPropEnum = append(journeyEventsSettingsTypePageviewConfigPropEnum, v)
	}
}

const (

	// JourneyEventsSettingsPageviewConfigAuto captures enum value "Auto"
	JourneyEventsSettingsPageviewConfigAuto string = "Auto"

	// JourneyEventsSettingsPageviewConfigOnce captures enum value "Once"
	JourneyEventsSettingsPageviewConfigOnce string = "Once"

	// JourneyEventsSettingsPageviewConfigOff captures enum value "Off"
	JourneyEventsSettingsPageviewConfigOff string = "Off"
)

// prop value enum
func (m *JourneyEventsSettings) validatePageviewConfigEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, journeyEventsSettingsTypePageviewConfigPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JourneyEventsSettings) validatePageviewConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.PageviewConfig) { // not required
		return nil
	}

	// value enum
	if err := m.validatePageviewConfigEnum("pageviewConfig", "body", m.PageviewConfig); err != nil {
		return err
	}

	return nil
}

func (m *JourneyEventsSettings) validateScrollDepthEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.ScrollDepthEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.ScrollDepthEvents); i++ {
		if swag.IsZero(m.ScrollDepthEvents[i]) { // not required
			continue
		}

		if m.ScrollDepthEvents[i] != nil {
			if err := m.ScrollDepthEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scrollDepthEvents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scrollDepthEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this journey events settings based on the context it is used
func (m *JourneyEventsSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClickEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFormsTrackEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdleEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInViewportEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScrollDepthEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JourneyEventsSettings) contextValidateClickEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClickEvents); i++ {

		if m.ClickEvents[i] != nil {
			if err := m.ClickEvents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clickEvents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clickEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JourneyEventsSettings) contextValidateFormsTrackEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FormsTrackEvents); i++ {

		if m.FormsTrackEvents[i] != nil {
			if err := m.FormsTrackEvents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("formsTrackEvents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("formsTrackEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JourneyEventsSettings) contextValidateIdleEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IdleEvents); i++ {

		if m.IdleEvents[i] != nil {
			if err := m.IdleEvents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("idleEvents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("idleEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JourneyEventsSettings) contextValidateInViewportEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InViewportEvents); i++ {

		if m.InViewportEvents[i] != nil {
			if err := m.InViewportEvents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inViewportEvents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inViewportEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JourneyEventsSettings) contextValidateScrollDepthEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ScrollDepthEvents); i++ {

		if m.ScrollDepthEvents[i] != nil {
			if err := m.ScrollDepthEvents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scrollDepthEvents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scrollDepthEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *JourneyEventsSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JourneyEventsSettings) UnmarshalBinary(b []byte) error {
	var res JourneyEventsSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

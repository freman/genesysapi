// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchCallbackRequest patch callback request
//
// swagger:model PatchCallbackRequest
type PatchCallbackRequest struct {

	// The agentId.
	// Required: true
	AgentID *string `json:"agentId"`

	// The scheduled date-time for the callback. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Example: 2015-01-02T16:59:59.000Z
	// Format: date-time
	CallbackScheduledTime strfmt.DateTime `json:"callbackScheduledTime,omitempty"`

	// The conversationId.
	// Required: true
	ConversationID *string `json:"conversationId"`

	// The identifier of the queue to be used for the callback.
	QueueID string `json:"queueId,omitempty"`
}

// Validate validates this patch callback request
func (m *PatchCallbackRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallbackScheduledTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchCallbackRequest) validateAgentID(formats strfmt.Registry) error {

	if err := validate.Required("agentId", "body", m.AgentID); err != nil {
		return err
	}

	return nil
}

func (m *PatchCallbackRequest) validateCallbackScheduledTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CallbackScheduledTime) { // not required
		return nil
	}

	if err := validate.FormatOf("callbackScheduledTime", "body", "date-time", m.CallbackScheduledTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PatchCallbackRequest) validateConversationID(formats strfmt.Registry) error {

	if err := validate.Required("conversationId", "body", m.ConversationID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch callback request based on context it is used
func (m *PatchCallbackRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchCallbackRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchCallbackRequest) UnmarshalBinary(b []byte) error {
	var res PatchCallbackRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

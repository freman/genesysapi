// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebChatGuestMediaRequest Object representing the guest model of a media request of a chat conversation.
//
// swagger:model WebChatGuestMediaRequest
type WebChatGuestMediaRequest struct {

	// The ID of the new media communication, if applicable.
	CommunicationID string `json:"communicationId,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The security information related to a media request.
	SecurityKey string `json:"securityKey,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The state of the media request, one of PENDING|ACCEPTED|DECLINED|TIMEDOUT|CANCELLED|ERRORED.
	// Required: true
	// Enum: [PENDING ACCEPTED DECLINED TIMEDOUT CANCELLED ERRORED]
	State *string `json:"state"`

	// The types of media being requested.
	// Required: true
	Types []string `json:"types"`
}

// Validate validates this web chat guest media request
func (m *WebChatGuestMediaRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebChatGuestMediaRequest) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var webChatGuestMediaRequestTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING","ACCEPTED","DECLINED","TIMEDOUT","CANCELLED","ERRORED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webChatGuestMediaRequestTypeStatePropEnum = append(webChatGuestMediaRequestTypeStatePropEnum, v)
	}
}

const (

	// WebChatGuestMediaRequestStatePENDING captures enum value "PENDING"
	WebChatGuestMediaRequestStatePENDING string = "PENDING"

	// WebChatGuestMediaRequestStateACCEPTED captures enum value "ACCEPTED"
	WebChatGuestMediaRequestStateACCEPTED string = "ACCEPTED"

	// WebChatGuestMediaRequestStateDECLINED captures enum value "DECLINED"
	WebChatGuestMediaRequestStateDECLINED string = "DECLINED"

	// WebChatGuestMediaRequestStateTIMEDOUT captures enum value "TIMEDOUT"
	WebChatGuestMediaRequestStateTIMEDOUT string = "TIMEDOUT"

	// WebChatGuestMediaRequestStateCANCELLED captures enum value "CANCELLED"
	WebChatGuestMediaRequestStateCANCELLED string = "CANCELLED"

	// WebChatGuestMediaRequestStateERRORED captures enum value "ERRORED"
	WebChatGuestMediaRequestStateERRORED string = "ERRORED"
)

// prop value enum
func (m *WebChatGuestMediaRequest) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, webChatGuestMediaRequestTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WebChatGuestMediaRequest) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

var webChatGuestMediaRequestTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COBROWSE","SCREENSHARE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webChatGuestMediaRequestTypesItemsEnum = append(webChatGuestMediaRequestTypesItemsEnum, v)
	}
}

func (m *WebChatGuestMediaRequest) validateTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, webChatGuestMediaRequestTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WebChatGuestMediaRequest) validateTypes(formats strfmt.Registry) error {

	if err := validate.Required("types", "body", m.Types); err != nil {
		return err
	}

	for i := 0; i < len(m.Types); i++ {

		// value enum
		if err := m.validateTypesItemsEnum("types"+"."+strconv.Itoa(i), "body", m.Types[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebChatGuestMediaRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebChatGuestMediaRequest) UnmarshalBinary(b []byte) error {
	var res WebChatGuestMediaRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

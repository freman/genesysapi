// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImportScheduleUploadSchema import schedule upload schema
//
// swagger:model ImportScheduleUploadSchema
type ImportScheduleUploadSchema struct {

	// Individual agent schedules
	AgentSchedules []*BuImportAgentScheduleUploadSchema `json:"agentSchedules"`

	// The description for the imported schedule
	// Required: true
	Description *string `json:"description"`

	// The headcount forecast to associate with the imported schedule
	HeadcountForecast *BuHeadcountForecast `json:"headcountForecast,omitempty"`

	// Whether the imported schedule should be immediately published
	Published bool `json:"published"`

	// The short term forecast to associate with the imported schedule
	ShortTermForecast *BuShortTermForecastReference `json:"shortTermForecast,omitempty"`

	// The number of weeks the imported schedule will cover
	// Required: true
	WeekCount *int32 `json:"weekCount"`
}

// Validate validates this import schedule upload schema
func (m *ImportScheduleUploadSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentSchedules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeadcountForecast(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortTermForecast(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportScheduleUploadSchema) validateAgentSchedules(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentSchedules) { // not required
		return nil
	}

	for i := 0; i < len(m.AgentSchedules); i++ {
		if swag.IsZero(m.AgentSchedules[i]) { // not required
			continue
		}

		if m.AgentSchedules[i] != nil {
			if err := m.AgentSchedules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentSchedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentSchedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ImportScheduleUploadSchema) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ImportScheduleUploadSchema) validateHeadcountForecast(formats strfmt.Registry) error {
	if swag.IsZero(m.HeadcountForecast) { // not required
		return nil
	}

	if m.HeadcountForecast != nil {
		if err := m.HeadcountForecast.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headcountForecast")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headcountForecast")
			}
			return err
		}
	}

	return nil
}

func (m *ImportScheduleUploadSchema) validateShortTermForecast(formats strfmt.Registry) error {
	if swag.IsZero(m.ShortTermForecast) { // not required
		return nil
	}

	if m.ShortTermForecast != nil {
		if err := m.ShortTermForecast.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shortTermForecast")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shortTermForecast")
			}
			return err
		}
	}

	return nil
}

func (m *ImportScheduleUploadSchema) validateWeekCount(formats strfmt.Registry) error {

	if err := validate.Required("weekCount", "body", m.WeekCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this import schedule upload schema based on the context it is used
func (m *ImportScheduleUploadSchema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentSchedules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeadcountForecast(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShortTermForecast(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportScheduleUploadSchema) contextValidateAgentSchedules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AgentSchedules); i++ {

		if m.AgentSchedules[i] != nil {
			if err := m.AgentSchedules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentSchedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentSchedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ImportScheduleUploadSchema) contextValidateHeadcountForecast(ctx context.Context, formats strfmt.Registry) error {

	if m.HeadcountForecast != nil {
		if err := m.HeadcountForecast.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headcountForecast")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headcountForecast")
			}
			return err
		}
	}

	return nil
}

func (m *ImportScheduleUploadSchema) contextValidateShortTermForecast(ctx context.Context, formats strfmt.Registry) error {

	if m.ShortTermForecast != nil {
		if err := m.ShortTermForecast.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shortTermForecast")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shortTermForecast")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImportScheduleUploadSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImportScheduleUploadSchema) UnmarshalBinary(b []byte) error {
	var res ImportScheduleUploadSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActionAggregationView action aggregation view
//
// swagger:model ActionAggregationView
type ActionAggregationView struct {

	// Type of view you wish to create
	// Required: true
	// Enum: [rangeBound]
	Function *string `json:"function"`

	// A unique name for this view. Must be distinct from other views and built-in metric names.
	// Required: true
	Name *string `json:"name"`

	// Range of numbers for slicing up data
	Range *AggregationRange `json:"range,omitempty"`

	// Target metric name
	// Required: true
	// Enum: [tTotalExecution]
	Target *string `json:"target"`
}

// Validate validates this action aggregation view
func (m *ActionAggregationView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var actionAggregationViewTypeFunctionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["rangeBound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionAggregationViewTypeFunctionPropEnum = append(actionAggregationViewTypeFunctionPropEnum, v)
	}
}

const (

	// ActionAggregationViewFunctionRangeBound captures enum value "rangeBound"
	ActionAggregationViewFunctionRangeBound string = "rangeBound"
)

// prop value enum
func (m *ActionAggregationView) validateFunctionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, actionAggregationViewTypeFunctionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActionAggregationView) validateFunction(formats strfmt.Registry) error {

	if err := validate.Required("function", "body", m.Function); err != nil {
		return err
	}

	// value enum
	if err := m.validateFunctionEnum("function", "body", *m.Function); err != nil {
		return err
	}

	return nil
}

func (m *ActionAggregationView) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ActionAggregationView) validateRange(formats strfmt.Registry) error {
	if swag.IsZero(m.Range) { // not required
		return nil
	}

	if m.Range != nil {
		if err := m.Range.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

var actionAggregationViewTypeTargetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tTotalExecution"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionAggregationViewTypeTargetPropEnum = append(actionAggregationViewTypeTargetPropEnum, v)
	}
}

const (

	// ActionAggregationViewTargetTTotalExecution captures enum value "tTotalExecution"
	ActionAggregationViewTargetTTotalExecution string = "tTotalExecution"
)

// prop value enum
func (m *ActionAggregationView) validateTargetEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, actionAggregationViewTypeTargetPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActionAggregationView) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetEnum("target", "body", *m.Target); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this action aggregation view based on the context it is used
func (m *ActionAggregationView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActionAggregationView) contextValidateRange(ctx context.Context, formats strfmt.Registry) error {

	if m.Range != nil {
		if err := m.Range.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActionAggregationView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActionAggregationView) UnmarshalBinary(b []byte) error {
	var res ActionAggregationView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttendanceStatus attendance status
//
// swagger:model AttendanceStatus
type AttendanceStatus struct {

	// the attendance status
	// Read Only: true
	// Enum: [HasData Scheduled Absent Present NoSchedule]
	AttendanceStatusType string `json:"attendanceStatusType,omitempty"`

	// the workday date of this attendance status. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Read Only: true
	// Format: date
	DateWorkday strfmt.Date `json:"dateWorkday,omitempty"`
}

// Validate validates this attendance status
func (m *AttendanceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttendanceStatusType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateWorkday(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var attendanceStatusTypeAttendanceStatusTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HasData","Scheduled","Absent","Present","NoSchedule"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		attendanceStatusTypeAttendanceStatusTypePropEnum = append(attendanceStatusTypeAttendanceStatusTypePropEnum, v)
	}
}

const (

	// AttendanceStatusAttendanceStatusTypeHasData captures enum value "HasData"
	AttendanceStatusAttendanceStatusTypeHasData string = "HasData"

	// AttendanceStatusAttendanceStatusTypeScheduled captures enum value "Scheduled"
	AttendanceStatusAttendanceStatusTypeScheduled string = "Scheduled"

	// AttendanceStatusAttendanceStatusTypeAbsent captures enum value "Absent"
	AttendanceStatusAttendanceStatusTypeAbsent string = "Absent"

	// AttendanceStatusAttendanceStatusTypePresent captures enum value "Present"
	AttendanceStatusAttendanceStatusTypePresent string = "Present"

	// AttendanceStatusAttendanceStatusTypeNoSchedule captures enum value "NoSchedule"
	AttendanceStatusAttendanceStatusTypeNoSchedule string = "NoSchedule"
)

// prop value enum
func (m *AttendanceStatus) validateAttendanceStatusTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, attendanceStatusTypeAttendanceStatusTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AttendanceStatus) validateAttendanceStatusType(formats strfmt.Registry) error {
	if swag.IsZero(m.AttendanceStatusType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAttendanceStatusTypeEnum("attendanceStatusType", "body", m.AttendanceStatusType); err != nil {
		return err
	}

	return nil
}

func (m *AttendanceStatus) validateDateWorkday(formats strfmt.Registry) error {
	if swag.IsZero(m.DateWorkday) { // not required
		return nil
	}

	if err := validate.FormatOf("dateWorkday", "body", "date", m.DateWorkday.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this attendance status based on the context it is used
func (m *AttendanceStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttendanceStatusType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateWorkday(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttendanceStatus) contextValidateAttendanceStatusType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "attendanceStatusType", "body", string(m.AttendanceStatusType)); err != nil {
		return err
	}

	return nil
}

func (m *AttendanceStatus) contextValidateDateWorkday(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateWorkday", "body", strfmt.Date(m.DateWorkday)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AttendanceStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttendanceStatus) UnmarshalBinary(b []byte) error {
	var res AttendanceStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

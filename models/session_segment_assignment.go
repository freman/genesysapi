// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SessionSegmentAssignment session segment assignment
//
// swagger:model SessionSegmentAssignment
type SessionSegmentAssignment struct {

	// Timestamp indicating when the segment was assigned. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	AssignedDate strfmt.DateTime `json:"assignedDate,omitempty"`

	// The segment that was assigned.
	Segment *AssignedSegment `json:"segment,omitempty"`
}

// Validate validates this session segment assignment
func (m *SessionSegmentAssignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSegment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionSegmentAssignment) validateAssignedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("assignedDate", "body", "date-time", m.AssignedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionSegmentAssignment) validateSegment(formats strfmt.Registry) error {
	if swag.IsZero(m.Segment) { // not required
		return nil
	}

	if m.Segment != nil {
		if err := m.Segment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("segment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("segment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this session segment assignment based on the context it is used
func (m *SessionSegmentAssignment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSegment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionSegmentAssignment) contextValidateSegment(ctx context.Context, formats strfmt.Registry) error {

	if m.Segment != nil {
		if err := m.Segment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("segment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("segment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SessionSegmentAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionSegmentAssignment) UnmarshalBinary(b []byte) error {
	var res SessionSegmentAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

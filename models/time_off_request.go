// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeOffRequest time off request
//
// swagger:model TimeOffRequest
type TimeOffRequest struct {

	// The ID of the activity code associated with this time off request. Activity code must be of the TimeOff category
	ActivityCodeID string `json:"activityCodeId,omitempty"`

	// The daily duration of this time off request in minutes
	DailyDurationMinutes int32 `json:"dailyDurationMinutes,omitempty"`

	// A set of dates in yyyy-MM-dd format.  Should be interpreted in the management unit's configured time zone.  Will be not empty if isFullDayRequest == true
	// Unique: true
	FullDayManagementUnitDates []string `json:"fullDayManagementUnitDates"`

	// The id of the time off request
	// Required: true
	ID *string `json:"id"`

	// Whether this is a full day request (false means partial day)
	IsFullDayRequest bool `json:"isFullDayRequest"`

	// Whether this request has been marked as read by the agent
	MarkedAsRead bool `json:"markedAsRead"`

	// The version metadata of the time off request
	Metadata *WfmVersionedEntityMetadata `json:"metadata,omitempty"`

	// Notes about the time off request
	Notes string `json:"notes,omitempty"`

	// A set of start date-times in ISO-8601 format for partial day requests.  Will be not empty if isFullDayRequest == false
	// Unique: true
	PartialDayStartDateTimes []strfmt.DateTime `json:"partialDayStartDateTimes"`

	// The user who reviewed this time off request
	ReviewedBy *UserReference `json:"reviewedBy,omitempty"`

	// The timestamp when this request was reviewed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	ReviewedDate strfmt.DateTime `json:"reviewedDate,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The status of this time off request
	// Enum: [PENDING APPROVED DENIED CANCELED]
	Status string `json:"status,omitempty"`

	// The user who submitted this time off request
	SubmittedBy *UserReference `json:"submittedBy,omitempty"`

	// The timestamp when this request was submitted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	SubmittedDate strfmt.DateTime `json:"submittedDate,omitempty"`

	// The user that the time off request belongs to
	// Required: true
	User *UserReference `json:"user"`
}

// Validate validates this time off request
func (m *TimeOffRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFullDayManagementUnitDates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartialDayStartDateTimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReviewedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReviewedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeOffRequest) validateFullDayManagementUnitDates(formats strfmt.Registry) error {

	if swag.IsZero(m.FullDayManagementUnitDates) { // not required
		return nil
	}

	if err := validate.UniqueItems("fullDayManagementUnitDates", "body", m.FullDayManagementUnitDates); err != nil {
		return err
	}

	return nil
}

func (m *TimeOffRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TimeOffRequest) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *TimeOffRequest) validatePartialDayStartDateTimes(formats strfmt.Registry) error {

	if swag.IsZero(m.PartialDayStartDateTimes) { // not required
		return nil
	}

	if err := validate.UniqueItems("partialDayStartDateTimes", "body", m.PartialDayStartDateTimes); err != nil {
		return err
	}

	for i := 0; i < len(m.PartialDayStartDateTimes); i++ {

		if err := validate.FormatOf("partialDayStartDateTimes"+"."+strconv.Itoa(i), "body", "date-time", m.PartialDayStartDateTimes[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *TimeOffRequest) validateReviewedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ReviewedBy) { // not required
		return nil
	}

	if m.ReviewedBy != nil {
		if err := m.ReviewedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reviewedBy")
			}
			return err
		}
	}

	return nil
}

func (m *TimeOffRequest) validateReviewedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ReviewedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("reviewedDate", "body", "date-time", m.ReviewedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimeOffRequest) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var timeOffRequestTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING","APPROVED","DENIED","CANCELED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeOffRequestTypeStatusPropEnum = append(timeOffRequestTypeStatusPropEnum, v)
	}
}

const (

	// TimeOffRequestStatusPENDING captures enum value "PENDING"
	TimeOffRequestStatusPENDING string = "PENDING"

	// TimeOffRequestStatusAPPROVED captures enum value "APPROVED"
	TimeOffRequestStatusAPPROVED string = "APPROVED"

	// TimeOffRequestStatusDENIED captures enum value "DENIED"
	TimeOffRequestStatusDENIED string = "DENIED"

	// TimeOffRequestStatusCANCELED captures enum value "CANCELED"
	TimeOffRequestStatusCANCELED string = "CANCELED"
)

// prop value enum
func (m *TimeOffRequest) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, timeOffRequestTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TimeOffRequest) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *TimeOffRequest) validateSubmittedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.SubmittedBy) { // not required
		return nil
	}

	if m.SubmittedBy != nil {
		if err := m.SubmittedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("submittedBy")
			}
			return err
		}
	}

	return nil
}

func (m *TimeOffRequest) validateSubmittedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.SubmittedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("submittedDate", "body", "date-time", m.SubmittedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimeOffRequest) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeOffRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeOffRequest) UnmarshalBinary(b []byte) error {
	var res TimeOffRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

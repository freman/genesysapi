// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssignedWrapupCode assigned wrapup code
//
// swagger:model AssignedWrapupCode
type AssignedWrapupCode struct {

	// The user configured wrap up code id.
	Code string `json:"code,omitempty"`

	// The duration in seconds of the wrap-up segment.
	DurationSeconds int32 `json:"durationSeconds,omitempty"`

	// The timestamp when the wrap-up segment ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// Text entered by the agent to describe the call or disposition.
	Notes string `json:"notes,omitempty"`

	// List of tags selected by the agent to describe the call or disposition.
	Tags []string `json:"tags"`
}

// Validate validates this assigned wrapup code
func (m *AssignedWrapupCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssignedWrapupCode) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssignedWrapupCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssignedWrapupCode) UnmarshalBinary(b []byte) error {
	var res AssignedWrapupCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

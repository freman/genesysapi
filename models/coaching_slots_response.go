// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CoachingSlotsResponse coaching slots response
//
// swagger:model CoachingSlotsResponse
type CoachingSlotsResponse struct {

	// Periods of availability for attendees to schedule coaching appointment
	// Read Only: true
	AttendeeSchedules []*UserAvailableTimes `json:"attendeeSchedules"`

	// Periods of availability for facilitators to schedule coaching appointment
	// Read Only: true
	FacilitatorSchedules []*UserAvailableTimes `json:"facilitatorSchedules"`

	// List of slots where coaching appointment can be scheduled
	// Read Only: true
	SuggestedSlots []*CoachingSlot `json:"suggestedSlots"`

	// Detailed data for WFM scheduled activities
	// Read Only: true
	WfmScheduleActivities []*WfmScheduleActivity `json:"wfmScheduleActivities"`
}

// Validate validates this coaching slots response
func (m *CoachingSlotsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttendeeSchedules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFacilitatorSchedules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuggestedSlots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWfmScheduleActivities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CoachingSlotsResponse) validateAttendeeSchedules(formats strfmt.Registry) error {
	if swag.IsZero(m.AttendeeSchedules) { // not required
		return nil
	}

	for i := 0; i < len(m.AttendeeSchedules); i++ {
		if swag.IsZero(m.AttendeeSchedules[i]) { // not required
			continue
		}

		if m.AttendeeSchedules[i] != nil {
			if err := m.AttendeeSchedules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attendeeSchedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attendeeSchedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CoachingSlotsResponse) validateFacilitatorSchedules(formats strfmt.Registry) error {
	if swag.IsZero(m.FacilitatorSchedules) { // not required
		return nil
	}

	for i := 0; i < len(m.FacilitatorSchedules); i++ {
		if swag.IsZero(m.FacilitatorSchedules[i]) { // not required
			continue
		}

		if m.FacilitatorSchedules[i] != nil {
			if err := m.FacilitatorSchedules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("facilitatorSchedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("facilitatorSchedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CoachingSlotsResponse) validateSuggestedSlots(formats strfmt.Registry) error {
	if swag.IsZero(m.SuggestedSlots) { // not required
		return nil
	}

	for i := 0; i < len(m.SuggestedSlots); i++ {
		if swag.IsZero(m.SuggestedSlots[i]) { // not required
			continue
		}

		if m.SuggestedSlots[i] != nil {
			if err := m.SuggestedSlots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("suggestedSlots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("suggestedSlots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CoachingSlotsResponse) validateWfmScheduleActivities(formats strfmt.Registry) error {
	if swag.IsZero(m.WfmScheduleActivities) { // not required
		return nil
	}

	for i := 0; i < len(m.WfmScheduleActivities); i++ {
		if swag.IsZero(m.WfmScheduleActivities[i]) { // not required
			continue
		}

		if m.WfmScheduleActivities[i] != nil {
			if err := m.WfmScheduleActivities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("wfmScheduleActivities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("wfmScheduleActivities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this coaching slots response based on the context it is used
func (m *CoachingSlotsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttendeeSchedules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFacilitatorSchedules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSuggestedSlots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWfmScheduleActivities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CoachingSlotsResponse) contextValidateAttendeeSchedules(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "attendeeSchedules", "body", []*UserAvailableTimes(m.AttendeeSchedules)); err != nil {
		return err
	}

	for i := 0; i < len(m.AttendeeSchedules); i++ {

		if m.AttendeeSchedules[i] != nil {
			if err := m.AttendeeSchedules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attendeeSchedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attendeeSchedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CoachingSlotsResponse) contextValidateFacilitatorSchedules(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "facilitatorSchedules", "body", []*UserAvailableTimes(m.FacilitatorSchedules)); err != nil {
		return err
	}

	for i := 0; i < len(m.FacilitatorSchedules); i++ {

		if m.FacilitatorSchedules[i] != nil {
			if err := m.FacilitatorSchedules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("facilitatorSchedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("facilitatorSchedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CoachingSlotsResponse) contextValidateSuggestedSlots(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "suggestedSlots", "body", []*CoachingSlot(m.SuggestedSlots)); err != nil {
		return err
	}

	for i := 0; i < len(m.SuggestedSlots); i++ {

		if m.SuggestedSlots[i] != nil {
			if err := m.SuggestedSlots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("suggestedSlots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("suggestedSlots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CoachingSlotsResponse) contextValidateWfmScheduleActivities(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "wfmScheduleActivities", "body", []*WfmScheduleActivity(m.WfmScheduleActivities)); err != nil {
		return err
	}

	for i := 0; i < len(m.WfmScheduleActivities); i++ {

		if m.WfmScheduleActivities[i] != nil {
			if err := m.WfmScheduleActivities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("wfmScheduleActivities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("wfmScheduleActivities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CoachingSlotsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoachingSlotsResponse) UnmarshalBinary(b []byte) error {
	var res CoachingSlotsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

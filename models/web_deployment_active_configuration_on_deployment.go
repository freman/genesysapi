// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebDeploymentActiveConfigurationOnDeployment Details about the active configuration on a deployment
//
// swagger:model WebDeploymentActiveConfigurationOnDeployment
type WebDeploymentActiveConfigurationOnDeployment struct {

	// The active configuration on a deployment
	ConfigurationVersion *WebDeploymentConfigurationVersion `json:"configurationVersion,omitempty"`

	// The web deployment associated with the active configuration
	Deployment *WebDeployment `json:"deployment,omitempty"`
}

// Validate validates this web deployment active configuration on deployment
func (m *WebDeploymentActiveConfigurationOnDeployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigurationVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebDeploymentActiveConfigurationOnDeployment) validateConfigurationVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigurationVersion) { // not required
		return nil
	}

	if m.ConfigurationVersion != nil {
		if err := m.ConfigurationVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configurationVersion")
			}
			return err
		}
	}

	return nil
}

func (m *WebDeploymentActiveConfigurationOnDeployment) validateDeployment(formats strfmt.Registry) error {

	if swag.IsZero(m.Deployment) { // not required
		return nil
	}

	if m.Deployment != nil {
		if err := m.Deployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebDeploymentActiveConfigurationOnDeployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebDeploymentActiveConfigurationOnDeployment) UnmarshalBinary(b []byte) error {
	var res WebDeploymentActiveConfigurationOnDeployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

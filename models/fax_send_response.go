// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FaxSendResponse fax send response
//
// swagger:model FaxSendResponse
type FaxSendResponse struct {

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// upload destination Uri
	// Format: uri
	UploadDestinationURI strfmt.URI `json:"uploadDestinationUri,omitempty"`

	// upload method type
	// Enum: [SINGLE_PUT MULTIPART_POST]
	UploadMethodType string `json:"uploadMethodType,omitempty"`
}

// Validate validates this fax send response
func (m *FaxSendResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadDestinationURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadMethodType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FaxSendResponse) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FaxSendResponse) validateUploadDestinationURI(formats strfmt.Registry) error {
	if swag.IsZero(m.UploadDestinationURI) { // not required
		return nil
	}

	if err := validate.FormatOf("uploadDestinationUri", "body", "uri", m.UploadDestinationURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var faxSendResponseTypeUploadMethodTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SINGLE_PUT","MULTIPART_POST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		faxSendResponseTypeUploadMethodTypePropEnum = append(faxSendResponseTypeUploadMethodTypePropEnum, v)
	}
}

const (

	// FaxSendResponseUploadMethodTypeSINGLEPUT captures enum value "SINGLE_PUT"
	FaxSendResponseUploadMethodTypeSINGLEPUT string = "SINGLE_PUT"

	// FaxSendResponseUploadMethodTypeMULTIPARTPOST captures enum value "MULTIPART_POST"
	FaxSendResponseUploadMethodTypeMULTIPARTPOST string = "MULTIPART_POST"
)

// prop value enum
func (m *FaxSendResponse) validateUploadMethodTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, faxSendResponseTypeUploadMethodTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FaxSendResponse) validateUploadMethodType(formats strfmt.Registry) error {
	if swag.IsZero(m.UploadMethodType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUploadMethodTypeEnum("uploadMethodType", "body", m.UploadMethodType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fax send response based on the context it is used
func (m *FaxSendResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FaxSendResponse) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *FaxSendResponse) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FaxSendResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FaxSendResponse) UnmarshalBinary(b []byte) error {
	var res FaxSendResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

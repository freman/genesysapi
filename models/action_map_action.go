// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActionMapAction action map action
//
// swagger:model ActionMapAction
type ActionMapAction struct {

	// Action target ID.
	ActionTargetID string `json:"actionTargetId,omitempty"`

	// Action template associated with the action map.
	ActionTemplate *ActionMapActionTemplate `json:"actionTemplate,omitempty"`

	// Architect Flow Id and input contract.
	ArchitectFlowFields *ArchitectFlowFields `json:"architectFlowFields,omitempty"`

	// Whether this action should be throttled.
	IsPacingEnabled bool `json:"isPacingEnabled"`

	// Media type of action.
	// Enum: [webchat webMessagingOffer contentOffer integrationAction architectFlow openAction]
	MediaType string `json:"mediaType,omitempty"`

	// Admin-configurable fields of an open action.
	OpenActionFields *OpenActionFields `json:"openActionFields,omitempty"`

	// Additional properties.
	Props *ActionProperties `json:"props,omitempty"`

	// Admin-configurable fields of a web messaging offer action.
	WebMessagingOfferFields *WebMessagingOfferFields `json:"webMessagingOfferFields,omitempty"`
}

// Validate validates this action map action
func (m *ActionMapAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchitectFlowFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenActionFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebMessagingOfferFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActionMapAction) validateActionTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionTemplate) { // not required
		return nil
	}

	if m.ActionTemplate != nil {
		if err := m.ActionTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *ActionMapAction) validateArchitectFlowFields(formats strfmt.Registry) error {

	if swag.IsZero(m.ArchitectFlowFields) { // not required
		return nil
	}

	if m.ArchitectFlowFields != nil {
		if err := m.ArchitectFlowFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architectFlowFields")
			}
			return err
		}
	}

	return nil
}

var actionMapActionTypeMediaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["webchat","webMessagingOffer","contentOffer","integrationAction","architectFlow","openAction"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionMapActionTypeMediaTypePropEnum = append(actionMapActionTypeMediaTypePropEnum, v)
	}
}

const (

	// ActionMapActionMediaTypeWebchat captures enum value "webchat"
	ActionMapActionMediaTypeWebchat string = "webchat"

	// ActionMapActionMediaTypeWebMessagingOffer captures enum value "webMessagingOffer"
	ActionMapActionMediaTypeWebMessagingOffer string = "webMessagingOffer"

	// ActionMapActionMediaTypeContentOffer captures enum value "contentOffer"
	ActionMapActionMediaTypeContentOffer string = "contentOffer"

	// ActionMapActionMediaTypeIntegrationAction captures enum value "integrationAction"
	ActionMapActionMediaTypeIntegrationAction string = "integrationAction"

	// ActionMapActionMediaTypeArchitectFlow captures enum value "architectFlow"
	ActionMapActionMediaTypeArchitectFlow string = "architectFlow"

	// ActionMapActionMediaTypeOpenAction captures enum value "openAction"
	ActionMapActionMediaTypeOpenAction string = "openAction"
)

// prop value enum
func (m *ActionMapAction) validateMediaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, actionMapActionTypeMediaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActionMapAction) validateMediaType(formats strfmt.Registry) error {

	if swag.IsZero(m.MediaType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMediaTypeEnum("mediaType", "body", m.MediaType); err != nil {
		return err
	}

	return nil
}

func (m *ActionMapAction) validateOpenActionFields(formats strfmt.Registry) error {

	if swag.IsZero(m.OpenActionFields) { // not required
		return nil
	}

	if m.OpenActionFields != nil {
		if err := m.OpenActionFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openActionFields")
			}
			return err
		}
	}

	return nil
}

func (m *ActionMapAction) validateProps(formats strfmt.Registry) error {

	if swag.IsZero(m.Props) { // not required
		return nil
	}

	if m.Props != nil {
		if err := m.Props.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("props")
			}
			return err
		}
	}

	return nil
}

func (m *ActionMapAction) validateWebMessagingOfferFields(formats strfmt.Registry) error {

	if swag.IsZero(m.WebMessagingOfferFields) { // not required
		return nil
	}

	if m.WebMessagingOfferFields != nil {
		if err := m.WebMessagingOfferFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webMessagingOfferFields")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActionMapAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActionMapAction) UnmarshalBinary(b []byte) error {
	var res ActionMapAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateResponseAssetResponse create response asset response
//
// swagger:model CreateResponseAssetResponse
type CreateResponseAssetResponse struct {

	// Required headers when uploading a file through PUT request to the URL
	// Read Only: true
	Headers map[string]string `json:"headers,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Pre-signed URL to PUT the file to
	// Read Only: true
	URL string `json:"url,omitempty"`
}

// Validate validates this create response asset response
func (m *CreateResponseAssetResponse) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this create response asset response based on the context it is used
func (m *CreateResponseAssetResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHeaders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateResponseAssetResponse) contextValidateHeaders(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *CreateResponseAssetResponse) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CreateResponseAssetResponse) contextValidateURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "url", "body", string(m.URL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateResponseAssetResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateResponseAssetResponse) UnmarshalBinary(b []byte) error {
	var res CreateResponseAssetResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

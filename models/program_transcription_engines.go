// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProgramTranscriptionEngines program transcription engines
//
// swagger:model ProgramTranscriptionEngines
type ProgramTranscriptionEngines struct {

	// The last modified date of the record. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The user last modified the record
	ModifiedBy *AddressableEntityRef `json:"modifiedBy,omitempty"`

	// The ID of the program
	Program *BaseProgramEntity `json:"program,omitempty"`

	// The program transcription engine settings
	TranscriptionEngines []*TranscriptionEngines `json:"transcriptionEngines"`
}

// Validate validates this program transcription engines
func (m *ProgramTranscriptionEngines) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgram(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTranscriptionEngines(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProgramTranscriptionEngines) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProgramTranscriptionEngines) validateModifiedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedBy) { // not required
		return nil
	}

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modifiedBy")
			}
			return err
		}
	}

	return nil
}

func (m *ProgramTranscriptionEngines) validateProgram(formats strfmt.Registry) error {
	if swag.IsZero(m.Program) { // not required
		return nil
	}

	if m.Program != nil {
		if err := m.Program.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("program")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("program")
			}
			return err
		}
	}

	return nil
}

func (m *ProgramTranscriptionEngines) validateTranscriptionEngines(formats strfmt.Registry) error {
	if swag.IsZero(m.TranscriptionEngines) { // not required
		return nil
	}

	for i := 0; i < len(m.TranscriptionEngines); i++ {
		if swag.IsZero(m.TranscriptionEngines[i]) { // not required
			continue
		}

		if m.TranscriptionEngines[i] != nil {
			if err := m.TranscriptionEngines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transcriptionEngines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transcriptionEngines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this program transcription engines based on the context it is used
func (m *ProgramTranscriptionEngines) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateModifiedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProgram(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTranscriptionEngines(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProgramTranscriptionEngines) contextValidateModifiedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modifiedBy")
			}
			return err
		}
	}

	return nil
}

func (m *ProgramTranscriptionEngines) contextValidateProgram(ctx context.Context, formats strfmt.Registry) error {

	if m.Program != nil {
		if err := m.Program.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("program")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("program")
			}
			return err
		}
	}

	return nil
}

func (m *ProgramTranscriptionEngines) contextValidateTranscriptionEngines(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TranscriptionEngines); i++ {

		if m.TranscriptionEngines[i] != nil {
			if err := m.TranscriptionEngines[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transcriptionEngines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transcriptionEngines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProgramTranscriptionEngines) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProgramTranscriptionEngines) UnmarshalBinary(b []byte) error {
	var res ProgramTranscriptionEngines
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

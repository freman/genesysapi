// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListedTopic listed topic
//
// swagger:model ListedTopic
type ListedTopic struct {

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// dialect
	Dialect string `json:"dialect,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// modified by
	ModifiedBy *AddressableEntityRef `json:"modifiedBy,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// participants
	// Enum: [External Internal All]
	Participants string `json:"participants,omitempty"`

	// phrases count
	PhrasesCount int32 `json:"phrasesCount,omitempty"`

	// programs count
	ProgramsCount int32 `json:"programsCount,omitempty"`

	// published
	Published bool `json:"published"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// strictness
	// Enum: [1 55 65 72 85 90]
	Strictness string `json:"strictness,omitempty"`

	// tags
	Tags []string `json:"tags"`
}

// Validate validates this listed topic
func (m *ListedTopic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipants(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrictness(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListedTopic) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListedTopic) validateModifiedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedBy) { // not required
		return nil
	}

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modifiedBy")
			}
			return err
		}
	}

	return nil
}

var listedTopicTypeParticipantsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["External","Internal","All"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listedTopicTypeParticipantsPropEnum = append(listedTopicTypeParticipantsPropEnum, v)
	}
}

const (

	// ListedTopicParticipantsExternal captures enum value "External"
	ListedTopicParticipantsExternal string = "External"

	// ListedTopicParticipantsInternal captures enum value "Internal"
	ListedTopicParticipantsInternal string = "Internal"

	// ListedTopicParticipantsAll captures enum value "All"
	ListedTopicParticipantsAll string = "All"
)

// prop value enum
func (m *ListedTopic) validateParticipantsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listedTopicTypeParticipantsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ListedTopic) validateParticipants(formats strfmt.Registry) error {
	if swag.IsZero(m.Participants) { // not required
		return nil
	}

	// value enum
	if err := m.validateParticipantsEnum("participants", "body", m.Participants); err != nil {
		return err
	}

	return nil
}

func (m *ListedTopic) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var listedTopicTypeStrictnessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1","55","65","72","85","90"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listedTopicTypeStrictnessPropEnum = append(listedTopicTypeStrictnessPropEnum, v)
	}
}

const (

	// ListedTopicStrictnessNr1 captures enum value "1"
	ListedTopicStrictnessNr1 string = "1"

	// ListedTopicStrictnessNr55 captures enum value "55"
	ListedTopicStrictnessNr55 string = "55"

	// ListedTopicStrictnessNr65 captures enum value "65"
	ListedTopicStrictnessNr65 string = "65"

	// ListedTopicStrictnessNr72 captures enum value "72"
	ListedTopicStrictnessNr72 string = "72"

	// ListedTopicStrictnessNr85 captures enum value "85"
	ListedTopicStrictnessNr85 string = "85"

	// ListedTopicStrictnessNr90 captures enum value "90"
	ListedTopicStrictnessNr90 string = "90"
)

// prop value enum
func (m *ListedTopic) validateStrictnessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listedTopicTypeStrictnessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ListedTopic) validateStrictness(formats strfmt.Registry) error {
	if swag.IsZero(m.Strictness) { // not required
		return nil
	}

	// value enum
	if err := m.validateStrictnessEnum("strictness", "body", m.Strictness); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this listed topic based on the context it is used
func (m *ListedTopic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifiedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListedTopic) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ListedTopic) contextValidateModifiedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modifiedBy")
			}
			return err
		}
	}

	return nil
}

func (m *ListedTopic) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListedTopic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListedTopic) UnmarshalBinary(b []byte) error {
	var res ListedTopic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

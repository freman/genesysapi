// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostOutputContract The schemas defining all of the expected responses/outputs.
//
// swagger:model PostOutputContract
type PostOutputContract struct {

	// JSON schema that defines the transformed, successful result that will be sent back to the caller.
	// Required: true
	SuccessSchema *JSONSchemaDocument `json:"successSchema"`
}

// Validate validates this post output contract
func (m *PostOutputContract) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSuccessSchema(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostOutputContract) validateSuccessSchema(formats strfmt.Registry) error {

	if err := validate.Required("successSchema", "body", m.SuccessSchema); err != nil {
		return err
	}

	if m.SuccessSchema != nil {
		if err := m.SuccessSchema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("successSchema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("successSchema")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post output contract based on the context it is used
func (m *PostOutputContract) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSuccessSchema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostOutputContract) contextValidateSuccessSchema(ctx context.Context, formats strfmt.Registry) error {

	if m.SuccessSchema != nil {
		if err := m.SuccessSchema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("successSchema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("successSchema")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostOutputContract) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostOutputContract) UnmarshalBinary(b []byte) error {
	var res PostOutputContract
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

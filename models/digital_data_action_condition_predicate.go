// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DigitalDataActionConditionPredicate digital data action condition predicate
//
// swagger:model DigitalDataActionConditionPredicate
type DigitalDataActionConditionPredicate struct {

	// The value to compare against for this condition
	// Required: true
	ComparisonValue *string `json:"comparisonValue"`

	// If true, inverts the result of evaluating this Predicate. Default is false.
	// Required: true
	Inverted *bool `json:"inverted"`

	// The name of an output field from the data action's output to use for this condition
	// Required: true
	OutputField *string `json:"outputField"`

	// The result of this predicate if the requested output field is missing from the data action's result
	// Required: true
	OutputFieldMissingResolution *bool `json:"outputFieldMissingResolution"`

	// The operation with which to evaluate this condition
	// Required: true
	// Enum: [Equals LessThan LessThanEquals GreaterThan GreaterThanEquals Contains BeginsWith EndsWith Before After]
	OutputOperator *string `json:"outputOperator"`
}

// Validate validates this digital data action condition predicate
func (m *DigitalDataActionConditionPredicate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComparisonValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInverted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputFieldMissingResolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DigitalDataActionConditionPredicate) validateComparisonValue(formats strfmt.Registry) error {

	if err := validate.Required("comparisonValue", "body", m.ComparisonValue); err != nil {
		return err
	}

	return nil
}

func (m *DigitalDataActionConditionPredicate) validateInverted(formats strfmt.Registry) error {

	if err := validate.Required("inverted", "body", m.Inverted); err != nil {
		return err
	}

	return nil
}

func (m *DigitalDataActionConditionPredicate) validateOutputField(formats strfmt.Registry) error {

	if err := validate.Required("outputField", "body", m.OutputField); err != nil {
		return err
	}

	return nil
}

func (m *DigitalDataActionConditionPredicate) validateOutputFieldMissingResolution(formats strfmt.Registry) error {

	if err := validate.Required("outputFieldMissingResolution", "body", m.OutputFieldMissingResolution); err != nil {
		return err
	}

	return nil
}

var digitalDataActionConditionPredicateTypeOutputOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Equals","LessThan","LessThanEquals","GreaterThan","GreaterThanEquals","Contains","BeginsWith","EndsWith","Before","After"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		digitalDataActionConditionPredicateTypeOutputOperatorPropEnum = append(digitalDataActionConditionPredicateTypeOutputOperatorPropEnum, v)
	}
}

const (

	// DigitalDataActionConditionPredicateOutputOperatorEquals captures enum value "Equals"
	DigitalDataActionConditionPredicateOutputOperatorEquals string = "Equals"

	// DigitalDataActionConditionPredicateOutputOperatorLessThan captures enum value "LessThan"
	DigitalDataActionConditionPredicateOutputOperatorLessThan string = "LessThan"

	// DigitalDataActionConditionPredicateOutputOperatorLessThanEquals captures enum value "LessThanEquals"
	DigitalDataActionConditionPredicateOutputOperatorLessThanEquals string = "LessThanEquals"

	// DigitalDataActionConditionPredicateOutputOperatorGreaterThan captures enum value "GreaterThan"
	DigitalDataActionConditionPredicateOutputOperatorGreaterThan string = "GreaterThan"

	// DigitalDataActionConditionPredicateOutputOperatorGreaterThanEquals captures enum value "GreaterThanEquals"
	DigitalDataActionConditionPredicateOutputOperatorGreaterThanEquals string = "GreaterThanEquals"

	// DigitalDataActionConditionPredicateOutputOperatorContains captures enum value "Contains"
	DigitalDataActionConditionPredicateOutputOperatorContains string = "Contains"

	// DigitalDataActionConditionPredicateOutputOperatorBeginsWith captures enum value "BeginsWith"
	DigitalDataActionConditionPredicateOutputOperatorBeginsWith string = "BeginsWith"

	// DigitalDataActionConditionPredicateOutputOperatorEndsWith captures enum value "EndsWith"
	DigitalDataActionConditionPredicateOutputOperatorEndsWith string = "EndsWith"

	// DigitalDataActionConditionPredicateOutputOperatorBefore captures enum value "Before"
	DigitalDataActionConditionPredicateOutputOperatorBefore string = "Before"

	// DigitalDataActionConditionPredicateOutputOperatorAfter captures enum value "After"
	DigitalDataActionConditionPredicateOutputOperatorAfter string = "After"
)

// prop value enum
func (m *DigitalDataActionConditionPredicate) validateOutputOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, digitalDataActionConditionPredicateTypeOutputOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DigitalDataActionConditionPredicate) validateOutputOperator(formats strfmt.Registry) error {

	if err := validate.Required("outputOperator", "body", m.OutputOperator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOutputOperatorEnum("outputOperator", "body", *m.OutputOperator); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this digital data action condition predicate based on context it is used
func (m *DigitalDataActionConditionPredicate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DigitalDataActionConditionPredicate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DigitalDataActionConditionPredicate) UnmarshalBinary(b []byte) error {
	var res DigitalDataActionConditionPredicate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

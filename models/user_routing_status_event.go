// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserRoutingStatusEvent user routing status event
//
// swagger:model UserRoutingStatusEvent
type UserRoutingStatusEvent struct {

	// Unique identifier of the agent.
	// Required: true
	AgentID *string `json:"agentId"`

	// A timestamp as epoch representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Required: true
	// Format: date-time
	EventDateTime *strfmt.DateTime `json:"eventDateTime"`

	// A unique (UUID) eventId for this event
	// Required: true
	EventID *string `json:"eventId"`

	// The agent's source platform Id.
	// Required: true
	SourceID *string `json:"sourceId"`

	// The agent's current routing status.
	// Required: true
	// Enum: [OffQueue Idle Interacting Communicating NotResponding]
	Status *string `json:"status"`
}

// Validate validates this user routing status event
func (m *UserRoutingStatusEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserRoutingStatusEvent) validateAgentID(formats strfmt.Registry) error {

	if err := validate.Required("agentId", "body", m.AgentID); err != nil {
		return err
	}

	return nil
}

func (m *UserRoutingStatusEvent) validateEventDateTime(formats strfmt.Registry) error {

	if err := validate.Required("eventDateTime", "body", m.EventDateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("eventDateTime", "body", "date-time", m.EventDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserRoutingStatusEvent) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("eventId", "body", m.EventID); err != nil {
		return err
	}

	return nil
}

func (m *UserRoutingStatusEvent) validateSourceID(formats strfmt.Registry) error {

	if err := validate.Required("sourceId", "body", m.SourceID); err != nil {
		return err
	}

	return nil
}

var userRoutingStatusEventTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OffQueue","Idle","Interacting","Communicating","NotResponding"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userRoutingStatusEventTypeStatusPropEnum = append(userRoutingStatusEventTypeStatusPropEnum, v)
	}
}

const (

	// UserRoutingStatusEventStatusOffQueue captures enum value "OffQueue"
	UserRoutingStatusEventStatusOffQueue string = "OffQueue"

	// UserRoutingStatusEventStatusIdle captures enum value "Idle"
	UserRoutingStatusEventStatusIdle string = "Idle"

	// UserRoutingStatusEventStatusInteracting captures enum value "Interacting"
	UserRoutingStatusEventStatusInteracting string = "Interacting"

	// UserRoutingStatusEventStatusCommunicating captures enum value "Communicating"
	UserRoutingStatusEventStatusCommunicating string = "Communicating"

	// UserRoutingStatusEventStatusNotResponding captures enum value "NotResponding"
	UserRoutingStatusEventStatusNotResponding string = "NotResponding"
)

// prop value enum
func (m *UserRoutingStatusEvent) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userRoutingStatusEventTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserRoutingStatusEvent) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user routing status event based on context it is used
func (m *UserRoutingStatusEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserRoutingStatusEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserRoutingStatusEvent) UnmarshalBinary(b []byte) error {
	var res UserRoutingStatusEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

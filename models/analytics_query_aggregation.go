// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalyticsQueryAggregation analytics query aggregation
//
// swagger:model AnalyticsQueryAggregation
type AnalyticsQueryAggregation struct {

	// For use with termFrequency aggregations
	Dimension string `json:"dimension,omitempty"`

	// For use with numericRange aggregations
	Metric string `json:"metric,omitempty"`

	// For use with numericRange aggregations
	Ranges []*AggregationRange `json:"ranges"`

	// For use with termFrequency aggregations
	Size int32 `json:"size,omitempty"`

	// Optional type, can usually be inferred
	// Enum: [termFrequency numericRange]
	Type string `json:"type,omitempty"`
}

// Validate validates this analytics query aggregation
func (m *AnalyticsQueryAggregation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyticsQueryAggregation) validateRanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Ranges) { // not required
		return nil
	}

	for i := 0; i < len(m.Ranges); i++ {
		if swag.IsZero(m.Ranges[i]) { // not required
			continue
		}

		if m.Ranges[i] != nil {
			if err := m.Ranges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var analyticsQueryAggregationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["termFrequency","numericRange"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analyticsQueryAggregationTypeTypePropEnum = append(analyticsQueryAggregationTypeTypePropEnum, v)
	}
}

const (

	// AnalyticsQueryAggregationTypeTermFrequency captures enum value "termFrequency"
	AnalyticsQueryAggregationTypeTermFrequency string = "termFrequency"

	// AnalyticsQueryAggregationTypeNumericRange captures enum value "numericRange"
	AnalyticsQueryAggregationTypeNumericRange string = "numericRange"
)

// prop value enum
func (m *AnalyticsQueryAggregation) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, analyticsQueryAggregationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AnalyticsQueryAggregation) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnalyticsQueryAggregation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalyticsQueryAggregation) UnmarshalBinary(b []byte) error {
	var res AnalyticsQueryAggregation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

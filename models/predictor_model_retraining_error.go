// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PredictorModelRetrainingError predictor model retraining error
//
// swagger:model PredictorModelRetrainingError
type PredictorModelRetrainingError struct {

	// Date when the first retraining failure happened. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Required: true
	// Read Only: true
	// Format: date-time
	DateOfFirstOccurrence strfmt.DateTime `json:"dateOfFirstOccurrence"`

	// Error code describing model training failure.
	// Required: true
	// Read Only: true
	// Enum: [NotEnoughData ServiceError UnknownError]
	ErrorCode string `json:"errorCode"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`
}

// Validate validates this predictor model retraining error
func (m *PredictorModelRetrainingError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateOfFirstOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PredictorModelRetrainingError) validateDateOfFirstOccurrence(formats strfmt.Registry) error {

	if err := validate.Required("dateOfFirstOccurrence", "body", strfmt.DateTime(m.DateOfFirstOccurrence)); err != nil {
		return err
	}

	if err := validate.FormatOf("dateOfFirstOccurrence", "body", "date-time", m.DateOfFirstOccurrence.String(), formats); err != nil {
		return err
	}

	return nil
}

var predictorModelRetrainingErrorTypeErrorCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotEnoughData","ServiceError","UnknownError"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		predictorModelRetrainingErrorTypeErrorCodePropEnum = append(predictorModelRetrainingErrorTypeErrorCodePropEnum, v)
	}
}

const (

	// PredictorModelRetrainingErrorErrorCodeNotEnoughData captures enum value "NotEnoughData"
	PredictorModelRetrainingErrorErrorCodeNotEnoughData string = "NotEnoughData"

	// PredictorModelRetrainingErrorErrorCodeServiceError captures enum value "ServiceError"
	PredictorModelRetrainingErrorErrorCodeServiceError string = "ServiceError"

	// PredictorModelRetrainingErrorErrorCodeUnknownError captures enum value "UnknownError"
	PredictorModelRetrainingErrorErrorCodeUnknownError string = "UnknownError"
)

// prop value enum
func (m *PredictorModelRetrainingError) validateErrorCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, predictorModelRetrainingErrorTypeErrorCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PredictorModelRetrainingError) validateErrorCode(formats strfmt.Registry) error {

	if err := validate.RequiredString("errorCode", "body", m.ErrorCode); err != nil {
		return err
	}

	// value enum
	if err := m.validateErrorCodeEnum("errorCode", "body", m.ErrorCode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this predictor model retraining error based on the context it is used
func (m *PredictorModelRetrainingError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateOfFirstOccurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PredictorModelRetrainingError) contextValidateDateOfFirstOccurrence(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateOfFirstOccurrence", "body", strfmt.DateTime(m.DateOfFirstOccurrence)); err != nil {
		return err
	}

	return nil
}

func (m *PredictorModelRetrainingError) contextValidateErrorCode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "errorCode", "body", string(m.ErrorCode)); err != nil {
		return err
	}

	return nil
}

func (m *PredictorModelRetrainingError) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PredictorModelRetrainingError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PredictorModelRetrainingError) UnmarshalBinary(b []byte) error {
	var res PredictorModelRetrainingError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

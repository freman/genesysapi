// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateShareRequest create share request
//
// swagger:model CreateShareRequest
type CreateShareRequest struct {

	// The member that will have access to this share. Only required if a list of members is not provided.
	Member *SharedEntity `json:"member,omitempty"`

	// member type
	// Enum: [USER GROUP PUBLIC]
	MemberType string `json:"memberType,omitempty"`

	// members
	Members []*CreateShareRequestMember `json:"members"`

	// The entity that will be shared
	// Required: true
	SharedEntity *SharedEntity `json:"sharedEntity"`

	// The share entity type
	// Required: true
	// Enum: [DOCUMENT]
	SharedEntityType *string `json:"sharedEntityType"`
}

// Validate validates this create share request
func (m *CreateShareRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharedEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharedEntityType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateShareRequest) validateMember(formats strfmt.Registry) error {

	if swag.IsZero(m.Member) { // not required
		return nil
	}

	if m.Member != nil {
		if err := m.Member.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("member")
			}
			return err
		}
	}

	return nil
}

var createShareRequestTypeMemberTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USER","GROUP","PUBLIC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createShareRequestTypeMemberTypePropEnum = append(createShareRequestTypeMemberTypePropEnum, v)
	}
}

const (

	// CreateShareRequestMemberTypeUSER captures enum value "USER"
	CreateShareRequestMemberTypeUSER string = "USER"

	// CreateShareRequestMemberTypeGROUP captures enum value "GROUP"
	CreateShareRequestMemberTypeGROUP string = "GROUP"

	// CreateShareRequestMemberTypePUBLIC captures enum value "PUBLIC"
	CreateShareRequestMemberTypePUBLIC string = "PUBLIC"
)

// prop value enum
func (m *CreateShareRequest) validateMemberTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createShareRequestTypeMemberTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateShareRequest) validateMemberType(formats strfmt.Registry) error {

	if swag.IsZero(m.MemberType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMemberTypeEnum("memberType", "body", m.MemberType); err != nil {
		return err
	}

	return nil
}

func (m *CreateShareRequest) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateShareRequest) validateSharedEntity(formats strfmt.Registry) error {

	if err := validate.Required("sharedEntity", "body", m.SharedEntity); err != nil {
		return err
	}

	if m.SharedEntity != nil {
		if err := m.SharedEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharedEntity")
			}
			return err
		}
	}

	return nil
}

var createShareRequestTypeSharedEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DOCUMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createShareRequestTypeSharedEntityTypePropEnum = append(createShareRequestTypeSharedEntityTypePropEnum, v)
	}
}

const (

	// CreateShareRequestSharedEntityTypeDOCUMENT captures enum value "DOCUMENT"
	CreateShareRequestSharedEntityTypeDOCUMENT string = "DOCUMENT"
)

// prop value enum
func (m *CreateShareRequest) validateSharedEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createShareRequestTypeSharedEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateShareRequest) validateSharedEntityType(formats strfmt.Registry) error {

	if err := validate.Required("sharedEntityType", "body", m.SharedEntityType); err != nil {
		return err
	}

	// value enum
	if err := m.validateSharedEntityTypeEnum("sharedEntityType", "body", *m.SharedEntityType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateShareRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateShareRequest) UnmarshalBinary(b []byte) error {
	var res CreateShareRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

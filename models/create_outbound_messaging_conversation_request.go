// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateOutboundMessagingConversationRequest create outbound messaging conversation request
//
// swagger:model CreateOutboundMessagingConversationRequest
type CreateOutboundMessagingConversationRequest struct {

	// The external contact Id of the recipient of the message.
	ExternalContactID string `json:"externalContactId,omitempty"`

	// The external organization Id of the recipient of the message.
	ExternalOrganizationID string `json:"externalOrganizationId,omitempty"`

	// The ID of the queue to be associated with the message. This will determine the fromAddress of the message.
	// Required: true
	QueueID *string `json:"queueId"`

	// The messaging address of the recipient of the message. For an SMS messenger type, the phone number address must be in E.164 format. E.g. +13175555555 or +34234234234
	// Required: true
	ToAddress *string `json:"toAddress"`

	// The messaging address messenger type.
	// Required: true
	// Enum: [sms facebook twitter line whatsapp]
	ToAddressMessengerType *string `json:"toAddressMessengerType"`

	// An override to use an existing conversation.
	// If set to true, an existing conversation will be used if there is one within the conversation window.
	// If set to false, create request fails if there is a conversation within the conversation window.
	UseExistingConversation bool `json:"useExistingConversation"`
}

// Validate validates this create outbound messaging conversation request
func (m *CreateOutboundMessagingConversationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQueueID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToAddressMessengerType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateOutboundMessagingConversationRequest) validateQueueID(formats strfmt.Registry) error {

	if err := validate.Required("queueId", "body", m.QueueID); err != nil {
		return err
	}

	return nil
}

func (m *CreateOutboundMessagingConversationRequest) validateToAddress(formats strfmt.Registry) error {

	if err := validate.Required("toAddress", "body", m.ToAddress); err != nil {
		return err
	}

	return nil
}

var createOutboundMessagingConversationRequestTypeToAddressMessengerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sms","facebook","twitter","line","whatsapp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createOutboundMessagingConversationRequestTypeToAddressMessengerTypePropEnum = append(createOutboundMessagingConversationRequestTypeToAddressMessengerTypePropEnum, v)
	}
}

const (

	// CreateOutboundMessagingConversationRequestToAddressMessengerTypeSms captures enum value "sms"
	CreateOutboundMessagingConversationRequestToAddressMessengerTypeSms string = "sms"

	// CreateOutboundMessagingConversationRequestToAddressMessengerTypeFacebook captures enum value "facebook"
	CreateOutboundMessagingConversationRequestToAddressMessengerTypeFacebook string = "facebook"

	// CreateOutboundMessagingConversationRequestToAddressMessengerTypeTwitter captures enum value "twitter"
	CreateOutboundMessagingConversationRequestToAddressMessengerTypeTwitter string = "twitter"

	// CreateOutboundMessagingConversationRequestToAddressMessengerTypeLine captures enum value "line"
	CreateOutboundMessagingConversationRequestToAddressMessengerTypeLine string = "line"

	// CreateOutboundMessagingConversationRequestToAddressMessengerTypeWhatsapp captures enum value "whatsapp"
	CreateOutboundMessagingConversationRequestToAddressMessengerTypeWhatsapp string = "whatsapp"
)

// prop value enum
func (m *CreateOutboundMessagingConversationRequest) validateToAddressMessengerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createOutboundMessagingConversationRequestTypeToAddressMessengerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateOutboundMessagingConversationRequest) validateToAddressMessengerType(formats strfmt.Registry) error {

	if err := validate.Required("toAddressMessengerType", "body", m.ToAddressMessengerType); err != nil {
		return err
	}

	// value enum
	if err := m.validateToAddressMessengerTypeEnum("toAddressMessengerType", "body", *m.ToAddressMessengerType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateOutboundMessagingConversationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateOutboundMessagingConversationRequest) UnmarshalBinary(b []byte) error {
	var res CreateOutboundMessagingConversationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

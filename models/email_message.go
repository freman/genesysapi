// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmailMessage email message
//
// swagger:model EmailMessage
type EmailMessage struct {

	// The attachments of the email message.
	Attachments []*Attachment `json:"attachments"`

	// The recipients that were blind copied on the email message.
	Bcc []*EmailAddress `json:"bcc"`

	// The recipients that were copied on the email message.
	Cc []*EmailAddress `json:"cc"`

	// The type of draft that need to be treated.
	// Enum: [Reply ReplyAll Forward]
	DraftType string `json:"draftType,omitempty"`

	// Indicates an estimation of the size of the current email as a whole, in its final, ready to be sent form.
	// Read Only: true
	EmailSizeBytes int32 `json:"emailSizeBytes,omitempty"`

	// The sender of the email message.
	// Required: true
	From *EmailAddress `json:"from"`

	// Indicates whether the history of previous emails of the conversation is included within the email bodies of this message.
	HistoryIncluded bool `json:"historyIncluded"`

	// The html body of the email message.
	HTMLBody string `json:"htmlBody,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Indicates the maximum allowed size for an email to be send via SMTP server, based on the email domain configuration
	// Read Only: true
	MaxEmailSizeBytes int32 `json:"maxEmailSizeBytes,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The receiver of the reply email message.
	ReplyTo *EmailAddress `json:"replyTo,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The state of the current draft.
	// Enum: [Created Ready Edited]
	State string `json:"state,omitempty"`

	// The subject of the email message.
	Subject string `json:"subject,omitempty"`

	// The text body of the email message.
	// Required: true
	TextBody *string `json:"textBody"`

	// The time when the message was received or sent. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// The recipients of the email message.
	// Required: true
	To []*EmailAddress `json:"to"`
}

// Validate validates this email message
func (m *EmailMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDraftType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplyTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTextBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmailMessage) validateAttachments(formats strfmt.Registry) error {
	if swag.IsZero(m.Attachments) { // not required
		return nil
	}

	for i := 0; i < len(m.Attachments); i++ {
		if swag.IsZero(m.Attachments[i]) { // not required
			continue
		}

		if m.Attachments[i] != nil {
			if err := m.Attachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EmailMessage) validateBcc(formats strfmt.Registry) error {
	if swag.IsZero(m.Bcc) { // not required
		return nil
	}

	for i := 0; i < len(m.Bcc); i++ {
		if swag.IsZero(m.Bcc[i]) { // not required
			continue
		}

		if m.Bcc[i] != nil {
			if err := m.Bcc[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bcc" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bcc" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EmailMessage) validateCc(formats strfmt.Registry) error {
	if swag.IsZero(m.Cc) { // not required
		return nil
	}

	for i := 0; i < len(m.Cc); i++ {
		if swag.IsZero(m.Cc[i]) { // not required
			continue
		}

		if m.Cc[i] != nil {
			if err := m.Cc[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cc" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cc" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var emailMessageTypeDraftTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Reply","ReplyAll","Forward"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		emailMessageTypeDraftTypePropEnum = append(emailMessageTypeDraftTypePropEnum, v)
	}
}

const (

	// EmailMessageDraftTypeReply captures enum value "Reply"
	EmailMessageDraftTypeReply string = "Reply"

	// EmailMessageDraftTypeReplyAll captures enum value "ReplyAll"
	EmailMessageDraftTypeReplyAll string = "ReplyAll"

	// EmailMessageDraftTypeForward captures enum value "Forward"
	EmailMessageDraftTypeForward string = "Forward"
)

// prop value enum
func (m *EmailMessage) validateDraftTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, emailMessageTypeDraftTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EmailMessage) validateDraftType(formats strfmt.Registry) error {
	if swag.IsZero(m.DraftType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDraftTypeEnum("draftType", "body", m.DraftType); err != nil {
		return err
	}

	return nil
}

func (m *EmailMessage) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	if m.From != nil {
		if err := m.From.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *EmailMessage) validateReplyTo(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplyTo) { // not required
		return nil
	}

	if m.ReplyTo != nil {
		if err := m.ReplyTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replyTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replyTo")
			}
			return err
		}
	}

	return nil
}

func (m *EmailMessage) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var emailMessageTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Created","Ready","Edited"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		emailMessageTypeStatePropEnum = append(emailMessageTypeStatePropEnum, v)
	}
}

const (

	// EmailMessageStateCreated captures enum value "Created"
	EmailMessageStateCreated string = "Created"

	// EmailMessageStateReady captures enum value "Ready"
	EmailMessageStateReady string = "Ready"

	// EmailMessageStateEdited captures enum value "Edited"
	EmailMessageStateEdited string = "Edited"
)

// prop value enum
func (m *EmailMessage) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, emailMessageTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EmailMessage) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *EmailMessage) validateTextBody(formats strfmt.Registry) error {

	if err := validate.Required("textBody", "body", m.TextBody); err != nil {
		return err
	}

	return nil
}

func (m *EmailMessage) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EmailMessage) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	for i := 0; i < len(m.To); i++ {
		if swag.IsZero(m.To[i]) { // not required
			continue
		}

		if m.To[i] != nil {
			if err := m.To[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("to" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("to" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this email message based on the context it is used
func (m *EmailMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttachments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBcc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmailSizeBytes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxEmailSizeBytes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplyTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmailMessage) contextValidateAttachments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attachments); i++ {

		if m.Attachments[i] != nil {
			if err := m.Attachments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EmailMessage) contextValidateBcc(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Bcc); i++ {

		if m.Bcc[i] != nil {
			if err := m.Bcc[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bcc" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bcc" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EmailMessage) contextValidateCc(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Cc); i++ {

		if m.Cc[i] != nil {
			if err := m.Cc[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cc" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cc" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EmailMessage) contextValidateEmailSizeBytes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "emailSizeBytes", "body", int32(m.EmailSizeBytes)); err != nil {
		return err
	}

	return nil
}

func (m *EmailMessage) contextValidateFrom(ctx context.Context, formats strfmt.Registry) error {

	if m.From != nil {
		if err := m.From.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *EmailMessage) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *EmailMessage) contextValidateMaxEmailSizeBytes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "maxEmailSizeBytes", "body", int32(m.MaxEmailSizeBytes)); err != nil {
		return err
	}

	return nil
}

func (m *EmailMessage) contextValidateReplyTo(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplyTo != nil {
		if err := m.ReplyTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replyTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replyTo")
			}
			return err
		}
	}

	return nil
}

func (m *EmailMessage) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *EmailMessage) contextValidateTo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.To); i++ {

		if m.To[i] != nil {
			if err := m.To[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("to" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("to" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmailMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmailMessage) UnmarshalBinary(b []byte) error {
	var res EmailMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateWebChatConversationRequest create web chat conversation request
//
// swagger:model CreateWebChatConversationRequest
type CreateWebChatConversationRequest struct {

	// The web chat Deployment ID which contains the appropriate settings for this chat conversation.
	// Required: true
	DeploymentID *string `json:"deploymentId"`

	// A subset of the Journey System's data relevant to this conversation/session request (for external linkage and internal usage/context).
	JourneyContext *JourneyContext `json:"journeyContext,omitempty"`

	// If the guest member is an authenticated member (ie, not anonymous) his JWT is provided here. The token will have been previously generated with the "POST /api/v2/signeddata" resource.
	MemberAuthToken string `json:"memberAuthToken,omitempty"`

	// The guest member info to use for the new chat conversation.
	// Required: true
	MemberInfo *GuestMemberInfo `json:"memberInfo"`

	// The organization identifier.
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// The routing information to use for the new chat conversation.
	// Required: true
	RoutingTarget *WebChatRoutingTarget `json:"routingTarget"`
}

// Validate validates this create web chat conversation request
func (m *CreateWebChatConversationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeploymentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJourneyContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateWebChatConversationRequest) validateDeploymentID(formats strfmt.Registry) error {

	if err := validate.Required("deploymentId", "body", m.DeploymentID); err != nil {
		return err
	}

	return nil
}

func (m *CreateWebChatConversationRequest) validateJourneyContext(formats strfmt.Registry) error {

	if swag.IsZero(m.JourneyContext) { // not required
		return nil
	}

	if m.JourneyContext != nil {
		if err := m.JourneyContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("journeyContext")
			}
			return err
		}
	}

	return nil
}

func (m *CreateWebChatConversationRequest) validateMemberInfo(formats strfmt.Registry) error {

	if err := validate.Required("memberInfo", "body", m.MemberInfo); err != nil {
		return err
	}

	if m.MemberInfo != nil {
		if err := m.MemberInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memberInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CreateWebChatConversationRequest) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (m *CreateWebChatConversationRequest) validateRoutingTarget(formats strfmt.Registry) error {

	if err := validate.Required("routingTarget", "body", m.RoutingTarget); err != nil {
		return err
	}

	if m.RoutingTarget != nil {
		if err := m.RoutingTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routingTarget")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateWebChatConversationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateWebChatConversationRequest) UnmarshalBinary(b []byte) error {
	var res CreateWebChatConversationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

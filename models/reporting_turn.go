// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportingTurn reporting turn
//
// swagger:model ReportingTurn
type ReportingTurn struct {

	// The bot flow 'ask' action associated with this reporting turn (e.g. AskForIntent).
	AskAction *ReportingTurnAction `json:"askAction,omitempty"`

	// Result of the bot flow 'ask' action.
	// Enum: [SuccessCollection SuccessConfirmationYes SuccessConfirmationNo NoMatchCollection NoMatchConfirmation AgentRequestedByUser ConfirmationRequired Error ExpressionError NoInputCollection NoInputConfirmation DisambiguationRequired SuccessDisambiguation SuccessDisambiguationNone NoMatchDisambiguation NoInputDisambiguation]
	AskActionResult string `json:"askActionResult,omitempty"`

	// The bot prompts associated with this reporting turn.
	BotPrompts []string `json:"botPrompts"`

	// The conversation details, across potentially multiple Bot Flow sessions.
	// Read Only: true
	Conversation *AddressableEntityRef `json:"conversation,omitempty"`

	// Timestamp indicating when the original turn was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The intent and associated slots detected during this reporting turn.
	Intent *ReportingTurnIntent `json:"intent,omitempty"`

	// The knowledge data captured during this reporting turn.
	Knowledge *ReportingTurnKnowledge `json:"knowledge,omitempty"`

	// The details related to end of bot flow session.
	SessionEndDetails *SessionEndDetails `json:"sessionEndDetails,omitempty"`

	// The bot session ID that this reporting turn is grouped under.
	SessionID string `json:"sessionId,omitempty"`

	// The chosen user input associated with this reporting turn.
	UserInput string `json:"userInput,omitempty"`
}

// Validate validates this reporting turn
func (m *ReportingTurn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAskAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAskActionResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKnowledge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionEndDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportingTurn) validateAskAction(formats strfmt.Registry) error {
	if swag.IsZero(m.AskAction) { // not required
		return nil
	}

	if m.AskAction != nil {
		if err := m.AskAction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("askAction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("askAction")
			}
			return err
		}
	}

	return nil
}

var reportingTurnTypeAskActionResultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SuccessCollection","SuccessConfirmationYes","SuccessConfirmationNo","NoMatchCollection","NoMatchConfirmation","AgentRequestedByUser","ConfirmationRequired","Error","ExpressionError","NoInputCollection","NoInputConfirmation","DisambiguationRequired","SuccessDisambiguation","SuccessDisambiguationNone","NoMatchDisambiguation","NoInputDisambiguation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reportingTurnTypeAskActionResultPropEnum = append(reportingTurnTypeAskActionResultPropEnum, v)
	}
}

const (

	// ReportingTurnAskActionResultSuccessCollection captures enum value "SuccessCollection"
	ReportingTurnAskActionResultSuccessCollection string = "SuccessCollection"

	// ReportingTurnAskActionResultSuccessConfirmationYes captures enum value "SuccessConfirmationYes"
	ReportingTurnAskActionResultSuccessConfirmationYes string = "SuccessConfirmationYes"

	// ReportingTurnAskActionResultSuccessConfirmationNo captures enum value "SuccessConfirmationNo"
	ReportingTurnAskActionResultSuccessConfirmationNo string = "SuccessConfirmationNo"

	// ReportingTurnAskActionResultNoMatchCollection captures enum value "NoMatchCollection"
	ReportingTurnAskActionResultNoMatchCollection string = "NoMatchCollection"

	// ReportingTurnAskActionResultNoMatchConfirmation captures enum value "NoMatchConfirmation"
	ReportingTurnAskActionResultNoMatchConfirmation string = "NoMatchConfirmation"

	// ReportingTurnAskActionResultAgentRequestedByUser captures enum value "AgentRequestedByUser"
	ReportingTurnAskActionResultAgentRequestedByUser string = "AgentRequestedByUser"

	// ReportingTurnAskActionResultConfirmationRequired captures enum value "ConfirmationRequired"
	ReportingTurnAskActionResultConfirmationRequired string = "ConfirmationRequired"

	// ReportingTurnAskActionResultError captures enum value "Error"
	ReportingTurnAskActionResultError string = "Error"

	// ReportingTurnAskActionResultExpressionError captures enum value "ExpressionError"
	ReportingTurnAskActionResultExpressionError string = "ExpressionError"

	// ReportingTurnAskActionResultNoInputCollection captures enum value "NoInputCollection"
	ReportingTurnAskActionResultNoInputCollection string = "NoInputCollection"

	// ReportingTurnAskActionResultNoInputConfirmation captures enum value "NoInputConfirmation"
	ReportingTurnAskActionResultNoInputConfirmation string = "NoInputConfirmation"

	// ReportingTurnAskActionResultDisambiguationRequired captures enum value "DisambiguationRequired"
	ReportingTurnAskActionResultDisambiguationRequired string = "DisambiguationRequired"

	// ReportingTurnAskActionResultSuccessDisambiguation captures enum value "SuccessDisambiguation"
	ReportingTurnAskActionResultSuccessDisambiguation string = "SuccessDisambiguation"

	// ReportingTurnAskActionResultSuccessDisambiguationNone captures enum value "SuccessDisambiguationNone"
	ReportingTurnAskActionResultSuccessDisambiguationNone string = "SuccessDisambiguationNone"

	// ReportingTurnAskActionResultNoMatchDisambiguation captures enum value "NoMatchDisambiguation"
	ReportingTurnAskActionResultNoMatchDisambiguation string = "NoMatchDisambiguation"

	// ReportingTurnAskActionResultNoInputDisambiguation captures enum value "NoInputDisambiguation"
	ReportingTurnAskActionResultNoInputDisambiguation string = "NoInputDisambiguation"
)

// prop value enum
func (m *ReportingTurn) validateAskActionResultEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, reportingTurnTypeAskActionResultPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReportingTurn) validateAskActionResult(formats strfmt.Registry) error {
	if swag.IsZero(m.AskActionResult) { // not required
		return nil
	}

	// value enum
	if err := m.validateAskActionResultEnum("askActionResult", "body", m.AskActionResult); err != nil {
		return err
	}

	return nil
}

func (m *ReportingTurn) validateConversation(formats strfmt.Registry) error {
	if swag.IsZero(m.Conversation) { // not required
		return nil
	}

	if m.Conversation != nil {
		if err := m.Conversation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conversation")
			}
			return err
		}
	}

	return nil
}

func (m *ReportingTurn) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReportingTurn) validateIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.Intent) { // not required
		return nil
	}

	if m.Intent != nil {
		if err := m.Intent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("intent")
			}
			return err
		}
	}

	return nil
}

func (m *ReportingTurn) validateKnowledge(formats strfmt.Registry) error {
	if swag.IsZero(m.Knowledge) { // not required
		return nil
	}

	if m.Knowledge != nil {
		if err := m.Knowledge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("knowledge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("knowledge")
			}
			return err
		}
	}

	return nil
}

func (m *ReportingTurn) validateSessionEndDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.SessionEndDetails) { // not required
		return nil
	}

	if m.SessionEndDetails != nil {
		if err := m.SessionEndDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sessionEndDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sessionEndDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this reporting turn based on the context it is used
func (m *ReportingTurn) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAskAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConversation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKnowledge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSessionEndDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportingTurn) contextValidateAskAction(ctx context.Context, formats strfmt.Registry) error {

	if m.AskAction != nil {
		if err := m.AskAction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("askAction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("askAction")
			}
			return err
		}
	}

	return nil
}

func (m *ReportingTurn) contextValidateConversation(ctx context.Context, formats strfmt.Registry) error {

	if m.Conversation != nil {
		if err := m.Conversation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conversation")
			}
			return err
		}
	}

	return nil
}

func (m *ReportingTurn) contextValidateIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.Intent != nil {
		if err := m.Intent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("intent")
			}
			return err
		}
	}

	return nil
}

func (m *ReportingTurn) contextValidateKnowledge(ctx context.Context, formats strfmt.Registry) error {

	if m.Knowledge != nil {
		if err := m.Knowledge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("knowledge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("knowledge")
			}
			return err
		}
	}

	return nil
}

func (m *ReportingTurn) contextValidateSessionEndDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.SessionEndDetails != nil {
		if err := m.SessionEndDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sessionEndDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sessionEndDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportingTurn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportingTurn) UnmarshalBinary(b []byte) error {
	var res ReportingTurn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

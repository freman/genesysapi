// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TextBotChannel Channel information relevant to a bot flow.
//
// swagger:model TextBotChannel
type TextBotChannel struct {

	// The input modes for the channel.
	// Required: true
	// Unique: true
	InputModes []string `json:"inputModes"`

	// The name of the channel.
	// Required: true
	// Enum: [Chat Call Messaging]
	Name *string `json:"name"`

	// The output modes for the channel.
	// Required: true
	// Unique: true
	OutputModes []string `json:"outputModes"`

	// Information about the end user agent calling the bot flow.
	// Required: true
	UserAgent *TextBotUserAgent `json:"userAgent"`
}

// Validate validates this text bot channel
func (m *TextBotChannel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputModes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputModes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAgent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var textBotChannelInputModesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Text"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		textBotChannelInputModesItemsEnum = append(textBotChannelInputModesItemsEnum, v)
	}
}

func (m *TextBotChannel) validateInputModesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, textBotChannelInputModesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TextBotChannel) validateInputModes(formats strfmt.Registry) error {

	if err := validate.Required("inputModes", "body", m.InputModes); err != nil {
		return err
	}

	if err := validate.UniqueItems("inputModes", "body", m.InputModes); err != nil {
		return err
	}

	for i := 0; i < len(m.InputModes); i++ {

		// value enum
		if err := m.validateInputModesItemsEnum("inputModes"+"."+strconv.Itoa(i), "body", m.InputModes[i]); err != nil {
			return err
		}

	}

	return nil
}

var textBotChannelTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Chat","Call","Messaging"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		textBotChannelTypeNamePropEnum = append(textBotChannelTypeNamePropEnum, v)
	}
}

const (

	// TextBotChannelNameChat captures enum value "Chat"
	TextBotChannelNameChat string = "Chat"

	// TextBotChannelNameCall captures enum value "Call"
	TextBotChannelNameCall string = "Call"

	// TextBotChannelNameMessaging captures enum value "Messaging"
	TextBotChannelNameMessaging string = "Messaging"
)

// prop value enum
func (m *TextBotChannel) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, textBotChannelTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TextBotChannel) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	// value enum
	if err := m.validateNameEnum("name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

var textBotChannelOutputModesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Text"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		textBotChannelOutputModesItemsEnum = append(textBotChannelOutputModesItemsEnum, v)
	}
}

func (m *TextBotChannel) validateOutputModesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, textBotChannelOutputModesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TextBotChannel) validateOutputModes(formats strfmt.Registry) error {

	if err := validate.Required("outputModes", "body", m.OutputModes); err != nil {
		return err
	}

	if err := validate.UniqueItems("outputModes", "body", m.OutputModes); err != nil {
		return err
	}

	for i := 0; i < len(m.OutputModes); i++ {

		// value enum
		if err := m.validateOutputModesItemsEnum("outputModes"+"."+strconv.Itoa(i), "body", m.OutputModes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *TextBotChannel) validateUserAgent(formats strfmt.Registry) error {

	if err := validate.Required("userAgent", "body", m.UserAgent); err != nil {
		return err
	}

	if m.UserAgent != nil {
		if err := m.UserAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userAgent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userAgent")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this text bot channel based on the context it is used
func (m *TextBotChannel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TextBotChannel) contextValidateUserAgent(ctx context.Context, formats strfmt.Registry) error {

	if m.UserAgent != nil {
		if err := m.UserAgent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userAgent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userAgent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TextBotChannel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TextBotChannel) UnmarshalBinary(b []byte) error {
	var res TextBotChannel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

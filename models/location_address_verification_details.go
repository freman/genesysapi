// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocationAddressVerificationDetails location address verification details
//
// swagger:model LocationAddressVerificationDetails
type LocationAddressVerificationDetails struct {

	// Finished time of address verification process. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateFinished strfmt.DateTime `json:"dateFinished,omitempty"`

	// Time started of address verification process. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateStarted strfmt.DateTime `json:"dateStarted,omitempty"`

	// Third party service used for address verification
	// Example: smartystreets-us
	Service string `json:"service,omitempty"`

	// Status of address verification process
	// Enum: [Pending InProgress Retry Complete Failed]
	Status string `json:"status,omitempty"`
}

// Validate validates this location address verification details
func (m *LocationAddressVerificationDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateFinished(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocationAddressVerificationDetails) validateDateFinished(formats strfmt.Registry) error {
	if swag.IsZero(m.DateFinished) { // not required
		return nil
	}

	if err := validate.FormatOf("dateFinished", "body", "date-time", m.DateFinished.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LocationAddressVerificationDetails) validateDateStarted(formats strfmt.Registry) error {
	if swag.IsZero(m.DateStarted) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStarted", "body", "date-time", m.DateStarted.String(), formats); err != nil {
		return err
	}

	return nil
}

var locationAddressVerificationDetailsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","InProgress","Retry","Complete","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		locationAddressVerificationDetailsTypeStatusPropEnum = append(locationAddressVerificationDetailsTypeStatusPropEnum, v)
	}
}

const (

	// LocationAddressVerificationDetailsStatusPending captures enum value "Pending"
	LocationAddressVerificationDetailsStatusPending string = "Pending"

	// LocationAddressVerificationDetailsStatusInProgress captures enum value "InProgress"
	LocationAddressVerificationDetailsStatusInProgress string = "InProgress"

	// LocationAddressVerificationDetailsStatusRetry captures enum value "Retry"
	LocationAddressVerificationDetailsStatusRetry string = "Retry"

	// LocationAddressVerificationDetailsStatusComplete captures enum value "Complete"
	LocationAddressVerificationDetailsStatusComplete string = "Complete"

	// LocationAddressVerificationDetailsStatusFailed captures enum value "Failed"
	LocationAddressVerificationDetailsStatusFailed string = "Failed"
)

// prop value enum
func (m *LocationAddressVerificationDetails) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, locationAddressVerificationDetailsTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LocationAddressVerificationDetails) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this location address verification details based on context it is used
func (m *LocationAddressVerificationDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LocationAddressVerificationDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocationAddressVerificationDetails) UnmarshalBinary(b []byte) error {
	var res LocationAddressVerificationDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DependencyStatus dependency status
//
// swagger:model DependencyStatus
type DependencyStatus struct {

	// build Id
	BuildID string `json:"buildId,omitempty"`

	// OAuth client that initiated the build.
	Client *DomainEntityRef `json:"client,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateCompleted strfmt.DateTime `json:"dateCompleted,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateStarted strfmt.DateTime `json:"dateStarted,omitempty"`

	// failed objects
	FailedObjects []*FailedObject `json:"failedObjects"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// status
	// Enum: [BUILDINITIALIZING BUILDINPROGRESS NOTBUILT OPERATIONAL OPERATIONALNEEDSREBUILD]
	Status string `json:"status,omitempty"`

	// User that initiated the build.
	User *User `json:"user,omitempty"`
}

// Validate validates this dependency status
func (m *DependencyStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DependencyStatus) validateClient(formats strfmt.Registry) error {
	if swag.IsZero(m.Client) { // not required
		return nil
	}

	if m.Client != nil {
		if err := m.Client.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

func (m *DependencyStatus) validateDateCompleted(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCompleted) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCompleted", "body", "date-time", m.DateCompleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DependencyStatus) validateDateStarted(formats strfmt.Registry) error {
	if swag.IsZero(m.DateStarted) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStarted", "body", "date-time", m.DateStarted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DependencyStatus) validateFailedObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.FailedObjects) { // not required
		return nil
	}

	for i := 0; i < len(m.FailedObjects); i++ {
		if swag.IsZero(m.FailedObjects[i]) { // not required
			continue
		}

		if m.FailedObjects[i] != nil {
			if err := m.FailedObjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failedObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failedObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DependencyStatus) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var dependencyStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BUILDINITIALIZING","BUILDINPROGRESS","NOTBUILT","OPERATIONAL","OPERATIONALNEEDSREBUILD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dependencyStatusTypeStatusPropEnum = append(dependencyStatusTypeStatusPropEnum, v)
	}
}

const (

	// DependencyStatusStatusBUILDINITIALIZING captures enum value "BUILDINITIALIZING"
	DependencyStatusStatusBUILDINITIALIZING string = "BUILDINITIALIZING"

	// DependencyStatusStatusBUILDINPROGRESS captures enum value "BUILDINPROGRESS"
	DependencyStatusStatusBUILDINPROGRESS string = "BUILDINPROGRESS"

	// DependencyStatusStatusNOTBUILT captures enum value "NOTBUILT"
	DependencyStatusStatusNOTBUILT string = "NOTBUILT"

	// DependencyStatusStatusOPERATIONAL captures enum value "OPERATIONAL"
	DependencyStatusStatusOPERATIONAL string = "OPERATIONAL"

	// DependencyStatusStatusOPERATIONALNEEDSREBUILD captures enum value "OPERATIONALNEEDSREBUILD"
	DependencyStatusStatusOPERATIONALNEEDSREBUILD string = "OPERATIONALNEEDSREBUILD"
)

// prop value enum
func (m *DependencyStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dependencyStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DependencyStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DependencyStatus) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this dependency status based on the context it is used
func (m *DependencyStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailedObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DependencyStatus) contextValidateClient(ctx context.Context, formats strfmt.Registry) error {

	if m.Client != nil {
		if err := m.Client.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

func (m *DependencyStatus) contextValidateFailedObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FailedObjects); i++ {

		if m.FailedObjects[i] != nil {
			if err := m.FailedObjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failedObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failedObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DependencyStatus) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *DependencyStatus) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *DependencyStatus) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DependencyStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DependencyStatus) UnmarshalBinary(b []byte) error {
	var res DependencyStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

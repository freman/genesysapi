// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SchedulingStatusResponse scheduling status response
//
// swagger:model SchedulingStatusResponse
type SchedulingStatusResponse struct {

	// If the request could not be properly processed, error details will be given here.
	// Read Only: true
	ErrorDetails []*SchedulingProcessingError `json:"errorDetails"`

	// The ID generated for the scheduling job.  Use to GET result when job is completed.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The percentage of the job that is complete.
	// Read Only: true
	PercentComplete int32 `json:"percentComplete,omitempty"`

	// The uri of the scheduling result. It has a value if the status is 'Success'.
	// Read Only: true
	SchedulingResultURI string `json:"schedulingResultUri,omitempty"`

	// The status of the scheduling job.
	// Read Only: true
	// Enum: [Pending Success Failed Ongoing PartialFailure]
	Status string `json:"status,omitempty"`
}

// Validate validates this scheduling status response
func (m *SchedulingStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulingStatusResponse) validateErrorDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.ErrorDetails); i++ {
		if swag.IsZero(m.ErrorDetails[i]) { // not required
			continue
		}

		if m.ErrorDetails[i] != nil {
			if err := m.ErrorDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var schedulingStatusResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Success","Failed","Ongoing","PartialFailure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		schedulingStatusResponseTypeStatusPropEnum = append(schedulingStatusResponseTypeStatusPropEnum, v)
	}
}

const (

	// SchedulingStatusResponseStatusPending captures enum value "Pending"
	SchedulingStatusResponseStatusPending string = "Pending"

	// SchedulingStatusResponseStatusSuccess captures enum value "Success"
	SchedulingStatusResponseStatusSuccess string = "Success"

	// SchedulingStatusResponseStatusFailed captures enum value "Failed"
	SchedulingStatusResponseStatusFailed string = "Failed"

	// SchedulingStatusResponseStatusOngoing captures enum value "Ongoing"
	SchedulingStatusResponseStatusOngoing string = "Ongoing"

	// SchedulingStatusResponseStatusPartialFailure captures enum value "PartialFailure"
	SchedulingStatusResponseStatusPartialFailure string = "PartialFailure"
)

// prop value enum
func (m *SchedulingStatusResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, schedulingStatusResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SchedulingStatusResponse) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this scheduling status response based on the context it is used
func (m *SchedulingStatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrorDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePercentComplete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedulingResultURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulingStatusResponse) contextValidateErrorDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "errorDetails", "body", []*SchedulingProcessingError(m.ErrorDetails)); err != nil {
		return err
	}

	for i := 0; i < len(m.ErrorDetails); i++ {

		if m.ErrorDetails[i] != nil {
			if err := m.ErrorDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SchedulingStatusResponse) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *SchedulingStatusResponse) contextValidatePercentComplete(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "percentComplete", "body", int32(m.PercentComplete)); err != nil {
		return err
	}

	return nil
}

func (m *SchedulingStatusResponse) contextValidateSchedulingResultURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "schedulingResultUri", "body", string(m.SchedulingResultURI)); err != nil {
		return err
	}

	return nil
}

func (m *SchedulingStatusResponse) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchedulingStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchedulingStatusResponse) UnmarshalBinary(b []byte) error {
	var res SchedulingStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

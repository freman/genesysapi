// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateActivityCodeRequest create activity code request
//
// swagger:model CreateActivityCodeRequest
type CreateActivityCodeRequest struct {

	// Whether an agent can select this activity code when creating or editing a time off request
	AgentTimeOffSelectable bool `json:"agentTimeOffSelectable"`

	// The activity code's category
	// Required: true
	// Enum: [OnQueueWork Break Meal Meeting OffQueueWork TimeOff Training Unavailable Unscheduled]
	Category *string `json:"category"`

	// Whether an agent is paid while performing this activity
	CountsAsPaidTime bool `json:"countsAsPaidTime"`

	// Indicates whether or not the activity should be counted as work time
	CountsAsWorkTime bool `json:"countsAsWorkTime"`

	// Whether or not this activity code counts toward shrinkage calculations
	CountsTowardShrinkage bool `json:"countsTowardShrinkage"`

	// Whether this activity code is considered interruptible
	Interruptible bool `json:"interruptible"`

	// The default length of the activity in minutes
	LengthInMinutes int32 `json:"lengthInMinutes,omitempty"`

	// The name of the activity code
	// Required: true
	Name *string `json:"name"`

	// Whether this activity code is considered planned or unplanned shrinkage
	PlannedShrinkage bool `json:"plannedShrinkage"`

	// The secondary presences of this activity code
	SecondaryPresences []*SecondaryPresence `json:"secondaryPresences"`
}

// Validate validates this create activity code request
func (m *CreateActivityCodeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryPresences(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createActivityCodeRequestTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OnQueueWork","Break","Meal","Meeting","OffQueueWork","TimeOff","Training","Unavailable","Unscheduled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createActivityCodeRequestTypeCategoryPropEnum = append(createActivityCodeRequestTypeCategoryPropEnum, v)
	}
}

const (

	// CreateActivityCodeRequestCategoryOnQueueWork captures enum value "OnQueueWork"
	CreateActivityCodeRequestCategoryOnQueueWork string = "OnQueueWork"

	// CreateActivityCodeRequestCategoryBreak captures enum value "Break"
	CreateActivityCodeRequestCategoryBreak string = "Break"

	// CreateActivityCodeRequestCategoryMeal captures enum value "Meal"
	CreateActivityCodeRequestCategoryMeal string = "Meal"

	// CreateActivityCodeRequestCategoryMeeting captures enum value "Meeting"
	CreateActivityCodeRequestCategoryMeeting string = "Meeting"

	// CreateActivityCodeRequestCategoryOffQueueWork captures enum value "OffQueueWork"
	CreateActivityCodeRequestCategoryOffQueueWork string = "OffQueueWork"

	// CreateActivityCodeRequestCategoryTimeOff captures enum value "TimeOff"
	CreateActivityCodeRequestCategoryTimeOff string = "TimeOff"

	// CreateActivityCodeRequestCategoryTraining captures enum value "Training"
	CreateActivityCodeRequestCategoryTraining string = "Training"

	// CreateActivityCodeRequestCategoryUnavailable captures enum value "Unavailable"
	CreateActivityCodeRequestCategoryUnavailable string = "Unavailable"

	// CreateActivityCodeRequestCategoryUnscheduled captures enum value "Unscheduled"
	CreateActivityCodeRequestCategoryUnscheduled string = "Unscheduled"
)

// prop value enum
func (m *CreateActivityCodeRequest) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createActivityCodeRequestTypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateActivityCodeRequest) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", *m.Category); err != nil {
		return err
	}

	return nil
}

func (m *CreateActivityCodeRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateActivityCodeRequest) validateSecondaryPresences(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryPresences) { // not required
		return nil
	}

	for i := 0; i < len(m.SecondaryPresences); i++ {
		if swag.IsZero(m.SecondaryPresences[i]) { // not required
			continue
		}

		if m.SecondaryPresences[i] != nil {
			if err := m.SecondaryPresences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secondaryPresences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("secondaryPresences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create activity code request based on the context it is used
func (m *CreateActivityCodeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecondaryPresences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateActivityCodeRequest) contextValidateSecondaryPresences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecondaryPresences); i++ {

		if m.SecondaryPresences[i] != nil {
			if err := m.SecondaryPresences[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secondaryPresences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("secondaryPresences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateActivityCodeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateActivityCodeRequest) UnmarshalBinary(b []byte) error {
	var res CreateActivityCodeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LexBotAlias lex bot alias
//
// swagger:model LexBotAlias
type LexBotAlias struct {

	// The Lex bot this is an alias for
	Bot *LexBot `json:"bot,omitempty"`

	// The version of the Lex bot this alias points at
	BotVersion string `json:"botVersion,omitempty"`

	// If the status is FAILED, Amazon Lex explains why it failed to build the bot
	FailureReason string `json:"failureReason,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// An array of Intents associated with this bot alias
	Intents []*LexIntent `json:"intents"`

	// The target language of the Lex bot
	// Enum: [en-US]
	Language string `json:"language,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The status of the Lex bot alias
	// Required: true
	// Enum: [BUILDING READY FAILED NOT_BUILT]
	Status *string `json:"status"`
}

// Validate validates this lex bot alias
func (m *LexBotAlias) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LexBotAlias) validateBot(formats strfmt.Registry) error {

	if swag.IsZero(m.Bot) { // not required
		return nil
	}

	if m.Bot != nil {
		if err := m.Bot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bot")
			}
			return err
		}
	}

	return nil
}

func (m *LexBotAlias) validateIntents(formats strfmt.Registry) error {

	if swag.IsZero(m.Intents) { // not required
		return nil
	}

	for i := 0; i < len(m.Intents); i++ {
		if swag.IsZero(m.Intents[i]) { // not required
			continue
		}

		if m.Intents[i] != nil {
			if err := m.Intents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var lexBotAliasTypeLanguagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["en-US"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lexBotAliasTypeLanguagePropEnum = append(lexBotAliasTypeLanguagePropEnum, v)
	}
}

const (

	// LexBotAliasLanguageEnUS captures enum value "en-US"
	LexBotAliasLanguageEnUS string = "en-US"
)

// prop value enum
func (m *LexBotAlias) validateLanguageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lexBotAliasTypeLanguagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LexBotAlias) validateLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.Language) { // not required
		return nil
	}

	// value enum
	if err := m.validateLanguageEnum("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

func (m *LexBotAlias) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var lexBotAliasTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BUILDING","READY","FAILED","NOT_BUILT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lexBotAliasTypeStatusPropEnum = append(lexBotAliasTypeStatusPropEnum, v)
	}
}

const (

	// LexBotAliasStatusBUILDING captures enum value "BUILDING"
	LexBotAliasStatusBUILDING string = "BUILDING"

	// LexBotAliasStatusREADY captures enum value "READY"
	LexBotAliasStatusREADY string = "READY"

	// LexBotAliasStatusFAILED captures enum value "FAILED"
	LexBotAliasStatusFAILED string = "FAILED"

	// LexBotAliasStatusNOTBUILT captures enum value "NOT_BUILT"
	LexBotAliasStatusNOTBUILT string = "NOT_BUILT"
)

// prop value enum
func (m *LexBotAlias) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lexBotAliasTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LexBotAlias) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LexBotAlias) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LexBotAlias) UnmarshalBinary(b []byte) error {
	var res LexBotAlias
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecipientAdditionalIdentifier Additional identifiers for describing messaging recipient.
//
// swagger:model RecipientAdditionalIdentifier
type RecipientAdditionalIdentifier struct {

	// Type of the Identifier
	// Required: true
	// Read Only: true
	// Enum: [Deployment Subject]
	Type string `json:"type"`

	// The Identifier value.
	// Required: true
	// Read Only: true
	Value string `json:"value"`
}

// Validate validates this recipient additional identifier
func (m *RecipientAdditionalIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var recipientAdditionalIdentifierTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Deployment","Subject"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recipientAdditionalIdentifierTypeTypePropEnum = append(recipientAdditionalIdentifierTypeTypePropEnum, v)
	}
}

const (

	// RecipientAdditionalIdentifierTypeDeployment captures enum value "Deployment"
	RecipientAdditionalIdentifierTypeDeployment string = "Deployment"

	// RecipientAdditionalIdentifierTypeSubject captures enum value "Subject"
	RecipientAdditionalIdentifierTypeSubject string = "Subject"
)

// prop value enum
func (m *RecipientAdditionalIdentifier) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recipientAdditionalIdentifierTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecipientAdditionalIdentifier) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *RecipientAdditionalIdentifier) validateValue(formats strfmt.Registry) error {

	if err := validate.RequiredString("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this recipient additional identifier based on the context it is used
func (m *RecipientAdditionalIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecipientAdditionalIdentifier) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

func (m *RecipientAdditionalIdentifier) contextValidateValue(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "value", "body", string(m.Value)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecipientAdditionalIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecipientAdditionalIdentifier) UnmarshalBinary(b []byte) error {
	var res RecipientAdditionalIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

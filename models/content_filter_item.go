// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentFilterItem content filter item
//
// swagger:model ContentFilterItem
type ContentFilterItem struct {

	// name
	Name string `json:"name,omitempty"`

	// operator
	// Enum: [IN RANGE EQUALS NOTEQUALS LESSTHAN LESSTHANEQUALS GREATERTHAN GREATERTHANEQUALS CONTAINS]
	Operator string `json:"operator,omitempty"`

	// type
	// Enum: [NUMBER STRING DATE BOOLEAN LIST]
	Type string `json:"type,omitempty"`

	// values
	Values []string `json:"values"`
}

// Validate validates this content filter item
func (m *ContentFilterItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var contentFilterItemTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IN","RANGE","EQUALS","NOTEQUALS","LESSTHAN","LESSTHANEQUALS","GREATERTHAN","GREATERTHANEQUALS","CONTAINS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentFilterItemTypeOperatorPropEnum = append(contentFilterItemTypeOperatorPropEnum, v)
	}
}

const (

	// ContentFilterItemOperatorIN captures enum value "IN"
	ContentFilterItemOperatorIN string = "IN"

	// ContentFilterItemOperatorRANGE captures enum value "RANGE"
	ContentFilterItemOperatorRANGE string = "RANGE"

	// ContentFilterItemOperatorEQUALS captures enum value "EQUALS"
	ContentFilterItemOperatorEQUALS string = "EQUALS"

	// ContentFilterItemOperatorNOTEQUALS captures enum value "NOTEQUALS"
	ContentFilterItemOperatorNOTEQUALS string = "NOTEQUALS"

	// ContentFilterItemOperatorLESSTHAN captures enum value "LESSTHAN"
	ContentFilterItemOperatorLESSTHAN string = "LESSTHAN"

	// ContentFilterItemOperatorLESSTHANEQUALS captures enum value "LESSTHANEQUALS"
	ContentFilterItemOperatorLESSTHANEQUALS string = "LESSTHANEQUALS"

	// ContentFilterItemOperatorGREATERTHAN captures enum value "GREATERTHAN"
	ContentFilterItemOperatorGREATERTHAN string = "GREATERTHAN"

	// ContentFilterItemOperatorGREATERTHANEQUALS captures enum value "GREATERTHANEQUALS"
	ContentFilterItemOperatorGREATERTHANEQUALS string = "GREATERTHANEQUALS"

	// ContentFilterItemOperatorCONTAINS captures enum value "CONTAINS"
	ContentFilterItemOperatorCONTAINS string = "CONTAINS"
)

// prop value enum
func (m *ContentFilterItem) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contentFilterItemTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContentFilterItem) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

var contentFilterItemTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NUMBER","STRING","DATE","BOOLEAN","LIST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentFilterItemTypeTypePropEnum = append(contentFilterItemTypeTypePropEnum, v)
	}
}

const (

	// ContentFilterItemTypeNUMBER captures enum value "NUMBER"
	ContentFilterItemTypeNUMBER string = "NUMBER"

	// ContentFilterItemTypeSTRING captures enum value "STRING"
	ContentFilterItemTypeSTRING string = "STRING"

	// ContentFilterItemTypeDATE captures enum value "DATE"
	ContentFilterItemTypeDATE string = "DATE"

	// ContentFilterItemTypeBOOLEAN captures enum value "BOOLEAN"
	ContentFilterItemTypeBOOLEAN string = "BOOLEAN"

	// ContentFilterItemTypeLIST captures enum value "LIST"
	ContentFilterItemTypeLIST string = "LIST"
)

// prop value enum
func (m *ContentFilterItem) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contentFilterItemTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContentFilterItem) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this content filter item based on context it is used
func (m *ContentFilterItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ContentFilterItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentFilterItem) UnmarshalBinary(b []byte) error {
	var res ContentFilterItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

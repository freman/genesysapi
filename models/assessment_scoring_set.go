// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssessmentScoringSet assessment scoring set
//
// swagger:model AssessmentScoringSet
type AssessmentScoringSet struct {

	// Comments provided by agent.
	AgentComments string `json:"agentComments,omitempty"`

	// Comments provided for these answers.
	Comments string `json:"comments,omitempty"`

	// If the assessment was not passed, the reasons for failure.
	// Read Only: true
	// Unique: true
	FailureReasons []string `json:"failureReasons"`

	// True if the assessment was passed
	// Read Only: true
	IsPassed *bool `json:"isPassed"`

	// The individual scores for each question group
	// Required: true
	QuestionGroupScores []*AssessmentQuestionGroupScore `json:"questionGroupScores"`

	// The total score for the critical questions
	// Read Only: true
	TotalCriticalScore float32 `json:"totalCriticalScore,omitempty"`

	// The total score for the non-critical questions
	// Read Only: true
	TotalNonCriticalScore float32 `json:"totalNonCriticalScore,omitempty"`

	// The total score of the answers
	// Read Only: true
	TotalScore float32 `json:"totalScore,omitempty"`
}

// Validate validates this assessment scoring set
func (m *AssessmentScoringSet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailureReasons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuestionGroupScores(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var assessmentScoringSetFailureReasonsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Score","CriticalScore","KillQuestion"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assessmentScoringSetFailureReasonsItemsEnum = append(assessmentScoringSetFailureReasonsItemsEnum, v)
	}
}

func (m *AssessmentScoringSet) validateFailureReasonsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assessmentScoringSetFailureReasonsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssessmentScoringSet) validateFailureReasons(formats strfmt.Registry) error {

	if swag.IsZero(m.FailureReasons) { // not required
		return nil
	}

	if err := validate.UniqueItems("failureReasons", "body", m.FailureReasons); err != nil {
		return err
	}

	for i := 0; i < len(m.FailureReasons); i++ {

		// value enum
		if err := m.validateFailureReasonsItemsEnum("failureReasons"+"."+strconv.Itoa(i), "body", m.FailureReasons[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *AssessmentScoringSet) validateQuestionGroupScores(formats strfmt.Registry) error {

	if err := validate.Required("questionGroupScores", "body", m.QuestionGroupScores); err != nil {
		return err
	}

	for i := 0; i < len(m.QuestionGroupScores); i++ {
		if swag.IsZero(m.QuestionGroupScores[i]) { // not required
			continue
		}

		if m.QuestionGroupScores[i] != nil {
			if err := m.QuestionGroupScores[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("questionGroupScores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssessmentScoringSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssessmentScoringSet) UnmarshalBinary(b []byte) error {
	var res AssessmentScoringSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

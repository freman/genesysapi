// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PermissionDetails permission details
//
// swagger:model PermissionDetails
type PermissionDetails struct {

	// Whether the current user can subscribe, when division permissions are otherwise required
	AllowsCurrentUser bool `json:"allowsCurrentUser"`

	// Whether or not this permission requirement is enforced
	Enforced bool `json:"enforced"`

	// List of required permissions
	Permissions []string `json:"permissions"`

	// The type of permission requirement
	// Enum: [requiresCurrentUser requiresPermissions requiresDivisionPermissions requiresAnyDivisionPermissions]
	Type string `json:"type,omitempty"`
}

// Validate validates this permission details
func (m *PermissionDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var permissionDetailsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["requiresCurrentUser","requiresPermissions","requiresDivisionPermissions","requiresAnyDivisionPermissions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		permissionDetailsTypeTypePropEnum = append(permissionDetailsTypeTypePropEnum, v)
	}
}

const (

	// PermissionDetailsTypeRequiresCurrentUser captures enum value "requiresCurrentUser"
	PermissionDetailsTypeRequiresCurrentUser string = "requiresCurrentUser"

	// PermissionDetailsTypeRequiresPermissions captures enum value "requiresPermissions"
	PermissionDetailsTypeRequiresPermissions string = "requiresPermissions"

	// PermissionDetailsTypeRequiresDivisionPermissions captures enum value "requiresDivisionPermissions"
	PermissionDetailsTypeRequiresDivisionPermissions string = "requiresDivisionPermissions"

	// PermissionDetailsTypeRequiresAnyDivisionPermissions captures enum value "requiresAnyDivisionPermissions"
	PermissionDetailsTypeRequiresAnyDivisionPermissions string = "requiresAnyDivisionPermissions"
)

// prop value enum
func (m *PermissionDetails) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, permissionDetailsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PermissionDetails) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PermissionDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PermissionDetails) UnmarshalBinary(b []byte) error {
	var res PermissionDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

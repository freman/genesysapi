// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QualityAuditQueryFilter quality audit query filter
//
// swagger:model QualityAuditQueryFilter
type QualityAuditQueryFilter struct {

	// Name of the property to filter.
	// Required: true
	// Enum: [UserId TrusteeOrganizationId TrusteeOnlyAudits ClientId Action EntityType EntityId ConversationId ServiceName]
	Property *string `json:"property"`

	// Value of the property to filter.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this quality audit query filter
func (m *QualityAuditQueryFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var qualityAuditQueryFilterTypePropertyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UserId","TrusteeOrganizationId","TrusteeOnlyAudits","ClientId","Action","EntityType","EntityId","ConversationId","ServiceName"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		qualityAuditQueryFilterTypePropertyPropEnum = append(qualityAuditQueryFilterTypePropertyPropEnum, v)
	}
}

const (

	// QualityAuditQueryFilterPropertyUserID captures enum value "UserId"
	QualityAuditQueryFilterPropertyUserID string = "UserId"

	// QualityAuditQueryFilterPropertyTrusteeOrganizationID captures enum value "TrusteeOrganizationId"
	QualityAuditQueryFilterPropertyTrusteeOrganizationID string = "TrusteeOrganizationId"

	// QualityAuditQueryFilterPropertyTrusteeOnlyAudits captures enum value "TrusteeOnlyAudits"
	QualityAuditQueryFilterPropertyTrusteeOnlyAudits string = "TrusteeOnlyAudits"

	// QualityAuditQueryFilterPropertyClientID captures enum value "ClientId"
	QualityAuditQueryFilterPropertyClientID string = "ClientId"

	// QualityAuditQueryFilterPropertyAction captures enum value "Action"
	QualityAuditQueryFilterPropertyAction string = "Action"

	// QualityAuditQueryFilterPropertyEntityType captures enum value "EntityType"
	QualityAuditQueryFilterPropertyEntityType string = "EntityType"

	// QualityAuditQueryFilterPropertyEntityID captures enum value "EntityId"
	QualityAuditQueryFilterPropertyEntityID string = "EntityId"

	// QualityAuditQueryFilterPropertyConversationID captures enum value "ConversationId"
	QualityAuditQueryFilterPropertyConversationID string = "ConversationId"

	// QualityAuditQueryFilterPropertyServiceName captures enum value "ServiceName"
	QualityAuditQueryFilterPropertyServiceName string = "ServiceName"
)

// prop value enum
func (m *QualityAuditQueryFilter) validatePropertyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, qualityAuditQueryFilterTypePropertyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QualityAuditQueryFilter) validateProperty(formats strfmt.Registry) error {

	if err := validate.Required("property", "body", m.Property); err != nil {
		return err
	}

	// value enum
	if err := m.validatePropertyEnum("property", "body", *m.Property); err != nil {
		return err
	}

	return nil
}

func (m *QualityAuditQueryFilter) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QualityAuditQueryFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QualityAuditQueryFilter) UnmarshalBinary(b []byte) error {
	var res QualityAuditQueryFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScimServiceProviderConfig Defines a SCIM service provider's configuration.
//
// swagger:model ScimServiceProviderConfig
type ScimServiceProviderConfig struct {

	// The list of supported authentication schemes.
	// Read Only: true
	AuthenticationSchemes []*ScimServiceProviderConfigAuthenticationScheme `json:"authenticationSchemes"`

	// The "bulk" configuration options.
	// Read Only: true
	Bulk *ScimServiceProviderConfigBulkFeature `json:"bulk,omitempty"`

	// The "changePassword" configuration options.
	// Read Only: true
	ChangePassword *ScimServiceProviderConfigSimpleFeature `json:"changePassword,omitempty"`

	// The HTTP-addressable URL that points to the service provider's documentation.
	// Read Only: true
	// Format: uri
	DocumentationURI strfmt.URI `json:"documentationUri,omitempty"`

	// The "etag" configuration options.
	// Read Only: true
	Etag *ScimServiceProviderConfigSimpleFeature `json:"etag,omitempty"`

	// The "filter" configuration options.
	// Read Only: true
	Filter *ScimServiceProviderConfigFilterFeature `json:"filter,omitempty"`

	// The metadata of the SCIM resource.
	// Read Only: true
	Meta *ScimMetadata `json:"meta,omitempty"`

	// The "patch" configuration options.
	// Read Only: true
	Patch *ScimServiceProviderConfigSimpleFeature `json:"patch,omitempty"`

	// The list of supported schemas.
	// Read Only: true
	Schemas []string `json:"schemas"`

	// The "sort" configuration options.
	// Read Only: true
	Sort *ScimServiceProviderConfigSimpleFeature `json:"sort,omitempty"`
}

// Validate validates this scim service provider config
func (m *ScimServiceProviderConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationSchemes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBulk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentationURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEtag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScimServiceProviderConfig) validateAuthenticationSchemes(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticationSchemes) { // not required
		return nil
	}

	for i := 0; i < len(m.AuthenticationSchemes); i++ {
		if swag.IsZero(m.AuthenticationSchemes[i]) { // not required
			continue
		}

		if m.AuthenticationSchemes[i] != nil {
			if err := m.AuthenticationSchemes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authenticationSchemes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("authenticationSchemes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScimServiceProviderConfig) validateBulk(formats strfmt.Registry) error {
	if swag.IsZero(m.Bulk) { // not required
		return nil
	}

	if m.Bulk != nil {
		if err := m.Bulk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bulk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bulk")
			}
			return err
		}
	}

	return nil
}

func (m *ScimServiceProviderConfig) validateChangePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.ChangePassword) { // not required
		return nil
	}

	if m.ChangePassword != nil {
		if err := m.ChangePassword.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changePassword")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changePassword")
			}
			return err
		}
	}

	return nil
}

func (m *ScimServiceProviderConfig) validateDocumentationURI(formats strfmt.Registry) error {
	if swag.IsZero(m.DocumentationURI) { // not required
		return nil
	}

	if err := validate.FormatOf("documentationUri", "body", "uri", m.DocumentationURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScimServiceProviderConfig) validateEtag(formats strfmt.Registry) error {
	if swag.IsZero(m.Etag) { // not required
		return nil
	}

	if m.Etag != nil {
		if err := m.Etag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("etag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("etag")
			}
			return err
		}
	}

	return nil
}

func (m *ScimServiceProviderConfig) validateFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.Filter) { // not required
		return nil
	}

	if m.Filter != nil {
		if err := m.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

func (m *ScimServiceProviderConfig) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

func (m *ScimServiceProviderConfig) validatePatch(formats strfmt.Registry) error {
	if swag.IsZero(m.Patch) { // not required
		return nil
	}

	if m.Patch != nil {
		if err := m.Patch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patch")
			}
			return err
		}
	}

	return nil
}

func (m *ScimServiceProviderConfig) validateSort(formats strfmt.Registry) error {
	if swag.IsZero(m.Sort) { // not required
		return nil
	}

	if m.Sort != nil {
		if err := m.Sort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sort")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sort")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this scim service provider config based on the context it is used
func (m *ScimServiceProviderConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthenticationSchemes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBulk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChangePassword(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDocumentationURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEtag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePatch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchemas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScimServiceProviderConfig) contextValidateAuthenticationSchemes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "authenticationSchemes", "body", []*ScimServiceProviderConfigAuthenticationScheme(m.AuthenticationSchemes)); err != nil {
		return err
	}

	for i := 0; i < len(m.AuthenticationSchemes); i++ {

		if m.AuthenticationSchemes[i] != nil {
			if err := m.AuthenticationSchemes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authenticationSchemes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("authenticationSchemes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScimServiceProviderConfig) contextValidateBulk(ctx context.Context, formats strfmt.Registry) error {

	if m.Bulk != nil {
		if err := m.Bulk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bulk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bulk")
			}
			return err
		}
	}

	return nil
}

func (m *ScimServiceProviderConfig) contextValidateChangePassword(ctx context.Context, formats strfmt.Registry) error {

	if m.ChangePassword != nil {
		if err := m.ChangePassword.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changePassword")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changePassword")
			}
			return err
		}
	}

	return nil
}

func (m *ScimServiceProviderConfig) contextValidateDocumentationURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "documentationUri", "body", strfmt.URI(m.DocumentationURI)); err != nil {
		return err
	}

	return nil
}

func (m *ScimServiceProviderConfig) contextValidateEtag(ctx context.Context, formats strfmt.Registry) error {

	if m.Etag != nil {
		if err := m.Etag.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("etag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("etag")
			}
			return err
		}
	}

	return nil
}

func (m *ScimServiceProviderConfig) contextValidateFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.Filter != nil {
		if err := m.Filter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

func (m *ScimServiceProviderConfig) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {
		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

func (m *ScimServiceProviderConfig) contextValidatePatch(ctx context.Context, formats strfmt.Registry) error {

	if m.Patch != nil {
		if err := m.Patch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patch")
			}
			return err
		}
	}

	return nil
}

func (m *ScimServiceProviderConfig) contextValidateSchemas(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "schemas", "body", []string(m.Schemas)); err != nil {
		return err
	}

	return nil
}

func (m *ScimServiceProviderConfig) contextValidateSort(ctx context.Context, formats strfmt.Registry) error {

	if m.Sort != nil {
		if err := m.Sort.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sort")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sort")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScimServiceProviderConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScimServiceProviderConfig) UnmarshalBinary(b []byte) error {
	var res ScimServiceProviderConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

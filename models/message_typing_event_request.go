// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MessageTypingEventRequest message typing event request
//
// swagger:model MessageTypingEventRequest
type MessageTypingEventRequest struct {

	// The time when the message typing event was sent. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateSent strfmt.DateTime `json:"dateSent,omitempty"`

	// Typing event
	// Required: true
	Typing *ConversationEventTyping `json:"typing"`
}

// Validate validates this message typing event request
func (m *MessageTypingEventRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateSent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTyping(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MessageTypingEventRequest) validateDateSent(formats strfmt.Registry) error {
	if swag.IsZero(m.DateSent) { // not required
		return nil
	}

	if err := validate.FormatOf("dateSent", "body", "date-time", m.DateSent.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MessageTypingEventRequest) validateTyping(formats strfmt.Registry) error {

	if err := validate.Required("typing", "body", m.Typing); err != nil {
		return err
	}

	if m.Typing != nil {
		if err := m.Typing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("typing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("typing")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this message typing event request based on the context it is used
func (m *MessageTypingEventRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTyping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MessageTypingEventRequest) contextValidateTyping(ctx context.Context, formats strfmt.Registry) error {

	if m.Typing != nil {
		if err := m.Typing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("typing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("typing")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MessageTypingEventRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MessageTypingEventRequest) UnmarshalBinary(b []byte) error {
	var res MessageTypingEventRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

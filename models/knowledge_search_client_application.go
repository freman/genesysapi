// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnowledgeSearchClientApplication knowledge search client application
//
// swagger:model KnowledgeSearchClientApplication
type KnowledgeSearchClientApplication struct {

	// Application details when type is Assistant.
	Assistant *AddressableEntityRef `json:"assistant,omitempty"`

	// Application details when type is BotFlow.
	BotFlow *AddressableEntityRef `json:"botFlow,omitempty"`

	// Application details when type is MessengerKnowledgeApp or SupportCenter.
	Deployment *AddressableEntityRef `json:"deployment,omitempty"`

	// Application type.
	// Required: true
	// Enum: [Assistant BotFlow MessengerKnowledgeApp SmartAdvisor SupportCenter]
	Type *string `json:"type"`
}

// Validate validates this knowledge search client application
func (m *KnowledgeSearchClientApplication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssistant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBotFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeSearchClientApplication) validateAssistant(formats strfmt.Registry) error {
	if swag.IsZero(m.Assistant) { // not required
		return nil
	}

	if m.Assistant != nil {
		if err := m.Assistant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assistant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assistant")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeSearchClientApplication) validateBotFlow(formats strfmt.Registry) error {
	if swag.IsZero(m.BotFlow) { // not required
		return nil
	}

	if m.BotFlow != nil {
		if err := m.BotFlow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("botFlow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("botFlow")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeSearchClientApplication) validateDeployment(formats strfmt.Registry) error {
	if swag.IsZero(m.Deployment) { // not required
		return nil
	}

	if m.Deployment != nil {
		if err := m.Deployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployment")
			}
			return err
		}
	}

	return nil
}

var knowledgeSearchClientApplicationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Assistant","BotFlow","MessengerKnowledgeApp","SmartAdvisor","SupportCenter"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		knowledgeSearchClientApplicationTypeTypePropEnum = append(knowledgeSearchClientApplicationTypeTypePropEnum, v)
	}
}

const (

	// KnowledgeSearchClientApplicationTypeAssistant captures enum value "Assistant"
	KnowledgeSearchClientApplicationTypeAssistant string = "Assistant"

	// KnowledgeSearchClientApplicationTypeBotFlow captures enum value "BotFlow"
	KnowledgeSearchClientApplicationTypeBotFlow string = "BotFlow"

	// KnowledgeSearchClientApplicationTypeMessengerKnowledgeApp captures enum value "MessengerKnowledgeApp"
	KnowledgeSearchClientApplicationTypeMessengerKnowledgeApp string = "MessengerKnowledgeApp"

	// KnowledgeSearchClientApplicationTypeSmartAdvisor captures enum value "SmartAdvisor"
	KnowledgeSearchClientApplicationTypeSmartAdvisor string = "SmartAdvisor"

	// KnowledgeSearchClientApplicationTypeSupportCenter captures enum value "SupportCenter"
	KnowledgeSearchClientApplicationTypeSupportCenter string = "SupportCenter"
)

// prop value enum
func (m *KnowledgeSearchClientApplication) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, knowledgeSearchClientApplicationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KnowledgeSearchClientApplication) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this knowledge search client application based on the context it is used
func (m *KnowledgeSearchClientApplication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssistant(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBotFlow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeSearchClientApplication) contextValidateAssistant(ctx context.Context, formats strfmt.Registry) error {

	if m.Assistant != nil {
		if err := m.Assistant.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assistant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assistant")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeSearchClientApplication) contextValidateBotFlow(ctx context.Context, formats strfmt.Registry) error {

	if m.BotFlow != nil {
		if err := m.BotFlow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("botFlow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("botFlow")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeSearchClientApplication) contextValidateDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.Deployment != nil {
		if err := m.Deployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KnowledgeSearchClientApplication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnowledgeSearchClientApplication) UnmarshalBinary(b []byte) error {
	var res KnowledgeSearchClientApplication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

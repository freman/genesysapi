// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GeneralProgramJobRequest general program job request
//
// swagger:model GeneralProgramJobRequest
type GeneralProgramJobRequest struct {

	// The dialect of the topics to link with the general program, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard
	// Required: true
	// Enum: [en-US es-US en-AU en-GB en-ZA es-ES en-IN fr-FR fr-CA it-IT de-DE pt-BR pl-PL pt-PT nl-NL ko-KR ja-JP]
	Dialect *string `json:"dialect"`

	// The mode to use for the general program job, default value is Skip
	// Enum: [Skip Merge]
	Mode string `json:"mode,omitempty"`
}

// Validate validates this general program job request
func (m *GeneralProgramJobRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDialect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var generalProgramJobRequestTypeDialectPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["en-US","es-US","en-AU","en-GB","en-ZA","es-ES","en-IN","fr-FR","fr-CA","it-IT","de-DE","pt-BR","pl-PL","pt-PT","nl-NL","ko-KR","ja-JP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		generalProgramJobRequestTypeDialectPropEnum = append(generalProgramJobRequestTypeDialectPropEnum, v)
	}
}

const (

	// GeneralProgramJobRequestDialectEnDashUS captures enum value "en-US"
	GeneralProgramJobRequestDialectEnDashUS string = "en-US"

	// GeneralProgramJobRequestDialectEsDashUS captures enum value "es-US"
	GeneralProgramJobRequestDialectEsDashUS string = "es-US"

	// GeneralProgramJobRequestDialectEnDashAU captures enum value "en-AU"
	GeneralProgramJobRequestDialectEnDashAU string = "en-AU"

	// GeneralProgramJobRequestDialectEnDashGB captures enum value "en-GB"
	GeneralProgramJobRequestDialectEnDashGB string = "en-GB"

	// GeneralProgramJobRequestDialectEnDashZA captures enum value "en-ZA"
	GeneralProgramJobRequestDialectEnDashZA string = "en-ZA"

	// GeneralProgramJobRequestDialectEsDashES captures enum value "es-ES"
	GeneralProgramJobRequestDialectEsDashES string = "es-ES"

	// GeneralProgramJobRequestDialectEnDashIN captures enum value "en-IN"
	GeneralProgramJobRequestDialectEnDashIN string = "en-IN"

	// GeneralProgramJobRequestDialectFrDashFR captures enum value "fr-FR"
	GeneralProgramJobRequestDialectFrDashFR string = "fr-FR"

	// GeneralProgramJobRequestDialectFrDashCA captures enum value "fr-CA"
	GeneralProgramJobRequestDialectFrDashCA string = "fr-CA"

	// GeneralProgramJobRequestDialectItDashIT captures enum value "it-IT"
	GeneralProgramJobRequestDialectItDashIT string = "it-IT"

	// GeneralProgramJobRequestDialectDeDashDE captures enum value "de-DE"
	GeneralProgramJobRequestDialectDeDashDE string = "de-DE"

	// GeneralProgramJobRequestDialectPtDashBR captures enum value "pt-BR"
	GeneralProgramJobRequestDialectPtDashBR string = "pt-BR"

	// GeneralProgramJobRequestDialectPlDashPL captures enum value "pl-PL"
	GeneralProgramJobRequestDialectPlDashPL string = "pl-PL"

	// GeneralProgramJobRequestDialectPtDashPT captures enum value "pt-PT"
	GeneralProgramJobRequestDialectPtDashPT string = "pt-PT"

	// GeneralProgramJobRequestDialectNlDashNL captures enum value "nl-NL"
	GeneralProgramJobRequestDialectNlDashNL string = "nl-NL"

	// GeneralProgramJobRequestDialectKoDashKR captures enum value "ko-KR"
	GeneralProgramJobRequestDialectKoDashKR string = "ko-KR"

	// GeneralProgramJobRequestDialectJaDashJP captures enum value "ja-JP"
	GeneralProgramJobRequestDialectJaDashJP string = "ja-JP"
)

// prop value enum
func (m *GeneralProgramJobRequest) validateDialectEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, generalProgramJobRequestTypeDialectPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GeneralProgramJobRequest) validateDialect(formats strfmt.Registry) error {

	if err := validate.Required("dialect", "body", m.Dialect); err != nil {
		return err
	}

	// value enum
	if err := m.validateDialectEnum("dialect", "body", *m.Dialect); err != nil {
		return err
	}

	return nil
}

var generalProgramJobRequestTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Skip","Merge"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		generalProgramJobRequestTypeModePropEnum = append(generalProgramJobRequestTypeModePropEnum, v)
	}
}

const (

	// GeneralProgramJobRequestModeSkip captures enum value "Skip"
	GeneralProgramJobRequestModeSkip string = "Skip"

	// GeneralProgramJobRequestModeMerge captures enum value "Merge"
	GeneralProgramJobRequestModeMerge string = "Merge"
)

// prop value enum
func (m *GeneralProgramJobRequest) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, generalProgramJobRequestTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GeneralProgramJobRequest) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this general program job request based on context it is used
func (m *GeneralProgramJobRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GeneralProgramJobRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GeneralProgramJobRequest) UnmarshalBinary(b []byte) error {
	var res GeneralProgramJobRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrganizationPresenceDefinition organization presence definition
//
// swagger:model OrganizationPresenceDefinition
type OrganizationPresenceDefinition struct {

	// deactivated
	Deactivated bool `json:"deactivated"`

	// division Id
	DivisionID string `json:"divisionId,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The label used for the definition in each specified language
	// Required: true
	LanguageLabels map[string]string `json:"languageLabels"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// system presence
	// Enum: [Available Away Busy Offline Idle OnQueue Meal Training Meeting Break]
	SystemPresence string `json:"systemPresence,omitempty"`

	// The type of definition
	// Enum: [System User]
	Type string `json:"type,omitempty"`
}

// Validate validates this organization presence definition
func (m *OrganizationPresenceDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLanguageLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemPresence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationPresenceDefinition) validateLanguageLabels(formats strfmt.Registry) error {

	if err := validate.Required("languageLabels", "body", m.LanguageLabels); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationPresenceDefinition) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var organizationPresenceDefinitionTypeSystemPresencePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Available","Away","Busy","Offline","Idle","OnQueue","Meal","Training","Meeting","Break"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		organizationPresenceDefinitionTypeSystemPresencePropEnum = append(organizationPresenceDefinitionTypeSystemPresencePropEnum, v)
	}
}

const (

	// OrganizationPresenceDefinitionSystemPresenceAvailable captures enum value "Available"
	OrganizationPresenceDefinitionSystemPresenceAvailable string = "Available"

	// OrganizationPresenceDefinitionSystemPresenceAway captures enum value "Away"
	OrganizationPresenceDefinitionSystemPresenceAway string = "Away"

	// OrganizationPresenceDefinitionSystemPresenceBusy captures enum value "Busy"
	OrganizationPresenceDefinitionSystemPresenceBusy string = "Busy"

	// OrganizationPresenceDefinitionSystemPresenceOffline captures enum value "Offline"
	OrganizationPresenceDefinitionSystemPresenceOffline string = "Offline"

	// OrganizationPresenceDefinitionSystemPresenceIdle captures enum value "Idle"
	OrganizationPresenceDefinitionSystemPresenceIdle string = "Idle"

	// OrganizationPresenceDefinitionSystemPresenceOnQueue captures enum value "OnQueue"
	OrganizationPresenceDefinitionSystemPresenceOnQueue string = "OnQueue"

	// OrganizationPresenceDefinitionSystemPresenceMeal captures enum value "Meal"
	OrganizationPresenceDefinitionSystemPresenceMeal string = "Meal"

	// OrganizationPresenceDefinitionSystemPresenceTraining captures enum value "Training"
	OrganizationPresenceDefinitionSystemPresenceTraining string = "Training"

	// OrganizationPresenceDefinitionSystemPresenceMeeting captures enum value "Meeting"
	OrganizationPresenceDefinitionSystemPresenceMeeting string = "Meeting"

	// OrganizationPresenceDefinitionSystemPresenceBreak captures enum value "Break"
	OrganizationPresenceDefinitionSystemPresenceBreak string = "Break"
)

// prop value enum
func (m *OrganizationPresenceDefinition) validateSystemPresenceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, organizationPresenceDefinitionTypeSystemPresencePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrganizationPresenceDefinition) validateSystemPresence(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemPresence) { // not required
		return nil
	}

	// value enum
	if err := m.validateSystemPresenceEnum("systemPresence", "body", m.SystemPresence); err != nil {
		return err
	}

	return nil
}

var organizationPresenceDefinitionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["System","User"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		organizationPresenceDefinitionTypeTypePropEnum = append(organizationPresenceDefinitionTypeTypePropEnum, v)
	}
}

const (

	// OrganizationPresenceDefinitionTypeSystem captures enum value "System"
	OrganizationPresenceDefinitionTypeSystem string = "System"

	// OrganizationPresenceDefinitionTypeUser captures enum value "User"
	OrganizationPresenceDefinitionTypeUser string = "User"
)

// prop value enum
func (m *OrganizationPresenceDefinition) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, organizationPresenceDefinitionTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrganizationPresenceDefinition) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this organization presence definition based on the context it is used
func (m *OrganizationPresenceDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationPresenceDefinition) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationPresenceDefinition) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationPresenceDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationPresenceDefinition) UnmarshalBinary(b []byte) error {
	var res OrganizationPresenceDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

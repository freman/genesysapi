// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CallHistoryParticipant call history participant
//
// swagger:model CallHistoryParticipant
type CallHistoryParticipant struct {

	// The participant address.
	Address string `json:"address,omitempty"`

	// The call ANI.
	Ani string `json:"ani,omitempty"`

	// Indicates whether the contact ever connected
	DidInteract bool `json:"didInteract,omitempty"`

	// The participant's direction.  Values can be: 'inbound' or 'outbound'
	// Enum: [inbound outbound]
	Direction string `json:"direction,omitempty"`

	// The reason the participant was disconnected from the conversation.
	// Enum: [endpoint client system transfer transfer.conference transfer.consult transfer.forward transfer.noanswer transfer.notavailable transport.failure error peer other spam]
	DisconnectType string `json:"disconnectType,omitempty"`

	// The call DNIS.
	Dnis string `json:"dnis,omitempty"`

	// The time when this participant went disconnected for this media (eg: video disconnected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// The PureCloud external contact
	ExternalContact *ExternalContact `json:"externalContact,omitempty"`

	// The PureCloud external organization
	ExternalOrganization *ExternalOrganization `json:"externalOrganization,omitempty"`

	// The reason specifying why participant flagged the conversation.
	// Enum: [general]
	FlaggedReason string `json:"flaggedReason,omitempty"`

	// The group involved in the group ring call.
	Group *Group `json:"group,omitempty"`

	// The unique participant ID.
	ID string `json:"id,omitempty"`

	// The display friendly name of the participant.
	Name string `json:"name,omitempty"`

	// The outbound campaign associated with the participant
	OutboundCampaign *Campaign `json:"outboundCampaign,omitempty"`

	// The participant's purpose.  Values can be: 'agent', 'user', 'customer', 'external', 'acd', 'ivr
	Purpose string `json:"purpose,omitempty"`

	// The PureCloud queue for this participant.
	Queue *Queue `json:"queue,omitempty"`

	// Indicates SIP Response codes associated with the participant
	SipResponseCodes []int64 `json:"sipResponseCodes"`

	// The time when this participant first joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// The PureCloud user for this participant.
	User *User `json:"user,omitempty"`
}

// Validate validates this call history participant
func (m *CallHistoryParticipant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisconnectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlaggedReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutboundCampaign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var callHistoryParticipantTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["inbound","outbound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callHistoryParticipantTypeDirectionPropEnum = append(callHistoryParticipantTypeDirectionPropEnum, v)
	}
}

const (

	// CallHistoryParticipantDirectionInbound captures enum value "inbound"
	CallHistoryParticipantDirectionInbound string = "inbound"

	// CallHistoryParticipantDirectionOutbound captures enum value "outbound"
	CallHistoryParticipantDirectionOutbound string = "outbound"
)

// prop value enum
func (m *CallHistoryParticipant) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, callHistoryParticipantTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CallHistoryParticipant) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

var callHistoryParticipantTypeDisconnectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["endpoint","client","system","transfer","transfer.conference","transfer.consult","transfer.forward","transfer.noanswer","transfer.notavailable","transport.failure","error","peer","other","spam"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callHistoryParticipantTypeDisconnectTypePropEnum = append(callHistoryParticipantTypeDisconnectTypePropEnum, v)
	}
}

const (

	// CallHistoryParticipantDisconnectTypeEndpoint captures enum value "endpoint"
	CallHistoryParticipantDisconnectTypeEndpoint string = "endpoint"

	// CallHistoryParticipantDisconnectTypeClient captures enum value "client"
	CallHistoryParticipantDisconnectTypeClient string = "client"

	// CallHistoryParticipantDisconnectTypeSystem captures enum value "system"
	CallHistoryParticipantDisconnectTypeSystem string = "system"

	// CallHistoryParticipantDisconnectTypeTransfer captures enum value "transfer"
	CallHistoryParticipantDisconnectTypeTransfer string = "transfer"

	// CallHistoryParticipantDisconnectTypeTransferConference captures enum value "transfer.conference"
	CallHistoryParticipantDisconnectTypeTransferConference string = "transfer.conference"

	// CallHistoryParticipantDisconnectTypeTransferConsult captures enum value "transfer.consult"
	CallHistoryParticipantDisconnectTypeTransferConsult string = "transfer.consult"

	// CallHistoryParticipantDisconnectTypeTransferForward captures enum value "transfer.forward"
	CallHistoryParticipantDisconnectTypeTransferForward string = "transfer.forward"

	// CallHistoryParticipantDisconnectTypeTransferNoanswer captures enum value "transfer.noanswer"
	CallHistoryParticipantDisconnectTypeTransferNoanswer string = "transfer.noanswer"

	// CallHistoryParticipantDisconnectTypeTransferNotavailable captures enum value "transfer.notavailable"
	CallHistoryParticipantDisconnectTypeTransferNotavailable string = "transfer.notavailable"

	// CallHistoryParticipantDisconnectTypeTransportFailure captures enum value "transport.failure"
	CallHistoryParticipantDisconnectTypeTransportFailure string = "transport.failure"

	// CallHistoryParticipantDisconnectTypeError captures enum value "error"
	CallHistoryParticipantDisconnectTypeError string = "error"

	// CallHistoryParticipantDisconnectTypePeer captures enum value "peer"
	CallHistoryParticipantDisconnectTypePeer string = "peer"

	// CallHistoryParticipantDisconnectTypeOther captures enum value "other"
	CallHistoryParticipantDisconnectTypeOther string = "other"

	// CallHistoryParticipantDisconnectTypeSpam captures enum value "spam"
	CallHistoryParticipantDisconnectTypeSpam string = "spam"
)

// prop value enum
func (m *CallHistoryParticipant) validateDisconnectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, callHistoryParticipantTypeDisconnectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CallHistoryParticipant) validateDisconnectType(formats strfmt.Registry) error {

	if swag.IsZero(m.DisconnectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDisconnectTypeEnum("disconnectType", "body", m.DisconnectType); err != nil {
		return err
	}

	return nil
}

func (m *CallHistoryParticipant) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CallHistoryParticipant) validateExternalContact(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalContact) { // not required
		return nil
	}

	if m.ExternalContact != nil {
		if err := m.ExternalContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalContact")
			}
			return err
		}
	}

	return nil
}

func (m *CallHistoryParticipant) validateExternalOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalOrganization) { // not required
		return nil
	}

	if m.ExternalOrganization != nil {
		if err := m.ExternalOrganization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalOrganization")
			}
			return err
		}
	}

	return nil
}

var callHistoryParticipantTypeFlaggedReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["general"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callHistoryParticipantTypeFlaggedReasonPropEnum = append(callHistoryParticipantTypeFlaggedReasonPropEnum, v)
	}
}

const (

	// CallHistoryParticipantFlaggedReasonGeneral captures enum value "general"
	CallHistoryParticipantFlaggedReasonGeneral string = "general"
)

// prop value enum
func (m *CallHistoryParticipant) validateFlaggedReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, callHistoryParticipantTypeFlaggedReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CallHistoryParticipant) validateFlaggedReason(formats strfmt.Registry) error {

	if swag.IsZero(m.FlaggedReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlaggedReasonEnum("flaggedReason", "body", m.FlaggedReason); err != nil {
		return err
	}

	return nil
}

func (m *CallHistoryParticipant) validateGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if m.Group != nil {
		if err := m.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (m *CallHistoryParticipant) validateOutboundCampaign(formats strfmt.Registry) error {

	if swag.IsZero(m.OutboundCampaign) { // not required
		return nil
	}

	if m.OutboundCampaign != nil {
		if err := m.OutboundCampaign.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outboundCampaign")
			}
			return err
		}
	}

	return nil
}

func (m *CallHistoryParticipant) validateQueue(formats strfmt.Registry) error {

	if swag.IsZero(m.Queue) { // not required
		return nil
	}

	if m.Queue != nil {
		if err := m.Queue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

func (m *CallHistoryParticipant) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CallHistoryParticipant) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CallHistoryParticipant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CallHistoryParticipant) UnmarshalBinary(b []byte) error {
	var res CallHistoryParticipant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

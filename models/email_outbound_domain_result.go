// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmailOutboundDomainResult email outbound domain result
//
// swagger:model EmailOutboundDomainResult
type EmailOutboundDomainResult struct {

	// dns cname bounce record
	DNSCnameBounceRecord *DNSRecordEntry `json:"dnsCnameBounceRecord,omitempty"`

	// dns txt sending record
	DNSTxtSendingRecord *DNSRecordEntry `json:"dnsTxtSendingRecord,omitempty"`

	// domain name
	DomainName string `json:"domainName,omitempty"`

	// sender status
	// Enum: [RequestReceived ProvisionRequestSentVendor Provisioned Error Deprovisioned]
	SenderStatus string `json:"senderStatus,omitempty"`

	// sender type
	// Enum: [Unknown EmailDomain MockEmailDomain]
	SenderType string `json:"senderType,omitempty"`
}

// Validate validates this email outbound domain result
func (m *EmailOutboundDomainResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDNSCnameBounceRecord(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSTxtSendingRecord(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSenderStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSenderType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmailOutboundDomainResult) validateDNSCnameBounceRecord(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSCnameBounceRecord) { // not required
		return nil
	}

	if m.DNSCnameBounceRecord != nil {
		if err := m.DNSCnameBounceRecord.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnsCnameBounceRecord")
			}
			return err
		}
	}

	return nil
}

func (m *EmailOutboundDomainResult) validateDNSTxtSendingRecord(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSTxtSendingRecord) { // not required
		return nil
	}

	if m.DNSTxtSendingRecord != nil {
		if err := m.DNSTxtSendingRecord.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnsTxtSendingRecord")
			}
			return err
		}
	}

	return nil
}

var emailOutboundDomainResultTypeSenderStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RequestReceived","ProvisionRequestSentVendor","Provisioned","Error","Deprovisioned"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		emailOutboundDomainResultTypeSenderStatusPropEnum = append(emailOutboundDomainResultTypeSenderStatusPropEnum, v)
	}
}

const (

	// EmailOutboundDomainResultSenderStatusRequestReceived captures enum value "RequestReceived"
	EmailOutboundDomainResultSenderStatusRequestReceived string = "RequestReceived"

	// EmailOutboundDomainResultSenderStatusProvisionRequestSentVendor captures enum value "ProvisionRequestSentVendor"
	EmailOutboundDomainResultSenderStatusProvisionRequestSentVendor string = "ProvisionRequestSentVendor"

	// EmailOutboundDomainResultSenderStatusProvisioned captures enum value "Provisioned"
	EmailOutboundDomainResultSenderStatusProvisioned string = "Provisioned"

	// EmailOutboundDomainResultSenderStatusError captures enum value "Error"
	EmailOutboundDomainResultSenderStatusError string = "Error"

	// EmailOutboundDomainResultSenderStatusDeprovisioned captures enum value "Deprovisioned"
	EmailOutboundDomainResultSenderStatusDeprovisioned string = "Deprovisioned"
)

// prop value enum
func (m *EmailOutboundDomainResult) validateSenderStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, emailOutboundDomainResultTypeSenderStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EmailOutboundDomainResult) validateSenderStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.SenderStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateSenderStatusEnum("senderStatus", "body", m.SenderStatus); err != nil {
		return err
	}

	return nil
}

var emailOutboundDomainResultTypeSenderTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","EmailDomain","MockEmailDomain"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		emailOutboundDomainResultTypeSenderTypePropEnum = append(emailOutboundDomainResultTypeSenderTypePropEnum, v)
	}
}

const (

	// EmailOutboundDomainResultSenderTypeUnknown captures enum value "Unknown"
	EmailOutboundDomainResultSenderTypeUnknown string = "Unknown"

	// EmailOutboundDomainResultSenderTypeEmailDomain captures enum value "EmailDomain"
	EmailOutboundDomainResultSenderTypeEmailDomain string = "EmailDomain"

	// EmailOutboundDomainResultSenderTypeMockEmailDomain captures enum value "MockEmailDomain"
	EmailOutboundDomainResultSenderTypeMockEmailDomain string = "MockEmailDomain"
)

// prop value enum
func (m *EmailOutboundDomainResult) validateSenderTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, emailOutboundDomainResultTypeSenderTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EmailOutboundDomainResult) validateSenderType(formats strfmt.Registry) error {

	if swag.IsZero(m.SenderType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSenderTypeEnum("senderType", "body", m.SenderType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmailOutboundDomainResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmailOutboundDomainResult) UnmarshalBinary(b []byte) error {
	var res EmailOutboundDomainResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

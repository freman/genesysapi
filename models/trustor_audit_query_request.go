// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrustorAuditQueryRequest trustor audit query request
//
// swagger:model TrustorAuditQueryRequest
type TrustorAuditQueryRequest struct {

	// Ending date/time for the audit search. ISO-8601 formatted date-time, UTC.
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// Facet information to be returned with the query results.
	Facets []*Facet `json:"facets"`

	// Additional custom filters to be applied to the query.
	Filters []*Filter `json:"filters"`

	// Word or phrase to look for in audit bodies.
	QueryPhrase string `json:"queryPhrase,omitempty"`

	// Starting date/time for the audit search. ISO-8601 formatted date-time, UTC.
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// Limit returned audits to these trustee userIds.
	// Required: true
	TrusteeUserIds []string `json:"trusteeUserIds"`

	// Limit returned audits to this trustor organizationId.
	// Required: true
	TrustorOrganizationID *string `json:"trustorOrganizationId"`
}

// Validate validates this trustor audit query request
func (m *TrustorAuditQueryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFacets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrusteeUserIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrustorOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrustorAuditQueryRequest) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TrustorAuditQueryRequest) validateFacets(formats strfmt.Registry) error {
	if swag.IsZero(m.Facets) { // not required
		return nil
	}

	for i := 0; i < len(m.Facets); i++ {
		if swag.IsZero(m.Facets[i]) { // not required
			continue
		}

		if m.Facets[i] != nil {
			if err := m.Facets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("facets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("facets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TrustorAuditQueryRequest) validateFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.Filters) { // not required
		return nil
	}

	for i := 0; i < len(m.Filters); i++ {
		if swag.IsZero(m.Filters[i]) { // not required
			continue
		}

		if m.Filters[i] != nil {
			if err := m.Filters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TrustorAuditQueryRequest) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TrustorAuditQueryRequest) validateTrusteeUserIds(formats strfmt.Registry) error {

	if err := validate.Required("trusteeUserIds", "body", m.TrusteeUserIds); err != nil {
		return err
	}

	return nil
}

func (m *TrustorAuditQueryRequest) validateTrustorOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("trustorOrganizationId", "body", m.TrustorOrganizationID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this trustor audit query request based on the context it is used
func (m *TrustorAuditQueryRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFacets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrustorAuditQueryRequest) contextValidateFacets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Facets); i++ {

		if m.Facets[i] != nil {
			if err := m.Facets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("facets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("facets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TrustorAuditQueryRequest) contextValidateFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Filters); i++ {

		if m.Filters[i] != nil {
			if err := m.Filters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrustorAuditQueryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrustorAuditQueryRequest) UnmarshalBinary(b []byte) error {
	var res TrustorAuditQueryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

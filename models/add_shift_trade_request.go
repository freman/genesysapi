// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddShiftTradeRequest add shift trade request
//
// swagger:model AddShiftTradeRequest
type AddShiftTradeRequest struct {

	// acceptable intervals
	AcceptableIntervals []string `json:"acceptableIntervals"`

	// When this shift trade request should expire. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	Expiration strfmt.DateTime `json:"expiration,omitempty"`

	// The ID of the shift that the initiating user wants to give up
	// Required: true
	InitiatingShiftID *string `json:"initiatingShiftId"`

	// The ID of the user to whom to send the request (for use in direct trade requests)
	ReceivingUserID string `json:"receivingUserId,omitempty"`

	// The ID of the schedule to which the initiating and receiving shifts belong
	// Required: true
	ScheduleID *string `json:"scheduleId"`
}

// Validate validates this add shift trade request
func (m *AddShiftTradeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatingShiftID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddShiftTradeRequest) validateExpiration(formats strfmt.Registry) error {

	if swag.IsZero(m.Expiration) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration", "body", "date-time", m.Expiration.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AddShiftTradeRequest) validateInitiatingShiftID(formats strfmt.Registry) error {

	if err := validate.Required("initiatingShiftId", "body", m.InitiatingShiftID); err != nil {
		return err
	}

	return nil
}

func (m *AddShiftTradeRequest) validateScheduleID(formats strfmt.Registry) error {

	if err := validate.Required("scheduleId", "body", m.ScheduleID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddShiftTradeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddShiftTradeRequest) UnmarshalBinary(b []byte) error {
	var res AddShiftTradeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

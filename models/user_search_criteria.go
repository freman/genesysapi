// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserSearchCriteria user search criteria
//
// swagger:model UserSearchCriteria
type UserSearchCriteria struct {

	// The end value of the range. This field is used for range search types.
	EndValue string `json:"endValue,omitempty"`

	// Field names to search against
	Fields []string `json:"fields"`

	// Groups multiple conditions
	Group []*UserSearchCriteria `json:"group"`

	// How to apply this search criteria against other criteria
	// Enum: [AND OR NOT]
	Operator string `json:"operator,omitempty"`

	// The start value of the range. This field is used for range search types.
	StartValue string `json:"startValue,omitempty"`

	// Search Type
	// Required: true
	// Enum: [EXACT STARTS_WITH CONTAINS REGEX TERM TERMS REQUIRED_FIELDS MATCH_ALL QUERY_STRING]
	Type *string `json:"type"`

	// A value for the search to match against
	Value string `json:"value,omitempty"`

	// A list of values for the search to match against
	Values []string `json:"values"`
}

// Validate validates this user search criteria
func (m *UserSearchCriteria) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserSearchCriteria) validateGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.Group) { // not required
		return nil
	}

	for i := 0; i < len(m.Group); i++ {
		if swag.IsZero(m.Group[i]) { // not required
			continue
		}

		if m.Group[i] != nil {
			if err := m.Group[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("group" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var userSearchCriteriaTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AND","OR","NOT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userSearchCriteriaTypeOperatorPropEnum = append(userSearchCriteriaTypeOperatorPropEnum, v)
	}
}

const (

	// UserSearchCriteriaOperatorAND captures enum value "AND"
	UserSearchCriteriaOperatorAND string = "AND"

	// UserSearchCriteriaOperatorOR captures enum value "OR"
	UserSearchCriteriaOperatorOR string = "OR"

	// UserSearchCriteriaOperatorNOT captures enum value "NOT"
	UserSearchCriteriaOperatorNOT string = "NOT"
)

// prop value enum
func (m *UserSearchCriteria) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userSearchCriteriaTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserSearchCriteria) validateOperator(formats strfmt.Registry) error {

	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

var userSearchCriteriaTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EXACT","STARTS_WITH","CONTAINS","REGEX","TERM","TERMS","REQUIRED_FIELDS","MATCH_ALL","QUERY_STRING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userSearchCriteriaTypeTypePropEnum = append(userSearchCriteriaTypeTypePropEnum, v)
	}
}

const (

	// UserSearchCriteriaTypeEXACT captures enum value "EXACT"
	UserSearchCriteriaTypeEXACT string = "EXACT"

	// UserSearchCriteriaTypeSTARTSWITH captures enum value "STARTS_WITH"
	UserSearchCriteriaTypeSTARTSWITH string = "STARTS_WITH"

	// UserSearchCriteriaTypeCONTAINS captures enum value "CONTAINS"
	UserSearchCriteriaTypeCONTAINS string = "CONTAINS"

	// UserSearchCriteriaTypeREGEX captures enum value "REGEX"
	UserSearchCriteriaTypeREGEX string = "REGEX"

	// UserSearchCriteriaTypeTERM captures enum value "TERM"
	UserSearchCriteriaTypeTERM string = "TERM"

	// UserSearchCriteriaTypeTERMS captures enum value "TERMS"
	UserSearchCriteriaTypeTERMS string = "TERMS"

	// UserSearchCriteriaTypeREQUIREDFIELDS captures enum value "REQUIRED_FIELDS"
	UserSearchCriteriaTypeREQUIREDFIELDS string = "REQUIRED_FIELDS"

	// UserSearchCriteriaTypeMATCHALL captures enum value "MATCH_ALL"
	UserSearchCriteriaTypeMATCHALL string = "MATCH_ALL"

	// UserSearchCriteriaTypeQUERYSTRING captures enum value "QUERY_STRING"
	UserSearchCriteriaTypeQUERYSTRING string = "QUERY_STRING"
)

// prop value enum
func (m *UserSearchCriteria) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userSearchCriteriaTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserSearchCriteria) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserSearchCriteria) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserSearchCriteria) UnmarshalBinary(b []byte) error {
	var res UserSearchCriteria
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

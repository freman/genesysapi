// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeOffRequestNotification time off request notification
//
// swagger:model TimeOffRequestNotification
type TimeOffRequestNotification struct {

	// A set of dates in yyyy-MM-dd format.  Should be interpreted in the management unit's configured time zone.  Will be not empty if isFullDayRequest == true
	FullDayManagementUnitDates []string `json:"fullDayManagementUnitDates"`

	// Whether this is a full day request (false means partial day)
	IsFullDayRequest bool `json:"isFullDayRequest"`

	// A set of start date-times in ISO-8601 format for partial day requests.  Will be not empty if isFullDayRequest == false
	PartialDayStartDateTimes []strfmt.DateTime `json:"partialDayStartDateTimes"`

	// The status of this time off request
	// Enum: [PENDING APPROVED DENIED CANCELED]
	Status string `json:"status,omitempty"`

	// The ID of this time off request
	TimeOffRequestID string `json:"timeOffRequestId,omitempty"`

	// The user associated with this time off request
	User *UserReference `json:"user,omitempty"`
}

// Validate validates this time off request notification
func (m *TimeOffRequestNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePartialDayStartDateTimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeOffRequestNotification) validatePartialDayStartDateTimes(formats strfmt.Registry) error {
	if swag.IsZero(m.PartialDayStartDateTimes) { // not required
		return nil
	}

	for i := 0; i < len(m.PartialDayStartDateTimes); i++ {

		if err := validate.FormatOf("partialDayStartDateTimes"+"."+strconv.Itoa(i), "body", "date-time", m.PartialDayStartDateTimes[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

var timeOffRequestNotificationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING","APPROVED","DENIED","CANCELED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeOffRequestNotificationTypeStatusPropEnum = append(timeOffRequestNotificationTypeStatusPropEnum, v)
	}
}

const (

	// TimeOffRequestNotificationStatusPENDING captures enum value "PENDING"
	TimeOffRequestNotificationStatusPENDING string = "PENDING"

	// TimeOffRequestNotificationStatusAPPROVED captures enum value "APPROVED"
	TimeOffRequestNotificationStatusAPPROVED string = "APPROVED"

	// TimeOffRequestNotificationStatusDENIED captures enum value "DENIED"
	TimeOffRequestNotificationStatusDENIED string = "DENIED"

	// TimeOffRequestNotificationStatusCANCELED captures enum value "CANCELED"
	TimeOffRequestNotificationStatusCANCELED string = "CANCELED"
)

// prop value enum
func (m *TimeOffRequestNotification) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, timeOffRequestNotificationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TimeOffRequestNotification) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *TimeOffRequestNotification) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this time off request notification based on the context it is used
func (m *TimeOffRequestNotification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeOffRequestNotification) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeOffRequestNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeOffRequestNotification) UnmarshalBinary(b []byte) error {
	var res TimeOffRequestNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

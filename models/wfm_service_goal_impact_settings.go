// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WfmServiceGoalImpactSettings wfm service goal impact settings
//
// swagger:model WfmServiceGoalImpactSettings
type WfmServiceGoalImpactSettings struct {

	// Allowed abandon rate percent increase and decrease
	// Required: true
	AbandonRate *WfmServiceGoalImpact `json:"abandonRate"`

	// Allowed average speed of answer percent increase and decrease
	// Required: true
	AverageSpeedOfAnswer *WfmServiceGoalImpact `json:"averageSpeedOfAnswer"`

	// Allowed service level percent increase and decrease
	// Required: true
	ServiceLevel *WfmServiceGoalImpact `json:"serviceLevel"`
}

// Validate validates this wfm service goal impact settings
func (m *WfmServiceGoalImpactSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbandonRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAverageSpeedOfAnswer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WfmServiceGoalImpactSettings) validateAbandonRate(formats strfmt.Registry) error {

	if err := validate.Required("abandonRate", "body", m.AbandonRate); err != nil {
		return err
	}

	if m.AbandonRate != nil {
		if err := m.AbandonRate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("abandonRate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("abandonRate")
			}
			return err
		}
	}

	return nil
}

func (m *WfmServiceGoalImpactSettings) validateAverageSpeedOfAnswer(formats strfmt.Registry) error {

	if err := validate.Required("averageSpeedOfAnswer", "body", m.AverageSpeedOfAnswer); err != nil {
		return err
	}

	if m.AverageSpeedOfAnswer != nil {
		if err := m.AverageSpeedOfAnswer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("averageSpeedOfAnswer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("averageSpeedOfAnswer")
			}
			return err
		}
	}

	return nil
}

func (m *WfmServiceGoalImpactSettings) validateServiceLevel(formats strfmt.Registry) error {

	if err := validate.Required("serviceLevel", "body", m.ServiceLevel); err != nil {
		return err
	}

	if m.ServiceLevel != nil {
		if err := m.ServiceLevel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceLevel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceLevel")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this wfm service goal impact settings based on the context it is used
func (m *WfmServiceGoalImpactSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAbandonRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAverageSpeedOfAnswer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WfmServiceGoalImpactSettings) contextValidateAbandonRate(ctx context.Context, formats strfmt.Registry) error {

	if m.AbandonRate != nil {
		if err := m.AbandonRate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("abandonRate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("abandonRate")
			}
			return err
		}
	}

	return nil
}

func (m *WfmServiceGoalImpactSettings) contextValidateAverageSpeedOfAnswer(ctx context.Context, formats strfmt.Registry) error {

	if m.AverageSpeedOfAnswer != nil {
		if err := m.AverageSpeedOfAnswer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("averageSpeedOfAnswer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("averageSpeedOfAnswer")
			}
			return err
		}
	}

	return nil
}

func (m *WfmServiceGoalImpactSettings) contextValidateServiceLevel(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceLevel != nil {
		if err := m.ServiceLevel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceLevel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceLevel")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WfmServiceGoalImpactSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WfmServiceGoalImpactSettings) UnmarshalBinary(b []byte) error {
	var res WfmServiceGoalImpactSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ScimV2SchemaDefinition Defines a SCIM schema.
//
// swagger:model ScimV2SchemaDefinition
type ScimV2SchemaDefinition struct {

	// The list of service provider attributes.
	// Read Only: true
	Attributes []*ScimV2SchemaAttribute `json:"attributes"`

	// The description of the schema.
	// Read Only: true
	Description string `json:"description,omitempty"`

	// The ID of the SCIM resource. Set by the service provider. "caseExact" is set to "true". "mutability" is set to "readOnly". "returned" is set to "always".
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The metadata of the SCIM resource. Only "location" and "resourceType" are set for "Schema" resources.
	// Read Only: true
	Meta *ScimMetadata `json:"meta,omitempty"`

	// The name of the schema.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this scim v2 schema definition
func (m *ScimV2SchemaDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScimV2SchemaDefinition) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(m.Attributes); i++ {
		if swag.IsZero(m.Attributes[i]) { // not required
			continue
		}

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScimV2SchemaDefinition) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScimV2SchemaDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScimV2SchemaDefinition) UnmarshalBinary(b []byte) error {
	var res ScimV2SchemaDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SIPSearchPublicRequest s IP search public request
//
// swagger:model SIPSearchPublicRequest
type SIPSearchPublicRequest struct {

	// unique identification of the placed call
	CallID string `json:"callId,omitempty"`

	// Unique identification of the conversation
	ConversationID string `json:"conversationId,omitempty"`

	// End date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Required: true
	// Format: date-time
	DateEnd *strfmt.DateTime `json:"dateEnd"`

	// Start date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Required: true
	// Format: date-time
	DateStart *strfmt.DateTime `json:"dateStart"`

	// SIP user who placed the call
	FromUser string `json:"fromUser,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Unique identification of the participant
	ParticipantID string `json:"participantId,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// SIP user to who the call was placed
	ToUser string `json:"toUser,omitempty"`
}

// Validate validates this s IP search public request
func (m *SIPSearchPublicRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SIPSearchPublicRequest) validateDateEnd(formats strfmt.Registry) error {

	if err := validate.Required("dateEnd", "body", m.DateEnd); err != nil {
		return err
	}

	if err := validate.FormatOf("dateEnd", "body", "date-time", m.DateEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SIPSearchPublicRequest) validateDateStart(formats strfmt.Registry) error {

	if err := validate.Required("dateStart", "body", m.DateStart); err != nil {
		return err
	}

	if err := validate.FormatOf("dateStart", "body", "date-time", m.DateStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SIPSearchPublicRequest) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SIPSearchPublicRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SIPSearchPublicRequest) UnmarshalBinary(b []byte) error {
	var res SIPSearchPublicRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

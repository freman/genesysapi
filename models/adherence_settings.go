// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AdherenceSettings adherence settings
//
// swagger:model AdherenceSettings
type AdherenceSettings struct {

	// The threshold in seconds for which agents should not be penalized for being momentarily out of adherence
	AdherenceExceptionThresholdSeconds int32 `json:"adherenceExceptionThresholdSeconds,omitempty"`

	// Target adherence percentage
	AdherenceTargetPercent int32 `json:"adherenceTargetPercent,omitempty"`

	// Activity categories that should be ignored for adherence purposes
	IgnoredActivityCategories *IgnoredActivityCategories `json:"ignoredActivityCategories,omitempty"`

	// Whether to treat all non-on-queue activities as equivalent for adherence purposes
	NonOnQueueActivitiesEquivalent bool `json:"nonOnQueueActivitiesEquivalent"`

	// The threshold in minutes where an alert will be triggered when an agent is considered severely out of adherence
	SevereAlertThresholdMinutes int32 `json:"severeAlertThresholdMinutes,omitempty"`

	// Whether to track on-queue activities
	TrackOnQueueActivity bool `json:"trackOnQueueActivity"`
}

// Validate validates this adherence settings
func (m *AdherenceSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIgnoredActivityCategories(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdherenceSettings) validateIgnoredActivityCategories(formats strfmt.Registry) error {
	if swag.IsZero(m.IgnoredActivityCategories) { // not required
		return nil
	}

	if m.IgnoredActivityCategories != nil {
		if err := m.IgnoredActivityCategories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ignoredActivityCategories")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ignoredActivityCategories")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this adherence settings based on the context it is used
func (m *AdherenceSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIgnoredActivityCategories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdherenceSettings) contextValidateIgnoredActivityCategories(ctx context.Context, formats strfmt.Registry) error {

	if m.IgnoredActivityCategories != nil {
		if err := m.IgnoredActivityCategories.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ignoredActivityCategories")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ignoredActivityCategories")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdherenceSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdherenceSettings) UnmarshalBinary(b []byte) error {
	var res AdherenceSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

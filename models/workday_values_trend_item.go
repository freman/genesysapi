// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkdayValuesTrendItem workday values trend item
//
// swagger:model WorkdayValuesTrendItem
type WorkdayValuesTrendItem struct {

	// The workday for the metric value. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Read Only: true
	// Format: date
	DateWorkday strfmt.Date `json:"dateWorkday,omitempty"`

	// The metric value
	// Read Only: true
	Value float64 `json:"value,omitempty"`
}

// Validate validates this workday values trend item
func (m *WorkdayValuesTrendItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateWorkday(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkdayValuesTrendItem) validateDateWorkday(formats strfmt.Registry) error {
	if swag.IsZero(m.DateWorkday) { // not required
		return nil
	}

	if err := validate.FormatOf("dateWorkday", "body", "date", m.DateWorkday.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this workday values trend item based on the context it is used
func (m *WorkdayValuesTrendItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateWorkday(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkdayValuesTrendItem) contextValidateDateWorkday(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateWorkday", "body", strfmt.Date(m.DateWorkday)); err != nil {
		return err
	}

	return nil
}

func (m *WorkdayValuesTrendItem) contextValidateValue(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "value", "body", float64(m.Value)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkdayValuesTrendItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkdayValuesTrendItem) UnmarshalBinary(b []byte) error {
	var res WorkdayValuesTrendItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Keyword keyword
//
// swagger:model Keyword
type Keyword struct {

	// A modifier to the evaluation score when the phrase is spotted in the agent channel
	// Required: true
	AgentScoreModifier *int32 `json:"agentScoreModifier"`

	// Other spellings of the phrase that can be added to reduce missed spots (false negatives).
	AlternateSpellings []string `json:"alternateSpellings"`

	// The phonetic spellings for the antiWords.
	AntiPronunciations []string `json:"antiPronunciations"`

	// Words that are similar to the phrase but not desired. Added to reduce incorrect spots (false positives).
	AntiWords []string `json:"antiWords"`

	// A sensitivity threshold that can be increased to lower false positives or decreased to reduce false negatives.
	// Required: true
	Confidence *int32 `json:"confidence"`

	// A modifier to the evaluation score when the phrase is spotted in the customer channel
	// Required: true
	CustomerScoreModifier *int32 `json:"customerScoreModifier"`

	// id
	ID string `json:"id,omitempty"`

	// margin of error
	MarginOfError float64 `json:"marginOfError,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The word or phrase which is being looked for with speech recognition.
	// Required: true
	Phrase *string `json:"phrase"`

	// pronunciation
	Pronunciation string `json:"pronunciation,omitempty"`

	// The phonetic spellings for the phrase and alternate spellings.
	Pronunciations []string `json:"pronunciations"`

	// A prediction of how easy it is to unambiguously spot the keyword within its language based on spelling.
	SpotabilityIndex float64 `json:"spotabilityIndex,omitempty"`
}

// Validate validates this keyword
func (m *Keyword) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentScoreModifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfidence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerScoreModifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhrase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Keyword) validateAgentScoreModifier(formats strfmt.Registry) error {

	if err := validate.Required("agentScoreModifier", "body", m.AgentScoreModifier); err != nil {
		return err
	}

	return nil
}

func (m *Keyword) validateConfidence(formats strfmt.Registry) error {

	if err := validate.Required("confidence", "body", m.Confidence); err != nil {
		return err
	}

	return nil
}

func (m *Keyword) validateCustomerScoreModifier(formats strfmt.Registry) error {

	if err := validate.Required("customerScoreModifier", "body", m.CustomerScoreModifier); err != nil {
		return err
	}

	return nil
}

func (m *Keyword) validatePhrase(formats strfmt.Registry) error {

	if err := validate.Required("phrase", "body", m.Phrase); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Keyword) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Keyword) UnmarshalBinary(b []byte) error {
	var res Keyword
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

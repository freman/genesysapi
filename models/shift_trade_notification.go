// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShiftTradeNotification shift trade notification
//
// swagger:model ShiftTradeNotification
type ShiftTradeNotification struct {

	// The start date and time of the initiating shift. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	InitiatingShiftDate strfmt.DateTime `json:"initiatingShiftDate,omitempty"`

	// The user who initiated the shift trade
	InitiatingUser *UserReference `json:"initiatingUser,omitempty"`

	// The new state of the shift trade, null if there was no change
	// Enum: [Unmatched Matched Approved Denied Expired Canceled]
	NewState string `json:"newState,omitempty"`

	// Whether this is a one sided shift trade
	OneSided bool `json:"oneSided,omitempty"`

	// The start date and time of the receiving shift (null if not matched or if one-sided. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	ReceivingShiftDate strfmt.DateTime `json:"receivingShiftDate,omitempty"`

	// The user on the receiving side of this shift trade (null if not matched)
	ReceivingUser *UserReference `json:"receivingUser,omitempty"`

	// The ID of the shift trade
	TradeID string `json:"tradeId,omitempty"`

	// The start date of the schedule with which this trade is associated
	WeekDate string `json:"weekDate,omitempty"`
}

// Validate validates this shift trade notification
func (m *ShiftTradeNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInitiatingShiftDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatingUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivingShiftDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivingUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShiftTradeNotification) validateInitiatingShiftDate(formats strfmt.Registry) error {

	if swag.IsZero(m.InitiatingShiftDate) { // not required
		return nil
	}

	if err := validate.FormatOf("initiatingShiftDate", "body", "date-time", m.InitiatingShiftDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShiftTradeNotification) validateInitiatingUser(formats strfmt.Registry) error {

	if swag.IsZero(m.InitiatingUser) { // not required
		return nil
	}

	if m.InitiatingUser != nil {
		if err := m.InitiatingUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initiatingUser")
			}
			return err
		}
	}

	return nil
}

var shiftTradeNotificationTypeNewStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unmatched","Matched","Approved","Denied","Expired","Canceled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shiftTradeNotificationTypeNewStatePropEnum = append(shiftTradeNotificationTypeNewStatePropEnum, v)
	}
}

const (

	// ShiftTradeNotificationNewStateUnmatched captures enum value "Unmatched"
	ShiftTradeNotificationNewStateUnmatched string = "Unmatched"

	// ShiftTradeNotificationNewStateMatched captures enum value "Matched"
	ShiftTradeNotificationNewStateMatched string = "Matched"

	// ShiftTradeNotificationNewStateApproved captures enum value "Approved"
	ShiftTradeNotificationNewStateApproved string = "Approved"

	// ShiftTradeNotificationNewStateDenied captures enum value "Denied"
	ShiftTradeNotificationNewStateDenied string = "Denied"

	// ShiftTradeNotificationNewStateExpired captures enum value "Expired"
	ShiftTradeNotificationNewStateExpired string = "Expired"

	// ShiftTradeNotificationNewStateCanceled captures enum value "Canceled"
	ShiftTradeNotificationNewStateCanceled string = "Canceled"
)

// prop value enum
func (m *ShiftTradeNotification) validateNewStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, shiftTradeNotificationTypeNewStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ShiftTradeNotification) validateNewState(formats strfmt.Registry) error {

	if swag.IsZero(m.NewState) { // not required
		return nil
	}

	// value enum
	if err := m.validateNewStateEnum("newState", "body", m.NewState); err != nil {
		return err
	}

	return nil
}

func (m *ShiftTradeNotification) validateReceivingShiftDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ReceivingShiftDate) { // not required
		return nil
	}

	if err := validate.FormatOf("receivingShiftDate", "body", "date-time", m.ReceivingShiftDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShiftTradeNotification) validateReceivingUser(formats strfmt.Registry) error {

	if swag.IsZero(m.ReceivingUser) { // not required
		return nil
	}

	if m.ReceivingUser != nil {
		if err := m.ReceivingUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receivingUser")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShiftTradeNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShiftTradeNotification) UnmarshalBinary(b []byte) error {
	var res ShiftTradeNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

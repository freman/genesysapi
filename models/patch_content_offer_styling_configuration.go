// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PatchContentOfferStylingConfiguration patch content offer styling configuration
//
// swagger:model PatchContentOfferStylingConfiguration
type PatchContentOfferStylingConfiguration struct {

	// Properties for customizing the appearance of the body text.
	Body *PatchTextStyleProperties `json:"body,omitempty"`

	// Properties for customizing the appearance of the close button.
	CloseButton *PatchCloseButtonStyleProperties `json:"closeButton,omitempty"`

	// Properties for customizing the appearance of the CTA button.
	CtaButton *PatchCtaButtonStyleProperties `json:"ctaButton,omitempty"`

	// Properties for customizing the appearance of the headline text.
	Headline *PatchTextStyleProperties `json:"headline,omitempty"`

	// Properties for customizing the appearance of the content offer.
	Offer *PatchContentOfferStyleProperties `json:"offer,omitempty"`

	// Properties for customizing the positioning of the content offer.
	Position *PatchContentPositionProperties `json:"position,omitempty"`

	// Properties for customizing the appearance of the title text.
	Title *PatchTextStyleProperties `json:"title,omitempty"`
}

// Validate validates this patch content offer styling configuration
func (m *PatchContentOfferStylingConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloseButton(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCtaButton(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchContentOfferStylingConfiguration) validateBody(formats strfmt.Registry) error {
	if swag.IsZero(m.Body) { // not required
		return nil
	}

	if m.Body != nil {
		if err := m.Body.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body")
			}
			return err
		}
	}

	return nil
}

func (m *PatchContentOfferStylingConfiguration) validateCloseButton(formats strfmt.Registry) error {
	if swag.IsZero(m.CloseButton) { // not required
		return nil
	}

	if m.CloseButton != nil {
		if err := m.CloseButton.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closeButton")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("closeButton")
			}
			return err
		}
	}

	return nil
}

func (m *PatchContentOfferStylingConfiguration) validateCtaButton(formats strfmt.Registry) error {
	if swag.IsZero(m.CtaButton) { // not required
		return nil
	}

	if m.CtaButton != nil {
		if err := m.CtaButton.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ctaButton")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ctaButton")
			}
			return err
		}
	}

	return nil
}

func (m *PatchContentOfferStylingConfiguration) validateHeadline(formats strfmt.Registry) error {
	if swag.IsZero(m.Headline) { // not required
		return nil
	}

	if m.Headline != nil {
		if err := m.Headline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headline")
			}
			return err
		}
	}

	return nil
}

func (m *PatchContentOfferStylingConfiguration) validateOffer(formats strfmt.Registry) error {
	if swag.IsZero(m.Offer) { // not required
		return nil
	}

	if m.Offer != nil {
		if err := m.Offer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("offer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("offer")
			}
			return err
		}
	}

	return nil
}

func (m *PatchContentOfferStylingConfiguration) validatePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *PatchContentOfferStylingConfiguration) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if m.Title != nil {
		if err := m.Title.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("title")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("title")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this patch content offer styling configuration based on the context it is used
func (m *PatchContentOfferStylingConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBody(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloseButton(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCtaButton(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeadline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTitle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchContentOfferStylingConfiguration) contextValidateBody(ctx context.Context, formats strfmt.Registry) error {

	if m.Body != nil {
		if err := m.Body.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body")
			}
			return err
		}
	}

	return nil
}

func (m *PatchContentOfferStylingConfiguration) contextValidateCloseButton(ctx context.Context, formats strfmt.Registry) error {

	if m.CloseButton != nil {
		if err := m.CloseButton.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closeButton")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("closeButton")
			}
			return err
		}
	}

	return nil
}

func (m *PatchContentOfferStylingConfiguration) contextValidateCtaButton(ctx context.Context, formats strfmt.Registry) error {

	if m.CtaButton != nil {
		if err := m.CtaButton.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ctaButton")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ctaButton")
			}
			return err
		}
	}

	return nil
}

func (m *PatchContentOfferStylingConfiguration) contextValidateHeadline(ctx context.Context, formats strfmt.Registry) error {

	if m.Headline != nil {
		if err := m.Headline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headline")
			}
			return err
		}
	}

	return nil
}

func (m *PatchContentOfferStylingConfiguration) contextValidateOffer(ctx context.Context, formats strfmt.Registry) error {

	if m.Offer != nil {
		if err := m.Offer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("offer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("offer")
			}
			return err
		}
	}

	return nil
}

func (m *PatchContentOfferStylingConfiguration) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.Position != nil {
		if err := m.Position.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *PatchContentOfferStylingConfiguration) contextValidateTitle(ctx context.Context, formats strfmt.Registry) error {

	if m.Title != nil {
		if err := m.Title.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("title")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("title")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchContentOfferStylingConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchContentOfferStylingConfiguration) UnmarshalBinary(b []byte) error {
	var res PatchContentOfferStylingConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

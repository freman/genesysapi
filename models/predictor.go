// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Predictor predictor
//
// swagger:model Predictor
type Predictor struct {

	// DateTime indicating when the predictor was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// DateTime indicating when the predictor was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// Predictor error code - optional details on why the predictor went into error state.
	// Read Only: true
	ErrorCode string `json:"errorCode,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The KPI that the predictor attempts to maximize/minimize.
	// Required: true
	Kpi *string `json:"kpi"`

	// Predictor's models
	// Read Only: true
	Models []*PredictorModelBrief `json:"models"`

	// The queue IDs associated with the predictor.
	// Required: true
	Queues []*AddressableEntityRef `json:"queues"`

	// Number of seconds allocated to predictive routing before attempting a different routing method. This is a value between 12 and 900 seconds.
	RoutingTimeoutSeconds int32 `json:"routingTimeoutSeconds,omitempty"`

	// The predictor schedule that determines when the predictor is used for routing interactions.
	Schedule *PredictorSchedule `json:"schedule,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The predictor state.
	// Read Only: true
	// Enum: [Created Error Active]
	State string `json:"state,omitempty"`

	// The predictor balancing configuration to enable workload balancing.
	WorkloadBalancingConfig *PredictorWorkloadBalancing `json:"workloadBalancingConfig,omitempty"`
}

// Validate validates this predictor
func (m *Predictor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKpi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloadBalancingConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Predictor) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Predictor) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Predictor) validateKpi(formats strfmt.Registry) error {

	if err := validate.Required("kpi", "body", m.Kpi); err != nil {
		return err
	}

	return nil
}

func (m *Predictor) validateModels(formats strfmt.Registry) error {
	if swag.IsZero(m.Models) { // not required
		return nil
	}

	for i := 0; i < len(m.Models); i++ {
		if swag.IsZero(m.Models[i]) { // not required
			continue
		}

		if m.Models[i] != nil {
			if err := m.Models[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("models" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("models" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Predictor) validateQueues(formats strfmt.Registry) error {

	if err := validate.Required("queues", "body", m.Queues); err != nil {
		return err
	}

	for i := 0; i < len(m.Queues); i++ {
		if swag.IsZero(m.Queues[i]) { // not required
			continue
		}

		if m.Queues[i] != nil {
			if err := m.Queues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("queues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Predictor) validateSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *Predictor) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var predictorTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Created","Error","Active"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		predictorTypeStatePropEnum = append(predictorTypeStatePropEnum, v)
	}
}

const (

	// PredictorStateCreated captures enum value "Created"
	PredictorStateCreated string = "Created"

	// PredictorStateError captures enum value "Error"
	PredictorStateError string = "Error"

	// PredictorStateActive captures enum value "Active"
	PredictorStateActive string = "Active"
)

// prop value enum
func (m *Predictor) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, predictorTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Predictor) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *Predictor) validateWorkloadBalancingConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkloadBalancingConfig) { // not required
		return nil
	}

	if m.WorkloadBalancingConfig != nil {
		if err := m.WorkloadBalancingConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workloadBalancingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workloadBalancingConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this predictor based on the context it is used
func (m *Predictor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateModified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkloadBalancingConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Predictor) contextValidateDateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateCreated", "body", strfmt.DateTime(m.DateCreated)); err != nil {
		return err
	}

	return nil
}

func (m *Predictor) contextValidateDateModified(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateModified", "body", strfmt.DateTime(m.DateModified)); err != nil {
		return err
	}

	return nil
}

func (m *Predictor) contextValidateErrorCode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "errorCode", "body", string(m.ErrorCode)); err != nil {
		return err
	}

	return nil
}

func (m *Predictor) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Predictor) contextValidateModels(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "models", "body", []*PredictorModelBrief(m.Models)); err != nil {
		return err
	}

	for i := 0; i < len(m.Models); i++ {

		if m.Models[i] != nil {
			if err := m.Models[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("models" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("models" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Predictor) contextValidateQueues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Queues); i++ {

		if m.Queues[i] != nil {
			if err := m.Queues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("queues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Predictor) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.Schedule != nil {
		if err := m.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *Predictor) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *Predictor) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

func (m *Predictor) contextValidateWorkloadBalancingConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.WorkloadBalancingConfig != nil {
		if err := m.WorkloadBalancingConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workloadBalancingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workloadBalancingConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Predictor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Predictor) UnmarshalBinary(b []byte) error {
	var res Predictor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

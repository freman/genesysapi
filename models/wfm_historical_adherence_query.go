// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WfmHistoricalAdherenceQuery wfm historical adherence query
//
// swagger:model WfmHistoricalAdherenceQuery
type WfmHistoricalAdherenceQuery struct {

	// End of the date range to query in ISO-8601 format. If it is not set, end date will be set to current time
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// Whether user exceptions should be returned as part of the results
	IncludeExceptions bool `json:"includeExceptions"`

	// Beginning of the date range to query in ISO-8601 format
	// Required: true
	// Format: date-time
	StartDate *strfmt.DateTime `json:"startDate"`

	// The time zone to use for returned results in olson format. If it is not set, the business unit time zone will be used to compute adherence
	TimeZone string `json:"timeZone,omitempty"`

	// The userIds to report on. If null or not set, adherence will be computed for all the users in management unit or requested teamIds
	// Unique: true
	UserIds []string `json:"userIds"`
}

// Validate validates this wfm historical adherence query
func (m *WfmHistoricalAdherenceQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WfmHistoricalAdherenceQuery) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WfmHistoricalAdherenceQuery) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WfmHistoricalAdherenceQuery) validateUserIds(formats strfmt.Registry) error {

	if swag.IsZero(m.UserIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("userIds", "body", m.UserIds); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WfmHistoricalAdherenceQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WfmHistoricalAdherenceQuery) UnmarshalBinary(b []byte) error {
	var res WfmHistoricalAdherenceQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

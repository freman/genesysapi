// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExternalMetricDefinition external metric definition
//
// swagger:model ExternalMetricDefinition
type ExternalMetricDefinition struct {

	// The last date and time that the metric data was refreshed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateLastRefreshed strfmt.DateTime `json:"dateLastRefreshed,omitempty"`

	// The default objective type of the External Metric Definition
	// Enum: [HigherIsBetter LowerIsBetter TargetArea]
	DefaultObjectiveType string `json:"defaultObjectiveType,omitempty"`

	// True if the External Metric Definition is enabled
	Enabled bool `json:"enabled"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// True if the External Metric Definition is in use
	// Read Only: true
	InUse *bool `json:"inUse"`

	// The name of the External Metric Definition
	Name string `json:"name,omitempty"`

	// The decimal precision of the External Metric Definition
	Precision int32 `json:"precision,omitempty"`

	// The retention in months of the External Metric Definition
	RetentionMonths int32 `json:"retentionMonths,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The unit of the External Metric Definition
	// Enum: [Seconds Percent Number Currency]
	Unit string `json:"unit,omitempty"`

	// The unit definition of the External Metric Definition
	UnitDefinition string `json:"unitDefinition,omitempty"`
}

// Validate validates this external metric definition
func (m *ExternalMetricDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateLastRefreshed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultObjectiveType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExternalMetricDefinition) validateDateLastRefreshed(formats strfmt.Registry) error {
	if swag.IsZero(m.DateLastRefreshed) { // not required
		return nil
	}

	if err := validate.FormatOf("dateLastRefreshed", "body", "date-time", m.DateLastRefreshed.String(), formats); err != nil {
		return err
	}

	return nil
}

var externalMetricDefinitionTypeDefaultObjectiveTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HigherIsBetter","LowerIsBetter","TargetArea"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		externalMetricDefinitionTypeDefaultObjectiveTypePropEnum = append(externalMetricDefinitionTypeDefaultObjectiveTypePropEnum, v)
	}
}

const (

	// ExternalMetricDefinitionDefaultObjectiveTypeHigherIsBetter captures enum value "HigherIsBetter"
	ExternalMetricDefinitionDefaultObjectiveTypeHigherIsBetter string = "HigherIsBetter"

	// ExternalMetricDefinitionDefaultObjectiveTypeLowerIsBetter captures enum value "LowerIsBetter"
	ExternalMetricDefinitionDefaultObjectiveTypeLowerIsBetter string = "LowerIsBetter"

	// ExternalMetricDefinitionDefaultObjectiveTypeTargetArea captures enum value "TargetArea"
	ExternalMetricDefinitionDefaultObjectiveTypeTargetArea string = "TargetArea"
)

// prop value enum
func (m *ExternalMetricDefinition) validateDefaultObjectiveTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, externalMetricDefinitionTypeDefaultObjectiveTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExternalMetricDefinition) validateDefaultObjectiveType(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultObjectiveType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDefaultObjectiveTypeEnum("defaultObjectiveType", "body", m.DefaultObjectiveType); err != nil {
		return err
	}

	return nil
}

func (m *ExternalMetricDefinition) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var externalMetricDefinitionTypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Seconds","Percent","Number","Currency"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		externalMetricDefinitionTypeUnitPropEnum = append(externalMetricDefinitionTypeUnitPropEnum, v)
	}
}

const (

	// ExternalMetricDefinitionUnitSeconds captures enum value "Seconds"
	ExternalMetricDefinitionUnitSeconds string = "Seconds"

	// ExternalMetricDefinitionUnitPercent captures enum value "Percent"
	ExternalMetricDefinitionUnitPercent string = "Percent"

	// ExternalMetricDefinitionUnitNumber captures enum value "Number"
	ExternalMetricDefinitionUnitNumber string = "Number"

	// ExternalMetricDefinitionUnitCurrency captures enum value "Currency"
	ExternalMetricDefinitionUnitCurrency string = "Currency"
)

// prop value enum
func (m *ExternalMetricDefinition) validateUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, externalMetricDefinitionTypeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExternalMetricDefinition) validateUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateUnitEnum("unit", "body", m.Unit); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this external metric definition based on the context it is used
func (m *ExternalMetricDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInUse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExternalMetricDefinition) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ExternalMetricDefinition) contextValidateInUse(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "inUse", "body", m.InUse); err != nil {
		return err
	}

	return nil
}

func (m *ExternalMetricDefinition) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExternalMetricDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExternalMetricDefinition) UnmarshalBinary(b []byte) error {
	var res ExternalMetricDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdherenceExplanationJobReference adherence explanation job reference
//
// swagger:model AdherenceExplanationJobReference
type AdherenceExplanationJobReference struct {

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The status of the adherence explanation job
	// Enum: [Processing Complete Error]
	Status string `json:"status,omitempty"`

	// The type of the adherence explanation job
	// Enum: [AddExplanation UpdateExplanation QueryAgentExplanations QueryBuExplanations]
	Type string `json:"type,omitempty"`
}

// Validate validates this adherence explanation job reference
func (m *AdherenceExplanationJobReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdherenceExplanationJobReference) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var adherenceExplanationJobReferenceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Processing","Complete","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adherenceExplanationJobReferenceTypeStatusPropEnum = append(adherenceExplanationJobReferenceTypeStatusPropEnum, v)
	}
}

const (

	// AdherenceExplanationJobReferenceStatusProcessing captures enum value "Processing"
	AdherenceExplanationJobReferenceStatusProcessing string = "Processing"

	// AdherenceExplanationJobReferenceStatusComplete captures enum value "Complete"
	AdherenceExplanationJobReferenceStatusComplete string = "Complete"

	// AdherenceExplanationJobReferenceStatusError captures enum value "Error"
	AdherenceExplanationJobReferenceStatusError string = "Error"
)

// prop value enum
func (m *AdherenceExplanationJobReference) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, adherenceExplanationJobReferenceTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdherenceExplanationJobReference) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var adherenceExplanationJobReferenceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AddExplanation","UpdateExplanation","QueryAgentExplanations","QueryBuExplanations"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adherenceExplanationJobReferenceTypeTypePropEnum = append(adherenceExplanationJobReferenceTypeTypePropEnum, v)
	}
}

const (

	// AdherenceExplanationJobReferenceTypeAddExplanation captures enum value "AddExplanation"
	AdherenceExplanationJobReferenceTypeAddExplanation string = "AddExplanation"

	// AdherenceExplanationJobReferenceTypeUpdateExplanation captures enum value "UpdateExplanation"
	AdherenceExplanationJobReferenceTypeUpdateExplanation string = "UpdateExplanation"

	// AdherenceExplanationJobReferenceTypeQueryAgentExplanations captures enum value "QueryAgentExplanations"
	AdherenceExplanationJobReferenceTypeQueryAgentExplanations string = "QueryAgentExplanations"

	// AdherenceExplanationJobReferenceTypeQueryBuExplanations captures enum value "QueryBuExplanations"
	AdherenceExplanationJobReferenceTypeQueryBuExplanations string = "QueryBuExplanations"
)

// prop value enum
func (m *AdherenceExplanationJobReference) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, adherenceExplanationJobReferenceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdherenceExplanationJobReference) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this adherence explanation job reference based on the context it is used
func (m *AdherenceExplanationJobReference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdherenceExplanationJobReference) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *AdherenceExplanationJobReference) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdherenceExplanationJobReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdherenceExplanationJobReference) UnmarshalBinary(b []byte) error {
	var res AdherenceExplanationJobReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JSONCursorSearchResponse Json cursor search response
//
// swagger:model JsonCursorSearchResponse
type JSONCursorSearchResponse struct {

	// aggregations
	Aggregations ArrayNode `json:"aggregations,omitempty"`

	// The page cursor
	Cursor string `json:"cursor,omitempty"`

	// Search results
	// Required: true
	Results ArrayNode `json:"results"`

	// Resource types the search was performed against
	// Required: true
	Types []string `json:"types"`
}

// Validate validates this Json cursor search response
func (m *JSONCursorSearchResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JSONCursorSearchResponse) validateResults(formats strfmt.Registry) error {

	if m.Results == nil {
		return errors.Required("results", "body", nil)
	}

	return nil
}

func (m *JSONCursorSearchResponse) validateTypes(formats strfmt.Registry) error {

	if err := validate.Required("types", "body", m.Types); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Json cursor search response based on context it is used
func (m *JSONCursorSearchResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JSONCursorSearchResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JSONCursorSearchResponse) UnmarshalBinary(b []byte) error {
	var res JSONCursorSearchResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

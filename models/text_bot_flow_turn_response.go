// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TextBotFlowTurnResponse Information related to a success bot flow turn request.
//
// swagger:model TextBotFlowTurnResponse
type TextBotFlowTurnResponse struct {

	// The ID of the bot flow turn. If additional turns are needed, supply this ID as the previous turn in your next turn request.
	// Required: true
	ID *string `json:"id"`

	// The next action directive for this turn if it is a Disconnect type.
	NextActionDisconnect *TextBotDisconnectAction `json:"nextActionDisconnect,omitempty"`

	// The next action directive for this turn if it is an Exit type.
	NextActionExit *TextBotExitAction `json:"nextActionExit,omitempty"`

	// Indicates the suggested next action. If appropriate, the matching output event object includes additional information.
	// Required: true
	// Enum: [NoOp Disconnect WaitForInput Exit]
	NextActionType *string `json:"nextActionType"`

	// The next action directive for this turn if it is a WaitForInput type.
	NextActionWaitForInput *TextBotWaitForInputAction `json:"nextActionWaitForInput,omitempty"`

	// The reference to a previous turn, if applicable.
	PreviousTurn *TextBotTurnReference `json:"previousTurn,omitempty"`

	// The output prompts for this turn.
	Prompts *TextBotOutputPrompts `json:"prompts,omitempty"`
}

// Validate validates this text bot flow turn response
func (m *TextBotFlowTurnResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextActionDisconnect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextActionExit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextActionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextActionWaitForInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousTurn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrompts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TextBotFlowTurnResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TextBotFlowTurnResponse) validateNextActionDisconnect(formats strfmt.Registry) error {

	if swag.IsZero(m.NextActionDisconnect) { // not required
		return nil
	}

	if m.NextActionDisconnect != nil {
		if err := m.NextActionDisconnect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nextActionDisconnect")
			}
			return err
		}
	}

	return nil
}

func (m *TextBotFlowTurnResponse) validateNextActionExit(formats strfmt.Registry) error {

	if swag.IsZero(m.NextActionExit) { // not required
		return nil
	}

	if m.NextActionExit != nil {
		if err := m.NextActionExit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nextActionExit")
			}
			return err
		}
	}

	return nil
}

var textBotFlowTurnResponseTypeNextActionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NoOp","Disconnect","WaitForInput","Exit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		textBotFlowTurnResponseTypeNextActionTypePropEnum = append(textBotFlowTurnResponseTypeNextActionTypePropEnum, v)
	}
}

const (

	// TextBotFlowTurnResponseNextActionTypeNoOp captures enum value "NoOp"
	TextBotFlowTurnResponseNextActionTypeNoOp string = "NoOp"

	// TextBotFlowTurnResponseNextActionTypeDisconnect captures enum value "Disconnect"
	TextBotFlowTurnResponseNextActionTypeDisconnect string = "Disconnect"

	// TextBotFlowTurnResponseNextActionTypeWaitForInput captures enum value "WaitForInput"
	TextBotFlowTurnResponseNextActionTypeWaitForInput string = "WaitForInput"

	// TextBotFlowTurnResponseNextActionTypeExit captures enum value "Exit"
	TextBotFlowTurnResponseNextActionTypeExit string = "Exit"
)

// prop value enum
func (m *TextBotFlowTurnResponse) validateNextActionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, textBotFlowTurnResponseTypeNextActionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TextBotFlowTurnResponse) validateNextActionType(formats strfmt.Registry) error {

	if err := validate.Required("nextActionType", "body", m.NextActionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateNextActionTypeEnum("nextActionType", "body", *m.NextActionType); err != nil {
		return err
	}

	return nil
}

func (m *TextBotFlowTurnResponse) validateNextActionWaitForInput(formats strfmt.Registry) error {

	if swag.IsZero(m.NextActionWaitForInput) { // not required
		return nil
	}

	if m.NextActionWaitForInput != nil {
		if err := m.NextActionWaitForInput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nextActionWaitForInput")
			}
			return err
		}
	}

	return nil
}

func (m *TextBotFlowTurnResponse) validatePreviousTurn(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousTurn) { // not required
		return nil
	}

	if m.PreviousTurn != nil {
		if err := m.PreviousTurn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("previousTurn")
			}
			return err
		}
	}

	return nil
}

func (m *TextBotFlowTurnResponse) validatePrompts(formats strfmt.Registry) error {

	if swag.IsZero(m.Prompts) { // not required
		return nil
	}

	if m.Prompts != nil {
		if err := m.Prompts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prompts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TextBotFlowTurnResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TextBotFlowTurnResponse) UnmarshalBinary(b []byte) error {
	var res TextBotFlowTurnResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

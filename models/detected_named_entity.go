// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetectedNamedEntity detected named entity
//
// swagger:model DetectedNamedEntity
type DetectedNamedEntity struct {

	// The type of the detected named entity.
	// Read Only: true
	EntityType string `json:"entityType,omitempty"`

	// The name of the detected named entity.
	// Read Only: true
	Name string `json:"name,omitempty"`

	// The probability of the detected named entity.
	// Read Only: true
	Probability float64 `json:"probability,omitempty"`

	// The value of the detected named entity.
	// Read Only: true
	Value *DetectedNamedEntityValue `json:"value,omitempty"`
}

// Validate validates this detected named entity
func (m *DetectedNamedEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetectedNamedEntity) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if m.Value != nil {
		if err := m.Value.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("value")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this detected named entity based on the context it is used
func (m *DetectedNamedEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntityType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProbability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetectedNamedEntity) contextValidateEntityType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "entityType", "body", string(m.EntityType)); err != nil {
		return err
	}

	return nil
}

func (m *DetectedNamedEntity) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *DetectedNamedEntity) contextValidateProbability(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "probability", "body", float64(m.Probability)); err != nil {
		return err
	}

	return nil
}

func (m *DetectedNamedEntity) contextValidateValue(ctx context.Context, formats strfmt.Registry) error {

	if m.Value != nil {
		if err := m.Value.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("value")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DetectedNamedEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DetectedNamedEntity) UnmarshalBinary(b []byte) error {
	var res DetectedNamedEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

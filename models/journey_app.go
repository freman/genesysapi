// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JourneyApp journey app
//
// swagger:model JourneyApp
type JourneyApp struct {

	// Build number of the application (e.g. 701).
	// Required: true
	BuildNumber *string `json:"buildNumber"`

	// Name of the application (e.g. mybankingapp).
	// Required: true
	Name *string `json:"name"`

	// Namespace of the application (e.g. com.genesys.bancodinero).
	// Required: true
	Namespace *string `json:"namespace"`

	// Version of the application (e.g. 5.9.27).
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this journey app
func (m *JourneyApp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JourneyApp) validateBuildNumber(formats strfmt.Registry) error {

	if err := validate.Required("buildNumber", "body", m.BuildNumber); err != nil {
		return err
	}

	return nil
}

func (m *JourneyApp) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *JourneyApp) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *JourneyApp) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this journey app based on context it is used
func (m *JourneyApp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JourneyApp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JourneyApp) UnmarshalBinary(b []byte) error {
	var res JourneyApp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestMapping request mapping
//
// swagger:model RequestMapping
type RequestMapping struct {

	// Type of the value supplied
	// Enum: [String Number Integer Boolean]
	AttributeType string `json:"attributeType,omitempty"`

	// Method of finding value to use with Attribute
	// Enum: [Lookup HardCoded]
	MappingType string `json:"mappingType,omitempty"`

	// Name of the Integration Action Attribute to supply the value for
	Name string `json:"name,omitempty"`

	// Value to supply for the specified Attribute
	Value string `json:"value,omitempty"`
}

// Validate validates this request mapping
func (m *RequestMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappingType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var requestMappingTypeAttributeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["String","Number","Integer","Boolean"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestMappingTypeAttributeTypePropEnum = append(requestMappingTypeAttributeTypePropEnum, v)
	}
}

const (

	// RequestMappingAttributeTypeString captures enum value "String"
	RequestMappingAttributeTypeString string = "String"

	// RequestMappingAttributeTypeNumber captures enum value "Number"
	RequestMappingAttributeTypeNumber string = "Number"

	// RequestMappingAttributeTypeInteger captures enum value "Integer"
	RequestMappingAttributeTypeInteger string = "Integer"

	// RequestMappingAttributeTypeBoolean captures enum value "Boolean"
	RequestMappingAttributeTypeBoolean string = "Boolean"
)

// prop value enum
func (m *RequestMapping) validateAttributeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, requestMappingTypeAttributeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RequestMapping) validateAttributeType(formats strfmt.Registry) error {
	if swag.IsZero(m.AttributeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAttributeTypeEnum("attributeType", "body", m.AttributeType); err != nil {
		return err
	}

	return nil
}

var requestMappingTypeMappingTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Lookup","HardCoded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestMappingTypeMappingTypePropEnum = append(requestMappingTypeMappingTypePropEnum, v)
	}
}

const (

	// RequestMappingMappingTypeLookup captures enum value "Lookup"
	RequestMappingMappingTypeLookup string = "Lookup"

	// RequestMappingMappingTypeHardCoded captures enum value "HardCoded"
	RequestMappingMappingTypeHardCoded string = "HardCoded"
)

// prop value enum
func (m *RequestMapping) validateMappingTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, requestMappingTypeMappingTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RequestMapping) validateMappingType(formats strfmt.Registry) error {
	if swag.IsZero(m.MappingType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMappingTypeEnum("mappingType", "body", m.MappingType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this request mapping based on context it is used
func (m *RequestMapping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RequestMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestMapping) UnmarshalBinary(b []byte) error {
	var res RequestMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

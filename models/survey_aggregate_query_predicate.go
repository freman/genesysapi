// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SurveyAggregateQueryPredicate survey aggregate query predicate
//
// swagger:model SurveyAggregateQueryPredicate
type SurveyAggregateQueryPredicate struct {

	// Left hand side for dimension predicates
	// Enum: [conversationId divisionId externalContactId mediaType queueId requestedLanguageId requestedRoutingSkillId surveyAnswerId surveyCreatedDate surveyErrorReason surveyFormContextId surveyFormId surveyFormName surveyId surveyPreviousStatus surveyPromoterScore surveyQuestionGroupId surveyQuestionId surveyStatus teamId userId wrapUpCode]
	Dimension string `json:"dimension,omitempty"`

	// Optional operator, default is matches
	// Enum: [matches exists notExists]
	Operator string `json:"operator,omitempty"`

	// Right hand side for dimension predicates
	Range *NumericRange `json:"range,omitempty"`

	// Optional type, can usually be inferred
	// Enum: [dimension property metric]
	Type string `json:"type,omitempty"`

	// Right hand side for dimension predicates
	Value string `json:"value,omitempty"`
}

// Validate validates this survey aggregate query predicate
func (m *SurveyAggregateQueryPredicate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var surveyAggregateQueryPredicateTypeDimensionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["conversationId","divisionId","externalContactId","mediaType","queueId","requestedLanguageId","requestedRoutingSkillId","surveyAnswerId","surveyCreatedDate","surveyErrorReason","surveyFormContextId","surveyFormId","surveyFormName","surveyId","surveyPreviousStatus","surveyPromoterScore","surveyQuestionGroupId","surveyQuestionId","surveyStatus","teamId","userId","wrapUpCode"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		surveyAggregateQueryPredicateTypeDimensionPropEnum = append(surveyAggregateQueryPredicateTypeDimensionPropEnum, v)
	}
}

const (

	// SurveyAggregateQueryPredicateDimensionConversationID captures enum value "conversationId"
	SurveyAggregateQueryPredicateDimensionConversationID string = "conversationId"

	// SurveyAggregateQueryPredicateDimensionDivisionID captures enum value "divisionId"
	SurveyAggregateQueryPredicateDimensionDivisionID string = "divisionId"

	// SurveyAggregateQueryPredicateDimensionExternalContactID captures enum value "externalContactId"
	SurveyAggregateQueryPredicateDimensionExternalContactID string = "externalContactId"

	// SurveyAggregateQueryPredicateDimensionMediaType captures enum value "mediaType"
	SurveyAggregateQueryPredicateDimensionMediaType string = "mediaType"

	// SurveyAggregateQueryPredicateDimensionQueueID captures enum value "queueId"
	SurveyAggregateQueryPredicateDimensionQueueID string = "queueId"

	// SurveyAggregateQueryPredicateDimensionRequestedLanguageID captures enum value "requestedLanguageId"
	SurveyAggregateQueryPredicateDimensionRequestedLanguageID string = "requestedLanguageId"

	// SurveyAggregateQueryPredicateDimensionRequestedRoutingSkillID captures enum value "requestedRoutingSkillId"
	SurveyAggregateQueryPredicateDimensionRequestedRoutingSkillID string = "requestedRoutingSkillId"

	// SurveyAggregateQueryPredicateDimensionSurveyAnswerID captures enum value "surveyAnswerId"
	SurveyAggregateQueryPredicateDimensionSurveyAnswerID string = "surveyAnswerId"

	// SurveyAggregateQueryPredicateDimensionSurveyCreatedDate captures enum value "surveyCreatedDate"
	SurveyAggregateQueryPredicateDimensionSurveyCreatedDate string = "surveyCreatedDate"

	// SurveyAggregateQueryPredicateDimensionSurveyErrorReason captures enum value "surveyErrorReason"
	SurveyAggregateQueryPredicateDimensionSurveyErrorReason string = "surveyErrorReason"

	// SurveyAggregateQueryPredicateDimensionSurveyFormContextID captures enum value "surveyFormContextId"
	SurveyAggregateQueryPredicateDimensionSurveyFormContextID string = "surveyFormContextId"

	// SurveyAggregateQueryPredicateDimensionSurveyFormID captures enum value "surveyFormId"
	SurveyAggregateQueryPredicateDimensionSurveyFormID string = "surveyFormId"

	// SurveyAggregateQueryPredicateDimensionSurveyFormName captures enum value "surveyFormName"
	SurveyAggregateQueryPredicateDimensionSurveyFormName string = "surveyFormName"

	// SurveyAggregateQueryPredicateDimensionSurveyID captures enum value "surveyId"
	SurveyAggregateQueryPredicateDimensionSurveyID string = "surveyId"

	// SurveyAggregateQueryPredicateDimensionSurveyPreviousStatus captures enum value "surveyPreviousStatus"
	SurveyAggregateQueryPredicateDimensionSurveyPreviousStatus string = "surveyPreviousStatus"

	// SurveyAggregateQueryPredicateDimensionSurveyPromoterScore captures enum value "surveyPromoterScore"
	SurveyAggregateQueryPredicateDimensionSurveyPromoterScore string = "surveyPromoterScore"

	// SurveyAggregateQueryPredicateDimensionSurveyQuestionGroupID captures enum value "surveyQuestionGroupId"
	SurveyAggregateQueryPredicateDimensionSurveyQuestionGroupID string = "surveyQuestionGroupId"

	// SurveyAggregateQueryPredicateDimensionSurveyQuestionID captures enum value "surveyQuestionId"
	SurveyAggregateQueryPredicateDimensionSurveyQuestionID string = "surveyQuestionId"

	// SurveyAggregateQueryPredicateDimensionSurveyStatus captures enum value "surveyStatus"
	SurveyAggregateQueryPredicateDimensionSurveyStatus string = "surveyStatus"

	// SurveyAggregateQueryPredicateDimensionTeamID captures enum value "teamId"
	SurveyAggregateQueryPredicateDimensionTeamID string = "teamId"

	// SurveyAggregateQueryPredicateDimensionUserID captures enum value "userId"
	SurveyAggregateQueryPredicateDimensionUserID string = "userId"

	// SurveyAggregateQueryPredicateDimensionWrapUpCode captures enum value "wrapUpCode"
	SurveyAggregateQueryPredicateDimensionWrapUpCode string = "wrapUpCode"
)

// prop value enum
func (m *SurveyAggregateQueryPredicate) validateDimensionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, surveyAggregateQueryPredicateTypeDimensionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SurveyAggregateQueryPredicate) validateDimension(formats strfmt.Registry) error {
	if swag.IsZero(m.Dimension) { // not required
		return nil
	}

	// value enum
	if err := m.validateDimensionEnum("dimension", "body", m.Dimension); err != nil {
		return err
	}

	return nil
}

var surveyAggregateQueryPredicateTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["matches","exists","notExists"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		surveyAggregateQueryPredicateTypeOperatorPropEnum = append(surveyAggregateQueryPredicateTypeOperatorPropEnum, v)
	}
}

const (

	// SurveyAggregateQueryPredicateOperatorMatches captures enum value "matches"
	SurveyAggregateQueryPredicateOperatorMatches string = "matches"

	// SurveyAggregateQueryPredicateOperatorExists captures enum value "exists"
	SurveyAggregateQueryPredicateOperatorExists string = "exists"

	// SurveyAggregateQueryPredicateOperatorNotExists captures enum value "notExists"
	SurveyAggregateQueryPredicateOperatorNotExists string = "notExists"
)

// prop value enum
func (m *SurveyAggregateQueryPredicate) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, surveyAggregateQueryPredicateTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SurveyAggregateQueryPredicate) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *SurveyAggregateQueryPredicate) validateRange(formats strfmt.Registry) error {
	if swag.IsZero(m.Range) { // not required
		return nil
	}

	if m.Range != nil {
		if err := m.Range.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

var surveyAggregateQueryPredicateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dimension","property","metric"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		surveyAggregateQueryPredicateTypeTypePropEnum = append(surveyAggregateQueryPredicateTypeTypePropEnum, v)
	}
}

const (

	// SurveyAggregateQueryPredicateTypeDimension captures enum value "dimension"
	SurveyAggregateQueryPredicateTypeDimension string = "dimension"

	// SurveyAggregateQueryPredicateTypeProperty captures enum value "property"
	SurveyAggregateQueryPredicateTypeProperty string = "property"

	// SurveyAggregateQueryPredicateTypeMetric captures enum value "metric"
	SurveyAggregateQueryPredicateTypeMetric string = "metric"
)

// prop value enum
func (m *SurveyAggregateQueryPredicate) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, surveyAggregateQueryPredicateTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SurveyAggregateQueryPredicate) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this survey aggregate query predicate based on the context it is used
func (m *SurveyAggregateQueryPredicate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SurveyAggregateQueryPredicate) contextValidateRange(ctx context.Context, formats strfmt.Registry) error {

	if m.Range != nil {
		if err := m.Range.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SurveyAggregateQueryPredicate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SurveyAggregateQueryPredicate) UnmarshalBinary(b []byte) error {
	var res SurveyAggregateQueryPredicate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

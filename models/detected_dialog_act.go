// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetectedDialogAct detected dialog act
//
// swagger:model DetectedDialogAct
type DetectedDialogAct struct {

	// The name of the detected dialog act.
	// Read Only: true
	Name string `json:"name,omitempty"`

	// The probability of the detected dialog act.
	// Read Only: true
	Probability float64 `json:"probability,omitempty"`
}

// Validate validates this detected dialog act
func (m *DetectedDialogAct) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this detected dialog act based on the context it is used
func (m *DetectedDialogAct) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProbability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetectedDialogAct) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *DetectedDialogAct) contextValidateProbability(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "probability", "body", float64(m.Probability)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DetectedDialogAct) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DetectedDialogAct) UnmarshalBinary(b []byte) error {
	var res DetectedDialogAct
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

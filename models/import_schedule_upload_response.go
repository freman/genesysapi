// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ImportScheduleUploadResponse import schedule upload response
//
// swagger:model ImportScheduleUploadResponse
type ImportScheduleUploadResponse struct {

	// Required headers for the PUT request to the url
	Headers map[string]string `json:"headers,omitempty"`

	// Always null. Defines the schema of the json body to be PUT to the url. The json body should be gzip encoded before uploading
	UploadBodySchema *ImportScheduleUploadSchema `json:"uploadBodySchema,omitempty"`

	// The key to pass to the secondary request to start processing of the upload
	UploadKey string `json:"uploadKey,omitempty"`

	// The url to which to PUT the upload body
	URL string `json:"url,omitempty"`
}

// Validate validates this import schedule upload response
func (m *ImportScheduleUploadResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUploadBodySchema(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportScheduleUploadResponse) validateUploadBodySchema(formats strfmt.Registry) error {

	if swag.IsZero(m.UploadBodySchema) { // not required
		return nil
	}

	if m.UploadBodySchema != nil {
		if err := m.UploadBodySchema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uploadBodySchema")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImportScheduleUploadResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImportScheduleUploadResponse) UnmarshalBinary(b []byte) error {
	var res ImportScheduleUploadResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

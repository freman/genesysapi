// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TextBotFlowTurnRequest Settings for a turn request to a bot flow.
//
// swagger:model TextBotFlowTurnRequest
type TextBotFlowTurnRequest struct {

	// The data for the input event of this turn if it is an error event. Only one inputEvent may be set.
	InputEventError *TextBotErrorInputEvent `json:"inputEventError,omitempty"`

	// Indicates the type of input event being requested. If appropriate, fill out the matching user input object details on this request.
	// Required: true
	// Enum: [NoOp UserInput Error NoMatch NoInput UserDisconnect ClientSessionExpired]
	InputEventType *string `json:"inputEventType"`

	// The data for the input event of this turn if it is a user input event. Only one inputEvent may be set.
	InputEventUserInput *TextBotUserInputEvent `json:"inputEventUserInput,omitempty"`

	// The reference to a previous turn if appropriate, used to avoid race conditions.
	PreviousTurn *TextBotTurnReference `json:"previousTurn,omitempty"`
}

// Validate validates this text bot flow turn request
func (m *TextBotFlowTurnRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputEventError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputEventUserInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousTurn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TextBotFlowTurnRequest) validateInputEventError(formats strfmt.Registry) error {
	if swag.IsZero(m.InputEventError) { // not required
		return nil
	}

	if m.InputEventError != nil {
		if err := m.InputEventError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputEventError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputEventError")
			}
			return err
		}
	}

	return nil
}

var textBotFlowTurnRequestTypeInputEventTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NoOp","UserInput","Error","NoMatch","NoInput","UserDisconnect","ClientSessionExpired"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		textBotFlowTurnRequestTypeInputEventTypePropEnum = append(textBotFlowTurnRequestTypeInputEventTypePropEnum, v)
	}
}

const (

	// TextBotFlowTurnRequestInputEventTypeNoOp captures enum value "NoOp"
	TextBotFlowTurnRequestInputEventTypeNoOp string = "NoOp"

	// TextBotFlowTurnRequestInputEventTypeUserInput captures enum value "UserInput"
	TextBotFlowTurnRequestInputEventTypeUserInput string = "UserInput"

	// TextBotFlowTurnRequestInputEventTypeError captures enum value "Error"
	TextBotFlowTurnRequestInputEventTypeError string = "Error"

	// TextBotFlowTurnRequestInputEventTypeNoMatch captures enum value "NoMatch"
	TextBotFlowTurnRequestInputEventTypeNoMatch string = "NoMatch"

	// TextBotFlowTurnRequestInputEventTypeNoInput captures enum value "NoInput"
	TextBotFlowTurnRequestInputEventTypeNoInput string = "NoInput"

	// TextBotFlowTurnRequestInputEventTypeUserDisconnect captures enum value "UserDisconnect"
	TextBotFlowTurnRequestInputEventTypeUserDisconnect string = "UserDisconnect"

	// TextBotFlowTurnRequestInputEventTypeClientSessionExpired captures enum value "ClientSessionExpired"
	TextBotFlowTurnRequestInputEventTypeClientSessionExpired string = "ClientSessionExpired"
)

// prop value enum
func (m *TextBotFlowTurnRequest) validateInputEventTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, textBotFlowTurnRequestTypeInputEventTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TextBotFlowTurnRequest) validateInputEventType(formats strfmt.Registry) error {

	if err := validate.Required("inputEventType", "body", m.InputEventType); err != nil {
		return err
	}

	// value enum
	if err := m.validateInputEventTypeEnum("inputEventType", "body", *m.InputEventType); err != nil {
		return err
	}

	return nil
}

func (m *TextBotFlowTurnRequest) validateInputEventUserInput(formats strfmt.Registry) error {
	if swag.IsZero(m.InputEventUserInput) { // not required
		return nil
	}

	if m.InputEventUserInput != nil {
		if err := m.InputEventUserInput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputEventUserInput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputEventUserInput")
			}
			return err
		}
	}

	return nil
}

func (m *TextBotFlowTurnRequest) validatePreviousTurn(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousTurn) { // not required
		return nil
	}

	if m.PreviousTurn != nil {
		if err := m.PreviousTurn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("previousTurn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("previousTurn")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this text bot flow turn request based on the context it is used
func (m *TextBotFlowTurnRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInputEventError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInputEventUserInput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreviousTurn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TextBotFlowTurnRequest) contextValidateInputEventError(ctx context.Context, formats strfmt.Registry) error {

	if m.InputEventError != nil {
		if err := m.InputEventError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputEventError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputEventError")
			}
			return err
		}
	}

	return nil
}

func (m *TextBotFlowTurnRequest) contextValidateInputEventUserInput(ctx context.Context, formats strfmt.Registry) error {

	if m.InputEventUserInput != nil {
		if err := m.InputEventUserInput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputEventUserInput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputEventUserInput")
			}
			return err
		}
	}

	return nil
}

func (m *TextBotFlowTurnRequest) contextValidatePreviousTurn(ctx context.Context, formats strfmt.Registry) error {

	if m.PreviousTurn != nil {
		if err := m.PreviousTurn.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("previousTurn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("previousTurn")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TextBotFlowTurnRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TextBotFlowTurnRequest) UnmarshalBinary(b []byte) error {
	var res TextBotFlowTurnRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

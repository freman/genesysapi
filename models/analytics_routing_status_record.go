// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalyticsRoutingStatusRecord analytics routing status record
//
// swagger:model AnalyticsRoutingStatusRecord
type AnalyticsRoutingStatusRecord struct {

	// The end time of the record. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// The user's ACD routing status
	// Enum: [OFF_QUEUE IDLE INTERACTING NOT_RESPONDING COMMUNICATING]
	RoutingStatus string `json:"routingStatus,omitempty"`

	// The start time of the record. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`
}

// Validate validates this analytics routing status record
func (m *AnalyticsRoutingStatusRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyticsRoutingStatusRecord) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var analyticsRoutingStatusRecordTypeRoutingStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OFF_QUEUE","IDLE","INTERACTING","NOT_RESPONDING","COMMUNICATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analyticsRoutingStatusRecordTypeRoutingStatusPropEnum = append(analyticsRoutingStatusRecordTypeRoutingStatusPropEnum, v)
	}
}

const (

	// AnalyticsRoutingStatusRecordRoutingStatusOFFQUEUE captures enum value "OFF_QUEUE"
	AnalyticsRoutingStatusRecordRoutingStatusOFFQUEUE string = "OFF_QUEUE"

	// AnalyticsRoutingStatusRecordRoutingStatusIDLE captures enum value "IDLE"
	AnalyticsRoutingStatusRecordRoutingStatusIDLE string = "IDLE"

	// AnalyticsRoutingStatusRecordRoutingStatusINTERACTING captures enum value "INTERACTING"
	AnalyticsRoutingStatusRecordRoutingStatusINTERACTING string = "INTERACTING"

	// AnalyticsRoutingStatusRecordRoutingStatusNOTRESPONDING captures enum value "NOT_RESPONDING"
	AnalyticsRoutingStatusRecordRoutingStatusNOTRESPONDING string = "NOT_RESPONDING"

	// AnalyticsRoutingStatusRecordRoutingStatusCOMMUNICATING captures enum value "COMMUNICATING"
	AnalyticsRoutingStatusRecordRoutingStatusCOMMUNICATING string = "COMMUNICATING"
)

// prop value enum
func (m *AnalyticsRoutingStatusRecord) validateRoutingStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, analyticsRoutingStatusRecordTypeRoutingStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AnalyticsRoutingStatusRecord) validateRoutingStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutingStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoutingStatusEnum("routingStatus", "body", m.RoutingStatus); err != nil {
		return err
	}

	return nil
}

func (m *AnalyticsRoutingStatusRecord) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnalyticsRoutingStatusRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalyticsRoutingStatusRecord) UnmarshalBinary(b []byte) error {
	var res AnalyticsRoutingStatusRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

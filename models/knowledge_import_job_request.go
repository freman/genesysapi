// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnowledgeImportJobRequest knowledge import job request
//
// swagger:model KnowledgeImportJobRequest
type KnowledgeImportJobRequest struct {

	// File type of the document
	// Required: true
	// Enum: [Json Csv Xlsx]
	FileType *string `json:"fileType"`

	// Additional optional settings
	Settings *KnowledgeImportJobSettings `json:"settings,omitempty"`

	// Upload key
	// Required: true
	UploadKey *string `json:"uploadKey"`
}

// Validate validates this knowledge import job request
func (m *KnowledgeImportJobRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var knowledgeImportJobRequestTypeFileTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Json","Csv","Xlsx"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		knowledgeImportJobRequestTypeFileTypePropEnum = append(knowledgeImportJobRequestTypeFileTypePropEnum, v)
	}
}

const (

	// KnowledgeImportJobRequestFileTypeJSON captures enum value "Json"
	KnowledgeImportJobRequestFileTypeJSON string = "Json"

	// KnowledgeImportJobRequestFileTypeCsv captures enum value "Csv"
	KnowledgeImportJobRequestFileTypeCsv string = "Csv"

	// KnowledgeImportJobRequestFileTypeXlsx captures enum value "Xlsx"
	KnowledgeImportJobRequestFileTypeXlsx string = "Xlsx"
)

// prop value enum
func (m *KnowledgeImportJobRequest) validateFileTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, knowledgeImportJobRequestTypeFileTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KnowledgeImportJobRequest) validateFileType(formats strfmt.Registry) error {

	if err := validate.Required("fileType", "body", m.FileType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFileTypeEnum("fileType", "body", *m.FileType); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeImportJobRequest) validateSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeImportJobRequest) validateUploadKey(formats strfmt.Registry) error {

	if err := validate.Required("uploadKey", "body", m.UploadKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this knowledge import job request based on the context it is used
func (m *KnowledgeImportJobRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeImportJobRequest) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Settings != nil {
		if err := m.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KnowledgeImportJobRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnowledgeImportJobRequest) UnmarshalBinary(b []byte) error {
	var res KnowledgeImportJobRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

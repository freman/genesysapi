// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EvaluationQuestionGroupScore evaluation question group score
//
// swagger:model EvaluationQuestionGroupScore
type EvaluationQuestionGroupScore struct {

	// marked n a
	MarkedNA bool `json:"markedNA"`

	// Maximum possible score of only the critical questions in the group
	MaxTotalCriticalScore float32 `json:"maxTotalCriticalScore,omitempty"`

	// Maximum possible unweighted score of only the critical questions in the group
	MaxTotalCriticalScoreUnweighted float32 `json:"maxTotalCriticalScoreUnweighted,omitempty"`

	// Maximum possible score of only the non critical questions in the group
	MaxTotalNonCriticalScore float32 `json:"maxTotalNonCriticalScore,omitempty"`

	// Maximum possible unweighted score of only the non critical questions in the group
	MaxTotalNonCriticalScoreUnweighted float32 `json:"maxTotalNonCriticalScoreUnweighted,omitempty"`

	// Maximum possible score of all questions in the group
	MaxTotalScore float32 `json:"maxTotalScore,omitempty"`

	// Maximum possible unweighted score of all questions in the group
	MaxTotalScoreUnweighted float32 `json:"maxTotalScoreUnweighted,omitempty"`

	// question group Id
	QuestionGroupID string `json:"questionGroupId,omitempty"`

	// question scores
	QuestionScores []*EvaluationQuestionScore `json:"questionScores"`

	// Score of only the critical questions in the group
	TotalCriticalScore float32 `json:"totalCriticalScore,omitempty"`

	// Unweighted score of only the critical questions in the group
	TotalCriticalScoreUnweighted float32 `json:"totalCriticalScoreUnweighted,omitempty"`

	// Score of only the non critical questions in the group
	TotalNonCriticalScore float32 `json:"totalNonCriticalScore,omitempty"`

	// Unweighted score of only the non critical questions in the group
	TotalNonCriticalScoreUnweighted float32 `json:"totalNonCriticalScoreUnweighted,omitempty"`

	// Score of all questions in the group
	TotalScore float32 `json:"totalScore,omitempty"`

	// Unweighted score of all questions in the group
	TotalScoreUnweighted float32 `json:"totalScoreUnweighted,omitempty"`
}

// Validate validates this evaluation question group score
func (m *EvaluationQuestionGroupScore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuestionScores(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationQuestionGroupScore) validateQuestionScores(formats strfmt.Registry) error {
	if swag.IsZero(m.QuestionScores) { // not required
		return nil
	}

	for i := 0; i < len(m.QuestionScores); i++ {
		if swag.IsZero(m.QuestionScores[i]) { // not required
			continue
		}

		if m.QuestionScores[i] != nil {
			if err := m.QuestionScores[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("questionScores" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("questionScores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this evaluation question group score based on the context it is used
func (m *EvaluationQuestionGroupScore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuestionScores(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationQuestionGroupScore) contextValidateQuestionScores(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.QuestionScores); i++ {

		if m.QuestionScores[i] != nil {
			if err := m.QuestionScores[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("questionScores" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("questionScores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EvaluationQuestionGroupScore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvaluationQuestionGroupScore) UnmarshalBinary(b []byte) error {
	var res EvaluationQuestionGroupScore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

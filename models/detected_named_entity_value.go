// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetectedNamedEntityValue detected named entity value
//
// swagger:model DetectedNamedEntityValue
type DetectedNamedEntityValue struct {

	// The raw value of the detected named entity.
	// Read Only: true
	Raw string `json:"raw,omitempty"`

	// The resolved value of the detected named entity.
	// Read Only: true
	Resolved string `json:"resolved,omitempty"`
}

// Validate validates this detected named entity value
func (m *DetectedNamedEntityValue) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this detected named entity value based on the context it is used
func (m *DetectedNamedEntityValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRaw(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResolved(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetectedNamedEntityValue) contextValidateRaw(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "raw", "body", string(m.Raw)); err != nil {
		return err
	}

	return nil
}

func (m *DetectedNamedEntityValue) contextValidateResolved(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "resolved", "body", string(m.Resolved)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DetectedNamedEntityValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DetectedNamedEntityValue) UnmarshalBinary(b []byte) error {
	var res DetectedNamedEntityValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

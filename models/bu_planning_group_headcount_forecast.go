// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BuPlanningGroupHeadcountForecast bu planning group headcount forecast
//
// swagger:model BuPlanningGroupHeadcountForecast
type BuPlanningGroupHeadcountForecast struct {

	// The planning group to which this portion of the headcount forecast applies
	PlanningGroup *PlanningGroupReference `json:"planningGroup,omitempty"`

	// Required headcount per interval, referenced against the reference start date
	RequiredPerInterval []float64 `json:"requiredPerInterval"`

	// Required headcount per interval without accounting for shrinkage, referenced against the reference start date
	RequiredWithoutShrinkagePerInterval []float64 `json:"requiredWithoutShrinkagePerInterval"`
}

// Validate validates this bu planning group headcount forecast
func (m *BuPlanningGroupHeadcountForecast) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlanningGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuPlanningGroupHeadcountForecast) validatePlanningGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanningGroup) { // not required
		return nil
	}

	if m.PlanningGroup != nil {
		if err := m.PlanningGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("planningGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuPlanningGroupHeadcountForecast) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuPlanningGroupHeadcountForecast) UnmarshalBinary(b []byte) error {
	var res BuPlanningGroupHeadcountForecast
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

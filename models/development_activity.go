// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevelopmentActivity Development Activity object
//
// swagger:model DevelopmentActivity
type DevelopmentActivity struct {

	// List of users attending the activity
	Attendees []*UserReference `json:"attendees"`

	// User that created activity
	// Read Only: true
	CreatedBy *UserReference `json:"createdBy,omitempty"`

	// Date that activity was completed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCompleted strfmt.DateTime `json:"dateCompleted,omitempty"`

	// Date activity was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Due date for completion of the activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateDue strfmt.DateTime `json:"dateDue,omitempty"`

	// Facilitator of the activity
	Facilitator *UserReference `json:"facilitator,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Indicates if the activity is overdue
	IsOverdue bool `json:"isOverdue"`

	// The name of the activity
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The status of the activity
	// Enum: [Planned InProgress Completed InvalidSchedule]
	Status string `json:"status,omitempty"`

	// The type of activity
	// Enum: [Informational Coaching AssessedContent Questionnaire]
	Type string `json:"type,omitempty"`
}

// Validate validates this development activity
func (m *DevelopmentActivity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttendees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateDue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFacilitator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevelopmentActivity) validateAttendees(formats strfmt.Registry) error {

	if swag.IsZero(m.Attendees) { // not required
		return nil
	}

	for i := 0; i < len(m.Attendees); i++ {
		if swag.IsZero(m.Attendees[i]) { // not required
			continue
		}

		if m.Attendees[i] != nil {
			if err := m.Attendees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attendees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DevelopmentActivity) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *DevelopmentActivity) validateDateCompleted(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCompleted) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCompleted", "body", "date-time", m.DateCompleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DevelopmentActivity) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DevelopmentActivity) validateDateDue(formats strfmt.Registry) error {

	if swag.IsZero(m.DateDue) { // not required
		return nil
	}

	if err := validate.FormatOf("dateDue", "body", "date-time", m.DateDue.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DevelopmentActivity) validateFacilitator(formats strfmt.Registry) error {

	if swag.IsZero(m.Facilitator) { // not required
		return nil
	}

	if m.Facilitator != nil {
		if err := m.Facilitator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("facilitator")
			}
			return err
		}
	}

	return nil
}

func (m *DevelopmentActivity) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var developmentActivityTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Planned","InProgress","Completed","InvalidSchedule"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		developmentActivityTypeStatusPropEnum = append(developmentActivityTypeStatusPropEnum, v)
	}
}

const (

	// DevelopmentActivityStatusPlanned captures enum value "Planned"
	DevelopmentActivityStatusPlanned string = "Planned"

	// DevelopmentActivityStatusInProgress captures enum value "InProgress"
	DevelopmentActivityStatusInProgress string = "InProgress"

	// DevelopmentActivityStatusCompleted captures enum value "Completed"
	DevelopmentActivityStatusCompleted string = "Completed"

	// DevelopmentActivityStatusInvalidSchedule captures enum value "InvalidSchedule"
	DevelopmentActivityStatusInvalidSchedule string = "InvalidSchedule"
)

// prop value enum
func (m *DevelopmentActivity) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, developmentActivityTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevelopmentActivity) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var developmentActivityTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Informational","Coaching","AssessedContent","Questionnaire"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		developmentActivityTypeTypePropEnum = append(developmentActivityTypeTypePropEnum, v)
	}
}

const (

	// DevelopmentActivityTypeInformational captures enum value "Informational"
	DevelopmentActivityTypeInformational string = "Informational"

	// DevelopmentActivityTypeCoaching captures enum value "Coaching"
	DevelopmentActivityTypeCoaching string = "Coaching"

	// DevelopmentActivityTypeAssessedContent captures enum value "AssessedContent"
	DevelopmentActivityTypeAssessedContent string = "AssessedContent"

	// DevelopmentActivityTypeQuestionnaire captures enum value "Questionnaire"
	DevelopmentActivityTypeQuestionnaire string = "Questionnaire"
)

// prop value enum
func (m *DevelopmentActivity) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, developmentActivityTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevelopmentActivity) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevelopmentActivity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevelopmentActivity) UnmarshalBinary(b []byte) error {
	var res DevelopmentActivity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DocumentQueryInterval document query interval
//
// swagger:model DocumentQueryInterval
type DocumentQueryInterval struct {

	// Specifies the date field to be used for date and time range.
	// Enum: [dateCreated dateModified datePublished]
	Field string `json:"field,omitempty"`

	// Specifies the date and time range for filtering the documents. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	Value string `json:"value,omitempty"`
}

// Validate validates this document query interval
func (m *DocumentQueryInterval) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var documentQueryIntervalTypeFieldPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dateCreated","dateModified","datePublished"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		documentQueryIntervalTypeFieldPropEnum = append(documentQueryIntervalTypeFieldPropEnum, v)
	}
}

const (

	// DocumentQueryIntervalFieldDateCreated captures enum value "dateCreated"
	DocumentQueryIntervalFieldDateCreated string = "dateCreated"

	// DocumentQueryIntervalFieldDateModified captures enum value "dateModified"
	DocumentQueryIntervalFieldDateModified string = "dateModified"

	// DocumentQueryIntervalFieldDatePublished captures enum value "datePublished"
	DocumentQueryIntervalFieldDatePublished string = "datePublished"
)

// prop value enum
func (m *DocumentQueryInterval) validateFieldEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, documentQueryIntervalTypeFieldPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DocumentQueryInterval) validateField(formats strfmt.Registry) error {
	if swag.IsZero(m.Field) { // not required
		return nil
	}

	// value enum
	if err := m.validateFieldEnum("field", "body", m.Field); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this document query interval based on context it is used
func (m *DocumentQueryInterval) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DocumentQueryInterval) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DocumentQueryInterval) UnmarshalBinary(b []byte) error {
	var res DocumentQueryInterval
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalyticsSurvey analytics survey
//
// swagger:model AnalyticsSurvey
type AnalyticsSurvey struct {

	// Specifies when a survey occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	EventTime strfmt.DateTime `json:"eventTime,omitempty"`

	// o survey total score
	OSurveyTotalScore int64 `json:"oSurveyTotalScore,omitempty"`

	// Unique identifier for the queue the conversation was on
	QueueID string `json:"queueId,omitempty"`

	// Completion date/time of the survey. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	SurveyCompletedDate strfmt.DateTime `json:"surveyCompletedDate,omitempty"`

	// Unique identifier for the survey form, regardless of version
	SurveyFormContextID string `json:"surveyFormContextId,omitempty"`

	// Unique identifier for the survey form
	SurveyFormID string `json:"surveyFormId,omitempty"`

	// Name of the survey form
	SurveyFormName string `json:"surveyFormName,omitempty"`

	// Unique identifier for the survey
	SurveyID string `json:"surveyId,omitempty"`

	// Promoter score of the survey
	SurveyPromoterScore int32 `json:"surveyPromoterScore,omitempty"`

	// Survey status
	SurveyStatus string `json:"surveyStatus,omitempty"`

	// A unique identifier of the PureCloud user
	UserID string `json:"userId,omitempty"`
}

// Validate validates this analytics survey
func (m *AnalyticsSurvey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSurveyCompletedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyticsSurvey) validateEventTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EventTime) { // not required
		return nil
	}

	if err := validate.FormatOf("eventTime", "body", "date-time", m.EventTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnalyticsSurvey) validateSurveyCompletedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.SurveyCompletedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("surveyCompletedDate", "body", "date-time", m.SurveyCompletedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnalyticsSurvey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalyticsSurvey) UnmarshalBinary(b []byte) error {
	var res AnalyticsSurvey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SurveyAssignment survey assignment
//
// swagger:model SurveyAssignment
type SurveyAssignment struct {

	// The URI reference to the flow associated with this survey.
	Flow *DomainEntityRef `json:"flow,omitempty"`

	// An ISO 8601 repeated interval consisting of the number of repetitions, the start datetime, and the interval (e.g. R2/2018-03-01T13:00:00Z/P1M10DT2H30M). Total duration must not exceed 90 days.
	InviteTimeInterval string `json:"inviteTimeInterval,omitempty"`

	// Validated email domain, required
	// Required: true
	SendingDomain *string `json:"sendingDomain"`

	// User together with sendingDomain used to send email, null to use no-reply
	SendingUser string `json:"sendingUser,omitempty"`

	// The survey form used for this survey.
	SurveyForm *PublishedSurveyFormReference `json:"surveyForm,omitempty"`
}

// Validate validates this survey assignment
func (m *SurveyAssignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSendingDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSurveyForm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SurveyAssignment) validateFlow(formats strfmt.Registry) error {
	if swag.IsZero(m.Flow) { // not required
		return nil
	}

	if m.Flow != nil {
		if err := m.Flow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flow")
			}
			return err
		}
	}

	return nil
}

func (m *SurveyAssignment) validateSendingDomain(formats strfmt.Registry) error {

	if err := validate.Required("sendingDomain", "body", m.SendingDomain); err != nil {
		return err
	}

	return nil
}

func (m *SurveyAssignment) validateSurveyForm(formats strfmt.Registry) error {
	if swag.IsZero(m.SurveyForm) { // not required
		return nil
	}

	if m.SurveyForm != nil {
		if err := m.SurveyForm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("surveyForm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("surveyForm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this survey assignment based on the context it is used
func (m *SurveyAssignment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFlow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSurveyForm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SurveyAssignment) contextValidateFlow(ctx context.Context, formats strfmt.Registry) error {

	if m.Flow != nil {
		if err := m.Flow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flow")
			}
			return err
		}
	}

	return nil
}

func (m *SurveyAssignment) contextValidateSurveyForm(ctx context.Context, formats strfmt.Registry) error {

	if m.SurveyForm != nil {
		if err := m.SurveyForm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("surveyForm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("surveyForm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SurveyAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SurveyAssignment) UnmarshalBinary(b []byte) error {
	var res SurveyAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BuAgentScheduleHistoryChange bu agent schedule history change
//
// swagger:model BuAgentScheduleHistoryChange
type BuAgentScheduleHistoryChange struct {

	// The deleted shifts, full day time off markers, or the entire agent schedule
	Deletes *BuAgentScheduleHistoryDeletedChange `json:"deletes,omitempty"`

	// The list of changed full day time off markers
	FullDayTimeOffMarkers []*BuFullDayTimeOffMarker `json:"fullDayTimeOffMarkers"`

	// The metadata of the change, including who and when the change was made
	Metadata *BuAgentScheduleHistoryChangeMetadata `json:"metadata,omitempty"`

	// The list of changed shifts
	Shifts []*BuAgentScheduleShift `json:"shifts"`
}

// Validate validates this bu agent schedule history change
func (m *BuAgentScheduleHistoryChange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeletes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullDayTimeOffMarkers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShifts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuAgentScheduleHistoryChange) validateDeletes(formats strfmt.Registry) error {
	if swag.IsZero(m.Deletes) { // not required
		return nil
	}

	if m.Deletes != nil {
		if err := m.Deletes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deletes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deletes")
			}
			return err
		}
	}

	return nil
}

func (m *BuAgentScheduleHistoryChange) validateFullDayTimeOffMarkers(formats strfmt.Registry) error {
	if swag.IsZero(m.FullDayTimeOffMarkers) { // not required
		return nil
	}

	for i := 0; i < len(m.FullDayTimeOffMarkers); i++ {
		if swag.IsZero(m.FullDayTimeOffMarkers[i]) { // not required
			continue
		}

		if m.FullDayTimeOffMarkers[i] != nil {
			if err := m.FullDayTimeOffMarkers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fullDayTimeOffMarkers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fullDayTimeOffMarkers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuAgentScheduleHistoryChange) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *BuAgentScheduleHistoryChange) validateShifts(formats strfmt.Registry) error {
	if swag.IsZero(m.Shifts) { // not required
		return nil
	}

	for i := 0; i < len(m.Shifts); i++ {
		if swag.IsZero(m.Shifts[i]) { // not required
			continue
		}

		if m.Shifts[i] != nil {
			if err := m.Shifts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shifts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shifts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this bu agent schedule history change based on the context it is used
func (m *BuAgentScheduleHistoryChange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeletes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullDayTimeOffMarkers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShifts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuAgentScheduleHistoryChange) contextValidateDeletes(ctx context.Context, formats strfmt.Registry) error {

	if m.Deletes != nil {
		if err := m.Deletes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deletes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deletes")
			}
			return err
		}
	}

	return nil
}

func (m *BuAgentScheduleHistoryChange) contextValidateFullDayTimeOffMarkers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FullDayTimeOffMarkers); i++ {

		if m.FullDayTimeOffMarkers[i] != nil {
			if err := m.FullDayTimeOffMarkers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fullDayTimeOffMarkers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fullDayTimeOffMarkers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuAgentScheduleHistoryChange) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *BuAgentScheduleHistoryChange) contextValidateShifts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Shifts); i++ {

		if m.Shifts[i] != nil {
			if err := m.Shifts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shifts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shifts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuAgentScheduleHistoryChange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuAgentScheduleHistoryChange) UnmarshalBinary(b []byte) error {
	var res BuAgentScheduleHistoryChange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebChatMessage web chat message
//
// swagger:model WebChatMessage
type WebChatMessage struct {

	// The message body.
	// Required: true
	Body *string `json:"body"`

	// The purpose of the message within the conversation, such as a standard text entry versus a greeting.
	// Required: true
	// Enum: [standard notice member-join member-leave media-request]
	BodyType *string `json:"bodyType"`

	// The identifier of the conversation
	// Required: true
	Conversation *WebChatConversation `json:"conversation"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The member who sent the message
	// Required: true
	Sender *WebChatMemberInfo `json:"sender"`

	// The timestamp of the message, in ISO-8601 format
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`
}

// Validate validates this web chat message
func (m *WebChatMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBodyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebChatMessage) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

var webChatMessageTypeBodyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["standard","notice","member-join","member-leave","media-request"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webChatMessageTypeBodyTypePropEnum = append(webChatMessageTypeBodyTypePropEnum, v)
	}
}

const (

	// WebChatMessageBodyTypeStandard captures enum value "standard"
	WebChatMessageBodyTypeStandard string = "standard"

	// WebChatMessageBodyTypeNotice captures enum value "notice"
	WebChatMessageBodyTypeNotice string = "notice"

	// WebChatMessageBodyTypeMemberJoin captures enum value "member-join"
	WebChatMessageBodyTypeMemberJoin string = "member-join"

	// WebChatMessageBodyTypeMemberLeave captures enum value "member-leave"
	WebChatMessageBodyTypeMemberLeave string = "member-leave"

	// WebChatMessageBodyTypeMediaRequest captures enum value "media-request"
	WebChatMessageBodyTypeMediaRequest string = "media-request"
)

// prop value enum
func (m *WebChatMessage) validateBodyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, webChatMessageTypeBodyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WebChatMessage) validateBodyType(formats strfmt.Registry) error {

	if err := validate.Required("bodyType", "body", m.BodyType); err != nil {
		return err
	}

	// value enum
	if err := m.validateBodyTypeEnum("bodyType", "body", *m.BodyType); err != nil {
		return err
	}

	return nil
}

func (m *WebChatMessage) validateConversation(formats strfmt.Registry) error {

	if err := validate.Required("conversation", "body", m.Conversation); err != nil {
		return err
	}

	if m.Conversation != nil {
		if err := m.Conversation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversation")
			}
			return err
		}
	}

	return nil
}

func (m *WebChatMessage) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WebChatMessage) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", m.Sender); err != nil {
		return err
	}

	if m.Sender != nil {
		if err := m.Sender.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sender")
			}
			return err
		}
	}

	return nil
}

func (m *WebChatMessage) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebChatMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebChatMessage) UnmarshalBinary(b []byte) error {
	var res WebChatMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Phrase phrase
//
// swagger:model Phrase
type Phrase struct {

	// The phrase sentiment, default value is Unspecified
	// Enum: [Unspecified Positive Neutral Negative]
	Sentiment string `json:"sentiment,omitempty"`

	// The phrase strictness, default value is null
	// Enum: [1 55 65 72 85 90]
	Strictness string `json:"strictness,omitempty"`

	// The phrase text
	// Required: true
	Text *string `json:"text"`
}

// Validate validates this phrase
func (m *Phrase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSentiment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrictness(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var phraseTypeSentimentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unspecified","Positive","Neutral","Negative"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phraseTypeSentimentPropEnum = append(phraseTypeSentimentPropEnum, v)
	}
}

const (

	// PhraseSentimentUnspecified captures enum value "Unspecified"
	PhraseSentimentUnspecified string = "Unspecified"

	// PhraseSentimentPositive captures enum value "Positive"
	PhraseSentimentPositive string = "Positive"

	// PhraseSentimentNeutral captures enum value "Neutral"
	PhraseSentimentNeutral string = "Neutral"

	// PhraseSentimentNegative captures enum value "Negative"
	PhraseSentimentNegative string = "Negative"
)

// prop value enum
func (m *Phrase) validateSentimentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, phraseTypeSentimentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Phrase) validateSentiment(formats strfmt.Registry) error {

	if swag.IsZero(m.Sentiment) { // not required
		return nil
	}

	// value enum
	if err := m.validateSentimentEnum("sentiment", "body", m.Sentiment); err != nil {
		return err
	}

	return nil
}

var phraseTypeStrictnessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1","55","65","72","85","90"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phraseTypeStrictnessPropEnum = append(phraseTypeStrictnessPropEnum, v)
	}
}

const (

	// PhraseStrictnessNr1 captures enum value "1"
	PhraseStrictnessNr1 string = "1"

	// PhraseStrictnessNr55 captures enum value "55"
	PhraseStrictnessNr55 string = "55"

	// PhraseStrictnessNr65 captures enum value "65"
	PhraseStrictnessNr65 string = "65"

	// PhraseStrictnessNr72 captures enum value "72"
	PhraseStrictnessNr72 string = "72"

	// PhraseStrictnessNr85 captures enum value "85"
	PhraseStrictnessNr85 string = "85"

	// PhraseStrictnessNr90 captures enum value "90"
	PhraseStrictnessNr90 string = "90"
)

// prop value enum
func (m *Phrase) validateStrictnessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, phraseTypeStrictnessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Phrase) validateStrictness(formats strfmt.Registry) error {

	if swag.IsZero(m.Strictness) { // not required
		return nil
	}

	// value enum
	if err := m.validateStrictnessEnum("strictness", "body", m.Strictness); err != nil {
		return err
	}

	return nil
}

func (m *Phrase) validateText(formats strfmt.Registry) error {

	if err := validate.Required("text", "body", m.Text); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Phrase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Phrase) UnmarshalBinary(b []byte) error {
	var res Phrase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

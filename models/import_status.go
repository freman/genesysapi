// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImportStatus import status
//
// swagger:model ImportStatus
type ImportStatus struct {

	// number of records finished importing
	// Required: true
	// Read Only: true
	CompletedRecords int64 `json:"completedRecords"`

	// if the import has failed, the reason for the failure
	// Read Only: true
	FailureReason string `json:"failureReason,omitempty"`

	// percentage of records finished importing
	// Required: true
	// Read Only: true
	PercentComplete int32 `json:"percentComplete"`

	// current status of the import
	// Required: true
	// Read Only: true
	// Enum: [IN_PROGRESS FAILED]
	State string `json:"state"`

	// total number of records to be imported
	// Required: true
	// Read Only: true
	TotalRecords int64 `json:"totalRecords"`
}

// Validate validates this import status
func (m *ImportStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedRecords(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentComplete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportStatus) validateCompletedRecords(formats strfmt.Registry) error {

	if err := validate.Required("completedRecords", "body", int64(m.CompletedRecords)); err != nil {
		return err
	}

	return nil
}

func (m *ImportStatus) validatePercentComplete(formats strfmt.Registry) error {

	if err := validate.Required("percentComplete", "body", int32(m.PercentComplete)); err != nil {
		return err
	}

	return nil
}

var importStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IN_PROGRESS","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		importStatusTypeStatePropEnum = append(importStatusTypeStatePropEnum, v)
	}
}

const (

	// ImportStatusStateINPROGRESS captures enum value "IN_PROGRESS"
	ImportStatusStateINPROGRESS string = "IN_PROGRESS"

	// ImportStatusStateFAILED captures enum value "FAILED"
	ImportStatusStateFAILED string = "FAILED"
)

// prop value enum
func (m *ImportStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, importStatusTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImportStatus) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *ImportStatus) validateTotalRecords(formats strfmt.Registry) error {

	if err := validate.Required("totalRecords", "body", int64(m.TotalRecords)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImportStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImportStatus) UnmarshalBinary(b []byte) error {
	var res ImportStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IdentifierClaimRequest identifier claim request
//
// swagger:model IdentifierClaimRequest
type IdentifierClaimRequest struct {

	// The identifier that should be claimed/released from a contact
	// Required: true
	Identifier *ContactIdentifier `json:"identifier"`

	// The operation to perform claim/release
	// Required: true
	// Enum: [Claim Release]
	Operation *string `json:"operation"`
}

// Validate validates this identifier claim request
func (m *IdentifierClaimRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdentifierClaimRequest) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	if m.Identifier != nil {
		if err := m.Identifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identifier")
			}
			return err
		}
	}

	return nil
}

var identifierClaimRequestTypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Claim","Release"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		identifierClaimRequestTypeOperationPropEnum = append(identifierClaimRequestTypeOperationPropEnum, v)
	}
}

const (

	// IdentifierClaimRequestOperationClaim captures enum value "Claim"
	IdentifierClaimRequestOperationClaim string = "Claim"

	// IdentifierClaimRequestOperationRelease captures enum value "Release"
	IdentifierClaimRequestOperationRelease string = "Release"
)

// prop value enum
func (m *IdentifierClaimRequest) validateOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, identifierClaimRequestTypeOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IdentifierClaimRequest) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperationEnum("operation", "body", *m.Operation); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this identifier claim request based on the context it is used
func (m *IdentifierClaimRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdentifierClaimRequest) contextValidateIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if m.Identifier != nil {
		if err := m.Identifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identifier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IdentifierClaimRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdentifierClaimRequest) UnmarshalBinary(b []byte) error {
	var res IdentifierClaimRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

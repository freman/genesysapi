// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FileUploadMode file upload mode
//
// swagger:model FileUploadMode
type FileUploadMode struct {

	// A list of supported content types for uploading files
	FileTypes []string `json:"fileTypes"`

	// The maximum file size for file uploads in kilobytes. Default is 10240 (10 MB)
	MaxFileSizeKB int64 `json:"maxFileSizeKB,omitempty"`
}

// Validate validates this file upload mode
func (m *FileUploadMode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fileUploadModeFileTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["image/jpeg","image/gif","image/png"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fileUploadModeFileTypesItemsEnum = append(fileUploadModeFileTypesItemsEnum, v)
	}
}

func (m *FileUploadMode) validateFileTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fileUploadModeFileTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FileUploadMode) validateFileTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.FileTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.FileTypes); i++ {

		// value enum
		if err := m.validateFileTypesItemsEnum("fileTypes"+"."+strconv.Itoa(i), "body", m.FileTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this file upload mode based on context it is used
func (m *FileUploadMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FileUploadMode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileUploadMode) UnmarshalBinary(b []byte) error {
	var res FileUploadMode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

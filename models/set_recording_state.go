// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SetRecordingState set recording state
//
// swagger:model SetRecordingState
type SetRecordingState struct {

	// The value of the recordingState to set.
	// Enum: [ACTIVE PAUSED NONE]
	RecordingState string `json:"recordingState,omitempty"`
}

// Validate validates this set recording state
func (m *SetRecordingState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecordingState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var setRecordingStateTypeRecordingStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","PAUSED","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		setRecordingStateTypeRecordingStatePropEnum = append(setRecordingStateTypeRecordingStatePropEnum, v)
	}
}

const (

	// SetRecordingStateRecordingStateACTIVE captures enum value "ACTIVE"
	SetRecordingStateRecordingStateACTIVE string = "ACTIVE"

	// SetRecordingStateRecordingStatePAUSED captures enum value "PAUSED"
	SetRecordingStateRecordingStatePAUSED string = "PAUSED"

	// SetRecordingStateRecordingStateNONE captures enum value "NONE"
	SetRecordingStateRecordingStateNONE string = "NONE"
)

// prop value enum
func (m *SetRecordingState) validateRecordingStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, setRecordingStateTypeRecordingStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SetRecordingState) validateRecordingState(formats strfmt.Registry) error {

	if swag.IsZero(m.RecordingState) { // not required
		return nil
	}

	// value enum
	if err := m.validateRecordingStateEnum("recordingState", "body", m.RecordingState); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SetRecordingState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetRecordingState) UnmarshalBinary(b []byte) error {
	var res SetRecordingState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntentFeedback intent feedback
//
// swagger:model IntentFeedback
type IntentFeedback struct {

	// The assessment on the detection for feedback text.
	// Enum: [Incorrect Correct Unknown Disabled]
	Assessment string `json:"assessment,omitempty"`

	// The collection of named entities detected.
	// Read Only: true
	Entities []*DetectedNamedEntity `json:"entities"`

	// The name of the detected intent.
	// Read Only: true
	Name string `json:"name,omitempty"`

	// The probability of the detected intent.
	// Read Only: true
	Probability float64 `json:"probability,omitempty"`
}

// Validate validates this intent feedback
func (m *IntentFeedback) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssessment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var intentFeedbackTypeAssessmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Incorrect","Correct","Unknown","Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		intentFeedbackTypeAssessmentPropEnum = append(intentFeedbackTypeAssessmentPropEnum, v)
	}
}

const (

	// IntentFeedbackAssessmentIncorrect captures enum value "Incorrect"
	IntentFeedbackAssessmentIncorrect string = "Incorrect"

	// IntentFeedbackAssessmentCorrect captures enum value "Correct"
	IntentFeedbackAssessmentCorrect string = "Correct"

	// IntentFeedbackAssessmentUnknown captures enum value "Unknown"
	IntentFeedbackAssessmentUnknown string = "Unknown"

	// IntentFeedbackAssessmentDisabled captures enum value "Disabled"
	IntentFeedbackAssessmentDisabled string = "Disabled"
)

// prop value enum
func (m *IntentFeedback) validateAssessmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, intentFeedbackTypeAssessmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntentFeedback) validateAssessment(formats strfmt.Registry) error {

	if swag.IsZero(m.Assessment) { // not required
		return nil
	}

	// value enum
	if err := m.validateAssessmentEnum("assessment", "body", m.Assessment); err != nil {
		return err
	}

	return nil
}

func (m *IntentFeedback) validateEntities(formats strfmt.Registry) error {

	if swag.IsZero(m.Entities) { // not required
		return nil
	}

	for i := 0; i < len(m.Entities); i++ {
		if swag.IsZero(m.Entities[i]) { // not required
			continue
		}

		if m.Entities[i] != nil {
			if err := m.Entities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntentFeedback) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntentFeedback) UnmarshalBinary(b []byte) error {
	var res IntentFeedback
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

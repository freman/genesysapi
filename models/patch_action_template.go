// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchActionTemplate patch action template
//
// swagger:model PatchActionTemplate
type PatchActionTemplate struct {

	// Properties used to configure an action of type content offer
	ContentOffer *PatchContentOffer `json:"contentOffer,omitempty"`

	// Description of the action template's functionality.
	Description string `json:"description,omitempty"`

	// Media type of action described by the action template.
	// Enum: [webchat webMessagingOffer contentOffer integrationAction architectFlow openAction]
	MediaType string `json:"mediaType,omitempty"`

	// Name of the action template.
	// Required: true
	Name *string `json:"name"`

	// Whether the action template is currently active, inactive or deleted.
	// Enum: [Active Inactive Deleted]
	State string `json:"state,omitempty"`
}

// Validate validates this patch action template
func (m *PatchActionTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentOffer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchActionTemplate) validateContentOffer(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentOffer) { // not required
		return nil
	}

	if m.ContentOffer != nil {
		if err := m.ContentOffer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentOffer")
			}
			return err
		}
	}

	return nil
}

var patchActionTemplateTypeMediaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["webchat","webMessagingOffer","contentOffer","integrationAction","architectFlow","openAction"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchActionTemplateTypeMediaTypePropEnum = append(patchActionTemplateTypeMediaTypePropEnum, v)
	}
}

const (

	// PatchActionTemplateMediaTypeWebchat captures enum value "webchat"
	PatchActionTemplateMediaTypeWebchat string = "webchat"

	// PatchActionTemplateMediaTypeWebMessagingOffer captures enum value "webMessagingOffer"
	PatchActionTemplateMediaTypeWebMessagingOffer string = "webMessagingOffer"

	// PatchActionTemplateMediaTypeContentOffer captures enum value "contentOffer"
	PatchActionTemplateMediaTypeContentOffer string = "contentOffer"

	// PatchActionTemplateMediaTypeIntegrationAction captures enum value "integrationAction"
	PatchActionTemplateMediaTypeIntegrationAction string = "integrationAction"

	// PatchActionTemplateMediaTypeArchitectFlow captures enum value "architectFlow"
	PatchActionTemplateMediaTypeArchitectFlow string = "architectFlow"

	// PatchActionTemplateMediaTypeOpenAction captures enum value "openAction"
	PatchActionTemplateMediaTypeOpenAction string = "openAction"
)

// prop value enum
func (m *PatchActionTemplate) validateMediaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchActionTemplateTypeMediaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PatchActionTemplate) validateMediaType(formats strfmt.Registry) error {

	if swag.IsZero(m.MediaType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMediaTypeEnum("mediaType", "body", m.MediaType); err != nil {
		return err
	}

	return nil
}

func (m *PatchActionTemplate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var patchActionTemplateTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive","Deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchActionTemplateTypeStatePropEnum = append(patchActionTemplateTypeStatePropEnum, v)
	}
}

const (

	// PatchActionTemplateStateActive captures enum value "Active"
	PatchActionTemplateStateActive string = "Active"

	// PatchActionTemplateStateInactive captures enum value "Inactive"
	PatchActionTemplateStateInactive string = "Inactive"

	// PatchActionTemplateStateDeleted captures enum value "Deleted"
	PatchActionTemplateStateDeleted string = "Deleted"
)

// prop value enum
func (m *PatchActionTemplate) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchActionTemplateTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PatchActionTemplate) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchActionTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchActionTemplate) UnmarshalBinary(b []byte) error {
	var res PatchActionTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

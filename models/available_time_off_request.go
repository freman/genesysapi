// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AvailableTimeOffRequest available time off request
//
// swagger:model AvailableTimeOffRequest
type AvailableTimeOffRequest struct {

	// The ID for activity code to query available time off minutes
	// Required: true
	ActivityCodeID *string `json:"activityCodeId"`

	// A list of date ranges of available time off minutes.
	DateRanges []*LocalDateRange `json:"dateRanges"`
}

// Validate validates this available time off request
func (m *AvailableTimeOffRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityCodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateRanges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailableTimeOffRequest) validateActivityCodeID(formats strfmt.Registry) error {

	if err := validate.Required("activityCodeId", "body", m.ActivityCodeID); err != nil {
		return err
	}

	return nil
}

func (m *AvailableTimeOffRequest) validateDateRanges(formats strfmt.Registry) error {

	if swag.IsZero(m.DateRanges) { // not required
		return nil
	}

	for i := 0; i < len(m.DateRanges); i++ {
		if swag.IsZero(m.DateRanges[i]) { // not required
			continue
		}

		if m.DateRanges[i] != nil {
			if err := m.DateRanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dateRanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AvailableTimeOffRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AvailableTimeOffRequest) UnmarshalBinary(b []byte) error {
	var res AvailableTimeOffRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkPlanConstraintMessage work plan constraint message
//
// swagger:model WorkPlanConstraintMessage
type WorkPlanConstraintMessage struct {

	// Arguments of the message that provide information about the constraint that is being conflicted with, such as the value of the constraint
	Arguments []*WorkPlanValidationMessageArgument `json:"arguments"`

	// Type of the work plan constraint in this message
	// Enum: [ActivityEarliestStartTimeMinutesFromMidnight ActivityEarliestStartTimeMinutesFromShiftStart ActivityLatestStartTimeMinutesFromMidnight ActivityLatestStartTimeMinutesFromShiftStart ActivityMinimumLengthFromShiftEndMinutes ActivityMinimumLengthFromShiftStartMinutes ActivityStartTimeIncrementInMinutes PlanningPeriodMaximumDaysOff PlanningPeriodMaximumPaidTimeMinutes PlanningPeriodMinimumDaysOff PlanningPeriodMinimumPaidTimeMinutes ShiftDayOffRule ShiftEarliestStartTimeMinutesFromMidnight ShiftEarliestStopTimeMinutesFromMidnight ShiftLatestStartTimeMinutesFromMidnight ShiftLatestStopTimeMinutesFromMidnight ShiftMaximumContiguousTimeMinutes ShiftMaximumPaidTimeMinutes ShiftMinimumContiguousTimeMinutes ShiftMinimumPaidTimeMinutes ShiftStartTimeIncrementInMinutes ShiftStartVarianceMaximumVarianceMinutes ShiftStartVariancePaidDuration WorkPlanMaximumConsecutiveWorkingDays WorkPlanMaximumConsecutiveWorkingWeekends WorkPlanMaximumWeeklyPaidTimeMinutes WorkPlanMaximumWorkingDaysPerWeek WorkPlanMinimumConsecutiveNonWorkingTimePerWeekMinutes WorkPlanMinimumInterShiftTimeMinutes WorkPlanMinimumShiftStartDistanceMinutes WorkPlanMinimumWeeklyPaidTimeMinutes WorkPlanMinimumWorkingDaysPerWeek WorkPlanOptionalDays WorkPlanPaidTimeGranularityMinutes]
	Type string `json:"type,omitempty"`
}

// Validate validates this work plan constraint message
func (m *WorkPlanConstraintMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArguments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkPlanConstraintMessage) validateArguments(formats strfmt.Registry) error {
	if swag.IsZero(m.Arguments) { // not required
		return nil
	}

	for i := 0; i < len(m.Arguments); i++ {
		if swag.IsZero(m.Arguments[i]) { // not required
			continue
		}

		if m.Arguments[i] != nil {
			if err := m.Arguments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arguments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("arguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var workPlanConstraintMessageTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ActivityEarliestStartTimeMinutesFromMidnight","ActivityEarliestStartTimeMinutesFromShiftStart","ActivityLatestStartTimeMinutesFromMidnight","ActivityLatestStartTimeMinutesFromShiftStart","ActivityMinimumLengthFromShiftEndMinutes","ActivityMinimumLengthFromShiftStartMinutes","ActivityStartTimeIncrementInMinutes","PlanningPeriodMaximumDaysOff","PlanningPeriodMaximumPaidTimeMinutes","PlanningPeriodMinimumDaysOff","PlanningPeriodMinimumPaidTimeMinutes","ShiftDayOffRule","ShiftEarliestStartTimeMinutesFromMidnight","ShiftEarliestStopTimeMinutesFromMidnight","ShiftLatestStartTimeMinutesFromMidnight","ShiftLatestStopTimeMinutesFromMidnight","ShiftMaximumContiguousTimeMinutes","ShiftMaximumPaidTimeMinutes","ShiftMinimumContiguousTimeMinutes","ShiftMinimumPaidTimeMinutes","ShiftStartTimeIncrementInMinutes","ShiftStartVarianceMaximumVarianceMinutes","ShiftStartVariancePaidDuration","WorkPlanMaximumConsecutiveWorkingDays","WorkPlanMaximumConsecutiveWorkingWeekends","WorkPlanMaximumWeeklyPaidTimeMinutes","WorkPlanMaximumWorkingDaysPerWeek","WorkPlanMinimumConsecutiveNonWorkingTimePerWeekMinutes","WorkPlanMinimumInterShiftTimeMinutes","WorkPlanMinimumShiftStartDistanceMinutes","WorkPlanMinimumWeeklyPaidTimeMinutes","WorkPlanMinimumWorkingDaysPerWeek","WorkPlanOptionalDays","WorkPlanPaidTimeGranularityMinutes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workPlanConstraintMessageTypeTypePropEnum = append(workPlanConstraintMessageTypeTypePropEnum, v)
	}
}

const (

	// WorkPlanConstraintMessageTypeActivityEarliestStartTimeMinutesFromMidnight captures enum value "ActivityEarliestStartTimeMinutesFromMidnight"
	WorkPlanConstraintMessageTypeActivityEarliestStartTimeMinutesFromMidnight string = "ActivityEarliestStartTimeMinutesFromMidnight"

	// WorkPlanConstraintMessageTypeActivityEarliestStartTimeMinutesFromShiftStart captures enum value "ActivityEarliestStartTimeMinutesFromShiftStart"
	WorkPlanConstraintMessageTypeActivityEarliestStartTimeMinutesFromShiftStart string = "ActivityEarliestStartTimeMinutesFromShiftStart"

	// WorkPlanConstraintMessageTypeActivityLatestStartTimeMinutesFromMidnight captures enum value "ActivityLatestStartTimeMinutesFromMidnight"
	WorkPlanConstraintMessageTypeActivityLatestStartTimeMinutesFromMidnight string = "ActivityLatestStartTimeMinutesFromMidnight"

	// WorkPlanConstraintMessageTypeActivityLatestStartTimeMinutesFromShiftStart captures enum value "ActivityLatestStartTimeMinutesFromShiftStart"
	WorkPlanConstraintMessageTypeActivityLatestStartTimeMinutesFromShiftStart string = "ActivityLatestStartTimeMinutesFromShiftStart"

	// WorkPlanConstraintMessageTypeActivityMinimumLengthFromShiftEndMinutes captures enum value "ActivityMinimumLengthFromShiftEndMinutes"
	WorkPlanConstraintMessageTypeActivityMinimumLengthFromShiftEndMinutes string = "ActivityMinimumLengthFromShiftEndMinutes"

	// WorkPlanConstraintMessageTypeActivityMinimumLengthFromShiftStartMinutes captures enum value "ActivityMinimumLengthFromShiftStartMinutes"
	WorkPlanConstraintMessageTypeActivityMinimumLengthFromShiftStartMinutes string = "ActivityMinimumLengthFromShiftStartMinutes"

	// WorkPlanConstraintMessageTypeActivityStartTimeIncrementInMinutes captures enum value "ActivityStartTimeIncrementInMinutes"
	WorkPlanConstraintMessageTypeActivityStartTimeIncrementInMinutes string = "ActivityStartTimeIncrementInMinutes"

	// WorkPlanConstraintMessageTypePlanningPeriodMaximumDaysOff captures enum value "PlanningPeriodMaximumDaysOff"
	WorkPlanConstraintMessageTypePlanningPeriodMaximumDaysOff string = "PlanningPeriodMaximumDaysOff"

	// WorkPlanConstraintMessageTypePlanningPeriodMaximumPaidTimeMinutes captures enum value "PlanningPeriodMaximumPaidTimeMinutes"
	WorkPlanConstraintMessageTypePlanningPeriodMaximumPaidTimeMinutes string = "PlanningPeriodMaximumPaidTimeMinutes"

	// WorkPlanConstraintMessageTypePlanningPeriodMinimumDaysOff captures enum value "PlanningPeriodMinimumDaysOff"
	WorkPlanConstraintMessageTypePlanningPeriodMinimumDaysOff string = "PlanningPeriodMinimumDaysOff"

	// WorkPlanConstraintMessageTypePlanningPeriodMinimumPaidTimeMinutes captures enum value "PlanningPeriodMinimumPaidTimeMinutes"
	WorkPlanConstraintMessageTypePlanningPeriodMinimumPaidTimeMinutes string = "PlanningPeriodMinimumPaidTimeMinutes"

	// WorkPlanConstraintMessageTypeShiftDayOffRule captures enum value "ShiftDayOffRule"
	WorkPlanConstraintMessageTypeShiftDayOffRule string = "ShiftDayOffRule"

	// WorkPlanConstraintMessageTypeShiftEarliestStartTimeMinutesFromMidnight captures enum value "ShiftEarliestStartTimeMinutesFromMidnight"
	WorkPlanConstraintMessageTypeShiftEarliestStartTimeMinutesFromMidnight string = "ShiftEarliestStartTimeMinutesFromMidnight"

	// WorkPlanConstraintMessageTypeShiftEarliestStopTimeMinutesFromMidnight captures enum value "ShiftEarliestStopTimeMinutesFromMidnight"
	WorkPlanConstraintMessageTypeShiftEarliestStopTimeMinutesFromMidnight string = "ShiftEarliestStopTimeMinutesFromMidnight"

	// WorkPlanConstraintMessageTypeShiftLatestStartTimeMinutesFromMidnight captures enum value "ShiftLatestStartTimeMinutesFromMidnight"
	WorkPlanConstraintMessageTypeShiftLatestStartTimeMinutesFromMidnight string = "ShiftLatestStartTimeMinutesFromMidnight"

	// WorkPlanConstraintMessageTypeShiftLatestStopTimeMinutesFromMidnight captures enum value "ShiftLatestStopTimeMinutesFromMidnight"
	WorkPlanConstraintMessageTypeShiftLatestStopTimeMinutesFromMidnight string = "ShiftLatestStopTimeMinutesFromMidnight"

	// WorkPlanConstraintMessageTypeShiftMaximumContiguousTimeMinutes captures enum value "ShiftMaximumContiguousTimeMinutes"
	WorkPlanConstraintMessageTypeShiftMaximumContiguousTimeMinutes string = "ShiftMaximumContiguousTimeMinutes"

	// WorkPlanConstraintMessageTypeShiftMaximumPaidTimeMinutes captures enum value "ShiftMaximumPaidTimeMinutes"
	WorkPlanConstraintMessageTypeShiftMaximumPaidTimeMinutes string = "ShiftMaximumPaidTimeMinutes"

	// WorkPlanConstraintMessageTypeShiftMinimumContiguousTimeMinutes captures enum value "ShiftMinimumContiguousTimeMinutes"
	WorkPlanConstraintMessageTypeShiftMinimumContiguousTimeMinutes string = "ShiftMinimumContiguousTimeMinutes"

	// WorkPlanConstraintMessageTypeShiftMinimumPaidTimeMinutes captures enum value "ShiftMinimumPaidTimeMinutes"
	WorkPlanConstraintMessageTypeShiftMinimumPaidTimeMinutes string = "ShiftMinimumPaidTimeMinutes"

	// WorkPlanConstraintMessageTypeShiftStartTimeIncrementInMinutes captures enum value "ShiftStartTimeIncrementInMinutes"
	WorkPlanConstraintMessageTypeShiftStartTimeIncrementInMinutes string = "ShiftStartTimeIncrementInMinutes"

	// WorkPlanConstraintMessageTypeShiftStartVarianceMaximumVarianceMinutes captures enum value "ShiftStartVarianceMaximumVarianceMinutes"
	WorkPlanConstraintMessageTypeShiftStartVarianceMaximumVarianceMinutes string = "ShiftStartVarianceMaximumVarianceMinutes"

	// WorkPlanConstraintMessageTypeShiftStartVariancePaidDuration captures enum value "ShiftStartVariancePaidDuration"
	WorkPlanConstraintMessageTypeShiftStartVariancePaidDuration string = "ShiftStartVariancePaidDuration"

	// WorkPlanConstraintMessageTypeWorkPlanMaximumConsecutiveWorkingDays captures enum value "WorkPlanMaximumConsecutiveWorkingDays"
	WorkPlanConstraintMessageTypeWorkPlanMaximumConsecutiveWorkingDays string = "WorkPlanMaximumConsecutiveWorkingDays"

	// WorkPlanConstraintMessageTypeWorkPlanMaximumConsecutiveWorkingWeekends captures enum value "WorkPlanMaximumConsecutiveWorkingWeekends"
	WorkPlanConstraintMessageTypeWorkPlanMaximumConsecutiveWorkingWeekends string = "WorkPlanMaximumConsecutiveWorkingWeekends"

	// WorkPlanConstraintMessageTypeWorkPlanMaximumWeeklyPaidTimeMinutes captures enum value "WorkPlanMaximumWeeklyPaidTimeMinutes"
	WorkPlanConstraintMessageTypeWorkPlanMaximumWeeklyPaidTimeMinutes string = "WorkPlanMaximumWeeklyPaidTimeMinutes"

	// WorkPlanConstraintMessageTypeWorkPlanMaximumWorkingDaysPerWeek captures enum value "WorkPlanMaximumWorkingDaysPerWeek"
	WorkPlanConstraintMessageTypeWorkPlanMaximumWorkingDaysPerWeek string = "WorkPlanMaximumWorkingDaysPerWeek"

	// WorkPlanConstraintMessageTypeWorkPlanMinimumConsecutiveNonWorkingTimePerWeekMinutes captures enum value "WorkPlanMinimumConsecutiveNonWorkingTimePerWeekMinutes"
	WorkPlanConstraintMessageTypeWorkPlanMinimumConsecutiveNonWorkingTimePerWeekMinutes string = "WorkPlanMinimumConsecutiveNonWorkingTimePerWeekMinutes"

	// WorkPlanConstraintMessageTypeWorkPlanMinimumInterShiftTimeMinutes captures enum value "WorkPlanMinimumInterShiftTimeMinutes"
	WorkPlanConstraintMessageTypeWorkPlanMinimumInterShiftTimeMinutes string = "WorkPlanMinimumInterShiftTimeMinutes"

	// WorkPlanConstraintMessageTypeWorkPlanMinimumShiftStartDistanceMinutes captures enum value "WorkPlanMinimumShiftStartDistanceMinutes"
	WorkPlanConstraintMessageTypeWorkPlanMinimumShiftStartDistanceMinutes string = "WorkPlanMinimumShiftStartDistanceMinutes"

	// WorkPlanConstraintMessageTypeWorkPlanMinimumWeeklyPaidTimeMinutes captures enum value "WorkPlanMinimumWeeklyPaidTimeMinutes"
	WorkPlanConstraintMessageTypeWorkPlanMinimumWeeklyPaidTimeMinutes string = "WorkPlanMinimumWeeklyPaidTimeMinutes"

	// WorkPlanConstraintMessageTypeWorkPlanMinimumWorkingDaysPerWeek captures enum value "WorkPlanMinimumWorkingDaysPerWeek"
	WorkPlanConstraintMessageTypeWorkPlanMinimumWorkingDaysPerWeek string = "WorkPlanMinimumWorkingDaysPerWeek"

	// WorkPlanConstraintMessageTypeWorkPlanOptionalDays captures enum value "WorkPlanOptionalDays"
	WorkPlanConstraintMessageTypeWorkPlanOptionalDays string = "WorkPlanOptionalDays"

	// WorkPlanConstraintMessageTypeWorkPlanPaidTimeGranularityMinutes captures enum value "WorkPlanPaidTimeGranularityMinutes"
	WorkPlanConstraintMessageTypeWorkPlanPaidTimeGranularityMinutes string = "WorkPlanPaidTimeGranularityMinutes"
)

// prop value enum
func (m *WorkPlanConstraintMessage) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workPlanConstraintMessageTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkPlanConstraintMessage) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this work plan constraint message based on the context it is used
func (m *WorkPlanConstraintMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArguments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkPlanConstraintMessage) contextValidateArguments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Arguments); i++ {

		if m.Arguments[i] != nil {
			if err := m.Arguments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arguments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("arguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkPlanConstraintMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkPlanConstraintMessage) UnmarshalBinary(b []byte) error {
	var res WorkPlanConstraintMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

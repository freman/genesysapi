// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CallTarget call target
//
// swagger:model CallTarget
type CallTarget struct {

	// The type of call
	// Enum: [STATION PHONENUMBER]
	Type string `json:"type,omitempty"`

	// The id of the station or an E.164 formatted phone number
	Value string `json:"value,omitempty"`
}

// Validate validates this call target
func (m *CallTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var callTargetTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STATION","PHONENUMBER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callTargetTypeTypePropEnum = append(callTargetTypeTypePropEnum, v)
	}
}

const (

	// CallTargetTypeSTATION captures enum value "STATION"
	CallTargetTypeSTATION string = "STATION"

	// CallTargetTypePHONENUMBER captures enum value "PHONENUMBER"
	CallTargetTypePHONENUMBER string = "PHONENUMBER"
)

// prop value enum
func (m *CallTarget) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, callTargetTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CallTarget) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this call target based on context it is used
func (m *CallTarget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CallTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CallTarget) UnmarshalBinary(b []byte) error {
	var res CallTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

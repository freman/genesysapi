// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SingleWorkdayAveragePoints single workday average points
//
// swagger:model SingleWorkdayAveragePoints
type SingleWorkdayAveragePoints struct {

	// The average points per agent earned within the division
	// Read Only: true
	AveragePoints float64 `json:"averagePoints,omitempty"`

	// Queried target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Read Only: true
	// Format: date
	DateWorkday strfmt.Date `json:"dateWorkday,omitempty"`

	// The targeted division for the average points
	// Read Only: true
	Division *Division `json:"division,omitempty"`

	// The targeted performance profile for the average points
	// Read Only: true
	PerformanceProfile *AddressableEntityRef `json:"performanceProfile,omitempty"`
}

// Validate validates this single workday average points
func (m *SingleWorkdayAveragePoints) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateWorkday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformanceProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SingleWorkdayAveragePoints) validateDateWorkday(formats strfmt.Registry) error {
	if swag.IsZero(m.DateWorkday) { // not required
		return nil
	}

	if err := validate.FormatOf("dateWorkday", "body", "date", m.DateWorkday.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SingleWorkdayAveragePoints) validateDivision(formats strfmt.Registry) error {
	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if m.Division != nil {
		if err := m.Division.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

func (m *SingleWorkdayAveragePoints) validatePerformanceProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformanceProfile) { // not required
		return nil
	}

	if m.PerformanceProfile != nil {
		if err := m.PerformanceProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performanceProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("performanceProfile")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this single workday average points based on the context it is used
func (m *SingleWorkdayAveragePoints) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAveragePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateWorkday(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDivision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerformanceProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SingleWorkdayAveragePoints) contextValidateAveragePoints(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "averagePoints", "body", float64(m.AveragePoints)); err != nil {
		return err
	}

	return nil
}

func (m *SingleWorkdayAveragePoints) contextValidateDateWorkday(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateWorkday", "body", strfmt.Date(m.DateWorkday)); err != nil {
		return err
	}

	return nil
}

func (m *SingleWorkdayAveragePoints) contextValidateDivision(ctx context.Context, formats strfmt.Registry) error {

	if m.Division != nil {
		if err := m.Division.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

func (m *SingleWorkdayAveragePoints) contextValidatePerformanceProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.PerformanceProfile != nil {
		if err := m.PerformanceProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performanceProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("performanceProfile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SingleWorkdayAveragePoints) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SingleWorkdayAveragePoints) UnmarshalBinary(b []byte) error {
	var res SingleWorkdayAveragePoints
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

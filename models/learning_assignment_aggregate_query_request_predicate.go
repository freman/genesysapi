// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LearningAssignmentAggregateQueryRequestPredicate learning assignment aggregate query request predicate
//
// swagger:model LearningAssignmentAggregateQueryRequestPredicate
type LearningAssignmentAggregateQueryRequestPredicate struct {

	// Each predicates specifies a dimension.
	// Required: true
	// Enum: [attendeeId type moduleId isPassed]
	Dimension *string `json:"dimension"`

	// Corresponding value for dimensions in predicates. If the dimension is type, Valid Values: Informational, AssessedContent, Assessment
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this learning assignment aggregate query request predicate
func (m *LearningAssignmentAggregateQueryRequestPredicate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var learningAssignmentAggregateQueryRequestPredicateTypeDimensionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["attendeeId","type","moduleId","isPassed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		learningAssignmentAggregateQueryRequestPredicateTypeDimensionPropEnum = append(learningAssignmentAggregateQueryRequestPredicateTypeDimensionPropEnum, v)
	}
}

const (

	// LearningAssignmentAggregateQueryRequestPredicateDimensionAttendeeID captures enum value "attendeeId"
	LearningAssignmentAggregateQueryRequestPredicateDimensionAttendeeID string = "attendeeId"

	// LearningAssignmentAggregateQueryRequestPredicateDimensionType captures enum value "type"
	LearningAssignmentAggregateQueryRequestPredicateDimensionType string = "type"

	// LearningAssignmentAggregateQueryRequestPredicateDimensionModuleID captures enum value "moduleId"
	LearningAssignmentAggregateQueryRequestPredicateDimensionModuleID string = "moduleId"

	// LearningAssignmentAggregateQueryRequestPredicateDimensionIsPassed captures enum value "isPassed"
	LearningAssignmentAggregateQueryRequestPredicateDimensionIsPassed string = "isPassed"
)

// prop value enum
func (m *LearningAssignmentAggregateQueryRequestPredicate) validateDimensionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, learningAssignmentAggregateQueryRequestPredicateTypeDimensionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LearningAssignmentAggregateQueryRequestPredicate) validateDimension(formats strfmt.Registry) error {

	if err := validate.Required("dimension", "body", m.Dimension); err != nil {
		return err
	}

	// value enum
	if err := m.validateDimensionEnum("dimension", "body", *m.Dimension); err != nil {
		return err
	}

	return nil
}

func (m *LearningAssignmentAggregateQueryRequestPredicate) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this learning assignment aggregate query request predicate based on context it is used
func (m *LearningAssignmentAggregateQueryRequestPredicate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LearningAssignmentAggregateQueryRequestPredicate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LearningAssignmentAggregateQueryRequestPredicate) UnmarshalBinary(b []byte) error {
	var res LearningAssignmentAggregateQueryRequestPredicate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

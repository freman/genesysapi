// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TeamAddMemberFailure team add member failure
//
// swagger:model TeamAddMemberFailure
type TeamAddMemberFailure struct {

	// id
	ID string `json:"id,omitempty"`

	// Specific reason the member could not be added.
	// Read Only: true
	// Enum: [UserNotFound UserGroupLimitExceeded UserGroupDivisionMismatch]
	Reason string `json:"reason,omitempty"`
}

// Validate validates this team add member failure
func (m *TeamAddMemberFailure) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var teamAddMemberFailureTypeReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UserNotFound","UserGroupLimitExceeded","UserGroupDivisionMismatch"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		teamAddMemberFailureTypeReasonPropEnum = append(teamAddMemberFailureTypeReasonPropEnum, v)
	}
}

const (

	// TeamAddMemberFailureReasonUserNotFound captures enum value "UserNotFound"
	TeamAddMemberFailureReasonUserNotFound string = "UserNotFound"

	// TeamAddMemberFailureReasonUserGroupLimitExceeded captures enum value "UserGroupLimitExceeded"
	TeamAddMemberFailureReasonUserGroupLimitExceeded string = "UserGroupLimitExceeded"

	// TeamAddMemberFailureReasonUserGroupDivisionMismatch captures enum value "UserGroupDivisionMismatch"
	TeamAddMemberFailureReasonUserGroupDivisionMismatch string = "UserGroupDivisionMismatch"
)

// prop value enum
func (m *TeamAddMemberFailure) validateReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, teamAddMemberFailureTypeReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TeamAddMemberFailure) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	// value enum
	if err := m.validateReasonEnum("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this team add member failure based on the context it is used
func (m *TeamAddMemberFailure) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamAddMemberFailure) contextValidateReason(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "reason", "body", string(m.Reason)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TeamAddMemberFailure) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamAddMemberFailure) UnmarshalBinary(b []byte) error {
	var res TeamAddMemberFailure
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

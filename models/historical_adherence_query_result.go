// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HistoricalAdherenceQueryResult historical adherence query result
//
// swagger:model HistoricalAdherenceQueryResult
type HistoricalAdherenceQueryResult struct {

	// List of actual activity with offset for this user
	Actuals []*HistoricalAdherenceActuals `json:"actuals"`

	// Adherence percentage for this user, in the scale of 0 - 100
	AdherencePercentage float64 `json:"adherencePercentage,omitempty"`

	// Conformance percentage for this user, in the scale of 0 - 100. Conformance percentage can be greater than 100 when the actual on queue time is greater than the scheduled on queue time for the same period.
	ConformancePercentage float64 `json:"conformancePercentage,omitempty"`

	// Adherence and conformance metrics for days in query range
	DayMetrics []*HistoricalAdherenceDayMetrics `json:"dayMetrics"`

	// End of the date range that was queried, in ISO-8601 format. If it was not set, end date will be set to the queried time
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// List of adherence exceptions for this user
	ExceptionInfo []*HistoricalAdherenceExceptionInfo `json:"exceptionInfo"`

	// The impact of the current adherence state for this user
	// Enum: [Positive Negative Neutral Unknown]
	Impact string `json:"impact,omitempty"`

	// Beginning of the date range that was queried, in ISO-8601 format
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// The ID of the user for whom the adherence is queried
	UserID string `json:"userId,omitempty"`
}

// Validate validates this historical adherence query result
func (m *HistoricalAdherenceQueryResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActuals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExceptionInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HistoricalAdherenceQueryResult) validateActuals(formats strfmt.Registry) error {

	if swag.IsZero(m.Actuals) { // not required
		return nil
	}

	for i := 0; i < len(m.Actuals); i++ {
		if swag.IsZero(m.Actuals[i]) { // not required
			continue
		}

		if m.Actuals[i] != nil {
			if err := m.Actuals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actuals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HistoricalAdherenceQueryResult) validateDayMetrics(formats strfmt.Registry) error {

	if swag.IsZero(m.DayMetrics) { // not required
		return nil
	}

	for i := 0; i < len(m.DayMetrics); i++ {
		if swag.IsZero(m.DayMetrics[i]) { // not required
			continue
		}

		if m.DayMetrics[i] != nil {
			if err := m.DayMetrics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dayMetrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HistoricalAdherenceQueryResult) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *HistoricalAdherenceQueryResult) validateExceptionInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ExceptionInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.ExceptionInfo); i++ {
		if swag.IsZero(m.ExceptionInfo[i]) { // not required
			continue
		}

		if m.ExceptionInfo[i] != nil {
			if err := m.ExceptionInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exceptionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var historicalAdherenceQueryResultTypeImpactPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Positive","Negative","Neutral","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historicalAdherenceQueryResultTypeImpactPropEnum = append(historicalAdherenceQueryResultTypeImpactPropEnum, v)
	}
}

const (

	// HistoricalAdherenceQueryResultImpactPositive captures enum value "Positive"
	HistoricalAdherenceQueryResultImpactPositive string = "Positive"

	// HistoricalAdherenceQueryResultImpactNegative captures enum value "Negative"
	HistoricalAdherenceQueryResultImpactNegative string = "Negative"

	// HistoricalAdherenceQueryResultImpactNeutral captures enum value "Neutral"
	HistoricalAdherenceQueryResultImpactNeutral string = "Neutral"

	// HistoricalAdherenceQueryResultImpactUnknown captures enum value "Unknown"
	HistoricalAdherenceQueryResultImpactUnknown string = "Unknown"
)

// prop value enum
func (m *HistoricalAdherenceQueryResult) validateImpactEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historicalAdherenceQueryResultTypeImpactPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HistoricalAdherenceQueryResult) validateImpact(formats strfmt.Registry) error {

	if swag.IsZero(m.Impact) { // not required
		return nil
	}

	// value enum
	if err := m.validateImpactEnum("impact", "body", m.Impact); err != nil {
		return err
	}

	return nil
}

func (m *HistoricalAdherenceQueryResult) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HistoricalAdherenceQueryResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoricalAdherenceQueryResult) UnmarshalBinary(b []byte) error {
	var res HistoricalAdherenceQueryResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

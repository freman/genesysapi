// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ValidationLimits validation limits
//
// swagger:model ValidationLimits
type ValidationLimits struct {

	// max items
	MaxItems *MaxLength `json:"maxItems,omitempty"`

	// max length
	MaxLength *MaxLength `json:"maxLength,omitempty"`

	// maximum
	Maximum *MaxLength `json:"maximum,omitempty"`

	// min items
	MinItems *MinLength `json:"minItems,omitempty"`

	// min length
	MinLength *MinLength `json:"minLength,omitempty"`

	// minimum
	Minimum *MinLength `json:"minimum,omitempty"`
}

// Validate validates this validation limits
func (m *ValidationLimits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaximum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidationLimits) validateMaxItems(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxItems) { // not required
		return nil
	}

	if m.MaxItems != nil {
		if err := m.MaxItems.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxItems")
			}
			return err
		}
	}

	return nil
}

func (m *ValidationLimits) validateMaxLength(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxLength) { // not required
		return nil
	}

	if m.MaxLength != nil {
		if err := m.MaxLength.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxLength")
			}
			return err
		}
	}

	return nil
}

func (m *ValidationLimits) validateMaximum(formats strfmt.Registry) error {

	if swag.IsZero(m.Maximum) { // not required
		return nil
	}

	if m.Maximum != nil {
		if err := m.Maximum.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maximum")
			}
			return err
		}
	}

	return nil
}

func (m *ValidationLimits) validateMinItems(formats strfmt.Registry) error {

	if swag.IsZero(m.MinItems) { // not required
		return nil
	}

	if m.MinItems != nil {
		if err := m.MinItems.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minItems")
			}
			return err
		}
	}

	return nil
}

func (m *ValidationLimits) validateMinLength(formats strfmt.Registry) error {

	if swag.IsZero(m.MinLength) { // not required
		return nil
	}

	if m.MinLength != nil {
		if err := m.MinLength.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minLength")
			}
			return err
		}
	}

	return nil
}

func (m *ValidationLimits) validateMinimum(formats strfmt.Registry) error {

	if swag.IsZero(m.Minimum) { // not required
		return nil
	}

	if m.Minimum != nil {
		if err := m.Minimum.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minimum")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidationLimits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidationLimits) UnmarshalBinary(b []byte) error {
	var res ValidationLimits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

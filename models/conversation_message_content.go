// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConversationMessageContent Message content element.
//
// swagger:model ConversationMessageContent
type ConversationMessageContent struct {

	// Attachment content.
	Attachment *ConversationContentAttachment `json:"attachment,omitempty"`

	// Button response content.
	ButtonResponse *ConversationContentButtonResponse `json:"buttonResponse,omitempty"`

	// Type of this content element. If contentType = "Attachment" only one item is allowed.
	// Required: true
	// Enum: [Attachment QuickReply Notification ButtonResponse GenericTemplate]
	ContentType *string `json:"contentType"`

	// Generic Template Object
	Generic *ContentGeneric `json:"generic,omitempty"`

	// Quick reply content.
	QuickReply *ConversationContentQuickReply `json:"quickReply,omitempty"`

	// Template notification content.
	Template *ConversationContentNotificationTemplate `json:"template,omitempty"`
}

// Validate validates this conversation message content
func (m *ConversationMessageContent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateButtonResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuickReply(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConversationMessageContent) validateAttachment(formats strfmt.Registry) error {

	if swag.IsZero(m.Attachment) { // not required
		return nil
	}

	if m.Attachment != nil {
		if err := m.Attachment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachment")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) validateButtonResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.ButtonResponse) { // not required
		return nil
	}

	if m.ButtonResponse != nil {
		if err := m.ButtonResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buttonResponse")
			}
			return err
		}
	}

	return nil
}

var conversationMessageContentTypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Attachment","QuickReply","Notification","ButtonResponse","GenericTemplate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conversationMessageContentTypeContentTypePropEnum = append(conversationMessageContentTypeContentTypePropEnum, v)
	}
}

const (

	// ConversationMessageContentContentTypeAttachment captures enum value "Attachment"
	ConversationMessageContentContentTypeAttachment string = "Attachment"

	// ConversationMessageContentContentTypeQuickReply captures enum value "QuickReply"
	ConversationMessageContentContentTypeQuickReply string = "QuickReply"

	// ConversationMessageContentContentTypeNotification captures enum value "Notification"
	ConversationMessageContentContentTypeNotification string = "Notification"

	// ConversationMessageContentContentTypeButtonResponse captures enum value "ButtonResponse"
	ConversationMessageContentContentTypeButtonResponse string = "ButtonResponse"

	// ConversationMessageContentContentTypeGenericTemplate captures enum value "GenericTemplate"
	ConversationMessageContentContentTypeGenericTemplate string = "GenericTemplate"
)

// prop value enum
func (m *ConversationMessageContent) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, conversationMessageContentTypeContentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConversationMessageContent) validateContentType(formats strfmt.Registry) error {

	if err := validate.Required("contentType", "body", m.ContentType); err != nil {
		return err
	}

	// value enum
	if err := m.validateContentTypeEnum("contentType", "body", *m.ContentType); err != nil {
		return err
	}

	return nil
}

func (m *ConversationMessageContent) validateGeneric(formats strfmt.Registry) error {

	if swag.IsZero(m.Generic) { // not required
		return nil
	}

	if m.Generic != nil {
		if err := m.Generic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generic")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) validateQuickReply(formats strfmt.Registry) error {

	if swag.IsZero(m.QuickReply) { // not required
		return nil
	}

	if m.QuickReply != nil {
		if err := m.QuickReply.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quickReply")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) validateTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConversationMessageContent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConversationMessageContent) UnmarshalBinary(b []byte) error {
	var res ConversationMessageContent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

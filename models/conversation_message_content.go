// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConversationMessageContent Message content element. If contentType = "Attachment" only one item is allowed.
//
// swagger:model ConversationMessageContent
type ConversationMessageContent struct {

	// Attachment content.
	Attachment *ConversationContentAttachment `json:"attachment,omitempty"`

	// Button response content.
	ButtonResponse *ConversationContentButtonResponse `json:"buttonResponse,omitempty"`

	// Card content
	Card *ConversationContentCard `json:"card,omitempty"`

	// Carousel content
	Carousel *ConversationContentCarousel `json:"carousel,omitempty"`

	// Type of this content element.
	// Required: true
	// Enum: [Attachment Location QuickReply Notification ButtonResponse Story Mention Card Carousel Text QuickReplyV2 Unknown]
	ContentType *string `json:"contentType"`

	// Location content.
	Location *ConversationContentLocation `json:"location,omitempty"`

	// Quick reply content.
	QuickReply *ConversationContentQuickReply `json:"quickReply,omitempty"`

	// Quick reply V2 content.
	QuickReplyV2 *ConversationContentQuickReplyV2 `json:"quickReplyV2,omitempty"`

	// Ephemeral story content.
	Story *ConversationContentStory `json:"story,omitempty"`

	// Template notification content.
	Template *ConversationContentNotificationTemplate `json:"template,omitempty"`

	// Text content.
	Text *ConversationContentText `json:"text,omitempty"`
}

// Validate validates this conversation message content
func (m *ConversationMessageContent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateButtonResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarousel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuickReply(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuickReplyV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConversationMessageContent) validateAttachment(formats strfmt.Registry) error {
	if swag.IsZero(m.Attachment) { // not required
		return nil
	}

	if m.Attachment != nil {
		if err := m.Attachment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attachment")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) validateButtonResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.ButtonResponse) { // not required
		return nil
	}

	if m.ButtonResponse != nil {
		if err := m.ButtonResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buttonResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buttonResponse")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {
		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("card")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) validateCarousel(formats strfmt.Registry) error {
	if swag.IsZero(m.Carousel) { // not required
		return nil
	}

	if m.Carousel != nil {
		if err := m.Carousel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carousel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carousel")
			}
			return err
		}
	}

	return nil
}

var conversationMessageContentTypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Attachment","Location","QuickReply","Notification","ButtonResponse","Story","Mention","Card","Carousel","Text","QuickReplyV2","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conversationMessageContentTypeContentTypePropEnum = append(conversationMessageContentTypeContentTypePropEnum, v)
	}
}

const (

	// ConversationMessageContentContentTypeAttachment captures enum value "Attachment"
	ConversationMessageContentContentTypeAttachment string = "Attachment"

	// ConversationMessageContentContentTypeLocation captures enum value "Location"
	ConversationMessageContentContentTypeLocation string = "Location"

	// ConversationMessageContentContentTypeQuickReply captures enum value "QuickReply"
	ConversationMessageContentContentTypeQuickReply string = "QuickReply"

	// ConversationMessageContentContentTypeNotification captures enum value "Notification"
	ConversationMessageContentContentTypeNotification string = "Notification"

	// ConversationMessageContentContentTypeButtonResponse captures enum value "ButtonResponse"
	ConversationMessageContentContentTypeButtonResponse string = "ButtonResponse"

	// ConversationMessageContentContentTypeStory captures enum value "Story"
	ConversationMessageContentContentTypeStory string = "Story"

	// ConversationMessageContentContentTypeMention captures enum value "Mention"
	ConversationMessageContentContentTypeMention string = "Mention"

	// ConversationMessageContentContentTypeCard captures enum value "Card"
	ConversationMessageContentContentTypeCard string = "Card"

	// ConversationMessageContentContentTypeCarousel captures enum value "Carousel"
	ConversationMessageContentContentTypeCarousel string = "Carousel"

	// ConversationMessageContentContentTypeText captures enum value "Text"
	ConversationMessageContentContentTypeText string = "Text"

	// ConversationMessageContentContentTypeQuickReplyV2 captures enum value "QuickReplyV2"
	ConversationMessageContentContentTypeQuickReplyV2 string = "QuickReplyV2"

	// ConversationMessageContentContentTypeUnknown captures enum value "Unknown"
	ConversationMessageContentContentTypeUnknown string = "Unknown"
)

// prop value enum
func (m *ConversationMessageContent) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, conversationMessageContentTypeContentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConversationMessageContent) validateContentType(formats strfmt.Registry) error {

	if err := validate.Required("contentType", "body", m.ContentType); err != nil {
		return err
	}

	// value enum
	if err := m.validateContentTypeEnum("contentType", "body", *m.ContentType); err != nil {
		return err
	}

	return nil
}

func (m *ConversationMessageContent) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) validateQuickReply(formats strfmt.Registry) error {
	if swag.IsZero(m.QuickReply) { // not required
		return nil
	}

	if m.QuickReply != nil {
		if err := m.QuickReply.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quickReply")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quickReply")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) validateQuickReplyV2(formats strfmt.Registry) error {
	if swag.IsZero(m.QuickReplyV2) { // not required
		return nil
	}

	if m.QuickReplyV2 != nil {
		if err := m.QuickReplyV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quickReplyV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quickReplyV2")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) validateStory(formats strfmt.Registry) error {
	if swag.IsZero(m.Story) { // not required
		return nil
	}

	if m.Story != nil {
		if err := m.Story.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("story")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("story")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) validateTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) validateText(formats strfmt.Registry) error {
	if swag.IsZero(m.Text) { // not required
		return nil
	}

	if m.Text != nil {
		if err := m.Text.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("text")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("text")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this conversation message content based on the context it is used
func (m *ConversationMessageContent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttachment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateButtonResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCarousel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuickReply(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuickReplyV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateText(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConversationMessageContent) contextValidateAttachment(ctx context.Context, formats strfmt.Registry) error {

	if m.Attachment != nil {
		if err := m.Attachment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attachment")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) contextValidateButtonResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.ButtonResponse != nil {
		if err := m.ButtonResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buttonResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buttonResponse")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if m.Card != nil {
		if err := m.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("card")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) contextValidateCarousel(ctx context.Context, formats strfmt.Registry) error {

	if m.Carousel != nil {
		if err := m.Carousel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carousel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carousel")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {
		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) contextValidateQuickReply(ctx context.Context, formats strfmt.Registry) error {

	if m.QuickReply != nil {
		if err := m.QuickReply.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quickReply")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quickReply")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) contextValidateQuickReplyV2(ctx context.Context, formats strfmt.Registry) error {

	if m.QuickReplyV2 != nil {
		if err := m.QuickReplyV2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quickReplyV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quickReplyV2")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) contextValidateStory(ctx context.Context, formats strfmt.Registry) error {

	if m.Story != nil {
		if err := m.Story.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("story")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("story")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) contextValidateTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.Template != nil {
		if err := m.Template.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

func (m *ConversationMessageContent) contextValidateText(ctx context.Context, formats strfmt.Registry) error {

	if m.Text != nil {
		if err := m.Text.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("text")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("text")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConversationMessageContent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConversationMessageContent) UnmarshalBinary(b []byte) error {
	var res ConversationMessageContent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VipRouting vip routing
//
// swagger:model VipRouting
type VipRouting struct {

	// VIP queue default VIP Backup settings for unanswered VIP interactions to fallback to. VIP Backup set for a specific VIP user has preference before queue default.
	VipBackup *VipBackup `json:"vipBackup,omitempty"`

	// VIP Settings specific to Call media.
	VipCallMediaSettings *VipCallMediaSettings `json:"vipCallMediaSettings,omitempty"`

	// VIP Settings specific to Email media.
	VipEmailMediaSettings *VipMediaSettings `json:"vipEmailMediaSettings,omitempty"`

	// The max amount of time a VIP interaction will wait for the VIP user before going to the selected backup option (in seconds). Allowable range 10 seconds - 864000 seconds (ten days).
	VipMaxOwnershipTimeSeconds int32 `json:"vipMaxOwnershipTimeSeconds,omitempty"`

	// VIP Settings specific to Message media.
	VipMessageMediaSettings *VipMediaSettings `json:"vipMessageMediaSettings,omitempty"`
}

// Validate validates this vip routing
func (m *VipRouting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVipBackup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVipCallMediaSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVipEmailMediaSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVipMessageMediaSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VipRouting) validateVipBackup(formats strfmt.Registry) error {

	if swag.IsZero(m.VipBackup) { // not required
		return nil
	}

	if m.VipBackup != nil {
		if err := m.VipBackup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vipBackup")
			}
			return err
		}
	}

	return nil
}

func (m *VipRouting) validateVipCallMediaSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.VipCallMediaSettings) { // not required
		return nil
	}

	if m.VipCallMediaSettings != nil {
		if err := m.VipCallMediaSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vipCallMediaSettings")
			}
			return err
		}
	}

	return nil
}

func (m *VipRouting) validateVipEmailMediaSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.VipEmailMediaSettings) { // not required
		return nil
	}

	if m.VipEmailMediaSettings != nil {
		if err := m.VipEmailMediaSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vipEmailMediaSettings")
			}
			return err
		}
	}

	return nil
}

func (m *VipRouting) validateVipMessageMediaSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.VipMessageMediaSettings) { // not required
		return nil
	}

	if m.VipMessageMediaSettings != nil {
		if err := m.VipMessageMediaSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vipMessageMediaSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VipRouting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VipRouting) UnmarshalBinary(b []byte) error {
	var res VipRouting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

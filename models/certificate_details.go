// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertificateDetails Represents the details of a parsed certificate.
//
// swagger:model CertificateDetails
type CertificateDetails struct {

	// The expiration date of the certificate. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	ExpirationDate strfmt.DateTime `json:"expirationDate,omitempty"`

	// True if the certificate is expired, false otherwise.
	Expired bool `json:"expired"`

	// The issue date of the certificate. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	IssueDate strfmt.DateTime `json:"issueDate,omitempty"`

	// Information about the issuer of the certificate.  The value of this property is a comma separated key=value format.  Each key is one of the attribute names supported by X.500.
	Issuer string `json:"issuer,omitempty"`

	// signature valid
	SignatureValid bool `json:"signatureValid"`

	// Information about the subject of the certificate.  The value of this property is a comma separated key=value format.  Each key is one of the attribute names supported by X.500.
	Subject string `json:"subject,omitempty"`

	// valid
	Valid bool `json:"valid"`
}

// Validate validates this certificate details
func (m *CertificateDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateDetails) validateExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationDate", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CertificateDetails) validateIssueDate(formats strfmt.Registry) error {
	if swag.IsZero(m.IssueDate) { // not required
		return nil
	}

	if err := validate.FormatOf("issueDate", "body", "date-time", m.IssueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this certificate details based on context it is used
func (m *CertificateDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateDetails) UnmarshalBinary(b []byte) error {
	var res CertificateDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

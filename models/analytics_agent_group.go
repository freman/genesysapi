// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalyticsAgentGroup analytics agent group
//
// swagger:model AnalyticsAgentGroup
type AnalyticsAgentGroup struct {

	// Conditional group routing agent group identifier
	AgentGroupID string `json:"agentGroupId,omitempty"`

	// Conditional group routing agent group type
	// Enum: [Group SkillGroup Team]
	AgentGroupType string `json:"agentGroupType,omitempty"`
}

// Validate validates this analytics agent group
func (m *AnalyticsAgentGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentGroupType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var analyticsAgentGroupTypeAgentGroupTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Group","SkillGroup","Team"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analyticsAgentGroupTypeAgentGroupTypePropEnum = append(analyticsAgentGroupTypeAgentGroupTypePropEnum, v)
	}
}

const (

	// AnalyticsAgentGroupAgentGroupTypeGroup captures enum value "Group"
	AnalyticsAgentGroupAgentGroupTypeGroup string = "Group"

	// AnalyticsAgentGroupAgentGroupTypeSkillGroup captures enum value "SkillGroup"
	AnalyticsAgentGroupAgentGroupTypeSkillGroup string = "SkillGroup"

	// AnalyticsAgentGroupAgentGroupTypeTeam captures enum value "Team"
	AnalyticsAgentGroupAgentGroupTypeTeam string = "Team"
)

// prop value enum
func (m *AnalyticsAgentGroup) validateAgentGroupTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, analyticsAgentGroupTypeAgentGroupTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AnalyticsAgentGroup) validateAgentGroupType(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentGroupType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAgentGroupTypeEnum("agentGroupType", "body", m.AgentGroupType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this analytics agent group based on context it is used
func (m *AnalyticsAgentGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AnalyticsAgentGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalyticsAgentGroup) UnmarshalBinary(b []byte) error {
	var res AnalyticsAgentGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

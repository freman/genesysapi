// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HistoryListing history listing
//
// swagger:model HistoryListing
type HistoryListing struct {

	// Action name
	// Enum: [CREATE CHECKIN DEBUG DELETE HISTORY PUBLISH STATE_CHANGE UPDATE VALIDATE]
	ActionName string `json:"actionName,omitempty"`

	// Action status
	// Enum: [LOCKED UNLOCKED STARTED PENDING_GENERATION PENDING_BACKEND_NOTIFICATION SUCCESS FAILURE]
	ActionStatus string `json:"actionStatus,omitempty"`

	// client
	Client *DomainEntityRef `json:"client,omitempty"`

	// complete
	Complete bool `json:"complete"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	Completed strfmt.DateTime `json:"completed,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// entities
	Entities []*HistoryEntry `json:"entities"`

	// error code
	ErrorCode string `json:"errorCode,omitempty"`

	// error details
	ErrorDetails []*Detail `json:"errorDetails"`

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// error message params
	ErrorMessageParams map[string]string `json:"errorMessageParams,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// page count
	PageCount int32 `json:"pageCount,omitempty"`

	// page number
	PageNumber int32 `json:"pageNumber,omitempty"`

	// page size
	PageSize int32 `json:"pageSize,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	Started strfmt.DateTime `json:"started,omitempty"`

	// system
	System bool `json:"system"`

	// total
	Total int64 `json:"total,omitempty"`

	// user
	User *User `json:"user,omitempty"`
}

// Validate validates this history listing
func (m *HistoryListing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var historyListingTypeActionNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATE","CHECKIN","DEBUG","DELETE","HISTORY","PUBLISH","STATE_CHANGE","UPDATE","VALIDATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyListingTypeActionNamePropEnum = append(historyListingTypeActionNamePropEnum, v)
	}
}

const (

	// HistoryListingActionNameCREATE captures enum value "CREATE"
	HistoryListingActionNameCREATE string = "CREATE"

	// HistoryListingActionNameCHECKIN captures enum value "CHECKIN"
	HistoryListingActionNameCHECKIN string = "CHECKIN"

	// HistoryListingActionNameDEBUG captures enum value "DEBUG"
	HistoryListingActionNameDEBUG string = "DEBUG"

	// HistoryListingActionNameDELETE captures enum value "DELETE"
	HistoryListingActionNameDELETE string = "DELETE"

	// HistoryListingActionNameHISTORY captures enum value "HISTORY"
	HistoryListingActionNameHISTORY string = "HISTORY"

	// HistoryListingActionNamePUBLISH captures enum value "PUBLISH"
	HistoryListingActionNamePUBLISH string = "PUBLISH"

	// HistoryListingActionNameSTATECHANGE captures enum value "STATE_CHANGE"
	HistoryListingActionNameSTATECHANGE string = "STATE_CHANGE"

	// HistoryListingActionNameUPDATE captures enum value "UPDATE"
	HistoryListingActionNameUPDATE string = "UPDATE"

	// HistoryListingActionNameVALIDATE captures enum value "VALIDATE"
	HistoryListingActionNameVALIDATE string = "VALIDATE"
)

// prop value enum
func (m *HistoryListing) validateActionNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historyListingTypeActionNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HistoryListing) validateActionName(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionName) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionNameEnum("actionName", "body", m.ActionName); err != nil {
		return err
	}

	return nil
}

var historyListingTypeActionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOCKED","UNLOCKED","STARTED","PENDING_GENERATION","PENDING_BACKEND_NOTIFICATION","SUCCESS","FAILURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyListingTypeActionStatusPropEnum = append(historyListingTypeActionStatusPropEnum, v)
	}
}

const (

	// HistoryListingActionStatusLOCKED captures enum value "LOCKED"
	HistoryListingActionStatusLOCKED string = "LOCKED"

	// HistoryListingActionStatusUNLOCKED captures enum value "UNLOCKED"
	HistoryListingActionStatusUNLOCKED string = "UNLOCKED"

	// HistoryListingActionStatusSTARTED captures enum value "STARTED"
	HistoryListingActionStatusSTARTED string = "STARTED"

	// HistoryListingActionStatusPENDINGGENERATION captures enum value "PENDING_GENERATION"
	HistoryListingActionStatusPENDINGGENERATION string = "PENDING_GENERATION"

	// HistoryListingActionStatusPENDINGBACKENDNOTIFICATION captures enum value "PENDING_BACKEND_NOTIFICATION"
	HistoryListingActionStatusPENDINGBACKENDNOTIFICATION string = "PENDING_BACKEND_NOTIFICATION"

	// HistoryListingActionStatusSUCCESS captures enum value "SUCCESS"
	HistoryListingActionStatusSUCCESS string = "SUCCESS"

	// HistoryListingActionStatusFAILURE captures enum value "FAILURE"
	HistoryListingActionStatusFAILURE string = "FAILURE"
)

// prop value enum
func (m *HistoryListing) validateActionStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historyListingTypeActionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HistoryListing) validateActionStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionStatusEnum("actionStatus", "body", m.ActionStatus); err != nil {
		return err
	}

	return nil
}

func (m *HistoryListing) validateClient(formats strfmt.Registry) error {

	if swag.IsZero(m.Client) { // not required
		return nil
	}

	if m.Client != nil {
		if err := m.Client.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryListing) validateCompleted(formats strfmt.Registry) error {

	if swag.IsZero(m.Completed) { // not required
		return nil
	}

	if err := validate.FormatOf("completed", "body", "date-time", m.Completed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *HistoryListing) validateEntities(formats strfmt.Registry) error {

	if swag.IsZero(m.Entities) { // not required
		return nil
	}

	for i := 0; i < len(m.Entities); i++ {
		if swag.IsZero(m.Entities[i]) { // not required
			continue
		}

		if m.Entities[i] != nil {
			if err := m.Entities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HistoryListing) validateErrorDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.ErrorDetails); i++ {
		if swag.IsZero(m.ErrorDetails[i]) { // not required
			continue
		}

		if m.ErrorDetails[i] != nil {
			if err := m.ErrorDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HistoryListing) validateStarted(formats strfmt.Registry) error {

	if swag.IsZero(m.Started) { // not required
		return nil
	}

	if err := validate.FormatOf("started", "body", "date-time", m.Started.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *HistoryListing) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HistoryListing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoryListing) UnmarshalBinary(b []byte) error {
	var res HistoryListing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

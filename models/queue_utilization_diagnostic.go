// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// QueueUtilizationDiagnostic queue utilization diagnostic
//
// swagger:model QueueUtilizationDiagnostic
type QueueUtilizationDiagnostic struct {

	// The number of users active on the queue
	// Read Only: true
	ActiveUsersInQueue int32 `json:"activeUsersInQueue,omitempty"`

	// Identifier of the queue
	// Read Only: true
	Queue *DomainEntityRef `json:"queue,omitempty"`

	// The number of users joined to the queue
	// Read Only: true
	UsersInQueue int32 `json:"usersInQueue,omitempty"`

	// The number of users in the queue currently not engaged
	// Read Only: true
	UsersNotUtilized int32 `json:"usersNotUtilized,omitempty"`

	// The number of users currently engaged in a campaign call
	// Read Only: true
	UsersOnACampaignCall int32 `json:"usersOnACampaignCall,omitempty"`

	// The number of users currently engaged in a communication that is not part of the campaign
	// Read Only: true
	UsersOnANonCampaignCall int32 `json:"usersOnANonCampaignCall,omitempty"`

	// The number of users whose station is homed to an edge different from the campaign
	// Read Only: true
	UsersOnDifferentEdgeGroup int32 `json:"usersOnDifferentEdgeGroup,omitempty"`

	// The number of users with a status of on-queue
	// Read Only: true
	UsersOnQueue int32 `json:"usersOnQueue,omitempty"`

	// The number of users in the queue with a station
	// Read Only: true
	UsersOnQueueWithStation int32 `json:"usersOnQueueWithStation,omitempty"`
}

// Validate validates this queue utilization diagnostic
func (m *QueueUtilizationDiagnostic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQueue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueueUtilizationDiagnostic) validateQueue(formats strfmt.Registry) error {

	if swag.IsZero(m.Queue) { // not required
		return nil
	}

	if m.Queue != nil {
		if err := m.Queue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueueUtilizationDiagnostic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueueUtilizationDiagnostic) UnmarshalBinary(b []byte) error {
	var res QueueUtilizationDiagnostic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

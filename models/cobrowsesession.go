// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Cobrowsesession cobrowsesession
//
// swagger:model Cobrowsesession
type Cobrowsesession struct {

	// After-call work for the communication.
	AfterCallWork *AfterCallWork `json:"afterCallWork,omitempty"`

	// Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.
	AfterCallWorkRequired bool `json:"afterCallWorkRequired"`

	// This value identifies the role of the co-browse client within the co-browse session (a client is a sharer or a viewer).
	CobrowseRole string `json:"cobrowseRole,omitempty"`

	// The co-browse session ID.
	CobrowseSessionID string `json:"cobrowseSessionId,omitempty"`

	// The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	ConnectedTime strfmt.DateTime `json:"connectedTime,omitempty"`

	// ID of co-browse participants for which this client has been granted control (list is empty if this client cannot control any shared pages).
	Controlling []string `json:"controlling"`

	// System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
	// Enum: [endpoint client system timeout transfer transfer.conference transfer.consult transfer.forward transport.failure error peer other spam uncallable]
	DisconnectType string `json:"disconnectType,omitempty"`

	// The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DisconnectedTime strfmt.DateTime `json:"disconnectedTime,omitempty"`

	// A globally unique identifier for this communication.
	ID string `json:"id,omitempty"`

	// The id of the peer communication corresponding to a matching leg for this communication.
	PeerID string `json:"peerId,omitempty"`

	// The source provider for the co-browse session.
	Provider string `json:"provider,omitempty"`

	// The time when the provider event which triggered this conversation update happened in the corrected provider clock (milliseconds since 1970-01-01 00:00:00 UTC). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	ProviderEventTime strfmt.DateTime `json:"providerEventTime,omitempty"`

	// The time line of the participant's call, divided into activity segments.
	Segments []*Segment `json:"segments"`

	// Address and name data for a call endpoint.
	Self *Address `json:"self,omitempty"`

	// The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	StartAlertingTime strfmt.DateTime `json:"startAlertingTime,omitempty"`

	// The connection state of this communication.
	// Enum: [alerting dialing contacting offering connected disconnected terminated scheduled none]
	State string `json:"state,omitempty"`

	// The URL that can be used to open co-browse session in web browser.
	ViewerURL string `json:"viewerUrl,omitempty"`

	// Call wrap up or disposition data.
	Wrapup *Wrapup `json:"wrapup,omitempty"`
}

// Validate validates this cobrowsesession
func (m *Cobrowsesession) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAfterCallWork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisconnectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisconnectedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderEventTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSegments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartAlertingTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWrapup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Cobrowsesession) validateAfterCallWork(formats strfmt.Registry) error {

	if swag.IsZero(m.AfterCallWork) { // not required
		return nil
	}

	if m.AfterCallWork != nil {
		if err := m.AfterCallWork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("afterCallWork")
			}
			return err
		}
	}

	return nil
}

func (m *Cobrowsesession) validateConnectedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("connectedTime", "body", "date-time", m.ConnectedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var cobrowsesessionTypeDisconnectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["endpoint","client","system","timeout","transfer","transfer.conference","transfer.consult","transfer.forward","transport.failure","error","peer","other","spam","uncallable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cobrowsesessionTypeDisconnectTypePropEnum = append(cobrowsesessionTypeDisconnectTypePropEnum, v)
	}
}

const (

	// CobrowsesessionDisconnectTypeEndpoint captures enum value "endpoint"
	CobrowsesessionDisconnectTypeEndpoint string = "endpoint"

	// CobrowsesessionDisconnectTypeClient captures enum value "client"
	CobrowsesessionDisconnectTypeClient string = "client"

	// CobrowsesessionDisconnectTypeSystem captures enum value "system"
	CobrowsesessionDisconnectTypeSystem string = "system"

	// CobrowsesessionDisconnectTypeTimeout captures enum value "timeout"
	CobrowsesessionDisconnectTypeTimeout string = "timeout"

	// CobrowsesessionDisconnectTypeTransfer captures enum value "transfer"
	CobrowsesessionDisconnectTypeTransfer string = "transfer"

	// CobrowsesessionDisconnectTypeTransferConference captures enum value "transfer.conference"
	CobrowsesessionDisconnectTypeTransferConference string = "transfer.conference"

	// CobrowsesessionDisconnectTypeTransferConsult captures enum value "transfer.consult"
	CobrowsesessionDisconnectTypeTransferConsult string = "transfer.consult"

	// CobrowsesessionDisconnectTypeTransferForward captures enum value "transfer.forward"
	CobrowsesessionDisconnectTypeTransferForward string = "transfer.forward"

	// CobrowsesessionDisconnectTypeTransportFailure captures enum value "transport.failure"
	CobrowsesessionDisconnectTypeTransportFailure string = "transport.failure"

	// CobrowsesessionDisconnectTypeError captures enum value "error"
	CobrowsesessionDisconnectTypeError string = "error"

	// CobrowsesessionDisconnectTypePeer captures enum value "peer"
	CobrowsesessionDisconnectTypePeer string = "peer"

	// CobrowsesessionDisconnectTypeOther captures enum value "other"
	CobrowsesessionDisconnectTypeOther string = "other"

	// CobrowsesessionDisconnectTypeSpam captures enum value "spam"
	CobrowsesessionDisconnectTypeSpam string = "spam"

	// CobrowsesessionDisconnectTypeUncallable captures enum value "uncallable"
	CobrowsesessionDisconnectTypeUncallable string = "uncallable"
)

// prop value enum
func (m *Cobrowsesession) validateDisconnectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cobrowsesessionTypeDisconnectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Cobrowsesession) validateDisconnectType(formats strfmt.Registry) error {

	if swag.IsZero(m.DisconnectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDisconnectTypeEnum("disconnectType", "body", m.DisconnectType); err != nil {
		return err
	}

	return nil
}

func (m *Cobrowsesession) validateDisconnectedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.DisconnectedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("disconnectedTime", "body", "date-time", m.DisconnectedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Cobrowsesession) validateProviderEventTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ProviderEventTime) { // not required
		return nil
	}

	if err := validate.FormatOf("providerEventTime", "body", "date-time", m.ProviderEventTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Cobrowsesession) validateSegments(formats strfmt.Registry) error {

	if swag.IsZero(m.Segments) { // not required
		return nil
	}

	for i := 0; i < len(m.Segments); i++ {
		if swag.IsZero(m.Segments[i]) { // not required
			continue
		}

		if m.Segments[i] != nil {
			if err := m.Segments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cobrowsesession) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self")
			}
			return err
		}
	}

	return nil
}

func (m *Cobrowsesession) validateStartAlertingTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartAlertingTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startAlertingTime", "body", "date-time", m.StartAlertingTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var cobrowsesessionTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["alerting","dialing","contacting","offering","connected","disconnected","terminated","scheduled","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cobrowsesessionTypeStatePropEnum = append(cobrowsesessionTypeStatePropEnum, v)
	}
}

const (

	// CobrowsesessionStateAlerting captures enum value "alerting"
	CobrowsesessionStateAlerting string = "alerting"

	// CobrowsesessionStateDialing captures enum value "dialing"
	CobrowsesessionStateDialing string = "dialing"

	// CobrowsesessionStateContacting captures enum value "contacting"
	CobrowsesessionStateContacting string = "contacting"

	// CobrowsesessionStateOffering captures enum value "offering"
	CobrowsesessionStateOffering string = "offering"

	// CobrowsesessionStateConnected captures enum value "connected"
	CobrowsesessionStateConnected string = "connected"

	// CobrowsesessionStateDisconnected captures enum value "disconnected"
	CobrowsesessionStateDisconnected string = "disconnected"

	// CobrowsesessionStateTerminated captures enum value "terminated"
	CobrowsesessionStateTerminated string = "terminated"

	// CobrowsesessionStateScheduled captures enum value "scheduled"
	CobrowsesessionStateScheduled string = "scheduled"

	// CobrowsesessionStateNone captures enum value "none"
	CobrowsesessionStateNone string = "none"
)

// prop value enum
func (m *Cobrowsesession) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cobrowsesessionTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Cobrowsesession) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *Cobrowsesession) validateWrapup(formats strfmt.Registry) error {

	if swag.IsZero(m.Wrapup) { // not required
		return nil
	}

	if m.Wrapup != nil {
		if err := m.Wrapup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wrapup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Cobrowsesession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Cobrowsesession) UnmarshalBinary(b []byte) error {
	var res Cobrowsesession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

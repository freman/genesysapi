// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeOffRequestQueryBody time off request query body
//
// swagger:model TimeOffRequestQueryBody
type TimeOffRequestQueryBody struct {

	// The inclusive range of dates to filter time off requests
	DateRange *DateRange `json:"dateRange,omitempty"`

	// The set of statuses to filter time off requests
	// Unique: true
	Statuses []string `json:"statuses"`

	// The set of user ids to filter time off requests
	// Unique: true
	UserIds []string `json:"userIds"`
}

// Validate validates this time off request query body
func (m *TimeOffRequestQueryBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeOffRequestQueryBody) validateDateRange(formats strfmt.Registry) error {

	if swag.IsZero(m.DateRange) { // not required
		return nil
	}

	if m.DateRange != nil {
		if err := m.DateRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dateRange")
			}
			return err
		}
	}

	return nil
}

var timeOffRequestQueryBodyStatusesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeOffRequestQueryBodyStatusesItemsEnum = append(timeOffRequestQueryBodyStatusesItemsEnum, v)
	}
}

func (m *TimeOffRequestQueryBody) validateStatusesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, timeOffRequestQueryBodyStatusesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TimeOffRequestQueryBody) validateStatuses(formats strfmt.Registry) error {

	if swag.IsZero(m.Statuses) { // not required
		return nil
	}

	if err := validate.UniqueItems("statuses", "body", m.Statuses); err != nil {
		return err
	}

	for i := 0; i < len(m.Statuses); i++ {

		// value enum
		if err := m.validateStatusesItemsEnum("statuses"+"."+strconv.Itoa(i), "body", m.Statuses[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *TimeOffRequestQueryBody) validateUserIds(formats strfmt.Registry) error {

	if swag.IsZero(m.UserIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("userIds", "body", m.UserIds); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeOffRequestQueryBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeOffRequestQueryBody) UnmarshalBinary(b []byte) error {
	var res TimeOffRequestQueryBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

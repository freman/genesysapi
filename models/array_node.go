// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArrayNode array node
//
// swagger:model ArrayNode
type ArrayNode struct {

	// array
	Array bool `json:"array,omitempty"`

	// big decimal
	BigDecimal bool `json:"bigDecimal,omitempty"`

	// big integer
	BigInteger bool `json:"bigInteger,omitempty"`

	// binary
	Binary bool `json:"binary,omitempty"`

	// boolean
	Boolean bool `json:"boolean,omitempty"`

	// container node
	ContainerNode bool `json:"containerNode,omitempty"`

	// double
	Double bool `json:"double,omitempty"`

	// float
	Float bool `json:"float,omitempty"`

	// floating point number
	FloatingPointNumber bool `json:"floatingPointNumber,omitempty"`

	// int
	Int bool `json:"int,omitempty"`

	// integral number
	IntegralNumber bool `json:"integralNumber,omitempty"`

	// long
	Long bool `json:"long,omitempty"`

	// missing node
	MissingNode bool `json:"missingNode,omitempty"`

	// node type
	// Enum: [ARRAY BINARY BOOLEAN MISSING NULL NUMBER OBJECT POJO STRING]
	NodeType string `json:"nodeType,omitempty"`

	// null
	Null bool `json:"null,omitempty"`

	// number
	Number bool `json:"number,omitempty"`

	// object
	Object bool `json:"object,omitempty"`

	// pojo
	Pojo bool `json:"pojo,omitempty"`

	// short
	Short bool `json:"short,omitempty"`

	// textual
	Textual bool `json:"textual,omitempty"`

	// value node
	ValueNode bool `json:"valueNode,omitempty"`
}

// Validate validates this array node
func (m *ArrayNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var arrayNodeTypeNodeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ARRAY","BINARY","BOOLEAN","MISSING","NULL","NUMBER","OBJECT","POJO","STRING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		arrayNodeTypeNodeTypePropEnum = append(arrayNodeTypeNodeTypePropEnum, v)
	}
}

const (

	// ArrayNodeNodeTypeARRAY captures enum value "ARRAY"
	ArrayNodeNodeTypeARRAY string = "ARRAY"

	// ArrayNodeNodeTypeBINARY captures enum value "BINARY"
	ArrayNodeNodeTypeBINARY string = "BINARY"

	// ArrayNodeNodeTypeBOOLEAN captures enum value "BOOLEAN"
	ArrayNodeNodeTypeBOOLEAN string = "BOOLEAN"

	// ArrayNodeNodeTypeMISSING captures enum value "MISSING"
	ArrayNodeNodeTypeMISSING string = "MISSING"

	// ArrayNodeNodeTypeNULL captures enum value "NULL"
	ArrayNodeNodeTypeNULL string = "NULL"

	// ArrayNodeNodeTypeNUMBER captures enum value "NUMBER"
	ArrayNodeNodeTypeNUMBER string = "NUMBER"

	// ArrayNodeNodeTypeOBJECT captures enum value "OBJECT"
	ArrayNodeNodeTypeOBJECT string = "OBJECT"

	// ArrayNodeNodeTypePOJO captures enum value "POJO"
	ArrayNodeNodeTypePOJO string = "POJO"

	// ArrayNodeNodeTypeSTRING captures enum value "STRING"
	ArrayNodeNodeTypeSTRING string = "STRING"
)

// prop value enum
func (m *ArrayNode) validateNodeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, arrayNodeTypeNodeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArrayNode) validateNodeType(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateNodeTypeEnum("nodeType", "body", m.NodeType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArrayNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArrayNode) UnmarshalBinary(b []byte) error {
	var res ArrayNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

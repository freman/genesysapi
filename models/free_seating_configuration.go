// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FreeSeatingConfiguration free seating configuration
//
// swagger:model FreeSeatingConfiguration
type FreeSeatingConfiguration struct {

	// The FreeSeatingState for FreeSeatingConfiguration. Can be ON, OFF, or PARTIAL. ON meaning disassociate the user after the ttl expires, OFF meaning never disassociate the user, and PARTIAL meaning only disassociate when a user explicitly clicks log out.
	// Enum: [ON OFF PARTIAL]
	FreeSeatingState string `json:"freeSeatingState,omitempty"`

	// The amount of time in minutes until an offline user is disassociated from their station
	TTLMinutes int32 `json:"ttlMinutes,omitempty"`
}

// Validate validates this free seating configuration
func (m *FreeSeatingConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFreeSeatingState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var freeSeatingConfigurationTypeFreeSeatingStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ON","OFF","PARTIAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		freeSeatingConfigurationTypeFreeSeatingStatePropEnum = append(freeSeatingConfigurationTypeFreeSeatingStatePropEnum, v)
	}
}

const (

	// FreeSeatingConfigurationFreeSeatingStateON captures enum value "ON"
	FreeSeatingConfigurationFreeSeatingStateON string = "ON"

	// FreeSeatingConfigurationFreeSeatingStateOFF captures enum value "OFF"
	FreeSeatingConfigurationFreeSeatingStateOFF string = "OFF"

	// FreeSeatingConfigurationFreeSeatingStatePARTIAL captures enum value "PARTIAL"
	FreeSeatingConfigurationFreeSeatingStatePARTIAL string = "PARTIAL"
)

// prop value enum
func (m *FreeSeatingConfiguration) validateFreeSeatingStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, freeSeatingConfigurationTypeFreeSeatingStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FreeSeatingConfiguration) validateFreeSeatingState(formats strfmt.Registry) error {

	if swag.IsZero(m.FreeSeatingState) { // not required
		return nil
	}

	// value enum
	if err := m.validateFreeSeatingStateEnum("freeSeatingState", "body", m.FreeSeatingState); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FreeSeatingConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FreeSeatingConfiguration) UnmarshalBinary(b []byte) error {
	var res FreeSeatingConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

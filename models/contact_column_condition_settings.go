// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContactColumnConditionSettings contact column condition settings
//
// swagger:model ContactColumnConditionSettings
type ContactColumnConditionSettings struct {

	// The name of the contact list column to evaluate.
	// Required: true
	ColumnName *string `json:"columnName"`

	// The operator to use when comparing values.
	// Required: true
	// Enum: [Equals LessThan LessThanEquals GreaterThan GreaterThanEquals Contains BeginsWith EndsWith Before After]
	Operator *string `json:"operator"`

	// The value to compare against the contact's data.
	// Required: true
	Value *string `json:"value"`

	// The data type the value should be treated as.
	// Required: true
	// Enum: [DateTime Numeric Period String]
	ValueType *string `json:"valueType"`
}

// Validate validates this contact column condition settings
func (m *ContactColumnConditionSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumnName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactColumnConditionSettings) validateColumnName(formats strfmt.Registry) error {

	if err := validate.Required("columnName", "body", m.ColumnName); err != nil {
		return err
	}

	return nil
}

var contactColumnConditionSettingsTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Equals","LessThan","LessThanEquals","GreaterThan","GreaterThanEquals","Contains","BeginsWith","EndsWith","Before","After"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contactColumnConditionSettingsTypeOperatorPropEnum = append(contactColumnConditionSettingsTypeOperatorPropEnum, v)
	}
}

const (

	// ContactColumnConditionSettingsOperatorEquals captures enum value "Equals"
	ContactColumnConditionSettingsOperatorEquals string = "Equals"

	// ContactColumnConditionSettingsOperatorLessThan captures enum value "LessThan"
	ContactColumnConditionSettingsOperatorLessThan string = "LessThan"

	// ContactColumnConditionSettingsOperatorLessThanEquals captures enum value "LessThanEquals"
	ContactColumnConditionSettingsOperatorLessThanEquals string = "LessThanEquals"

	// ContactColumnConditionSettingsOperatorGreaterThan captures enum value "GreaterThan"
	ContactColumnConditionSettingsOperatorGreaterThan string = "GreaterThan"

	// ContactColumnConditionSettingsOperatorGreaterThanEquals captures enum value "GreaterThanEquals"
	ContactColumnConditionSettingsOperatorGreaterThanEquals string = "GreaterThanEquals"

	// ContactColumnConditionSettingsOperatorContains captures enum value "Contains"
	ContactColumnConditionSettingsOperatorContains string = "Contains"

	// ContactColumnConditionSettingsOperatorBeginsWith captures enum value "BeginsWith"
	ContactColumnConditionSettingsOperatorBeginsWith string = "BeginsWith"

	// ContactColumnConditionSettingsOperatorEndsWith captures enum value "EndsWith"
	ContactColumnConditionSettingsOperatorEndsWith string = "EndsWith"

	// ContactColumnConditionSettingsOperatorBefore captures enum value "Before"
	ContactColumnConditionSettingsOperatorBefore string = "Before"

	// ContactColumnConditionSettingsOperatorAfter captures enum value "After"
	ContactColumnConditionSettingsOperatorAfter string = "After"
)

// prop value enum
func (m *ContactColumnConditionSettings) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contactColumnConditionSettingsTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContactColumnConditionSettings) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *ContactColumnConditionSettings) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

var contactColumnConditionSettingsTypeValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DateTime","Numeric","Period","String"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contactColumnConditionSettingsTypeValueTypePropEnum = append(contactColumnConditionSettingsTypeValueTypePropEnum, v)
	}
}

const (

	// ContactColumnConditionSettingsValueTypeDateTime captures enum value "DateTime"
	ContactColumnConditionSettingsValueTypeDateTime string = "DateTime"

	// ContactColumnConditionSettingsValueTypeNumeric captures enum value "Numeric"
	ContactColumnConditionSettingsValueTypeNumeric string = "Numeric"

	// ContactColumnConditionSettingsValueTypePeriod captures enum value "Period"
	ContactColumnConditionSettingsValueTypePeriod string = "Period"

	// ContactColumnConditionSettingsValueTypeString captures enum value "String"
	ContactColumnConditionSettingsValueTypeString string = "String"
)

// prop value enum
func (m *ContactColumnConditionSettings) validateValueTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contactColumnConditionSettingsTypeValueTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContactColumnConditionSettings) validateValueType(formats strfmt.Registry) error {

	if err := validate.Required("valueType", "body", m.ValueType); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueTypeEnum("valueType", "body", *m.ValueType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContactColumnConditionSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactColumnConditionSettings) UnmarshalBinary(b []byte) error {
	var res ContactColumnConditionSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

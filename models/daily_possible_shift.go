// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DailyPossibleShift daily possible shift
//
// swagger:model DailyPossibleShift
type DailyPossibleShift struct {

	// Day of the shift
	// Enum: [Sunday Monday Tuesday Wednesday Thursday Friday Saturday]
	DayOfWeek string `json:"dayOfWeek,omitempty"`

	// Minutes of the earliest shift start from midnight. Note that midnight is 12:00 am in the time zone specified in the timeZone field (in the top level of the response)
	EarliestShiftStartMinutesFromMidnight int32 `json:"earliestShiftStartMinutesFromMidnight,omitempty"`

	// The percentage of being scheduled in each interval between the earliest shift start and latest shift end. Range of the values: [0, 100].
	IntervalScheduleProbabilities []int32 `json:"intervalScheduleProbabilities"`

	// Maximum paid time in minutes of this daily shift
	MaximumPaidTimeMinutes int32 `json:"maximumPaidTimeMinutes,omitempty"`

	// Minimum paid time in minutes of this daily shift
	MinimumPaidTimeMinutes int32 `json:"minimumPaidTimeMinutes,omitempty"`

	// Whether this is a required shift
	Required bool `json:"required"`
}

// Validate validates this daily possible shift
func (m *DailyPossibleShift) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDayOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dailyPossibleShiftTypeDayOfWeekPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dailyPossibleShiftTypeDayOfWeekPropEnum = append(dailyPossibleShiftTypeDayOfWeekPropEnum, v)
	}
}

const (

	// DailyPossibleShiftDayOfWeekSunday captures enum value "Sunday"
	DailyPossibleShiftDayOfWeekSunday string = "Sunday"

	// DailyPossibleShiftDayOfWeekMonday captures enum value "Monday"
	DailyPossibleShiftDayOfWeekMonday string = "Monday"

	// DailyPossibleShiftDayOfWeekTuesday captures enum value "Tuesday"
	DailyPossibleShiftDayOfWeekTuesday string = "Tuesday"

	// DailyPossibleShiftDayOfWeekWednesday captures enum value "Wednesday"
	DailyPossibleShiftDayOfWeekWednesday string = "Wednesday"

	// DailyPossibleShiftDayOfWeekThursday captures enum value "Thursday"
	DailyPossibleShiftDayOfWeekThursday string = "Thursday"

	// DailyPossibleShiftDayOfWeekFriday captures enum value "Friday"
	DailyPossibleShiftDayOfWeekFriday string = "Friday"

	// DailyPossibleShiftDayOfWeekSaturday captures enum value "Saturday"
	DailyPossibleShiftDayOfWeekSaturday string = "Saturday"
)

// prop value enum
func (m *DailyPossibleShift) validateDayOfWeekEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dailyPossibleShiftTypeDayOfWeekPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DailyPossibleShift) validateDayOfWeek(formats strfmt.Registry) error {
	if swag.IsZero(m.DayOfWeek) { // not required
		return nil
	}

	// value enum
	if err := m.validateDayOfWeekEnum("dayOfWeek", "body", m.DayOfWeek); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this daily possible shift based on context it is used
func (m *DailyPossibleShift) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DailyPossibleShift) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DailyPossibleShift) UnmarshalBinary(b []byte) error {
	var res DailyPossibleShift
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

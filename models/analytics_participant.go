// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalyticsParticipant analytics participant
//
// swagger:model AnalyticsParticipant
type AnalyticsParticipant struct {

	// List of attributes associated to this participant
	Attributes map[string]string `json:"attributes,omitempty"`

	// External contact identifier
	ExternalContactID string `json:"externalContactId,omitempty"`

	// External organization identifier
	ExternalOrganizationID string `json:"externalOrganizationId,omitempty"`

	// Reason for which participant flagged conversation
	// Enum: [general]
	FlaggedReason string `json:"flaggedReason,omitempty"`

	// Unique identifier for the participant
	ParticipantID string `json:"participantId,omitempty"`

	// A human readable name identifying the participant
	ParticipantName string `json:"participantName,omitempty"`

	// The participant's purpose
	// Enum: [acd agent api botflow campaign customer dialer external fax group inbound ivr manual outbound station user voicemail workflow]
	Purpose string `json:"purpose,omitempty"`

	// List of sessions associated to this participant
	Sessions []*AnalyticsSession `json:"sessions"`

	// The team ID the user is a member of
	TeamID string `json:"teamId,omitempty"`

	// Unique identifier for the user
	UserID string `json:"userId,omitempty"`
}

// Validate validates this analytics participant
func (m *AnalyticsParticipant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlaggedReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurpose(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var analyticsParticipantTypeFlaggedReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["general"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analyticsParticipantTypeFlaggedReasonPropEnum = append(analyticsParticipantTypeFlaggedReasonPropEnum, v)
	}
}

const (

	// AnalyticsParticipantFlaggedReasonGeneral captures enum value "general"
	AnalyticsParticipantFlaggedReasonGeneral string = "general"
)

// prop value enum
func (m *AnalyticsParticipant) validateFlaggedReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, analyticsParticipantTypeFlaggedReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AnalyticsParticipant) validateFlaggedReason(formats strfmt.Registry) error {
	if swag.IsZero(m.FlaggedReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlaggedReasonEnum("flaggedReason", "body", m.FlaggedReason); err != nil {
		return err
	}

	return nil
}

var analyticsParticipantTypePurposePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["acd","agent","api","botflow","campaign","customer","dialer","external","fax","group","inbound","ivr","manual","outbound","station","user","voicemail","workflow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analyticsParticipantTypePurposePropEnum = append(analyticsParticipantTypePurposePropEnum, v)
	}
}

const (

	// AnalyticsParticipantPurposeAcd captures enum value "acd"
	AnalyticsParticipantPurposeAcd string = "acd"

	// AnalyticsParticipantPurposeAgent captures enum value "agent"
	AnalyticsParticipantPurposeAgent string = "agent"

	// AnalyticsParticipantPurposeAPI captures enum value "api"
	AnalyticsParticipantPurposeAPI string = "api"

	// AnalyticsParticipantPurposeBotflow captures enum value "botflow"
	AnalyticsParticipantPurposeBotflow string = "botflow"

	// AnalyticsParticipantPurposeCampaign captures enum value "campaign"
	AnalyticsParticipantPurposeCampaign string = "campaign"

	// AnalyticsParticipantPurposeCustomer captures enum value "customer"
	AnalyticsParticipantPurposeCustomer string = "customer"

	// AnalyticsParticipantPurposeDialer captures enum value "dialer"
	AnalyticsParticipantPurposeDialer string = "dialer"

	// AnalyticsParticipantPurposeExternal captures enum value "external"
	AnalyticsParticipantPurposeExternal string = "external"

	// AnalyticsParticipantPurposeFax captures enum value "fax"
	AnalyticsParticipantPurposeFax string = "fax"

	// AnalyticsParticipantPurposeGroup captures enum value "group"
	AnalyticsParticipantPurposeGroup string = "group"

	// AnalyticsParticipantPurposeInbound captures enum value "inbound"
	AnalyticsParticipantPurposeInbound string = "inbound"

	// AnalyticsParticipantPurposeIvr captures enum value "ivr"
	AnalyticsParticipantPurposeIvr string = "ivr"

	// AnalyticsParticipantPurposeManual captures enum value "manual"
	AnalyticsParticipantPurposeManual string = "manual"

	// AnalyticsParticipantPurposeOutbound captures enum value "outbound"
	AnalyticsParticipantPurposeOutbound string = "outbound"

	// AnalyticsParticipantPurposeStation captures enum value "station"
	AnalyticsParticipantPurposeStation string = "station"

	// AnalyticsParticipantPurposeUser captures enum value "user"
	AnalyticsParticipantPurposeUser string = "user"

	// AnalyticsParticipantPurposeVoicemail captures enum value "voicemail"
	AnalyticsParticipantPurposeVoicemail string = "voicemail"

	// AnalyticsParticipantPurposeWorkflow captures enum value "workflow"
	AnalyticsParticipantPurposeWorkflow string = "workflow"
)

// prop value enum
func (m *AnalyticsParticipant) validatePurposeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, analyticsParticipantTypePurposePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AnalyticsParticipant) validatePurpose(formats strfmt.Registry) error {
	if swag.IsZero(m.Purpose) { // not required
		return nil
	}

	// value enum
	if err := m.validatePurposeEnum("purpose", "body", m.Purpose); err != nil {
		return err
	}

	return nil
}

func (m *AnalyticsParticipant) validateSessions(formats strfmt.Registry) error {
	if swag.IsZero(m.Sessions) { // not required
		return nil
	}

	for i := 0; i < len(m.Sessions); i++ {
		if swag.IsZero(m.Sessions[i]) { // not required
			continue
		}

		if m.Sessions[i] != nil {
			if err := m.Sessions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sessions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sessions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this analytics participant based on the context it is used
func (m *AnalyticsParticipant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSessions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyticsParticipant) contextValidateSessions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Sessions); i++ {

		if m.Sessions[i] != nil {
			if err := m.Sessions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sessions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sessions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnalyticsParticipant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalyticsParticipant) UnmarshalBinary(b []byte) error {
	var res AnalyticsParticipant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

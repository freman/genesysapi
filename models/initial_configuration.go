// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InitialConfiguration initial configuration
//
// swagger:model InitialConfiguration
type InitialConfiguration struct {

	// Additional metadata about this session which should be recorded by the platform but which will not be indexed or searchable. Primarily for diagnostic value. Any information that needs to be accessible through other components like Analytics should be moved to dedicated fields.
	AdditionalInfo map[string]string `json:"additionalInfo,omitempty"`

	// Indicates that this communication's initial state is alerting. If false, the communication started in a connected state.
	Alerting bool `json:"alerting"`

	// Indicates the initial audio state for the communication.
	AudioState *AudioState `json:"audioState,omitempty"`

	// Indicates the direction of this communication with respect to the contact center. `true` means the communication is INBOUND. `false` means the communication is OUTBOUND.
	Inbound bool `json:"inbound"`

	// The id of the communication (the "peer") that "invited" this communication, if this occurred.
	InvitedBy string `json:"invitedBy,omitempty"`

	// Indicates whether recording is active for this communication at creation.
	RecordingActive bool `json:"recordingActive"`
}

// Validate validates this initial configuration
func (m *InitialConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudioState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InitialConfiguration) validateAudioState(formats strfmt.Registry) error {

	if swag.IsZero(m.AudioState) { // not required
		return nil
	}

	if m.AudioState != nil {
		if err := m.AudioState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audioState")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InitialConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InitialConfiguration) UnmarshalBinary(b []byte) error {
	var res InitialConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

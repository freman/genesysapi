// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MediaTypeAccess Media type access definitions
//
// swagger:model MediaTypeAccess
type MediaTypeAccess struct {

	// List of media types allowed for inbound messages from customers. If inbound messages from a customer contain media that is not in this list, the media will be dropped from the outbound message.
	Inbound []*MediaType `json:"inbound"`

	// List of media types allowed for outbound messages to customers. If an outbound message is sent that contains media that is not in this list, the message will not be sent.
	Outbound []*MediaType `json:"outbound"`
}

// Validate validates this media type access
func (m *MediaTypeAccess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInbound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutbound(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MediaTypeAccess) validateInbound(formats strfmt.Registry) error {

	if swag.IsZero(m.Inbound) { // not required
		return nil
	}

	for i := 0; i < len(m.Inbound); i++ {
		if swag.IsZero(m.Inbound[i]) { // not required
			continue
		}

		if m.Inbound[i] != nil {
			if err := m.Inbound[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inbound" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MediaTypeAccess) validateOutbound(formats strfmt.Registry) error {

	if swag.IsZero(m.Outbound) { // not required
		return nil
	}

	for i := 0; i < len(m.Outbound); i++ {
		if swag.IsZero(m.Outbound[i]) { // not required
			continue
		}

		if m.Outbound[i] != nil {
			if err := m.Outbound[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outbound" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MediaTypeAccess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MediaTypeAccess) UnmarshalBinary(b []byte) error {
	var res MediaTypeAccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

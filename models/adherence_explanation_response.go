// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdherenceExplanationResponse adherence explanation response
//
// swagger:model AdherenceExplanationResponse
type AdherenceExplanationResponse struct {

	// The agent to whom this adherence explanation applies
	// Required: true
	Agent *UserReference `json:"agent"`

	// The business unit to which the agent belonged at the time the adherence explanation was submitted
	// Required: true
	BusinessUnit *BusinessUnitReference `json:"businessUnit"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The length of the adherence explanation in minutes
	// Required: true
	LengthMinutes *int32 `json:"lengthMinutes"`

	// The management unit to which the agent belonged at the time the adherence explanation was submitted
	// Required: true
	ManagementUnit *ManagementUnitReference `json:"managementUnit"`

	// Notes about the adherence explanation
	Notes string `json:"notes,omitempty"`

	// The user who reviewed the adherence explanation, if applicable
	ReviewedBy *UserReference `json:"reviewedBy,omitempty"`

	// The timestamp for when the adherence explanation was reviewed, if applicable. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	ReviewedDate strfmt.DateTime `json:"reviewedDate,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The start timestamp of the adherence explanation in ISO-8601 format
	// Required: true
	// Format: date-time
	StartDate *strfmt.DateTime `json:"startDate"`

	// The status of the adherence explanation
	// Required: true
	// Enum: [Pending Approved Denied]
	Status *string `json:"status"`

	// The type of the adherence explanation
	// Required: true
	// Enum: [Late]
	Type *string `json:"type"`
}

// Validate validates this adherence explanation response
func (m *AdherenceExplanationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLengthMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReviewedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReviewedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdherenceExplanationResponse) validateAgent(formats strfmt.Registry) error {

	if err := validate.Required("agent", "body", m.Agent); err != nil {
		return err
	}

	if m.Agent != nil {
		if err := m.Agent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationResponse) validateBusinessUnit(formats strfmt.Registry) error {

	if err := validate.Required("businessUnit", "body", m.BusinessUnit); err != nil {
		return err
	}

	if m.BusinessUnit != nil {
		if err := m.BusinessUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("businessUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("businessUnit")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationResponse) validateLengthMinutes(formats strfmt.Registry) error {

	if err := validate.Required("lengthMinutes", "body", m.LengthMinutes); err != nil {
		return err
	}

	return nil
}

func (m *AdherenceExplanationResponse) validateManagementUnit(formats strfmt.Registry) error {

	if err := validate.Required("managementUnit", "body", m.ManagementUnit); err != nil {
		return err
	}

	if m.ManagementUnit != nil {
		if err := m.ManagementUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("managementUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("managementUnit")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationResponse) validateReviewedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ReviewedBy) { // not required
		return nil
	}

	if m.ReviewedBy != nil {
		if err := m.ReviewedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reviewedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reviewedBy")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationResponse) validateReviewedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ReviewedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("reviewedDate", "body", "date-time", m.ReviewedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AdherenceExplanationResponse) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AdherenceExplanationResponse) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var adherenceExplanationResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Approved","Denied"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adherenceExplanationResponseTypeStatusPropEnum = append(adherenceExplanationResponseTypeStatusPropEnum, v)
	}
}

const (

	// AdherenceExplanationResponseStatusPending captures enum value "Pending"
	AdherenceExplanationResponseStatusPending string = "Pending"

	// AdherenceExplanationResponseStatusApproved captures enum value "Approved"
	AdherenceExplanationResponseStatusApproved string = "Approved"

	// AdherenceExplanationResponseStatusDenied captures enum value "Denied"
	AdherenceExplanationResponseStatusDenied string = "Denied"
)

// prop value enum
func (m *AdherenceExplanationResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, adherenceExplanationResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdherenceExplanationResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var adherenceExplanationResponseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Late"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adherenceExplanationResponseTypeTypePropEnum = append(adherenceExplanationResponseTypeTypePropEnum, v)
	}
}

const (

	// AdherenceExplanationResponseTypeLate captures enum value "Late"
	AdherenceExplanationResponseTypeLate string = "Late"
)

// prop value enum
func (m *AdherenceExplanationResponse) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, adherenceExplanationResponseTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdherenceExplanationResponse) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this adherence explanation response based on the context it is used
func (m *AdherenceExplanationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBusinessUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManagementUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReviewedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdherenceExplanationResponse) contextValidateAgent(ctx context.Context, formats strfmt.Registry) error {

	if m.Agent != nil {
		if err := m.Agent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationResponse) contextValidateBusinessUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.BusinessUnit != nil {
		if err := m.BusinessUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("businessUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("businessUnit")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationResponse) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *AdherenceExplanationResponse) contextValidateManagementUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.ManagementUnit != nil {
		if err := m.ManagementUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("managementUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("managementUnit")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationResponse) contextValidateReviewedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.ReviewedBy != nil {
		if err := m.ReviewedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reviewedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reviewedBy")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationResponse) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdherenceExplanationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdherenceExplanationResponse) UnmarshalBinary(b []byte) error {
	var res AdherenceExplanationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

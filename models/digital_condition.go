// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DigitalCondition digital condition
//
// swagger:model DigitalCondition
type DigitalCondition struct {

	// The settings for a 'contact address' condition.
	ContactAddressConditionSettings *ContactAddressConditionSettings `json:"contactAddressConditionSettings,omitempty"`

	// The settings for a 'contact address type' condition.
	ContactAddressTypeConditionSettings *ContactAddressTypeConditionSettings `json:"contactAddressTypeConditionSettings,omitempty"`

	// The settings for a 'contact list column' condition.
	ContactColumnConditionSettings *ContactColumnConditionSettings `json:"contactColumnConditionSettings,omitempty"`

	// The settings for a 'data action' condition.
	DataActionConditionSettings *DataActionConditionSettings `json:"dataActionConditionSettings,omitempty"`

	// If true, inverts the result of evaluating this condition. Default is false.
	Inverted bool `json:"inverted"`

	// The settings for a 'last attempt by column' condition.
	LastAttemptByColumnConditionSettings *LastAttemptByColumnConditionSettings `json:"lastAttemptByColumnConditionSettings,omitempty"`

	// The settings for a 'last attempt overall' condition.
	LastAttemptOverallConditionSettings *LastAttemptOverallConditionSettings `json:"lastAttemptOverallConditionSettings,omitempty"`

	// The settings for a 'last result by column' condition.
	LastResultByColumnConditionSettings *LastResultByColumnConditionSettings `json:"lastResultByColumnConditionSettings,omitempty"`

	// The settings for a 'last result overall' condition.
	LastResultOverallConditionSettings *LastResultOverallConditionSettings `json:"lastResultOverallConditionSettings,omitempty"`
}

// Validate validates this digital condition
func (m *DigitalCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactAddressConditionSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactAddressTypeConditionSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactColumnConditionSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataActionConditionSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastAttemptByColumnConditionSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastAttemptOverallConditionSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastResultByColumnConditionSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastResultOverallConditionSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DigitalCondition) validateContactAddressConditionSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactAddressConditionSettings) { // not required
		return nil
	}

	if m.ContactAddressConditionSettings != nil {
		if err := m.ContactAddressConditionSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactAddressConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactAddressConditionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DigitalCondition) validateContactAddressTypeConditionSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactAddressTypeConditionSettings) { // not required
		return nil
	}

	if m.ContactAddressTypeConditionSettings != nil {
		if err := m.ContactAddressTypeConditionSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactAddressTypeConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactAddressTypeConditionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DigitalCondition) validateContactColumnConditionSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactColumnConditionSettings) { // not required
		return nil
	}

	if m.ContactColumnConditionSettings != nil {
		if err := m.ContactColumnConditionSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactColumnConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactColumnConditionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DigitalCondition) validateDataActionConditionSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.DataActionConditionSettings) { // not required
		return nil
	}

	if m.DataActionConditionSettings != nil {
		if err := m.DataActionConditionSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataActionConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataActionConditionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DigitalCondition) validateLastAttemptByColumnConditionSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.LastAttemptByColumnConditionSettings) { // not required
		return nil
	}

	if m.LastAttemptByColumnConditionSettings != nil {
		if err := m.LastAttemptByColumnConditionSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastAttemptByColumnConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastAttemptByColumnConditionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DigitalCondition) validateLastAttemptOverallConditionSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.LastAttemptOverallConditionSettings) { // not required
		return nil
	}

	if m.LastAttemptOverallConditionSettings != nil {
		if err := m.LastAttemptOverallConditionSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastAttemptOverallConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastAttemptOverallConditionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DigitalCondition) validateLastResultByColumnConditionSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.LastResultByColumnConditionSettings) { // not required
		return nil
	}

	if m.LastResultByColumnConditionSettings != nil {
		if err := m.LastResultByColumnConditionSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastResultByColumnConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastResultByColumnConditionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DigitalCondition) validateLastResultOverallConditionSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.LastResultOverallConditionSettings) { // not required
		return nil
	}

	if m.LastResultOverallConditionSettings != nil {
		if err := m.LastResultOverallConditionSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastResultOverallConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastResultOverallConditionSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this digital condition based on the context it is used
func (m *DigitalCondition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContactAddressConditionSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContactAddressTypeConditionSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContactColumnConditionSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataActionConditionSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastAttemptByColumnConditionSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastAttemptOverallConditionSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastResultByColumnConditionSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastResultOverallConditionSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DigitalCondition) contextValidateContactAddressConditionSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactAddressConditionSettings != nil {
		if err := m.ContactAddressConditionSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactAddressConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactAddressConditionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DigitalCondition) contextValidateContactAddressTypeConditionSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactAddressTypeConditionSettings != nil {
		if err := m.ContactAddressTypeConditionSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactAddressTypeConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactAddressTypeConditionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DigitalCondition) contextValidateContactColumnConditionSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactColumnConditionSettings != nil {
		if err := m.ContactColumnConditionSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactColumnConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactColumnConditionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DigitalCondition) contextValidateDataActionConditionSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.DataActionConditionSettings != nil {
		if err := m.DataActionConditionSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataActionConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataActionConditionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DigitalCondition) contextValidateLastAttemptByColumnConditionSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.LastAttemptByColumnConditionSettings != nil {
		if err := m.LastAttemptByColumnConditionSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastAttemptByColumnConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastAttemptByColumnConditionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DigitalCondition) contextValidateLastAttemptOverallConditionSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.LastAttemptOverallConditionSettings != nil {
		if err := m.LastAttemptOverallConditionSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastAttemptOverallConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastAttemptOverallConditionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DigitalCondition) contextValidateLastResultByColumnConditionSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.LastResultByColumnConditionSettings != nil {
		if err := m.LastResultByColumnConditionSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastResultByColumnConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastResultByColumnConditionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DigitalCondition) contextValidateLastResultOverallConditionSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.LastResultOverallConditionSettings != nil {
		if err := m.LastResultOverallConditionSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastResultOverallConditionSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastResultOverallConditionSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DigitalCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DigitalCondition) UnmarshalBinary(b []byte) error {
	var res DigitalCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

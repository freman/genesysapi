// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DocumentBodyBlock document body block
//
// swagger:model DocumentBodyBlock
type DocumentBodyBlock struct {

	// Image. It must contain a value if the type of the block is Image.
	// Required: true
	Image *DocumentBodyImage `json:"image"`

	// List. It must contain a value if the type of the block is UnorderedList or OrderedList.
	// Required: true
	List *DocumentBodyList `json:"list"`

	// Paragraph. It must contain a value if the type of the block is Paragraph.
	// Required: true
	Paragraph *DocumentBodyParagraph `json:"paragraph"`

	// The type of the block for the body. This determines which body block object (paragraph, list, video or image) would have a value.
	// Required: true
	// Enum: [Paragraph Image Video OrderedList UnorderedList]
	Type *string `json:"type"`

	// Video. It must contain a value if the type of the block is Video.
	// Required: true
	Video *DocumentBodyVideo `json:"video"`
}

// Validate validates this document body block
func (m *DocumentBodyBlock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParagraph(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DocumentBodyBlock) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *DocumentBodyBlock) validateList(formats strfmt.Registry) error {

	if err := validate.Required("list", "body", m.List); err != nil {
		return err
	}

	if m.List != nil {
		if err := m.List.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("list")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("list")
			}
			return err
		}
	}

	return nil
}

func (m *DocumentBodyBlock) validateParagraph(formats strfmt.Registry) error {

	if err := validate.Required("paragraph", "body", m.Paragraph); err != nil {
		return err
	}

	if m.Paragraph != nil {
		if err := m.Paragraph.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paragraph")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paragraph")
			}
			return err
		}
	}

	return nil
}

var documentBodyBlockTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Paragraph","Image","Video","OrderedList","UnorderedList"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		documentBodyBlockTypeTypePropEnum = append(documentBodyBlockTypeTypePropEnum, v)
	}
}

const (

	// DocumentBodyBlockTypeParagraph captures enum value "Paragraph"
	DocumentBodyBlockTypeParagraph string = "Paragraph"

	// DocumentBodyBlockTypeImage captures enum value "Image"
	DocumentBodyBlockTypeImage string = "Image"

	// DocumentBodyBlockTypeVideo captures enum value "Video"
	DocumentBodyBlockTypeVideo string = "Video"

	// DocumentBodyBlockTypeOrderedList captures enum value "OrderedList"
	DocumentBodyBlockTypeOrderedList string = "OrderedList"

	// DocumentBodyBlockTypeUnorderedList captures enum value "UnorderedList"
	DocumentBodyBlockTypeUnorderedList string = "UnorderedList"
)

// prop value enum
func (m *DocumentBodyBlock) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, documentBodyBlockTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DocumentBodyBlock) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *DocumentBodyBlock) validateVideo(formats strfmt.Registry) error {

	if err := validate.Required("video", "body", m.Video); err != nil {
		return err
	}

	if m.Video != nil {
		if err := m.Video.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("video")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("video")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this document body block based on the context it is used
func (m *DocumentBodyBlock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParagraph(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVideo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DocumentBodyBlock) contextValidateImage(ctx context.Context, formats strfmt.Registry) error {

	if m.Image != nil {
		if err := m.Image.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *DocumentBodyBlock) contextValidateList(ctx context.Context, formats strfmt.Registry) error {

	if m.List != nil {
		if err := m.List.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("list")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("list")
			}
			return err
		}
	}

	return nil
}

func (m *DocumentBodyBlock) contextValidateParagraph(ctx context.Context, formats strfmt.Registry) error {

	if m.Paragraph != nil {
		if err := m.Paragraph.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paragraph")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paragraph")
			}
			return err
		}
	}

	return nil
}

func (m *DocumentBodyBlock) contextValidateVideo(ctx context.Context, formats strfmt.Registry) error {

	if m.Video != nil {
		if err := m.Video.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("video")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("video")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DocumentBodyBlock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DocumentBodyBlock) UnmarshalBinary(b []byte) error {
	var res DocumentBodyBlock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

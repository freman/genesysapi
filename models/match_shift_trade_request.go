// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MatchShiftTradeRequest match shift trade request
//
// swagger:model MatchShiftTradeRequest
type MatchShiftTradeRequest struct {

	// Version metadata for the shift trade
	// Required: true
	Metadata *WfmVersionedEntityMetadata `json:"metadata"`

	// The ID of the schedule with which the shift trade is associated
	// Required: true
	ReceivingScheduleID *string `json:"receivingScheduleId"`

	// The ID of the shift the receiving user is giving up in trade, if applicable
	ReceivingShiftID string `json:"receivingShiftId,omitempty"`
}

// Validate validates this match shift trade request
func (m *MatchShiftTradeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivingScheduleID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchShiftTradeRequest) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("metadata", "body", m.Metadata); err != nil {
		return err
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *MatchShiftTradeRequest) validateReceivingScheduleID(formats strfmt.Registry) error {

	if err := validate.Required("receivingScheduleId", "body", m.ReceivingScheduleID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this match shift trade request based on the context it is used
func (m *MatchShiftTradeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchShiftTradeRequest) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MatchShiftTradeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MatchShiftTradeRequest) UnmarshalBinary(b []byte) error {
	var res MatchShiftTradeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

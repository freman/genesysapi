// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecordingUploadReport recording upload report
//
// swagger:model RecordingUploadReport
type RecordingUploadReport struct {

	// The report id.
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// For COMPLETED tasks, the signed url to download the report.
	SignedURL string `json:"signedUrl,omitempty"`

	// The current status of the upload report.
	// Enum: [InProgress Completed Failed]
	State string `json:"state,omitempty"`
}

// Validate validates this recording upload report
func (m *RecordingUploadReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecordingUploadReport) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var recordingUploadReportTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InProgress","Completed","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recordingUploadReportTypeStatePropEnum = append(recordingUploadReportTypeStatePropEnum, v)
	}
}

const (

	// RecordingUploadReportStateInProgress captures enum value "InProgress"
	RecordingUploadReportStateInProgress string = "InProgress"

	// RecordingUploadReportStateCompleted captures enum value "Completed"
	RecordingUploadReportStateCompleted string = "Completed"

	// RecordingUploadReportStateFailed captures enum value "Failed"
	RecordingUploadReportStateFailed string = "Failed"
)

// prop value enum
func (m *RecordingUploadReport) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recordingUploadReportTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecordingUploadReport) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this recording upload report based on the context it is used
func (m *RecordingUploadReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecordingUploadReport) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecordingUploadReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecordingUploadReport) UnmarshalBinary(b []byte) error {
	var res RecordingUploadReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

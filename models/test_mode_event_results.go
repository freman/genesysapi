// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TestModeEventResults Information about event test mode execution
//
// swagger:model TestModeEventResults
type TestModeEventResults struct {

	// Information about the validation of the schema of the event body passed in to test mode
	SchemaValidation *TestSchemaOperation `json:"schemaValidation,omitempty"`

	// Information about matched and unmatched triggers
	TriggerMatchValidation *TestMatchesEventOperation `json:"triggerMatchValidation,omitempty"`
}

// Validate validates this test mode event results
func (m *TestModeEventResults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchemaValidation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerMatchValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestModeEventResults) validateSchemaValidation(formats strfmt.Registry) error {
	if swag.IsZero(m.SchemaValidation) { // not required
		return nil
	}

	if m.SchemaValidation != nil {
		if err := m.SchemaValidation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schemaValidation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schemaValidation")
			}
			return err
		}
	}

	return nil
}

func (m *TestModeEventResults) validateTriggerMatchValidation(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggerMatchValidation) { // not required
		return nil
	}

	if m.TriggerMatchValidation != nil {
		if err := m.TriggerMatchValidation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("triggerMatchValidation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("triggerMatchValidation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this test mode event results based on the context it is used
func (m *TestModeEventResults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSchemaValidation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerMatchValidation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestModeEventResults) contextValidateSchemaValidation(ctx context.Context, formats strfmt.Registry) error {

	if m.SchemaValidation != nil {
		if err := m.SchemaValidation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schemaValidation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schemaValidation")
			}
			return err
		}
	}

	return nil
}

func (m *TestModeEventResults) contextValidateTriggerMatchValidation(ctx context.Context, formats strfmt.Registry) error {

	if m.TriggerMatchValidation != nil {
		if err := m.TriggerMatchValidation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("triggerMatchValidation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("triggerMatchValidation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestModeEventResults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestModeEventResults) UnmarshalBinary(b []byte) error {
	var res TestModeEventResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

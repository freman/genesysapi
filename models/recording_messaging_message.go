// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecordingMessagingMessage recording messaging message
//
// swagger:model RecordingMessagingMessage
type RecordingMessagingMessage struct {

	// Button Response selected by user for this message.
	ButtonResponse *ButtonResponse `json:"buttonResponse,omitempty"`

	// The message sender session id.
	From string `json:"from,omitempty"`

	// The PureCloud external contact sender details.
	FromExternalContact *ExternalContact `json:"fromExternalContact,omitempty"`

	// The user who sent this message.
	FromUser *User `json:"fromUser,omitempty"`

	// A globally unique identifier for this communication.
	ID string `json:"id,omitempty"`

	// List of media objects attached  with this message.
	MessageMediaAttachments []*MessageMediaAttachment `json:"messageMediaAttachments"`

	// List of message stickers attached with this message.
	MessageStickerAttachments []*MessageStickerAttachment `json:"messageStickerAttachments"`

	// The content of this message.
	MessageText string `json:"messageText,omitempty"`

	// List of quick reply options offered with this message.
	QuickReplies []*QuickReply `json:"quickReplies"`

	// Ephemeral story content.
	Story *RecordingContentStory `json:"story,omitempty"`

	// The time when the message was sent. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// The message recipient.
	To string `json:"to,omitempty"`
}

// Validate validates this recording messaging message
func (m *RecordingMessagingMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateButtonResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromExternalContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageMediaAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageStickerAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuickReplies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecordingMessagingMessage) validateButtonResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.ButtonResponse) { // not required
		return nil
	}

	if m.ButtonResponse != nil {
		if err := m.ButtonResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buttonResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buttonResponse")
			}
			return err
		}
	}

	return nil
}

func (m *RecordingMessagingMessage) validateFromExternalContact(formats strfmt.Registry) error {
	if swag.IsZero(m.FromExternalContact) { // not required
		return nil
	}

	if m.FromExternalContact != nil {
		if err := m.FromExternalContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fromExternalContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fromExternalContact")
			}
			return err
		}
	}

	return nil
}

func (m *RecordingMessagingMessage) validateFromUser(formats strfmt.Registry) error {
	if swag.IsZero(m.FromUser) { // not required
		return nil
	}

	if m.FromUser != nil {
		if err := m.FromUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fromUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fromUser")
			}
			return err
		}
	}

	return nil
}

func (m *RecordingMessagingMessage) validateMessageMediaAttachments(formats strfmt.Registry) error {
	if swag.IsZero(m.MessageMediaAttachments) { // not required
		return nil
	}

	for i := 0; i < len(m.MessageMediaAttachments); i++ {
		if swag.IsZero(m.MessageMediaAttachments[i]) { // not required
			continue
		}

		if m.MessageMediaAttachments[i] != nil {
			if err := m.MessageMediaAttachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messageMediaAttachments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messageMediaAttachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecordingMessagingMessage) validateMessageStickerAttachments(formats strfmt.Registry) error {
	if swag.IsZero(m.MessageStickerAttachments) { // not required
		return nil
	}

	for i := 0; i < len(m.MessageStickerAttachments); i++ {
		if swag.IsZero(m.MessageStickerAttachments[i]) { // not required
			continue
		}

		if m.MessageStickerAttachments[i] != nil {
			if err := m.MessageStickerAttachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messageStickerAttachments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messageStickerAttachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecordingMessagingMessage) validateQuickReplies(formats strfmt.Registry) error {
	if swag.IsZero(m.QuickReplies) { // not required
		return nil
	}

	for i := 0; i < len(m.QuickReplies); i++ {
		if swag.IsZero(m.QuickReplies[i]) { // not required
			continue
		}

		if m.QuickReplies[i] != nil {
			if err := m.QuickReplies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quickReplies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("quickReplies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecordingMessagingMessage) validateStory(formats strfmt.Registry) error {
	if swag.IsZero(m.Story) { // not required
		return nil
	}

	if m.Story != nil {
		if err := m.Story.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("story")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("story")
			}
			return err
		}
	}

	return nil
}

func (m *RecordingMessagingMessage) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this recording messaging message based on the context it is used
func (m *RecordingMessagingMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateButtonResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFromExternalContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFromUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessageMediaAttachments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessageStickerAttachments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuickReplies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecordingMessagingMessage) contextValidateButtonResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.ButtonResponse != nil {
		if err := m.ButtonResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buttonResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buttonResponse")
			}
			return err
		}
	}

	return nil
}

func (m *RecordingMessagingMessage) contextValidateFromExternalContact(ctx context.Context, formats strfmt.Registry) error {

	if m.FromExternalContact != nil {
		if err := m.FromExternalContact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fromExternalContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fromExternalContact")
			}
			return err
		}
	}

	return nil
}

func (m *RecordingMessagingMessage) contextValidateFromUser(ctx context.Context, formats strfmt.Registry) error {

	if m.FromUser != nil {
		if err := m.FromUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fromUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fromUser")
			}
			return err
		}
	}

	return nil
}

func (m *RecordingMessagingMessage) contextValidateMessageMediaAttachments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MessageMediaAttachments); i++ {

		if m.MessageMediaAttachments[i] != nil {
			if err := m.MessageMediaAttachments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messageMediaAttachments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messageMediaAttachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecordingMessagingMessage) contextValidateMessageStickerAttachments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MessageStickerAttachments); i++ {

		if m.MessageStickerAttachments[i] != nil {
			if err := m.MessageStickerAttachments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messageStickerAttachments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messageStickerAttachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecordingMessagingMessage) contextValidateQuickReplies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.QuickReplies); i++ {

		if m.QuickReplies[i] != nil {
			if err := m.QuickReplies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quickReplies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("quickReplies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecordingMessagingMessage) contextValidateStory(ctx context.Context, formats strfmt.Registry) error {

	if m.Story != nil {
		if err := m.Story.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("story")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("story")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecordingMessagingMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecordingMessagingMessage) UnmarshalBinary(b []byte) error {
	var res RecordingMessagingMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

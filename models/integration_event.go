// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationEvent Describes an event that has happened related to an integration
//
// swagger:model IntegrationEvent
type IntegrationEvent struct {

	// Map of context attributes specific to this event.
	// Read Only: true
	ContextAttributes map[string]string `json:"contextAttributes,omitempty"`

	// Correlation ID for the event
	// Read Only: true
	CorrelationID string `json:"correlationId,omitempty"`

	// Message with additional details about the event. (e.g. an exception cause.)
	DetailMessage *MessageInfo `json:"detailMessage,omitempty"`

	// Collection of entities affected by or pertaining to the event (e.g. a list of Integrations or Bridge connectors)
	// Read Only: true
	Entities []*EventEntity `json:"entities"`

	// A classification for the event. Suitable for programmatic searching, sorting, or filtering
	// Read Only: true
	EventCode string `json:"eventCode,omitempty"`

	// Unique ID for this event
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Indicates the severity of the event.
	// Read Only: true
	// Enum: [INFO WARN ERROR CRITICAL]
	Level string `json:"level,omitempty"`

	// Message indicating what happened
	// Read Only: true
	Message *MessageInfo `json:"message,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Time the event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Read Only: true
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// User that took an action that resulted in the event.
	// Read Only: true
	User *User `json:"user,omitempty"`
}

// Validate validates this integration event
func (m *IntegrationEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetailMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationEvent) validateDetailMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.DetailMessage) { // not required
		return nil
	}

	if m.DetailMessage != nil {
		if err := m.DetailMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("detailMessage")
			}
			return err
		}
	}

	return nil
}

func (m *IntegrationEvent) validateEntities(formats strfmt.Registry) error {

	if swag.IsZero(m.Entities) { // not required
		return nil
	}

	for i := 0; i < len(m.Entities); i++ {
		if swag.IsZero(m.Entities[i]) { // not required
			continue
		}

		if m.Entities[i] != nil {
			if err := m.Entities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var integrationEventTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INFO","WARN","ERROR","CRITICAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		integrationEventTypeLevelPropEnum = append(integrationEventTypeLevelPropEnum, v)
	}
}

const (

	// IntegrationEventLevelINFO captures enum value "INFO"
	IntegrationEventLevelINFO string = "INFO"

	// IntegrationEventLevelWARN captures enum value "WARN"
	IntegrationEventLevelWARN string = "WARN"

	// IntegrationEventLevelERROR captures enum value "ERROR"
	IntegrationEventLevelERROR string = "ERROR"

	// IntegrationEventLevelCRITICAL captures enum value "CRITICAL"
	IntegrationEventLevelCRITICAL string = "CRITICAL"
)

// prop value enum
func (m *IntegrationEvent) validateLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, integrationEventTypeLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntegrationEvent) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationEvent) validateMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.Message) { // not required
		return nil
	}

	if m.Message != nil {
		if err := m.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("message")
			}
			return err
		}
	}

	return nil
}

func (m *IntegrationEvent) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationEvent) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationEvent) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationEvent) UnmarshalBinary(b []byte) error {
	var res IntegrationEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

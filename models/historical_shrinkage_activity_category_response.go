// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HistoricalShrinkageActivityCategoryResponse historical shrinkage activity category response
//
// swagger:model HistoricalShrinkageActivityCategoryResponse
type HistoricalShrinkageActivityCategoryResponse struct {

	// Activity category for which shrinkage data is provided
	// Enum: [OnQueueWork Break Meal Meeting OffQueueWork TimeOff Training Unavailable Unscheduled]
	ActivityCategory string `json:"activityCategory,omitempty"`

	// Aggregated shrinkage data for the activity category
	ShrinkageForActivityCategory *HistoricalShrinkageAggregateResponse `json:"shrinkageForActivityCategory,omitempty"`

	// Shrinkage for the activity codes under this activity category
	ShrinkageForActivityCodes []*HistoricalShrinkageActivityCodeResponse `json:"shrinkageForActivityCodes"`
}

// Validate validates this historical shrinkage activity category response
func (m *HistoricalShrinkageActivityCategoryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShrinkageForActivityCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShrinkageForActivityCodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var historicalShrinkageActivityCategoryResponseTypeActivityCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OnQueueWork","Break","Meal","Meeting","OffQueueWork","TimeOff","Training","Unavailable","Unscheduled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historicalShrinkageActivityCategoryResponseTypeActivityCategoryPropEnum = append(historicalShrinkageActivityCategoryResponseTypeActivityCategoryPropEnum, v)
	}
}

const (

	// HistoricalShrinkageActivityCategoryResponseActivityCategoryOnQueueWork captures enum value "OnQueueWork"
	HistoricalShrinkageActivityCategoryResponseActivityCategoryOnQueueWork string = "OnQueueWork"

	// HistoricalShrinkageActivityCategoryResponseActivityCategoryBreak captures enum value "Break"
	HistoricalShrinkageActivityCategoryResponseActivityCategoryBreak string = "Break"

	// HistoricalShrinkageActivityCategoryResponseActivityCategoryMeal captures enum value "Meal"
	HistoricalShrinkageActivityCategoryResponseActivityCategoryMeal string = "Meal"

	// HistoricalShrinkageActivityCategoryResponseActivityCategoryMeeting captures enum value "Meeting"
	HistoricalShrinkageActivityCategoryResponseActivityCategoryMeeting string = "Meeting"

	// HistoricalShrinkageActivityCategoryResponseActivityCategoryOffQueueWork captures enum value "OffQueueWork"
	HistoricalShrinkageActivityCategoryResponseActivityCategoryOffQueueWork string = "OffQueueWork"

	// HistoricalShrinkageActivityCategoryResponseActivityCategoryTimeOff captures enum value "TimeOff"
	HistoricalShrinkageActivityCategoryResponseActivityCategoryTimeOff string = "TimeOff"

	// HistoricalShrinkageActivityCategoryResponseActivityCategoryTraining captures enum value "Training"
	HistoricalShrinkageActivityCategoryResponseActivityCategoryTraining string = "Training"

	// HistoricalShrinkageActivityCategoryResponseActivityCategoryUnavailable captures enum value "Unavailable"
	HistoricalShrinkageActivityCategoryResponseActivityCategoryUnavailable string = "Unavailable"

	// HistoricalShrinkageActivityCategoryResponseActivityCategoryUnscheduled captures enum value "Unscheduled"
	HistoricalShrinkageActivityCategoryResponseActivityCategoryUnscheduled string = "Unscheduled"
)

// prop value enum
func (m *HistoricalShrinkageActivityCategoryResponse) validateActivityCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historicalShrinkageActivityCategoryResponseTypeActivityCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HistoricalShrinkageActivityCategoryResponse) validateActivityCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.ActivityCategory) { // not required
		return nil
	}

	// value enum
	if err := m.validateActivityCategoryEnum("activityCategory", "body", m.ActivityCategory); err != nil {
		return err
	}

	return nil
}

func (m *HistoricalShrinkageActivityCategoryResponse) validateShrinkageForActivityCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.ShrinkageForActivityCategory) { // not required
		return nil
	}

	if m.ShrinkageForActivityCategory != nil {
		if err := m.ShrinkageForActivityCategory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shrinkageForActivityCategory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shrinkageForActivityCategory")
			}
			return err
		}
	}

	return nil
}

func (m *HistoricalShrinkageActivityCategoryResponse) validateShrinkageForActivityCodes(formats strfmt.Registry) error {
	if swag.IsZero(m.ShrinkageForActivityCodes) { // not required
		return nil
	}

	for i := 0; i < len(m.ShrinkageForActivityCodes); i++ {
		if swag.IsZero(m.ShrinkageForActivityCodes[i]) { // not required
			continue
		}

		if m.ShrinkageForActivityCodes[i] != nil {
			if err := m.ShrinkageForActivityCodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shrinkageForActivityCodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shrinkageForActivityCodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this historical shrinkage activity category response based on the context it is used
func (m *HistoricalShrinkageActivityCategoryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateShrinkageForActivityCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShrinkageForActivityCodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HistoricalShrinkageActivityCategoryResponse) contextValidateShrinkageForActivityCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.ShrinkageForActivityCategory != nil {
		if err := m.ShrinkageForActivityCategory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shrinkageForActivityCategory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shrinkageForActivityCategory")
			}
			return err
		}
	}

	return nil
}

func (m *HistoricalShrinkageActivityCategoryResponse) contextValidateShrinkageForActivityCodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ShrinkageForActivityCodes); i++ {

		if m.ShrinkageForActivityCodes[i] != nil {
			if err := m.ShrinkageForActivityCodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shrinkageForActivityCodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shrinkageForActivityCodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HistoricalShrinkageActivityCategoryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoricalShrinkageActivityCategoryResponse) UnmarshalBinary(b []byte) error {
	var res HistoricalShrinkageActivityCategoryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

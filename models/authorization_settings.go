// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthorizationSettings authorization settings
//
// swagger:model AuthorizationSettings
type AuthorizationSettings struct {

	// Integer number of days to analyze user usage
	// Read Only: true
	AnalysisDays int32 `json:"analysisDays,omitempty"`

	// Boolean showing if organization is opted in or not to unused role/perm analysis
	// Read Only: true
	AnalysisEnabled *bool `json:"analysisEnabled"`

	// The date of the most recent org activity used for analysis. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Read Only: true
	// Format: date
	DateLastActive strfmt.Date `json:"dateLastActive,omitempty"`

	// The date and time of the most recent unused role calculation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateLastCalculated strfmt.DateTime `json:"dateLastCalculated,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this authorization settings
func (m *AuthorizationSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateLastActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateLastCalculated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationSettings) validateDateLastActive(formats strfmt.Registry) error {
	if swag.IsZero(m.DateLastActive) { // not required
		return nil
	}

	if err := validate.FormatOf("dateLastActive", "body", "date", m.DateLastActive.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationSettings) validateDateLastCalculated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateLastCalculated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateLastCalculated", "body", "date-time", m.DateLastCalculated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationSettings) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this authorization settings based on the context it is used
func (m *AuthorizationSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAnalysisDays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAnalysisEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateLastActive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateLastCalculated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationSettings) contextValidateAnalysisDays(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "analysisDays", "body", int32(m.AnalysisDays)); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationSettings) contextValidateAnalysisEnabled(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "analysisEnabled", "body", m.AnalysisEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationSettings) contextValidateDateLastActive(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateLastActive", "body", strfmt.Date(m.DateLastActive)); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationSettings) contextValidateDateLastCalculated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateLastCalculated", "body", strfmt.DateTime(m.DateLastCalculated)); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationSettings) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationSettings) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthorizationSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthorizationSettings) UnmarshalBinary(b []byte) error {
	var res AuthorizationSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

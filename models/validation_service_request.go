// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ValidationServiceRequest validation service request
//
// swagger:model ValidationServiceRequest
type ValidationServiceRequest struct {

	// The last day of the data you are importing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Required: true
	// Format: date-time
	DateImportEnded *strfmt.DateTime `json:"dateImportEnded"`

	// Path to the file in the storage including the file name
	// Required: true
	FileURL *string `json:"fileUrl"`
}

// Validate validates this validation service request
func (m *ValidationServiceRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateImportEnded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidationServiceRequest) validateDateImportEnded(formats strfmt.Registry) error {

	if err := validate.Required("dateImportEnded", "body", m.DateImportEnded); err != nil {
		return err
	}

	if err := validate.FormatOf("dateImportEnded", "body", "date-time", m.DateImportEnded.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ValidationServiceRequest) validateFileURL(formats strfmt.Registry) error {

	if err := validate.Required("fileUrl", "body", m.FileURL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidationServiceRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidationServiceRequest) UnmarshalBinary(b []byte) error {
	var res ValidationServiceRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GDPRRequest g d p r request
//
// swagger:model GDPRRequest
type GDPRRequest struct {

	// The user that created this request
	// Required: true
	// Read Only: true
	CreatedBy *DomainEntityRef `json:"createdBy"`

	// When the request was submitted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Required: true
	// Read Only: true
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The replacement terms for the provided search terms, in the case of a GDPR_UPDATE request
	// Example: [ { \"type\": \"EMAIL\": \"existingValue\": \"personal.email@domain.com\", \"updatedValue\": \"updated.personal.email@domain.com\" } ]
	ReplacementTerms []*ReplacementTerm `json:"replacementTerms"`

	// The type of GDPR request
	// Required: true
	// Enum: [GDPR_EXPORT GDPR_UPDATE GDPR_DELETE]
	RequestType *string `json:"requestType"`

	// The location where the results of the request can be retrieved
	// Read Only: true
	ResultsURL string `json:"resultsUrl,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The status of the request
	// Required: true
	// Read Only: true
	// Enum: [INITIATED SEARCHING UPDATING DELETING COMPLETED ERROR FINALIZING]
	Status string `json:"status"`

	// The subject of the GDPR request
	// Example: { \"emailAddresses\": [\"personal.email@domain.com\"], \"phoneNumbers\": [\"+13115552368\"] }
	// Required: true
	Subject *GDPRSubject `json:"subject"`
}

// Validate validates this g d p r request
func (m *GDPRRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplacementTerms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GDPRRequest) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("createdBy", "body", m.CreatedBy); err != nil {
		return err
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *GDPRRequest) validateCreatedDate(formats strfmt.Registry) error {

	if err := validate.Required("createdDate", "body", strfmt.DateTime(m.CreatedDate)); err != nil {
		return err
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GDPRRequest) validateReplacementTerms(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplacementTerms) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplacementTerms); i++ {
		if swag.IsZero(m.ReplacementTerms[i]) { // not required
			continue
		}

		if m.ReplacementTerms[i] != nil {
			if err := m.ReplacementTerms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replacementTerms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replacementTerms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var gDPRRequestTypeRequestTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GDPR_EXPORT","GDPR_UPDATE","GDPR_DELETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gDPRRequestTypeRequestTypePropEnum = append(gDPRRequestTypeRequestTypePropEnum, v)
	}
}

const (

	// GDPRRequestRequestTypeGDPREXPORT captures enum value "GDPR_EXPORT"
	GDPRRequestRequestTypeGDPREXPORT string = "GDPR_EXPORT"

	// GDPRRequestRequestTypeGDPRUPDATE captures enum value "GDPR_UPDATE"
	GDPRRequestRequestTypeGDPRUPDATE string = "GDPR_UPDATE"

	// GDPRRequestRequestTypeGDPRDELETE captures enum value "GDPR_DELETE"
	GDPRRequestRequestTypeGDPRDELETE string = "GDPR_DELETE"
)

// prop value enum
func (m *GDPRRequest) validateRequestTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gDPRRequestTypeRequestTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GDPRRequest) validateRequestType(formats strfmt.Registry) error {

	if err := validate.Required("requestType", "body", m.RequestType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRequestTypeEnum("requestType", "body", *m.RequestType); err != nil {
		return err
	}

	return nil
}

func (m *GDPRRequest) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var gDPRRequestTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INITIATED","SEARCHING","UPDATING","DELETING","COMPLETED","ERROR","FINALIZING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gDPRRequestTypeStatusPropEnum = append(gDPRRequestTypeStatusPropEnum, v)
	}
}

const (

	// GDPRRequestStatusINITIATED captures enum value "INITIATED"
	GDPRRequestStatusINITIATED string = "INITIATED"

	// GDPRRequestStatusSEARCHING captures enum value "SEARCHING"
	GDPRRequestStatusSEARCHING string = "SEARCHING"

	// GDPRRequestStatusUPDATING captures enum value "UPDATING"
	GDPRRequestStatusUPDATING string = "UPDATING"

	// GDPRRequestStatusDELETING captures enum value "DELETING"
	GDPRRequestStatusDELETING string = "DELETING"

	// GDPRRequestStatusCOMPLETED captures enum value "COMPLETED"
	GDPRRequestStatusCOMPLETED string = "COMPLETED"

	// GDPRRequestStatusERROR captures enum value "ERROR"
	GDPRRequestStatusERROR string = "ERROR"

	// GDPRRequestStatusFINALIZING captures enum value "FINALIZING"
	GDPRRequestStatusFINALIZING string = "FINALIZING"
)

// prop value enum
func (m *GDPRRequest) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gDPRRequestTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GDPRRequest) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *GDPRRequest) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("subject", "body", m.Subject); err != nil {
		return err
	}

	if m.Subject != nil {
		if err := m.Subject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this g d p r request based on the context it is used
func (m *GDPRRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplacementTerms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResultsURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GDPRRequest) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {
		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *GDPRRequest) contextValidateCreatedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdDate", "body", strfmt.DateTime(m.CreatedDate)); err != nil {
		return err
	}

	return nil
}

func (m *GDPRRequest) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *GDPRRequest) contextValidateReplacementTerms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplacementTerms); i++ {

		if m.ReplacementTerms[i] != nil {
			if err := m.ReplacementTerms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replacementTerms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replacementTerms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GDPRRequest) contextValidateResultsURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "resultsUrl", "body", string(m.ResultsURL)); err != nil {
		return err
	}

	return nil
}

func (m *GDPRRequest) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *GDPRRequest) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *GDPRRequest) contextValidateSubject(ctx context.Context, formats strfmt.Registry) error {

	if m.Subject != nil {
		if err := m.Subject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GDPRRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GDPRRequest) UnmarshalBinary(b []byte) error {
	var res GDPRRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Criteria criteria
//
// swagger:model Criteria
type Criteria struct {

	// The criteria key.
	// Required: true
	Key *string `json:"key"`

	// The comparison operator.
	// Enum: [containsAll containsAny notContainsAll notContainsAny equal notEqual greaterThan greaterThanOrEqual lessThan lessThanOrEqual startsWith endsWith]
	Operator string `json:"operator,omitempty"`

	// Should criteria be case insensitive.
	// Required: true
	ShouldIgnoreCase *bool `json:"shouldIgnoreCase"`

	// The criteria values.
	// Required: true
	Values []string `json:"values"`
}

// Validate validates this criteria
func (m *Criteria) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShouldIgnoreCase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Criteria) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

var criteriaTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["containsAll","containsAny","notContainsAll","notContainsAny","equal","notEqual","greaterThan","greaterThanOrEqual","lessThan","lessThanOrEqual","startsWith","endsWith"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		criteriaTypeOperatorPropEnum = append(criteriaTypeOperatorPropEnum, v)
	}
}

const (

	// CriteriaOperatorContainsAll captures enum value "containsAll"
	CriteriaOperatorContainsAll string = "containsAll"

	// CriteriaOperatorContainsAny captures enum value "containsAny"
	CriteriaOperatorContainsAny string = "containsAny"

	// CriteriaOperatorNotContainsAll captures enum value "notContainsAll"
	CriteriaOperatorNotContainsAll string = "notContainsAll"

	// CriteriaOperatorNotContainsAny captures enum value "notContainsAny"
	CriteriaOperatorNotContainsAny string = "notContainsAny"

	// CriteriaOperatorEqual captures enum value "equal"
	CriteriaOperatorEqual string = "equal"

	// CriteriaOperatorNotEqual captures enum value "notEqual"
	CriteriaOperatorNotEqual string = "notEqual"

	// CriteriaOperatorGreaterThan captures enum value "greaterThan"
	CriteriaOperatorGreaterThan string = "greaterThan"

	// CriteriaOperatorGreaterThanOrEqual captures enum value "greaterThanOrEqual"
	CriteriaOperatorGreaterThanOrEqual string = "greaterThanOrEqual"

	// CriteriaOperatorLessThan captures enum value "lessThan"
	CriteriaOperatorLessThan string = "lessThan"

	// CriteriaOperatorLessThanOrEqual captures enum value "lessThanOrEqual"
	CriteriaOperatorLessThanOrEqual string = "lessThanOrEqual"

	// CriteriaOperatorStartsWith captures enum value "startsWith"
	CriteriaOperatorStartsWith string = "startsWith"

	// CriteriaOperatorEndsWith captures enum value "endsWith"
	CriteriaOperatorEndsWith string = "endsWith"
)

// prop value enum
func (m *Criteria) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, criteriaTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Criteria) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *Criteria) validateShouldIgnoreCase(formats strfmt.Registry) error {

	if err := validate.Required("shouldIgnoreCase", "body", m.ShouldIgnoreCase); err != nil {
		return err
	}

	return nil
}

func (m *Criteria) validateValues(formats strfmt.Registry) error {

	if err := validate.Required("values", "body", m.Values); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this criteria based on context it is used
func (m *Criteria) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Criteria) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Criteria) UnmarshalBinary(b []byte) error {
	var res Criteria
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

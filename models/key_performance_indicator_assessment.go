// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KeyPerformanceIndicatorAssessment key performance indicator assessment
//
// swagger:model KeyPerformanceIndicatorAssessment
type KeyPerformanceIndicatorAssessment struct {

	// The overall result of the assessment for a key performance indicator.
	// Read Only: true
	// Enum: [Unknown NotSupported High Low Error]
	AssessmentResult string `json:"assessmentResult,omitempty"`

	// Set of checks executed as part of an assessment.
	// Read Only: true
	Checks []*Check `json:"checks"`

	// Name of the key performance indicator assessed.
	// Read Only: true
	Kpi string `json:"kpi,omitempty"`
}

// Validate validates this key performance indicator assessment
func (m *KeyPerformanceIndicatorAssessment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssessmentResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChecks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var keyPerformanceIndicatorAssessmentTypeAssessmentResultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","NotSupported","High","Low","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		keyPerformanceIndicatorAssessmentTypeAssessmentResultPropEnum = append(keyPerformanceIndicatorAssessmentTypeAssessmentResultPropEnum, v)
	}
}

const (

	// KeyPerformanceIndicatorAssessmentAssessmentResultUnknown captures enum value "Unknown"
	KeyPerformanceIndicatorAssessmentAssessmentResultUnknown string = "Unknown"

	// KeyPerformanceIndicatorAssessmentAssessmentResultNotSupported captures enum value "NotSupported"
	KeyPerformanceIndicatorAssessmentAssessmentResultNotSupported string = "NotSupported"

	// KeyPerformanceIndicatorAssessmentAssessmentResultHigh captures enum value "High"
	KeyPerformanceIndicatorAssessmentAssessmentResultHigh string = "High"

	// KeyPerformanceIndicatorAssessmentAssessmentResultLow captures enum value "Low"
	KeyPerformanceIndicatorAssessmentAssessmentResultLow string = "Low"

	// KeyPerformanceIndicatorAssessmentAssessmentResultError captures enum value "Error"
	KeyPerformanceIndicatorAssessmentAssessmentResultError string = "Error"
)

// prop value enum
func (m *KeyPerformanceIndicatorAssessment) validateAssessmentResultEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, keyPerformanceIndicatorAssessmentTypeAssessmentResultPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KeyPerformanceIndicatorAssessment) validateAssessmentResult(formats strfmt.Registry) error {
	if swag.IsZero(m.AssessmentResult) { // not required
		return nil
	}

	// value enum
	if err := m.validateAssessmentResultEnum("assessmentResult", "body", m.AssessmentResult); err != nil {
		return err
	}

	return nil
}

func (m *KeyPerformanceIndicatorAssessment) validateChecks(formats strfmt.Registry) error {
	if swag.IsZero(m.Checks) { // not required
		return nil
	}

	for i := 0; i < len(m.Checks); i++ {
		if swag.IsZero(m.Checks[i]) { // not required
			continue
		}

		if m.Checks[i] != nil {
			if err := m.Checks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("checks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this key performance indicator assessment based on the context it is used
func (m *KeyPerformanceIndicatorAssessment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssessmentResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChecks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKpi(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyPerformanceIndicatorAssessment) contextValidateAssessmentResult(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "assessmentResult", "body", string(m.AssessmentResult)); err != nil {
		return err
	}

	return nil
}

func (m *KeyPerformanceIndicatorAssessment) contextValidateChecks(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "checks", "body", []*Check(m.Checks)); err != nil {
		return err
	}

	for i := 0; i < len(m.Checks); i++ {

		if m.Checks[i] != nil {
			if err := m.Checks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("checks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KeyPerformanceIndicatorAssessment) contextValidateKpi(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "kpi", "body", string(m.Kpi)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KeyPerformanceIndicatorAssessment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeyPerformanceIndicatorAssessment) UnmarshalBinary(b []byte) error {
	var res KeyPerformanceIndicatorAssessment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

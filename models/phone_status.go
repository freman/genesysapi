// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhoneStatus phone status
//
// swagger:model PhoneStatus
type PhoneStatus struct {

	// The URI of the edge that provided this status information.
	Edge *DomainEntityRef `json:"edge,omitempty"`

	// The status of the primary or secondary Edges assigned to the phone lines.
	// Enum: [IN_SERVICE MIXED_SERVICE OUT_OF_SERVICE NO_EDGES]
	EdgesStatus string `json:"edgesStatus,omitempty"`

	// Event Creation Time represents an ISO-8601 string. For example: UTC, UTC+01:00, or Europe/London
	EventCreationTime string `json:"eventCreationTime,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// A list of LineStatus information for each of the lines of this phone
	LineStatuses []*LineStatus `json:"lineStatuses"`

	// name
	Name string `json:"name,omitempty"`

	// The Operational Status of this phone
	// Enum: [OPERATIONAL DEGRADED OFFLINE]
	OperationalStatus string `json:"operationalStatus,omitempty"`

	// The phone status's edge assignment type.
	// Enum: [PRIMARY SECONDARY]
	PhoneAssignmentToEdgeType string `json:"phoneAssignmentToEdgeType,omitempty"`

	// Provision information for this phone
	Provision *ProvisionInfo `json:"provision,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this phone status
func (m *PhoneStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEdge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgesStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationalStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneAssignmentToEdgeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhoneStatus) validateEdge(formats strfmt.Registry) error {

	if swag.IsZero(m.Edge) { // not required
		return nil
	}

	if m.Edge != nil {
		if err := m.Edge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge")
			}
			return err
		}
	}

	return nil
}

var phoneStatusTypeEdgesStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IN_SERVICE","MIXED_SERVICE","OUT_OF_SERVICE","NO_EDGES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phoneStatusTypeEdgesStatusPropEnum = append(phoneStatusTypeEdgesStatusPropEnum, v)
	}
}

const (

	// PhoneStatusEdgesStatusINSERVICE captures enum value "IN_SERVICE"
	PhoneStatusEdgesStatusINSERVICE string = "IN_SERVICE"

	// PhoneStatusEdgesStatusMIXEDSERVICE captures enum value "MIXED_SERVICE"
	PhoneStatusEdgesStatusMIXEDSERVICE string = "MIXED_SERVICE"

	// PhoneStatusEdgesStatusOUTOFSERVICE captures enum value "OUT_OF_SERVICE"
	PhoneStatusEdgesStatusOUTOFSERVICE string = "OUT_OF_SERVICE"

	// PhoneStatusEdgesStatusNOEDGES captures enum value "NO_EDGES"
	PhoneStatusEdgesStatusNOEDGES string = "NO_EDGES"
)

// prop value enum
func (m *PhoneStatus) validateEdgesStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, phoneStatusTypeEdgesStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PhoneStatus) validateEdgesStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.EdgesStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateEdgesStatusEnum("edgesStatus", "body", m.EdgesStatus); err != nil {
		return err
	}

	return nil
}

func (m *PhoneStatus) validateLineStatuses(formats strfmt.Registry) error {

	if swag.IsZero(m.LineStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.LineStatuses); i++ {
		if swag.IsZero(m.LineStatuses[i]) { // not required
			continue
		}

		if m.LineStatuses[i] != nil {
			if err := m.LineStatuses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lineStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var phoneStatusTypeOperationalStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OPERATIONAL","DEGRADED","OFFLINE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phoneStatusTypeOperationalStatusPropEnum = append(phoneStatusTypeOperationalStatusPropEnum, v)
	}
}

const (

	// PhoneStatusOperationalStatusOPERATIONAL captures enum value "OPERATIONAL"
	PhoneStatusOperationalStatusOPERATIONAL string = "OPERATIONAL"

	// PhoneStatusOperationalStatusDEGRADED captures enum value "DEGRADED"
	PhoneStatusOperationalStatusDEGRADED string = "DEGRADED"

	// PhoneStatusOperationalStatusOFFLINE captures enum value "OFFLINE"
	PhoneStatusOperationalStatusOFFLINE string = "OFFLINE"
)

// prop value enum
func (m *PhoneStatus) validateOperationalStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, phoneStatusTypeOperationalStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PhoneStatus) validateOperationalStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.OperationalStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperationalStatusEnum("operationalStatus", "body", m.OperationalStatus); err != nil {
		return err
	}

	return nil
}

var phoneStatusTypePhoneAssignmentToEdgeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIMARY","SECONDARY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phoneStatusTypePhoneAssignmentToEdgeTypePropEnum = append(phoneStatusTypePhoneAssignmentToEdgeTypePropEnum, v)
	}
}

const (

	// PhoneStatusPhoneAssignmentToEdgeTypePRIMARY captures enum value "PRIMARY"
	PhoneStatusPhoneAssignmentToEdgeTypePRIMARY string = "PRIMARY"

	// PhoneStatusPhoneAssignmentToEdgeTypeSECONDARY captures enum value "SECONDARY"
	PhoneStatusPhoneAssignmentToEdgeTypeSECONDARY string = "SECONDARY"
)

// prop value enum
func (m *PhoneStatus) validatePhoneAssignmentToEdgeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, phoneStatusTypePhoneAssignmentToEdgeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PhoneStatus) validatePhoneAssignmentToEdgeType(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneAssignmentToEdgeType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePhoneAssignmentToEdgeTypeEnum("phoneAssignmentToEdgeType", "body", m.PhoneAssignmentToEdgeType); err != nil {
		return err
	}

	return nil
}

func (m *PhoneStatus) validateProvision(formats strfmt.Registry) error {

	if swag.IsZero(m.Provision) { // not required
		return nil
	}

	if m.Provision != nil {
		if err := m.Provision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provision")
			}
			return err
		}
	}

	return nil
}

func (m *PhoneStatus) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhoneStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhoneStatus) UnmarshalBinary(b []byte) error {
	var res PhoneStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

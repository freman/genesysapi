// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BotConnectorBotVersion A version description for a botConnector bot.
//
// swagger:model BotConnectorBotVersion
type BotConnectorBotVersion struct {

	// A list of potential intents this bot will return, limit of 50
	// Required: true
	Intents []*BotIntent `json:"intents"`

	// The supported languages for this bot. EG 'en-us' or 'es', etc; These language codes are W3C language identification tags (ISO 639-1 for the language name and ISO 3166 for the country code)
	// Required: true
	SupportedLanguages []string `json:"supportedLanguages"`

	// The name of the version. This can be up to 100 characters long and must be comprised of displayable characters without leading or trailing whitespace
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this bot connector bot version
func (m *BotConnectorBotVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIntents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedLanguages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BotConnectorBotVersion) validateIntents(formats strfmt.Registry) error {

	if err := validate.Required("intents", "body", m.Intents); err != nil {
		return err
	}

	for i := 0; i < len(m.Intents); i++ {
		if swag.IsZero(m.Intents[i]) { // not required
			continue
		}

		if m.Intents[i] != nil {
			if err := m.Intents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("intents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BotConnectorBotVersion) validateSupportedLanguages(formats strfmt.Registry) error {

	if err := validate.Required("supportedLanguages", "body", m.SupportedLanguages); err != nil {
		return err
	}

	return nil
}

func (m *BotConnectorBotVersion) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this bot connector bot version based on the context it is used
func (m *BotConnectorBotVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIntents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BotConnectorBotVersion) contextValidateIntents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Intents); i++ {

		if m.Intents[i] != nil {
			if err := m.Intents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("intents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BotConnectorBotVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BotConnectorBotVersion) UnmarshalBinary(b []byte) error {
	var res BotConnectorBotVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

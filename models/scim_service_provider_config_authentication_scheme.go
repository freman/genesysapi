// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScimServiceProviderConfigAuthenticationScheme Defines an authentication scheme in the SCIM service provider's configuration.
//
// swagger:model ScimServiceProviderConfigAuthenticationScheme
type ScimServiceProviderConfigAuthenticationScheme struct {

	// The description of the authentication scheme.
	// Required: true
	// Read Only: true
	Description string `json:"description"`

	// The HTTP-addressable URL that points to the authentication scheme's usage documentation.
	// Read Only: true
	// Format: uri
	DocumentationURI strfmt.URI `json:"documentationUri,omitempty"`

	// The name of the authentication scheme, for example, HTTP Basic.
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// Indicates whether this authentication scheme is the primary method of authentication.
	// Read Only: true
	Primary *bool `json:"primary,omitempty"`

	// The HTTP-addressable URL that points to the authentication scheme's specification.
	// Read Only: true
	// Format: uri
	SpecURI strfmt.URI `json:"specUri,omitempty"`

	// The type of authentication scheme.
	// Required: true
	// Read Only: true
	// Enum: [oauth oauth2 oauthbearertoken httpbasic httpdigest]
	Type string `json:"type"`
}

// Validate validates this scim service provider config authentication scheme
func (m *ScimServiceProviderConfigAuthenticationScheme) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentationURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScimServiceProviderConfigAuthenticationScheme) validateDescription(formats strfmt.Registry) error {

	if err := validate.RequiredString("description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *ScimServiceProviderConfigAuthenticationScheme) validateDocumentationURI(formats strfmt.Registry) error {

	if swag.IsZero(m.DocumentationURI) { // not required
		return nil
	}

	if err := validate.FormatOf("documentationUri", "body", "uri", m.DocumentationURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScimServiceProviderConfigAuthenticationScheme) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *ScimServiceProviderConfigAuthenticationScheme) validateSpecURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SpecURI) { // not required
		return nil
	}

	if err := validate.FormatOf("specUri", "body", "uri", m.SpecURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var scimServiceProviderConfigAuthenticationSchemeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["oauth","oauth2","oauthbearertoken","httpbasic","httpdigest"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scimServiceProviderConfigAuthenticationSchemeTypeTypePropEnum = append(scimServiceProviderConfigAuthenticationSchemeTypeTypePropEnum, v)
	}
}

const (

	// ScimServiceProviderConfigAuthenticationSchemeTypeOauth captures enum value "oauth"
	ScimServiceProviderConfigAuthenticationSchemeTypeOauth string = "oauth"

	// ScimServiceProviderConfigAuthenticationSchemeTypeOauth2 captures enum value "oauth2"
	ScimServiceProviderConfigAuthenticationSchemeTypeOauth2 string = "oauth2"

	// ScimServiceProviderConfigAuthenticationSchemeTypeOauthbearertoken captures enum value "oauthbearertoken"
	ScimServiceProviderConfigAuthenticationSchemeTypeOauthbearertoken string = "oauthbearertoken"

	// ScimServiceProviderConfigAuthenticationSchemeTypeHttpbasic captures enum value "httpbasic"
	ScimServiceProviderConfigAuthenticationSchemeTypeHttpbasic string = "httpbasic"

	// ScimServiceProviderConfigAuthenticationSchemeTypeHttpdigest captures enum value "httpdigest"
	ScimServiceProviderConfigAuthenticationSchemeTypeHttpdigest string = "httpdigest"
)

// prop value enum
func (m *ScimServiceProviderConfigAuthenticationScheme) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scimServiceProviderConfigAuthenticationSchemeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScimServiceProviderConfigAuthenticationScheme) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScimServiceProviderConfigAuthenticationScheme) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScimServiceProviderConfigAuthenticationScheme) UnmarshalBinary(b []byte) error {
	var res ScimServiceProviderConfigAuthenticationScheme
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

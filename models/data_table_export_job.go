// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataTableExportJob State information for an export job of rows from a datatable
//
// swagger:model DataTableExportJob
type DataTableExportJob struct {

	// The current count of the number of records processed
	CountRecordsProcessed int32 `json:"countRecordsProcessed,omitempty"`

	// The timestamp of when the export stopped (either successfully or unsuccessfully). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateCompleted strfmt.DateTime `json:"dateCompleted,omitempty"`

	// The timestamp of when the export began. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The URL of the location at which the caller can download the export file, when available
	// Format: uri
	DownloadURI strfmt.URI `json:"downloadURI,omitempty"`

	// Any error information, or null of the processing is not in an error state
	ErrorInformation *ErrorBody `json:"errorInformation,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The PureCloud user who started the export job
	Owner *AddressableEntityRef `json:"owner,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The status of the export job
	// Required: true
	// Enum: [Processing Failed Succeeded]
	Status *string `json:"status"`
}

// Validate validates this data table export job
func (m *DataTableExportJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloadURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTableExportJob) validateDateCompleted(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCompleted) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCompleted", "body", "date-time", m.DateCompleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DataTableExportJob) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DataTableExportJob) validateDownloadURI(formats strfmt.Registry) error {

	if swag.IsZero(m.DownloadURI) { // not required
		return nil
	}

	if err := validate.FormatOf("downloadURI", "body", "uri", m.DownloadURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DataTableExportJob) validateErrorInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorInformation) { // not required
		return nil
	}

	if m.ErrorInformation != nil {
		if err := m.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInformation")
			}
			return err
		}
	}

	return nil
}

func (m *DataTableExportJob) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *DataTableExportJob) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var dataTableExportJobTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Processing","Failed","Succeeded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataTableExportJobTypeStatusPropEnum = append(dataTableExportJobTypeStatusPropEnum, v)
	}
}

const (

	// DataTableExportJobStatusProcessing captures enum value "Processing"
	DataTableExportJobStatusProcessing string = "Processing"

	// DataTableExportJobStatusFailed captures enum value "Failed"
	DataTableExportJobStatusFailed string = "Failed"

	// DataTableExportJobStatusSucceeded captures enum value "Succeeded"
	DataTableExportJobStatusSucceeded string = "Succeeded"
)

// prop value enum
func (m *DataTableExportJob) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataTableExportJobTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataTableExportJob) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataTableExportJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataTableExportJob) UnmarshalBinary(b []byte) error {
	var res DataTableExportJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

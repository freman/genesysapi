// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BuRescheduleResult bu reschedule result
//
// swagger:model BuRescheduleResult
type BuRescheduleResult struct {

	// List of download links for agent schedules produced by the rescheduling run
	AgentSchedules []*BuRescheduleAgentScheduleResult `json:"agentSchedules"`

	// The generation results.  Note the result will always be delivered via the generationResultsDownloadUrl; however the schema is included for documentation
	GenerationResults *ScheduleGenerationResult `json:"generationResults,omitempty"`

	// The download URL from which to fetch the generation results for the rescheduling run
	GenerationResultsDownloadURL string `json:"generationResultsDownloadUrl,omitempty"`

	// The headcount forecast.  Note the result will always be delivered via the headcountForecastDownloadUrl; however the schema is included for documentation
	HeadcountForecast *BuHeadcountForecast `json:"headcountForecast,omitempty"`

	// The download URL from which to fetch the headcount forecast for the rescheduling run
	HeadcountForecastDownloadURL string `json:"headcountForecastDownloadUrl,omitempty"`
}

// Validate validates this bu reschedule result
func (m *BuRescheduleResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentSchedules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenerationResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeadcountForecast(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuRescheduleResult) validateAgentSchedules(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentSchedules) { // not required
		return nil
	}

	for i := 0; i < len(m.AgentSchedules); i++ {
		if swag.IsZero(m.AgentSchedules[i]) { // not required
			continue
		}

		if m.AgentSchedules[i] != nil {
			if err := m.AgentSchedules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentSchedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentSchedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuRescheduleResult) validateGenerationResults(formats strfmt.Registry) error {
	if swag.IsZero(m.GenerationResults) { // not required
		return nil
	}

	if m.GenerationResults != nil {
		if err := m.GenerationResults.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generationResults")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generationResults")
			}
			return err
		}
	}

	return nil
}

func (m *BuRescheduleResult) validateHeadcountForecast(formats strfmt.Registry) error {
	if swag.IsZero(m.HeadcountForecast) { // not required
		return nil
	}

	if m.HeadcountForecast != nil {
		if err := m.HeadcountForecast.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headcountForecast")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headcountForecast")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bu reschedule result based on the context it is used
func (m *BuRescheduleResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentSchedules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGenerationResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeadcountForecast(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuRescheduleResult) contextValidateAgentSchedules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AgentSchedules); i++ {

		if m.AgentSchedules[i] != nil {
			if err := m.AgentSchedules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentSchedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentSchedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuRescheduleResult) contextValidateGenerationResults(ctx context.Context, formats strfmt.Registry) error {

	if m.GenerationResults != nil {
		if err := m.GenerationResults.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generationResults")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generationResults")
			}
			return err
		}
	}

	return nil
}

func (m *BuRescheduleResult) contextValidateHeadcountForecast(ctx context.Context, formats strfmt.Registry) error {

	if m.HeadcountForecast != nil {
		if err := m.HeadcountForecast.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headcountForecast")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headcountForecast")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuRescheduleResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuRescheduleResult) UnmarshalBinary(b []byte) error {
	var res BuRescheduleResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowTargetSettings workflow target settings
//
// swagger:model WorkflowTargetSettings
type WorkflowTargetSettings struct {

	// The data format to use when invoking target.
	// Enum: [Json TopLevelPrimitives]
	DataFormat string `json:"dataFormat,omitempty"`
}

// Validate validates this workflow target settings
func (m *WorkflowTargetSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataFormat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workflowTargetSettingsTypeDataFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Json","TopLevelPrimitives"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowTargetSettingsTypeDataFormatPropEnum = append(workflowTargetSettingsTypeDataFormatPropEnum, v)
	}
}

const (

	// WorkflowTargetSettingsDataFormatJSON captures enum value "Json"
	WorkflowTargetSettingsDataFormatJSON string = "Json"

	// WorkflowTargetSettingsDataFormatTopLevelPrimitives captures enum value "TopLevelPrimitives"
	WorkflowTargetSettingsDataFormatTopLevelPrimitives string = "TopLevelPrimitives"
)

// prop value enum
func (m *WorkflowTargetSettings) validateDataFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workflowTargetSettingsTypeDataFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowTargetSettings) validateDataFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.DataFormat) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataFormatEnum("dataFormat", "body", m.DataFormat); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this workflow target settings based on context it is used
func (m *WorkflowTargetSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowTargetSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowTargetSettings) UnmarshalBinary(b []byte) error {
	var res WorkflowTargetSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

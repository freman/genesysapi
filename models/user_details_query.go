// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserDetailsQuery user details query
//
// swagger:model UserDetailsQuery
type UserDetailsQuery struct {

	// Specifies the date and time range of data being queried. Conversations MUST have started within this time range to potentially be included within the result set. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	// Required: true
	Interval *string `json:"interval"`

	// Sort the result set in ascending/descending order. Default is ascending
	// Enum: [asc desc unordered]
	Order string `json:"order,omitempty"`

	// Page size and number to control iterating through large result sets. Default page size is 25
	Paging *PagingSpec `json:"paging,omitempty"`

	// Include faceted search and aggregate roll-ups of presence data in your search results. This does not function as a filter, but rather, summary data about the presence results matching your filters
	PresenceAggregations []*AnalyticsQueryAggregation `json:"presenceAggregations"`

	// Filters that target system and organization presence-level data
	PresenceFilters []*PresenceDetailQueryFilter `json:"presenceFilters"`

	// Include faceted search and aggregate roll-ups of agent routing status data in your search results. This does not function as a filter, but rather, summary data about the agent routing status results matching your filters
	RoutingStatusAggregations []*AnalyticsQueryAggregation `json:"routingStatusAggregations"`

	// Filters that target agent routing status-level data
	RoutingStatusFilters []*RoutingStatusDetailQueryFilter `json:"routingStatusFilters"`

	// Filters that target the users to retrieve data for
	UserFilters []*UserDetailQueryFilter `json:"userFilters"`
}

// Validate validates this user details query
func (m *UserDetailsQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaging(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresenceAggregations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresenceFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingStatusAggregations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingStatusFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserFilters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserDetailsQuery) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

var userDetailsQueryTypeOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["asc","desc","unordered"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userDetailsQueryTypeOrderPropEnum = append(userDetailsQueryTypeOrderPropEnum, v)
	}
}

const (

	// UserDetailsQueryOrderAsc captures enum value "asc"
	UserDetailsQueryOrderAsc string = "asc"

	// UserDetailsQueryOrderDesc captures enum value "desc"
	UserDetailsQueryOrderDesc string = "desc"

	// UserDetailsQueryOrderUnordered captures enum value "unordered"
	UserDetailsQueryOrderUnordered string = "unordered"
)

// prop value enum
func (m *UserDetailsQuery) validateOrderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userDetailsQueryTypeOrderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserDetailsQuery) validateOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.Order) { // not required
		return nil
	}

	// value enum
	if err := m.validateOrderEnum("order", "body", m.Order); err != nil {
		return err
	}

	return nil
}

func (m *UserDetailsQuery) validatePaging(formats strfmt.Registry) error {

	if swag.IsZero(m.Paging) { // not required
		return nil
	}

	if m.Paging != nil {
		if err := m.Paging.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paging")
			}
			return err
		}
	}

	return nil
}

func (m *UserDetailsQuery) validatePresenceAggregations(formats strfmt.Registry) error {

	if swag.IsZero(m.PresenceAggregations) { // not required
		return nil
	}

	for i := 0; i < len(m.PresenceAggregations); i++ {
		if swag.IsZero(m.PresenceAggregations[i]) { // not required
			continue
		}

		if m.PresenceAggregations[i] != nil {
			if err := m.PresenceAggregations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("presenceAggregations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserDetailsQuery) validatePresenceFilters(formats strfmt.Registry) error {

	if swag.IsZero(m.PresenceFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.PresenceFilters); i++ {
		if swag.IsZero(m.PresenceFilters[i]) { // not required
			continue
		}

		if m.PresenceFilters[i] != nil {
			if err := m.PresenceFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("presenceFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserDetailsQuery) validateRoutingStatusAggregations(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutingStatusAggregations) { // not required
		return nil
	}

	for i := 0; i < len(m.RoutingStatusAggregations); i++ {
		if swag.IsZero(m.RoutingStatusAggregations[i]) { // not required
			continue
		}

		if m.RoutingStatusAggregations[i] != nil {
			if err := m.RoutingStatusAggregations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routingStatusAggregations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserDetailsQuery) validateRoutingStatusFilters(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutingStatusFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.RoutingStatusFilters); i++ {
		if swag.IsZero(m.RoutingStatusFilters[i]) { // not required
			continue
		}

		if m.RoutingStatusFilters[i] != nil {
			if err := m.RoutingStatusFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routingStatusFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserDetailsQuery) validateUserFilters(formats strfmt.Registry) error {

	if swag.IsZero(m.UserFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.UserFilters); i++ {
		if swag.IsZero(m.UserFilters[i]) { // not required
			continue
		}

		if m.UserFilters[i] != nil {
			if err := m.UserFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserDetailsQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserDetailsQuery) UnmarshalBinary(b []byte) error {
	var res UserDetailsQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

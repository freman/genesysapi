// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MessageContent Message content element. If contentType = "Attachment" only one item is allowed.
//
// swagger:model MessageContent
type MessageContent struct {

	// Attachment content.
	Attachment *ContentAttachment `json:"attachment,omitempty"`

	// Button response content.
	ButtonResponse *ContentButtonResponse `json:"buttonResponse,omitempty"`

	// Card content
	Card *ContentCard `json:"card,omitempty"`

	// Carousel content
	Carousel *ContentCarousel `json:"carousel,omitempty"`

	// Type of this content element.
	// Required: true
	// Enum: [Attachment Location QuickReply Notification GenericTemplate ListTemplate Postback Reactions Mention ButtonResponse Story Card Carousel Text QuickReplyV2]
	ContentType *string `json:"contentType"`

	// Generic content (Deprecated).
	Generic *ContentGeneric `json:"generic,omitempty"`

	// List content (Deprecated).
	List *ContentList `json:"list,omitempty"`

	// Location content.
	Location *ContentLocation `json:"location,omitempty"`

	// Mention content.
	Mention *MessagingRecipient `json:"mention,omitempty"`

	// Structured message postback (Deprecated).
	Postback *ContentPostback `json:"postback,omitempty"`

	// Quick reply content.
	QuickReply *ContentQuickReply `json:"quickReply,omitempty"`

	// Quick reply V2 content.
	QuickReplyV2 *ContentQuickReplyV2 `json:"quickReplyV2,omitempty"`

	// A set of reactions to a message.
	Reactions []*ContentReaction `json:"reactions"`

	// Ephemeral story content.
	Story *ContentStory `json:"story,omitempty"`

	// Template notification content.
	Template *ContentNotificationTemplate `json:"template,omitempty"`

	// Text content.
	Text *ContentText `json:"text,omitempty"`
}

// Validate validates this message content
func (m *MessageContent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateButtonResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarousel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMention(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostback(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuickReply(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuickReplyV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MessageContent) validateAttachment(formats strfmt.Registry) error {
	if swag.IsZero(m.Attachment) { // not required
		return nil
	}

	if m.Attachment != nil {
		if err := m.Attachment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attachment")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateButtonResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.ButtonResponse) { // not required
		return nil
	}

	if m.ButtonResponse != nil {
		if err := m.ButtonResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buttonResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buttonResponse")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {
		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("card")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateCarousel(formats strfmt.Registry) error {
	if swag.IsZero(m.Carousel) { // not required
		return nil
	}

	if m.Carousel != nil {
		if err := m.Carousel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carousel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carousel")
			}
			return err
		}
	}

	return nil
}

var messageContentTypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Attachment","Location","QuickReply","Notification","GenericTemplate","ListTemplate","Postback","Reactions","Mention","ButtonResponse","Story","Card","Carousel","Text","QuickReplyV2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messageContentTypeContentTypePropEnum = append(messageContentTypeContentTypePropEnum, v)
	}
}

const (

	// MessageContentContentTypeAttachment captures enum value "Attachment"
	MessageContentContentTypeAttachment string = "Attachment"

	// MessageContentContentTypeLocation captures enum value "Location"
	MessageContentContentTypeLocation string = "Location"

	// MessageContentContentTypeQuickReply captures enum value "QuickReply"
	MessageContentContentTypeQuickReply string = "QuickReply"

	// MessageContentContentTypeNotification captures enum value "Notification"
	MessageContentContentTypeNotification string = "Notification"

	// MessageContentContentTypeGenericTemplate captures enum value "GenericTemplate"
	MessageContentContentTypeGenericTemplate string = "GenericTemplate"

	// MessageContentContentTypeListTemplate captures enum value "ListTemplate"
	MessageContentContentTypeListTemplate string = "ListTemplate"

	// MessageContentContentTypePostback captures enum value "Postback"
	MessageContentContentTypePostback string = "Postback"

	// MessageContentContentTypeReactions captures enum value "Reactions"
	MessageContentContentTypeReactions string = "Reactions"

	// MessageContentContentTypeMention captures enum value "Mention"
	MessageContentContentTypeMention string = "Mention"

	// MessageContentContentTypeButtonResponse captures enum value "ButtonResponse"
	MessageContentContentTypeButtonResponse string = "ButtonResponse"

	// MessageContentContentTypeStory captures enum value "Story"
	MessageContentContentTypeStory string = "Story"

	// MessageContentContentTypeCard captures enum value "Card"
	MessageContentContentTypeCard string = "Card"

	// MessageContentContentTypeCarousel captures enum value "Carousel"
	MessageContentContentTypeCarousel string = "Carousel"

	// MessageContentContentTypeText captures enum value "Text"
	MessageContentContentTypeText string = "Text"

	// MessageContentContentTypeQuickReplyV2 captures enum value "QuickReplyV2"
	MessageContentContentTypeQuickReplyV2 string = "QuickReplyV2"
)

// prop value enum
func (m *MessageContent) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, messageContentTypeContentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MessageContent) validateContentType(formats strfmt.Registry) error {

	if err := validate.Required("contentType", "body", m.ContentType); err != nil {
		return err
	}

	// value enum
	if err := m.validateContentTypeEnum("contentType", "body", *m.ContentType); err != nil {
		return err
	}

	return nil
}

func (m *MessageContent) validateGeneric(formats strfmt.Registry) error {
	if swag.IsZero(m.Generic) { // not required
		return nil
	}

	if m.Generic != nil {
		if err := m.Generic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generic")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateList(formats strfmt.Registry) error {
	if swag.IsZero(m.List) { // not required
		return nil
	}

	if m.List != nil {
		if err := m.List.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("list")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("list")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateMention(formats strfmt.Registry) error {
	if swag.IsZero(m.Mention) { // not required
		return nil
	}

	if m.Mention != nil {
		if err := m.Mention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mention")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validatePostback(formats strfmt.Registry) error {
	if swag.IsZero(m.Postback) { // not required
		return nil
	}

	if m.Postback != nil {
		if err := m.Postback.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postback")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postback")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateQuickReply(formats strfmt.Registry) error {
	if swag.IsZero(m.QuickReply) { // not required
		return nil
	}

	if m.QuickReply != nil {
		if err := m.QuickReply.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quickReply")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quickReply")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateQuickReplyV2(formats strfmt.Registry) error {
	if swag.IsZero(m.QuickReplyV2) { // not required
		return nil
	}

	if m.QuickReplyV2 != nil {
		if err := m.QuickReplyV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quickReplyV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quickReplyV2")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateReactions(formats strfmt.Registry) error {
	if swag.IsZero(m.Reactions) { // not required
		return nil
	}

	for i := 0; i < len(m.Reactions); i++ {
		if swag.IsZero(m.Reactions[i]) { // not required
			continue
		}

		if m.Reactions[i] != nil {
			if err := m.Reactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MessageContent) validateStory(formats strfmt.Registry) error {
	if swag.IsZero(m.Story) { // not required
		return nil
	}

	if m.Story != nil {
		if err := m.Story.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("story")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("story")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateText(formats strfmt.Registry) error {
	if swag.IsZero(m.Text) { // not required
		return nil
	}

	if m.Text != nil {
		if err := m.Text.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("text")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("text")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this message content based on the context it is used
func (m *MessageContent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttachment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateButtonResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCarousel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGeneric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMention(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostback(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuickReply(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuickReplyV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReactions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateText(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MessageContent) contextValidateAttachment(ctx context.Context, formats strfmt.Registry) error {

	if m.Attachment != nil {
		if err := m.Attachment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attachment")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) contextValidateButtonResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.ButtonResponse != nil {
		if err := m.ButtonResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buttonResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buttonResponse")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if m.Card != nil {
		if err := m.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("card")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) contextValidateCarousel(ctx context.Context, formats strfmt.Registry) error {

	if m.Carousel != nil {
		if err := m.Carousel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carousel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carousel")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) contextValidateGeneric(ctx context.Context, formats strfmt.Registry) error {

	if m.Generic != nil {
		if err := m.Generic.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generic")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) contextValidateList(ctx context.Context, formats strfmt.Registry) error {

	if m.List != nil {
		if err := m.List.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("list")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("list")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {
		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) contextValidateMention(ctx context.Context, formats strfmt.Registry) error {

	if m.Mention != nil {
		if err := m.Mention.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mention")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) contextValidatePostback(ctx context.Context, formats strfmt.Registry) error {

	if m.Postback != nil {
		if err := m.Postback.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postback")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postback")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) contextValidateQuickReply(ctx context.Context, formats strfmt.Registry) error {

	if m.QuickReply != nil {
		if err := m.QuickReply.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quickReply")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quickReply")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) contextValidateQuickReplyV2(ctx context.Context, formats strfmt.Registry) error {

	if m.QuickReplyV2 != nil {
		if err := m.QuickReplyV2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quickReplyV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quickReplyV2")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) contextValidateReactions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Reactions); i++ {

		if m.Reactions[i] != nil {
			if err := m.Reactions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MessageContent) contextValidateStory(ctx context.Context, formats strfmt.Registry) error {

	if m.Story != nil {
		if err := m.Story.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("story")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("story")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) contextValidateTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.Template != nil {
		if err := m.Template.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) contextValidateText(ctx context.Context, formats strfmt.Registry) error {

	if m.Text != nil {
		if err := m.Text.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("text")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("text")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MessageContent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MessageContent) UnmarshalBinary(b []byte) error {
	var res MessageContent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MessageContent Message content element
//
// swagger:model MessageContent
type MessageContent struct {

	// Attachment object
	Attachment *ContentAttachment `json:"attachment,omitempty"`

	// Type of this content element. If contentType = "Attachment" only one item is allowed.
	// Required: true
	// Enum: [Attachment Location QuickReply Notification GenericTemplate ListTemplate Postback Reactions Mention]
	ContentType *string `json:"contentType"`

	// Generic content object
	Generic *ContentGeneric `json:"generic,omitempty"`

	// List content object
	List *ContentList `json:"list,omitempty"`

	// Location object
	Location *ContentLocation `json:"location,omitempty"`

	// This is used to identify who the message is sent to, as well as who it was sent from. This information is channel specific - depends on capabilities to describe party by the platform
	Mention *MessagingRecipient `json:"mention,omitempty"`

	// The postback object result of a user clicking in a button
	Postback *ContentPostback `json:"postback,omitempty"`

	// Quick reply object
	QuickReply *ContentQuickReply `json:"quickReply,omitempty"`

	// A list of reactions
	Reactions []*ContentReaction `json:"reactions"`

	// Template notification object
	Template *ContentNotificationTemplate `json:"template,omitempty"`
}

// Validate validates this message content
func (m *MessageContent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMention(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostback(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuickReply(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MessageContent) validateAttachment(formats strfmt.Registry) error {

	if swag.IsZero(m.Attachment) { // not required
		return nil
	}

	if m.Attachment != nil {
		if err := m.Attachment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachment")
			}
			return err
		}
	}

	return nil
}

var messageContentTypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Attachment","Location","QuickReply","Notification","GenericTemplate","ListTemplate","Postback","Reactions","Mention"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messageContentTypeContentTypePropEnum = append(messageContentTypeContentTypePropEnum, v)
	}
}

const (

	// MessageContentContentTypeAttachment captures enum value "Attachment"
	MessageContentContentTypeAttachment string = "Attachment"

	// MessageContentContentTypeLocation captures enum value "Location"
	MessageContentContentTypeLocation string = "Location"

	// MessageContentContentTypeQuickReply captures enum value "QuickReply"
	MessageContentContentTypeQuickReply string = "QuickReply"

	// MessageContentContentTypeNotification captures enum value "Notification"
	MessageContentContentTypeNotification string = "Notification"

	// MessageContentContentTypeGenericTemplate captures enum value "GenericTemplate"
	MessageContentContentTypeGenericTemplate string = "GenericTemplate"

	// MessageContentContentTypeListTemplate captures enum value "ListTemplate"
	MessageContentContentTypeListTemplate string = "ListTemplate"

	// MessageContentContentTypePostback captures enum value "Postback"
	MessageContentContentTypePostback string = "Postback"

	// MessageContentContentTypeReactions captures enum value "Reactions"
	MessageContentContentTypeReactions string = "Reactions"

	// MessageContentContentTypeMention captures enum value "Mention"
	MessageContentContentTypeMention string = "Mention"
)

// prop value enum
func (m *MessageContent) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, messageContentTypeContentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MessageContent) validateContentType(formats strfmt.Registry) error {

	if err := validate.Required("contentType", "body", m.ContentType); err != nil {
		return err
	}

	// value enum
	if err := m.validateContentTypeEnum("contentType", "body", *m.ContentType); err != nil {
		return err
	}

	return nil
}

func (m *MessageContent) validateGeneric(formats strfmt.Registry) error {

	if swag.IsZero(m.Generic) { // not required
		return nil
	}

	if m.Generic != nil {
		if err := m.Generic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generic")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateList(formats strfmt.Registry) error {

	if swag.IsZero(m.List) { // not required
		return nil
	}

	if m.List != nil {
		if err := m.List.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("list")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateMention(formats strfmt.Registry) error {

	if swag.IsZero(m.Mention) { // not required
		return nil
	}

	if m.Mention != nil {
		if err := m.Mention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mention")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validatePostback(formats strfmt.Registry) error {

	if swag.IsZero(m.Postback) { // not required
		return nil
	}

	if m.Postback != nil {
		if err := m.Postback.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postback")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateQuickReply(formats strfmt.Registry) error {

	if swag.IsZero(m.QuickReply) { // not required
		return nil
	}

	if m.QuickReply != nil {
		if err := m.QuickReply.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quickReply")
			}
			return err
		}
	}

	return nil
}

func (m *MessageContent) validateReactions(formats strfmt.Registry) error {

	if swag.IsZero(m.Reactions) { // not required
		return nil
	}

	for i := 0; i < len(m.Reactions); i++ {
		if swag.IsZero(m.Reactions[i]) { // not required
			continue
		}

		if m.Reactions[i] != nil {
			if err := m.Reactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MessageContent) validateTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MessageContent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MessageContent) UnmarshalBinary(b []byte) error {
	var res MessageContent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

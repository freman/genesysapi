// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoutingStatusDetailQueryPredicate routing status detail query predicate
//
// swagger:model RoutingStatusDetailQueryPredicate
type RoutingStatusDetailQueryPredicate struct {

	// Left hand side for dimension predicates
	// Enum: [routingStatus]
	Dimension string `json:"dimension,omitempty"`

	// Optional operator, default is matches
	// Enum: [matches exists notExists]
	Operator string `json:"operator,omitempty"`

	// Right hand side for dimension predicates
	Range *NumericRange `json:"range,omitempty"`

	// Optional type, can usually be inferred
	// Enum: [dimension property metric]
	Type string `json:"type,omitempty"`

	// Right hand side for dimension predicates
	Value string `json:"value,omitempty"`
}

// Validate validates this routing status detail query predicate
func (m *RoutingStatusDetailQueryPredicate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var routingStatusDetailQueryPredicateTypeDimensionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["routingStatus"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routingStatusDetailQueryPredicateTypeDimensionPropEnum = append(routingStatusDetailQueryPredicateTypeDimensionPropEnum, v)
	}
}

const (

	// RoutingStatusDetailQueryPredicateDimensionRoutingStatus captures enum value "routingStatus"
	RoutingStatusDetailQueryPredicateDimensionRoutingStatus string = "routingStatus"
)

// prop value enum
func (m *RoutingStatusDetailQueryPredicate) validateDimensionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routingStatusDetailQueryPredicateTypeDimensionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RoutingStatusDetailQueryPredicate) validateDimension(formats strfmt.Registry) error {
	if swag.IsZero(m.Dimension) { // not required
		return nil
	}

	// value enum
	if err := m.validateDimensionEnum("dimension", "body", m.Dimension); err != nil {
		return err
	}

	return nil
}

var routingStatusDetailQueryPredicateTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["matches","exists","notExists"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routingStatusDetailQueryPredicateTypeOperatorPropEnum = append(routingStatusDetailQueryPredicateTypeOperatorPropEnum, v)
	}
}

const (

	// RoutingStatusDetailQueryPredicateOperatorMatches captures enum value "matches"
	RoutingStatusDetailQueryPredicateOperatorMatches string = "matches"

	// RoutingStatusDetailQueryPredicateOperatorExists captures enum value "exists"
	RoutingStatusDetailQueryPredicateOperatorExists string = "exists"

	// RoutingStatusDetailQueryPredicateOperatorNotExists captures enum value "notExists"
	RoutingStatusDetailQueryPredicateOperatorNotExists string = "notExists"
)

// prop value enum
func (m *RoutingStatusDetailQueryPredicate) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routingStatusDetailQueryPredicateTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RoutingStatusDetailQueryPredicate) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *RoutingStatusDetailQueryPredicate) validateRange(formats strfmt.Registry) error {
	if swag.IsZero(m.Range) { // not required
		return nil
	}

	if m.Range != nil {
		if err := m.Range.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

var routingStatusDetailQueryPredicateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dimension","property","metric"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routingStatusDetailQueryPredicateTypeTypePropEnum = append(routingStatusDetailQueryPredicateTypeTypePropEnum, v)
	}
}

const (

	// RoutingStatusDetailQueryPredicateTypeDimension captures enum value "dimension"
	RoutingStatusDetailQueryPredicateTypeDimension string = "dimension"

	// RoutingStatusDetailQueryPredicateTypeProperty captures enum value "property"
	RoutingStatusDetailQueryPredicateTypeProperty string = "property"

	// RoutingStatusDetailQueryPredicateTypeMetric captures enum value "metric"
	RoutingStatusDetailQueryPredicateTypeMetric string = "metric"
)

// prop value enum
func (m *RoutingStatusDetailQueryPredicate) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routingStatusDetailQueryPredicateTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RoutingStatusDetailQueryPredicate) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this routing status detail query predicate based on the context it is used
func (m *RoutingStatusDetailQueryPredicate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoutingStatusDetailQueryPredicate) contextValidateRange(ctx context.Context, formats strfmt.Registry) error {

	if m.Range != nil {
		if err := m.Range.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoutingStatusDetailQueryPredicate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoutingStatusDetailQueryPredicate) UnmarshalBinary(b []byte) error {
	var res RoutingStatusDetailQueryPredicate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

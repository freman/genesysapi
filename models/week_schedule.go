// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WeekSchedule week schedule
//
// swagger:model WeekSchedule
type WeekSchedule struct {

	// Version of agent schedules in the week schedule
	AgentSchedulesVersion int32 `json:"agentSchedulesVersion,omitempty"`

	// Description of the week schedule
	Description string `json:"description,omitempty"`

	// Summary of the results from the schedule run
	GenerationResults *WeekScheduleGenerationResult `json:"generationResults,omitempty"`

	// Headcount information for the week schedule
	HeadcountForecast *HeadcountForecast `json:"headcountForecast,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Version metadata for this work plan
	Metadata *WfmVersionedEntityMetadata `json:"metadata,omitempty"`

	// Whether the week schedule is published
	Published bool `json:"published"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Short term forecast associated with this schedule
	ShortTermForecast *ShortTermForecastReference `json:"shortTermForecast,omitempty"`

	// User schedules in the week
	UserSchedules map[string]UserSchedule `json:"userSchedules,omitempty"`

	// First day of this week schedule in yyyy-MM-dd format
	WeekDate string `json:"weekDate,omitempty"`
}

// Validate validates this week schedule
func (m *WeekSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGenerationResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeadcountForecast(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortTermForecast(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserSchedules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WeekSchedule) validateGenerationResults(formats strfmt.Registry) error {
	if swag.IsZero(m.GenerationResults) { // not required
		return nil
	}

	if m.GenerationResults != nil {
		if err := m.GenerationResults.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generationResults")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generationResults")
			}
			return err
		}
	}

	return nil
}

func (m *WeekSchedule) validateHeadcountForecast(formats strfmt.Registry) error {
	if swag.IsZero(m.HeadcountForecast) { // not required
		return nil
	}

	if m.HeadcountForecast != nil {
		if err := m.HeadcountForecast.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headcountForecast")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headcountForecast")
			}
			return err
		}
	}

	return nil
}

func (m *WeekSchedule) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *WeekSchedule) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WeekSchedule) validateShortTermForecast(formats strfmt.Registry) error {
	if swag.IsZero(m.ShortTermForecast) { // not required
		return nil
	}

	if m.ShortTermForecast != nil {
		if err := m.ShortTermForecast.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shortTermForecast")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shortTermForecast")
			}
			return err
		}
	}

	return nil
}

func (m *WeekSchedule) validateUserSchedules(formats strfmt.Registry) error {
	if swag.IsZero(m.UserSchedules) { // not required
		return nil
	}

	for k := range m.UserSchedules {

		if err := validate.Required("userSchedules"+"."+k, "body", m.UserSchedules[k]); err != nil {
			return err
		}
		if val, ok := m.UserSchedules[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userSchedules" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userSchedules" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this week schedule based on the context it is used
func (m *WeekSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGenerationResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeadcountForecast(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShortTermForecast(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserSchedules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WeekSchedule) contextValidateGenerationResults(ctx context.Context, formats strfmt.Registry) error {

	if m.GenerationResults != nil {
		if err := m.GenerationResults.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generationResults")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generationResults")
			}
			return err
		}
	}

	return nil
}

func (m *WeekSchedule) contextValidateHeadcountForecast(ctx context.Context, formats strfmt.Registry) error {

	if m.HeadcountForecast != nil {
		if err := m.HeadcountForecast.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headcountForecast")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headcountForecast")
			}
			return err
		}
	}

	return nil
}

func (m *WeekSchedule) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *WeekSchedule) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *WeekSchedule) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *WeekSchedule) contextValidateShortTermForecast(ctx context.Context, formats strfmt.Registry) error {

	if m.ShortTermForecast != nil {
		if err := m.ShortTermForecast.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shortTermForecast")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shortTermForecast")
			}
			return err
		}
	}

	return nil
}

func (m *WeekSchedule) contextValidateUserSchedules(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.UserSchedules {

		if val, ok := m.UserSchedules[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WeekSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WeekSchedule) UnmarshalBinary(b []byte) error {
	var res WeekSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

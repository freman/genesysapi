// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduleGroup A group of schedules that define the operating hours of an organization.
//
// swagger:model ScheduleGroup
type ScheduleGroup struct {

	// The schedules defining the hours an organization is closed.
	ClosedSchedules []*DomainEntityRef `json:"closedSchedules"`

	// The ID of the user that created the resource.
	CreatedBy string `json:"createdBy,omitempty"`

	// The application that created the resource.
	CreatedByApp string `json:"createdByApp,omitempty"`

	// The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The resource's description.
	Description string `json:"description,omitempty"`

	// The division to which this entity belongs.
	Division *Division `json:"division,omitempty"`

	// The schedules defining the hours an organization is closed for the holidays.
	HolidaySchedules []*DomainEntityRef `json:"holidaySchedules"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The ID of the user that last modified the resource.
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// The application that last modified the resource.
	ModifiedByApp string `json:"modifiedByApp,omitempty"`

	// The name of the entity.
	// Required: true
	Name *string `json:"name"`

	// The schedules defining the hours an organization is open.
	OpenSchedules []*DomainEntityRef `json:"openSchedules"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Indicates if the resource is active, inactive, or deleted.
	// Read Only: true
	// Enum: [active inactive deleted]
	State string `json:"state,omitempty"`

	// The timezone the schedules are a part of.  This is not a schedule property to allow a schedule to be used in multiple timezones.
	TimeZone string `json:"timeZone,omitempty"`

	// The current version of the resource.
	Version int32 `json:"version,omitempty"`
}

// Validate validates this schedule group
func (m *ScheduleGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClosedSchedules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHolidaySchedules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenSchedules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleGroup) validateClosedSchedules(formats strfmt.Registry) error {

	if swag.IsZero(m.ClosedSchedules) { // not required
		return nil
	}

	for i := 0; i < len(m.ClosedSchedules); i++ {
		if swag.IsZero(m.ClosedSchedules[i]) { // not required
			continue
		}

		if m.ClosedSchedules[i] != nil {
			if err := m.ClosedSchedules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("closedSchedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScheduleGroup) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleGroup) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleGroup) validateDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if m.Division != nil {
		if err := m.Division.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

func (m *ScheduleGroup) validateHolidaySchedules(formats strfmt.Registry) error {

	if swag.IsZero(m.HolidaySchedules) { // not required
		return nil
	}

	for i := 0; i < len(m.HolidaySchedules); i++ {
		if swag.IsZero(m.HolidaySchedules[i]) { // not required
			continue
		}

		if m.HolidaySchedules[i] != nil {
			if err := m.HolidaySchedules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("holidaySchedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScheduleGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleGroup) validateOpenSchedules(formats strfmt.Registry) error {

	if swag.IsZero(m.OpenSchedules) { // not required
		return nil
	}

	for i := 0; i < len(m.OpenSchedules); i++ {
		if swag.IsZero(m.OpenSchedules[i]) { // not required
			continue
		}

		if m.OpenSchedules[i] != nil {
			if err := m.OpenSchedules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("openSchedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScheduleGroup) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var scheduleGroupTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleGroupTypeStatePropEnum = append(scheduleGroupTypeStatePropEnum, v)
	}
}

const (

	// ScheduleGroupStateActive captures enum value "active"
	ScheduleGroupStateActive string = "active"

	// ScheduleGroupStateInactive captures enum value "inactive"
	ScheduleGroupStateInactive string = "inactive"

	// ScheduleGroupStateDeleted captures enum value "deleted"
	ScheduleGroupStateDeleted string = "deleted"
)

// prop value enum
func (m *ScheduleGroup) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduleGroupTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScheduleGroup) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleGroup) UnmarshalBinary(b []byte) error {
	var res ScheduleGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

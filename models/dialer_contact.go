// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DialerContact dialer contact
//
// swagger:model DialerContact
type DialerContact struct {

	// A map of call records for the contact phone columns.
	// Read Only: true
	CallRecords map[string]CallRecord `json:"callRecords,omitempty"`

	// Indicates whether or not the contact can be called.
	Callable bool `json:"callable"`

	// the priority property within ConfigurationOverides indicates whether or not the contact to be placed in front of the queue or at the end of the queue
	// Read Only: true
	ConfigurationOverrides *ConfigurationOverrides `json:"configurationOverrides,omitempty"`

	// Map containing data about the timezone the contact is mapped to. This will only be populated if the contact list has automatic timezone mapping turned on. The key is the column name. The value is the timezone it mapped to and the type of column: Phone or Zip
	// Read Only: true
	ContactColumnTimeZones map[string]ContactColumnTimeZone `json:"contactColumnTimeZones,omitempty"`

	// The identifier of the contact list containing this contact.
	// Required: true
	ContactListID *string `json:"contactListId"`

	// A map of media types (Voice, SMS and Email) to ContactableStatus, which indicates if the contact can be contacted using the specified media type.
	ContactableStatus map[string]ContactableStatus `json:"contactableStatus,omitempty"`

	// An ordered map of the contact's columns and corresponding values.
	// Required: true
	Data map[string]interface{} `json:"data"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// A map of SMS records for the contact phone columns.
	// Read Only: true
	LatestSmsEvaluations map[string]MessageEvaluation `json:"latestSmsEvaluations,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// A map of phone number columns to PhoneNumberStatuses, which indicate if the phone number is callable or not.
	PhoneNumberStatus map[string]PhoneNumberStatus `json:"phoneNumberStatus,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this dialer contact
func (m *DialerContact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallRecords(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurationOverrides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactColumnTimeZones(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactListID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactableStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestSmsEvaluations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumberStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DialerContact) validateCallRecords(formats strfmt.Registry) error {

	if swag.IsZero(m.CallRecords) { // not required
		return nil
	}

	for k := range m.CallRecords {

		if err := validate.Required("callRecords"+"."+k, "body", m.CallRecords[k]); err != nil {
			return err
		}
		if val, ok := m.CallRecords[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DialerContact) validateConfigurationOverrides(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigurationOverrides) { // not required
		return nil
	}

	if m.ConfigurationOverrides != nil {
		if err := m.ConfigurationOverrides.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configurationOverrides")
			}
			return err
		}
	}

	return nil
}

func (m *DialerContact) validateContactColumnTimeZones(formats strfmt.Registry) error {

	if swag.IsZero(m.ContactColumnTimeZones) { // not required
		return nil
	}

	for k := range m.ContactColumnTimeZones {

		if err := validate.Required("contactColumnTimeZones"+"."+k, "body", m.ContactColumnTimeZones[k]); err != nil {
			return err
		}
		if val, ok := m.ContactColumnTimeZones[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DialerContact) validateContactListID(formats strfmt.Registry) error {

	if err := validate.Required("contactListId", "body", m.ContactListID); err != nil {
		return err
	}

	return nil
}

func (m *DialerContact) validateContactableStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ContactableStatus) { // not required
		return nil
	}

	for k := range m.ContactableStatus {

		if err := validate.Required("contactableStatus"+"."+k, "body", m.ContactableStatus[k]); err != nil {
			return err
		}
		if val, ok := m.ContactableStatus[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DialerContact) validateData(formats strfmt.Registry) error {

	for k := range m.Data {

		if err := validate.Required("data"+"."+k, "body", m.Data[k]); err != nil {
			return err
		}

		if err := validate.Required("data"+"."+k, "body", m.Data[k]); err != nil {
			return err
		}

	}

	return nil
}

func (m *DialerContact) validateLatestSmsEvaluations(formats strfmt.Registry) error {

	if swag.IsZero(m.LatestSmsEvaluations) { // not required
		return nil
	}

	for k := range m.LatestSmsEvaluations {

		if err := validate.Required("latestSmsEvaluations"+"."+k, "body", m.LatestSmsEvaluations[k]); err != nil {
			return err
		}
		if val, ok := m.LatestSmsEvaluations[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DialerContact) validatePhoneNumberStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumberStatus) { // not required
		return nil
	}

	for k := range m.PhoneNumberStatus {

		if err := validate.Required("phoneNumberStatus"+"."+k, "body", m.PhoneNumberStatus[k]); err != nil {
			return err
		}
		if val, ok := m.PhoneNumberStatus[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DialerContact) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DialerContact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DialerContact) UnmarshalBinary(b []byte) error {
	var res DialerContact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

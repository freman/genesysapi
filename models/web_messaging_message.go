// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebMessagingMessage A web messaging message
//
// swagger:model WebMessagingMessage
type WebMessagingMessage struct {

	// Channel-specific information that describes the message and the message channel/provider.
	Channel *WebMessagingChannel `json:"channel,omitempty"`

	// List of content elements.
	Content []*WebMessagingContent `json:"content"`

	// The direction of the message.  Direction is always from the perspective of the Genesys Cloud platform.  An Inbound message is one sent from a guest to the Genesys Cloud Platform.  An Outbound message is one sent from the Genesys Cloud Platform to a guest.
	// Enum: [Inbound Outbound]
	Direction string `json:"direction,omitempty"`

	// List of event elements.
	Events []*WebMessagingEvent `json:"events"`

	// Unique ID of the message. This ID is generated by Messaging Platform. Message receipts will have the same ID as the message they reference.
	ID string `json:"id,omitempty"`

	// Additional metadata about this message.
	Metadata map[string]string `json:"metadata,omitempty"`

	// Specifies if this message was sent by a human agent or bot. The platform may use this to apply appropriate provider policies.
	// Enum: [Human Bot]
	OriginatingEntity string `json:"originatingEntity,omitempty"`

	// Message text.
	Text string `json:"text,omitempty"`

	// Message type.
	// Enum: [Text Structured Receipt Event]
	Type string `json:"type,omitempty"`
}

// Validate validates this web messaging message
func (m *WebMessagingMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginatingEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebMessagingMessage) validateChannel(formats strfmt.Registry) error {

	if swag.IsZero(m.Channel) { // not required
		return nil
	}

	if m.Channel != nil {
		if err := m.Channel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel")
			}
			return err
		}
	}

	return nil
}

func (m *WebMessagingMessage) validateContent(formats strfmt.Registry) error {

	if swag.IsZero(m.Content) { // not required
		return nil
	}

	for i := 0; i < len(m.Content); i++ {
		if swag.IsZero(m.Content[i]) { // not required
			continue
		}

		if m.Content[i] != nil {
			if err := m.Content[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var webMessagingMessageTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Inbound","Outbound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webMessagingMessageTypeDirectionPropEnum = append(webMessagingMessageTypeDirectionPropEnum, v)
	}
}

const (

	// WebMessagingMessageDirectionInbound captures enum value "Inbound"
	WebMessagingMessageDirectionInbound string = "Inbound"

	// WebMessagingMessageDirectionOutbound captures enum value "Outbound"
	WebMessagingMessageDirectionOutbound string = "Outbound"
)

// prop value enum
func (m *WebMessagingMessage) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, webMessagingMessageTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WebMessagingMessage) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *WebMessagingMessage) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var webMessagingMessageTypeOriginatingEntityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Human","Bot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webMessagingMessageTypeOriginatingEntityPropEnum = append(webMessagingMessageTypeOriginatingEntityPropEnum, v)
	}
}

const (

	// WebMessagingMessageOriginatingEntityHuman captures enum value "Human"
	WebMessagingMessageOriginatingEntityHuman string = "Human"

	// WebMessagingMessageOriginatingEntityBot captures enum value "Bot"
	WebMessagingMessageOriginatingEntityBot string = "Bot"
)

// prop value enum
func (m *WebMessagingMessage) validateOriginatingEntityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, webMessagingMessageTypeOriginatingEntityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WebMessagingMessage) validateOriginatingEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.OriginatingEntity) { // not required
		return nil
	}

	// value enum
	if err := m.validateOriginatingEntityEnum("originatingEntity", "body", m.OriginatingEntity); err != nil {
		return err
	}

	return nil
}

var webMessagingMessageTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Text","Structured","Receipt","Event"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webMessagingMessageTypeTypePropEnum = append(webMessagingMessageTypeTypePropEnum, v)
	}
}

const (

	// WebMessagingMessageTypeText captures enum value "Text"
	WebMessagingMessageTypeText string = "Text"

	// WebMessagingMessageTypeStructured captures enum value "Structured"
	WebMessagingMessageTypeStructured string = "Structured"

	// WebMessagingMessageTypeReceipt captures enum value "Receipt"
	WebMessagingMessageTypeReceipt string = "Receipt"

	// WebMessagingMessageTypeEvent captures enum value "Event"
	WebMessagingMessageTypeEvent string = "Event"
)

// prop value enum
func (m *WebMessagingMessage) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, webMessagingMessageTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WebMessagingMessage) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebMessagingMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebMessagingMessage) UnmarshalBinary(b []byte) error {
	var res WebMessagingMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

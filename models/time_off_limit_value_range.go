// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeOffLimitValueRange time off limit value range
//
// swagger:model TimeOffLimitValueRange
type TimeOffLimitValueRange struct {

	// A list of allocated time off minutes per granularity interval
	AllocatedMinutesPerInterval []int32 `json:"allocatedMinutesPerInterval"`

	// Granularity choice for time off limit
	// Required: true
	// Enum: [Daily]
	Granularity *string `json:"granularity"`

	// A list of time off limit values in minutes per granularity interval
	LimitMinutesPerInterval []int32 `json:"limitMinutesPerInterval"`

	// Version metadata for the time off limit
	Metadata *WfmVersionedEntityMetadata `json:"metadata,omitempty"`

	// Start date of the requested date range, in ISO-8601 format. The end date is determined by the size of interval lists
	// Required: true
	// Format: date
	StartDate *strfmt.Date `json:"startDate"`

	// The ID of the time off limit
	TimeOffLimit *TimeOffLimitReference `json:"timeOffLimit,omitempty"`

	// A list of waitlisted time off minutes per granularity interval
	WaitlistedMinutesPerInterval []int32 `json:"waitlistedMinutesPerInterval"`

	// The current number of waitlisted time off requests for every interval per granularity
	WaitlistedRequestsPerInterval []int32 `json:"waitlistedRequestsPerInterval"`
}

// Validate validates this time off limit value range
func (m *TimeOffLimitValueRange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGranularity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeOffLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var timeOffLimitValueRangeTypeGranularityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Daily"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeOffLimitValueRangeTypeGranularityPropEnum = append(timeOffLimitValueRangeTypeGranularityPropEnum, v)
	}
}

const (

	// TimeOffLimitValueRangeGranularityDaily captures enum value "Daily"
	TimeOffLimitValueRangeGranularityDaily string = "Daily"
)

// prop value enum
func (m *TimeOffLimitValueRange) validateGranularityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, timeOffLimitValueRangeTypeGranularityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TimeOffLimitValueRange) validateGranularity(formats strfmt.Registry) error {

	if err := validate.Required("granularity", "body", m.Granularity); err != nil {
		return err
	}

	// value enum
	if err := m.validateGranularityEnum("granularity", "body", *m.Granularity); err != nil {
		return err
	}

	return nil
}

func (m *TimeOffLimitValueRange) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *TimeOffLimitValueRange) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	if err := validate.FormatOf("startDate", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimeOffLimitValueRange) validateTimeOffLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeOffLimit) { // not required
		return nil
	}

	if m.TimeOffLimit != nil {
		if err := m.TimeOffLimit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeOffLimit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeOffLimitValueRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeOffLimitValueRange) UnmarshalBinary(b []byte) error {
	var res TimeOffLimitValueRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

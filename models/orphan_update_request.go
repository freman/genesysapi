// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrphanUpdateRequest orphan update request
//
// swagger:model OrphanUpdateRequest
type OrphanUpdateRequest struct {

	// The orphan recording's archive date. Must be greater than 1 day from now if set. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	ArchiveDate strfmt.DateTime `json:"archiveDate,omitempty"`

	// A conversation Id that this orphan's recording is to be attached to. If not present, the conversationId will be deduced from the recording media.
	ConversationID string `json:"conversationId,omitempty"`

	// The orphan recording's delete date. Must be greater than archiveDate if set, otherwise one day from now. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DeleteDate strfmt.DateTime `json:"deleteDate,omitempty"`
}

// Validate validates this orphan update request
func (m *OrphanUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrphanUpdateRequest) validateArchiveDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ArchiveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("archiveDate", "body", "date-time", m.ArchiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrphanUpdateRequest) validateDeleteDate(formats strfmt.Registry) error {

	if swag.IsZero(m.DeleteDate) { // not required
		return nil
	}

	if err := validate.FormatOf("deleteDate", "body", "date-time", m.DeleteDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrphanUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrphanUpdateRequest) UnmarshalBinary(b []byte) error {
	var res OrphanUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

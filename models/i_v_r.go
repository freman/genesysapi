// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IVR Defines the phone numbers, operating hours, and the Architect flows to execute for an IVR.
//
// swagger:model IVR
type IVR struct {

	// The Architect flow to execute during the hours an organization is closed.
	ClosedHoursFlow *DomainEntityRef `json:"closedHoursFlow,omitempty"`

	// The ID of the user that created the resource.
	CreatedBy string `json:"createdBy,omitempty"`

	// The application that created the resource.
	CreatedByApp string `json:"createdByApp,omitempty"`

	// The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The resource's description.
	Description string `json:"description,omitempty"`

	// The phone number(s) to contact the IVR by.  Each phone number must be unique and not in use by another resource.  For example, a user and an iVR cannot have the same phone number.
	Dnis []string `json:"dnis"`

	// The Architect flow to execute during an organization's holiday hours.
	HolidayHoursFlow *DomainEntityRef `json:"holidayHoursFlow,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The ID of the user that last modified the resource.
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// The application that last modified the resource.
	ModifiedByApp string `json:"modifiedByApp,omitempty"`

	// The name of the entity.
	// Required: true
	Name *string `json:"name"`

	// The Architect flow to execute during the hours an organization is open.
	OpenHoursFlow *DomainEntityRef `json:"openHoursFlow,omitempty"`

	// The schedule group defining the open and closed hours for an organization.  If this is provided, an open flow and a closed flow must be specified as well.
	ScheduleGroup *DomainEntityRef `json:"scheduleGroup,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Indicates if the resource is active, inactive, or deleted.
	// Read Only: true
	// Enum: [active inactive deleted]
	State string `json:"state,omitempty"`

	// The current version of the resource.
	Version int32 `json:"version,omitempty"`
}

// Validate validates this i v r
func (m *IVR) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClosedHoursFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHolidayHoursFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenHoursFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IVR) validateClosedHoursFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.ClosedHoursFlow) { // not required
		return nil
	}

	if m.ClosedHoursFlow != nil {
		if err := m.ClosedHoursFlow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closedHoursFlow")
			}
			return err
		}
	}

	return nil
}

func (m *IVR) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IVR) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IVR) validateHolidayHoursFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.HolidayHoursFlow) { // not required
		return nil
	}

	if m.HolidayHoursFlow != nil {
		if err := m.HolidayHoursFlow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("holidayHoursFlow")
			}
			return err
		}
	}

	return nil
}

func (m *IVR) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IVR) validateOpenHoursFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.OpenHoursFlow) { // not required
		return nil
	}

	if m.OpenHoursFlow != nil {
		if err := m.OpenHoursFlow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openHoursFlow")
			}
			return err
		}
	}

	return nil
}

func (m *IVR) validateScheduleGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ScheduleGroup) { // not required
		return nil
	}

	if m.ScheduleGroup != nil {
		if err := m.ScheduleGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduleGroup")
			}
			return err
		}
	}

	return nil
}

func (m *IVR) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var iVRTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iVRTypeStatePropEnum = append(iVRTypeStatePropEnum, v)
	}
}

const (

	// IVRStateActive captures enum value "active"
	IVRStateActive string = "active"

	// IVRStateInactive captures enum value "inactive"
	IVRStateInactive string = "inactive"

	// IVRStateDeleted captures enum value "deleted"
	IVRStateDeleted string = "deleted"
)

// prop value enum
func (m *IVR) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, iVRTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IVR) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IVR) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IVR) UnmarshalBinary(b []byte) error {
	var res IVR
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

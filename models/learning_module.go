// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LearningModule Learning module response
//
// swagger:model LearningModule
type LearningModule struct {

	// The mode of archival for learning module
	// Enum: [Graceful Immediate]
	ArchivalMode string `json:"archivalMode,omitempty"`

	// The assessment form for learning module
	AssessmentForm *AssessmentForm `json:"assessmentForm,omitempty"`

	// The completion time of learning module in days
	// Required: true
	CompletionTimeInDays *int32 `json:"completionTimeInDays"`

	// The cover art for the learning module
	CoverArt *LearningModuleCoverArtResponse `json:"coverArt,omitempty"`

	// The user who created learning module
	// Read Only: true
	CreatedBy *UserReference `json:"createdBy,omitempty"`

	// The date/time learning module was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The date/time learning module was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The description of learning module
	Description string `json:"description,omitempty"`

	// The external ID of the learning module
	// Read Only: true
	ExternalID string `json:"externalId,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The list of inform steps in a learning module
	InformSteps []*LearningModuleInformStep `json:"informSteps"`

	// If true, learning module is archived
	// Read Only: true
	IsArchived *bool `json:"isArchived"`

	// If true, learning module is published
	// Read Only: true
	IsPublished *bool `json:"isPublished"`

	// The user who modified learning module
	// Read Only: true
	ModifiedBy *UserReference `json:"modifiedBy,omitempty"`

	// The name of learning module
	// Required: true
	Name *string `json:"name"`

	// The learning module reassign summary data
	ReassignSummaryData *LearningModuleReassignSummary `json:"reassignSummaryData,omitempty"`

	// The rule for learning module; read-only, and only populated when requested via expand param.
	// Read Only: true
	Rule *LearningModuleRule `json:"rule,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The source of the learning module
	// Read Only: true
	// Enum: [UserCreated GenesysBeyond]
	Source string `json:"source,omitempty"`

	// The learning module summary data
	SummaryData *LearningModuleSummary `json:"summaryData,omitempty"`

	// The type for the learning module
	// Enum: [Informational AssessedContent Assessment External]
	Type string `json:"type,omitempty"`

	// The version of published learning module
	// Read Only: true
	Version int32 `json:"version,omitempty"`
}

// Validate validates this learning module
func (m *LearningModule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchivalMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssessmentForm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletionTimeInDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoverArt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInformSteps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReassignSummaryData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummaryData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var learningModuleTypeArchivalModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Graceful","Immediate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		learningModuleTypeArchivalModePropEnum = append(learningModuleTypeArchivalModePropEnum, v)
	}
}

const (

	// LearningModuleArchivalModeGraceful captures enum value "Graceful"
	LearningModuleArchivalModeGraceful string = "Graceful"

	// LearningModuleArchivalModeImmediate captures enum value "Immediate"
	LearningModuleArchivalModeImmediate string = "Immediate"
)

// prop value enum
func (m *LearningModule) validateArchivalModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, learningModuleTypeArchivalModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LearningModule) validateArchivalMode(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivalMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateArchivalModeEnum("archivalMode", "body", m.ArchivalMode); err != nil {
		return err
	}

	return nil
}

func (m *LearningModule) validateAssessmentForm(formats strfmt.Registry) error {
	if swag.IsZero(m.AssessmentForm) { // not required
		return nil
	}

	if m.AssessmentForm != nil {
		if err := m.AssessmentForm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assessmentForm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assessmentForm")
			}
			return err
		}
	}

	return nil
}

func (m *LearningModule) validateCompletionTimeInDays(formats strfmt.Registry) error {

	if err := validate.Required("completionTimeInDays", "body", m.CompletionTimeInDays); err != nil {
		return err
	}

	return nil
}

func (m *LearningModule) validateCoverArt(formats strfmt.Registry) error {
	if swag.IsZero(m.CoverArt) { // not required
		return nil
	}

	if m.CoverArt != nil {
		if err := m.CoverArt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coverArt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coverArt")
			}
			return err
		}
	}

	return nil
}

func (m *LearningModule) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *LearningModule) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LearningModule) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LearningModule) validateInformSteps(formats strfmt.Registry) error {
	if swag.IsZero(m.InformSteps) { // not required
		return nil
	}

	for i := 0; i < len(m.InformSteps); i++ {
		if swag.IsZero(m.InformSteps[i]) { // not required
			continue
		}

		if m.InformSteps[i] != nil {
			if err := m.InformSteps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("informSteps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("informSteps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LearningModule) validateModifiedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedBy) { // not required
		return nil
	}

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modifiedBy")
			}
			return err
		}
	}

	return nil
}

func (m *LearningModule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *LearningModule) validateReassignSummaryData(formats strfmt.Registry) error {
	if swag.IsZero(m.ReassignSummaryData) { // not required
		return nil
	}

	if m.ReassignSummaryData != nil {
		if err := m.ReassignSummaryData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reassignSummaryData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reassignSummaryData")
			}
			return err
		}
	}

	return nil
}

func (m *LearningModule) validateRule(formats strfmt.Registry) error {
	if swag.IsZero(m.Rule) { // not required
		return nil
	}

	if m.Rule != nil {
		if err := m.Rule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

func (m *LearningModule) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var learningModuleTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UserCreated","GenesysBeyond"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		learningModuleTypeSourcePropEnum = append(learningModuleTypeSourcePropEnum, v)
	}
}

const (

	// LearningModuleSourceUserCreated captures enum value "UserCreated"
	LearningModuleSourceUserCreated string = "UserCreated"

	// LearningModuleSourceGenesysBeyond captures enum value "GenesysBeyond"
	LearningModuleSourceGenesysBeyond string = "GenesysBeyond"
)

// prop value enum
func (m *LearningModule) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, learningModuleTypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LearningModule) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnum("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *LearningModule) validateSummaryData(formats strfmt.Registry) error {
	if swag.IsZero(m.SummaryData) { // not required
		return nil
	}

	if m.SummaryData != nil {
		if err := m.SummaryData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summaryData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summaryData")
			}
			return err
		}
	}

	return nil
}

var learningModuleTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Informational","AssessedContent","Assessment","External"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		learningModuleTypeTypePropEnum = append(learningModuleTypeTypePropEnum, v)
	}
}

const (

	// LearningModuleTypeInformational captures enum value "Informational"
	LearningModuleTypeInformational string = "Informational"

	// LearningModuleTypeAssessedContent captures enum value "AssessedContent"
	LearningModuleTypeAssessedContent string = "AssessedContent"

	// LearningModuleTypeAssessment captures enum value "Assessment"
	LearningModuleTypeAssessment string = "Assessment"

	// LearningModuleTypeExternal captures enum value "External"
	LearningModuleTypeExternal string = "External"
)

// prop value enum
func (m *LearningModule) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, learningModuleTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LearningModule) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this learning module based on the context it is used
func (m *LearningModule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssessmentForm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCoverArt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateModified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInformSteps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsArchived(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsPublished(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifiedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReassignSummaryData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSummaryData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LearningModule) contextValidateAssessmentForm(ctx context.Context, formats strfmt.Registry) error {

	if m.AssessmentForm != nil {
		if err := m.AssessmentForm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assessmentForm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assessmentForm")
			}
			return err
		}
	}

	return nil
}

func (m *LearningModule) contextValidateCoverArt(ctx context.Context, formats strfmt.Registry) error {

	if m.CoverArt != nil {
		if err := m.CoverArt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coverArt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coverArt")
			}
			return err
		}
	}

	return nil
}

func (m *LearningModule) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {
		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *LearningModule) contextValidateDateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateCreated", "body", strfmt.DateTime(m.DateCreated)); err != nil {
		return err
	}

	return nil
}

func (m *LearningModule) contextValidateDateModified(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateModified", "body", strfmt.DateTime(m.DateModified)); err != nil {
		return err
	}

	return nil
}

func (m *LearningModule) contextValidateExternalID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "externalId", "body", string(m.ExternalID)); err != nil {
		return err
	}

	return nil
}

func (m *LearningModule) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *LearningModule) contextValidateInformSteps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InformSteps); i++ {

		if m.InformSteps[i] != nil {
			if err := m.InformSteps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("informSteps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("informSteps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LearningModule) contextValidateIsArchived(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isArchived", "body", m.IsArchived); err != nil {
		return err
	}

	return nil
}

func (m *LearningModule) contextValidateIsPublished(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isPublished", "body", m.IsPublished); err != nil {
		return err
	}

	return nil
}

func (m *LearningModule) contextValidateModifiedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modifiedBy")
			}
			return err
		}
	}

	return nil
}

func (m *LearningModule) contextValidateReassignSummaryData(ctx context.Context, formats strfmt.Registry) error {

	if m.ReassignSummaryData != nil {
		if err := m.ReassignSummaryData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reassignSummaryData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reassignSummaryData")
			}
			return err
		}
	}

	return nil
}

func (m *LearningModule) contextValidateRule(ctx context.Context, formats strfmt.Registry) error {

	if m.Rule != nil {
		if err := m.Rule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

func (m *LearningModule) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *LearningModule) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "source", "body", string(m.Source)); err != nil {
		return err
	}

	return nil
}

func (m *LearningModule) contextValidateSummaryData(ctx context.Context, formats strfmt.Registry) error {

	if m.SummaryData != nil {
		if err := m.SummaryData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summaryData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summaryData")
			}
			return err
		}
	}

	return nil
}

func (m *LearningModule) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "version", "body", int32(m.Version)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LearningModule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LearningModule) UnmarshalBinary(b []byte) error {
	var res LearningModule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

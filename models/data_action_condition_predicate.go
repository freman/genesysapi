// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataActionConditionPredicate data action condition predicate
//
// swagger:model DataActionConditionPredicate
type DataActionConditionPredicate struct {

	// The value to compare against for this condition
	// Required: true
	ComparisonValue *string `json:"comparisonValue"`

	// If true, inverts the result of evaluating this Predicate. Default is false.
	// Required: true
	Inverted *bool `json:"inverted"`

	// The name of an output field from the data action's output to use for this condition
	// Required: true
	OutputField *string `json:"outputField"`

	// The result of this predicate if the requested output field is missing from the data action's result
	// Required: true
	OutputFieldMissingResolution *bool `json:"outputFieldMissingResolution"`

	// The operation with which to evaluate this condition
	// Required: true
	// Enum: [EQUALS LESS_THAN LESS_THAN_EQUALS GREATER_THAN GREATER_THAN_EQUALS CONTAINS BEGINS_WITH ENDS_WITH BEFORE AFTER]
	OutputOperator *string `json:"outputOperator"`
}

// Validate validates this data action condition predicate
func (m *DataActionConditionPredicate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComparisonValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInverted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputFieldMissingResolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataActionConditionPredicate) validateComparisonValue(formats strfmt.Registry) error {

	if err := validate.Required("comparisonValue", "body", m.ComparisonValue); err != nil {
		return err
	}

	return nil
}

func (m *DataActionConditionPredicate) validateInverted(formats strfmt.Registry) error {

	if err := validate.Required("inverted", "body", m.Inverted); err != nil {
		return err
	}

	return nil
}

func (m *DataActionConditionPredicate) validateOutputField(formats strfmt.Registry) error {

	if err := validate.Required("outputField", "body", m.OutputField); err != nil {
		return err
	}

	return nil
}

func (m *DataActionConditionPredicate) validateOutputFieldMissingResolution(formats strfmt.Registry) error {

	if err := validate.Required("outputFieldMissingResolution", "body", m.OutputFieldMissingResolution); err != nil {
		return err
	}

	return nil
}

var dataActionConditionPredicateTypeOutputOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EQUALS","LESS_THAN","LESS_THAN_EQUALS","GREATER_THAN","GREATER_THAN_EQUALS","CONTAINS","BEGINS_WITH","ENDS_WITH","BEFORE","AFTER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataActionConditionPredicateTypeOutputOperatorPropEnum = append(dataActionConditionPredicateTypeOutputOperatorPropEnum, v)
	}
}

const (

	// DataActionConditionPredicateOutputOperatorEQUALS captures enum value "EQUALS"
	DataActionConditionPredicateOutputOperatorEQUALS string = "EQUALS"

	// DataActionConditionPredicateOutputOperatorLESSTHAN captures enum value "LESS_THAN"
	DataActionConditionPredicateOutputOperatorLESSTHAN string = "LESS_THAN"

	// DataActionConditionPredicateOutputOperatorLESSTHANEQUALS captures enum value "LESS_THAN_EQUALS"
	DataActionConditionPredicateOutputOperatorLESSTHANEQUALS string = "LESS_THAN_EQUALS"

	// DataActionConditionPredicateOutputOperatorGREATERTHAN captures enum value "GREATER_THAN"
	DataActionConditionPredicateOutputOperatorGREATERTHAN string = "GREATER_THAN"

	// DataActionConditionPredicateOutputOperatorGREATERTHANEQUALS captures enum value "GREATER_THAN_EQUALS"
	DataActionConditionPredicateOutputOperatorGREATERTHANEQUALS string = "GREATER_THAN_EQUALS"

	// DataActionConditionPredicateOutputOperatorCONTAINS captures enum value "CONTAINS"
	DataActionConditionPredicateOutputOperatorCONTAINS string = "CONTAINS"

	// DataActionConditionPredicateOutputOperatorBEGINSWITH captures enum value "BEGINS_WITH"
	DataActionConditionPredicateOutputOperatorBEGINSWITH string = "BEGINS_WITH"

	// DataActionConditionPredicateOutputOperatorENDSWITH captures enum value "ENDS_WITH"
	DataActionConditionPredicateOutputOperatorENDSWITH string = "ENDS_WITH"

	// DataActionConditionPredicateOutputOperatorBEFORE captures enum value "BEFORE"
	DataActionConditionPredicateOutputOperatorBEFORE string = "BEFORE"

	// DataActionConditionPredicateOutputOperatorAFTER captures enum value "AFTER"
	DataActionConditionPredicateOutputOperatorAFTER string = "AFTER"
)

// prop value enum
func (m *DataActionConditionPredicate) validateOutputOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataActionConditionPredicateTypeOutputOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataActionConditionPredicate) validateOutputOperator(formats strfmt.Registry) error {

	if err := validate.Required("outputOperator", "body", m.OutputOperator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOutputOperatorEnum("outputOperator", "body", *m.OutputOperator); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataActionConditionPredicate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataActionConditionPredicate) UnmarshalBinary(b []byte) error {
	var res DataActionConditionPredicate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

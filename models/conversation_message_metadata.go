// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConversationMessageMetadata Metadata information about a message.
//
// swagger:model ConversationMessageMetadata
type ConversationMessageMetadata struct {

	// List of message content
	Content []*ConversationMessageMetadataContent `json:"content"`

	// List of events metadata
	Events []*ConversationMessageMetadataEvent `json:"events"`

	// Message type.
	// Enum: [Text Structured Receipt Event Message Unknown]
	Type string `json:"type,omitempty"`
}

// Validate validates this conversation message metadata
func (m *ConversationMessageMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConversationMessageMetadata) validateContent(formats strfmt.Registry) error {

	if swag.IsZero(m.Content) { // not required
		return nil
	}

	for i := 0; i < len(m.Content); i++ {
		if swag.IsZero(m.Content[i]) { // not required
			continue
		}

		if m.Content[i] != nil {
			if err := m.Content[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConversationMessageMetadata) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var conversationMessageMetadataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Text","Structured","Receipt","Event","Message","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conversationMessageMetadataTypeTypePropEnum = append(conversationMessageMetadataTypeTypePropEnum, v)
	}
}

const (

	// ConversationMessageMetadataTypeText captures enum value "Text"
	ConversationMessageMetadataTypeText string = "Text"

	// ConversationMessageMetadataTypeStructured captures enum value "Structured"
	ConversationMessageMetadataTypeStructured string = "Structured"

	// ConversationMessageMetadataTypeReceipt captures enum value "Receipt"
	ConversationMessageMetadataTypeReceipt string = "Receipt"

	// ConversationMessageMetadataTypeEvent captures enum value "Event"
	ConversationMessageMetadataTypeEvent string = "Event"

	// ConversationMessageMetadataTypeMessage captures enum value "Message"
	ConversationMessageMetadataTypeMessage string = "Message"

	// ConversationMessageMetadataTypeUnknown captures enum value "Unknown"
	ConversationMessageMetadataTypeUnknown string = "Unknown"
)

// prop value enum
func (m *ConversationMessageMetadata) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, conversationMessageMetadataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConversationMessageMetadata) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConversationMessageMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConversationMessageMetadata) UnmarshalBinary(b []byte) error {
	var res ConversationMessageMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

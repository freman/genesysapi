// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventLog event log
//
// swagger:model EventLog
type EventLog struct {

	// category
	// Enum: [CALLBACK CALL_RESTRICTION CALL_RULE CAMPAIGN CAMPAIGN_RULE CONTACT CONTACT_LIST_FILTER DNC_LIST ENTITY_LIMIT IMPORT_ERROR MESSAGING_CAMPAIGN ORGANIZATION_CONFIGURATION SCHEDULE]
	Category string `json:"category,omitempty"`

	// correlation Id
	CorrelationID string `json:"correlationId,omitempty"`

	// error entity
	ErrorEntity *DomainEntityRef `json:"errorEntity,omitempty"`

	// event message
	EventMessage *EventMessage `json:"eventMessage,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// level
	// Enum: [INFO WARNING ERROR]
	Level string `json:"level,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// related entity
	RelatedEntity *DomainEntityRef `json:"relatedEntity,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this event log
func (m *EventLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var eventLogTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CALLBACK","CALL_RESTRICTION","CALL_RULE","CAMPAIGN","CAMPAIGN_RULE","CONTACT","CONTACT_LIST_FILTER","DNC_LIST","ENTITY_LIMIT","IMPORT_ERROR","MESSAGING_CAMPAIGN","ORGANIZATION_CONFIGURATION","SCHEDULE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventLogTypeCategoryPropEnum = append(eventLogTypeCategoryPropEnum, v)
	}
}

const (

	// EventLogCategoryCALLBACK captures enum value "CALLBACK"
	EventLogCategoryCALLBACK string = "CALLBACK"

	// EventLogCategoryCALLRESTRICTION captures enum value "CALL_RESTRICTION"
	EventLogCategoryCALLRESTRICTION string = "CALL_RESTRICTION"

	// EventLogCategoryCALLRULE captures enum value "CALL_RULE"
	EventLogCategoryCALLRULE string = "CALL_RULE"

	// EventLogCategoryCAMPAIGN captures enum value "CAMPAIGN"
	EventLogCategoryCAMPAIGN string = "CAMPAIGN"

	// EventLogCategoryCAMPAIGNRULE captures enum value "CAMPAIGN_RULE"
	EventLogCategoryCAMPAIGNRULE string = "CAMPAIGN_RULE"

	// EventLogCategoryCONTACT captures enum value "CONTACT"
	EventLogCategoryCONTACT string = "CONTACT"

	// EventLogCategoryCONTACTLISTFILTER captures enum value "CONTACT_LIST_FILTER"
	EventLogCategoryCONTACTLISTFILTER string = "CONTACT_LIST_FILTER"

	// EventLogCategoryDNCLIST captures enum value "DNC_LIST"
	EventLogCategoryDNCLIST string = "DNC_LIST"

	// EventLogCategoryENTITYLIMIT captures enum value "ENTITY_LIMIT"
	EventLogCategoryENTITYLIMIT string = "ENTITY_LIMIT"

	// EventLogCategoryIMPORTERROR captures enum value "IMPORT_ERROR"
	EventLogCategoryIMPORTERROR string = "IMPORT_ERROR"

	// EventLogCategoryMESSAGINGCAMPAIGN captures enum value "MESSAGING_CAMPAIGN"
	EventLogCategoryMESSAGINGCAMPAIGN string = "MESSAGING_CAMPAIGN"

	// EventLogCategoryORGANIZATIONCONFIGURATION captures enum value "ORGANIZATION_CONFIGURATION"
	EventLogCategoryORGANIZATIONCONFIGURATION string = "ORGANIZATION_CONFIGURATION"

	// EventLogCategorySCHEDULE captures enum value "SCHEDULE"
	EventLogCategorySCHEDULE string = "SCHEDULE"
)

// prop value enum
func (m *EventLog) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eventLogTypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EventLog) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *EventLog) validateErrorEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorEntity) { // not required
		return nil
	}

	if m.ErrorEntity != nil {
		if err := m.ErrorEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorEntity")
			}
			return err
		}
	}

	return nil
}

func (m *EventLog) validateEventMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.EventMessage) { // not required
		return nil
	}

	if m.EventMessage != nil {
		if err := m.EventMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventMessage")
			}
			return err
		}
	}

	return nil
}

var eventLogTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INFO","WARNING","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventLogTypeLevelPropEnum = append(eventLogTypeLevelPropEnum, v)
	}
}

const (

	// EventLogLevelINFO captures enum value "INFO"
	EventLogLevelINFO string = "INFO"

	// EventLogLevelWARNING captures enum value "WARNING"
	EventLogLevelWARNING string = "WARNING"

	// EventLogLevelERROR captures enum value "ERROR"
	EventLogLevelERROR string = "ERROR"
)

// prop value enum
func (m *EventLog) validateLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eventLogTypeLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EventLog) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

func (m *EventLog) validateRelatedEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.RelatedEntity) { // not required
		return nil
	}

	if m.RelatedEntity != nil {
		if err := m.RelatedEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedEntity")
			}
			return err
		}
	}

	return nil
}

func (m *EventLog) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EventLog) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventLog) UnmarshalBinary(b []byte) error {
	var res EventLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConversationThreadingWindowSetting conversation threading window setting
//
// swagger:model ConversationThreadingWindowSetting
type ConversationThreadingWindowSetting struct {

	// The type of messenger
	// Required: true
	// Enum: [sms facebook twitter line whatsapp webmessaging instagram open]
	MessengerType *string `json:"messengerType"`

	// The conversation threading window timeout (Minutes) of specified messenger type
	// Required: true
	TimeoutInMinutes *int64 `json:"timeoutInMinutes"`
}

// Validate validates this conversation threading window setting
func (m *ConversationThreadingWindowSetting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessengerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeoutInMinutes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var conversationThreadingWindowSettingTypeMessengerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sms","facebook","twitter","line","whatsapp","webmessaging","instagram","open"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conversationThreadingWindowSettingTypeMessengerTypePropEnum = append(conversationThreadingWindowSettingTypeMessengerTypePropEnum, v)
	}
}

const (

	// ConversationThreadingWindowSettingMessengerTypeSms captures enum value "sms"
	ConversationThreadingWindowSettingMessengerTypeSms string = "sms"

	// ConversationThreadingWindowSettingMessengerTypeFacebook captures enum value "facebook"
	ConversationThreadingWindowSettingMessengerTypeFacebook string = "facebook"

	// ConversationThreadingWindowSettingMessengerTypeTwitter captures enum value "twitter"
	ConversationThreadingWindowSettingMessengerTypeTwitter string = "twitter"

	// ConversationThreadingWindowSettingMessengerTypeLine captures enum value "line"
	ConversationThreadingWindowSettingMessengerTypeLine string = "line"

	// ConversationThreadingWindowSettingMessengerTypeWhatsapp captures enum value "whatsapp"
	ConversationThreadingWindowSettingMessengerTypeWhatsapp string = "whatsapp"

	// ConversationThreadingWindowSettingMessengerTypeWebmessaging captures enum value "webmessaging"
	ConversationThreadingWindowSettingMessengerTypeWebmessaging string = "webmessaging"

	// ConversationThreadingWindowSettingMessengerTypeInstagram captures enum value "instagram"
	ConversationThreadingWindowSettingMessengerTypeInstagram string = "instagram"

	// ConversationThreadingWindowSettingMessengerTypeOpen captures enum value "open"
	ConversationThreadingWindowSettingMessengerTypeOpen string = "open"
)

// prop value enum
func (m *ConversationThreadingWindowSetting) validateMessengerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, conversationThreadingWindowSettingTypeMessengerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConversationThreadingWindowSetting) validateMessengerType(formats strfmt.Registry) error {

	if err := validate.Required("messengerType", "body", m.MessengerType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMessengerTypeEnum("messengerType", "body", *m.MessengerType); err != nil {
		return err
	}

	return nil
}

func (m *ConversationThreadingWindowSetting) validateTimeoutInMinutes(formats strfmt.Registry) error {

	if err := validate.Required("timeoutInMinutes", "body", m.TimeoutInMinutes); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConversationThreadingWindowSetting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConversationThreadingWindowSetting) UnmarshalBinary(b []byte) error {
	var res ConversationThreadingWindowSetting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

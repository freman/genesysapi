// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Check check
//
// swagger:model Check
type Check struct {

	// The result of a check executed. This indicates if the check was successful or not.
	// Read Only: true
	// Enum: [Passed Failed Unknown Skipped Error]
	Result string `json:"result,omitempty"`

	// The type of check executed.
	// Read Only: true
	// Enum: [HandleTimeValue TransferRateValue InteractionVolume UserVariance DataCoverage ModelQuality]
	Type string `json:"type,omitempty"`
}

// Validate validates this check
func (m *Check) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var checkTypeResultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Passed","Failed","Unknown","Skipped","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		checkTypeResultPropEnum = append(checkTypeResultPropEnum, v)
	}
}

const (

	// CheckResultPassed captures enum value "Passed"
	CheckResultPassed string = "Passed"

	// CheckResultFailed captures enum value "Failed"
	CheckResultFailed string = "Failed"

	// CheckResultUnknown captures enum value "Unknown"
	CheckResultUnknown string = "Unknown"

	// CheckResultSkipped captures enum value "Skipped"
	CheckResultSkipped string = "Skipped"

	// CheckResultError captures enum value "Error"
	CheckResultError string = "Error"
)

// prop value enum
func (m *Check) validateResultEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, checkTypeResultPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Check) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(m.Result) { // not required
		return nil
	}

	// value enum
	if err := m.validateResultEnum("result", "body", m.Result); err != nil {
		return err
	}

	return nil
}

var checkTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HandleTimeValue","TransferRateValue","InteractionVolume","UserVariance","DataCoverage","ModelQuality"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		checkTypeTypePropEnum = append(checkTypeTypePropEnum, v)
	}
}

const (

	// CheckTypeHandleTimeValue captures enum value "HandleTimeValue"
	CheckTypeHandleTimeValue string = "HandleTimeValue"

	// CheckTypeTransferRateValue captures enum value "TransferRateValue"
	CheckTypeTransferRateValue string = "TransferRateValue"

	// CheckTypeInteractionVolume captures enum value "InteractionVolume"
	CheckTypeInteractionVolume string = "InteractionVolume"

	// CheckTypeUserVariance captures enum value "UserVariance"
	CheckTypeUserVariance string = "UserVariance"

	// CheckTypeDataCoverage captures enum value "DataCoverage"
	CheckTypeDataCoverage string = "DataCoverage"

	// CheckTypeModelQuality captures enum value "ModelQuality"
	CheckTypeModelQuality string = "ModelQuality"
)

// prop value enum
func (m *Check) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, checkTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Check) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Check) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Check) UnmarshalBinary(b []byte) error {
	var res Check
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnowledgeCategory knowledge category
//
// swagger:model KnowledgeCategory
type KnowledgeCategory struct {

	// Category creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Category last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// Category description
	Description string `json:"description,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Knowledge base which category does belong to
	// Read Only: true
	KnowledgeBase *KnowledgeBase `json:"knowledgeBase,omitempty"`

	// Actual language of the category
	// Read Only: true
	// Enum: [en-US en-UK en-AU en-CA en-HK en-IN en-IE en-NZ en-PH en-SG en-ZA de-DE de-AT de-CH es-AR es-CO es-MX es-US es-ES fr-FR fr-BE fr-CA fr-CH pt-BR pt-PT nl-NL nl-BE it-IT]
	LanguageCode string `json:"languageCode,omitempty"`

	// Category name
	// Required: true
	Name *string `json:"name"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this knowledge category
func (m *KnowledgeCategory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKnowledgeBase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeCategory) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeCategory) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeCategory) validateKnowledgeBase(formats strfmt.Registry) error {

	if swag.IsZero(m.KnowledgeBase) { // not required
		return nil
	}

	if m.KnowledgeBase != nil {
		if err := m.KnowledgeBase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("knowledgeBase")
			}
			return err
		}
	}

	return nil
}

var knowledgeCategoryTypeLanguageCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["en-US","en-UK","en-AU","en-CA","en-HK","en-IN","en-IE","en-NZ","en-PH","en-SG","en-ZA","de-DE","de-AT","de-CH","es-AR","es-CO","es-MX","es-US","es-ES","fr-FR","fr-BE","fr-CA","fr-CH","pt-BR","pt-PT","nl-NL","nl-BE","it-IT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		knowledgeCategoryTypeLanguageCodePropEnum = append(knowledgeCategoryTypeLanguageCodePropEnum, v)
	}
}

const (

	// KnowledgeCategoryLanguageCodeEnUS captures enum value "en-US"
	KnowledgeCategoryLanguageCodeEnUS string = "en-US"

	// KnowledgeCategoryLanguageCodeEnUK captures enum value "en-UK"
	KnowledgeCategoryLanguageCodeEnUK string = "en-UK"

	// KnowledgeCategoryLanguageCodeEnAU captures enum value "en-AU"
	KnowledgeCategoryLanguageCodeEnAU string = "en-AU"

	// KnowledgeCategoryLanguageCodeEnCA captures enum value "en-CA"
	KnowledgeCategoryLanguageCodeEnCA string = "en-CA"

	// KnowledgeCategoryLanguageCodeEnHK captures enum value "en-HK"
	KnowledgeCategoryLanguageCodeEnHK string = "en-HK"

	// KnowledgeCategoryLanguageCodeEnIN captures enum value "en-IN"
	KnowledgeCategoryLanguageCodeEnIN string = "en-IN"

	// KnowledgeCategoryLanguageCodeEnIE captures enum value "en-IE"
	KnowledgeCategoryLanguageCodeEnIE string = "en-IE"

	// KnowledgeCategoryLanguageCodeEnNZ captures enum value "en-NZ"
	KnowledgeCategoryLanguageCodeEnNZ string = "en-NZ"

	// KnowledgeCategoryLanguageCodeEnPH captures enum value "en-PH"
	KnowledgeCategoryLanguageCodeEnPH string = "en-PH"

	// KnowledgeCategoryLanguageCodeEnSG captures enum value "en-SG"
	KnowledgeCategoryLanguageCodeEnSG string = "en-SG"

	// KnowledgeCategoryLanguageCodeEnZA captures enum value "en-ZA"
	KnowledgeCategoryLanguageCodeEnZA string = "en-ZA"

	// KnowledgeCategoryLanguageCodeDeDE captures enum value "de-DE"
	KnowledgeCategoryLanguageCodeDeDE string = "de-DE"

	// KnowledgeCategoryLanguageCodeDeAT captures enum value "de-AT"
	KnowledgeCategoryLanguageCodeDeAT string = "de-AT"

	// KnowledgeCategoryLanguageCodeDeCH captures enum value "de-CH"
	KnowledgeCategoryLanguageCodeDeCH string = "de-CH"

	// KnowledgeCategoryLanguageCodeEsAR captures enum value "es-AR"
	KnowledgeCategoryLanguageCodeEsAR string = "es-AR"

	// KnowledgeCategoryLanguageCodeEsCO captures enum value "es-CO"
	KnowledgeCategoryLanguageCodeEsCO string = "es-CO"

	// KnowledgeCategoryLanguageCodeEsMX captures enum value "es-MX"
	KnowledgeCategoryLanguageCodeEsMX string = "es-MX"

	// KnowledgeCategoryLanguageCodeEsUS captures enum value "es-US"
	KnowledgeCategoryLanguageCodeEsUS string = "es-US"

	// KnowledgeCategoryLanguageCodeEsES captures enum value "es-ES"
	KnowledgeCategoryLanguageCodeEsES string = "es-ES"

	// KnowledgeCategoryLanguageCodeFrFR captures enum value "fr-FR"
	KnowledgeCategoryLanguageCodeFrFR string = "fr-FR"

	// KnowledgeCategoryLanguageCodeFrBE captures enum value "fr-BE"
	KnowledgeCategoryLanguageCodeFrBE string = "fr-BE"

	// KnowledgeCategoryLanguageCodeFrCA captures enum value "fr-CA"
	KnowledgeCategoryLanguageCodeFrCA string = "fr-CA"

	// KnowledgeCategoryLanguageCodeFrCH captures enum value "fr-CH"
	KnowledgeCategoryLanguageCodeFrCH string = "fr-CH"

	// KnowledgeCategoryLanguageCodePtBR captures enum value "pt-BR"
	KnowledgeCategoryLanguageCodePtBR string = "pt-BR"

	// KnowledgeCategoryLanguageCodePtPT captures enum value "pt-PT"
	KnowledgeCategoryLanguageCodePtPT string = "pt-PT"

	// KnowledgeCategoryLanguageCodeNlNL captures enum value "nl-NL"
	KnowledgeCategoryLanguageCodeNlNL string = "nl-NL"

	// KnowledgeCategoryLanguageCodeNlBE captures enum value "nl-BE"
	KnowledgeCategoryLanguageCodeNlBE string = "nl-BE"

	// KnowledgeCategoryLanguageCodeItIT captures enum value "it-IT"
	KnowledgeCategoryLanguageCodeItIT string = "it-IT"
)

// prop value enum
func (m *KnowledgeCategory) validateLanguageCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, knowledgeCategoryTypeLanguageCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KnowledgeCategory) validateLanguageCode(formats strfmt.Registry) error {

	if swag.IsZero(m.LanguageCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateLanguageCodeEnum("languageCode", "body", m.LanguageCode); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeCategory) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeCategory) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KnowledgeCategory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnowledgeCategory) UnmarshalBinary(b []byte) error {
	var res KnowledgeCategory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnowledgeCategory knowledge category
//
// swagger:model KnowledgeCategory
type KnowledgeCategory struct {

	// Category creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Category last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// Category description
	Description string `json:"description,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Knowledge base which category does belong to
	// Read Only: true
	KnowledgeBase *KnowledgeBase `json:"knowledgeBase,omitempty"`

	// Actual language of the category
	// Read Only: true
	// Enum: [en-US en-UK en-AU en-CA en-HK en-IN en-IE en-NZ en-PH en-SG en-ZA de-DE de-AT de-CH es-AR es-CO es-MX es-US es-ES fr-FR fr-BE fr-CA fr-CH pt-BR pt-PT nl-NL nl-BE it-IT]
	LanguageCode string `json:"languageCode,omitempty"`

	// Category name
	// Required: true
	Name *string `json:"name"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this knowledge category
func (m *KnowledgeCategory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKnowledgeBase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeCategory) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeCategory) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeCategory) validateKnowledgeBase(formats strfmt.Registry) error {
	if swag.IsZero(m.KnowledgeBase) { // not required
		return nil
	}

	if m.KnowledgeBase != nil {
		if err := m.KnowledgeBase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("knowledgeBase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("knowledgeBase")
			}
			return err
		}
	}

	return nil
}

var knowledgeCategoryTypeLanguageCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["en-US","en-UK","en-AU","en-CA","en-HK","en-IN","en-IE","en-NZ","en-PH","en-SG","en-ZA","de-DE","de-AT","de-CH","es-AR","es-CO","es-MX","es-US","es-ES","fr-FR","fr-BE","fr-CA","fr-CH","pt-BR","pt-PT","nl-NL","nl-BE","it-IT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		knowledgeCategoryTypeLanguageCodePropEnum = append(knowledgeCategoryTypeLanguageCodePropEnum, v)
	}
}

const (

	// KnowledgeCategoryLanguageCodeEnDashUS captures enum value "en-US"
	KnowledgeCategoryLanguageCodeEnDashUS string = "en-US"

	// KnowledgeCategoryLanguageCodeEnDashUK captures enum value "en-UK"
	KnowledgeCategoryLanguageCodeEnDashUK string = "en-UK"

	// KnowledgeCategoryLanguageCodeEnDashAU captures enum value "en-AU"
	KnowledgeCategoryLanguageCodeEnDashAU string = "en-AU"

	// KnowledgeCategoryLanguageCodeEnDashCA captures enum value "en-CA"
	KnowledgeCategoryLanguageCodeEnDashCA string = "en-CA"

	// KnowledgeCategoryLanguageCodeEnDashHK captures enum value "en-HK"
	KnowledgeCategoryLanguageCodeEnDashHK string = "en-HK"

	// KnowledgeCategoryLanguageCodeEnDashIN captures enum value "en-IN"
	KnowledgeCategoryLanguageCodeEnDashIN string = "en-IN"

	// KnowledgeCategoryLanguageCodeEnDashIE captures enum value "en-IE"
	KnowledgeCategoryLanguageCodeEnDashIE string = "en-IE"

	// KnowledgeCategoryLanguageCodeEnDashNZ captures enum value "en-NZ"
	KnowledgeCategoryLanguageCodeEnDashNZ string = "en-NZ"

	// KnowledgeCategoryLanguageCodeEnDashPH captures enum value "en-PH"
	KnowledgeCategoryLanguageCodeEnDashPH string = "en-PH"

	// KnowledgeCategoryLanguageCodeEnDashSG captures enum value "en-SG"
	KnowledgeCategoryLanguageCodeEnDashSG string = "en-SG"

	// KnowledgeCategoryLanguageCodeEnDashZA captures enum value "en-ZA"
	KnowledgeCategoryLanguageCodeEnDashZA string = "en-ZA"

	// KnowledgeCategoryLanguageCodeDeDashDE captures enum value "de-DE"
	KnowledgeCategoryLanguageCodeDeDashDE string = "de-DE"

	// KnowledgeCategoryLanguageCodeDeDashAT captures enum value "de-AT"
	KnowledgeCategoryLanguageCodeDeDashAT string = "de-AT"

	// KnowledgeCategoryLanguageCodeDeDashCH captures enum value "de-CH"
	KnowledgeCategoryLanguageCodeDeDashCH string = "de-CH"

	// KnowledgeCategoryLanguageCodeEsDashAR captures enum value "es-AR"
	KnowledgeCategoryLanguageCodeEsDashAR string = "es-AR"

	// KnowledgeCategoryLanguageCodeEsDashCO captures enum value "es-CO"
	KnowledgeCategoryLanguageCodeEsDashCO string = "es-CO"

	// KnowledgeCategoryLanguageCodeEsDashMX captures enum value "es-MX"
	KnowledgeCategoryLanguageCodeEsDashMX string = "es-MX"

	// KnowledgeCategoryLanguageCodeEsDashUS captures enum value "es-US"
	KnowledgeCategoryLanguageCodeEsDashUS string = "es-US"

	// KnowledgeCategoryLanguageCodeEsDashES captures enum value "es-ES"
	KnowledgeCategoryLanguageCodeEsDashES string = "es-ES"

	// KnowledgeCategoryLanguageCodeFrDashFR captures enum value "fr-FR"
	KnowledgeCategoryLanguageCodeFrDashFR string = "fr-FR"

	// KnowledgeCategoryLanguageCodeFrDashBE captures enum value "fr-BE"
	KnowledgeCategoryLanguageCodeFrDashBE string = "fr-BE"

	// KnowledgeCategoryLanguageCodeFrDashCA captures enum value "fr-CA"
	KnowledgeCategoryLanguageCodeFrDashCA string = "fr-CA"

	// KnowledgeCategoryLanguageCodeFrDashCH captures enum value "fr-CH"
	KnowledgeCategoryLanguageCodeFrDashCH string = "fr-CH"

	// KnowledgeCategoryLanguageCodePtDashBR captures enum value "pt-BR"
	KnowledgeCategoryLanguageCodePtDashBR string = "pt-BR"

	// KnowledgeCategoryLanguageCodePtDashPT captures enum value "pt-PT"
	KnowledgeCategoryLanguageCodePtDashPT string = "pt-PT"

	// KnowledgeCategoryLanguageCodeNlDashNL captures enum value "nl-NL"
	KnowledgeCategoryLanguageCodeNlDashNL string = "nl-NL"

	// KnowledgeCategoryLanguageCodeNlDashBE captures enum value "nl-BE"
	KnowledgeCategoryLanguageCodeNlDashBE string = "nl-BE"

	// KnowledgeCategoryLanguageCodeItDashIT captures enum value "it-IT"
	KnowledgeCategoryLanguageCodeItDashIT string = "it-IT"
)

// prop value enum
func (m *KnowledgeCategory) validateLanguageCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, knowledgeCategoryTypeLanguageCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KnowledgeCategory) validateLanguageCode(formats strfmt.Registry) error {
	if swag.IsZero(m.LanguageCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateLanguageCodeEnum("languageCode", "body", m.LanguageCode); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeCategory) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeCategory) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this knowledge category based on the context it is used
func (m *KnowledgeCategory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateModified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKnowledgeBase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLanguageCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeCategory) contextValidateDateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateCreated", "body", strfmt.DateTime(m.DateCreated)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeCategory) contextValidateDateModified(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateModified", "body", strfmt.DateTime(m.DateModified)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeCategory) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeCategory) contextValidateKnowledgeBase(ctx context.Context, formats strfmt.Registry) error {

	if m.KnowledgeBase != nil {
		if err := m.KnowledgeBase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("knowledgeBase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("knowledgeBase")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeCategory) contextValidateLanguageCode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "languageCode", "body", string(m.LanguageCode)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeCategory) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KnowledgeCategory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnowledgeCategory) UnmarshalBinary(b []byte) error {
	var res KnowledgeCategory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnowledgeDocumentSuggestionResultDocument knowledge document suggestion result document
//
// swagger:model KnowledgeDocumentSuggestionResultDocument
type KnowledgeDocumentSuggestionResultDocument struct {

	// The globally unique identifier for the document.
	// Required: true
	ID *string `json:"id"`

	// The knowledge base that the document belongs to.
	// Required: true
	KnowledgeBase *KnowledgeBaseReference `json:"knowledgeBase"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The title of the document.
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this knowledge document suggestion result document
func (m *KnowledgeDocumentSuggestionResultDocument) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKnowledgeBase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeDocumentSuggestionResultDocument) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeDocumentSuggestionResultDocument) validateKnowledgeBase(formats strfmt.Registry) error {

	if err := validate.Required("knowledgeBase", "body", m.KnowledgeBase); err != nil {
		return err
	}

	if m.KnowledgeBase != nil {
		if err := m.KnowledgeBase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("knowledgeBase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("knowledgeBase")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeDocumentSuggestionResultDocument) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeDocumentSuggestionResultDocument) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this knowledge document suggestion result document based on the context it is used
func (m *KnowledgeDocumentSuggestionResultDocument) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKnowledgeBase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeDocumentSuggestionResultDocument) contextValidateKnowledgeBase(ctx context.Context, formats strfmt.Registry) error {

	if m.KnowledgeBase != nil {
		if err := m.KnowledgeBase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("knowledgeBase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("knowledgeBase")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeDocumentSuggestionResultDocument) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KnowledgeDocumentSuggestionResultDocument) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnowledgeDocumentSuggestionResultDocument) UnmarshalBinary(b []byte) error {
	var res KnowledgeDocumentSuggestionResultDocument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

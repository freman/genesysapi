// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WidgetDeployment widget deployment
//
// swagger:model WidgetDeployment
type WidgetDeployment struct {

	// The list of domains that are approved to use this Deployment; the list will be added to CORS headers for ease of web use.
	AllowedDomains []string `json:"allowedDomains"`

	// When true, the customer members starting a chat must be authenticated by supplying their JWT to the create operation.
	AuthenticationRequired bool `json:"authenticationRequired"`

	// The client configuration options that should be made available to the clients of this Deployment.
	ClientConfig *WidgetClientConfig `json:"clientConfig,omitempty"`

	// The type of display widget for which this Deployment is configured, which controls the administrator settings shown.
	// Enum: [v1 v2 v1-http third-party]
	ClientType string `json:"clientType,omitempty"`

	// A human-readable description of this Deployment.
	Description string `json:"description,omitempty"`

	// When true, all create chat operations using this Deployment will be rejected.
	Disabled bool `json:"disabled"`

	// The URI of the Inbound Chat Flow to run when new chats are initiated under this Deployment.
	Flow *DomainEntityRef `json:"flow,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this widget deployment
func (m *WidgetDeployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WidgetDeployment) validateClientConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientConfig) { // not required
		return nil
	}

	if m.ClientConfig != nil {
		if err := m.ClientConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientConfig")
			}
			return err
		}
	}

	return nil
}

var widgetDeploymentTypeClientTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["v1","v2","v1-http","third-party"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		widgetDeploymentTypeClientTypePropEnum = append(widgetDeploymentTypeClientTypePropEnum, v)
	}
}

const (

	// WidgetDeploymentClientTypeV1 captures enum value "v1"
	WidgetDeploymentClientTypeV1 string = "v1"

	// WidgetDeploymentClientTypeV2 captures enum value "v2"
	WidgetDeploymentClientTypeV2 string = "v2"

	// WidgetDeploymentClientTypeV1DashHTTP captures enum value "v1-http"
	WidgetDeploymentClientTypeV1DashHTTP string = "v1-http"

	// WidgetDeploymentClientTypeThirdDashParty captures enum value "third-party"
	WidgetDeploymentClientTypeThirdDashParty string = "third-party"
)

// prop value enum
func (m *WidgetDeployment) validateClientTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, widgetDeploymentTypeClientTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WidgetDeployment) validateClientType(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientType) { // not required
		return nil
	}

	// value enum
	if err := m.validateClientTypeEnum("clientType", "body", m.ClientType); err != nil {
		return err
	}

	return nil
}

func (m *WidgetDeployment) validateFlow(formats strfmt.Registry) error {
	if swag.IsZero(m.Flow) { // not required
		return nil
	}

	if m.Flow != nil {
		if err := m.Flow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flow")
			}
			return err
		}
	}

	return nil
}

func (m *WidgetDeployment) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this widget deployment based on the context it is used
func (m *WidgetDeployment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClientConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WidgetDeployment) contextValidateClientConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientConfig != nil {
		if err := m.ClientConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientConfig")
			}
			return err
		}
	}

	return nil
}

func (m *WidgetDeployment) contextValidateFlow(ctx context.Context, formats strfmt.Registry) error {

	if m.Flow != nil {
		if err := m.Flow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flow")
			}
			return err
		}
	}

	return nil
}

func (m *WidgetDeployment) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *WidgetDeployment) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WidgetDeployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WidgetDeployment) UnmarshalBinary(b []byte) error {
	var res WidgetDeployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

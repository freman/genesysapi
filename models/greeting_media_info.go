// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GreetingMediaInfo greeting media info
//
// swagger:model GreetingMediaInfo
type GreetingMediaInfo struct {

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// media file Uri
	// Format: uri
	MediaFileURI strfmt.URI `json:"mediaFileUri,omitempty"`

	// media image Uri
	// Format: uri
	MediaImageURI strfmt.URI `json:"mediaImageUri,omitempty"`
}

// Validate validates this greeting media info
func (m *GreetingMediaInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMediaFileURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaImageURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GreetingMediaInfo) validateMediaFileURI(formats strfmt.Registry) error {

	if swag.IsZero(m.MediaFileURI) { // not required
		return nil
	}

	if err := validate.FormatOf("mediaFileUri", "body", "uri", m.MediaFileURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GreetingMediaInfo) validateMediaImageURI(formats strfmt.Registry) error {

	if swag.IsZero(m.MediaImageURI) { // not required
		return nil
	}

	if err := validate.FormatOf("mediaImageUri", "body", "uri", m.MediaImageURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GreetingMediaInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GreetingMediaInfo) UnmarshalBinary(b []byte) error {
	var res GreetingMediaInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

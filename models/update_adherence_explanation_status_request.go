// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateAdherenceExplanationStatusRequest update adherence explanation status request
//
// swagger:model UpdateAdherenceExplanationStatusRequest
type UpdateAdherenceExplanationStatusRequest struct {

	// The status of the adherence explanation
	// Enum: [Pending Approved Denied]
	Status string `json:"status,omitempty"`
}

// Validate validates this update adherence explanation status request
func (m *UpdateAdherenceExplanationStatusRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateAdherenceExplanationStatusRequestTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Approved","Denied"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateAdherenceExplanationStatusRequestTypeStatusPropEnum = append(updateAdherenceExplanationStatusRequestTypeStatusPropEnum, v)
	}
}

const (

	// UpdateAdherenceExplanationStatusRequestStatusPending captures enum value "Pending"
	UpdateAdherenceExplanationStatusRequestStatusPending string = "Pending"

	// UpdateAdherenceExplanationStatusRequestStatusApproved captures enum value "Approved"
	UpdateAdherenceExplanationStatusRequestStatusApproved string = "Approved"

	// UpdateAdherenceExplanationStatusRequestStatusDenied captures enum value "Denied"
	UpdateAdherenceExplanationStatusRequestStatusDenied string = "Denied"
)

// prop value enum
func (m *UpdateAdherenceExplanationStatusRequest) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateAdherenceExplanationStatusRequestTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateAdherenceExplanationStatusRequest) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update adherence explanation status request based on context it is used
func (m *UpdateAdherenceExplanationStatusRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateAdherenceExplanationStatusRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateAdherenceExplanationStatusRequest) UnmarshalBinary(b []byte) error {
	var res UpdateAdherenceExplanationStatusRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrunkMetricsRegisters trunk metrics registers
//
// swagger:model TrunkMetricsRegisters
type TrunkMetricsRegisters struct {

	// error info
	ErrorInfo *TrunkErrorInfo `json:"errorInfo,omitempty"`

	// Server proxy address that this registers array element represents.
	ProxyAddress string `json:"proxyAddress,omitempty"`

	// True if last REGISTER message had positive response; false if error response or no response.
	RegisterState bool `json:"registerState,omitempty"`

	// ISO 8601 format UTC absolute date & time of the last change of the register state.
	// Format: date-time
	RegisterStateTime strfmt.DateTime `json:"registerStateTime,omitempty"`
}

// Validate validates this trunk metrics registers
func (m *TrunkMetricsRegisters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisterStateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrunkMetricsRegisters) validateErrorInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorInfo) { // not required
		return nil
	}

	if m.ErrorInfo != nil {
		if err := m.ErrorInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInfo")
			}
			return err
		}
	}

	return nil
}

func (m *TrunkMetricsRegisters) validateRegisterStateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisterStateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("registerStateTime", "body", "date-time", m.RegisterStateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrunkMetricsRegisters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrunkMetricsRegisters) UnmarshalBinary(b []byte) error {
	var res TrunkMetricsRegisters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FlowAggregationView flow aggregation view
//
// swagger:model FlowAggregationView
type FlowAggregationView struct {

	// Type of view you wish to create
	// Required: true
	// Enum: [rangeBound]
	Function *string `json:"function"`

	// A unique name for this view. Must be distinct from other views and built-in metric names.
	// Required: true
	Name *string `json:"name"`

	// Range of numbers for slicing up data
	Range *AggregationRange `json:"range,omitempty"`

	// Target metric name
	// Required: true
	// Enum: [nFlow nFlowMilestone nFlowOutcome nFlowOutcomeFailed oFlow oFlowMilestone tFlow tFlowDisconnect tFlowExit tFlowOutcome]
	Target *string `json:"target"`
}

// Validate validates this flow aggregation view
func (m *FlowAggregationView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var flowAggregationViewTypeFunctionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["rangeBound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		flowAggregationViewTypeFunctionPropEnum = append(flowAggregationViewTypeFunctionPropEnum, v)
	}
}

const (

	// FlowAggregationViewFunctionRangeBound captures enum value "rangeBound"
	FlowAggregationViewFunctionRangeBound string = "rangeBound"
)

// prop value enum
func (m *FlowAggregationView) validateFunctionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, flowAggregationViewTypeFunctionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FlowAggregationView) validateFunction(formats strfmt.Registry) error {

	if err := validate.Required("function", "body", m.Function); err != nil {
		return err
	}

	// value enum
	if err := m.validateFunctionEnum("function", "body", *m.Function); err != nil {
		return err
	}

	return nil
}

func (m *FlowAggregationView) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FlowAggregationView) validateRange(formats strfmt.Registry) error {

	if swag.IsZero(m.Range) { // not required
		return nil
	}

	if m.Range != nil {
		if err := m.Range.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

var flowAggregationViewTypeTargetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nFlow","nFlowMilestone","nFlowOutcome","nFlowOutcomeFailed","oFlow","oFlowMilestone","tFlow","tFlowDisconnect","tFlowExit","tFlowOutcome"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		flowAggregationViewTypeTargetPropEnum = append(flowAggregationViewTypeTargetPropEnum, v)
	}
}

const (

	// FlowAggregationViewTargetNFlow captures enum value "nFlow"
	FlowAggregationViewTargetNFlow string = "nFlow"

	// FlowAggregationViewTargetNFlowMilestone captures enum value "nFlowMilestone"
	FlowAggregationViewTargetNFlowMilestone string = "nFlowMilestone"

	// FlowAggregationViewTargetNFlowOutcome captures enum value "nFlowOutcome"
	FlowAggregationViewTargetNFlowOutcome string = "nFlowOutcome"

	// FlowAggregationViewTargetNFlowOutcomeFailed captures enum value "nFlowOutcomeFailed"
	FlowAggregationViewTargetNFlowOutcomeFailed string = "nFlowOutcomeFailed"

	// FlowAggregationViewTargetOFlow captures enum value "oFlow"
	FlowAggregationViewTargetOFlow string = "oFlow"

	// FlowAggregationViewTargetOFlowMilestone captures enum value "oFlowMilestone"
	FlowAggregationViewTargetOFlowMilestone string = "oFlowMilestone"

	// FlowAggregationViewTargetTFlow captures enum value "tFlow"
	FlowAggregationViewTargetTFlow string = "tFlow"

	// FlowAggregationViewTargetTFlowDisconnect captures enum value "tFlowDisconnect"
	FlowAggregationViewTargetTFlowDisconnect string = "tFlowDisconnect"

	// FlowAggregationViewTargetTFlowExit captures enum value "tFlowExit"
	FlowAggregationViewTargetTFlowExit string = "tFlowExit"

	// FlowAggregationViewTargetTFlowOutcome captures enum value "tFlowOutcome"
	FlowAggregationViewTargetTFlowOutcome string = "tFlowOutcome"
)

// prop value enum
func (m *FlowAggregationView) validateTargetEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, flowAggregationViewTypeTargetPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FlowAggregationView) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetEnum("target", "body", *m.Target); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FlowAggregationView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlowAggregationView) UnmarshalBinary(b []byte) error {
	var res FlowAggregationView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

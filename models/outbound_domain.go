// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OutboundDomain outbound domain
//
// swagger:model OutboundDomain
type OutboundDomain struct {

	// CNAME registration Status
	CnameVerificationResult *VerificationResult `json:"cnameVerificationResult,omitempty"`

	// DKIM registration Status
	DkimVerificationResult *VerificationResult `json:"dkimVerificationResult,omitempty"`

	// Unique Id of the domain such as: example.com
	// Required: true
	ID *string `json:"id"`

	// name
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Sender Type
	// Enum: [Unknown EmailDomain MockEmailDomain]
	SenderType string `json:"senderType,omitempty"`
}

// Validate validates this outbound domain
func (m *OutboundDomain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCnameVerificationResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDkimVerificationResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSenderType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutboundDomain) validateCnameVerificationResult(formats strfmt.Registry) error {
	if swag.IsZero(m.CnameVerificationResult) { // not required
		return nil
	}

	if m.CnameVerificationResult != nil {
		if err := m.CnameVerificationResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cnameVerificationResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cnameVerificationResult")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundDomain) validateDkimVerificationResult(formats strfmt.Registry) error {
	if swag.IsZero(m.DkimVerificationResult) { // not required
		return nil
	}

	if m.DkimVerificationResult != nil {
		if err := m.DkimVerificationResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dkimVerificationResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dkimVerificationResult")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundDomain) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *OutboundDomain) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var outboundDomainTypeSenderTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","EmailDomain","MockEmailDomain"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		outboundDomainTypeSenderTypePropEnum = append(outboundDomainTypeSenderTypePropEnum, v)
	}
}

const (

	// OutboundDomainSenderTypeUnknown captures enum value "Unknown"
	OutboundDomainSenderTypeUnknown string = "Unknown"

	// OutboundDomainSenderTypeEmailDomain captures enum value "EmailDomain"
	OutboundDomainSenderTypeEmailDomain string = "EmailDomain"

	// OutboundDomainSenderTypeMockEmailDomain captures enum value "MockEmailDomain"
	OutboundDomainSenderTypeMockEmailDomain string = "MockEmailDomain"
)

// prop value enum
func (m *OutboundDomain) validateSenderTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, outboundDomainTypeSenderTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OutboundDomain) validateSenderType(formats strfmt.Registry) error {
	if swag.IsZero(m.SenderType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSenderTypeEnum("senderType", "body", m.SenderType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this outbound domain based on the context it is used
func (m *OutboundDomain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCnameVerificationResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDkimVerificationResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutboundDomain) contextValidateCnameVerificationResult(ctx context.Context, formats strfmt.Registry) error {

	if m.CnameVerificationResult != nil {
		if err := m.CnameVerificationResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cnameVerificationResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cnameVerificationResult")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundDomain) contextValidateDkimVerificationResult(ctx context.Context, formats strfmt.Registry) error {

	if m.DkimVerificationResult != nil {
		if err := m.DkimVerificationResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dkimVerificationResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dkimVerificationResult")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundDomain) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OutboundDomain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OutboundDomain) UnmarshalBinary(b []byte) error {
	var res OutboundDomain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

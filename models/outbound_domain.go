// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OutboundDomain outbound domain
//
// swagger:model OutboundDomain
type OutboundDomain struct {

	// CNAME registration Status
	CnameVerificationResult *VerificationResult `json:"cnameVerificationResult,omitempty"`

	// DKIM registration Status
	DkimVerificationResult *VerificationResult `json:"dkimVerificationResult,omitempty"`

	// The email that is used to display sender informations
	FromEmail *EmailAddress `json:"fromEmail,omitempty"`

	// Unique Id of the domain such as: example.com
	// Required: true
	ID *string `json:"id"`

	// name
	Name string `json:"name,omitempty"`

	// The email that is used if replies are expected
	ReplyToEmail *EmailAddress `json:"replyToEmail,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this outbound domain
func (m *OutboundDomain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCnameVerificationResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDkimVerificationResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplyToEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutboundDomain) validateCnameVerificationResult(formats strfmt.Registry) error {

	if swag.IsZero(m.CnameVerificationResult) { // not required
		return nil
	}

	if m.CnameVerificationResult != nil {
		if err := m.CnameVerificationResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cnameVerificationResult")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundDomain) validateDkimVerificationResult(formats strfmt.Registry) error {

	if swag.IsZero(m.DkimVerificationResult) { // not required
		return nil
	}

	if m.DkimVerificationResult != nil {
		if err := m.DkimVerificationResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dkimVerificationResult")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundDomain) validateFromEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.FromEmail) { // not required
		return nil
	}

	if m.FromEmail != nil {
		if err := m.FromEmail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fromEmail")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundDomain) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *OutboundDomain) validateReplyToEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplyToEmail) { // not required
		return nil
	}

	if m.ReplyToEmail != nil {
		if err := m.ReplyToEmail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replyToEmail")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundDomain) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OutboundDomain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OutboundDomain) UnmarshalBinary(b []byte) error {
	var res OutboundDomain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WfmHistoricalAdherenceBulkUserResult wfm historical adherence bulk user result
//
// swagger:model WfmHistoricalAdherenceBulkUserResult
type WfmHistoricalAdherenceBulkUserResult struct {

	// Adherence percentage for this user, in the scale of 0 - 100
	AdherencePercentage float64 `json:"adherencePercentage,omitempty"`

	// Conformance percentage for this user, in the scale of 0 - 100. Conformance percentage can be greater than 100 when the actual on queue time is greater than the scheduled on queue time for the same period.
	ConformancePercentage float64 `json:"conformancePercentage,omitempty"`

	// Adherence and conformance metrics for days in query range
	DayMetrics []*WfmHistoricalAdherenceBulkUserDayMetrics `json:"dayMetrics"`

	// List of adherence exceptions for this user
	ExceptionInfo []*HistoricalAdherenceExceptionInfo `json:"exceptionInfo"`

	// The impact of the current adherence state for this user
	// Enum: [Positive Negative Neutral Unknown]
	Impact string `json:"impact,omitempty"`

	// The ID of the user for whom the adherence is queried
	UserID string `json:"userId,omitempty"`
}

// Validate validates this wfm historical adherence bulk user result
func (m *WfmHistoricalAdherenceBulkUserResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDayMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExceptionInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpact(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WfmHistoricalAdherenceBulkUserResult) validateDayMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.DayMetrics) { // not required
		return nil
	}

	for i := 0; i < len(m.DayMetrics); i++ {
		if swag.IsZero(m.DayMetrics[i]) { // not required
			continue
		}

		if m.DayMetrics[i] != nil {
			if err := m.DayMetrics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dayMetrics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dayMetrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WfmHistoricalAdherenceBulkUserResult) validateExceptionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ExceptionInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.ExceptionInfo); i++ {
		if swag.IsZero(m.ExceptionInfo[i]) { // not required
			continue
		}

		if m.ExceptionInfo[i] != nil {
			if err := m.ExceptionInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exceptionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exceptionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var wfmHistoricalAdherenceBulkUserResultTypeImpactPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Positive","Negative","Neutral","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		wfmHistoricalAdherenceBulkUserResultTypeImpactPropEnum = append(wfmHistoricalAdherenceBulkUserResultTypeImpactPropEnum, v)
	}
}

const (

	// WfmHistoricalAdherenceBulkUserResultImpactPositive captures enum value "Positive"
	WfmHistoricalAdherenceBulkUserResultImpactPositive string = "Positive"

	// WfmHistoricalAdherenceBulkUserResultImpactNegative captures enum value "Negative"
	WfmHistoricalAdherenceBulkUserResultImpactNegative string = "Negative"

	// WfmHistoricalAdherenceBulkUserResultImpactNeutral captures enum value "Neutral"
	WfmHistoricalAdherenceBulkUserResultImpactNeutral string = "Neutral"

	// WfmHistoricalAdherenceBulkUserResultImpactUnknown captures enum value "Unknown"
	WfmHistoricalAdherenceBulkUserResultImpactUnknown string = "Unknown"
)

// prop value enum
func (m *WfmHistoricalAdherenceBulkUserResult) validateImpactEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, wfmHistoricalAdherenceBulkUserResultTypeImpactPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WfmHistoricalAdherenceBulkUserResult) validateImpact(formats strfmt.Registry) error {
	if swag.IsZero(m.Impact) { // not required
		return nil
	}

	// value enum
	if err := m.validateImpactEnum("impact", "body", m.Impact); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this wfm historical adherence bulk user result based on the context it is used
func (m *WfmHistoricalAdherenceBulkUserResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDayMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExceptionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WfmHistoricalAdherenceBulkUserResult) contextValidateDayMetrics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DayMetrics); i++ {

		if m.DayMetrics[i] != nil {
			if err := m.DayMetrics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dayMetrics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dayMetrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WfmHistoricalAdherenceBulkUserResult) contextValidateExceptionInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExceptionInfo); i++ {

		if m.ExceptionInfo[i] != nil {
			if err := m.ExceptionInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exceptionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exceptionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WfmHistoricalAdherenceBulkUserResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WfmHistoricalAdherenceBulkUserResult) UnmarshalBinary(b []byte) error {
	var res WfmHistoricalAdherenceBulkUserResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

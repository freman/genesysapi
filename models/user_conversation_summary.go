// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserConversationSummary user conversation summary
//
// swagger:model UserConversationSummary
type UserConversationSummary struct {

	// call
	Call *MediaSummary `json:"call,omitempty"`

	// callback
	Callback *MediaSummary `json:"callback,omitempty"`

	// chat
	Chat *MediaSummary `json:"chat,omitempty"`

	// email
	Email *MediaSummary `json:"email,omitempty"`

	// message
	Message *MediaSummary `json:"message,omitempty"`

	// social expression
	SocialExpression *MediaSummary `json:"socialExpression,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`

	// video
	Video *MediaSummary `json:"video,omitempty"`
}

// Validate validates this user conversation summary
func (m *UserConversationSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCall(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallback(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSocialExpression(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserConversationSummary) validateCall(formats strfmt.Registry) error {
	if swag.IsZero(m.Call) { // not required
		return nil
	}

	if m.Call != nil {
		if err := m.Call.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("call")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("call")
			}
			return err
		}
	}

	return nil
}

func (m *UserConversationSummary) validateCallback(formats strfmt.Registry) error {
	if swag.IsZero(m.Callback) { // not required
		return nil
	}

	if m.Callback != nil {
		if err := m.Callback.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("callback")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("callback")
			}
			return err
		}
	}

	return nil
}

func (m *UserConversationSummary) validateChat(formats strfmt.Registry) error {
	if swag.IsZero(m.Chat) { // not required
		return nil
	}

	if m.Chat != nil {
		if err := m.Chat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chat")
			}
			return err
		}
	}

	return nil
}

func (m *UserConversationSummary) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if m.Email != nil {
		if err := m.Email.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email")
			}
			return err
		}
	}

	return nil
}

func (m *UserConversationSummary) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.Message) { // not required
		return nil
	}

	if m.Message != nil {
		if err := m.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("message")
			}
			return err
		}
	}

	return nil
}

func (m *UserConversationSummary) validateSocialExpression(formats strfmt.Registry) error {
	if swag.IsZero(m.SocialExpression) { // not required
		return nil
	}

	if m.SocialExpression != nil {
		if err := m.SocialExpression.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("socialExpression")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("socialExpression")
			}
			return err
		}
	}

	return nil
}

func (m *UserConversationSummary) validateVideo(formats strfmt.Registry) error {
	if swag.IsZero(m.Video) { // not required
		return nil
	}

	if m.Video != nil {
		if err := m.Video.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("video")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("video")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user conversation summary based on the context it is used
func (m *UserConversationSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCall(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCallback(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSocialExpression(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVideo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserConversationSummary) contextValidateCall(ctx context.Context, formats strfmt.Registry) error {

	if m.Call != nil {
		if err := m.Call.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("call")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("call")
			}
			return err
		}
	}

	return nil
}

func (m *UserConversationSummary) contextValidateCallback(ctx context.Context, formats strfmt.Registry) error {

	if m.Callback != nil {
		if err := m.Callback.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("callback")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("callback")
			}
			return err
		}
	}

	return nil
}

func (m *UserConversationSummary) contextValidateChat(ctx context.Context, formats strfmt.Registry) error {

	if m.Chat != nil {
		if err := m.Chat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chat")
			}
			return err
		}
	}

	return nil
}

func (m *UserConversationSummary) contextValidateEmail(ctx context.Context, formats strfmt.Registry) error {

	if m.Email != nil {
		if err := m.Email.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email")
			}
			return err
		}
	}

	return nil
}

func (m *UserConversationSummary) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if m.Message != nil {
		if err := m.Message.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("message")
			}
			return err
		}
	}

	return nil
}

func (m *UserConversationSummary) contextValidateSocialExpression(ctx context.Context, formats strfmt.Registry) error {

	if m.SocialExpression != nil {
		if err := m.SocialExpression.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("socialExpression")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("socialExpression")
			}
			return err
		}
	}

	return nil
}

func (m *UserConversationSummary) contextValidateVideo(ctx context.Context, formats strfmt.Registry) error {

	if m.Video != nil {
		if err := m.Video.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("video")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("video")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserConversationSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserConversationSummary) UnmarshalBinary(b []byte) error {
	var res UserConversationSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

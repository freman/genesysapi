// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenMessagingChannel Channel-specific information that describes the message and the message channel/provider.
//
// swagger:model OpenMessagingChannel
type OpenMessagingChannel struct {

	// Information about the recipient the message is received from.
	// Required: true
	From *OpenMessagingFromRecipient `json:"from"`

	// The Messaging Platform integration ID.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Unique provider ID of the message such as a Facebook message ID.
	// Required: true
	MessageID *string `json:"messageId"`

	// Information about the channel.
	Metadata ChannelMetadata `json:"metadata,omitempty"`

	// The provider type.
	// Read Only: true
	// Enum: [Open]
	Platform string `json:"platform,omitempty"`

	// Original time of the event. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Required: true
	// Format: date-time
	Time *strfmt.DateTime `json:"time"`

	// Information about the recipient the message is sent to.
	// Required: true
	To *OpenMessagingToRecipient `json:"to"`

	// Specifies if this message is part of a private or public conversation.
	// Enum: [Private]
	Type string `json:"type,omitempty"`
}

// Validate validates this open messaging channel
func (m *OpenMessagingChannel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenMessagingChannel) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	if m.From != nil {
		if err := m.From.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *OpenMessagingChannel) validateMessageID(formats strfmt.Registry) error {

	if err := validate.Required("messageId", "body", m.MessageID); err != nil {
		return err
	}

	return nil
}

var openMessagingChannelTypePlatformPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Open"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openMessagingChannelTypePlatformPropEnum = append(openMessagingChannelTypePlatformPropEnum, v)
	}
}

const (

	// OpenMessagingChannelPlatformOpen captures enum value "Open"
	OpenMessagingChannelPlatformOpen string = "Open"
)

// prop value enum
func (m *OpenMessagingChannel) validatePlatformEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, openMessagingChannelTypePlatformPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OpenMessagingChannel) validatePlatform(formats strfmt.Registry) error {

	if swag.IsZero(m.Platform) { // not required
		return nil
	}

	// value enum
	if err := m.validatePlatformEnum("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *OpenMessagingChannel) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenMessagingChannel) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	if m.To != nil {
		if err := m.To.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("to")
			}
			return err
		}
	}

	return nil
}

var openMessagingChannelTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Private"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openMessagingChannelTypeTypePropEnum = append(openMessagingChannelTypeTypePropEnum, v)
	}
}

const (

	// OpenMessagingChannelTypePrivate captures enum value "Private"
	OpenMessagingChannelTypePrivate string = "Private"
)

// prop value enum
func (m *OpenMessagingChannel) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, openMessagingChannelTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OpenMessagingChannel) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenMessagingChannel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenMessagingChannel) UnmarshalBinary(b []byte) error {
	var res OpenMessagingChannel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkPlanConstraintConflictMessage work plan constraint conflict message
//
// swagger:model WorkPlanConstraintConflictMessage
type WorkPlanConstraintConflictMessage struct {

	// The arguments to the type of the message that can help clients resolve validation issues
	Arguments []*WorkPlanValidationMessageArgument `json:"arguments"`

	// Type of constraint conflict that can be resolved by clients in order to generate agent schedules
	// Enum: [UnknownFix WithPotentialFixes]
	Type string `json:"type,omitempty"`
}

// Validate validates this work plan constraint conflict message
func (m *WorkPlanConstraintConflictMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArguments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkPlanConstraintConflictMessage) validateArguments(formats strfmt.Registry) error {
	if swag.IsZero(m.Arguments) { // not required
		return nil
	}

	for i := 0; i < len(m.Arguments); i++ {
		if swag.IsZero(m.Arguments[i]) { // not required
			continue
		}

		if m.Arguments[i] != nil {
			if err := m.Arguments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arguments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("arguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var workPlanConstraintConflictMessageTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UnknownFix","WithPotentialFixes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workPlanConstraintConflictMessageTypeTypePropEnum = append(workPlanConstraintConflictMessageTypeTypePropEnum, v)
	}
}

const (

	// WorkPlanConstraintConflictMessageTypeUnknownFix captures enum value "UnknownFix"
	WorkPlanConstraintConflictMessageTypeUnknownFix string = "UnknownFix"

	// WorkPlanConstraintConflictMessageTypeWithPotentialFixes captures enum value "WithPotentialFixes"
	WorkPlanConstraintConflictMessageTypeWithPotentialFixes string = "WithPotentialFixes"
)

// prop value enum
func (m *WorkPlanConstraintConflictMessage) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workPlanConstraintConflictMessageTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkPlanConstraintConflictMessage) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this work plan constraint conflict message based on the context it is used
func (m *WorkPlanConstraintConflictMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArguments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkPlanConstraintConflictMessage) contextValidateArguments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Arguments); i++ {

		if m.Arguments[i] != nil {
			if err := m.Arguments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arguments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("arguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkPlanConstraintConflictMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkPlanConstraintConflictMessage) UnmarshalBinary(b []byte) error {
	var res WorkPlanConstraintConflictMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

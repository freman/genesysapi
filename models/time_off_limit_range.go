// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeOffLimitRange A single range filled with time off limit interval values
//
// swagger:model TimeOffLimitRange
type TimeOffLimitRange struct {

	// Granularity choice for the time off limit
	// Required: true
	// Enum: [Daily]
	Granularity *string `json:"granularity"`

	// The list of time off limit values in minutes per granularity interval. If 'null' is specified, then interval specific value is cleared. Such interval will have 'defaultLimitMinutes' value
	// Required: true
	LimitMinutesPerInterval []int32 `json:"limitMinutesPerInterval"`

	// Start date of the range. The end date is determined by 'granularity' and the size of 'limitMinutesPerInterval'. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Required: true
	// Format: date
	StartDate *strfmt.Date `json:"startDate"`
}

// Validate validates this time off limit range
func (m *TimeOffLimitRange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGranularity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimitMinutesPerInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var timeOffLimitRangeTypeGranularityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Daily"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeOffLimitRangeTypeGranularityPropEnum = append(timeOffLimitRangeTypeGranularityPropEnum, v)
	}
}

const (

	// TimeOffLimitRangeGranularityDaily captures enum value "Daily"
	TimeOffLimitRangeGranularityDaily string = "Daily"
)

// prop value enum
func (m *TimeOffLimitRange) validateGranularityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, timeOffLimitRangeTypeGranularityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TimeOffLimitRange) validateGranularity(formats strfmt.Registry) error {

	if err := validate.Required("granularity", "body", m.Granularity); err != nil {
		return err
	}

	// value enum
	if err := m.validateGranularityEnum("granularity", "body", *m.Granularity); err != nil {
		return err
	}

	return nil
}

func (m *TimeOffLimitRange) validateLimitMinutesPerInterval(formats strfmt.Registry) error {

	if err := validate.Required("limitMinutesPerInterval", "body", m.LimitMinutesPerInterval); err != nil {
		return err
	}

	return nil
}

func (m *TimeOffLimitRange) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	if err := validate.FormatOf("startDate", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeOffLimitRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeOffLimitRange) UnmarshalBinary(b []byte) error {
	var res TimeOffLimitRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

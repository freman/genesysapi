// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserAggregateQueryPredicate user aggregate query predicate
//
// swagger:model UserAggregateQueryPredicate
type UserAggregateQueryPredicate struct {

	// Left hand side for dimension predicates
	// Enum: [userId]
	Dimension string `json:"dimension,omitempty"`

	// Optional operator, default is matches
	// Enum: [matches exists notExists]
	Operator string `json:"operator,omitempty"`

	// Right hand side for dimension predicates
	Range *NumericRange `json:"range,omitempty"`

	// Optional type, can usually be inferred
	// Enum: [dimension property metric]
	Type string `json:"type,omitempty"`

	// Right hand side for dimension predicates
	Value string `json:"value,omitempty"`
}

// Validate validates this user aggregate query predicate
func (m *UserAggregateQueryPredicate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userAggregateQueryPredicateTypeDimensionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["userId"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userAggregateQueryPredicateTypeDimensionPropEnum = append(userAggregateQueryPredicateTypeDimensionPropEnum, v)
	}
}

const (

	// UserAggregateQueryPredicateDimensionUserID captures enum value "userId"
	UserAggregateQueryPredicateDimensionUserID string = "userId"
)

// prop value enum
func (m *UserAggregateQueryPredicate) validateDimensionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userAggregateQueryPredicateTypeDimensionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserAggregateQueryPredicate) validateDimension(formats strfmt.Registry) error {

	if swag.IsZero(m.Dimension) { // not required
		return nil
	}

	// value enum
	if err := m.validateDimensionEnum("dimension", "body", m.Dimension); err != nil {
		return err
	}

	return nil
}

var userAggregateQueryPredicateTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["matches","exists","notExists"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userAggregateQueryPredicateTypeOperatorPropEnum = append(userAggregateQueryPredicateTypeOperatorPropEnum, v)
	}
}

const (

	// UserAggregateQueryPredicateOperatorMatches captures enum value "matches"
	UserAggregateQueryPredicateOperatorMatches string = "matches"

	// UserAggregateQueryPredicateOperatorExists captures enum value "exists"
	UserAggregateQueryPredicateOperatorExists string = "exists"

	// UserAggregateQueryPredicateOperatorNotExists captures enum value "notExists"
	UserAggregateQueryPredicateOperatorNotExists string = "notExists"
)

// prop value enum
func (m *UserAggregateQueryPredicate) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userAggregateQueryPredicateTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserAggregateQueryPredicate) validateOperator(formats strfmt.Registry) error {

	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *UserAggregateQueryPredicate) validateRange(formats strfmt.Registry) error {

	if swag.IsZero(m.Range) { // not required
		return nil
	}

	if m.Range != nil {
		if err := m.Range.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

var userAggregateQueryPredicateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dimension","property","metric"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userAggregateQueryPredicateTypeTypePropEnum = append(userAggregateQueryPredicateTypeTypePropEnum, v)
	}
}

const (

	// UserAggregateQueryPredicateTypeDimension captures enum value "dimension"
	UserAggregateQueryPredicateTypeDimension string = "dimension"

	// UserAggregateQueryPredicateTypeProperty captures enum value "property"
	UserAggregateQueryPredicateTypeProperty string = "property"

	// UserAggregateQueryPredicateTypeMetric captures enum value "metric"
	UserAggregateQueryPredicateTypeMetric string = "metric"
)

// prop value enum
func (m *UserAggregateQueryPredicate) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userAggregateQueryPredicateTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserAggregateQueryPredicate) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserAggregateQueryPredicate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAggregateQueryPredicate) UnmarshalBinary(b []byte) error {
	var res UserAggregateQueryPredicate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostTextResponse post text response
//
// swagger:model PostTextResponse
type PostTextResponse struct {

	// Raw data response from AWS (if called)
	AmazonLex map[string]interface{} `json:"amazonLex,omitempty"`

	// The optional ID specified in the request
	BotCorrelationID string `json:"botCorrelationId,omitempty"`

	// The state of the bot after completion of the request
	// Required: true
	// Enum: [Complete Failed MoreData]
	BotState *string `json:"botState"`

	// Raw data response from Genesys' Dialogengine (if called)
	GenesysDialogEngine map[string]interface{} `json:"genesysDialogEngine,omitempty"`

	// Raw data response from Google Dialogflow (if called)
	GoogleDialogFlow map[string]interface{} `json:"googleDialogFlow,omitempty"`

	// The name of the intent the bot is either processing or has processed, this will be blank if no intent could be detected.
	IntentName string `json:"intentName,omitempty"`

	// The list of messages to respond with, if any
	ReplyMessages []*PostTextMessage `json:"replyMessages"`

	// Data parameters detected and filled by the bot.
	Slots map[string]string `json:"slots,omitempty"`
}

// Validate validates this post text response
func (m *PostTextResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBotState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplyMessages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postTextResponseTypeBotStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Complete","Failed","MoreData"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postTextResponseTypeBotStatePropEnum = append(postTextResponseTypeBotStatePropEnum, v)
	}
}

const (

	// PostTextResponseBotStateComplete captures enum value "Complete"
	PostTextResponseBotStateComplete string = "Complete"

	// PostTextResponseBotStateFailed captures enum value "Failed"
	PostTextResponseBotStateFailed string = "Failed"

	// PostTextResponseBotStateMoreData captures enum value "MoreData"
	PostTextResponseBotStateMoreData string = "MoreData"
)

// prop value enum
func (m *PostTextResponse) validateBotStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postTextResponseTypeBotStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PostTextResponse) validateBotState(formats strfmt.Registry) error {

	if err := validate.Required("botState", "body", m.BotState); err != nil {
		return err
	}

	// value enum
	if err := m.validateBotStateEnum("botState", "body", *m.BotState); err != nil {
		return err
	}

	return nil
}

func (m *PostTextResponse) validateReplyMessages(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplyMessages) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplyMessages); i++ {
		if swag.IsZero(m.ReplyMessages[i]) { // not required
			continue
		}

		if m.ReplyMessages[i] != nil {
			if err := m.ReplyMessages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replyMessages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostTextResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostTextResponse) UnmarshalBinary(b []byte) error {
	var res PostTextResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

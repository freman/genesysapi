// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Assignment assignment
//
// swagger:model Assignment
type Assignment struct {

	// The list of users successfully assigned to the custom performance profile
	AssignedMembers []*UserReference `json:"assignedMembers"`

	// The list of users failed assignment or removal for the custom performance profile
	AssignmentErrors []*AssignmentError `json:"assignmentErrors"`

	// The list of users successfully removed from the custom performance profile
	RemovedMembers []*UserReference `json:"removedMembers"`
}

// Validate validates this assignment
func (m *Assignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignedMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignmentErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemovedMembers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Assignment) validateAssignedMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.AssignedMembers) { // not required
		return nil
	}

	for i := 0; i < len(m.AssignedMembers); i++ {
		if swag.IsZero(m.AssignedMembers[i]) { // not required
			continue
		}

		if m.AssignedMembers[i] != nil {
			if err := m.AssignedMembers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignedMembers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Assignment) validateAssignmentErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.AssignmentErrors) { // not required
		return nil
	}

	for i := 0; i < len(m.AssignmentErrors); i++ {
		if swag.IsZero(m.AssignmentErrors[i]) { // not required
			continue
		}

		if m.AssignmentErrors[i] != nil {
			if err := m.AssignmentErrors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignmentErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Assignment) validateRemovedMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.RemovedMembers) { // not required
		return nil
	}

	for i := 0; i < len(m.RemovedMembers); i++ {
		if swag.IsZero(m.RemovedMembers[i]) { // not required
			continue
		}

		if m.RemovedMembers[i] != nil {
			if err := m.RemovedMembers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("removedMembers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Assignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Assignment) UnmarshalBinary(b []byte) error {
	var res Assignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

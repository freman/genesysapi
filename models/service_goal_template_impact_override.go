// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceGoalTemplateImpactOverride service goal template impact override
//
// swagger:model ServiceGoalTemplateImpactOverride
type ServiceGoalTemplateImpactOverride struct {

	// Whether service goal overrides are enabled for this service goal template
	// Required: true
	Enabled *bool `json:"enabled"`

	// Settings controlling max percent increase and decrease of service goals for this service goal template
	// Required: true
	Impact *WfmServiceGoalImpactSettings `json:"impact"`
}

// Validate validates this service goal template impact override
func (m *ServiceGoalTemplateImpactOverride) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpact(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceGoalTemplateImpactOverride) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *ServiceGoalTemplateImpactOverride) validateImpact(formats strfmt.Registry) error {

	if err := validate.Required("impact", "body", m.Impact); err != nil {
		return err
	}

	if m.Impact != nil {
		if err := m.Impact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("impact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("impact")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service goal template impact override based on the context it is used
func (m *ServiceGoalTemplateImpactOverride) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImpact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceGoalTemplateImpactOverride) contextValidateImpact(ctx context.Context, formats strfmt.Registry) error {

	if m.Impact != nil {
		if err := m.Impact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("impact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("impact")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceGoalTemplateImpactOverride) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceGoalTemplateImpactOverride) UnmarshalBinary(b []byte) error {
	var res ServiceGoalTemplateImpactOverride
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

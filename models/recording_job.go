// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecordingJob recording job
//
// swagger:model RecordingJob
type RecordingJob struct {

	// Date when the job was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Error occurred during the job execution
	// Read Only: true
	ErrorMessage string `json:"errorMessage,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Progress in percentage based on the number of recordings
	// Read Only: true
	PercentProgress int32 `json:"percentProgress,omitempty"`

	// Original query of the job.
	// Read Only: true
	RecordingJobsQuery *RecordingJobsQuery `json:"recordingJobsQuery,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The current state of the job.
	// Required: true
	// Enum: [FULFILLED PENDING READY PROCESSING CANCELLED FAILED]
	State *string `json:"state"`

	// Total number of conversations affected.
	// Read Only: true
	TotalConversations int32 `json:"totalConversations,omitempty"`

	// Total number of recordings have been processed.
	// Read Only: true
	TotalProcessedRecordings int32 `json:"totalProcessedRecordings,omitempty"`

	// Total number of recordings affected.
	// Read Only: true
	TotalRecordings int32 `json:"totalRecordings,omitempty"`

	// Details of the user created the job
	// Read Only: true
	User *AddressableEntityRef `json:"user,omitempty"`
}

// Validate validates this recording job
func (m *RecordingJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordingJobsQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecordingJob) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RecordingJob) validateRecordingJobsQuery(formats strfmt.Registry) error {

	if swag.IsZero(m.RecordingJobsQuery) { // not required
		return nil
	}

	if m.RecordingJobsQuery != nil {
		if err := m.RecordingJobsQuery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recordingJobsQuery")
			}
			return err
		}
	}

	return nil
}

func (m *RecordingJob) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var recordingJobTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FULFILLED","PENDING","READY","PROCESSING","CANCELLED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recordingJobTypeStatePropEnum = append(recordingJobTypeStatePropEnum, v)
	}
}

const (

	// RecordingJobStateFULFILLED captures enum value "FULFILLED"
	RecordingJobStateFULFILLED string = "FULFILLED"

	// RecordingJobStatePENDING captures enum value "PENDING"
	RecordingJobStatePENDING string = "PENDING"

	// RecordingJobStateREADY captures enum value "READY"
	RecordingJobStateREADY string = "READY"

	// RecordingJobStatePROCESSING captures enum value "PROCESSING"
	RecordingJobStatePROCESSING string = "PROCESSING"

	// RecordingJobStateCANCELLED captures enum value "CANCELLED"
	RecordingJobStateCANCELLED string = "CANCELLED"

	// RecordingJobStateFAILED captures enum value "FAILED"
	RecordingJobStateFAILED string = "FAILED"
)

// prop value enum
func (m *RecordingJob) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recordingJobTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecordingJob) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *RecordingJob) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecordingJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecordingJob) UnmarshalBinary(b []byte) error {
	var res RecordingJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocationDefinition location definition
//
// swagger:model LocationDefinition
type LocationDefinition struct {

	// address
	Address *LocationAddress `json:"address,omitempty"`

	// Boolean field which states if the address has been stored for E911
	// Read Only: true
	AddressStored *bool `json:"addressStored"`

	// Address verification information, retrieve dwith the ?expand=addressVerificationDetails query parameter
	// Read Only: true
	AddressVerificationDetails *LocationAddressVerificationDetails `json:"addressVerificationDetails,omitempty"`

	// Boolean field which states if the address has been verified as an actual address
	// Read Only: true
	AddressVerified *bool `json:"addressVerified"`

	// Site contact for the location entity
	ContactUser *AddressableEntityRef `json:"contactUser,omitempty"`

	// Emergency number for the location entity
	EmergencyNumber *LocationEmergencyNumber `json:"emergencyNumber,omitempty"`

	// Floorplan images of the location entity, retrieved with ?expand=images query parameter
	// Read Only: true
	FloorplanImage []*LocationImage `json:"floorplanImage"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// images
	Images string `json:"images,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Notes for the location entity
	Notes string `json:"notes,omitempty"`

	// A list of ancestor IDs in order
	// Read Only: true
	Path []string `json:"path"`

	// Profile image of the location entity, retrieved with ?expand=images query parameter
	// Read Only: true
	ProfileImage []*LocationImage `json:"profileImage"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Current state of the location entity
	// Enum: [active deleted]
	State string `json:"state,omitempty"`

	// Current version of the location entity, value to be supplied should be retrieved by a GET or on create/update response
	Version int32 `json:"version,omitempty"`
}

// Validate validates this location definition
func (m *LocationDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressVerificationDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmergencyNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFloorplanImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocationDefinition) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *LocationDefinition) validateAddressVerificationDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.AddressVerificationDetails) { // not required
		return nil
	}

	if m.AddressVerificationDetails != nil {
		if err := m.AddressVerificationDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addressVerificationDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addressVerificationDetails")
			}
			return err
		}
	}

	return nil
}

func (m *LocationDefinition) validateContactUser(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactUser) { // not required
		return nil
	}

	if m.ContactUser != nil {
		if err := m.ContactUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactUser")
			}
			return err
		}
	}

	return nil
}

func (m *LocationDefinition) validateEmergencyNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.EmergencyNumber) { // not required
		return nil
	}

	if m.EmergencyNumber != nil {
		if err := m.EmergencyNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emergencyNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emergencyNumber")
			}
			return err
		}
	}

	return nil
}

func (m *LocationDefinition) validateFloorplanImage(formats strfmt.Registry) error {
	if swag.IsZero(m.FloorplanImage) { // not required
		return nil
	}

	for i := 0; i < len(m.FloorplanImage); i++ {
		if swag.IsZero(m.FloorplanImage[i]) { // not required
			continue
		}

		if m.FloorplanImage[i] != nil {
			if err := m.FloorplanImage[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("floorplanImage" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("floorplanImage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LocationDefinition) validateProfileImage(formats strfmt.Registry) error {
	if swag.IsZero(m.ProfileImage) { // not required
		return nil
	}

	for i := 0; i < len(m.ProfileImage); i++ {
		if swag.IsZero(m.ProfileImage[i]) { // not required
			continue
		}

		if m.ProfileImage[i] != nil {
			if err := m.ProfileImage[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("profileImage" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("profileImage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LocationDefinition) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var locationDefinitionTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		locationDefinitionTypeStatePropEnum = append(locationDefinitionTypeStatePropEnum, v)
	}
}

const (

	// LocationDefinitionStateActive captures enum value "active"
	LocationDefinitionStateActive string = "active"

	// LocationDefinitionStateDeleted captures enum value "deleted"
	LocationDefinitionStateDeleted string = "deleted"
)

// prop value enum
func (m *LocationDefinition) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, locationDefinitionTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LocationDefinition) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this location definition based on the context it is used
func (m *LocationDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAddressStored(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAddressVerificationDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAddressVerified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContactUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmergencyNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFloorplanImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePath(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProfileImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocationDefinition) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {
		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *LocationDefinition) contextValidateAddressStored(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "addressStored", "body", m.AddressStored); err != nil {
		return err
	}

	return nil
}

func (m *LocationDefinition) contextValidateAddressVerificationDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.AddressVerificationDetails != nil {
		if err := m.AddressVerificationDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addressVerificationDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addressVerificationDetails")
			}
			return err
		}
	}

	return nil
}

func (m *LocationDefinition) contextValidateAddressVerified(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "addressVerified", "body", m.AddressVerified); err != nil {
		return err
	}

	return nil
}

func (m *LocationDefinition) contextValidateContactUser(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactUser != nil {
		if err := m.ContactUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactUser")
			}
			return err
		}
	}

	return nil
}

func (m *LocationDefinition) contextValidateEmergencyNumber(ctx context.Context, formats strfmt.Registry) error {

	if m.EmergencyNumber != nil {
		if err := m.EmergencyNumber.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emergencyNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emergencyNumber")
			}
			return err
		}
	}

	return nil
}

func (m *LocationDefinition) contextValidateFloorplanImage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "floorplanImage", "body", []*LocationImage(m.FloorplanImage)); err != nil {
		return err
	}

	for i := 0; i < len(m.FloorplanImage); i++ {

		if m.FloorplanImage[i] != nil {
			if err := m.FloorplanImage[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("floorplanImage" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("floorplanImage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LocationDefinition) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *LocationDefinition) contextValidatePath(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "path", "body", []string(m.Path)); err != nil {
		return err
	}

	return nil
}

func (m *LocationDefinition) contextValidateProfileImage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "profileImage", "body", []*LocationImage(m.ProfileImage)); err != nil {
		return err
	}

	for i := 0; i < len(m.ProfileImage); i++ {

		if m.ProfileImage[i] != nil {
			if err := m.ProfileImage[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("profileImage" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("profileImage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LocationDefinition) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LocationDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocationDefinition) UnmarshalBinary(b []byte) error {
	var res LocationDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

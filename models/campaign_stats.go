// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CampaignStats campaign stats
//
// swagger:model CampaignStats
type CampaignStats struct {

	// Calls per agent adjusted by pace
	// Read Only: true
	AdjustedCallsPerAgent float64 `json:"adjustedCallsPerAgent,omitempty"`

	// Information regarding the campaign's connect rate
	// Read Only: true
	ContactRate *ConnectRate `json:"contactRate,omitempty"`

	// Number of effective available agents not currently being utilized
	// Read Only: true
	EffectiveIdleAgents float64 `json:"effectiveIdleAgents,omitempty"`

	// Number of available agents not currently being utilized
	// Read Only: true
	IdleAgents int32 `json:"idleAgents,omitempty"`

	// Number of campaign calls currently ongoing
	// Read Only: true
	OutstandingCalls int32 `json:"outstandingCalls,omitempty"`

	// Number of campaign calls currently scheduled
	// Read Only: true
	ScheduledCalls int32 `json:"scheduledCalls,omitempty"`
}

// Validate validates this campaign stats
func (m *CampaignStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CampaignStats) validateContactRate(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactRate) { // not required
		return nil
	}

	if m.ContactRate != nil {
		if err := m.ContactRate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactRate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactRate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this campaign stats based on the context it is used
func (m *CampaignStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdjustedCallsPerAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContactRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEffectiveIdleAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdleAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutstandingCalls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduledCalls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CampaignStats) contextValidateAdjustedCallsPerAgent(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "adjustedCallsPerAgent", "body", float64(m.AdjustedCallsPerAgent)); err != nil {
		return err
	}

	return nil
}

func (m *CampaignStats) contextValidateContactRate(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactRate != nil {
		if err := m.ContactRate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactRate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactRate")
			}
			return err
		}
	}

	return nil
}

func (m *CampaignStats) contextValidateEffectiveIdleAgents(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "effectiveIdleAgents", "body", float64(m.EffectiveIdleAgents)); err != nil {
		return err
	}

	return nil
}

func (m *CampaignStats) contextValidateIdleAgents(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "idleAgents", "body", int32(m.IdleAgents)); err != nil {
		return err
	}

	return nil
}

func (m *CampaignStats) contextValidateOutstandingCalls(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "outstandingCalls", "body", int32(m.OutstandingCalls)); err != nil {
		return err
	}

	return nil
}

func (m *CampaignStats) contextValidateScheduledCalls(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "scheduledCalls", "body", int32(m.ScheduledCalls)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CampaignStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CampaignStats) UnmarshalBinary(b []byte) error {
	var res CampaignStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmsPhoneNumberProvision sms phone number provision
//
// swagger:model SmsPhoneNumberProvision
type SmsPhoneNumberProvision struct {

	// The id of an address added on your account. Due to regulatory requirements in some countries, an address may be required when provisioning a sms number. In those cases you should provide the provisioned sms address id here
	AddressID string `json:"addressId,omitempty"`

	// The ISO 3166-1 alpha-2 country code of the country this phone number is associated with.
	// Required: true
	CountryCode *string `json:"countryCode"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// A phone number to be used for SMS communications. E.g. +13175555555 or +34234234234
	// Required: true
	PhoneNumber *string `json:"phoneNumber"`

	// Type of the phone number provisioned.
	// Required: true
	// Enum: [local mobile tollfree shortcode]
	PhoneNumberType *string `json:"phoneNumberType"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this sms phone number provision
func (m *SmsPhoneNumberProvision) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumberType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmsPhoneNumberProvision) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("countryCode", "body", m.CountryCode); err != nil {
		return err
	}

	return nil
}

func (m *SmsPhoneNumberProvision) validatePhoneNumber(formats strfmt.Registry) error {

	if err := validate.Required("phoneNumber", "body", m.PhoneNumber); err != nil {
		return err
	}

	return nil
}

var smsPhoneNumberProvisionTypePhoneNumberTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["local","mobile","tollfree","shortcode"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smsPhoneNumberProvisionTypePhoneNumberTypePropEnum = append(smsPhoneNumberProvisionTypePhoneNumberTypePropEnum, v)
	}
}

const (

	// SmsPhoneNumberProvisionPhoneNumberTypeLocal captures enum value "local"
	SmsPhoneNumberProvisionPhoneNumberTypeLocal string = "local"

	// SmsPhoneNumberProvisionPhoneNumberTypeMobile captures enum value "mobile"
	SmsPhoneNumberProvisionPhoneNumberTypeMobile string = "mobile"

	// SmsPhoneNumberProvisionPhoneNumberTypeTollfree captures enum value "tollfree"
	SmsPhoneNumberProvisionPhoneNumberTypeTollfree string = "tollfree"

	// SmsPhoneNumberProvisionPhoneNumberTypeShortcode captures enum value "shortcode"
	SmsPhoneNumberProvisionPhoneNumberTypeShortcode string = "shortcode"
)

// prop value enum
func (m *SmsPhoneNumberProvision) validatePhoneNumberTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, smsPhoneNumberProvisionTypePhoneNumberTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmsPhoneNumberProvision) validatePhoneNumberType(formats strfmt.Registry) error {

	if err := validate.Required("phoneNumberType", "body", m.PhoneNumberType); err != nil {
		return err
	}

	// value enum
	if err := m.validatePhoneNumberTypeEnum("phoneNumberType", "body", *m.PhoneNumberType); err != nil {
		return err
	}

	return nil
}

func (m *SmsPhoneNumberProvision) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmsPhoneNumberProvision) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmsPhoneNumberProvision) UnmarshalBinary(b []byte) error {
	var res SmsPhoneNumberProvision
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessScheduleUpdateUploadRequest process schedule update upload request
//
// swagger:model ProcessScheduleUpdateUploadRequest
type ProcessScheduleUpdateUploadRequest struct {

	// The set of muIds to which agents belong if agents are being newly added to the schedule, if the requesting user has conditional permission to wfm:schedule:edit
	// Unique: true
	ManagementUnitIdsForAddedTeamUsers []string `json:"managementUnitIdsForAddedTeamUsers"`

	// The list of teams to which the users being modified belong. Only required if the requesting user has conditional permission to wfm:schedule:edit
	// Unique: true
	TeamIds []string `json:"teamIds"`

	// The uploadKey provided by the request to get an upload URL
	// Required: true
	UploadKey *string `json:"uploadKey"`
}

// Validate validates this process schedule update upload request
func (m *ProcessScheduleUpdateUploadRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManagementUnitIdsForAddedTeamUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessScheduleUpdateUploadRequest) validateManagementUnitIdsForAddedTeamUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.ManagementUnitIdsForAddedTeamUsers) { // not required
		return nil
	}

	if err := validate.UniqueItems("managementUnitIdsForAddedTeamUsers", "body", m.ManagementUnitIdsForAddedTeamUsers); err != nil {
		return err
	}

	return nil
}

func (m *ProcessScheduleUpdateUploadRequest) validateTeamIds(formats strfmt.Registry) error {
	if swag.IsZero(m.TeamIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("teamIds", "body", m.TeamIds); err != nil {
		return err
	}

	return nil
}

func (m *ProcessScheduleUpdateUploadRequest) validateUploadKey(formats strfmt.Registry) error {

	if err := validate.Required("uploadKey", "body", m.UploadKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this process schedule update upload request based on context it is used
func (m *ProcessScheduleUpdateUploadRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProcessScheduleUpdateUploadRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessScheduleUpdateUploadRequest) UnmarshalBinary(b []byte) error {
	var res ProcessScheduleUpdateUploadRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

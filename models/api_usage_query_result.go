// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIUsageQueryResult Api usage query result
//
// swagger:model ApiUsageQueryResult
type APIUsageQueryResult struct {

	// Query status
	// Enum: [Complete Failed Running]
	QueryStatus string `json:"queryStatus,omitempty"`

	// Query results
	Results []*APIUsageRow `json:"results"`
}

// Validate validates this Api usage query result
func (m *APIUsageQueryResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQueryStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var apiUsageQueryResultTypeQueryStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Complete","Failed","Running"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiUsageQueryResultTypeQueryStatusPropEnum = append(apiUsageQueryResultTypeQueryStatusPropEnum, v)
	}
}

const (

	// APIUsageQueryResultQueryStatusComplete captures enum value "Complete"
	APIUsageQueryResultQueryStatusComplete string = "Complete"

	// APIUsageQueryResultQueryStatusFailed captures enum value "Failed"
	APIUsageQueryResultQueryStatusFailed string = "Failed"

	// APIUsageQueryResultQueryStatusRunning captures enum value "Running"
	APIUsageQueryResultQueryStatusRunning string = "Running"
)

// prop value enum
func (m *APIUsageQueryResult) validateQueryStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiUsageQueryResultTypeQueryStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIUsageQueryResult) validateQueryStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.QueryStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateQueryStatusEnum("queryStatus", "body", m.QueryStatus); err != nil {
		return err
	}

	return nil
}

func (m *APIUsageQueryResult) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIUsageQueryResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIUsageQueryResult) UnmarshalBinary(b []byte) error {
	var res APIUsageQueryResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

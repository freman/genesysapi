// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LimitChangeRequestDetails limit change request details
//
// swagger:model LimitChangeRequestDetails
type LimitChangeRequestDetails struct {

	// The user who created the change request
	// Read Only: true
	CreatedBy string `json:"createdBy,omitempty"`

	// Current limit value for a given key
	// Read Only: true
	CurrentValue float64 `json:"currentValue,omitempty"`

	// The date of the limit change request completion (ChangeImplemented, Rejected, or RollbackImplemented. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCompleted strfmt.DateTime `json:"dateCompleted,omitempty"`

	// The date of the limit change request creation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Description of the need for the limit change request
	// Required: true
	Description *string `json:"description"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Limit key to be overridden (see https://developer.mypurecloud.com/api/rest/v2/organization/limits.html#available_limits)
	// Required: true
	Key *string `json:"key"`

	// The user who last updated the status of the limit change request
	// Read Only: true
	LastChangedBy string `json:"lastChangedBy,omitempty"`

	// Namespace the key belongs to (see https://developer.mypurecloud.com/api/rest/v2/organization/limits.html#available_limits)
	// Required: true
	Namespace *string `json:"namespace"`

	// The reason for rejecting the limit override request
	// Read Only: true
	// Enum: [AlternativeExists IncreaseNotRequired PlatformMisuse PlatformStability OtherReason]
	RejectReason string `json:"rejectReason,omitempty"`

	// Requested limit value for a given key
	// Required: true
	RequestedValue *float64 `json:"requestedValue"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Current status of the limit change request
	// Read Only: true
	// Enum: [Open Approved ImplementingChange ChangeImplemented Rejected Rollback ImplementingRollback RollbackImplemented]
	Status string `json:"status,omitempty"`

	// List of statuses that a limit change request has gone through
	// Read Only: true
	StatusHistory []*StatusChange `json:"statusHistory"`

	// The support case url created by Care
	// Required: true
	SupportCaseURL *string `json:"supportCaseUrl"`
}

// Validate validates this limit change request details
func (m *LimitChangeRequestDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportCaseURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LimitChangeRequestDetails) validateDateCompleted(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCompleted) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCompleted", "body", "date-time", m.DateCompleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LimitChangeRequestDetails) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LimitChangeRequestDetails) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *LimitChangeRequestDetails) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *LimitChangeRequestDetails) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

var limitChangeRequestDetailsTypeRejectReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AlternativeExists","IncreaseNotRequired","PlatformMisuse","PlatformStability","OtherReason"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		limitChangeRequestDetailsTypeRejectReasonPropEnum = append(limitChangeRequestDetailsTypeRejectReasonPropEnum, v)
	}
}

const (

	// LimitChangeRequestDetailsRejectReasonAlternativeExists captures enum value "AlternativeExists"
	LimitChangeRequestDetailsRejectReasonAlternativeExists string = "AlternativeExists"

	// LimitChangeRequestDetailsRejectReasonIncreaseNotRequired captures enum value "IncreaseNotRequired"
	LimitChangeRequestDetailsRejectReasonIncreaseNotRequired string = "IncreaseNotRequired"

	// LimitChangeRequestDetailsRejectReasonPlatformMisuse captures enum value "PlatformMisuse"
	LimitChangeRequestDetailsRejectReasonPlatformMisuse string = "PlatformMisuse"

	// LimitChangeRequestDetailsRejectReasonPlatformStability captures enum value "PlatformStability"
	LimitChangeRequestDetailsRejectReasonPlatformStability string = "PlatformStability"

	// LimitChangeRequestDetailsRejectReasonOtherReason captures enum value "OtherReason"
	LimitChangeRequestDetailsRejectReasonOtherReason string = "OtherReason"
)

// prop value enum
func (m *LimitChangeRequestDetails) validateRejectReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, limitChangeRequestDetailsTypeRejectReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LimitChangeRequestDetails) validateRejectReason(formats strfmt.Registry) error {

	if swag.IsZero(m.RejectReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateRejectReasonEnum("rejectReason", "body", m.RejectReason); err != nil {
		return err
	}

	return nil
}

func (m *LimitChangeRequestDetails) validateRequestedValue(formats strfmt.Registry) error {

	if err := validate.Required("requestedValue", "body", m.RequestedValue); err != nil {
		return err
	}

	return nil
}

func (m *LimitChangeRequestDetails) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var limitChangeRequestDetailsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Open","Approved","ImplementingChange","ChangeImplemented","Rejected","Rollback","ImplementingRollback","RollbackImplemented"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		limitChangeRequestDetailsTypeStatusPropEnum = append(limitChangeRequestDetailsTypeStatusPropEnum, v)
	}
}

const (

	// LimitChangeRequestDetailsStatusOpen captures enum value "Open"
	LimitChangeRequestDetailsStatusOpen string = "Open"

	// LimitChangeRequestDetailsStatusApproved captures enum value "Approved"
	LimitChangeRequestDetailsStatusApproved string = "Approved"

	// LimitChangeRequestDetailsStatusImplementingChange captures enum value "ImplementingChange"
	LimitChangeRequestDetailsStatusImplementingChange string = "ImplementingChange"

	// LimitChangeRequestDetailsStatusChangeImplemented captures enum value "ChangeImplemented"
	LimitChangeRequestDetailsStatusChangeImplemented string = "ChangeImplemented"

	// LimitChangeRequestDetailsStatusRejected captures enum value "Rejected"
	LimitChangeRequestDetailsStatusRejected string = "Rejected"

	// LimitChangeRequestDetailsStatusRollback captures enum value "Rollback"
	LimitChangeRequestDetailsStatusRollback string = "Rollback"

	// LimitChangeRequestDetailsStatusImplementingRollback captures enum value "ImplementingRollback"
	LimitChangeRequestDetailsStatusImplementingRollback string = "ImplementingRollback"

	// LimitChangeRequestDetailsStatusRollbackImplemented captures enum value "RollbackImplemented"
	LimitChangeRequestDetailsStatusRollbackImplemented string = "RollbackImplemented"
)

// prop value enum
func (m *LimitChangeRequestDetails) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, limitChangeRequestDetailsTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LimitChangeRequestDetails) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *LimitChangeRequestDetails) validateStatusHistory(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusHistory) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusHistory); i++ {
		if swag.IsZero(m.StatusHistory[i]) { // not required
			continue
		}

		if m.StatusHistory[i] != nil {
			if err := m.StatusHistory[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statusHistory" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LimitChangeRequestDetails) validateSupportCaseURL(formats strfmt.Registry) error {

	if err := validate.Required("supportCaseUrl", "body", m.SupportCaseURL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LimitChangeRequestDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LimitChangeRequestDetails) UnmarshalBinary(b []byte) error {
	var res LimitChangeRequestDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuScheduleRun bu schedule run
//
// swagger:model BuScheduleRun
type BuScheduleRun struct {

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Whether this is an intraday rescheduling run
	IntradayRescheduling bool `json:"intradayRescheduling,omitempty"`

	// The number of schedule generation messages for this schedule generation run
	MessageCount int32 `json:"messageCount,omitempty"`

	// Percent completion of the schedule run
	PercentComplete float64 `json:"percentComplete,omitempty"`

	// Rescheduling options for this run.  Null unless intradayRescheduling is true
	ReschedulingOptions *ReschedulingOptionsRunResponse `json:"reschedulingOptions,omitempty"`

	// When the reschedule result will expire.  Null unless intradayRescheduling is true. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	ReschedulingResultExpiration strfmt.DateTime `json:"reschedulingResultExpiration,omitempty"`

	// The generated schedule.  Null unless the schedule run is complete
	Schedule *BuScheduleReference `json:"schedule,omitempty"`

	// The description of the generated schedule
	ScheduleDescription string `json:"scheduleDescription,omitempty"`

	// The scheduler run ID.  Reference this value for support
	SchedulerRunID string `json:"schedulerRunId,omitempty"`

	// The user who canceled the scheduling run, if applicable
	SchedulingCanceledBy *UserReference `json:"schedulingCanceledBy,omitempty"`

	// When the scheduling run was completed, if applicable. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	SchedulingCompletedTime strfmt.DateTime `json:"schedulingCompletedTime,omitempty"`

	// When the schedule generation run started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	SchedulingStartTime strfmt.DateTime `json:"schedulingStartTime,omitempty"`

	// The user who started the scheduling run
	SchedulingStartedBy *UserReference `json:"schedulingStartedBy,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The state of the generation run
	// Enum: [None Queued Scheduling Canceled Failed Complete]
	State string `json:"state,omitempty"`

	// The start date of the target week. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Format: date
	TargetWeek strfmt.Date `json:"targetWeek,omitempty"`

	// The number of weeks spanned by the schedule
	WeekCount int32 `json:"weekCount,omitempty"`
}

// Validate validates this bu schedule run
func (m *BuScheduleRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReschedulingOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReschedulingResultExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedulingCanceledBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedulingCompletedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedulingStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedulingStartedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetWeek(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuScheduleRun) validateReschedulingOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.ReschedulingOptions) { // not required
		return nil
	}

	if m.ReschedulingOptions != nil {
		if err := m.ReschedulingOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reschedulingOptions")
			}
			return err
		}
	}

	return nil
}

func (m *BuScheduleRun) validateReschedulingResultExpiration(formats strfmt.Registry) error {

	if swag.IsZero(m.ReschedulingResultExpiration) { // not required
		return nil
	}

	if err := validate.FormatOf("reschedulingResultExpiration", "body", "date-time", m.ReschedulingResultExpiration.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BuScheduleRun) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *BuScheduleRun) validateSchedulingCanceledBy(formats strfmt.Registry) error {

	if swag.IsZero(m.SchedulingCanceledBy) { // not required
		return nil
	}

	if m.SchedulingCanceledBy != nil {
		if err := m.SchedulingCanceledBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedulingCanceledBy")
			}
			return err
		}
	}

	return nil
}

func (m *BuScheduleRun) validateSchedulingCompletedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.SchedulingCompletedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("schedulingCompletedTime", "body", "date-time", m.SchedulingCompletedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BuScheduleRun) validateSchedulingStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.SchedulingStartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("schedulingStartTime", "body", "date-time", m.SchedulingStartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BuScheduleRun) validateSchedulingStartedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.SchedulingStartedBy) { // not required
		return nil
	}

	if m.SchedulingStartedBy != nil {
		if err := m.SchedulingStartedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedulingStartedBy")
			}
			return err
		}
	}

	return nil
}

func (m *BuScheduleRun) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var buScheduleRunTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Queued","Scheduling","Canceled","Failed","Complete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		buScheduleRunTypeStatePropEnum = append(buScheduleRunTypeStatePropEnum, v)
	}
}

const (

	// BuScheduleRunStateNone captures enum value "None"
	BuScheduleRunStateNone string = "None"

	// BuScheduleRunStateQueued captures enum value "Queued"
	BuScheduleRunStateQueued string = "Queued"

	// BuScheduleRunStateScheduling captures enum value "Scheduling"
	BuScheduleRunStateScheduling string = "Scheduling"

	// BuScheduleRunStateCanceled captures enum value "Canceled"
	BuScheduleRunStateCanceled string = "Canceled"

	// BuScheduleRunStateFailed captures enum value "Failed"
	BuScheduleRunStateFailed string = "Failed"

	// BuScheduleRunStateComplete captures enum value "Complete"
	BuScheduleRunStateComplete string = "Complete"
)

// prop value enum
func (m *BuScheduleRun) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, buScheduleRunTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BuScheduleRun) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *BuScheduleRun) validateTargetWeek(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetWeek) { // not required
		return nil
	}

	if err := validate.FormatOf("targetWeek", "body", "date", m.TargetWeek.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuScheduleRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuScheduleRun) UnmarshalBinary(b []byte) error {
	var res BuScheduleRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LongTermForecastResult long term forecast result
//
// swagger:model LongTermForecastResult
type LongTermForecastResult struct {

	// The forecast data broken up by planning group
	PlanningGroups []*LongTermForecastPlanningGroupData `json:"planningGroups"`

	// The reference start date relative to the business unit time zone in this forecast. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Format: date
	ReferenceStartDate strfmt.Date `json:"referenceStartDate,omitempty"`

	// The number of weeks in this forecast
	WeekCount int32 `json:"weekCount,omitempty"`
}

// Validate validates this long term forecast result
func (m *LongTermForecastResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlanningGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LongTermForecastResult) validatePlanningGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanningGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.PlanningGroups); i++ {
		if swag.IsZero(m.PlanningGroups[i]) { // not required
			continue
		}

		if m.PlanningGroups[i] != nil {
			if err := m.PlanningGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("planningGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LongTermForecastResult) validateReferenceStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ReferenceStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("referenceStartDate", "body", "date", m.ReferenceStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LongTermForecastResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LongTermForecastResult) UnmarshalBinary(b []byte) error {
	var res LongTermForecastResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

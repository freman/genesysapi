// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MinerExecuteRequest miner execute request
//
// swagger:model MinerExecuteRequest
type MinerExecuteRequest struct {

	// End date for the date range to mine. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Format: date
	DateEnd strfmt.Date `json:"dateEnd,omitempty"`

	// Start date for the date range to mine. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Format: date
	DateStart strfmt.Date `json:"dateStart,omitempty"`

	// Media type for filtering conversations.
	// Enum: [Chat Call]
	MediaType string `json:"mediaType,omitempty"`

	// List of queue IDs for filtering conversations.
	QueueIds []string `json:"queueIds"`

	// Location of input conversations.
	UploadKey string `json:"uploadKey,omitempty"`
}

// Validate validates this miner execute request
func (m *MinerExecuteRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MinerExecuteRequest) validateDateEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.DateEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("dateEnd", "body", "date", m.DateEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MinerExecuteRequest) validateDateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.DateStart) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStart", "body", "date", m.DateStart.String(), formats); err != nil {
		return err
	}

	return nil
}

var minerExecuteRequestTypeMediaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Chat","Call"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		minerExecuteRequestTypeMediaTypePropEnum = append(minerExecuteRequestTypeMediaTypePropEnum, v)
	}
}

const (

	// MinerExecuteRequestMediaTypeChat captures enum value "Chat"
	MinerExecuteRequestMediaTypeChat string = "Chat"

	// MinerExecuteRequestMediaTypeCall captures enum value "Call"
	MinerExecuteRequestMediaTypeCall string = "Call"
)

// prop value enum
func (m *MinerExecuteRequest) validateMediaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, minerExecuteRequestTypeMediaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MinerExecuteRequest) validateMediaType(formats strfmt.Registry) error {

	if swag.IsZero(m.MediaType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMediaTypeEnum("mediaType", "body", m.MediaType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MinerExecuteRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MinerExecuteRequest) UnmarshalBinary(b []byte) error {
	var res MinerExecuteRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

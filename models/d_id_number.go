// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DIDNumber Represents an unassigned or assigned DID in a DID Pool.
//
// swagger:model DIDNumber
type DIDNumber struct {

	// True if this DID is assigned to an entity.  False otherwise.
	Assigned bool `json:"assigned"`

	// A Uri reference to the DID Pool this DID is a part of.
	DidPool *AddressableEntityRef `json:"didPool,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The number of the DID formatted as E164.
	Number string `json:"number,omitempty"`

	// A Uri reference to the owner of this DID.  The owner's type can be found in ownerType.  If the DID is unassigned, this will be NULL.
	Owner *DomainEntityRef `json:"owner,omitempty"`

	// The type of the entity that owns this DID.  If the DID is unassigned, this will be NULL.
	// Enum: [USER PHONE IVR_CONFIG GROUP]
	OwnerType string `json:"ownerType,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this d ID number
func (m *DIDNumber) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDidPool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DIDNumber) validateDidPool(formats strfmt.Registry) error {
	if swag.IsZero(m.DidPool) { // not required
		return nil
	}

	if m.DidPool != nil {
		if err := m.DidPool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("didPool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("didPool")
			}
			return err
		}
	}

	return nil
}

func (m *DIDNumber) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

var dIdNumberTypeOwnerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USER","PHONE","IVR_CONFIG","GROUP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dIdNumberTypeOwnerTypePropEnum = append(dIdNumberTypeOwnerTypePropEnum, v)
	}
}

const (

	// DIDNumberOwnerTypeUSER captures enum value "USER"
	DIDNumberOwnerTypeUSER string = "USER"

	// DIDNumberOwnerTypePHONE captures enum value "PHONE"
	DIDNumberOwnerTypePHONE string = "PHONE"

	// DIDNumberOwnerTypeIVRCONFIG captures enum value "IVR_CONFIG"
	DIDNumberOwnerTypeIVRCONFIG string = "IVR_CONFIG"

	// DIDNumberOwnerTypeGROUP captures enum value "GROUP"
	DIDNumberOwnerTypeGROUP string = "GROUP"
)

// prop value enum
func (m *DIDNumber) validateOwnerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dIdNumberTypeOwnerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DIDNumber) validateOwnerType(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOwnerTypeEnum("ownerType", "body", m.OwnerType); err != nil {
		return err
	}

	return nil
}

func (m *DIDNumber) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this d ID number based on the context it is used
func (m *DIDNumber) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDidPool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DIDNumber) contextValidateDidPool(ctx context.Context, formats strfmt.Registry) error {

	if m.DidPool != nil {
		if err := m.DidPool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("didPool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("didPool")
			}
			return err
		}
	}

	return nil
}

func (m *DIDNumber) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *DIDNumber) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {
		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *DIDNumber) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DIDNumber) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DIDNumber) UnmarshalBinary(b []byte) error {
	var res DIDNumber
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

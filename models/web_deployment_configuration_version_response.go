// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebDeploymentConfigurationVersionResponse Details about the configuration version of a Web Deployment
//
// swagger:model WebDeploymentConfigurationVersionResponse
type WebDeploymentConfigurationVersionResponse struct {

	// The settings for authenticated deployments
	AuthenticationSettings *AuthenticationSettings `json:"authenticationSettings,omitempty"`

	// The settings for cobrowse
	Cobrowse *CobrowseSettings `json:"cobrowse,omitempty"`

	// A reference to the user who created the configuration version
	// Read Only: true
	CreatedUser *AddressableEntityRef `json:"createdUser,omitempty"`

	// The localization settings for homescreen app
	CustomI18nLabels []*CustomI18nLabels `json:"customI18nLabels"`

	// The date the configuration version was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The date the configuration version was most recently modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The date the configuration version was most recently published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DatePublished strfmt.DateTime `json:"datePublished,omitempty"`

	// The default language to use for the configuration required if the messenger is enabled
	DefaultLanguage string `json:"defaultLanguage,omitempty"`

	// The description of the configuration
	Description string `json:"description,omitempty"`

	// Headless Mode Support which Controls UI components. When enabled, native UI components will be disabled and allows for custom-built UI.
	HeadlessMode *WebDeploymentHeadlessMode `json:"headlessMode,omitempty"`

	// The configuration version ID
	ID string `json:"id,omitempty"`

	// The settings for journey events
	JourneyEvents *JourneyEventsSettings `json:"journeyEvents,omitempty"`

	// A list of languages supported on the configuration required if the messenger is enabled
	Languages []string `json:"languages"`

	// A reference to the user who most recently modified the configuration version
	// Read Only: true
	LastModifiedUser *AddressableEntityRef `json:"lastModifiedUser,omitempty"`

	// The settings for messenger
	Messenger *MessengerSettings `json:"messenger,omitempty"`

	// The configuration version name
	// Required: true
	Name *string `json:"name"`

	// The settings for position
	Position *PositionSettings `json:"position,omitempty"`

	// A reference to the user who published the configuration version
	// Read Only: true
	PublishedUser *AddressableEntityRef `json:"publishedUser,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The current status of the configuration version
	// Enum: [Pending Active Inactive Error Deleting]
	Status string `json:"status,omitempty"`

	// The settings for support center
	SupportCenter *SupportCenterSettings `json:"supportCenter,omitempty"`

	// The version of the configuration
	Version string `json:"version,omitempty"`
}

// Validate validates this web deployment configuration version response
func (m *WebDeploymentConfigurationVersionResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCobrowse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomI18nLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatePublished(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeadlessMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJourneyEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessenger(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportCenter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validateAuthenticationSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationSettings) { // not required
		return nil
	}

	if m.AuthenticationSettings != nil {
		if err := m.AuthenticationSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authenticationSettings")
			}
			return err
		}
	}

	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validateCobrowse(formats strfmt.Registry) error {

	if swag.IsZero(m.Cobrowse) { // not required
		return nil
	}

	if m.Cobrowse != nil {
		if err := m.Cobrowse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cobrowse")
			}
			return err
		}
	}

	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validateCreatedUser(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedUser) { // not required
		return nil
	}

	if m.CreatedUser != nil {
		if err := m.CreatedUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdUser")
			}
			return err
		}
	}

	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validateCustomI18nLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomI18nLabels) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomI18nLabels); i++ {
		if swag.IsZero(m.CustomI18nLabels[i]) { // not required
			continue
		}

		if m.CustomI18nLabels[i] != nil {
			if err := m.CustomI18nLabels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customI18nLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validateDatePublished(formats strfmt.Registry) error {

	if swag.IsZero(m.DatePublished) { // not required
		return nil
	}

	if err := validate.FormatOf("datePublished", "body", "date-time", m.DatePublished.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validateHeadlessMode(formats strfmt.Registry) error {

	if swag.IsZero(m.HeadlessMode) { // not required
		return nil
	}

	if m.HeadlessMode != nil {
		if err := m.HeadlessMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headlessMode")
			}
			return err
		}
	}

	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validateJourneyEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.JourneyEvents) { // not required
		return nil
	}

	if m.JourneyEvents != nil {
		if err := m.JourneyEvents.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("journeyEvents")
			}
			return err
		}
	}

	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validateLastModifiedUser(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedUser) { // not required
		return nil
	}

	if m.LastModifiedUser != nil {
		if err := m.LastModifiedUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastModifiedUser")
			}
			return err
		}
	}

	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validateMessenger(formats strfmt.Registry) error {

	if swag.IsZero(m.Messenger) { // not required
		return nil
	}

	if m.Messenger != nil {
		if err := m.Messenger.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messenger")
			}
			return err
		}
	}

	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validatePosition(formats strfmt.Registry) error {

	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validatePublishedUser(formats strfmt.Registry) error {

	if swag.IsZero(m.PublishedUser) { // not required
		return nil
	}

	if m.PublishedUser != nil {
		if err := m.PublishedUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publishedUser")
			}
			return err
		}
	}

	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var webDeploymentConfigurationVersionResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Active","Inactive","Error","Deleting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webDeploymentConfigurationVersionResponseTypeStatusPropEnum = append(webDeploymentConfigurationVersionResponseTypeStatusPropEnum, v)
	}
}

const (

	// WebDeploymentConfigurationVersionResponseStatusPending captures enum value "Pending"
	WebDeploymentConfigurationVersionResponseStatusPending string = "Pending"

	// WebDeploymentConfigurationVersionResponseStatusActive captures enum value "Active"
	WebDeploymentConfigurationVersionResponseStatusActive string = "Active"

	// WebDeploymentConfigurationVersionResponseStatusInactive captures enum value "Inactive"
	WebDeploymentConfigurationVersionResponseStatusInactive string = "Inactive"

	// WebDeploymentConfigurationVersionResponseStatusError captures enum value "Error"
	WebDeploymentConfigurationVersionResponseStatusError string = "Error"

	// WebDeploymentConfigurationVersionResponseStatusDeleting captures enum value "Deleting"
	WebDeploymentConfigurationVersionResponseStatusDeleting string = "Deleting"
)

// prop value enum
func (m *WebDeploymentConfigurationVersionResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, webDeploymentConfigurationVersionResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *WebDeploymentConfigurationVersionResponse) validateSupportCenter(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportCenter) { // not required
		return nil
	}

	if m.SupportCenter != nil {
		if err := m.SupportCenter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportCenter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebDeploymentConfigurationVersionResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebDeploymentConfigurationVersionResponse) UnmarshalBinary(b []byte) error {
	var res WebDeploymentConfigurationVersionResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

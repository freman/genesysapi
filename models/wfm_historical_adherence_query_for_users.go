// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WfmHistoricalAdherenceQueryForUsers wfm historical adherence query for users
//
// swagger:model WfmHistoricalAdherenceQueryForUsers
type WfmHistoricalAdherenceQueryForUsers struct {

	// End of the date range to query in ISO-8601 format. If it is not set, end date will be set to current time
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// Whether user exceptions should be returned as part of the results
	IncludeExceptions bool `json:"includeExceptions"`

	// Beginning of the date range to query in ISO-8601 format
	// Required: true
	// Format: date-time
	StartDate *strfmt.DateTime `json:"startDate"`

	// The time zone, in olson format, to use in defining days when computing adherence. If it is not set, the business unit time zone will be used. The results will be returned as UTC timestamps regardless of the time zone input.
	TimeZone string `json:"timeZone,omitempty"`

	// The userIds to report on
	// Required: true
	// Unique: true
	UserIds []string `json:"userIds"`
}

// Validate validates this wfm historical adherence query for users
func (m *WfmHistoricalAdherenceQueryForUsers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WfmHistoricalAdherenceQueryForUsers) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WfmHistoricalAdherenceQueryForUsers) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WfmHistoricalAdherenceQueryForUsers) validateUserIds(formats strfmt.Registry) error {

	if err := validate.Required("userIds", "body", m.UserIds); err != nil {
		return err
	}

	if err := validate.UniqueItems("userIds", "body", m.UserIds); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WfmHistoricalAdherenceQueryForUsers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WfmHistoricalAdherenceQueryForUsers) UnmarshalBinary(b []byte) error {
	var res WfmHistoricalAdherenceQueryForUsers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

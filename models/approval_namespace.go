// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApprovalNamespace approval namespace
//
// swagger:model ApprovalNamespace
type ApprovalNamespace struct {

	// The namespace of the associated approvers.
	// Read Only: true
	// Enum: [contacts agent.assistant analytics.alerting analytics analytics.realtime analytics.reporting.settings architect audiohook audit auth.api authorization automation.testing bots bots.voice cobrowse content.management conversation dataactions datatables directory email event.orchestration external.contacts gcv gdpr groups historical.adherence infrastructureascode integrations intent.miner journey knowledge language.understanding limit.registry marketplace messaging notifications onboarding outbound platform.api predictive.routing quality recording response.management routing scim search secondary.automation.testing skills speech.and.text.analytics speech.integration supportability task.management telephony.configuration web.deployments web.messaging webchat webhooks workforce.management]
	Namespace string `json:"namespace,omitempty"`

	// The current namespace approval status.
	// Read Only: true
	// Enum: [Approved Rejected Rollback Pending Open SecondaryApprovalNamespacesAdded ReviewerApproved ReviewerRejected ReviewerRollback ImplementingChange ChangeImplemented ImplementingRollback RollbackImplemented]
	Status string `json:"status,omitempty"`

	// The type of namespace approval.
	// Read Only: true
	// Enum: [Primary Secondary]
	Type string `json:"type,omitempty"`
}

// Validate validates this approval namespace
func (m *ApprovalNamespace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var approvalNamespaceTypeNamespacePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["contacts","agent.assistant","analytics.alerting","analytics","analytics.realtime","analytics.reporting.settings","architect","audiohook","audit","auth.api","authorization","automation.testing","bots","bots.voice","cobrowse","content.management","conversation","dataactions","datatables","directory","email","event.orchestration","external.contacts","gcv","gdpr","groups","historical.adherence","infrastructureascode","integrations","intent.miner","journey","knowledge","language.understanding","limit.registry","marketplace","messaging","notifications","onboarding","outbound","platform.api","predictive.routing","quality","recording","response.management","routing","scim","search","secondary.automation.testing","skills","speech.and.text.analytics","speech.integration","supportability","task.management","telephony.configuration","web.deployments","web.messaging","webchat","webhooks","workforce.management"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		approvalNamespaceTypeNamespacePropEnum = append(approvalNamespaceTypeNamespacePropEnum, v)
	}
}

const (

	// ApprovalNamespaceNamespaceContacts captures enum value "contacts"
	ApprovalNamespaceNamespaceContacts string = "contacts"

	// ApprovalNamespaceNamespaceAgentDotAssistant captures enum value "agent.assistant"
	ApprovalNamespaceNamespaceAgentDotAssistant string = "agent.assistant"

	// ApprovalNamespaceNamespaceAnalyticsDotAlerting captures enum value "analytics.alerting"
	ApprovalNamespaceNamespaceAnalyticsDotAlerting string = "analytics.alerting"

	// ApprovalNamespaceNamespaceAnalytics captures enum value "analytics"
	ApprovalNamespaceNamespaceAnalytics string = "analytics"

	// ApprovalNamespaceNamespaceAnalyticsDotRealtime captures enum value "analytics.realtime"
	ApprovalNamespaceNamespaceAnalyticsDotRealtime string = "analytics.realtime"

	// ApprovalNamespaceNamespaceAnalyticsDotReportingDotSettings captures enum value "analytics.reporting.settings"
	ApprovalNamespaceNamespaceAnalyticsDotReportingDotSettings string = "analytics.reporting.settings"

	// ApprovalNamespaceNamespaceArchitect captures enum value "architect"
	ApprovalNamespaceNamespaceArchitect string = "architect"

	// ApprovalNamespaceNamespaceAudiohook captures enum value "audiohook"
	ApprovalNamespaceNamespaceAudiohook string = "audiohook"

	// ApprovalNamespaceNamespaceAudit captures enum value "audit"
	ApprovalNamespaceNamespaceAudit string = "audit"

	// ApprovalNamespaceNamespaceAuthDotAPI captures enum value "auth.api"
	ApprovalNamespaceNamespaceAuthDotAPI string = "auth.api"

	// ApprovalNamespaceNamespaceAuthorization captures enum value "authorization"
	ApprovalNamespaceNamespaceAuthorization string = "authorization"

	// ApprovalNamespaceNamespaceAutomationDotTesting captures enum value "automation.testing"
	ApprovalNamespaceNamespaceAutomationDotTesting string = "automation.testing"

	// ApprovalNamespaceNamespaceBots captures enum value "bots"
	ApprovalNamespaceNamespaceBots string = "bots"

	// ApprovalNamespaceNamespaceBotsDotVoice captures enum value "bots.voice"
	ApprovalNamespaceNamespaceBotsDotVoice string = "bots.voice"

	// ApprovalNamespaceNamespaceCobrowse captures enum value "cobrowse"
	ApprovalNamespaceNamespaceCobrowse string = "cobrowse"

	// ApprovalNamespaceNamespaceContentDotManagement captures enum value "content.management"
	ApprovalNamespaceNamespaceContentDotManagement string = "content.management"

	// ApprovalNamespaceNamespaceConversation captures enum value "conversation"
	ApprovalNamespaceNamespaceConversation string = "conversation"

	// ApprovalNamespaceNamespaceDataactions captures enum value "dataactions"
	ApprovalNamespaceNamespaceDataactions string = "dataactions"

	// ApprovalNamespaceNamespaceDatatables captures enum value "datatables"
	ApprovalNamespaceNamespaceDatatables string = "datatables"

	// ApprovalNamespaceNamespaceDirectory captures enum value "directory"
	ApprovalNamespaceNamespaceDirectory string = "directory"

	// ApprovalNamespaceNamespaceEmail captures enum value "email"
	ApprovalNamespaceNamespaceEmail string = "email"

	// ApprovalNamespaceNamespaceEventDotOrchestration captures enum value "event.orchestration"
	ApprovalNamespaceNamespaceEventDotOrchestration string = "event.orchestration"

	// ApprovalNamespaceNamespaceExternalDotContacts captures enum value "external.contacts"
	ApprovalNamespaceNamespaceExternalDotContacts string = "external.contacts"

	// ApprovalNamespaceNamespaceGcv captures enum value "gcv"
	ApprovalNamespaceNamespaceGcv string = "gcv"

	// ApprovalNamespaceNamespaceGdpr captures enum value "gdpr"
	ApprovalNamespaceNamespaceGdpr string = "gdpr"

	// ApprovalNamespaceNamespaceGroups captures enum value "groups"
	ApprovalNamespaceNamespaceGroups string = "groups"

	// ApprovalNamespaceNamespaceHistoricalDotAdherence captures enum value "historical.adherence"
	ApprovalNamespaceNamespaceHistoricalDotAdherence string = "historical.adherence"

	// ApprovalNamespaceNamespaceInfrastructureascode captures enum value "infrastructureascode"
	ApprovalNamespaceNamespaceInfrastructureascode string = "infrastructureascode"

	// ApprovalNamespaceNamespaceIntegrations captures enum value "integrations"
	ApprovalNamespaceNamespaceIntegrations string = "integrations"

	// ApprovalNamespaceNamespaceIntentDotMiner captures enum value "intent.miner"
	ApprovalNamespaceNamespaceIntentDotMiner string = "intent.miner"

	// ApprovalNamespaceNamespaceJourney captures enum value "journey"
	ApprovalNamespaceNamespaceJourney string = "journey"

	// ApprovalNamespaceNamespaceKnowledge captures enum value "knowledge"
	ApprovalNamespaceNamespaceKnowledge string = "knowledge"

	// ApprovalNamespaceNamespaceLanguageDotUnderstanding captures enum value "language.understanding"
	ApprovalNamespaceNamespaceLanguageDotUnderstanding string = "language.understanding"

	// ApprovalNamespaceNamespaceLimitDotRegistry captures enum value "limit.registry"
	ApprovalNamespaceNamespaceLimitDotRegistry string = "limit.registry"

	// ApprovalNamespaceNamespaceMarketplace captures enum value "marketplace"
	ApprovalNamespaceNamespaceMarketplace string = "marketplace"

	// ApprovalNamespaceNamespaceMessaging captures enum value "messaging"
	ApprovalNamespaceNamespaceMessaging string = "messaging"

	// ApprovalNamespaceNamespaceNotifications captures enum value "notifications"
	ApprovalNamespaceNamespaceNotifications string = "notifications"

	// ApprovalNamespaceNamespaceOnboarding captures enum value "onboarding"
	ApprovalNamespaceNamespaceOnboarding string = "onboarding"

	// ApprovalNamespaceNamespaceOutbound captures enum value "outbound"
	ApprovalNamespaceNamespaceOutbound string = "outbound"

	// ApprovalNamespaceNamespacePlatformDotAPI captures enum value "platform.api"
	ApprovalNamespaceNamespacePlatformDotAPI string = "platform.api"

	// ApprovalNamespaceNamespacePredictiveDotRouting captures enum value "predictive.routing"
	ApprovalNamespaceNamespacePredictiveDotRouting string = "predictive.routing"

	// ApprovalNamespaceNamespaceQuality captures enum value "quality"
	ApprovalNamespaceNamespaceQuality string = "quality"

	// ApprovalNamespaceNamespaceRecording captures enum value "recording"
	ApprovalNamespaceNamespaceRecording string = "recording"

	// ApprovalNamespaceNamespaceResponseDotManagement captures enum value "response.management"
	ApprovalNamespaceNamespaceResponseDotManagement string = "response.management"

	// ApprovalNamespaceNamespaceRouting captures enum value "routing"
	ApprovalNamespaceNamespaceRouting string = "routing"

	// ApprovalNamespaceNamespaceScim captures enum value "scim"
	ApprovalNamespaceNamespaceScim string = "scim"

	// ApprovalNamespaceNamespaceSearch captures enum value "search"
	ApprovalNamespaceNamespaceSearch string = "search"

	// ApprovalNamespaceNamespaceSecondaryDotAutomationDotTesting captures enum value "secondary.automation.testing"
	ApprovalNamespaceNamespaceSecondaryDotAutomationDotTesting string = "secondary.automation.testing"

	// ApprovalNamespaceNamespaceSkills captures enum value "skills"
	ApprovalNamespaceNamespaceSkills string = "skills"

	// ApprovalNamespaceNamespaceSpeechDotAndDotTextDotAnalytics captures enum value "speech.and.text.analytics"
	ApprovalNamespaceNamespaceSpeechDotAndDotTextDotAnalytics string = "speech.and.text.analytics"

	// ApprovalNamespaceNamespaceSpeechDotIntegration captures enum value "speech.integration"
	ApprovalNamespaceNamespaceSpeechDotIntegration string = "speech.integration"

	// ApprovalNamespaceNamespaceSupportability captures enum value "supportability"
	ApprovalNamespaceNamespaceSupportability string = "supportability"

	// ApprovalNamespaceNamespaceTaskDotManagement captures enum value "task.management"
	ApprovalNamespaceNamespaceTaskDotManagement string = "task.management"

	// ApprovalNamespaceNamespaceTelephonyDotConfiguration captures enum value "telephony.configuration"
	ApprovalNamespaceNamespaceTelephonyDotConfiguration string = "telephony.configuration"

	// ApprovalNamespaceNamespaceWebDotDeployments captures enum value "web.deployments"
	ApprovalNamespaceNamespaceWebDotDeployments string = "web.deployments"

	// ApprovalNamespaceNamespaceWebDotMessaging captures enum value "web.messaging"
	ApprovalNamespaceNamespaceWebDotMessaging string = "web.messaging"

	// ApprovalNamespaceNamespaceWebchat captures enum value "webchat"
	ApprovalNamespaceNamespaceWebchat string = "webchat"

	// ApprovalNamespaceNamespaceWebhooks captures enum value "webhooks"
	ApprovalNamespaceNamespaceWebhooks string = "webhooks"

	// ApprovalNamespaceNamespaceWorkforceDotManagement captures enum value "workforce.management"
	ApprovalNamespaceNamespaceWorkforceDotManagement string = "workforce.management"
)

// prop value enum
func (m *ApprovalNamespace) validateNamespaceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, approvalNamespaceTypeNamespacePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApprovalNamespace) validateNamespace(formats strfmt.Registry) error {
	if swag.IsZero(m.Namespace) { // not required
		return nil
	}

	// value enum
	if err := m.validateNamespaceEnum("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

var approvalNamespaceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Approved","Rejected","Rollback","Pending","Open","SecondaryApprovalNamespacesAdded","ReviewerApproved","ReviewerRejected","ReviewerRollback","ImplementingChange","ChangeImplemented","ImplementingRollback","RollbackImplemented"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		approvalNamespaceTypeStatusPropEnum = append(approvalNamespaceTypeStatusPropEnum, v)
	}
}

const (

	// ApprovalNamespaceStatusApproved captures enum value "Approved"
	ApprovalNamespaceStatusApproved string = "Approved"

	// ApprovalNamespaceStatusRejected captures enum value "Rejected"
	ApprovalNamespaceStatusRejected string = "Rejected"

	// ApprovalNamespaceStatusRollback captures enum value "Rollback"
	ApprovalNamespaceStatusRollback string = "Rollback"

	// ApprovalNamespaceStatusPending captures enum value "Pending"
	ApprovalNamespaceStatusPending string = "Pending"

	// ApprovalNamespaceStatusOpen captures enum value "Open"
	ApprovalNamespaceStatusOpen string = "Open"

	// ApprovalNamespaceStatusSecondaryApprovalNamespacesAdded captures enum value "SecondaryApprovalNamespacesAdded"
	ApprovalNamespaceStatusSecondaryApprovalNamespacesAdded string = "SecondaryApprovalNamespacesAdded"

	// ApprovalNamespaceStatusReviewerApproved captures enum value "ReviewerApproved"
	ApprovalNamespaceStatusReviewerApproved string = "ReviewerApproved"

	// ApprovalNamespaceStatusReviewerRejected captures enum value "ReviewerRejected"
	ApprovalNamespaceStatusReviewerRejected string = "ReviewerRejected"

	// ApprovalNamespaceStatusReviewerRollback captures enum value "ReviewerRollback"
	ApprovalNamespaceStatusReviewerRollback string = "ReviewerRollback"

	// ApprovalNamespaceStatusImplementingChange captures enum value "ImplementingChange"
	ApprovalNamespaceStatusImplementingChange string = "ImplementingChange"

	// ApprovalNamespaceStatusChangeImplemented captures enum value "ChangeImplemented"
	ApprovalNamespaceStatusChangeImplemented string = "ChangeImplemented"

	// ApprovalNamespaceStatusImplementingRollback captures enum value "ImplementingRollback"
	ApprovalNamespaceStatusImplementingRollback string = "ImplementingRollback"

	// ApprovalNamespaceStatusRollbackImplemented captures enum value "RollbackImplemented"
	ApprovalNamespaceStatusRollbackImplemented string = "RollbackImplemented"
)

// prop value enum
func (m *ApprovalNamespace) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, approvalNamespaceTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApprovalNamespace) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var approvalNamespaceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Primary","Secondary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		approvalNamespaceTypeTypePropEnum = append(approvalNamespaceTypeTypePropEnum, v)
	}
}

const (

	// ApprovalNamespaceTypePrimary captures enum value "Primary"
	ApprovalNamespaceTypePrimary string = "Primary"

	// ApprovalNamespaceTypeSecondary captures enum value "Secondary"
	ApprovalNamespaceTypeSecondary string = "Secondary"
)

// prop value enum
func (m *ApprovalNamespace) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, approvalNamespaceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApprovalNamespace) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this approval namespace based on the context it is used
func (m *ApprovalNamespace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNamespace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApprovalNamespace) contextValidateNamespace(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "namespace", "body", string(m.Namespace)); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalNamespace) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalNamespace) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApprovalNamespace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApprovalNamespace) UnmarshalBinary(b []byte) error {
	var res ApprovalNamespace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InboundRoute inbound route
//
// swagger:model InboundRoute
type InboundRoute struct {

	// The recipients that should be  automatically blind copied on outbound emails associated with this InboundRoute.
	AutoBcc []*EmailAddress `json:"autoBcc"`

	// The flow to use for processing the email.
	Flow *DomainEntityRef `json:"flow,omitempty"`

	// The sender email to use for outgoing replies.
	// Required: true
	FromEmail *string `json:"fromEmail"`

	// The sender name to use for outgoing replies.
	// Required: true
	FromName *string `json:"fromName"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The language to use for routing.
	Language *DomainEntityRef `json:"language,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The search pattern that the mailbox name should match.
	// Required: true
	Pattern *string `json:"pattern"`

	// The priority to use for routing.
	Priority int32 `json:"priority,omitempty"`

	// The queue to route the emails to.
	Queue *DomainEntityRef `json:"queue,omitempty"`

	// The route to use for email replies.
	ReplyEmailAddress *QueueEmailAddress `json:"replyEmailAddress,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The skills to use for routing.
	Skills []*DomainEntityRef `json:"skills"`

	// The flow to use for processing inbound emails that have been marked as spam.
	SpamFlow *DomainEntityRef `json:"spamFlow,omitempty"`
}

// Validate validates this inbound route
func (m *InboundRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoBcc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePattern(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplyEmailAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkills(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpamFlow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundRoute) validateAutoBcc(formats strfmt.Registry) error {

	if swag.IsZero(m.AutoBcc) { // not required
		return nil
	}

	for i := 0; i < len(m.AutoBcc); i++ {
		if swag.IsZero(m.AutoBcc[i]) { // not required
			continue
		}

		if m.AutoBcc[i] != nil {
			if err := m.AutoBcc[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("autoBcc" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InboundRoute) validateFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.Flow) { // not required
		return nil
	}

	if m.Flow != nil {
		if err := m.Flow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow")
			}
			return err
		}
	}

	return nil
}

func (m *InboundRoute) validateFromEmail(formats strfmt.Registry) error {

	if err := validate.Required("fromEmail", "body", m.FromEmail); err != nil {
		return err
	}

	return nil
}

func (m *InboundRoute) validateFromName(formats strfmt.Registry) error {

	if err := validate.Required("fromName", "body", m.FromName); err != nil {
		return err
	}

	return nil
}

func (m *InboundRoute) validateLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.Language) { // not required
		return nil
	}

	if m.Language != nil {
		if err := m.Language.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language")
			}
			return err
		}
	}

	return nil
}

func (m *InboundRoute) validatePattern(formats strfmt.Registry) error {

	if err := validate.Required("pattern", "body", m.Pattern); err != nil {
		return err
	}

	return nil
}

func (m *InboundRoute) validateQueue(formats strfmt.Registry) error {

	if swag.IsZero(m.Queue) { // not required
		return nil
	}

	if m.Queue != nil {
		if err := m.Queue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

func (m *InboundRoute) validateReplyEmailAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplyEmailAddress) { // not required
		return nil
	}

	if m.ReplyEmailAddress != nil {
		if err := m.ReplyEmailAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replyEmailAddress")
			}
			return err
		}
	}

	return nil
}

func (m *InboundRoute) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InboundRoute) validateSkills(formats strfmt.Registry) error {

	if swag.IsZero(m.Skills) { // not required
		return nil
	}

	for i := 0; i < len(m.Skills); i++ {
		if swag.IsZero(m.Skills[i]) { // not required
			continue
		}

		if m.Skills[i] != nil {
			if err := m.Skills[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("skills" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InboundRoute) validateSpamFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.SpamFlow) { // not required
		return nil
	}

	if m.SpamFlow != nil {
		if err := m.SpamFlow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spamFlow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InboundRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InboundRoute) UnmarshalBinary(b []byte) error {
	var res InboundRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

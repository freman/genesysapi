// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FlowObservationQuery flow observation query
//
// swagger:model FlowObservationQuery
type FlowObservationQuery struct {

	// Metrics for which to include additional detailed observations
	DetailMetrics []string `json:"detailMetrics"`

	// Filter to return a subset of observations. Expresses boolean logical predicates as well as dimensional filters
	// Required: true
	Filter *FlowObservationQueryFilter `json:"filter"`

	// Behaves like a SQL SELECT clause. Enables retrieving only named metrics. If omitted, all metrics that are available will be returned (like SELECT *).
	Metrics []string `json:"metrics"`
}

// Validate validates this flow observation query
func (m *FlowObservationQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetailMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var flowObservationQueryDetailMetricsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["oFlow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		flowObservationQueryDetailMetricsItemsEnum = append(flowObservationQueryDetailMetricsItemsEnum, v)
	}
}

func (m *FlowObservationQuery) validateDetailMetricsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, flowObservationQueryDetailMetricsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FlowObservationQuery) validateDetailMetrics(formats strfmt.Registry) error {

	if swag.IsZero(m.DetailMetrics) { // not required
		return nil
	}

	for i := 0; i < len(m.DetailMetrics); i++ {

		// value enum
		if err := m.validateDetailMetricsItemsEnum("detailMetrics"+"."+strconv.Itoa(i), "body", m.DetailMetrics[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *FlowObservationQuery) validateFilter(formats strfmt.Registry) error {

	if err := validate.Required("filter", "body", m.Filter); err != nil {
		return err
	}

	if m.Filter != nil {
		if err := m.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

var flowObservationQueryMetricsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["oFlow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		flowObservationQueryMetricsItemsEnum = append(flowObservationQueryMetricsItemsEnum, v)
	}
}

func (m *FlowObservationQuery) validateMetricsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, flowObservationQueryMetricsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FlowObservationQuery) validateMetrics(formats strfmt.Registry) error {

	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	for i := 0; i < len(m.Metrics); i++ {

		// value enum
		if err := m.validateMetricsItemsEnum("metrics"+"."+strconv.Itoa(i), "body", m.Metrics[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FlowObservationQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlowObservationQuery) UnmarshalBinary(b []byte) error {
	var res FlowObservationQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

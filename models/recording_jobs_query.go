// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecordingJobsQuery recording jobs query
//
// swagger:model RecordingJobsQuery
type RecordingJobsQuery struct {

	// Operation to perform bulk task. The date when the action will be performed can either be specified as an absolute date for all recordings with the actionDate/screenRecordingActionDate parameters, or as the number of days after each recording's creation time with the actionAge/screenRecordingActionAge parameters. If the operation will cause the delete date of a recording to be older than the export date, the export date will be adjusted to the delete date.
	// Required: true
	// Enum: [DELETE EXPORT]
	Action *string `json:"action"`

	// The date when the action will be performed. If screenRecordingActionDate is also provided, this value is only used for non-screen recordings. Otherwise this value is used for all recordings. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	ActionDate strfmt.DateTime `json:"actionDate,omitempty"`

	// Conversation Query. Note: After the recording is created, it might take up to 48 hours for the recording to be included in the submitted job query.  This result depends on the analytics data lake job completion. See also: https://developer.genesys.cloud/analyticsdatamanagement/analytics/jobs/conversation-details-job#data-availability
	// Required: true
	ConversationQuery *AsyncConversationQuery `json:"conversationQuery"`

	// Whether to include Screen recordings for the action, default value = true
	IncludeScreenRecordings bool `json:"includeScreenRecordings"`

	// IntegrationId to Access AWS S3 bucket for bulk recording exports. This field is required and used only for EXPORT action.
	IntegrationID string `json:"integrationId,omitempty"`
}

// Validate validates this recording jobs query
func (m *RecordingJobsQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversationQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var recordingJobsQueryTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DELETE","EXPORT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recordingJobsQueryTypeActionPropEnum = append(recordingJobsQueryTypeActionPropEnum, v)
	}
}

const (

	// RecordingJobsQueryActionDELETE captures enum value "DELETE"
	RecordingJobsQueryActionDELETE string = "DELETE"

	// RecordingJobsQueryActionEXPORT captures enum value "EXPORT"
	RecordingJobsQueryActionEXPORT string = "EXPORT"
)

// prop value enum
func (m *RecordingJobsQuery) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recordingJobsQueryTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecordingJobsQuery) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *RecordingJobsQuery) validateActionDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("actionDate", "body", "date-time", m.ActionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RecordingJobsQuery) validateConversationQuery(formats strfmt.Registry) error {

	if err := validate.Required("conversationQuery", "body", m.ConversationQuery); err != nil {
		return err
	}

	if m.ConversationQuery != nil {
		if err := m.ConversationQuery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversationQuery")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecordingJobsQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecordingJobsQuery) UnmarshalBinary(b []byte) error {
	var res RecordingJobsQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

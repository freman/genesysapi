// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CampaignTimeSlot campaign time slot
//
// swagger:model CampaignTimeSlot
type CampaignTimeSlot struct {

	// The day of the interval. Valid values: [1-7], representing Monday through Sunday
	// Required: true
	Day *int32 `json:"day"`

	// The start time of the interval as an ISO-8601 string, i.e. HH:mm:ss
	// Required: true
	StartTime *string `json:"startTime"`

	// The end time of the interval as an ISO-8601 string, i.e. HH:mm:ss
	// Required: true
	StopTime *string `json:"stopTime"`
}

// Validate validates this campaign time slot
func (m *CampaignTimeSlot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CampaignTimeSlot) validateDay(formats strfmt.Registry) error {

	if err := validate.Required("day", "body", m.Day); err != nil {
		return err
	}

	return nil
}

func (m *CampaignTimeSlot) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *CampaignTimeSlot) validateStopTime(formats strfmt.Registry) error {

	if err := validate.Required("stopTime", "body", m.StopTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CampaignTimeSlot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CampaignTimeSlot) UnmarshalBinary(b []byte) error {
	var res CampaignTimeSlot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

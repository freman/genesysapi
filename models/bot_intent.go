// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BotIntent A botConnector's bot intention
//
// swagger:model BotIntent
type BotIntent struct {

	// The name of this intent.  This can be up to 100 characters long and must be comprised of displayable characters without leading or trailing whitespace
	// Required: true
	Name *string `json:"name"`

	// Optional returned data values associated with this intent, limit of 50.
	Slots map[string]BotSlot `json:"slots,omitempty"`
}

// Validate validates this bot intent
func (m *BotIntent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BotIntent) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BotIntent) validateSlots(formats strfmt.Registry) error {
	if swag.IsZero(m.Slots) { // not required
		return nil
	}

	for k := range m.Slots {

		if err := validate.Required("slots"+"."+k, "body", m.Slots[k]); err != nil {
			return err
		}
		if val, ok := m.Slots[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("slots" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("slots" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this bot intent based on the context it is used
func (m *BotIntent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSlots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BotIntent) contextValidateSlots(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Slots {

		if val, ok := m.Slots[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BotIntent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BotIntent) UnmarshalBinary(b []byte) error {
	var res BotIntent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

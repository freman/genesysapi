// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnowledgeSearchResponse knowledge search response
//
// swagger:model KnowledgeSearchResponse
type KnowledgeSearchResponse struct {

	// Number of pages returned in the result calculated according to the pageSize and the total
	// Read Only: true
	PageCount int32 `json:"pageCount,omitempty"`

	// Current page number for the returned records
	// Read Only: true
	PageNumber int32 `json:"pageNumber,omitempty"`

	// Number of records according to the page size
	// Read Only: true
	PageSize int32 `json:"pageSize,omitempty"`

	// Results associated to the search response
	// Read Only: true
	Results []*KnowledgeSearchDocument `json:"results"`

	// Search Id
	// Read Only: true
	SearchID string `json:"searchId,omitempty"`

	// Total number of records returned
	// Read Only: true
	Total int32 `json:"total,omitempty"`
}

// Validate validates this knowledge search response
func (m *KnowledgeSearchResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeSearchResponse) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this knowledge search response based on the context it is used
func (m *KnowledgeSearchResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePageCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePageNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePageSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSearchID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeSearchResponse) contextValidatePageCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "pageCount", "body", int32(m.PageCount)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeSearchResponse) contextValidatePageNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "pageNumber", "body", int32(m.PageNumber)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeSearchResponse) contextValidatePageSize(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "pageSize", "body", int32(m.PageSize)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeSearchResponse) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "results", "body", []*KnowledgeSearchDocument(m.Results)); err != nil {
		return err
	}

	for i := 0; i < len(m.Results); i++ {

		if m.Results[i] != nil {
			if err := m.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KnowledgeSearchResponse) contextValidateSearchID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "searchId", "body", string(m.SearchID)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeSearchResponse) contextValidateTotal(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "total", "body", int32(m.Total)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KnowledgeSearchResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnowledgeSearchResponse) UnmarshalBinary(b []byte) error {
	var res KnowledgeSearchResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

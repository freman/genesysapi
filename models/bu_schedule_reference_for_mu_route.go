// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuScheduleReferenceForMuRoute bu schedule reference for mu route
//
// swagger:model BuScheduleReferenceForMuRoute
type BuScheduleReferenceForMuRoute struct {

	// The start week date for this schedule
	BusinessUnit *BusinessUnitReference `json:"businessUnit,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The start week date for this schedule. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	// Format: date
	WeekDate strfmt.Date `json:"weekDate,omitempty"`
}

// Validate validates this bu schedule reference for mu route
func (m *BuScheduleReferenceForMuRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuScheduleReferenceForMuRoute) validateBusinessUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessUnit) { // not required
		return nil
	}

	if m.BusinessUnit != nil {
		if err := m.BusinessUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("businessUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("businessUnit")
			}
			return err
		}
	}

	return nil
}

func (m *BuScheduleReferenceForMuRoute) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BuScheduleReferenceForMuRoute) validateWeekDate(formats strfmt.Registry) error {
	if swag.IsZero(m.WeekDate) { // not required
		return nil
	}

	if err := validate.FormatOf("weekDate", "body", "date", m.WeekDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this bu schedule reference for mu route based on the context it is used
func (m *BuScheduleReferenceForMuRoute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBusinessUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuScheduleReferenceForMuRoute) contextValidateBusinessUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.BusinessUnit != nil {
		if err := m.BusinessUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("businessUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("businessUnit")
			}
			return err
		}
	}

	return nil
}

func (m *BuScheduleReferenceForMuRoute) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *BuScheduleReferenceForMuRoute) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuScheduleReferenceForMuRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuScheduleReferenceForMuRoute) UnmarshalBinary(b []byte) error {
	var res BuScheduleReferenceForMuRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

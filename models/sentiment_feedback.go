// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SentimentFeedback sentiment feedback
//
// swagger:model SentimentFeedback
type SentimentFeedback struct {

	// The Id of user who created the sentiment feedback
	// Read Only: true
	CreatedBy *AddressableEntityRef `json:"createdBy,omitempty"`

	// The Timestamp when sentiment feedback created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The dialect for the given phrase, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard
	// Required: true
	Dialect *string `json:"dialect"`

	// The sentiment feedback value for the given phrase
	// Required: true
	// Enum: [Neutral Positive Negative]
	FeedbackValue *string `json:"feedbackValue"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The phrase for which sentiment feedback is provided
	// Required: true
	Phrase *string `json:"phrase"`
}

// Validate validates this sentiment feedback
func (m *SentimentFeedback) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDialect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedbackValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhrase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SentimentFeedback) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *SentimentFeedback) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SentimentFeedback) validateDialect(formats strfmt.Registry) error {

	if err := validate.Required("dialect", "body", m.Dialect); err != nil {
		return err
	}

	return nil
}

var sentimentFeedbackTypeFeedbackValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Neutral","Positive","Negative"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sentimentFeedbackTypeFeedbackValuePropEnum = append(sentimentFeedbackTypeFeedbackValuePropEnum, v)
	}
}

const (

	// SentimentFeedbackFeedbackValueNeutral captures enum value "Neutral"
	SentimentFeedbackFeedbackValueNeutral string = "Neutral"

	// SentimentFeedbackFeedbackValuePositive captures enum value "Positive"
	SentimentFeedbackFeedbackValuePositive string = "Positive"

	// SentimentFeedbackFeedbackValueNegative captures enum value "Negative"
	SentimentFeedbackFeedbackValueNegative string = "Negative"
)

// prop value enum
func (m *SentimentFeedback) validateFeedbackValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sentimentFeedbackTypeFeedbackValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SentimentFeedback) validateFeedbackValue(formats strfmt.Registry) error {

	if err := validate.Required("feedbackValue", "body", m.FeedbackValue); err != nil {
		return err
	}

	// value enum
	if err := m.validateFeedbackValueEnum("feedbackValue", "body", *m.FeedbackValue); err != nil {
		return err
	}

	return nil
}

func (m *SentimentFeedback) validatePhrase(formats strfmt.Registry) error {

	if err := validate.Required("phrase", "body", m.Phrase); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SentimentFeedback) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SentimentFeedback) UnmarshalBinary(b []byte) error {
	var res SentimentFeedback
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserQueue user queue
//
// swagger:model UserQueue
type UserQueue struct {

	// The ACW settings for the queue.
	AcwSettings *AcwSettings `json:"acwSettings,omitempty"`

	// The Agent Owned Routing settings for the queue
	AgentOwnedRouting *AgentOwnedRouting `json:"agentOwnedRouting,omitempty"`

	// The bullseye settings for the queue.
	Bullseye *Bullseye `json:"bullseye,omitempty"`

	// The name to use for caller identification for outbound calls from this queue.
	CallingPartyName string `json:"callingPartyName,omitempty"`

	// The phone number to use for caller identification for outbound calls from this queue.
	CallingPartyNumber string `json:"callingPartyNumber,omitempty"`

	// The ID of the user that created the queue.
	CreatedBy string `json:"createdBy,omitempty"`

	// The date the queue was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The date of the last modification to the queue. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The default script Ids for the communication types.
	DefaultScripts map[string]Script `json:"defaultScripts,omitempty"`

	// The queue description.
	Description string `json:"description,omitempty"`

	// The Direct Routing settings for the queue
	DirectRouting *DirectRouting `json:"directRouting,omitempty"`

	// The division to which this entity belongs.
	Division *Division `json:"division,omitempty"`

	// The in-queue flow to use for email conversations waiting in queue.
	EmailInQueueFlow *DomainEntityRef `json:"emailInQueueFlow,omitempty"`

	// Indicates whether manual assignment is enabled for this queue.
	EnableManualAssignment bool `json:"enableManualAssignment"`

	// Indicates whether voice transcription is enabled for this queue.
	EnableTranscription bool `json:"enableTranscription"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// joined
	Joined bool `json:"joined"`

	// The number of joined members in the queue.
	// Read Only: true
	JoinedMemberCount int32 `json:"joinedMemberCount,omitempty"`

	// The media settings for the queue. Valid key values: CALL, CALLBACK, CHAT, EMAIL, MESSAGE, SOCIAL_EXPRESSION, VIDEO_COMM
	MediaSettings map[string]MediaSetting `json:"mediaSettings,omitempty"`

	// The total number of members in the queue.
	// Read Only: true
	MemberCount int32 `json:"memberCount,omitempty"`

	// The groups of agents associated with the queue, if any.  Queue membership will update to match group membership changes.
	// Unique: true
	MemberGroups []*MemberGroup `json:"memberGroups"`

	// The in-queue flow to use for message conversations waiting in queue.
	MessageInQueueFlow *DomainEntityRef `json:"messageInQueueFlow,omitempty"`

	// The ID of the user that last modified the queue.
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The audio to be played when calls on this queue are on hold. If not configured, the default on-hold music will play.
	OnHoldPrompt *DomainEntityRef `json:"onHoldPrompt,omitempty"`

	// outbound email address
	OutboundEmailAddress *QueueEmailAddress `json:"outboundEmailAddress,omitempty"`

	// The messaging addresses for the queue.
	OutboundMessagingAddresses *QueueMessagingAddresses `json:"outboundMessagingAddresses,omitempty"`

	// The ID of an associated external queue.
	PeerID string `json:"peerId,omitempty"`

	// The in-queue flow to use for call conversations waiting in queue.
	QueueFlow *DomainEntityRef `json:"queueFlow,omitempty"`

	// The routing rules for the queue, used for Preferred Agent Routing.
	RoutingRules []*RoutingRule `json:"routingRules"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The skill evaluation method to use when routing conversations.
	// Enum: [NONE BEST ALL]
	SkillEvaluationMethod string `json:"skillEvaluationMethod,omitempty"`

	// The number of user members (i.e., non-group members) in the queue.
	// Read Only: true
	UserMemberCount int32 `json:"userMemberCount,omitempty"`

	// The prompt used for whisper on the queue, if configured.
	WhisperPrompt *DomainEntityRef `json:"whisperPrompt,omitempty"`
}

// Validate validates this user queue
func (m *UserQueue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcwSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentOwnedRouting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBullseye(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultScripts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectRouting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailInQueueFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageInQueueFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnHoldPrompt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutboundEmailAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutboundMessagingAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkillEvaluationMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhisperPrompt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserQueue) validateAcwSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.AcwSettings) { // not required
		return nil
	}

	if m.AcwSettings != nil {
		if err := m.AcwSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acwSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acwSettings")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) validateAgentOwnedRouting(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentOwnedRouting) { // not required
		return nil
	}

	if m.AgentOwnedRouting != nil {
		if err := m.AgentOwnedRouting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentOwnedRouting")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentOwnedRouting")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) validateBullseye(formats strfmt.Registry) error {
	if swag.IsZero(m.Bullseye) { // not required
		return nil
	}

	if m.Bullseye != nil {
		if err := m.Bullseye.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bullseye")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bullseye")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserQueue) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserQueue) validateDefaultScripts(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultScripts) { // not required
		return nil
	}

	for k := range m.DefaultScripts {

		if err := validate.Required("defaultScripts"+"."+k, "body", m.DefaultScripts[k]); err != nil {
			return err
		}
		if val, ok := m.DefaultScripts[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("defaultScripts" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("defaultScripts" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserQueue) validateDirectRouting(formats strfmt.Registry) error {
	if swag.IsZero(m.DirectRouting) { // not required
		return nil
	}

	if m.DirectRouting != nil {
		if err := m.DirectRouting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("directRouting")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("directRouting")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) validateDivision(formats strfmt.Registry) error {
	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if m.Division != nil {
		if err := m.Division.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) validateEmailInQueueFlow(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailInQueueFlow) { // not required
		return nil
	}

	if m.EmailInQueueFlow != nil {
		if err := m.EmailInQueueFlow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emailInQueueFlow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emailInQueueFlow")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) validateMediaSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.MediaSettings) { // not required
		return nil
	}

	for k := range m.MediaSettings {

		if err := validate.Required("mediaSettings"+"."+k, "body", m.MediaSettings[k]); err != nil {
			return err
		}
		if val, ok := m.MediaSettings[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mediaSettings" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mediaSettings" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserQueue) validateMemberGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.MemberGroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("memberGroups", "body", m.MemberGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.MemberGroups); i++ {
		if swag.IsZero(m.MemberGroups[i]) { // not required
			continue
		}

		if m.MemberGroups[i] != nil {
			if err := m.MemberGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserQueue) validateMessageInQueueFlow(formats strfmt.Registry) error {
	if swag.IsZero(m.MessageInQueueFlow) { // not required
		return nil
	}

	if m.MessageInQueueFlow != nil {
		if err := m.MessageInQueueFlow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messageInQueueFlow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("messageInQueueFlow")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) validateOnHoldPrompt(formats strfmt.Registry) error {
	if swag.IsZero(m.OnHoldPrompt) { // not required
		return nil
	}

	if m.OnHoldPrompt != nil {
		if err := m.OnHoldPrompt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onHoldPrompt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onHoldPrompt")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) validateOutboundEmailAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.OutboundEmailAddress) { // not required
		return nil
	}

	if m.OutboundEmailAddress != nil {
		if err := m.OutboundEmailAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outboundEmailAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outboundEmailAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) validateOutboundMessagingAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.OutboundMessagingAddresses) { // not required
		return nil
	}

	if m.OutboundMessagingAddresses != nil {
		if err := m.OutboundMessagingAddresses.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outboundMessagingAddresses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outboundMessagingAddresses")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) validateQueueFlow(formats strfmt.Registry) error {
	if swag.IsZero(m.QueueFlow) { // not required
		return nil
	}

	if m.QueueFlow != nil {
		if err := m.QueueFlow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queueFlow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queueFlow")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) validateRoutingRules(formats strfmt.Registry) error {
	if swag.IsZero(m.RoutingRules) { // not required
		return nil
	}

	for i := 0; i < len(m.RoutingRules); i++ {
		if swag.IsZero(m.RoutingRules[i]) { // not required
			continue
		}

		if m.RoutingRules[i] != nil {
			if err := m.RoutingRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routingRules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("routingRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserQueue) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var userQueueTypeSkillEvaluationMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","BEST","ALL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userQueueTypeSkillEvaluationMethodPropEnum = append(userQueueTypeSkillEvaluationMethodPropEnum, v)
	}
}

const (

	// UserQueueSkillEvaluationMethodNONE captures enum value "NONE"
	UserQueueSkillEvaluationMethodNONE string = "NONE"

	// UserQueueSkillEvaluationMethodBEST captures enum value "BEST"
	UserQueueSkillEvaluationMethodBEST string = "BEST"

	// UserQueueSkillEvaluationMethodALL captures enum value "ALL"
	UserQueueSkillEvaluationMethodALL string = "ALL"
)

// prop value enum
func (m *UserQueue) validateSkillEvaluationMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userQueueTypeSkillEvaluationMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserQueue) validateSkillEvaluationMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.SkillEvaluationMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateSkillEvaluationMethodEnum("skillEvaluationMethod", "body", m.SkillEvaluationMethod); err != nil {
		return err
	}

	return nil
}

func (m *UserQueue) validateWhisperPrompt(formats strfmt.Registry) error {
	if swag.IsZero(m.WhisperPrompt) { // not required
		return nil
	}

	if m.WhisperPrompt != nil {
		if err := m.WhisperPrompt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("whisperPrompt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("whisperPrompt")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user queue based on the context it is used
func (m *UserQueue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcwSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAgentOwnedRouting(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBullseye(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultScripts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDirectRouting(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDivision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmailInQueueFlow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJoinedMemberCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMediaSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemberCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemberGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessageInQueueFlow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnHoldPrompt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutboundEmailAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutboundMessagingAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueueFlow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoutingRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserMemberCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWhisperPrompt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserQueue) contextValidateAcwSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.AcwSettings != nil {
		if err := m.AcwSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acwSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acwSettings")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) contextValidateAgentOwnedRouting(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentOwnedRouting != nil {
		if err := m.AgentOwnedRouting.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentOwnedRouting")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentOwnedRouting")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) contextValidateBullseye(ctx context.Context, formats strfmt.Registry) error {

	if m.Bullseye != nil {
		if err := m.Bullseye.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bullseye")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bullseye")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) contextValidateDefaultScripts(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.DefaultScripts {

		if val, ok := m.DefaultScripts[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *UserQueue) contextValidateDirectRouting(ctx context.Context, formats strfmt.Registry) error {

	if m.DirectRouting != nil {
		if err := m.DirectRouting.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("directRouting")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("directRouting")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) contextValidateDivision(ctx context.Context, formats strfmt.Registry) error {

	if m.Division != nil {
		if err := m.Division.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) contextValidateEmailInQueueFlow(ctx context.Context, formats strfmt.Registry) error {

	if m.EmailInQueueFlow != nil {
		if err := m.EmailInQueueFlow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emailInQueueFlow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emailInQueueFlow")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *UserQueue) contextValidateJoinedMemberCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "joinedMemberCount", "body", int32(m.JoinedMemberCount)); err != nil {
		return err
	}

	return nil
}

func (m *UserQueue) contextValidateMediaSettings(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.MediaSettings {

		if val, ok := m.MediaSettings[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *UserQueue) contextValidateMemberCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "memberCount", "body", int32(m.MemberCount)); err != nil {
		return err
	}

	return nil
}

func (m *UserQueue) contextValidateMemberGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MemberGroups); i++ {

		if m.MemberGroups[i] != nil {
			if err := m.MemberGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserQueue) contextValidateMessageInQueueFlow(ctx context.Context, formats strfmt.Registry) error {

	if m.MessageInQueueFlow != nil {
		if err := m.MessageInQueueFlow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messageInQueueFlow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("messageInQueueFlow")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) contextValidateOnHoldPrompt(ctx context.Context, formats strfmt.Registry) error {

	if m.OnHoldPrompt != nil {
		if err := m.OnHoldPrompt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onHoldPrompt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onHoldPrompt")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) contextValidateOutboundEmailAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.OutboundEmailAddress != nil {
		if err := m.OutboundEmailAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outboundEmailAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outboundEmailAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) contextValidateOutboundMessagingAddresses(ctx context.Context, formats strfmt.Registry) error {

	if m.OutboundMessagingAddresses != nil {
		if err := m.OutboundMessagingAddresses.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outboundMessagingAddresses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outboundMessagingAddresses")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) contextValidateQueueFlow(ctx context.Context, formats strfmt.Registry) error {

	if m.QueueFlow != nil {
		if err := m.QueueFlow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queueFlow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queueFlow")
			}
			return err
		}
	}

	return nil
}

func (m *UserQueue) contextValidateRoutingRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RoutingRules); i++ {

		if m.RoutingRules[i] != nil {
			if err := m.RoutingRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routingRules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("routingRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserQueue) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *UserQueue) contextValidateUserMemberCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "userMemberCount", "body", int32(m.UserMemberCount)); err != nil {
		return err
	}

	return nil
}

func (m *UserQueue) contextValidateWhisperPrompt(ctx context.Context, formats strfmt.Registry) error {

	if m.WhisperPrompt != nil {
		if err := m.WhisperPrompt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("whisperPrompt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("whisperPrompt")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserQueue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserQueue) UnmarshalBinary(b []byte) error {
	var res UserQueue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConversationContentText Message content element containing text only.
//
// swagger:model ConversationContentText
type ConversationContentText struct {

	// Text to be shown for this content element.
	// Required: true
	Body *string `json:"body"`

	// Type of text content (Deprecated).
	// Enum: [Text]
	Type string `json:"type,omitempty"`
}

// Validate validates this conversation content text
func (m *ConversationContentText) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConversationContentText) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

var conversationContentTextTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Text"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conversationContentTextTypeTypePropEnum = append(conversationContentTextTypeTypePropEnum, v)
	}
}

const (

	// ConversationContentTextTypeText captures enum value "Text"
	ConversationContentTextTypeText string = "Text"
)

// prop value enum
func (m *ConversationContentText) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, conversationContentTextTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConversationContentText) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this conversation content text based on context it is used
func (m *ConversationContentText) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConversationContentText) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConversationContentText) UnmarshalBinary(b []byte) error {
	var res ConversationContentText
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

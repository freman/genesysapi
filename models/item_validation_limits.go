// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItemValidationLimits item validation limits
//
// swagger:model ItemValidationLimits
type ItemValidationLimits struct {

	// A structure denoting the system-imposed minimum and maximum string length (for text-based core types) or numeric values (for number-based) core types.  For example, the validationLimits for a text-based core type specify the min/max values for a minimum string length (minLength) constraint supplied by a schemaauthor on a text field.  Similarly, the maxLength's min/max specifies maximum string length constraint supplied by a schema author for the same field.
	// Example: \"validationLimits\": {\n\"minLength\": {\"min\": 0, \"max\": 100},\n\"maxLength\": {\"min\": 1, \"max\": 100}\n}
	// Required: true
	MaxLength *MaxLength `json:"maxLength"`

	// A structure denoting the system-imposed minimum string length (for text-based core types) or numeric values (for number-based) core types.  For example, the validationLimits for a text-based core type specify the min/max values for a minimum string length (minLength) constraint supplied by a schemaauthor on a text field.  Similarly, the maxLength's min/max specifies maximum string length constraint supplied by a schema author for the same field.
	// Example: \"minLength\": {\"min\": 0, \"max\": 100}
	// Required: true
	MinLength *MinLength `json:"minLength"`
}

// Validate validates this item validation limits
func (m *ItemValidationLimits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinLength(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemValidationLimits) validateMaxLength(formats strfmt.Registry) error {

	if err := validate.Required("maxLength", "body", m.MaxLength); err != nil {
		return err
	}

	if m.MaxLength != nil {
		if err := m.MaxLength.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxLength")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxLength")
			}
			return err
		}
	}

	return nil
}

func (m *ItemValidationLimits) validateMinLength(formats strfmt.Registry) error {

	if err := validate.Required("minLength", "body", m.MinLength); err != nil {
		return err
	}

	if m.MinLength != nil {
		if err := m.MinLength.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minLength")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minLength")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this item validation limits based on the context it is used
func (m *ItemValidationLimits) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMaxLength(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinLength(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemValidationLimits) contextValidateMaxLength(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxLength != nil {
		if err := m.MaxLength.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxLength")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxLength")
			}
			return err
		}
	}

	return nil
}

func (m *ItemValidationLimits) contextValidateMinLength(ctx context.Context, formats strfmt.Registry) error {

	if m.MinLength != nil {
		if err := m.MinLength.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minLength")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minLength")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItemValidationLimits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemValidationLimits) UnmarshalBinary(b []byte) error {
	var res ItemValidationLimits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

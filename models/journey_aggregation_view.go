// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JourneyAggregationView journey aggregation view
//
// swagger:model JourneyAggregationView
type JourneyAggregationView struct {

	// Type of view you wish to create
	// Required: true
	// Enum: [rangeBound]
	Function *string `json:"function"`

	// A unique name for this view. Must be distinct from other views and built-in metric names.
	// Required: true
	Name *string `json:"name"`

	// Range of numbers for slicing up data
	Range *AggregationRange `json:"range,omitempty"`

	// Target metric name
	// Required: true
	// Enum: [nDistinctJourneyActions nDistinctJourneySessions nJourneyActionsBlocked nJourneyOutcomesAchieved nJourneyOutcomesAttributed nJourneySegmentsAssigned nJourneySessions nWebActionsAbandoned nWebActionsAccepted nWebActionsEngaged nWebActionsErrored nWebActionsIgnored nWebActionsOffered nWebActionsQualified nWebActionsQualifiedOutsideSchedule nWebActionsRejected nWebActionsStarted nWebActionsTimedout nWebActionsFrequencyCapReached nWebActionsOfferedOutsideSchedule]
	Target *string `json:"target"`
}

// Validate validates this journey aggregation view
func (m *JourneyAggregationView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var journeyAggregationViewTypeFunctionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["rangeBound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		journeyAggregationViewTypeFunctionPropEnum = append(journeyAggregationViewTypeFunctionPropEnum, v)
	}
}

const (

	// JourneyAggregationViewFunctionRangeBound captures enum value "rangeBound"
	JourneyAggregationViewFunctionRangeBound string = "rangeBound"
)

// prop value enum
func (m *JourneyAggregationView) validateFunctionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, journeyAggregationViewTypeFunctionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JourneyAggregationView) validateFunction(formats strfmt.Registry) error {

	if err := validate.Required("function", "body", m.Function); err != nil {
		return err
	}

	// value enum
	if err := m.validateFunctionEnum("function", "body", *m.Function); err != nil {
		return err
	}

	return nil
}

func (m *JourneyAggregationView) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *JourneyAggregationView) validateRange(formats strfmt.Registry) error {

	if swag.IsZero(m.Range) { // not required
		return nil
	}

	if m.Range != nil {
		if err := m.Range.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

var journeyAggregationViewTypeTargetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nDistinctJourneyActions","nDistinctJourneySessions","nJourneyActionsBlocked","nJourneyOutcomesAchieved","nJourneyOutcomesAttributed","nJourneySegmentsAssigned","nJourneySessions","nWebActionsAbandoned","nWebActionsAccepted","nWebActionsEngaged","nWebActionsErrored","nWebActionsIgnored","nWebActionsOffered","nWebActionsQualified","nWebActionsQualifiedOutsideSchedule","nWebActionsRejected","nWebActionsStarted","nWebActionsTimedout","nWebActionsFrequencyCapReached","nWebActionsOfferedOutsideSchedule"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		journeyAggregationViewTypeTargetPropEnum = append(journeyAggregationViewTypeTargetPropEnum, v)
	}
}

const (

	// JourneyAggregationViewTargetNDistinctJourneyActions captures enum value "nDistinctJourneyActions"
	JourneyAggregationViewTargetNDistinctJourneyActions string = "nDistinctJourneyActions"

	// JourneyAggregationViewTargetNDistinctJourneySessions captures enum value "nDistinctJourneySessions"
	JourneyAggregationViewTargetNDistinctJourneySessions string = "nDistinctJourneySessions"

	// JourneyAggregationViewTargetNJourneyActionsBlocked captures enum value "nJourneyActionsBlocked"
	JourneyAggregationViewTargetNJourneyActionsBlocked string = "nJourneyActionsBlocked"

	// JourneyAggregationViewTargetNJourneyOutcomesAchieved captures enum value "nJourneyOutcomesAchieved"
	JourneyAggregationViewTargetNJourneyOutcomesAchieved string = "nJourneyOutcomesAchieved"

	// JourneyAggregationViewTargetNJourneyOutcomesAttributed captures enum value "nJourneyOutcomesAttributed"
	JourneyAggregationViewTargetNJourneyOutcomesAttributed string = "nJourneyOutcomesAttributed"

	// JourneyAggregationViewTargetNJourneySegmentsAssigned captures enum value "nJourneySegmentsAssigned"
	JourneyAggregationViewTargetNJourneySegmentsAssigned string = "nJourneySegmentsAssigned"

	// JourneyAggregationViewTargetNJourneySessions captures enum value "nJourneySessions"
	JourneyAggregationViewTargetNJourneySessions string = "nJourneySessions"

	// JourneyAggregationViewTargetNWebActionsAbandoned captures enum value "nWebActionsAbandoned"
	JourneyAggregationViewTargetNWebActionsAbandoned string = "nWebActionsAbandoned"

	// JourneyAggregationViewTargetNWebActionsAccepted captures enum value "nWebActionsAccepted"
	JourneyAggregationViewTargetNWebActionsAccepted string = "nWebActionsAccepted"

	// JourneyAggregationViewTargetNWebActionsEngaged captures enum value "nWebActionsEngaged"
	JourneyAggregationViewTargetNWebActionsEngaged string = "nWebActionsEngaged"

	// JourneyAggregationViewTargetNWebActionsErrored captures enum value "nWebActionsErrored"
	JourneyAggregationViewTargetNWebActionsErrored string = "nWebActionsErrored"

	// JourneyAggregationViewTargetNWebActionsIgnored captures enum value "nWebActionsIgnored"
	JourneyAggregationViewTargetNWebActionsIgnored string = "nWebActionsIgnored"

	// JourneyAggregationViewTargetNWebActionsOffered captures enum value "nWebActionsOffered"
	JourneyAggregationViewTargetNWebActionsOffered string = "nWebActionsOffered"

	// JourneyAggregationViewTargetNWebActionsQualified captures enum value "nWebActionsQualified"
	JourneyAggregationViewTargetNWebActionsQualified string = "nWebActionsQualified"

	// JourneyAggregationViewTargetNWebActionsQualifiedOutsideSchedule captures enum value "nWebActionsQualifiedOutsideSchedule"
	JourneyAggregationViewTargetNWebActionsQualifiedOutsideSchedule string = "nWebActionsQualifiedOutsideSchedule"

	// JourneyAggregationViewTargetNWebActionsRejected captures enum value "nWebActionsRejected"
	JourneyAggregationViewTargetNWebActionsRejected string = "nWebActionsRejected"

	// JourneyAggregationViewTargetNWebActionsStarted captures enum value "nWebActionsStarted"
	JourneyAggregationViewTargetNWebActionsStarted string = "nWebActionsStarted"

	// JourneyAggregationViewTargetNWebActionsTimedout captures enum value "nWebActionsTimedout"
	JourneyAggregationViewTargetNWebActionsTimedout string = "nWebActionsTimedout"

	// JourneyAggregationViewTargetNWebActionsFrequencyCapReached captures enum value "nWebActionsFrequencyCapReached"
	JourneyAggregationViewTargetNWebActionsFrequencyCapReached string = "nWebActionsFrequencyCapReached"

	// JourneyAggregationViewTargetNWebActionsOfferedOutsideSchedule captures enum value "nWebActionsOfferedOutsideSchedule"
	JourneyAggregationViewTargetNWebActionsOfferedOutsideSchedule string = "nWebActionsOfferedOutsideSchedule"
)

// prop value enum
func (m *JourneyAggregationView) validateTargetEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, journeyAggregationViewTypeTargetPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JourneyAggregationView) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetEnum("target", "body", *m.Target); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JourneyAggregationView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JourneyAggregationView) UnmarshalBinary(b []byte) error {
	var res JourneyAggregationView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

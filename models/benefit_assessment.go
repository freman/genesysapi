// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BenefitAssessment benefit assessment
//
// swagger:model BenefitAssessment
type BenefitAssessment struct {

	// Creation Date of the benefit assessment. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Modified Date of the benefit assessment. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// A set of key performance indicators applied on the queue to determine suitability of Predictive Routing.
	// Read Only: true
	KpiAssessments []*KeyPerformanceIndicatorAssessment `json:"kpiAssessments"`

	// The list of queues that are assessed for Predictive Routing benefit.
	// Read Only: true
	Queues []*AddressableEntityRef `json:"queues"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// State of the benefit assessment.
	// Read Only: true
	// Enum: [Created Finished Failed]
	State string `json:"state,omitempty"`
}

// Validate validates this benefit assessment
func (m *BenefitAssessment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKpiAssessments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BenefitAssessment) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BenefitAssessment) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BenefitAssessment) validateKpiAssessments(formats strfmt.Registry) error {
	if swag.IsZero(m.KpiAssessments) { // not required
		return nil
	}

	for i := 0; i < len(m.KpiAssessments); i++ {
		if swag.IsZero(m.KpiAssessments[i]) { // not required
			continue
		}

		if m.KpiAssessments[i] != nil {
			if err := m.KpiAssessments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kpiAssessments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kpiAssessments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BenefitAssessment) validateQueues(formats strfmt.Registry) error {
	if swag.IsZero(m.Queues) { // not required
		return nil
	}

	for i := 0; i < len(m.Queues); i++ {
		if swag.IsZero(m.Queues[i]) { // not required
			continue
		}

		if m.Queues[i] != nil {
			if err := m.Queues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("queues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BenefitAssessment) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var benefitAssessmentTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Created","Finished","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		benefitAssessmentTypeStatePropEnum = append(benefitAssessmentTypeStatePropEnum, v)
	}
}

const (

	// BenefitAssessmentStateCreated captures enum value "Created"
	BenefitAssessmentStateCreated string = "Created"

	// BenefitAssessmentStateFinished captures enum value "Finished"
	BenefitAssessmentStateFinished string = "Finished"

	// BenefitAssessmentStateFailed captures enum value "Failed"
	BenefitAssessmentStateFailed string = "Failed"
)

// prop value enum
func (m *BenefitAssessment) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, benefitAssessmentTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BenefitAssessment) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this benefit assessment based on the context it is used
func (m *BenefitAssessment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateModified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKpiAssessments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BenefitAssessment) contextValidateDateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateCreated", "body", strfmt.DateTime(m.DateCreated)); err != nil {
		return err
	}

	return nil
}

func (m *BenefitAssessment) contextValidateDateModified(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateModified", "body", strfmt.DateTime(m.DateModified)); err != nil {
		return err
	}

	return nil
}

func (m *BenefitAssessment) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *BenefitAssessment) contextValidateKpiAssessments(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "kpiAssessments", "body", []*KeyPerformanceIndicatorAssessment(m.KpiAssessments)); err != nil {
		return err
	}

	for i := 0; i < len(m.KpiAssessments); i++ {

		if m.KpiAssessments[i] != nil {
			if err := m.KpiAssessments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kpiAssessments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kpiAssessments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BenefitAssessment) contextValidateQueues(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "queues", "body", []*AddressableEntityRef(m.Queues)); err != nil {
		return err
	}

	for i := 0; i < len(m.Queues); i++ {

		if m.Queues[i] != nil {
			if err := m.Queues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("queues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BenefitAssessment) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *BenefitAssessment) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BenefitAssessment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BenefitAssessment) UnmarshalBinary(b []byte) error {
	var res BenefitAssessment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

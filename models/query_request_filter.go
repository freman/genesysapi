// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryRequestFilter query request filter
//
// swagger:model QueryRequestFilter
type QueryRequestFilter struct {

	// The list of clauses used to filter the data
	// Required: true
	Clauses []*QueryRequestClause `json:"clauses"`

	// The logic used to combine the clauses
	// Required: true
	// Enum: [And Or]
	Type *string `json:"type"`
}

// Validate validates this query request filter
func (m *QueryRequestFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClauses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryRequestFilter) validateClauses(formats strfmt.Registry) error {

	if err := validate.Required("clauses", "body", m.Clauses); err != nil {
		return err
	}

	for i := 0; i < len(m.Clauses); i++ {
		if swag.IsZero(m.Clauses[i]) { // not required
			continue
		}

		if m.Clauses[i] != nil {
			if err := m.Clauses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clauses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var queryRequestFilterTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["And","Or"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queryRequestFilterTypeTypePropEnum = append(queryRequestFilterTypeTypePropEnum, v)
	}
}

const (

	// QueryRequestFilterTypeAnd captures enum value "And"
	QueryRequestFilterTypeAnd string = "And"

	// QueryRequestFilterTypeOr captures enum value "Or"
	QueryRequestFilterTypeOr string = "Or"
)

// prop value enum
func (m *QueryRequestFilter) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, queryRequestFilterTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QueryRequestFilter) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryRequestFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryRequestFilter) UnmarshalBinary(b []byte) error {
	var res QueryRequestFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateBusinessUnitSettingsRequest create business unit settings request
//
// swagger:model CreateBusinessUnitSettingsRequest
type CreateBusinessUnitSettingsRequest struct {

	// Scheduling settings
	Scheduling *BuSchedulingSettingsRequest `json:"scheduling,omitempty"`

	// Short term forecasting settings
	ShortTermForecasting *BuShortTermForecastingSettings `json:"shortTermForecasting,omitempty"`

	// The start day of week for this business unit
	// Required: true
	// Enum: [Sunday Monday Tuesday Wednesday Thursday Friday Saturday]
	StartDayOfWeek *string `json:"startDayOfWeek"`

	// The time zone for this business unit, using the Olsen tz database format
	// Required: true
	TimeZone *string `json:"timeZone"`
}

// Validate validates this create business unit settings request
func (m *CreateBusinessUnitSettingsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScheduling(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortTermForecasting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDayOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBusinessUnitSettingsRequest) validateScheduling(formats strfmt.Registry) error {

	if swag.IsZero(m.Scheduling) { // not required
		return nil
	}

	if m.Scheduling != nil {
		if err := m.Scheduling.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduling")
			}
			return err
		}
	}

	return nil
}

func (m *CreateBusinessUnitSettingsRequest) validateShortTermForecasting(formats strfmt.Registry) error {

	if swag.IsZero(m.ShortTermForecasting) { // not required
		return nil
	}

	if m.ShortTermForecasting != nil {
		if err := m.ShortTermForecasting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shortTermForecasting")
			}
			return err
		}
	}

	return nil
}

var createBusinessUnitSettingsRequestTypeStartDayOfWeekPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createBusinessUnitSettingsRequestTypeStartDayOfWeekPropEnum = append(createBusinessUnitSettingsRequestTypeStartDayOfWeekPropEnum, v)
	}
}

const (

	// CreateBusinessUnitSettingsRequestStartDayOfWeekSunday captures enum value "Sunday"
	CreateBusinessUnitSettingsRequestStartDayOfWeekSunday string = "Sunday"

	// CreateBusinessUnitSettingsRequestStartDayOfWeekMonday captures enum value "Monday"
	CreateBusinessUnitSettingsRequestStartDayOfWeekMonday string = "Monday"

	// CreateBusinessUnitSettingsRequestStartDayOfWeekTuesday captures enum value "Tuesday"
	CreateBusinessUnitSettingsRequestStartDayOfWeekTuesday string = "Tuesday"

	// CreateBusinessUnitSettingsRequestStartDayOfWeekWednesday captures enum value "Wednesday"
	CreateBusinessUnitSettingsRequestStartDayOfWeekWednesday string = "Wednesday"

	// CreateBusinessUnitSettingsRequestStartDayOfWeekThursday captures enum value "Thursday"
	CreateBusinessUnitSettingsRequestStartDayOfWeekThursday string = "Thursday"

	// CreateBusinessUnitSettingsRequestStartDayOfWeekFriday captures enum value "Friday"
	CreateBusinessUnitSettingsRequestStartDayOfWeekFriday string = "Friday"

	// CreateBusinessUnitSettingsRequestStartDayOfWeekSaturday captures enum value "Saturday"
	CreateBusinessUnitSettingsRequestStartDayOfWeekSaturday string = "Saturday"
)

// prop value enum
func (m *CreateBusinessUnitSettingsRequest) validateStartDayOfWeekEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createBusinessUnitSettingsRequestTypeStartDayOfWeekPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateBusinessUnitSettingsRequest) validateStartDayOfWeek(formats strfmt.Registry) error {

	if err := validate.Required("startDayOfWeek", "body", m.StartDayOfWeek); err != nil {
		return err
	}

	// value enum
	if err := m.validateStartDayOfWeekEnum("startDayOfWeek", "body", *m.StartDayOfWeek); err != nil {
		return err
	}

	return nil
}

func (m *CreateBusinessUnitSettingsRequest) validateTimeZone(formats strfmt.Registry) error {

	if err := validate.Required("timeZone", "body", m.TimeZone); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateBusinessUnitSettingsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateBusinessUnitSettingsRequest) UnmarshalBinary(b []byte) error {
	var res CreateBusinessUnitSettingsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

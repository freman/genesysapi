// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LearningModuleRequest Learning module request
//
// swagger:model LearningModuleRequest
type LearningModuleRequest struct {

	// The completion time of learning module in days
	// Required: true
	CompletionTimeInDays *int32 `json:"completionTimeInDays"`

	// The description of learning module
	Description string `json:"description,omitempty"`

	// The list of inform steps in a learning module
	InformSteps []*LearningModuleInformStepRequest `json:"informSteps"`

	// The name of learning module
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this learning module request
func (m *LearningModuleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletionTimeInDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInformSteps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LearningModuleRequest) validateCompletionTimeInDays(formats strfmt.Registry) error {

	if err := validate.Required("completionTimeInDays", "body", m.CompletionTimeInDays); err != nil {
		return err
	}

	return nil
}

func (m *LearningModuleRequest) validateInformSteps(formats strfmt.Registry) error {

	if swag.IsZero(m.InformSteps) { // not required
		return nil
	}

	for i := 0; i < len(m.InformSteps); i++ {
		if swag.IsZero(m.InformSteps[i]) { // not required
			continue
		}

		if m.InformSteps[i] != nil {
			if err := m.InformSteps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("informSteps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LearningModuleRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LearningModuleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LearningModuleRequest) UnmarshalBinary(b []byte) error {
	var res LearningModuleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

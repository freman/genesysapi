// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PresenceSettings presence settings
//
// swagger:model PresenceSettings
type PresenceSettings struct {

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The settings for the restore presence feature
	RestorePresenceSettings *RestorePresenceSettings `json:"restorePresenceSettings,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this presence settings
func (m *PresenceSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRestorePresenceSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PresenceSettings) validateRestorePresenceSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.RestorePresenceSettings) { // not required
		return nil
	}

	if m.RestorePresenceSettings != nil {
		if err := m.RestorePresenceSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restorePresenceSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restorePresenceSettings")
			}
			return err
		}
	}

	return nil
}

func (m *PresenceSettings) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this presence settings based on the context it is used
func (m *PresenceSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestorePresenceSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PresenceSettings) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *PresenceSettings) contextValidateRestorePresenceSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.RestorePresenceSettings != nil {
		if err := m.RestorePresenceSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restorePresenceSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restorePresenceSettings")
			}
			return err
		}
	}

	return nil
}

func (m *PresenceSettings) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PresenceSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PresenceSettings) UnmarshalBinary(b []byte) error {
	var res PresenceSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

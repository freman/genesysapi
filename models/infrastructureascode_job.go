// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InfrastructureascodeJob Information about a CX infrastructure as code job
//
// swagger:model InfrastructureascodeJob
type InfrastructureascodeJob struct {

	// dateSubmitted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateSubmitted strfmt.DateTime `json:"dateSubmitted,omitempty"`

	// dryRun
	// Required: true
	DryRun *bool `json:"dryRun"`

	// errorInfo
	// Read Only: true
	ErrorInfo *ErrorInfo `json:"errorInfo,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// results
	// Read Only: true
	Results string `json:"results,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// status
	// Read Only: true
	// Enum: [Created Queued Running Complete Failed Incomplete]
	Status string `json:"status,omitempty"`

	// submittedBy
	// Read Only: true
	SubmittedBy *UserReference `json:"submittedBy,omitempty"`
}

// Validate validates this infrastructureascode job
func (m *InfrastructureascodeJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateSubmitted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDryRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfrastructureascodeJob) validateDateSubmitted(formats strfmt.Registry) error {
	if swag.IsZero(m.DateSubmitted) { // not required
		return nil
	}

	if err := validate.FormatOf("dateSubmitted", "body", "date-time", m.DateSubmitted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InfrastructureascodeJob) validateDryRun(formats strfmt.Registry) error {

	if err := validate.Required("dryRun", "body", m.DryRun); err != nil {
		return err
	}

	return nil
}

func (m *InfrastructureascodeJob) validateErrorInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorInfo) { // not required
		return nil
	}

	if m.ErrorInfo != nil {
		if err := m.ErrorInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInfo")
			}
			return err
		}
	}

	return nil
}

func (m *InfrastructureascodeJob) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var infrastructureascodeJobTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Created","Queued","Running","Complete","Failed","Incomplete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		infrastructureascodeJobTypeStatusPropEnum = append(infrastructureascodeJobTypeStatusPropEnum, v)
	}
}

const (

	// InfrastructureascodeJobStatusCreated captures enum value "Created"
	InfrastructureascodeJobStatusCreated string = "Created"

	// InfrastructureascodeJobStatusQueued captures enum value "Queued"
	InfrastructureascodeJobStatusQueued string = "Queued"

	// InfrastructureascodeJobStatusRunning captures enum value "Running"
	InfrastructureascodeJobStatusRunning string = "Running"

	// InfrastructureascodeJobStatusComplete captures enum value "Complete"
	InfrastructureascodeJobStatusComplete string = "Complete"

	// InfrastructureascodeJobStatusFailed captures enum value "Failed"
	InfrastructureascodeJobStatusFailed string = "Failed"

	// InfrastructureascodeJobStatusIncomplete captures enum value "Incomplete"
	InfrastructureascodeJobStatusIncomplete string = "Incomplete"
)

// prop value enum
func (m *InfrastructureascodeJob) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, infrastructureascodeJobTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InfrastructureascodeJob) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *InfrastructureascodeJob) validateSubmittedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmittedBy) { // not required
		return nil
	}

	if m.SubmittedBy != nil {
		if err := m.SubmittedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("submittedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("submittedBy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this infrastructureascode job based on the context it is used
func (m *InfrastructureascodeJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateSubmitted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubmittedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfrastructureascodeJob) contextValidateDateSubmitted(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateSubmitted", "body", strfmt.DateTime(m.DateSubmitted)); err != nil {
		return err
	}

	return nil
}

func (m *InfrastructureascodeJob) contextValidateErrorInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ErrorInfo != nil {
		if err := m.ErrorInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInfo")
			}
			return err
		}
	}

	return nil
}

func (m *InfrastructureascodeJob) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *InfrastructureascodeJob) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "results", "body", string(m.Results)); err != nil {
		return err
	}

	return nil
}

func (m *InfrastructureascodeJob) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *InfrastructureascodeJob) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *InfrastructureascodeJob) contextValidateSubmittedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.SubmittedBy != nil {
		if err := m.SubmittedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("submittedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("submittedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfrastructureascodeJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfrastructureascodeJob) UnmarshalBinary(b []byte) error {
	var res InfrastructureascodeJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

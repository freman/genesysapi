// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelingProcessingError modeling processing error
//
// swagger:model ModelingProcessingError
type ModelingProcessingError struct {

	// A text description of the error
	// Read Only: true
	Description string `json:"description,omitempty"`

	// An internal code representing the type of error. ModelInputMissing for 'Model Builder inputs not found.' ModelInputInvalid for 'Model Builder inputs are invalid. Ensure the input data format is correct.' ModelFailed for 'An error occured while building the model with the given input.'
	// Read Only: true
	// Enum: [ModelInputMissing ModelInputInvalid ModelFailed]
	InternalErrorCode string `json:"internalErrorCode,omitempty"`
}

// Validate validates this modeling processing error
func (m *ModelingProcessingError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInternalErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var modelingProcessingErrorTypeInternalErrorCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ModelInputMissing","ModelInputInvalid","ModelFailed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelingProcessingErrorTypeInternalErrorCodePropEnum = append(modelingProcessingErrorTypeInternalErrorCodePropEnum, v)
	}
}

const (

	// ModelingProcessingErrorInternalErrorCodeModelInputMissing captures enum value "ModelInputMissing"
	ModelingProcessingErrorInternalErrorCodeModelInputMissing string = "ModelInputMissing"

	// ModelingProcessingErrorInternalErrorCodeModelInputInvalid captures enum value "ModelInputInvalid"
	ModelingProcessingErrorInternalErrorCodeModelInputInvalid string = "ModelInputInvalid"

	// ModelingProcessingErrorInternalErrorCodeModelFailed captures enum value "ModelFailed"
	ModelingProcessingErrorInternalErrorCodeModelFailed string = "ModelFailed"
)

// prop value enum
func (m *ModelingProcessingError) validateInternalErrorCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, modelingProcessingErrorTypeInternalErrorCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ModelingProcessingError) validateInternalErrorCode(formats strfmt.Registry) error {
	if swag.IsZero(m.InternalErrorCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateInternalErrorCodeEnum("internalErrorCode", "body", m.InternalErrorCode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this modeling processing error based on the context it is used
func (m *ModelingProcessingError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInternalErrorCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelingProcessingError) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *ModelingProcessingError) contextValidateInternalErrorCode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "internalErrorCode", "body", string(m.InternalErrorCode)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelingProcessingError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelingProcessingError) UnmarshalBinary(b []byte) error {
	var res ModelingProcessingError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

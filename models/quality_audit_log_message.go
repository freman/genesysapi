// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QualityAuditLogMessage quality audit log message
//
// swagger:model QualityAuditLogMessage
type QualityAuditLogMessage struct {

	// Action that took place.
	// Enum: [Read Create Update Delete Abandon Archive Export RestoreRequest RestoreComplete ApplyProtection RevokeProtection UpdateRetention]
	Action string `json:"action,omitempty"`

	// Client associated with this audit message.
	Client *AddressableEntityRef `json:"client,omitempty"`

	// Additional context for this message.
	Context map[string]string `json:"context,omitempty"`

	// Entity that was impacted.
	Entity *DomainEntityRef `json:"entity,omitempty"`

	// Type of the entity that was impacted.
	// Enum: [Recording Evaluation Calibration Annotation ScreenRecording Survey]
	EntityType string `json:"entityType,omitempty"`

	// Date and time of when the audit message was logged. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	EventDate strfmt.DateTime `json:"eventDate,omitempty"`

	// Id of the audit message.
	ID string `json:"id,omitempty"`

	// The level of this audit message.
	// Enum: [User System]
	Level string `json:"level,omitempty"`

	// Message describing the event being audited.
	MessageInfo *MessageInfo `json:"messageInfo,omitempty"`

	// List of properties that were changed and changes made to those properties.
	PropertyChanges []*PropertyChange `json:"propertyChanges"`

	// List of IP addresses of systems that originated or handled the request.
	RemoteIps []string `json:"remoteIps"`

	// Name of the service that logged this audit message.
	// Enum: [RecordingService RecordingPlaybackService QualityService]
	ServiceName string `json:"serviceName,omitempty"`

	// The status of the action of this audit message.
	// Enum: [Success Failure Warning]
	Status string `json:"status,omitempty"`

	// User associated with this audit message.
	User *DomainEntityRef `json:"user,omitempty"`

	// Home Organization Id associated with this audit message.
	UserHomeOrgID string `json:"userHomeOrgId,omitempty"`

	// Trustee Organization Id if this audit message is from trustee access.
	UserTrusteeOrgID string `json:"userTrusteeOrgId,omitempty"`
}

// Validate validates this quality audit log message
func (m *QualityAuditLogMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePropertyChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var qualityAuditLogMessageTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Read","Create","Update","Delete","Abandon","Archive","Export","RestoreRequest","RestoreComplete","ApplyProtection","RevokeProtection","UpdateRetention"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		qualityAuditLogMessageTypeActionPropEnum = append(qualityAuditLogMessageTypeActionPropEnum, v)
	}
}

const (

	// QualityAuditLogMessageActionRead captures enum value "Read"
	QualityAuditLogMessageActionRead string = "Read"

	// QualityAuditLogMessageActionCreate captures enum value "Create"
	QualityAuditLogMessageActionCreate string = "Create"

	// QualityAuditLogMessageActionUpdate captures enum value "Update"
	QualityAuditLogMessageActionUpdate string = "Update"

	// QualityAuditLogMessageActionDelete captures enum value "Delete"
	QualityAuditLogMessageActionDelete string = "Delete"

	// QualityAuditLogMessageActionAbandon captures enum value "Abandon"
	QualityAuditLogMessageActionAbandon string = "Abandon"

	// QualityAuditLogMessageActionArchive captures enum value "Archive"
	QualityAuditLogMessageActionArchive string = "Archive"

	// QualityAuditLogMessageActionExport captures enum value "Export"
	QualityAuditLogMessageActionExport string = "Export"

	// QualityAuditLogMessageActionRestoreRequest captures enum value "RestoreRequest"
	QualityAuditLogMessageActionRestoreRequest string = "RestoreRequest"

	// QualityAuditLogMessageActionRestoreComplete captures enum value "RestoreComplete"
	QualityAuditLogMessageActionRestoreComplete string = "RestoreComplete"

	// QualityAuditLogMessageActionApplyProtection captures enum value "ApplyProtection"
	QualityAuditLogMessageActionApplyProtection string = "ApplyProtection"

	// QualityAuditLogMessageActionRevokeProtection captures enum value "RevokeProtection"
	QualityAuditLogMessageActionRevokeProtection string = "RevokeProtection"

	// QualityAuditLogMessageActionUpdateRetention captures enum value "UpdateRetention"
	QualityAuditLogMessageActionUpdateRetention string = "UpdateRetention"
)

// prop value enum
func (m *QualityAuditLogMessage) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, qualityAuditLogMessageTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QualityAuditLogMessage) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *QualityAuditLogMessage) validateClient(formats strfmt.Registry) error {
	if swag.IsZero(m.Client) { // not required
		return nil
	}

	if m.Client != nil {
		if err := m.Client.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

func (m *QualityAuditLogMessage) validateEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	if m.Entity != nil {
		if err := m.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

var qualityAuditLogMessageTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Recording","Evaluation","Calibration","Annotation","ScreenRecording","Survey"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		qualityAuditLogMessageTypeEntityTypePropEnum = append(qualityAuditLogMessageTypeEntityTypePropEnum, v)
	}
}

const (

	// QualityAuditLogMessageEntityTypeRecording captures enum value "Recording"
	QualityAuditLogMessageEntityTypeRecording string = "Recording"

	// QualityAuditLogMessageEntityTypeEvaluation captures enum value "Evaluation"
	QualityAuditLogMessageEntityTypeEvaluation string = "Evaluation"

	// QualityAuditLogMessageEntityTypeCalibration captures enum value "Calibration"
	QualityAuditLogMessageEntityTypeCalibration string = "Calibration"

	// QualityAuditLogMessageEntityTypeAnnotation captures enum value "Annotation"
	QualityAuditLogMessageEntityTypeAnnotation string = "Annotation"

	// QualityAuditLogMessageEntityTypeScreenRecording captures enum value "ScreenRecording"
	QualityAuditLogMessageEntityTypeScreenRecording string = "ScreenRecording"

	// QualityAuditLogMessageEntityTypeSurvey captures enum value "Survey"
	QualityAuditLogMessageEntityTypeSurvey string = "Survey"
)

// prop value enum
func (m *QualityAuditLogMessage) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, qualityAuditLogMessageTypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QualityAuditLogMessage) validateEntityType(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entityType", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *QualityAuditLogMessage) validateEventDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EventDate) { // not required
		return nil
	}

	if err := validate.FormatOf("eventDate", "body", "date-time", m.EventDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var qualityAuditLogMessageTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["User","System"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		qualityAuditLogMessageTypeLevelPropEnum = append(qualityAuditLogMessageTypeLevelPropEnum, v)
	}
}

const (

	// QualityAuditLogMessageLevelUser captures enum value "User"
	QualityAuditLogMessageLevelUser string = "User"

	// QualityAuditLogMessageLevelSystem captures enum value "System"
	QualityAuditLogMessageLevelSystem string = "System"
)

// prop value enum
func (m *QualityAuditLogMessage) validateLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, qualityAuditLogMessageTypeLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QualityAuditLogMessage) validateLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

func (m *QualityAuditLogMessage) validateMessageInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.MessageInfo) { // not required
		return nil
	}

	if m.MessageInfo != nil {
		if err := m.MessageInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messageInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("messageInfo")
			}
			return err
		}
	}

	return nil
}

func (m *QualityAuditLogMessage) validatePropertyChanges(formats strfmt.Registry) error {
	if swag.IsZero(m.PropertyChanges) { // not required
		return nil
	}

	for i := 0; i < len(m.PropertyChanges); i++ {
		if swag.IsZero(m.PropertyChanges[i]) { // not required
			continue
		}

		if m.PropertyChanges[i] != nil {
			if err := m.PropertyChanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("propertyChanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("propertyChanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var qualityAuditLogMessageTypeServiceNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RecordingService","RecordingPlaybackService","QualityService"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		qualityAuditLogMessageTypeServiceNamePropEnum = append(qualityAuditLogMessageTypeServiceNamePropEnum, v)
	}
}

const (

	// QualityAuditLogMessageServiceNameRecordingService captures enum value "RecordingService"
	QualityAuditLogMessageServiceNameRecordingService string = "RecordingService"

	// QualityAuditLogMessageServiceNameRecordingPlaybackService captures enum value "RecordingPlaybackService"
	QualityAuditLogMessageServiceNameRecordingPlaybackService string = "RecordingPlaybackService"

	// QualityAuditLogMessageServiceNameQualityService captures enum value "QualityService"
	QualityAuditLogMessageServiceNameQualityService string = "QualityService"
)

// prop value enum
func (m *QualityAuditLogMessage) validateServiceNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, qualityAuditLogMessageTypeServiceNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QualityAuditLogMessage) validateServiceName(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceName) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceNameEnum("serviceName", "body", m.ServiceName); err != nil {
		return err
	}

	return nil
}

var qualityAuditLogMessageTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Success","Failure","Warning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		qualityAuditLogMessageTypeStatusPropEnum = append(qualityAuditLogMessageTypeStatusPropEnum, v)
	}
}

const (

	// QualityAuditLogMessageStatusSuccess captures enum value "Success"
	QualityAuditLogMessageStatusSuccess string = "Success"

	// QualityAuditLogMessageStatusFailure captures enum value "Failure"
	QualityAuditLogMessageStatusFailure string = "Failure"

	// QualityAuditLogMessageStatusWarning captures enum value "Warning"
	QualityAuditLogMessageStatusWarning string = "Warning"
)

// prop value enum
func (m *QualityAuditLogMessage) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, qualityAuditLogMessageTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QualityAuditLogMessage) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *QualityAuditLogMessage) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this quality audit log message based on the context it is used
func (m *QualityAuditLogMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessageInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePropertyChanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QualityAuditLogMessage) contextValidateClient(ctx context.Context, formats strfmt.Registry) error {

	if m.Client != nil {
		if err := m.Client.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

func (m *QualityAuditLogMessage) contextValidateEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.Entity != nil {
		if err := m.Entity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *QualityAuditLogMessage) contextValidateMessageInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.MessageInfo != nil {
		if err := m.MessageInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messageInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("messageInfo")
			}
			return err
		}
	}

	return nil
}

func (m *QualityAuditLogMessage) contextValidatePropertyChanges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PropertyChanges); i++ {

		if m.PropertyChanges[i] != nil {
			if err := m.PropertyChanges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("propertyChanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("propertyChanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QualityAuditLogMessage) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QualityAuditLogMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QualityAuditLogMessage) UnmarshalBinary(b []byte) error {
	var res QualityAuditLogMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CallHistoryConversation call history conversation
//
// swagger:model CallHistoryConversation
type CallHistoryConversation struct {

	// The direction of the call relating to the current user
	// Enum: [inbound outbound]
	Direction string `json:"direction,omitempty"`

	// Did this conversation have a cobrowse session
	HadCobrowse bool `json:"hadCobrowse,omitempty"`

	// Did this conversation have a screen share session
	HadScreenShare bool `json:"hadScreenShare,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Did the user not answer this conversation
	MissedCall bool `json:"missedCall,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The list of participants involved in the conversation.
	Participants []*CallHistoryParticipant `json:"participants"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The time the user joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// Was this conversation a callback
	WasCallback bool `json:"wasCallback,omitempty"`

	// Was this conversation a conference
	WasConference bool `json:"wasConference,omitempty"`

	// Was this conversation associated with an outbound campaign
	WasOutboundCampaign bool `json:"wasOutboundCampaign,omitempty"`

	// Did the call end in the current user's voicemail
	WentToVoicemail bool `json:"wentToVoicemail,omitempty"`
}

// Validate validates this call history conversation
func (m *CallHistoryConversation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipants(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var callHistoryConversationTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["inbound","outbound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callHistoryConversationTypeDirectionPropEnum = append(callHistoryConversationTypeDirectionPropEnum, v)
	}
}

const (

	// CallHistoryConversationDirectionInbound captures enum value "inbound"
	CallHistoryConversationDirectionInbound string = "inbound"

	// CallHistoryConversationDirectionOutbound captures enum value "outbound"
	CallHistoryConversationDirectionOutbound string = "outbound"
)

// prop value enum
func (m *CallHistoryConversation) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, callHistoryConversationTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CallHistoryConversation) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *CallHistoryConversation) validateParticipants(formats strfmt.Registry) error {

	if swag.IsZero(m.Participants) { // not required
		return nil
	}

	for i := 0; i < len(m.Participants); i++ {
		if swag.IsZero(m.Participants[i]) { // not required
			continue
		}

		if m.Participants[i] != nil {
			if err := m.Participants[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("participants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CallHistoryConversation) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CallHistoryConversation) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CallHistoryConversation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CallHistoryConversation) UnmarshalBinary(b []byte) error {
	var res CallHistoryConversation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CoachingAppointmentStatusResponse coaching appointment status response
//
// swagger:model CoachingAppointmentStatusResponse
type CoachingAppointmentStatusResponse struct {

	// The coaching appointment this status belongs to
	// Read Only: true
	Appointment *CoachingAppointmentReference `json:"appointment,omitempty"`

	// User who updated the status
	// Read Only: true
	CreatedBy *UserReference `json:"createdBy,omitempty"`

	// Creation time of the status. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The status of the coaching appointment
	// Read Only: true
	// Enum: [Scheduled InProgress Completed InvalidSchedule]
	Status string `json:"status,omitempty"`
}

// Validate validates this coaching appointment status response
func (m *CoachingAppointmentStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppointment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CoachingAppointmentStatusResponse) validateAppointment(formats strfmt.Registry) error {

	if swag.IsZero(m.Appointment) { // not required
		return nil
	}

	if m.Appointment != nil {
		if err := m.Appointment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointment")
			}
			return err
		}
	}

	return nil
}

func (m *CoachingAppointmentStatusResponse) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *CoachingAppointmentStatusResponse) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

var coachingAppointmentStatusResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Scheduled","InProgress","Completed","InvalidSchedule"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		coachingAppointmentStatusResponseTypeStatusPropEnum = append(coachingAppointmentStatusResponseTypeStatusPropEnum, v)
	}
}

const (

	// CoachingAppointmentStatusResponseStatusScheduled captures enum value "Scheduled"
	CoachingAppointmentStatusResponseStatusScheduled string = "Scheduled"

	// CoachingAppointmentStatusResponseStatusInProgress captures enum value "InProgress"
	CoachingAppointmentStatusResponseStatusInProgress string = "InProgress"

	// CoachingAppointmentStatusResponseStatusCompleted captures enum value "Completed"
	CoachingAppointmentStatusResponseStatusCompleted string = "Completed"

	// CoachingAppointmentStatusResponseStatusInvalidSchedule captures enum value "InvalidSchedule"
	CoachingAppointmentStatusResponseStatusInvalidSchedule string = "InvalidSchedule"
)

// prop value enum
func (m *CoachingAppointmentStatusResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, coachingAppointmentStatusResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CoachingAppointmentStatusResponse) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CoachingAppointmentStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoachingAppointmentStatusResponse) UnmarshalBinary(b []byte) error {
	var res CoachingAppointmentStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

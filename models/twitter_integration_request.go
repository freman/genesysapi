// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TwitterIntegrationRequest twitter integration request
//
// swagger:model TwitterIntegrationRequest
type TwitterIntegrationRequest struct {

	// The Access Token Key from Twitter messenger
	// Required: true
	AccessTokenKey *string `json:"accessTokenKey"`

	// The Access Token Secret from Twitter messenger
	// Required: true
	AccessTokenSecret *string `json:"accessTokenSecret"`

	// The Consumer Key from Twitter messenger
	// Required: true
	ConsumerKey *string `json:"consumerKey"`

	// The Consumer Secret from Twitter messenger
	// Required: true
	ConsumerSecret *string `json:"consumerSecret"`

	// The Twitter environment name, e.g.: env-beta (required for premium tier)
	EnvName string `json:"envName,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Defines the message settings to be applied for this integration
	MessagingSetting *MessagingSettingRequestReference `json:"messagingSetting,omitempty"`

	// The name of the Twitter Integration
	// Required: true
	Name *string `json:"name"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// Defines the SupportedContent profile configured for an integration
	SupportedContent *SupportedContentReference `json:"supportedContent,omitempty"`

	// The type of twitter account to be used for the integration
	// Required: true
	// Enum: [premium enterprise]
	Tier *string `json:"tier"`
}

// Validate validates this twitter integration request
func (m *TwitterIntegrationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessTokenKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessTokenSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsumerKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsumerSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessagingSetting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TwitterIntegrationRequest) validateAccessTokenKey(formats strfmt.Registry) error {

	if err := validate.Required("accessTokenKey", "body", m.AccessTokenKey); err != nil {
		return err
	}

	return nil
}

func (m *TwitterIntegrationRequest) validateAccessTokenSecret(formats strfmt.Registry) error {

	if err := validate.Required("accessTokenSecret", "body", m.AccessTokenSecret); err != nil {
		return err
	}

	return nil
}

func (m *TwitterIntegrationRequest) validateConsumerKey(formats strfmt.Registry) error {

	if err := validate.Required("consumerKey", "body", m.ConsumerKey); err != nil {
		return err
	}

	return nil
}

func (m *TwitterIntegrationRequest) validateConsumerSecret(formats strfmt.Registry) error {

	if err := validate.Required("consumerSecret", "body", m.ConsumerSecret); err != nil {
		return err
	}

	return nil
}

func (m *TwitterIntegrationRequest) validateMessagingSetting(formats strfmt.Registry) error {
	if swag.IsZero(m.MessagingSetting) { // not required
		return nil
	}

	if m.MessagingSetting != nil {
		if err := m.MessagingSetting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messagingSetting")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("messagingSetting")
			}
			return err
		}
	}

	return nil
}

func (m *TwitterIntegrationRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TwitterIntegrationRequest) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TwitterIntegrationRequest) validateSupportedContent(formats strfmt.Registry) error {
	if swag.IsZero(m.SupportedContent) { // not required
		return nil
	}

	if m.SupportedContent != nil {
		if err := m.SupportedContent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportedContent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supportedContent")
			}
			return err
		}
	}

	return nil
}

var twitterIntegrationRequestTypeTierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["premium","enterprise"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		twitterIntegrationRequestTypeTierPropEnum = append(twitterIntegrationRequestTypeTierPropEnum, v)
	}
}

const (

	// TwitterIntegrationRequestTierPremium captures enum value "premium"
	TwitterIntegrationRequestTierPremium string = "premium"

	// TwitterIntegrationRequestTierEnterprise captures enum value "enterprise"
	TwitterIntegrationRequestTierEnterprise string = "enterprise"
)

// prop value enum
func (m *TwitterIntegrationRequest) validateTierEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, twitterIntegrationRequestTypeTierPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TwitterIntegrationRequest) validateTier(formats strfmt.Registry) error {

	if err := validate.Required("tier", "body", m.Tier); err != nil {
		return err
	}

	// value enum
	if err := m.validateTierEnum("tier", "body", *m.Tier); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this twitter integration request based on the context it is used
func (m *TwitterIntegrationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessagingSetting(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupportedContent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TwitterIntegrationRequest) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *TwitterIntegrationRequest) contextValidateMessagingSetting(ctx context.Context, formats strfmt.Registry) error {

	if m.MessagingSetting != nil {
		if err := m.MessagingSetting.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messagingSetting")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("messagingSetting")
			}
			return err
		}
	}

	return nil
}

func (m *TwitterIntegrationRequest) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *TwitterIntegrationRequest) contextValidateSupportedContent(ctx context.Context, formats strfmt.Registry) error {

	if m.SupportedContent != nil {
		if err := m.SupportedContent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportedContent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supportedContent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TwitterIntegrationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TwitterIntegrationRequest) UnmarshalBinary(b []byte) error {
	var res TwitterIntegrationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

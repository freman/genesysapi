// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FacetEntry facet entry
//
// swagger:model FacetEntry
type FacetEntry struct {

	// attribute
	Attribute *TermAttribute `json:"attribute,omitempty"`

	// missing
	Missing int64 `json:"missing,omitempty"`

	// other
	Other int64 `json:"other,omitempty"`

	// statistics
	Statistics *FacetStatistics `json:"statistics,omitempty"`

	// term count
	TermCount int32 `json:"termCount,omitempty"`

	// term type
	// Enum: [TERM NUMBERRANGE NUMBERHISTOGRAM DATERANGE DATEHISTOGRAM ID]
	TermType string `json:"termType,omitempty"`

	// terms
	Terms []*FacetTerm `json:"terms"`

	// total
	Total int64 `json:"total,omitempty"`
}

// Validate validates this facet entry
func (m *FacetEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttribute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FacetEntry) validateAttribute(formats strfmt.Registry) error {

	if swag.IsZero(m.Attribute) { // not required
		return nil
	}

	if m.Attribute != nil {
		if err := m.Attribute.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attribute")
			}
			return err
		}
	}

	return nil
}

func (m *FacetEntry) validateStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.Statistics) { // not required
		return nil
	}

	if m.Statistics != nil {
		if err := m.Statistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistics")
			}
			return err
		}
	}

	return nil
}

var facetEntryTypeTermTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TERM","NUMBERRANGE","NUMBERHISTOGRAM","DATERANGE","DATEHISTOGRAM","ID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		facetEntryTypeTermTypePropEnum = append(facetEntryTypeTermTypePropEnum, v)
	}
}

const (

	// FacetEntryTermTypeTERM captures enum value "TERM"
	FacetEntryTermTypeTERM string = "TERM"

	// FacetEntryTermTypeNUMBERRANGE captures enum value "NUMBERRANGE"
	FacetEntryTermTypeNUMBERRANGE string = "NUMBERRANGE"

	// FacetEntryTermTypeNUMBERHISTOGRAM captures enum value "NUMBERHISTOGRAM"
	FacetEntryTermTypeNUMBERHISTOGRAM string = "NUMBERHISTOGRAM"

	// FacetEntryTermTypeDATERANGE captures enum value "DATERANGE"
	FacetEntryTermTypeDATERANGE string = "DATERANGE"

	// FacetEntryTermTypeDATEHISTOGRAM captures enum value "DATEHISTOGRAM"
	FacetEntryTermTypeDATEHISTOGRAM string = "DATEHISTOGRAM"

	// FacetEntryTermTypeID captures enum value "ID"
	FacetEntryTermTypeID string = "ID"
)

// prop value enum
func (m *FacetEntry) validateTermTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, facetEntryTypeTermTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FacetEntry) validateTermType(formats strfmt.Registry) error {

	if swag.IsZero(m.TermType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTermTypeEnum("termType", "body", m.TermType); err != nil {
		return err
	}

	return nil
}

func (m *FacetEntry) validateTerms(formats strfmt.Registry) error {

	if swag.IsZero(m.Terms) { // not required
		return nil
	}

	for i := 0; i < len(m.Terms); i++ {
		if swag.IsZero(m.Terms[i]) { // not required
			continue
		}

		if m.Terms[i] != nil {
			if err := m.Terms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("terms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FacetEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FacetEntry) UnmarshalBinary(b []byte) error {
	var res FacetEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

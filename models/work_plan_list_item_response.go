// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkPlanListItemResponse work plan list item response
//
// swagger:model WorkPlanListItemResponse
type WorkPlanListItemResponse struct {

	// Number of agents in this work plan.  Populate with expand=agentCount
	AgentCount int32 `json:"agentCount,omitempty"`

	// Agents in this work plan. Populate with expand=details (defaults to empty list)
	Agents []*DeletableUserReference `json:"agents"`

	// Whether to constrain the maximum consecutive working days
	ConstrainMaximumConsecutiveWorkingDays bool `json:"constrainMaximumConsecutiveWorkingDays"`

	// Whether to constrain the maximum consecutive working weekends
	ConstrainMaximumConsecutiveWorkingWeekends bool `json:"constrainMaximumConsecutiveWorkingWeekends"`

	// Whether the minimum time between shifts constraint is enabled for this work plan
	ConstrainMinimumTimeBetweenShifts bool `json:"constrainMinimumTimeBetweenShifts"`

	// Whether paid time granularity is constrained for this work plan
	ConstrainPaidTimeGranularity bool `json:"constrainPaidTimeGranularity"`

	// Whether the weekly paid time constraint is enabled for this work plan
	ConstrainWeeklyPaidTime bool `json:"constrainWeeklyPaidTime"`

	// Whether the work plan is enabled for scheduling
	Enabled bool `json:"enabled"`

	// Whether the weekly paid time constraint is flexible for this work plan
	FlexibleWeeklyPaidTime bool `json:"flexibleWeeklyPaidTime"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The maximum number of consecutive days that agents assigned to this work plan are allowed to work. Used if constrainMaximumConsecutiveWorkingDays == true
	MaximumConsecutiveWorkingDays int32 `json:"maximumConsecutiveWorkingDays,omitempty"`

	// The maximum number of consecutive weekends that agents who are assigned to this work plan are allowed to work
	MaximumConsecutiveWorkingWeekends int32 `json:"maximumConsecutiveWorkingWeekends,omitempty"`

	// Maximum number days in a week allowed to be scheduled for this work plan
	MaximumDays int32 `json:"maximumDays,omitempty"`

	// Maximum days off in the planning period
	MaximumDaysOffPerPlanningPeriod int32 `json:"maximumDaysOffPerPlanningPeriod,omitempty"`

	// Maximum paid minutes in the planning period
	MaximumPaidMinutesPerPlanningPeriod int32 `json:"maximumPaidMinutesPerPlanningPeriod,omitempty"`

	// Version metadata for this work plan
	// Required: true
	Metadata *WfmVersionedEntityMetadata `json:"metadata"`

	// Minimum amount of consecutive non working minutes per week that agents who are assigned this work plan are allowed to have off
	MinimumConsecutiveNonWorkingMinutesPerWeek int32 `json:"minimumConsecutiveNonWorkingMinutesPerWeek,omitempty"`

	// Minimum days off in the planning period
	MinimumDaysOffPerPlanningPeriod int32 `json:"minimumDaysOffPerPlanningPeriod,omitempty"`

	// Minimum paid minutes in the planning period
	MinimumPaidMinutesPerPlanningPeriod int32 `json:"minimumPaidMinutesPerPlanningPeriod,omitempty"`

	// The time period in minutes for the duration between the start times of two consecutive working days
	MinimumShiftStartDistanceMinutes int32 `json:"minimumShiftStartDistanceMinutes,omitempty"`

	// Minimum time between shifts in minutes defined in this work plan. Used if constrainMinimumTimeBetweenShifts == true
	MinimumTimeBetweenShiftsMinutes int32 `json:"minimumTimeBetweenShiftsMinutes,omitempty"`

	// The minimum number of days that agents assigned to a work plan must work per week
	MinimumWorkingDaysPerWeek int32 `json:"minimumWorkingDaysPerWeek,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Optional days to schedule for this work plan. Populate with expand=details
	OptionalDays *SetWrapperDayOfWeek `json:"optionalDays,omitempty"`

	// Granularity in minutes allowed for shift paid time in this work plan. Used if constrainPaidTimeGranularity == true
	PaidTimeGranularityMinutes int32 `json:"paidTimeGranularityMinutes,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// This constraint ensures that an agent starts each workday within a user-defined time threshold
	// Enum: [ShiftStart ShiftStartAndPaidDuration]
	ShiftStartVarianceType string `json:"shiftStartVarianceType,omitempty"`

	// Variance in minutes among start times of shifts in this work plan. Populate with expand=details
	ShiftStartVariances *ListWrapperShiftStartVariance `json:"shiftStartVariances,omitempty"`

	// Shifts in this work plan. Populate with expand=details (defaults to empty list)
	Shifts []*WorkPlanShift `json:"shifts"`

	// Whether the work plan is valid or not
	// Read Only: true
	Valid *bool `json:"valid"`

	// Exact weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == false
	WeeklyExactPaidMinutes int32 `json:"weeklyExactPaidMinutes,omitempty"`

	// Maximum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true
	WeeklyMaximumPaidMinutes int32 `json:"weeklyMaximumPaidMinutes,omitempty"`

	// Minimum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true
	WeeklyMinimumPaidMinutes int32 `json:"weeklyMinimumPaidMinutes,omitempty"`
}

// Validate validates this work plan list item response
func (m *WorkPlanListItemResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionalDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShiftStartVarianceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShiftStartVariances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShifts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkPlanListItemResponse) validateAgents(formats strfmt.Registry) error {
	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	for i := 0; i < len(m.Agents); i++ {
		if swag.IsZero(m.Agents[i]) { // not required
			continue
		}

		if m.Agents[i] != nil {
			if err := m.Agents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkPlanListItemResponse) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("metadata", "body", m.Metadata); err != nil {
		return err
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *WorkPlanListItemResponse) validateOptionalDays(formats strfmt.Registry) error {
	if swag.IsZero(m.OptionalDays) { // not required
		return nil
	}

	if m.OptionalDays != nil {
		if err := m.OptionalDays.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optionalDays")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("optionalDays")
			}
			return err
		}
	}

	return nil
}

func (m *WorkPlanListItemResponse) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var workPlanListItemResponseTypeShiftStartVarianceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ShiftStart","ShiftStartAndPaidDuration"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workPlanListItemResponseTypeShiftStartVarianceTypePropEnum = append(workPlanListItemResponseTypeShiftStartVarianceTypePropEnum, v)
	}
}

const (

	// WorkPlanListItemResponseShiftStartVarianceTypeShiftStart captures enum value "ShiftStart"
	WorkPlanListItemResponseShiftStartVarianceTypeShiftStart string = "ShiftStart"

	// WorkPlanListItemResponseShiftStartVarianceTypeShiftStartAndPaidDuration captures enum value "ShiftStartAndPaidDuration"
	WorkPlanListItemResponseShiftStartVarianceTypeShiftStartAndPaidDuration string = "ShiftStartAndPaidDuration"
)

// prop value enum
func (m *WorkPlanListItemResponse) validateShiftStartVarianceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workPlanListItemResponseTypeShiftStartVarianceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkPlanListItemResponse) validateShiftStartVarianceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ShiftStartVarianceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateShiftStartVarianceTypeEnum("shiftStartVarianceType", "body", m.ShiftStartVarianceType); err != nil {
		return err
	}

	return nil
}

func (m *WorkPlanListItemResponse) validateShiftStartVariances(formats strfmt.Registry) error {
	if swag.IsZero(m.ShiftStartVariances) { // not required
		return nil
	}

	if m.ShiftStartVariances != nil {
		if err := m.ShiftStartVariances.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shiftStartVariances")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shiftStartVariances")
			}
			return err
		}
	}

	return nil
}

func (m *WorkPlanListItemResponse) validateShifts(formats strfmt.Registry) error {
	if swag.IsZero(m.Shifts) { // not required
		return nil
	}

	for i := 0; i < len(m.Shifts); i++ {
		if swag.IsZero(m.Shifts[i]) { // not required
			continue
		}

		if m.Shifts[i] != nil {
			if err := m.Shifts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shifts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shifts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this work plan list item response based on the context it is used
func (m *WorkPlanListItemResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptionalDays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShiftStartVariances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShifts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkPlanListItemResponse) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Agents); i++ {

		if m.Agents[i] != nil {
			if err := m.Agents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkPlanListItemResponse) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *WorkPlanListItemResponse) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *WorkPlanListItemResponse) contextValidateOptionalDays(ctx context.Context, formats strfmt.Registry) error {

	if m.OptionalDays != nil {
		if err := m.OptionalDays.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optionalDays")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("optionalDays")
			}
			return err
		}
	}

	return nil
}

func (m *WorkPlanListItemResponse) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *WorkPlanListItemResponse) contextValidateShiftStartVariances(ctx context.Context, formats strfmt.Registry) error {

	if m.ShiftStartVariances != nil {
		if err := m.ShiftStartVariances.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shiftStartVariances")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shiftStartVariances")
			}
			return err
		}
	}

	return nil
}

func (m *WorkPlanListItemResponse) contextValidateShifts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Shifts); i++ {

		if m.Shifts[i] != nil {
			if err := m.Shifts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shifts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shifts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkPlanListItemResponse) contextValidateValid(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "valid", "body", m.Valid); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkPlanListItemResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkPlanListItemResponse) UnmarshalBinary(b []byte) error {
	var res WorkPlanListItemResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

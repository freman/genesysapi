// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Parameter parameter
//
// swagger:model Parameter
type Parameter struct {

	// domain
	// Enum: [USERID QUEUEID MEDIATYPE DIALERCAMPAIGNID QMEVALFORMID UNKNOWN]
	Domain string `json:"domain,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// parameter type
	// Enum: [UUID STRING UUIDLIST STRINGLIST]
	ParameterType string `json:"parameterType,omitempty"`

	// required
	Required bool `json:"required,omitempty"`
}

// Validate validates this parameter
func (m *Parameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameterType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var parameterTypeDomainPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USERID","QUEUEID","MEDIATYPE","DIALERCAMPAIGNID","QMEVALFORMID","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		parameterTypeDomainPropEnum = append(parameterTypeDomainPropEnum, v)
	}
}

const (

	// ParameterDomainUSERID captures enum value "USERID"
	ParameterDomainUSERID string = "USERID"

	// ParameterDomainQUEUEID captures enum value "QUEUEID"
	ParameterDomainQUEUEID string = "QUEUEID"

	// ParameterDomainMEDIATYPE captures enum value "MEDIATYPE"
	ParameterDomainMEDIATYPE string = "MEDIATYPE"

	// ParameterDomainDIALERCAMPAIGNID captures enum value "DIALERCAMPAIGNID"
	ParameterDomainDIALERCAMPAIGNID string = "DIALERCAMPAIGNID"

	// ParameterDomainQMEVALFORMID captures enum value "QMEVALFORMID"
	ParameterDomainQMEVALFORMID string = "QMEVALFORMID"

	// ParameterDomainUNKNOWN captures enum value "UNKNOWN"
	ParameterDomainUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *Parameter) validateDomainEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, parameterTypeDomainPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Parameter) validateDomain(formats strfmt.Registry) error {

	if swag.IsZero(m.Domain) { // not required
		return nil
	}

	// value enum
	if err := m.validateDomainEnum("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

var parameterTypeParameterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UUID","STRING","UUIDLIST","STRINGLIST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		parameterTypeParameterTypePropEnum = append(parameterTypeParameterTypePropEnum, v)
	}
}

const (

	// ParameterParameterTypeUUID captures enum value "UUID"
	ParameterParameterTypeUUID string = "UUID"

	// ParameterParameterTypeSTRING captures enum value "STRING"
	ParameterParameterTypeSTRING string = "STRING"

	// ParameterParameterTypeUUIDLIST captures enum value "UUIDLIST"
	ParameterParameterTypeUUIDLIST string = "UUIDLIST"

	// ParameterParameterTypeSTRINGLIST captures enum value "STRINGLIST"
	ParameterParameterTypeSTRINGLIST string = "STRINGLIST"
)

// prop value enum
func (m *Parameter) validateParameterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, parameterTypeParameterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Parameter) validateParameterType(formats strfmt.Registry) error {

	if swag.IsZero(m.ParameterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateParameterTypeEnum("parameterType", "body", m.ParameterType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Parameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Parameter) UnmarshalBinary(b []byte) error {
	var res Parameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

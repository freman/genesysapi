// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TestExecutionOperationResult test execution operation result
//
// swagger:model TestExecutionOperationResult
type TestExecutionOperationResult struct {

	// Error that occurred during the operation
	Error *ErrorBody `json:"error,omitempty"`

	// Name of the operation performed
	Name string `json:"name,omitempty"`

	// The result of the operation
	Result interface{} `json:"result,omitempty"`

	// The step number to indicate the order in which the operation was performed
	Step int32 `json:"step,omitempty"`

	// Indicated whether or not the operation was successful
	Success bool `json:"success"`
}

// Validate validates this test execution operation result
func (m *TestExecutionOperationResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestExecutionOperationResult) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestExecutionOperationResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestExecutionOperationResult) UnmarshalBinary(b []byte) error {
	var res TestExecutionOperationResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

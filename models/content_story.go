// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentStory An ephemeral story.
//
// swagger:model ContentStory
type ContentStory struct {

	// ID of the ephemeral story being replied to.
	ReplyToID string `json:"replyToId,omitempty"`

	// Type of ephemeral story attachment.
	// Required: true
	// Enum: [Mention Reply]
	Type *string `json:"type"`

	// URL to the ephemeral story.
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this content story
func (m *ContentStory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var contentStoryTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Mention","Reply"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentStoryTypeTypePropEnum = append(contentStoryTypeTypePropEnum, v)
	}
}

const (

	// ContentStoryTypeMention captures enum value "Mention"
	ContentStoryTypeMention string = "Mention"

	// ContentStoryTypeReply captures enum value "Reply"
	ContentStoryTypeReply string = "Reply"
)

// prop value enum
func (m *ContentStory) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contentStoryTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContentStory) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ContentStory) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentStory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentStory) UnmarshalBinary(b []byte) error {
	var res ContentStory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

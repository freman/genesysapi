// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserEstablishedEvent user established event
//
// swagger:model UserEstablishedEvent
type UserEstablishedEvent struct {

	// Indicates whether or not this user will be required to complete after call work.
	AfterCallWorkRequired bool `json:"afterCallWorkRequired"`

	// The automatic number identification if it is available for this conversation.
	Ani string `json:"ani,omitempty"`

	// A unique Id (V4 UUID) identifying this communication
	// Required: true
	CommunicationID *string `json:"communicationId"`

	// A unique Id (V4 UUID) identifying this conversation
	// Required: true
	ConversationID *string `json:"conversationId"`

	// The dialed number identification if it is available for this conversation.
	Dnis string `json:"dnis,omitempty"`

	// A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Required: true
	// Format: date-time
	EventDateTime *strfmt.DateTime `json:"eventDateTime"`

	// A unique (V4 UUID) eventId for this event
	// Required: true
	EventID *string `json:"eventId"`

	// Metadata about this communication.
	// Required: true
	InitialConfiguration *InitialConfiguration `json:"initialConfiguration"`

	// Identifies the phone number used to reach this user if it is different from the information that would be accessed by userId.
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// The id (V4 UUID) of the queue that the user is calling on behalf of. Applies to outbound calls only.
	QueueID string `json:"queueId,omitempty"`

	// Metadata about the source of this communication's interaction.
	// Required: true
	SourceConfiguration *SourceConfiguration `json:"sourceConfiguration"`

	// A Station ID (V4 UUID) that identifies the station being used if the user is using a station and the stationId is known.
	StationID string `json:"stationId,omitempty"`

	// The userId (V4 UUID) for the user this communication belongs to.
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this user established event
func (m *UserEstablishedEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommunicationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserEstablishedEvent) validateCommunicationID(formats strfmt.Registry) error {

	if err := validate.Required("communicationId", "body", m.CommunicationID); err != nil {
		return err
	}

	return nil
}

func (m *UserEstablishedEvent) validateConversationID(formats strfmt.Registry) error {

	if err := validate.Required("conversationId", "body", m.ConversationID); err != nil {
		return err
	}

	return nil
}

func (m *UserEstablishedEvent) validateEventDateTime(formats strfmt.Registry) error {

	if err := validate.Required("eventDateTime", "body", m.EventDateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("eventDateTime", "body", "date-time", m.EventDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserEstablishedEvent) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("eventId", "body", m.EventID); err != nil {
		return err
	}

	return nil
}

func (m *UserEstablishedEvent) validateInitialConfiguration(formats strfmt.Registry) error {

	if err := validate.Required("initialConfiguration", "body", m.InitialConfiguration); err != nil {
		return err
	}

	if m.InitialConfiguration != nil {
		if err := m.InitialConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initialConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initialConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *UserEstablishedEvent) validateSourceConfiguration(formats strfmt.Registry) error {

	if err := validate.Required("sourceConfiguration", "body", m.SourceConfiguration); err != nil {
		return err
	}

	if m.SourceConfiguration != nil {
		if err := m.SourceConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *UserEstablishedEvent) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user established event based on the context it is used
func (m *UserEstablishedEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInitialConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserEstablishedEvent) contextValidateInitialConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.InitialConfiguration != nil {
		if err := m.InitialConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initialConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initialConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *UserEstablishedEvent) contextValidateSourceConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceConfiguration != nil {
		if err := m.SourceConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceConfiguration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserEstablishedEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserEstablishedEvent) UnmarshalBinary(b []byte) error {
	var res UserEstablishedEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuRescheduleRequest bu reschedule request
//
// swagger:model BuRescheduleRequest
type BuRescheduleRequest struct {

	// The IDs of the activity codes to consider for rescheduling.  Omit to consider all activity codes
	ActivityCodeIds []string `json:"activityCodeIds"`

	// The IDs of the agents to consider for rescheduling.  Omit to consider all agents in the specified management units.Agents not in the specified management units will be ignored
	AgentIds []string `json:"agentIds"`

	// Instructs the scheduler whether it is allowed to change daily paid time
	// Required: true
	DoNotChangeDailyPaidTime *bool `json:"doNotChangeDailyPaidTime"`

	// Instructs the scheduler whether it is allowed to change manually edited shifts
	// Required: true
	DoNotChangeManuallyEditedShifts *bool `json:"doNotChangeManuallyEditedShifts"`

	// Instructs the scheduler whether it is allowed to change shift start times
	// Required: true
	DoNotChangeShiftStartTimes *bool `json:"doNotChangeShiftStartTimes"`

	// Instructs the scheduler whether it is allowed to change weekly paid time
	// Required: true
	DoNotChangeWeeklyPaidTime *bool `json:"doNotChangeWeeklyPaidTime"`

	// The end of the range to reschedule.  Defaults the the end of the schedule. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// The IDs of the management units to reschedule
	// Required: true
	ManagementUnitIds []string `json:"managementUnitIds"`

	// The start of the range to reschedule.  Defaults to the beginning of the schedule. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`
}

// Validate validates this bu reschedule request
func (m *BuRescheduleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDoNotChangeDailyPaidTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoNotChangeManuallyEditedShifts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoNotChangeShiftStartTimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoNotChangeWeeklyPaidTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementUnitIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuRescheduleRequest) validateDoNotChangeDailyPaidTime(formats strfmt.Registry) error {

	if err := validate.Required("doNotChangeDailyPaidTime", "body", m.DoNotChangeDailyPaidTime); err != nil {
		return err
	}

	return nil
}

func (m *BuRescheduleRequest) validateDoNotChangeManuallyEditedShifts(formats strfmt.Registry) error {

	if err := validate.Required("doNotChangeManuallyEditedShifts", "body", m.DoNotChangeManuallyEditedShifts); err != nil {
		return err
	}

	return nil
}

func (m *BuRescheduleRequest) validateDoNotChangeShiftStartTimes(formats strfmt.Registry) error {

	if err := validate.Required("doNotChangeShiftStartTimes", "body", m.DoNotChangeShiftStartTimes); err != nil {
		return err
	}

	return nil
}

func (m *BuRescheduleRequest) validateDoNotChangeWeeklyPaidTime(formats strfmt.Registry) error {

	if err := validate.Required("doNotChangeWeeklyPaidTime", "body", m.DoNotChangeWeeklyPaidTime); err != nil {
		return err
	}

	return nil
}

func (m *BuRescheduleRequest) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BuRescheduleRequest) validateManagementUnitIds(formats strfmt.Registry) error {

	if err := validate.Required("managementUnitIds", "body", m.ManagementUnitIds); err != nil {
		return err
	}

	return nil
}

func (m *BuRescheduleRequest) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuRescheduleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuRescheduleRequest) UnmarshalBinary(b []byte) error {
	var res BuRescheduleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

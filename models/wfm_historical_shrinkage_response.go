// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WfmHistoricalShrinkageResponse wfm historical shrinkage response
//
// swagger:model WfmHistoricalShrinkageResponse
type WfmHistoricalShrinkageResponse struct {

	// Result will always come via downloadUrls; however the schema is included for documentation
	DownloadResult *HistoricalShrinkageResultListing `json:"downloadResult,omitempty"`

	// The url list to GET the results of the Historical Shrinkage query. This field is populated only if query state is Complete
	DownloadUrls []string `json:"downloadUrls"`

	// The operationId for which to listen
	OperationID string `json:"operationId,omitempty"`

	// The state of the shrinkage query
	// Enum: [Processing Complete Error]
	State string `json:"state,omitempty"`
}

// Validate validates this wfm historical shrinkage response
func (m *WfmHistoricalShrinkageResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDownloadResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WfmHistoricalShrinkageResponse) validateDownloadResult(formats strfmt.Registry) error {
	if swag.IsZero(m.DownloadResult) { // not required
		return nil
	}

	if m.DownloadResult != nil {
		if err := m.DownloadResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downloadResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downloadResult")
			}
			return err
		}
	}

	return nil
}

var wfmHistoricalShrinkageResponseTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Processing","Complete","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		wfmHistoricalShrinkageResponseTypeStatePropEnum = append(wfmHistoricalShrinkageResponseTypeStatePropEnum, v)
	}
}

const (

	// WfmHistoricalShrinkageResponseStateProcessing captures enum value "Processing"
	WfmHistoricalShrinkageResponseStateProcessing string = "Processing"

	// WfmHistoricalShrinkageResponseStateComplete captures enum value "Complete"
	WfmHistoricalShrinkageResponseStateComplete string = "Complete"

	// WfmHistoricalShrinkageResponseStateError captures enum value "Error"
	WfmHistoricalShrinkageResponseStateError string = "Error"
)

// prop value enum
func (m *WfmHistoricalShrinkageResponse) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, wfmHistoricalShrinkageResponseTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WfmHistoricalShrinkageResponse) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this wfm historical shrinkage response based on the context it is used
func (m *WfmHistoricalShrinkageResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDownloadResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WfmHistoricalShrinkageResponse) contextValidateDownloadResult(ctx context.Context, formats strfmt.Registry) error {

	if m.DownloadResult != nil {
		if err := m.DownloadResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downloadResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downloadResult")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WfmHistoricalShrinkageResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WfmHistoricalShrinkageResponse) UnmarshalBinary(b []byte) error {
	var res WfmHistoricalShrinkageResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

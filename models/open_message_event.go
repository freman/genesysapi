// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenMessageEvent Message event element.
//
// swagger:model OpenMessageEvent
type OpenMessageEvent struct {

	// Type of this event element
	// Required: true
	// Enum: [Typing]
	EventType *string `json:"eventType"`

	// Typing event.
	Typing *EventTyping `json:"typing,omitempty"`
}

// Validate validates this open message event
func (m *OpenMessageEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTyping(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var openMessageEventTypeEventTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Typing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openMessageEventTypeEventTypePropEnum = append(openMessageEventTypeEventTypePropEnum, v)
	}
}

const (

	// OpenMessageEventEventTypeTyping captures enum value "Typing"
	OpenMessageEventEventTypeTyping string = "Typing"
)

// prop value enum
func (m *OpenMessageEvent) validateEventTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, openMessageEventTypeEventTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OpenMessageEvent) validateEventType(formats strfmt.Registry) error {

	if err := validate.Required("eventType", "body", m.EventType); err != nil {
		return err
	}

	// value enum
	if err := m.validateEventTypeEnum("eventType", "body", *m.EventType); err != nil {
		return err
	}

	return nil
}

func (m *OpenMessageEvent) validateTyping(formats strfmt.Registry) error {

	if swag.IsZero(m.Typing) { // not required
		return nil
	}

	if m.Typing != nil {
		if err := m.Typing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("typing")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenMessageEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenMessageEvent) UnmarshalBinary(b []byte) error {
	var res OpenMessageEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

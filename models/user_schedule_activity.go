// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserScheduleActivity Represents a single activity in a user's shift
//
// swagger:model UserScheduleActivity
type UserScheduleActivity struct {

	// The id for the activity code.  Look up a map of activity codes with the activities route
	ActivityCodeID string `json:"activityCodeId,omitempty"`

	// Whether this activity is paid
	CountsAsPaidTime bool `json:"countsAsPaidTime,omitempty"`

	// Description for this activity
	Description string `json:"description,omitempty"`

	// Whether this activity spans a DST fallback
	IsDstFallback bool `json:"isDstFallback,omitempty"`

	// Length in minutes for this activity
	LengthInMinutes int32 `json:"lengthInMinutes,omitempty"`

	// Start time in UTC for this activity, in ISO-8601 format
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// Time off request id of this activity
	TimeOffRequestID string `json:"timeOffRequestId,omitempty"`
}

// Validate validates this user schedule activity
func (m *UserScheduleActivity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserScheduleActivity) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserScheduleActivity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserScheduleActivity) UnmarshalBinary(b []byte) error {
	var res UserScheduleActivity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

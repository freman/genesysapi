// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateMetric create metric
//
// swagger:model CreateMetric
type CreateMetric struct {

	// The id of associated external metric definition
	ExternalMetricDefinitionID string `json:"externalMetricDefinitionId,omitempty"`

	// The id of associated metric definition
	MetricDefinitionID string `json:"metricDefinitionId,omitempty"`

	// The name of this metric
	// Required: true
	Name *string `json:"name"`

	// Associated objective for this metric
	Objective *CreateObjective `json:"objective,omitempty"`

	// Performance profile id of this metric
	PerformanceProfileID string `json:"performanceProfileId,omitempty"`

	// The precision of the metric, must be between 0 and 5
	Precision int32 `json:"precision,omitempty"`

	// The time unit in which the metric should be displayed -- this parameter is ignored when displaying non-time values
	// Enum: [None Seconds Minutes Hours]
	TimeDisplayUnit string `json:"timeDisplayUnit,omitempty"`
}

// Validate validates this create metric
func (m *CreateMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjective(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeDisplayUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMetric) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateMetric) validateObjective(formats strfmt.Registry) error {
	if swag.IsZero(m.Objective) { // not required
		return nil
	}

	if m.Objective != nil {
		if err := m.Objective.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objective")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objective")
			}
			return err
		}
	}

	return nil
}

var createMetricTypeTimeDisplayUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Seconds","Minutes","Hours"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createMetricTypeTimeDisplayUnitPropEnum = append(createMetricTypeTimeDisplayUnitPropEnum, v)
	}
}

const (

	// CreateMetricTimeDisplayUnitNone captures enum value "None"
	CreateMetricTimeDisplayUnitNone string = "None"

	// CreateMetricTimeDisplayUnitSeconds captures enum value "Seconds"
	CreateMetricTimeDisplayUnitSeconds string = "Seconds"

	// CreateMetricTimeDisplayUnitMinutes captures enum value "Minutes"
	CreateMetricTimeDisplayUnitMinutes string = "Minutes"

	// CreateMetricTimeDisplayUnitHours captures enum value "Hours"
	CreateMetricTimeDisplayUnitHours string = "Hours"
)

// prop value enum
func (m *CreateMetric) validateTimeDisplayUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createMetricTypeTimeDisplayUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateMetric) validateTimeDisplayUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeDisplayUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeDisplayUnitEnum("timeDisplayUnit", "body", m.TimeDisplayUnit); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create metric based on the context it is used
func (m *CreateMetric) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjective(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMetric) contextValidateObjective(ctx context.Context, formats strfmt.Registry) error {

	if m.Objective != nil {
		if err := m.Objective.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objective")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objective")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateMetric) UnmarshalBinary(b []byte) error {
	var res CreateMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

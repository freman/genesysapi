// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateMetric create metric
//
// swagger:model CreateMetric
type CreateMetric struct {

	// The id of associated external metric definition
	ExternalMetricDefinitionID string `json:"externalMetricDefinitionId,omitempty"`

	// The id of associated metric definition
	MetricDefinitionID string `json:"metricDefinitionId,omitempty"`

	// The name of this metric
	// Required: true
	Name *string `json:"name"`

	// Associated objective for this metric
	Objective *CreateObjective `json:"objective,omitempty"`

	// Performance profile id of this metric
	PerformanceProfileID string `json:"performanceProfileId,omitempty"`
}

// Validate validates this create metric
func (m *CreateMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjective(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMetric) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateMetric) validateObjective(formats strfmt.Registry) error {
	if swag.IsZero(m.Objective) { // not required
		return nil
	}

	if m.Objective != nil {
		if err := m.Objective.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objective")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objective")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create metric based on the context it is used
func (m *CreateMetric) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjective(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMetric) contextValidateObjective(ctx context.Context, formats strfmt.Registry) error {

	if m.Objective != nil {
		if err := m.Objective.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objective")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objective")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateMetric) UnmarshalBinary(b []byte) error {
	var res CreateMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

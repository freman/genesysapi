// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EvaluationAggregationQueryMe evaluation aggregation query me
//
// swagger:model EvaluationAggregationQueryMe
type EvaluationAggregationQueryMe struct {

	// Dimension to use as the alternative timestamp for data in the aggregate.  Choosing "eventTime" uses the actual time of the data event.
	// Enum: [conversationStart evaluationCreatedDate evaluationReleaseDate eventTime]
	AlternateTimeDimension string `json:"alternateTimeDimension,omitempty"`

	// Evaluation context Id
	ContextID string `json:"contextId,omitempty"`

	// Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.
	GroupBy []string `json:"groupBy"`

	// Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	// Required: true
	Interval *string `json:"interval"`

	// Behaves like a SQL SELECT clause. Only named metrics will be retrieved.
	// Required: true
	Metrics []string `json:"metrics"`

	// Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London
	TimeZone string `json:"timeZone,omitempty"`
}

// Validate validates this evaluation aggregation query me
func (m *EvaluationAggregationQueryMe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlternateTimeDimension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var evaluationAggregationQueryMeTypeAlternateTimeDimensionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["conversationStart","evaluationCreatedDate","evaluationReleaseDate","eventTime"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		evaluationAggregationQueryMeTypeAlternateTimeDimensionPropEnum = append(evaluationAggregationQueryMeTypeAlternateTimeDimensionPropEnum, v)
	}
}

const (

	// EvaluationAggregationQueryMeAlternateTimeDimensionConversationStart captures enum value "conversationStart"
	EvaluationAggregationQueryMeAlternateTimeDimensionConversationStart string = "conversationStart"

	// EvaluationAggregationQueryMeAlternateTimeDimensionEvaluationCreatedDate captures enum value "evaluationCreatedDate"
	EvaluationAggregationQueryMeAlternateTimeDimensionEvaluationCreatedDate string = "evaluationCreatedDate"

	// EvaluationAggregationQueryMeAlternateTimeDimensionEvaluationReleaseDate captures enum value "evaluationReleaseDate"
	EvaluationAggregationQueryMeAlternateTimeDimensionEvaluationReleaseDate string = "evaluationReleaseDate"

	// EvaluationAggregationQueryMeAlternateTimeDimensionEventTime captures enum value "eventTime"
	EvaluationAggregationQueryMeAlternateTimeDimensionEventTime string = "eventTime"
)

// prop value enum
func (m *EvaluationAggregationQueryMe) validateAlternateTimeDimensionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, evaluationAggregationQueryMeTypeAlternateTimeDimensionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EvaluationAggregationQueryMe) validateAlternateTimeDimension(formats strfmt.Registry) error {

	if swag.IsZero(m.AlternateTimeDimension) { // not required
		return nil
	}

	// value enum
	if err := m.validateAlternateTimeDimensionEnum("alternateTimeDimension", "body", m.AlternateTimeDimension); err != nil {
		return err
	}

	return nil
}

var evaluationAggregationQueryMeGroupByItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["calibrationId","contextId","conversationId","conversationStart","divisionId","evaluationId","evaluatorId","formId","queueId","released","rescored","teamId","userId"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		evaluationAggregationQueryMeGroupByItemsEnum = append(evaluationAggregationQueryMeGroupByItemsEnum, v)
	}
}

func (m *EvaluationAggregationQueryMe) validateGroupByItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, evaluationAggregationQueryMeGroupByItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EvaluationAggregationQueryMe) validateGroupBy(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupBy) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupBy); i++ {

		// value enum
		if err := m.validateGroupByItemsEnum("groupBy"+"."+strconv.Itoa(i), "body", m.GroupBy[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *EvaluationAggregationQueryMe) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

var evaluationAggregationQueryMeMetricsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nEvaluations","nEvaluationsDeleted","nEvaluationsRescored","oTotalCriticalScore","oTotalScore"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		evaluationAggregationQueryMeMetricsItemsEnum = append(evaluationAggregationQueryMeMetricsItemsEnum, v)
	}
}

func (m *EvaluationAggregationQueryMe) validateMetricsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, evaluationAggregationQueryMeMetricsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EvaluationAggregationQueryMe) validateMetrics(formats strfmt.Registry) error {

	if err := validate.Required("metrics", "body", m.Metrics); err != nil {
		return err
	}

	for i := 0; i < len(m.Metrics); i++ {

		// value enum
		if err := m.validateMetricsItemsEnum("metrics"+"."+strconv.Itoa(i), "body", m.Metrics[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EvaluationAggregationQueryMe) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvaluationAggregationQueryMe) UnmarshalBinary(b []byte) error {
	var res EvaluationAggregationQueryMe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PredictorSchedule predictor schedule
//
// swagger:model PredictorSchedule
type PredictorSchedule struct {

	// DateTime indicating when the predictor schedule was started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateStarted strfmt.DateTime `json:"dateStarted,omitempty"`

	// The predictor schedule type.
	// Required: true
	// Enum: [HourOnHourOff OngoingValueMonitoring]
	ScheduleType *string `json:"scheduleType"`
}

// Validate validates this predictor schedule
func (m *PredictorSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PredictorSchedule) validateDateStarted(formats strfmt.Registry) error {

	if swag.IsZero(m.DateStarted) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStarted", "body", "date-time", m.DateStarted.String(), formats); err != nil {
		return err
	}

	return nil
}

var predictorScheduleTypeScheduleTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HourOnHourOff","OngoingValueMonitoring"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		predictorScheduleTypeScheduleTypePropEnum = append(predictorScheduleTypeScheduleTypePropEnum, v)
	}
}

const (

	// PredictorScheduleScheduleTypeHourOnHourOff captures enum value "HourOnHourOff"
	PredictorScheduleScheduleTypeHourOnHourOff string = "HourOnHourOff"

	// PredictorScheduleScheduleTypeOngoingValueMonitoring captures enum value "OngoingValueMonitoring"
	PredictorScheduleScheduleTypeOngoingValueMonitoring string = "OngoingValueMonitoring"
)

// prop value enum
func (m *PredictorSchedule) validateScheduleTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, predictorScheduleTypeScheduleTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PredictorSchedule) validateScheduleType(formats strfmt.Registry) error {

	if err := validate.Required("scheduleType", "body", m.ScheduleType); err != nil {
		return err
	}

	// value enum
	if err := m.validateScheduleTypeEnum("scheduleType", "body", *m.ScheduleType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PredictorSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PredictorSchedule) UnmarshalBinary(b []byte) error {
	var res PredictorSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserStations user stations
//
// swagger:model UserStations
type UserStations struct {

	// Current associated station for this user.
	// Read Only: true
	AssociatedStation *UserStation `json:"associatedStation,omitempty"`

	// Default station to be used if not associated with a station.
	// Read Only: true
	DefaultStation *UserStation `json:"defaultStation,omitempty"`

	// The station where the user can be reached based on their default and associated station.
	// Read Only: true
	EffectiveStation *UserStation `json:"effectiveStation,omitempty"`

	// Last associated station for this user.
	// Read Only: true
	LastAssociatedStation *UserStation `json:"lastAssociatedStation,omitempty"`
}

// Validate validates this user stations
func (m *UserStations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociatedStation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultStation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectiveStation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastAssociatedStation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserStations) validateAssociatedStation(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociatedStation) { // not required
		return nil
	}

	if m.AssociatedStation != nil {
		if err := m.AssociatedStation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associatedStation")
			}
			return err
		}
	}

	return nil
}

func (m *UserStations) validateDefaultStation(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultStation) { // not required
		return nil
	}

	if m.DefaultStation != nil {
		if err := m.DefaultStation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultStation")
			}
			return err
		}
	}

	return nil
}

func (m *UserStations) validateEffectiveStation(formats strfmt.Registry) error {

	if swag.IsZero(m.EffectiveStation) { // not required
		return nil
	}

	if m.EffectiveStation != nil {
		if err := m.EffectiveStation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("effectiveStation")
			}
			return err
		}
	}

	return nil
}

func (m *UserStations) validateLastAssociatedStation(formats strfmt.Registry) error {

	if swag.IsZero(m.LastAssociatedStation) { // not required
		return nil
	}

	if m.LastAssociatedStation != nil {
		if err := m.LastAssociatedStation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastAssociatedStation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserStations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserStations) UnmarshalBinary(b []byte) error {
	var res UserStations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

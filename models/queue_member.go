// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueueMember queue member
//
// swagger:model QueueMember
type QueueMember struct {

	// The queue member's id.
	ID string `json:"id,omitempty"`

	// joined
	Joined *bool `json:"joined"`

	// member by
	MemberBy string `json:"memberBy,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// ring number
	RingNumber int32 `json:"ringNumber,omitempty"`

	// routing status
	RoutingStatus *RoutingStatus `json:"routingStatus,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// user
	User *User `json:"user,omitempty"`
}

// Validate validates this queue member
func (m *QueueMember) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoutingStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueueMember) validateRoutingStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutingStatus) { // not required
		return nil
	}

	if m.RoutingStatus != nil {
		if err := m.RoutingStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routingStatus")
			}
			return err
		}
	}

	return nil
}

func (m *QueueMember) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *QueueMember) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueueMember) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueueMember) UnmarshalBinary(b []byte) error {
	var res QueueMember
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdherenceExplanationJob adherence explanation job
//
// swagger:model AdherenceExplanationJob
type AdherenceExplanationJob struct {

	// The adherence explanation added or modified by the job once complete; may be null if status == 'Error'. Used if type is in [ 'AddExplanation', 'UpdateExplanation' ]
	AdherenceExplanation *AdherenceExplanationResponse `json:"adherenceExplanation,omitempty"`

	// Schema template for deserializing data returned from the downloadUrl. Use if type == 'QueryAgentExplanations'
	AgentQueryResponseTemplate *AdherenceExplanationListingAgentQueryResponse `json:"agentQueryResponseTemplate,omitempty"`

	// Schema template for deserializing data returned from the downloadUrl. Use if type == 'QueryBuExplanations'
	BuQueryResponseTemplate *AdherenceExplanationListingBuQueryResponse `json:"buQueryResponseTemplate,omitempty"`

	// A URL to fetch results of the job. Only set if status == 'Complete' and type is in [ 'QueryAgentExplanations', 'QueryBuExplanations' ]
	DownloadURL string `json:"downloadUrl,omitempty"`

	// Error details if status == 'Error'
	Error *ErrorBody `json:"error,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The status of the adherence explanation job
	// Enum: [Processing Complete Error]
	Status string `json:"status,omitempty"`

	// The type of the adherence explanation job
	// Enum: [AddExplanation UpdateExplanation QueryAgentExplanations QueryBuExplanations]
	Type string `json:"type,omitempty"`
}

// Validate validates this adherence explanation job
func (m *AdherenceExplanationJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdherenceExplanation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentQueryResponseTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuQueryResponseTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdherenceExplanationJob) validateAdherenceExplanation(formats strfmt.Registry) error {
	if swag.IsZero(m.AdherenceExplanation) { // not required
		return nil
	}

	if m.AdherenceExplanation != nil {
		if err := m.AdherenceExplanation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adherenceExplanation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adherenceExplanation")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationJob) validateAgentQueryResponseTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentQueryResponseTemplate) { // not required
		return nil
	}

	if m.AgentQueryResponseTemplate != nil {
		if err := m.AgentQueryResponseTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentQueryResponseTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentQueryResponseTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationJob) validateBuQueryResponseTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.BuQueryResponseTemplate) { // not required
		return nil
	}

	if m.BuQueryResponseTemplate != nil {
		if err := m.BuQueryResponseTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buQueryResponseTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buQueryResponseTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationJob) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationJob) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var adherenceExplanationJobTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Processing","Complete","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adherenceExplanationJobTypeStatusPropEnum = append(adherenceExplanationJobTypeStatusPropEnum, v)
	}
}

const (

	// AdherenceExplanationJobStatusProcessing captures enum value "Processing"
	AdherenceExplanationJobStatusProcessing string = "Processing"

	// AdherenceExplanationJobStatusComplete captures enum value "Complete"
	AdherenceExplanationJobStatusComplete string = "Complete"

	// AdherenceExplanationJobStatusError captures enum value "Error"
	AdherenceExplanationJobStatusError string = "Error"
)

// prop value enum
func (m *AdherenceExplanationJob) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, adherenceExplanationJobTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdherenceExplanationJob) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var adherenceExplanationJobTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AddExplanation","UpdateExplanation","QueryAgentExplanations","QueryBuExplanations"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adherenceExplanationJobTypeTypePropEnum = append(adherenceExplanationJobTypeTypePropEnum, v)
	}
}

const (

	// AdherenceExplanationJobTypeAddExplanation captures enum value "AddExplanation"
	AdherenceExplanationJobTypeAddExplanation string = "AddExplanation"

	// AdherenceExplanationJobTypeUpdateExplanation captures enum value "UpdateExplanation"
	AdherenceExplanationJobTypeUpdateExplanation string = "UpdateExplanation"

	// AdherenceExplanationJobTypeQueryAgentExplanations captures enum value "QueryAgentExplanations"
	AdherenceExplanationJobTypeQueryAgentExplanations string = "QueryAgentExplanations"

	// AdherenceExplanationJobTypeQueryBuExplanations captures enum value "QueryBuExplanations"
	AdherenceExplanationJobTypeQueryBuExplanations string = "QueryBuExplanations"
)

// prop value enum
func (m *AdherenceExplanationJob) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, adherenceExplanationJobTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdherenceExplanationJob) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this adherence explanation job based on the context it is used
func (m *AdherenceExplanationJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdherenceExplanation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAgentQueryResponseTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuQueryResponseTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdherenceExplanationJob) contextValidateAdherenceExplanation(ctx context.Context, formats strfmt.Registry) error {

	if m.AdherenceExplanation != nil {
		if err := m.AdherenceExplanation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adherenceExplanation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adherenceExplanation")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationJob) contextValidateAgentQueryResponseTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentQueryResponseTemplate != nil {
		if err := m.AgentQueryResponseTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentQueryResponseTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentQueryResponseTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationJob) contextValidateBuQueryResponseTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.BuQueryResponseTemplate != nil {
		if err := m.BuQueryResponseTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buQueryResponseTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buQueryResponseTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationJob) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {
		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *AdherenceExplanationJob) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *AdherenceExplanationJob) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdherenceExplanationJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdherenceExplanationJob) UnmarshalBinary(b []byte) error {
	var res AdherenceExplanationJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AfterCallWork after call work
//
// swagger:model AfterCallWork
type AfterCallWork struct {

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// state
	// Enum: [unknown notApplicable skipped pending complete]
	State string `json:"state,omitempty"`
}

// Validate validates this after call work
func (m *AfterCallWork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AfterCallWork) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AfterCallWork) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var afterCallWorkTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","notApplicable","skipped","pending","complete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		afterCallWorkTypeStatePropEnum = append(afterCallWorkTypeStatePropEnum, v)
	}
}

const (

	// AfterCallWorkStateUnknown captures enum value "unknown"
	AfterCallWorkStateUnknown string = "unknown"

	// AfterCallWorkStateNotApplicable captures enum value "notApplicable"
	AfterCallWorkStateNotApplicable string = "notApplicable"

	// AfterCallWorkStateSkipped captures enum value "skipped"
	AfterCallWorkStateSkipped string = "skipped"

	// AfterCallWorkStatePending captures enum value "pending"
	AfterCallWorkStatePending string = "pending"

	// AfterCallWorkStateComplete captures enum value "complete"
	AfterCallWorkStateComplete string = "complete"
)

// prop value enum
func (m *AfterCallWork) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, afterCallWorkTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AfterCallWork) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AfterCallWork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AfterCallWork) UnmarshalBinary(b []byte) error {
	var res AfterCallWork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

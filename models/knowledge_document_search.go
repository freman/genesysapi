// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnowledgeDocumentSearch knowledge document search
//
// swagger:model KnowledgeDocumentSearch
type KnowledgeDocumentSearch struct {

	// The client application details from which search happened.
	Application *KnowledgeSearchClientApplication `json:"application,omitempty"`

	// Conversation context information if the search is initiated in the context of a conversation.
	ConversationContext *KnowledgeConversationContextResponse `json:"conversationContext,omitempty"`

	// Number of pages returned in the result calculated according to the pageSize and the total
	// Read Only: true
	PageCount int32 `json:"pageCount,omitempty"`

	// Page number of the returned results.
	PageNumber int32 `json:"pageNumber,omitempty"`

	// Page size of the returned results.
	PageSize int32 `json:"pageSize,omitempty"`

	// Query to search content in the knowledge base. Maximum of 30 records per query can be fetched.
	// Required: true
	// Max Length: 2147483647
	// Min Length: 3
	Query *string `json:"query"`

	// The type of the query that initiates the search.
	// Enum: [AutoSearch ManualSearch Suggestion]
	QueryType string `json:"queryType,omitempty"`

	// Documents matching the search query.
	// Read Only: true
	Results []*KnowledgeDocumentSearchResult `json:"results"`

	// The globally unique identifier for the search.
	// Read Only: true
	SearchID string `json:"searchId,omitempty"`

	// The total number of documents matching the query.
	// Read Only: true
	Total int32 `json:"total,omitempty"`
}

// Validate validates this knowledge document search
func (m *KnowledgeDocumentSearch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversationContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeDocumentSearch) validateApplication(formats strfmt.Registry) error {
	if swag.IsZero(m.Application) { // not required
		return nil
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeDocumentSearch) validateConversationContext(formats strfmt.Registry) error {
	if swag.IsZero(m.ConversationContext) { // not required
		return nil
	}

	if m.ConversationContext != nil {
		if err := m.ConversationContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversationContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conversationContext")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeDocumentSearch) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	if err := validate.MinLength("query", "body", *m.Query, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("query", "body", *m.Query, 2147483647); err != nil {
		return err
	}

	return nil
}

var knowledgeDocumentSearchTypeQueryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AutoSearch","ManualSearch","Suggestion"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		knowledgeDocumentSearchTypeQueryTypePropEnum = append(knowledgeDocumentSearchTypeQueryTypePropEnum, v)
	}
}

const (

	// KnowledgeDocumentSearchQueryTypeAutoSearch captures enum value "AutoSearch"
	KnowledgeDocumentSearchQueryTypeAutoSearch string = "AutoSearch"

	// KnowledgeDocumentSearchQueryTypeManualSearch captures enum value "ManualSearch"
	KnowledgeDocumentSearchQueryTypeManualSearch string = "ManualSearch"

	// KnowledgeDocumentSearchQueryTypeSuggestion captures enum value "Suggestion"
	KnowledgeDocumentSearchQueryTypeSuggestion string = "Suggestion"
)

// prop value enum
func (m *KnowledgeDocumentSearch) validateQueryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, knowledgeDocumentSearchTypeQueryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KnowledgeDocumentSearch) validateQueryType(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateQueryTypeEnum("queryType", "body", m.QueryType); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeDocumentSearch) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this knowledge document search based on the context it is used
func (m *KnowledgeDocumentSearch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConversationContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePageCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSearchID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnowledgeDocumentSearch) contextValidateApplication(ctx context.Context, formats strfmt.Registry) error {

	if m.Application != nil {
		if err := m.Application.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeDocumentSearch) contextValidateConversationContext(ctx context.Context, formats strfmt.Registry) error {

	if m.ConversationContext != nil {
		if err := m.ConversationContext.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conversationContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conversationContext")
			}
			return err
		}
	}

	return nil
}

func (m *KnowledgeDocumentSearch) contextValidatePageCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "pageCount", "body", int32(m.PageCount)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeDocumentSearch) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "results", "body", []*KnowledgeDocumentSearchResult(m.Results)); err != nil {
		return err
	}

	for i := 0; i < len(m.Results); i++ {

		if m.Results[i] != nil {
			if err := m.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KnowledgeDocumentSearch) contextValidateSearchID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "searchId", "body", string(m.SearchID)); err != nil {
		return err
	}

	return nil
}

func (m *KnowledgeDocumentSearch) contextValidateTotal(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "total", "body", int32(m.Total)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KnowledgeDocumentSearch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnowledgeDocumentSearch) UnmarshalBinary(b []byte) error {
	var res KnowledgeDocumentSearch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

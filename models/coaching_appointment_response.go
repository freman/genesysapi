// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CoachingAppointmentResponse Coaching appointment response
//
// swagger:model CoachingAppointmentResponse
type CoachingAppointmentResponse struct {

	// The list of attendees attending the coaching
	// Read Only: true
	// Unique: true
	Attendees []*UserReference `json:"attendees"`

	// The list of conversations associated with coaching appointment.
	// Read Only: true
	// Unique: true
	Conversations []*ConversationReference `json:"conversations"`

	// The user who created the coaching appointment
	// Read Only: true
	CreatedBy *UserReference `json:"createdBy,omitempty"`

	// The date/time the coaching appointment was set to completed status. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCompleted strfmt.DateTime `json:"dateCompleted,omitempty"`

	// The date/time the coaching appointment was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// The date/time the coaching appointment was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// The date/time the coaching appointment starts. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
	// Read Only: true
	// Format: date-time
	DateStart strfmt.DateTime `json:"dateStart,omitempty"`

	// The description of coaching appointment
	// Read Only: true
	Description string `json:"description,omitempty"`

	// The list of documents associated with coaching appointment.
	// Read Only: true
	// Unique: true
	Documents []*DocumentReference `json:"documents"`

	// The list of external links related to the appointment
	// Read Only: true
	ExternalLinks []string `json:"externalLinks"`

	// The facilitator of coaching appointment
	// Read Only: true
	Facilitator *UserReference `json:"facilitator,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Whether the appointment is overdue.
	// Read Only: true
	IsOverdue *bool `json:"isOverdue"`

	// The duration of coaching appointment in minutes
	// Read Only: true
	LengthInMinutes int32 `json:"lengthInMinutes,omitempty"`

	// The last user to modify the coaching appointment
	// Read Only: true
	ModifiedBy *UserReference `json:"modifiedBy,omitempty"`

	// The name of coaching appointment
	// Read Only: true
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The status of coaching appointment
	// Read Only: true
	// Enum: [Scheduled InProgress Completed InvalidSchedule]
	Status string `json:"status,omitempty"`

	// The Workforce Management schedule the appointment is associated with.
	// Read Only: true
	WfmSchedule *WfmScheduleReference `json:"wfmSchedule,omitempty"`
}

// Validate validates this coaching appointment response
func (m *CoachingAppointmentResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttendees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocuments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFacilitator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWfmSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CoachingAppointmentResponse) validateAttendees(formats strfmt.Registry) error {
	if swag.IsZero(m.Attendees) { // not required
		return nil
	}

	if err := validate.UniqueItems("attendees", "body", m.Attendees); err != nil {
		return err
	}

	for i := 0; i < len(m.Attendees); i++ {
		if swag.IsZero(m.Attendees[i]) { // not required
			continue
		}

		if m.Attendees[i] != nil {
			if err := m.Attendees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attendees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attendees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CoachingAppointmentResponse) validateConversations(formats strfmt.Registry) error {
	if swag.IsZero(m.Conversations) { // not required
		return nil
	}

	if err := validate.UniqueItems("conversations", "body", m.Conversations); err != nil {
		return err
	}

	for i := 0; i < len(m.Conversations); i++ {
		if swag.IsZero(m.Conversations[i]) { // not required
			continue
		}

		if m.Conversations[i] != nil {
			if err := m.Conversations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conversations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conversations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CoachingAppointmentResponse) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *CoachingAppointmentResponse) validateDateCompleted(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCompleted) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCompleted", "body", "date-time", m.DateCompleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) validateDateStart(formats strfmt.Registry) error {
	if swag.IsZero(m.DateStart) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStart", "body", "date-time", m.DateStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) validateDocuments(formats strfmt.Registry) error {
	if swag.IsZero(m.Documents) { // not required
		return nil
	}

	if err := validate.UniqueItems("documents", "body", m.Documents); err != nil {
		return err
	}

	for i := 0; i < len(m.Documents); i++ {
		if swag.IsZero(m.Documents[i]) { // not required
			continue
		}

		if m.Documents[i] != nil {
			if err := m.Documents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("documents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("documents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CoachingAppointmentResponse) validateFacilitator(formats strfmt.Registry) error {
	if swag.IsZero(m.Facilitator) { // not required
		return nil
	}

	if m.Facilitator != nil {
		if err := m.Facilitator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("facilitator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("facilitator")
			}
			return err
		}
	}

	return nil
}

func (m *CoachingAppointmentResponse) validateModifiedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedBy) { // not required
		return nil
	}

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modifiedBy")
			}
			return err
		}
	}

	return nil
}

func (m *CoachingAppointmentResponse) validateSelfURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var coachingAppointmentResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Scheduled","InProgress","Completed","InvalidSchedule"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		coachingAppointmentResponseTypeStatusPropEnum = append(coachingAppointmentResponseTypeStatusPropEnum, v)
	}
}

const (

	// CoachingAppointmentResponseStatusScheduled captures enum value "Scheduled"
	CoachingAppointmentResponseStatusScheduled string = "Scheduled"

	// CoachingAppointmentResponseStatusInProgress captures enum value "InProgress"
	CoachingAppointmentResponseStatusInProgress string = "InProgress"

	// CoachingAppointmentResponseStatusCompleted captures enum value "Completed"
	CoachingAppointmentResponseStatusCompleted string = "Completed"

	// CoachingAppointmentResponseStatusInvalidSchedule captures enum value "InvalidSchedule"
	CoachingAppointmentResponseStatusInvalidSchedule string = "InvalidSchedule"
)

// prop value enum
func (m *CoachingAppointmentResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, coachingAppointmentResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CoachingAppointmentResponse) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) validateWfmSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.WfmSchedule) { // not required
		return nil
	}

	if m.WfmSchedule != nil {
		if err := m.WfmSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wfmSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wfmSchedule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this coaching appointment response based on the context it is used
func (m *CoachingAppointmentResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttendees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConversations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateCompleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateModified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateStart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDocuments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFacilitator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsOverdue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLengthInMinutes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifiedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWfmSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CoachingAppointmentResponse) contextValidateAttendees(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "attendees", "body", []*UserReference(m.Attendees)); err != nil {
		return err
	}

	for i := 0; i < len(m.Attendees); i++ {

		if m.Attendees[i] != nil {
			if err := m.Attendees[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attendees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attendees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateConversations(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "conversations", "body", []*ConversationReference(m.Conversations)); err != nil {
		return err
	}

	for i := 0; i < len(m.Conversations); i++ {

		if m.Conversations[i] != nil {
			if err := m.Conversations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conversations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conversations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {
		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateDateCompleted(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateCompleted", "body", strfmt.DateTime(m.DateCompleted)); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateDateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateCreated", "body", strfmt.DateTime(m.DateCreated)); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateDateModified(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateModified", "body", strfmt.DateTime(m.DateModified)); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateDateStart(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dateStart", "body", strfmt.DateTime(m.DateStart)); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateDocuments(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "documents", "body", []*DocumentReference(m.Documents)); err != nil {
		return err
	}

	for i := 0; i < len(m.Documents); i++ {

		if m.Documents[i] != nil {
			if err := m.Documents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("documents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("documents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateExternalLinks(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "externalLinks", "body", []string(m.ExternalLinks)); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateFacilitator(ctx context.Context, formats strfmt.Registry) error {

	if m.Facilitator != nil {
		if err := m.Facilitator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("facilitator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("facilitator")
			}
			return err
		}
	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateIsOverdue(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isOverdue", "body", m.IsOverdue); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateLengthInMinutes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lengthInMinutes", "body", int32(m.LengthInMinutes)); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateModifiedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modifiedBy")
			}
			return err
		}
	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateSelfURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfUri", "body", strfmt.URI(m.SelfURI)); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *CoachingAppointmentResponse) contextValidateWfmSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.WfmSchedule != nil {
		if err := m.WfmSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wfmSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wfmSchedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CoachingAppointmentResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoachingAppointmentResponse) UnmarshalBinary(b []byte) error {
	var res CoachingAppointmentResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

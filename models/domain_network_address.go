// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainNetworkAddress domain network address
//
// swagger:model DomainNetworkAddress
type DomainNetworkAddress struct {

	// An IPv4 or IPv6 IP address. When specifying an address of type "ip", use CIDR format for the subnet mask.
	Address string `json:"address,omitempty"`

	// The address family for this address.
	// Enum: [2 23]
	Family int32 `json:"family,omitempty"`

	// True if this address will persist on Edge restart.  Addresses assigned by DHCP will be returned as false.
	Persistent bool `json:"persistent"`

	// The type of address.
	// Enum: [ip dns gateway tdm]
	Type string `json:"type,omitempty"`
}

// Validate validates this domain network address
func (m *DomainNetworkAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFamily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var domainNetworkAddressTypeFamilyPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[2,23]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainNetworkAddressTypeFamilyPropEnum = append(domainNetworkAddressTypeFamilyPropEnum, v)
	}
}

// prop value enum
func (m *DomainNetworkAddress) validateFamilyEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, domainNetworkAddressTypeFamilyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DomainNetworkAddress) validateFamily(formats strfmt.Registry) error {
	if swag.IsZero(m.Family) { // not required
		return nil
	}

	// value enum
	if err := m.validateFamilyEnum("family", "body", m.Family); err != nil {
		return err
	}

	return nil
}

var domainNetworkAddressTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ip","dns","gateway","tdm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainNetworkAddressTypeTypePropEnum = append(domainNetworkAddressTypeTypePropEnum, v)
	}
}

const (

	// DomainNetworkAddressTypeIP captures enum value "ip"
	DomainNetworkAddressTypeIP string = "ip"

	// DomainNetworkAddressTypeDNS captures enum value "dns"
	DomainNetworkAddressTypeDNS string = "dns"

	// DomainNetworkAddressTypeGateway captures enum value "gateway"
	DomainNetworkAddressTypeGateway string = "gateway"

	// DomainNetworkAddressTypeTdm captures enum value "tdm"
	DomainNetworkAddressTypeTdm string = "tdm"
)

// prop value enum
func (m *DomainNetworkAddress) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, domainNetworkAddressTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DomainNetworkAddress) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain network address based on context it is used
func (m *DomainNetworkAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainNetworkAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainNetworkAddress) UnmarshalBinary(b []byte) error {
	var res DomainNetworkAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

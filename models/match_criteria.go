// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MatchCriteria Defines a simple matching condition
//
// swagger:model MatchCriteria
type MatchCriteria struct {

	// The Goessner json path of the field to match
	JSONPath string `json:"jsonPath,omitempty"`

	// The type of operation to perform for matching check
	// Enum: [GreaterThanOrEqual LessThanOrEqual Equal NotEqual LessThan GreaterThan NotIn In Contains All Exists Size]
	Operator string `json:"operator,omitempty"`

	// The value to match on. Only one of value and values can be included
	Value JSONNode `json:"value,omitempty"`

	// The list of values to match on. Only one of value and values can be included
	Values []JSONNode `json:"values"`
}

// Validate validates this match criteria
func (m *MatchCriteria) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var matchCriteriaTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GreaterThanOrEqual","LessThanOrEqual","Equal","NotEqual","LessThan","GreaterThan","NotIn","In","Contains","All","Exists","Size"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		matchCriteriaTypeOperatorPropEnum = append(matchCriteriaTypeOperatorPropEnum, v)
	}
}

const (

	// MatchCriteriaOperatorGreaterThanOrEqual captures enum value "GreaterThanOrEqual"
	MatchCriteriaOperatorGreaterThanOrEqual string = "GreaterThanOrEqual"

	// MatchCriteriaOperatorLessThanOrEqual captures enum value "LessThanOrEqual"
	MatchCriteriaOperatorLessThanOrEqual string = "LessThanOrEqual"

	// MatchCriteriaOperatorEqual captures enum value "Equal"
	MatchCriteriaOperatorEqual string = "Equal"

	// MatchCriteriaOperatorNotEqual captures enum value "NotEqual"
	MatchCriteriaOperatorNotEqual string = "NotEqual"

	// MatchCriteriaOperatorLessThan captures enum value "LessThan"
	MatchCriteriaOperatorLessThan string = "LessThan"

	// MatchCriteriaOperatorGreaterThan captures enum value "GreaterThan"
	MatchCriteriaOperatorGreaterThan string = "GreaterThan"

	// MatchCriteriaOperatorNotIn captures enum value "NotIn"
	MatchCriteriaOperatorNotIn string = "NotIn"

	// MatchCriteriaOperatorIn captures enum value "In"
	MatchCriteriaOperatorIn string = "In"

	// MatchCriteriaOperatorContains captures enum value "Contains"
	MatchCriteriaOperatorContains string = "Contains"

	// MatchCriteriaOperatorAll captures enum value "All"
	MatchCriteriaOperatorAll string = "All"

	// MatchCriteriaOperatorExists captures enum value "Exists"
	MatchCriteriaOperatorExists string = "Exists"

	// MatchCriteriaOperatorSize captures enum value "Size"
	MatchCriteriaOperatorSize string = "Size"
)

// prop value enum
func (m *MatchCriteria) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, matchCriteriaTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MatchCriteria) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this match criteria based on context it is used
func (m *MatchCriteria) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MatchCriteria) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MatchCriteria) UnmarshalBinary(b []byte) error {
	var res MatchCriteria
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WidgetClientConfig widget client config
//
// swagger:model WidgetClientConfig
type WidgetClientConfig struct {

	// third party
	ThirdParty WidgetClientConfigThirdParty `json:"third-party,omitempty"`

	// v1
	V1 *WidgetClientConfigV1 `json:"v1,omitempty"`

	// v1 http
	V1HTTP *WidgetClientConfigV1HTTP `json:"v1-http,omitempty"`

	// v2
	V2 WidgetClientConfigV2 `json:"v2,omitempty"`
}

// Validate validates this widget client config
func (m *WidgetClientConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateV1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateV1HTTP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WidgetClientConfig) validateV1(formats strfmt.Registry) error {
	if swag.IsZero(m.V1) { // not required
		return nil
	}

	if m.V1 != nil {
		if err := m.V1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("v1")
			}
			return err
		}
	}

	return nil
}

func (m *WidgetClientConfig) validateV1HTTP(formats strfmt.Registry) error {
	if swag.IsZero(m.V1HTTP) { // not required
		return nil
	}

	if m.V1HTTP != nil {
		if err := m.V1HTTP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v1-http")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("v1-http")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this widget client config based on the context it is used
func (m *WidgetClientConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateV1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateV1HTTP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WidgetClientConfig) contextValidateV1(ctx context.Context, formats strfmt.Registry) error {

	if m.V1 != nil {
		if err := m.V1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("v1")
			}
			return err
		}
	}

	return nil
}

func (m *WidgetClientConfig) contextValidateV1HTTP(ctx context.Context, formats strfmt.Registry) error {

	if m.V1HTTP != nil {
		if err := m.V1HTTP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v1-http")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("v1-http")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WidgetClientConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WidgetClientConfig) UnmarshalBinary(b []byte) error {
	var res WidgetClientConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserRoutingSkill Represents an organization skill assigned to a user. When assigning to a user specify the organization skill id as the id.
//
// swagger:model UserRoutingSkill
type UserRoutingSkill struct {

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Proficiency is a rating from 0.0 to 5.0 on how competent an agent is for a particular skill. It is used when a queue is set to "Best available skills" mode to allow acd interactions to target agents with higher proficiency ratings.
	Proficiency float64 `json:"proficiency,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// URI to the organization skill used by this user skill.
	// Read Only: true
	// Format: uri
	SkillURI strfmt.URI `json:"skillUri,omitempty"`

	// Activate or deactivate this routing skill.
	// Enum: [active inactive deleted]
	State string `json:"state,omitempty"`
}

// Validate validates this user routing skill
func (m *UserRoutingSkill) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkillURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserRoutingSkill) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserRoutingSkill) validateSkillURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SkillURI) { // not required
		return nil
	}

	if err := validate.FormatOf("skillUri", "body", "uri", m.SkillURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var userRoutingSkillTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userRoutingSkillTypeStatePropEnum = append(userRoutingSkillTypeStatePropEnum, v)
	}
}

const (

	// UserRoutingSkillStateActive captures enum value "active"
	UserRoutingSkillStateActive string = "active"

	// UserRoutingSkillStateInactive captures enum value "inactive"
	UserRoutingSkillStateInactive string = "inactive"

	// UserRoutingSkillStateDeleted captures enum value "deleted"
	UserRoutingSkillStateDeleted string = "deleted"
)

// prop value enum
func (m *UserRoutingSkill) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userRoutingSkillTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserRoutingSkill) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserRoutingSkill) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserRoutingSkill) UnmarshalBinary(b []byte) error {
	var res UserRoutingSkill
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

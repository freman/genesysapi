// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonCampaign common campaign
//
// swagger:model CommonCampaign
type CommonCampaign struct {

	// The division to which this entity belongs.
	Division *Division `json:"division,omitempty"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The media type used for this campaign.
	// Enum: [email sms voice]
	MediaType string `json:"mediaType,omitempty"`

	// The name of the Campaign.
	Name string `json:"name,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`
}

// Validate validates this common campaign
func (m *CommonCampaign) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonCampaign) validateDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if m.Division != nil {
		if err := m.Division.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("division")
			}
			return err
		}
	}

	return nil
}

var commonCampaignTypeMediaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email","sms","voice"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonCampaignTypeMediaTypePropEnum = append(commonCampaignTypeMediaTypePropEnum, v)
	}
}

const (

	// CommonCampaignMediaTypeEmail captures enum value "email"
	CommonCampaignMediaTypeEmail string = "email"

	// CommonCampaignMediaTypeSms captures enum value "sms"
	CommonCampaignMediaTypeSms string = "sms"

	// CommonCampaignMediaTypeVoice captures enum value "voice"
	CommonCampaignMediaTypeVoice string = "voice"
)

// prop value enum
func (m *CommonCampaign) validateMediaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonCampaignTypeMediaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonCampaign) validateMediaType(formats strfmt.Registry) error {

	if swag.IsZero(m.MediaType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMediaTypeEnum("mediaType", "body", m.MediaType); err != nil {
		return err
	}

	return nil
}

func (m *CommonCampaign) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonCampaign) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonCampaign) UnmarshalBinary(b []byte) error {
	var res CommonCampaign
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

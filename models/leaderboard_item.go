// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LeaderboardItem leaderboard item
//
// swagger:model LeaderboardItem
type LeaderboardItem struct {

	// The points collected by the user
	// Read Only: true
	Points int64 `json:"points,omitempty"`

	// The rank of the user
	// Read Only: true
	Rank int32 `json:"rank,omitempty"`

	// The user object for this leaderboard rank
	// Read Only: true
	User *UserReference `json:"user,omitempty"`
}

// Validate validates this leaderboard item
func (m *LeaderboardItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeaderboardItem) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this leaderboard item based on the context it is used
func (m *LeaderboardItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRank(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeaderboardItem) contextValidatePoints(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "points", "body", int64(m.Points)); err != nil {
		return err
	}

	return nil
}

func (m *LeaderboardItem) contextValidateRank(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "rank", "body", int32(m.Rank)); err != nil {
		return err
	}

	return nil
}

func (m *LeaderboardItem) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LeaderboardItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LeaderboardItem) UnmarshalBinary(b []byte) error {
	var res LeaderboardItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

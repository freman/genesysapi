// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DocumentQuery document query
//
// swagger:model DocumentQuery
type DocumentQuery struct {

	// Documents filter clauses/criteria. Limit of 20 clauses.
	// Required: true
	Clauses []*DocumentQueryClause `json:"clauses"`

	// Specifies how the filter clauses will be applied together.
	// Required: true
	// Enum: [Or And]
	Operator *string `json:"operator"`
}

// Validate validates this document query
func (m *DocumentQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClauses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DocumentQuery) validateClauses(formats strfmt.Registry) error {

	if err := validate.Required("clauses", "body", m.Clauses); err != nil {
		return err
	}

	for i := 0; i < len(m.Clauses); i++ {
		if swag.IsZero(m.Clauses[i]) { // not required
			continue
		}

		if m.Clauses[i] != nil {
			if err := m.Clauses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clauses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clauses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var documentQueryTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Or","And"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		documentQueryTypeOperatorPropEnum = append(documentQueryTypeOperatorPropEnum, v)
	}
}

const (

	// DocumentQueryOperatorOr captures enum value "Or"
	DocumentQueryOperatorOr string = "Or"

	// DocumentQueryOperatorAnd captures enum value "And"
	DocumentQueryOperatorAnd string = "And"
)

// prop value enum
func (m *DocumentQuery) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, documentQueryTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DocumentQuery) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this document query based on the context it is used
func (m *DocumentQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClauses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DocumentQuery) contextValidateClauses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clauses); i++ {

		if m.Clauses[i] != nil {
			if err := m.Clauses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clauses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clauses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DocumentQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DocumentQuery) UnmarshalBinary(b []byte) error {
	var res DocumentQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

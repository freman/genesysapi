// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdditionalLanguagesIntent additional languages intent
//
// swagger:model AdditionalLanguagesIntent
type AdditionalLanguagesIntent struct {

	// ID of the intent for respective additional language
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Utterances list for additional language
	Utterances []*NluUtterance `json:"utterances"`
}

// Validate validates this additional languages intent
func (m *AdditionalLanguagesIntent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUtterances(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdditionalLanguagesIntent) validateUtterances(formats strfmt.Registry) error {
	if swag.IsZero(m.Utterances) { // not required
		return nil
	}

	for i := 0; i < len(m.Utterances); i++ {
		if swag.IsZero(m.Utterances[i]) { // not required
			continue
		}

		if m.Utterances[i] != nil {
			if err := m.Utterances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("utterances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("utterances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this additional languages intent based on the context it is used
func (m *AdditionalLanguagesIntent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUtterances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdditionalLanguagesIntent) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *AdditionalLanguagesIntent) contextValidateUtterances(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Utterances); i++ {

		if m.Utterances[i] != nil {
			if err := m.Utterances[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("utterances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("utterances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdditionalLanguagesIntent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdditionalLanguagesIntent) UnmarshalBinary(b []byte) error {
	var res AdditionalLanguagesIntent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TermAttribute term attribute
//
// swagger:model TermAttribute
type TermAttribute struct {

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// type
	// Enum: [NUMBER STRING DATE BOOLEAN LIST]
	Type string `json:"type,omitempty"`
}

// Validate validates this term attribute
func (m *TermAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var termAttributeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NUMBER","STRING","DATE","BOOLEAN","LIST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		termAttributeTypeTypePropEnum = append(termAttributeTypeTypePropEnum, v)
	}
}

const (

	// TermAttributeTypeNUMBER captures enum value "NUMBER"
	TermAttributeTypeNUMBER string = "NUMBER"

	// TermAttributeTypeSTRING captures enum value "STRING"
	TermAttributeTypeSTRING string = "STRING"

	// TermAttributeTypeDATE captures enum value "DATE"
	TermAttributeTypeDATE string = "DATE"

	// TermAttributeTypeBOOLEAN captures enum value "BOOLEAN"
	TermAttributeTypeBOOLEAN string = "BOOLEAN"

	// TermAttributeTypeLIST captures enum value "LIST"
	TermAttributeTypeLIST string = "LIST"
)

// prop value enum
func (m *TermAttribute) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, termAttributeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TermAttribute) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this term attribute based on context it is used
func (m *TermAttribute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TermAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TermAttribute) UnmarshalBinary(b []byte) error {
	var res TermAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

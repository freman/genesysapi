// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialType credential type
//
// swagger:model CredentialType
type CredentialType struct {

	// Order in which properties should be displayed in the UI.
	// Read Only: true
	DisplayOrder []string `json:"displayOrder"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Properties describing credentials of this type.
	// Read Only: true
	Properties interface{} `json:"properties,omitempty"`

	// Properties that are required fields.
	// Read Only: true
	Required []string `json:"required"`
}

// Validate validates this credential type
func (m *CredentialType) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this credential type based on the context it is used
func (m *CredentialType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisplayOrder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequired(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialType) contextValidateDisplayOrder(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "displayOrder", "body", []string(m.DisplayOrder)); err != nil {
		return err
	}

	return nil
}

func (m *CredentialType) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CredentialType) contextValidateRequired(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "required", "body", []string(m.Required)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialType) UnmarshalBinary(b []byte) error {
	var res CredentialType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoutingConversationAttributesRequest routing conversation attributes request
//
// swagger:model RoutingConversationAttributesRequest
type RoutingConversationAttributesRequest struct {

	// Language requirement for the conversation.  To remove the language requirement, specify an empty string, i.e., "".
	LanguageID string `json:"languageId,omitempty"`

	// Priority for the conversation.  Each point of priority is equivalent to one minute of time in queue.  Range:[-25000000, 25000000].  To reset, specify 0.
	// Maximum: 2.5e+07
	// Minimum: -2.5e+07
	Priority *int32 `json:"priority,omitempty"`

	// request scored agents
	RequestScoredAgents []*RequestScoredAgent `json:"requestScoredAgents"`

	// Skill requirements for the conversation.  To remove all skill requirements, specify an empty list, i.e. [].
	SkillIds []string `json:"skillIds"`
}

// Validate validates this routing conversation attributes request
func (m *RoutingConversationAttributesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestScoredAgents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoutingConversationAttributesRequest) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	if err := validate.MinimumInt("priority", "body", int64(*m.Priority), -2.5e+07, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("priority", "body", int64(*m.Priority), 2.5e+07, false); err != nil {
		return err
	}

	return nil
}

func (m *RoutingConversationAttributesRequest) validateRequestScoredAgents(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestScoredAgents) { // not required
		return nil
	}

	for i := 0; i < len(m.RequestScoredAgents); i++ {
		if swag.IsZero(m.RequestScoredAgents[i]) { // not required
			continue
		}

		if m.RequestScoredAgents[i] != nil {
			if err := m.RequestScoredAgents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requestScoredAgents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requestScoredAgents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this routing conversation attributes request based on the context it is used
func (m *RoutingConversationAttributesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRequestScoredAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoutingConversationAttributesRequest) contextValidateRequestScoredAgents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RequestScoredAgents); i++ {

		if m.RequestScoredAgents[i] != nil {
			if err := m.RequestScoredAgents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requestScoredAgents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requestScoredAgents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoutingConversationAttributesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoutingConversationAttributesRequest) UnmarshalBinary(b []byte) error {
	var res RoutingConversationAttributesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

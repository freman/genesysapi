// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RestErrorDetail rest error detail
//
// swagger:model RestErrorDetail
type RestErrorDetail struct {

	// additional information regarding the error
	// Read Only: true
	Details string `json:"details,omitempty"`

	// name of the error
	// Required: true
	// Read Only: true
	Error string `json:"error"`
}

// Validate validates this rest error detail
func (m *RestErrorDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestErrorDetail) validateError(formats strfmt.Registry) error {

	if err := validate.RequiredString("error", "body", m.Error); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this rest error detail based on the context it is used
func (m *RestErrorDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestErrorDetail) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "details", "body", string(m.Details)); err != nil {
		return err
	}

	return nil
}

func (m *RestErrorDetail) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "error", "body", string(m.Error)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestErrorDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestErrorDetail) UnmarshalBinary(b []byte) error {
	var res RestErrorDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

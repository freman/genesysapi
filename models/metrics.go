// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Metrics metrics
//
// swagger:model Metrics
type Metrics struct {

	// A flag for whether this metric is enabled for a performance profile
	Enabled bool `json:"enabled"`

	// The globally unique identifier for the object.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Achievable maximum points for this metric
	MaxPoints int32 `json:"maxPoints,omitempty"`

	// The id of associated metric definition
	MetricDefinitionID string `json:"metricDefinitionId,omitempty"`

	// The name of associated metric definition
	MetricDefinitionName string `json:"metricDefinitionName,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The order of metric within a performance profile
	Order int32 `json:"order,omitempty"`

	// Performance profile id of this metric
	PerformanceProfileID string `json:"performanceProfileId,omitempty"`

	// The URI for this object
	// Read Only: true
	// Format: uri
	SelfURI strfmt.URI `json:"selfUri,omitempty"`

	// The name of associated objective template
	TemplateName string `json:"templateName,omitempty"`

	// Corresponding unit type for this metric
	// Enum: [None Percent Seconds Number AttendanceStatus Unit]
	UnitType string `json:"unitType,omitempty"`
}

// Validate validates this metrics
func (m *Metrics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelfURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Metrics) validateSelfURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfURI) { // not required
		return nil
	}

	if err := validate.FormatOf("selfUri", "body", "uri", m.SelfURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var metricsTypeUnitTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Percent","Seconds","Number","AttendanceStatus","Unit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metricsTypeUnitTypePropEnum = append(metricsTypeUnitTypePropEnum, v)
	}
}

const (

	// MetricsUnitTypeNone captures enum value "None"
	MetricsUnitTypeNone string = "None"

	// MetricsUnitTypePercent captures enum value "Percent"
	MetricsUnitTypePercent string = "Percent"

	// MetricsUnitTypeSeconds captures enum value "Seconds"
	MetricsUnitTypeSeconds string = "Seconds"

	// MetricsUnitTypeNumber captures enum value "Number"
	MetricsUnitTypeNumber string = "Number"

	// MetricsUnitTypeAttendanceStatus captures enum value "AttendanceStatus"
	MetricsUnitTypeAttendanceStatus string = "AttendanceStatus"

	// MetricsUnitTypeUnit captures enum value "Unit"
	MetricsUnitTypeUnit string = "Unit"
)

// prop value enum
func (m *Metrics) validateUnitTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, metricsTypeUnitTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Metrics) validateUnitType(formats strfmt.Registry) error {

	if swag.IsZero(m.UnitType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUnitTypeEnum("unitType", "body", m.UnitType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Metrics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Metrics) UnmarshalBinary(b []byte) error {
	var res Metrics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectRate connect rate
//
// swagger:model ConnectRate
type ConnectRate struct {

	// Number of call attempts made
	// Read Only: true
	Attempts int64 `json:"attempts,omitempty"`

	// Ratio of connects to attempts
	// Read Only: true
	ConnectRatio float64 `json:"connectRatio,omitempty"`

	// Number of calls with a live voice detected
	// Read Only: true
	Connects int64 `json:"connects,omitempty"`
}

// Validate validates this connect rate
func (m *ConnectRate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this connect rate based on the context it is used
func (m *ConnectRate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttempts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnectRatio(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectRate) contextValidateAttempts(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "attempts", "body", int64(m.Attempts)); err != nil {
		return err
	}

	return nil
}

func (m *ConnectRate) contextValidateConnectRatio(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "connectRatio", "body", float64(m.ConnectRatio)); err != nil {
		return err
	}

	return nil
}

func (m *ConnectRate) contextValidateConnects(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "connects", "body", int64(m.Connects)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectRate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectRate) UnmarshalBinary(b []byte) error {
	var res ConnectRate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

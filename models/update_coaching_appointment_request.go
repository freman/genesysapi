// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateCoachingAppointmentRequest Update coaching appointment request
//
// swagger:model UpdateCoachingAppointmentRequest
type UpdateCoachingAppointmentRequest struct {

	// IDs of conversations associated with this coaching appointment.
	// Unique: true
	ConversationIds []string `json:"conversationIds"`

	// The date/time the coaching appointment starts. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
	// Format: date-time
	DateStart strfmt.DateTime `json:"dateStart,omitempty"`

	// The description of coaching appointment.
	Description string `json:"description,omitempty"`

	// IDs of documents associated with this coaching appointment.
	// Unique: true
	DocumentIds []string `json:"documentIds"`

	// The duration of coaching appointment in minutes.
	LengthInMinutes int32 `json:"lengthInMinutes,omitempty"`

	// The name of coaching appointment.
	Name string `json:"name,omitempty"`
}

// Validate validates this update coaching appointment request
func (m *UpdateCoachingAppointmentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConversationIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateCoachingAppointmentRequest) validateConversationIds(formats strfmt.Registry) error {

	if swag.IsZero(m.ConversationIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("conversationIds", "body", m.ConversationIds); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCoachingAppointmentRequest) validateDateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.DateStart) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStart", "body", "date-time", m.DateStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCoachingAppointmentRequest) validateDocumentIds(formats strfmt.Registry) error {

	if swag.IsZero(m.DocumentIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("documentIds", "body", m.DocumentIds); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateCoachingAppointmentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateCoachingAppointmentRequest) UnmarshalBinary(b []byte) error {
	var res UpdateCoachingAppointmentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

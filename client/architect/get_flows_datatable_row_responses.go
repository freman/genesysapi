// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetFlowsDatatableRowReader is a Reader for the GetFlowsDatatableRow structure.
type GetFlowsDatatableRowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFlowsDatatableRowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFlowsDatatableRowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetFlowsDatatableRowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetFlowsDatatableRowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetFlowsDatatableRowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFlowsDatatableRowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetFlowsDatatableRowRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetFlowsDatatableRowRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetFlowsDatatableRowUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetFlowsDatatableRowTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetFlowsDatatableRowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetFlowsDatatableRowServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetFlowsDatatableRowGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetFlowsDatatableRowOK creates a GetFlowsDatatableRowOK with default headers values
func NewGetFlowsDatatableRowOK() *GetFlowsDatatableRowOK {
	return &GetFlowsDatatableRowOK{}
}

/*
GetFlowsDatatableRowOK describes a response with status code 200, with default header values.

successful operation
*/
type GetFlowsDatatableRowOK struct {
	Payload map[string]interface{}
}

// IsSuccess returns true when this get flows datatable row o k response has a 2xx status code
func (o *GetFlowsDatatableRowOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get flows datatable row o k response has a 3xx status code
func (o *GetFlowsDatatableRowOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flows datatable row o k response has a 4xx status code
func (o *GetFlowsDatatableRowOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get flows datatable row o k response has a 5xx status code
func (o *GetFlowsDatatableRowOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get flows datatable row o k response a status code equal to that given
func (o *GetFlowsDatatableRowOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetFlowsDatatableRowOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowOK  %+v", 200, o.Payload)
}

func (o *GetFlowsDatatableRowOK) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowOK  %+v", 200, o.Payload)
}

func (o *GetFlowsDatatableRowOK) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *GetFlowsDatatableRowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowsDatatableRowBadRequest creates a GetFlowsDatatableRowBadRequest with default headers values
func NewGetFlowsDatatableRowBadRequest() *GetFlowsDatatableRowBadRequest {
	return &GetFlowsDatatableRowBadRequest{}
}

/*
GetFlowsDatatableRowBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetFlowsDatatableRowBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flows datatable row bad request response has a 2xx status code
func (o *GetFlowsDatatableRowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flows datatable row bad request response has a 3xx status code
func (o *GetFlowsDatatableRowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flows datatable row bad request response has a 4xx status code
func (o *GetFlowsDatatableRowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flows datatable row bad request response has a 5xx status code
func (o *GetFlowsDatatableRowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get flows datatable row bad request response a status code equal to that given
func (o *GetFlowsDatatableRowBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetFlowsDatatableRowBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowBadRequest  %+v", 400, o.Payload)
}

func (o *GetFlowsDatatableRowBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowBadRequest  %+v", 400, o.Payload)
}

func (o *GetFlowsDatatableRowBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowsDatatableRowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowsDatatableRowUnauthorized creates a GetFlowsDatatableRowUnauthorized with default headers values
func NewGetFlowsDatatableRowUnauthorized() *GetFlowsDatatableRowUnauthorized {
	return &GetFlowsDatatableRowUnauthorized{}
}

/*
GetFlowsDatatableRowUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetFlowsDatatableRowUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flows datatable row unauthorized response has a 2xx status code
func (o *GetFlowsDatatableRowUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flows datatable row unauthorized response has a 3xx status code
func (o *GetFlowsDatatableRowUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flows datatable row unauthorized response has a 4xx status code
func (o *GetFlowsDatatableRowUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flows datatable row unauthorized response has a 5xx status code
func (o *GetFlowsDatatableRowUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get flows datatable row unauthorized response a status code equal to that given
func (o *GetFlowsDatatableRowUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetFlowsDatatableRowUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowUnauthorized  %+v", 401, o.Payload)
}

func (o *GetFlowsDatatableRowUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowUnauthorized  %+v", 401, o.Payload)
}

func (o *GetFlowsDatatableRowUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowsDatatableRowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowsDatatableRowForbidden creates a GetFlowsDatatableRowForbidden with default headers values
func NewGetFlowsDatatableRowForbidden() *GetFlowsDatatableRowForbidden {
	return &GetFlowsDatatableRowForbidden{}
}

/*
GetFlowsDatatableRowForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetFlowsDatatableRowForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flows datatable row forbidden response has a 2xx status code
func (o *GetFlowsDatatableRowForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flows datatable row forbidden response has a 3xx status code
func (o *GetFlowsDatatableRowForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flows datatable row forbidden response has a 4xx status code
func (o *GetFlowsDatatableRowForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flows datatable row forbidden response has a 5xx status code
func (o *GetFlowsDatatableRowForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get flows datatable row forbidden response a status code equal to that given
func (o *GetFlowsDatatableRowForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetFlowsDatatableRowForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowForbidden  %+v", 403, o.Payload)
}

func (o *GetFlowsDatatableRowForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowForbidden  %+v", 403, o.Payload)
}

func (o *GetFlowsDatatableRowForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowsDatatableRowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowsDatatableRowNotFound creates a GetFlowsDatatableRowNotFound with default headers values
func NewGetFlowsDatatableRowNotFound() *GetFlowsDatatableRowNotFound {
	return &GetFlowsDatatableRowNotFound{}
}

/*
GetFlowsDatatableRowNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetFlowsDatatableRowNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flows datatable row not found response has a 2xx status code
func (o *GetFlowsDatatableRowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flows datatable row not found response has a 3xx status code
func (o *GetFlowsDatatableRowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flows datatable row not found response has a 4xx status code
func (o *GetFlowsDatatableRowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flows datatable row not found response has a 5xx status code
func (o *GetFlowsDatatableRowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get flows datatable row not found response a status code equal to that given
func (o *GetFlowsDatatableRowNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetFlowsDatatableRowNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowNotFound  %+v", 404, o.Payload)
}

func (o *GetFlowsDatatableRowNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowNotFound  %+v", 404, o.Payload)
}

func (o *GetFlowsDatatableRowNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowsDatatableRowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowsDatatableRowRequestTimeout creates a GetFlowsDatatableRowRequestTimeout with default headers values
func NewGetFlowsDatatableRowRequestTimeout() *GetFlowsDatatableRowRequestTimeout {
	return &GetFlowsDatatableRowRequestTimeout{}
}

/*
GetFlowsDatatableRowRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetFlowsDatatableRowRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flows datatable row request timeout response has a 2xx status code
func (o *GetFlowsDatatableRowRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flows datatable row request timeout response has a 3xx status code
func (o *GetFlowsDatatableRowRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flows datatable row request timeout response has a 4xx status code
func (o *GetFlowsDatatableRowRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flows datatable row request timeout response has a 5xx status code
func (o *GetFlowsDatatableRowRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get flows datatable row request timeout response a status code equal to that given
func (o *GetFlowsDatatableRowRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetFlowsDatatableRowRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetFlowsDatatableRowRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetFlowsDatatableRowRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowsDatatableRowRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowsDatatableRowRequestEntityTooLarge creates a GetFlowsDatatableRowRequestEntityTooLarge with default headers values
func NewGetFlowsDatatableRowRequestEntityTooLarge() *GetFlowsDatatableRowRequestEntityTooLarge {
	return &GetFlowsDatatableRowRequestEntityTooLarge{}
}

/*
GetFlowsDatatableRowRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetFlowsDatatableRowRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flows datatable row request entity too large response has a 2xx status code
func (o *GetFlowsDatatableRowRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flows datatable row request entity too large response has a 3xx status code
func (o *GetFlowsDatatableRowRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flows datatable row request entity too large response has a 4xx status code
func (o *GetFlowsDatatableRowRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flows datatable row request entity too large response has a 5xx status code
func (o *GetFlowsDatatableRowRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get flows datatable row request entity too large response a status code equal to that given
func (o *GetFlowsDatatableRowRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetFlowsDatatableRowRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetFlowsDatatableRowRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetFlowsDatatableRowRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowsDatatableRowRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowsDatatableRowUnsupportedMediaType creates a GetFlowsDatatableRowUnsupportedMediaType with default headers values
func NewGetFlowsDatatableRowUnsupportedMediaType() *GetFlowsDatatableRowUnsupportedMediaType {
	return &GetFlowsDatatableRowUnsupportedMediaType{}
}

/*
GetFlowsDatatableRowUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetFlowsDatatableRowUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flows datatable row unsupported media type response has a 2xx status code
func (o *GetFlowsDatatableRowUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flows datatable row unsupported media type response has a 3xx status code
func (o *GetFlowsDatatableRowUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flows datatable row unsupported media type response has a 4xx status code
func (o *GetFlowsDatatableRowUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flows datatable row unsupported media type response has a 5xx status code
func (o *GetFlowsDatatableRowUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get flows datatable row unsupported media type response a status code equal to that given
func (o *GetFlowsDatatableRowUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetFlowsDatatableRowUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetFlowsDatatableRowUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetFlowsDatatableRowUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowsDatatableRowUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowsDatatableRowTooManyRequests creates a GetFlowsDatatableRowTooManyRequests with default headers values
func NewGetFlowsDatatableRowTooManyRequests() *GetFlowsDatatableRowTooManyRequests {
	return &GetFlowsDatatableRowTooManyRequests{}
}

/*
GetFlowsDatatableRowTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetFlowsDatatableRowTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flows datatable row too many requests response has a 2xx status code
func (o *GetFlowsDatatableRowTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flows datatable row too many requests response has a 3xx status code
func (o *GetFlowsDatatableRowTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flows datatable row too many requests response has a 4xx status code
func (o *GetFlowsDatatableRowTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flows datatable row too many requests response has a 5xx status code
func (o *GetFlowsDatatableRowTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get flows datatable row too many requests response a status code equal to that given
func (o *GetFlowsDatatableRowTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetFlowsDatatableRowTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetFlowsDatatableRowTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetFlowsDatatableRowTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowsDatatableRowTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowsDatatableRowInternalServerError creates a GetFlowsDatatableRowInternalServerError with default headers values
func NewGetFlowsDatatableRowInternalServerError() *GetFlowsDatatableRowInternalServerError {
	return &GetFlowsDatatableRowInternalServerError{}
}

/*
GetFlowsDatatableRowInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetFlowsDatatableRowInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flows datatable row internal server error response has a 2xx status code
func (o *GetFlowsDatatableRowInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flows datatable row internal server error response has a 3xx status code
func (o *GetFlowsDatatableRowInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flows datatable row internal server error response has a 4xx status code
func (o *GetFlowsDatatableRowInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get flows datatable row internal server error response has a 5xx status code
func (o *GetFlowsDatatableRowInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get flows datatable row internal server error response a status code equal to that given
func (o *GetFlowsDatatableRowInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetFlowsDatatableRowInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowInternalServerError  %+v", 500, o.Payload)
}

func (o *GetFlowsDatatableRowInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowInternalServerError  %+v", 500, o.Payload)
}

func (o *GetFlowsDatatableRowInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowsDatatableRowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowsDatatableRowServiceUnavailable creates a GetFlowsDatatableRowServiceUnavailable with default headers values
func NewGetFlowsDatatableRowServiceUnavailable() *GetFlowsDatatableRowServiceUnavailable {
	return &GetFlowsDatatableRowServiceUnavailable{}
}

/*
GetFlowsDatatableRowServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetFlowsDatatableRowServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flows datatable row service unavailable response has a 2xx status code
func (o *GetFlowsDatatableRowServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flows datatable row service unavailable response has a 3xx status code
func (o *GetFlowsDatatableRowServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flows datatable row service unavailable response has a 4xx status code
func (o *GetFlowsDatatableRowServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get flows datatable row service unavailable response has a 5xx status code
func (o *GetFlowsDatatableRowServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get flows datatable row service unavailable response a status code equal to that given
func (o *GetFlowsDatatableRowServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetFlowsDatatableRowServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetFlowsDatatableRowServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetFlowsDatatableRowServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowsDatatableRowServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowsDatatableRowGatewayTimeout creates a GetFlowsDatatableRowGatewayTimeout with default headers values
func NewGetFlowsDatatableRowGatewayTimeout() *GetFlowsDatatableRowGatewayTimeout {
	return &GetFlowsDatatableRowGatewayTimeout{}
}

/*
GetFlowsDatatableRowGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetFlowsDatatableRowGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flows datatable row gateway timeout response has a 2xx status code
func (o *GetFlowsDatatableRowGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flows datatable row gateway timeout response has a 3xx status code
func (o *GetFlowsDatatableRowGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flows datatable row gateway timeout response has a 4xx status code
func (o *GetFlowsDatatableRowGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get flows datatable row gateway timeout response has a 5xx status code
func (o *GetFlowsDatatableRowGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get flows datatable row gateway timeout response a status code equal to that given
func (o *GetFlowsDatatableRowGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetFlowsDatatableRowGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetFlowsDatatableRowGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] getFlowsDatatableRowGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetFlowsDatatableRowGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowsDatatableRowGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

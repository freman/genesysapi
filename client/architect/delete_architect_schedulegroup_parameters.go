// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteArchitectSchedulegroupParams creates a new DeleteArchitectSchedulegroupParams object
// with the default values initialized.
func NewDeleteArchitectSchedulegroupParams() *DeleteArchitectSchedulegroupParams {
	var ()
	return &DeleteArchitectSchedulegroupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteArchitectSchedulegroupParamsWithTimeout creates a new DeleteArchitectSchedulegroupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteArchitectSchedulegroupParamsWithTimeout(timeout time.Duration) *DeleteArchitectSchedulegroupParams {
	var ()
	return &DeleteArchitectSchedulegroupParams{

		timeout: timeout,
	}
}

// NewDeleteArchitectSchedulegroupParamsWithContext creates a new DeleteArchitectSchedulegroupParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteArchitectSchedulegroupParamsWithContext(ctx context.Context) *DeleteArchitectSchedulegroupParams {
	var ()
	return &DeleteArchitectSchedulegroupParams{

		Context: ctx,
	}
}

// NewDeleteArchitectSchedulegroupParamsWithHTTPClient creates a new DeleteArchitectSchedulegroupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteArchitectSchedulegroupParamsWithHTTPClient(client *http.Client) *DeleteArchitectSchedulegroupParams {
	var ()
	return &DeleteArchitectSchedulegroupParams{
		HTTPClient: client,
	}
}

/*DeleteArchitectSchedulegroupParams contains all the parameters to send to the API endpoint
for the delete architect schedulegroup operation typically these are written to a http.Request
*/
type DeleteArchitectSchedulegroupParams struct {

	/*ScheduleGroupID
	  Schedule group ID

	*/
	ScheduleGroupID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete architect schedulegroup params
func (o *DeleteArchitectSchedulegroupParams) WithTimeout(timeout time.Duration) *DeleteArchitectSchedulegroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete architect schedulegroup params
func (o *DeleteArchitectSchedulegroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete architect schedulegroup params
func (o *DeleteArchitectSchedulegroupParams) WithContext(ctx context.Context) *DeleteArchitectSchedulegroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete architect schedulegroup params
func (o *DeleteArchitectSchedulegroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete architect schedulegroup params
func (o *DeleteArchitectSchedulegroupParams) WithHTTPClient(client *http.Client) *DeleteArchitectSchedulegroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete architect schedulegroup params
func (o *DeleteArchitectSchedulegroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithScheduleGroupID adds the scheduleGroupID to the delete architect schedulegroup params
func (o *DeleteArchitectSchedulegroupParams) WithScheduleGroupID(scheduleGroupID string) *DeleteArchitectSchedulegroupParams {
	o.SetScheduleGroupID(scheduleGroupID)
	return o
}

// SetScheduleGroupID adds the scheduleGroupId to the delete architect schedulegroup params
func (o *DeleteArchitectSchedulegroupParams) SetScheduleGroupID(scheduleGroupID string) {
	o.ScheduleGroupID = scheduleGroupID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteArchitectSchedulegroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param scheduleGroupId
	if err := r.SetPathParam("scheduleGroupId", o.ScheduleGroupID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

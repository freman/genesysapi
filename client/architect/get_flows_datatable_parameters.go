// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetFlowsDatatableParams creates a new GetFlowsDatatableParams object
// with the default values initialized.
func NewGetFlowsDatatableParams() *GetFlowsDatatableParams {
	var ()
	return &GetFlowsDatatableParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetFlowsDatatableParamsWithTimeout creates a new GetFlowsDatatableParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetFlowsDatatableParamsWithTimeout(timeout time.Duration) *GetFlowsDatatableParams {
	var ()
	return &GetFlowsDatatableParams{

		timeout: timeout,
	}
}

// NewGetFlowsDatatableParamsWithContext creates a new GetFlowsDatatableParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetFlowsDatatableParamsWithContext(ctx context.Context) *GetFlowsDatatableParams {
	var ()
	return &GetFlowsDatatableParams{

		Context: ctx,
	}
}

// NewGetFlowsDatatableParamsWithHTTPClient creates a new GetFlowsDatatableParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetFlowsDatatableParamsWithHTTPClient(client *http.Client) *GetFlowsDatatableParams {
	var ()
	return &GetFlowsDatatableParams{
		HTTPClient: client,
	}
}

/*GetFlowsDatatableParams contains all the parameters to send to the API endpoint
for the get flows datatable operation typically these are written to a http.Request
*/
type GetFlowsDatatableParams struct {

	/*DatatableID
	  id of datatable

	*/
	DatatableID string
	/*Expand
	  Expand instructions for the result

	*/
	Expand *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get flows datatable params
func (o *GetFlowsDatatableParams) WithTimeout(timeout time.Duration) *GetFlowsDatatableParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get flows datatable params
func (o *GetFlowsDatatableParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get flows datatable params
func (o *GetFlowsDatatableParams) WithContext(ctx context.Context) *GetFlowsDatatableParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get flows datatable params
func (o *GetFlowsDatatableParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get flows datatable params
func (o *GetFlowsDatatableParams) WithHTTPClient(client *http.Client) *GetFlowsDatatableParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get flows datatable params
func (o *GetFlowsDatatableParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDatatableID adds the datatableID to the get flows datatable params
func (o *GetFlowsDatatableParams) WithDatatableID(datatableID string) *GetFlowsDatatableParams {
	o.SetDatatableID(datatableID)
	return o
}

// SetDatatableID adds the datatableId to the get flows datatable params
func (o *GetFlowsDatatableParams) SetDatatableID(datatableID string) {
	o.DatatableID = datatableID
}

// WithExpand adds the expand to the get flows datatable params
func (o *GetFlowsDatatableParams) WithExpand(expand *string) *GetFlowsDatatableParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get flows datatable params
func (o *GetFlowsDatatableParams) SetExpand(expand *string) {
	o.Expand = expand
}

// WriteToRequest writes these params to a swagger request
func (o *GetFlowsDatatableParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param datatableId
	if err := r.SetPathParam("datatableId", o.DatatableID); err != nil {
		return err
	}

	if o.Expand != nil {

		// query param expand
		var qrExpand string
		if o.Expand != nil {
			qrExpand = *o.Expand
		}
		qExpand := qrExpand
		if qExpand != "" {
			if err := r.SetQueryParam("expand", qExpand); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteFlowsDatatableRowReader is a Reader for the DeleteFlowsDatatableRow structure.
type DeleteFlowsDatatableRowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteFlowsDatatableRowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteFlowsDatatableRowNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteFlowsDatatableRowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteFlowsDatatableRowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteFlowsDatatableRowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteFlowsDatatableRowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteFlowsDatatableRowRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteFlowsDatatableRowRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteFlowsDatatableRowUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteFlowsDatatableRowTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteFlowsDatatableRowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteFlowsDatatableRowServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteFlowsDatatableRowGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteFlowsDatatableRowNoContent creates a DeleteFlowsDatatableRowNoContent with default headers values
func NewDeleteFlowsDatatableRowNoContent() *DeleteFlowsDatatableRowNoContent {
	return &DeleteFlowsDatatableRowNoContent{}
}

/*
DeleteFlowsDatatableRowNoContent describes a response with status code 204, with default header values.

The row was deleted successfully
*/
type DeleteFlowsDatatableRowNoContent struct {
}

// IsSuccess returns true when this delete flows datatable row no content response has a 2xx status code
func (o *DeleteFlowsDatatableRowNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete flows datatable row no content response has a 3xx status code
func (o *DeleteFlowsDatatableRowNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flows datatable row no content response has a 4xx status code
func (o *DeleteFlowsDatatableRowNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete flows datatable row no content response has a 5xx status code
func (o *DeleteFlowsDatatableRowNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flows datatable row no content response a status code equal to that given
func (o *DeleteFlowsDatatableRowNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeleteFlowsDatatableRowNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowNoContent ", 204)
}

func (o *DeleteFlowsDatatableRowNoContent) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowNoContent ", 204)
}

func (o *DeleteFlowsDatatableRowNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteFlowsDatatableRowBadRequest creates a DeleteFlowsDatatableRowBadRequest with default headers values
func NewDeleteFlowsDatatableRowBadRequest() *DeleteFlowsDatatableRowBadRequest {
	return &DeleteFlowsDatatableRowBadRequest{}
}

/*
DeleteFlowsDatatableRowBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteFlowsDatatableRowBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flows datatable row bad request response has a 2xx status code
func (o *DeleteFlowsDatatableRowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flows datatable row bad request response has a 3xx status code
func (o *DeleteFlowsDatatableRowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flows datatable row bad request response has a 4xx status code
func (o *DeleteFlowsDatatableRowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flows datatable row bad request response has a 5xx status code
func (o *DeleteFlowsDatatableRowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flows datatable row bad request response a status code equal to that given
func (o *DeleteFlowsDatatableRowBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteFlowsDatatableRowBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteFlowsDatatableRowBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteFlowsDatatableRowBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowsDatatableRowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowsDatatableRowUnauthorized creates a DeleteFlowsDatatableRowUnauthorized with default headers values
func NewDeleteFlowsDatatableRowUnauthorized() *DeleteFlowsDatatableRowUnauthorized {
	return &DeleteFlowsDatatableRowUnauthorized{}
}

/*
DeleteFlowsDatatableRowUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteFlowsDatatableRowUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flows datatable row unauthorized response has a 2xx status code
func (o *DeleteFlowsDatatableRowUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flows datatable row unauthorized response has a 3xx status code
func (o *DeleteFlowsDatatableRowUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flows datatable row unauthorized response has a 4xx status code
func (o *DeleteFlowsDatatableRowUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flows datatable row unauthorized response has a 5xx status code
func (o *DeleteFlowsDatatableRowUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flows datatable row unauthorized response a status code equal to that given
func (o *DeleteFlowsDatatableRowUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteFlowsDatatableRowUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteFlowsDatatableRowUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteFlowsDatatableRowUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowsDatatableRowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowsDatatableRowForbidden creates a DeleteFlowsDatatableRowForbidden with default headers values
func NewDeleteFlowsDatatableRowForbidden() *DeleteFlowsDatatableRowForbidden {
	return &DeleteFlowsDatatableRowForbidden{}
}

/*
DeleteFlowsDatatableRowForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type DeleteFlowsDatatableRowForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flows datatable row forbidden response has a 2xx status code
func (o *DeleteFlowsDatatableRowForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flows datatable row forbidden response has a 3xx status code
func (o *DeleteFlowsDatatableRowForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flows datatable row forbidden response has a 4xx status code
func (o *DeleteFlowsDatatableRowForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flows datatable row forbidden response has a 5xx status code
func (o *DeleteFlowsDatatableRowForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flows datatable row forbidden response a status code equal to that given
func (o *DeleteFlowsDatatableRowForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteFlowsDatatableRowForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowForbidden  %+v", 403, o.Payload)
}

func (o *DeleteFlowsDatatableRowForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowForbidden  %+v", 403, o.Payload)
}

func (o *DeleteFlowsDatatableRowForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowsDatatableRowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowsDatatableRowNotFound creates a DeleteFlowsDatatableRowNotFound with default headers values
func NewDeleteFlowsDatatableRowNotFound() *DeleteFlowsDatatableRowNotFound {
	return &DeleteFlowsDatatableRowNotFound{}
}

/*
DeleteFlowsDatatableRowNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type DeleteFlowsDatatableRowNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flows datatable row not found response has a 2xx status code
func (o *DeleteFlowsDatatableRowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flows datatable row not found response has a 3xx status code
func (o *DeleteFlowsDatatableRowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flows datatable row not found response has a 4xx status code
func (o *DeleteFlowsDatatableRowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flows datatable row not found response has a 5xx status code
func (o *DeleteFlowsDatatableRowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flows datatable row not found response a status code equal to that given
func (o *DeleteFlowsDatatableRowNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteFlowsDatatableRowNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowNotFound  %+v", 404, o.Payload)
}

func (o *DeleteFlowsDatatableRowNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowNotFound  %+v", 404, o.Payload)
}

func (o *DeleteFlowsDatatableRowNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowsDatatableRowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowsDatatableRowRequestTimeout creates a DeleteFlowsDatatableRowRequestTimeout with default headers values
func NewDeleteFlowsDatatableRowRequestTimeout() *DeleteFlowsDatatableRowRequestTimeout {
	return &DeleteFlowsDatatableRowRequestTimeout{}
}

/*
DeleteFlowsDatatableRowRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteFlowsDatatableRowRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flows datatable row request timeout response has a 2xx status code
func (o *DeleteFlowsDatatableRowRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flows datatable row request timeout response has a 3xx status code
func (o *DeleteFlowsDatatableRowRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flows datatable row request timeout response has a 4xx status code
func (o *DeleteFlowsDatatableRowRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flows datatable row request timeout response has a 5xx status code
func (o *DeleteFlowsDatatableRowRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flows datatable row request timeout response a status code equal to that given
func (o *DeleteFlowsDatatableRowRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *DeleteFlowsDatatableRowRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteFlowsDatatableRowRequestTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteFlowsDatatableRowRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowsDatatableRowRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowsDatatableRowRequestEntityTooLarge creates a DeleteFlowsDatatableRowRequestEntityTooLarge with default headers values
func NewDeleteFlowsDatatableRowRequestEntityTooLarge() *DeleteFlowsDatatableRowRequestEntityTooLarge {
	return &DeleteFlowsDatatableRowRequestEntityTooLarge{}
}

/*
DeleteFlowsDatatableRowRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type DeleteFlowsDatatableRowRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flows datatable row request entity too large response has a 2xx status code
func (o *DeleteFlowsDatatableRowRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flows datatable row request entity too large response has a 3xx status code
func (o *DeleteFlowsDatatableRowRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flows datatable row request entity too large response has a 4xx status code
func (o *DeleteFlowsDatatableRowRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flows datatable row request entity too large response has a 5xx status code
func (o *DeleteFlowsDatatableRowRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flows datatable row request entity too large response a status code equal to that given
func (o *DeleteFlowsDatatableRowRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *DeleteFlowsDatatableRowRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteFlowsDatatableRowRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteFlowsDatatableRowRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowsDatatableRowRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowsDatatableRowUnsupportedMediaType creates a DeleteFlowsDatatableRowUnsupportedMediaType with default headers values
func NewDeleteFlowsDatatableRowUnsupportedMediaType() *DeleteFlowsDatatableRowUnsupportedMediaType {
	return &DeleteFlowsDatatableRowUnsupportedMediaType{}
}

/*
DeleteFlowsDatatableRowUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteFlowsDatatableRowUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flows datatable row unsupported media type response has a 2xx status code
func (o *DeleteFlowsDatatableRowUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flows datatable row unsupported media type response has a 3xx status code
func (o *DeleteFlowsDatatableRowUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flows datatable row unsupported media type response has a 4xx status code
func (o *DeleteFlowsDatatableRowUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flows datatable row unsupported media type response has a 5xx status code
func (o *DeleteFlowsDatatableRowUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flows datatable row unsupported media type response a status code equal to that given
func (o *DeleteFlowsDatatableRowUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *DeleteFlowsDatatableRowUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteFlowsDatatableRowUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteFlowsDatatableRowUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowsDatatableRowUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowsDatatableRowTooManyRequests creates a DeleteFlowsDatatableRowTooManyRequests with default headers values
func NewDeleteFlowsDatatableRowTooManyRequests() *DeleteFlowsDatatableRowTooManyRequests {
	return &DeleteFlowsDatatableRowTooManyRequests{}
}

/*
DeleteFlowsDatatableRowTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteFlowsDatatableRowTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flows datatable row too many requests response has a 2xx status code
func (o *DeleteFlowsDatatableRowTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flows datatable row too many requests response has a 3xx status code
func (o *DeleteFlowsDatatableRowTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flows datatable row too many requests response has a 4xx status code
func (o *DeleteFlowsDatatableRowTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flows datatable row too many requests response has a 5xx status code
func (o *DeleteFlowsDatatableRowTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flows datatable row too many requests response a status code equal to that given
func (o *DeleteFlowsDatatableRowTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeleteFlowsDatatableRowTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteFlowsDatatableRowTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteFlowsDatatableRowTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowsDatatableRowTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowsDatatableRowInternalServerError creates a DeleteFlowsDatatableRowInternalServerError with default headers values
func NewDeleteFlowsDatatableRowInternalServerError() *DeleteFlowsDatatableRowInternalServerError {
	return &DeleteFlowsDatatableRowInternalServerError{}
}

/*
DeleteFlowsDatatableRowInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteFlowsDatatableRowInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flows datatable row internal server error response has a 2xx status code
func (o *DeleteFlowsDatatableRowInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flows datatable row internal server error response has a 3xx status code
func (o *DeleteFlowsDatatableRowInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flows datatable row internal server error response has a 4xx status code
func (o *DeleteFlowsDatatableRowInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete flows datatable row internal server error response has a 5xx status code
func (o *DeleteFlowsDatatableRowInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete flows datatable row internal server error response a status code equal to that given
func (o *DeleteFlowsDatatableRowInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteFlowsDatatableRowInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteFlowsDatatableRowInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteFlowsDatatableRowInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowsDatatableRowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowsDatatableRowServiceUnavailable creates a DeleteFlowsDatatableRowServiceUnavailable with default headers values
func NewDeleteFlowsDatatableRowServiceUnavailable() *DeleteFlowsDatatableRowServiceUnavailable {
	return &DeleteFlowsDatatableRowServiceUnavailable{}
}

/*
DeleteFlowsDatatableRowServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteFlowsDatatableRowServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flows datatable row service unavailable response has a 2xx status code
func (o *DeleteFlowsDatatableRowServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flows datatable row service unavailable response has a 3xx status code
func (o *DeleteFlowsDatatableRowServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flows datatable row service unavailable response has a 4xx status code
func (o *DeleteFlowsDatatableRowServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete flows datatable row service unavailable response has a 5xx status code
func (o *DeleteFlowsDatatableRowServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete flows datatable row service unavailable response a status code equal to that given
func (o *DeleteFlowsDatatableRowServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeleteFlowsDatatableRowServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteFlowsDatatableRowServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteFlowsDatatableRowServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowsDatatableRowServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowsDatatableRowGatewayTimeout creates a DeleteFlowsDatatableRowGatewayTimeout with default headers values
func NewDeleteFlowsDatatableRowGatewayTimeout() *DeleteFlowsDatatableRowGatewayTimeout {
	return &DeleteFlowsDatatableRowGatewayTimeout{}
}

/*
DeleteFlowsDatatableRowGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type DeleteFlowsDatatableRowGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flows datatable row gateway timeout response has a 2xx status code
func (o *DeleteFlowsDatatableRowGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flows datatable row gateway timeout response has a 3xx status code
func (o *DeleteFlowsDatatableRowGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flows datatable row gateway timeout response has a 4xx status code
func (o *DeleteFlowsDatatableRowGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete flows datatable row gateway timeout response has a 5xx status code
func (o *DeleteFlowsDatatableRowGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this delete flows datatable row gateway timeout response a status code equal to that given
func (o *DeleteFlowsDatatableRowGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *DeleteFlowsDatatableRowGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteFlowsDatatableRowGatewayTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] deleteFlowsDatatableRowGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteFlowsDatatableRowGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowsDatatableRowGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostFlowsActionsDeactivateParams creates a new PostFlowsActionsDeactivateParams object
// with the default values initialized.
func NewPostFlowsActionsDeactivateParams() *PostFlowsActionsDeactivateParams {
	var ()
	return &PostFlowsActionsDeactivateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostFlowsActionsDeactivateParamsWithTimeout creates a new PostFlowsActionsDeactivateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostFlowsActionsDeactivateParamsWithTimeout(timeout time.Duration) *PostFlowsActionsDeactivateParams {
	var ()
	return &PostFlowsActionsDeactivateParams{

		timeout: timeout,
	}
}

// NewPostFlowsActionsDeactivateParamsWithContext creates a new PostFlowsActionsDeactivateParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostFlowsActionsDeactivateParamsWithContext(ctx context.Context) *PostFlowsActionsDeactivateParams {
	var ()
	return &PostFlowsActionsDeactivateParams{

		Context: ctx,
	}
}

// NewPostFlowsActionsDeactivateParamsWithHTTPClient creates a new PostFlowsActionsDeactivateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostFlowsActionsDeactivateParamsWithHTTPClient(client *http.Client) *PostFlowsActionsDeactivateParams {
	var ()
	return &PostFlowsActionsDeactivateParams{
		HTTPClient: client,
	}
}

/*PostFlowsActionsDeactivateParams contains all the parameters to send to the API endpoint
for the post flows actions deactivate operation typically these are written to a http.Request
*/
type PostFlowsActionsDeactivateParams struct {

	/*Flow
	  Flow ID

	*/
	Flow string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post flows actions deactivate params
func (o *PostFlowsActionsDeactivateParams) WithTimeout(timeout time.Duration) *PostFlowsActionsDeactivateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post flows actions deactivate params
func (o *PostFlowsActionsDeactivateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post flows actions deactivate params
func (o *PostFlowsActionsDeactivateParams) WithContext(ctx context.Context) *PostFlowsActionsDeactivateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post flows actions deactivate params
func (o *PostFlowsActionsDeactivateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post flows actions deactivate params
func (o *PostFlowsActionsDeactivateParams) WithHTTPClient(client *http.Client) *PostFlowsActionsDeactivateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post flows actions deactivate params
func (o *PostFlowsActionsDeactivateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFlow adds the flow to the post flows actions deactivate params
func (o *PostFlowsActionsDeactivateParams) WithFlow(flow string) *PostFlowsActionsDeactivateParams {
	o.SetFlow(flow)
	return o
}

// SetFlow adds the flow to the post flows actions deactivate params
func (o *PostFlowsActionsDeactivateParams) SetFlow(flow string) {
	o.Flow = flow
}

// WriteToRequest writes these params to a swagger request
func (o *PostFlowsActionsDeactivateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param flow
	qrFlow := o.Flow
	qFlow := qrFlow
	if qFlow != "" {
		if err := r.SetQueryParam("flow", qFlow); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

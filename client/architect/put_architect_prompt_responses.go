// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutArchitectPromptReader is a Reader for the PutArchitectPrompt structure.
type PutArchitectPromptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutArchitectPromptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutArchitectPromptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutArchitectPromptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutArchitectPromptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutArchitectPromptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutArchitectPromptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutArchitectPromptRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutArchitectPromptConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutArchitectPromptRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutArchitectPromptUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutArchitectPromptTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutArchitectPromptInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutArchitectPromptServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutArchitectPromptGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutArchitectPromptOK creates a PutArchitectPromptOK with default headers values
func NewPutArchitectPromptOK() *PutArchitectPromptOK {
	return &PutArchitectPromptOK{}
}

/*
PutArchitectPromptOK describes a response with status code 200, with default header values.

successful operation
*/
type PutArchitectPromptOK struct {
	Payload *models.Prompt
}

// IsSuccess returns true when this put architect prompt o k response has a 2xx status code
func (o *PutArchitectPromptOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put architect prompt o k response has a 3xx status code
func (o *PutArchitectPromptOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put architect prompt o k response has a 4xx status code
func (o *PutArchitectPromptOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put architect prompt o k response has a 5xx status code
func (o *PutArchitectPromptOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put architect prompt o k response a status code equal to that given
func (o *PutArchitectPromptOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutArchitectPromptOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptOK  %+v", 200, o.Payload)
}

func (o *PutArchitectPromptOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptOK  %+v", 200, o.Payload)
}

func (o *PutArchitectPromptOK) GetPayload() *models.Prompt {
	return o.Payload
}

func (o *PutArchitectPromptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Prompt)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutArchitectPromptBadRequest creates a PutArchitectPromptBadRequest with default headers values
func NewPutArchitectPromptBadRequest() *PutArchitectPromptBadRequest {
	return &PutArchitectPromptBadRequest{}
}

/*
PutArchitectPromptBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutArchitectPromptBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put architect prompt bad request response has a 2xx status code
func (o *PutArchitectPromptBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put architect prompt bad request response has a 3xx status code
func (o *PutArchitectPromptBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put architect prompt bad request response has a 4xx status code
func (o *PutArchitectPromptBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put architect prompt bad request response has a 5xx status code
func (o *PutArchitectPromptBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put architect prompt bad request response a status code equal to that given
func (o *PutArchitectPromptBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutArchitectPromptBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptBadRequest  %+v", 400, o.Payload)
}

func (o *PutArchitectPromptBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptBadRequest  %+v", 400, o.Payload)
}

func (o *PutArchitectPromptBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutArchitectPromptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutArchitectPromptUnauthorized creates a PutArchitectPromptUnauthorized with default headers values
func NewPutArchitectPromptUnauthorized() *PutArchitectPromptUnauthorized {
	return &PutArchitectPromptUnauthorized{}
}

/*
PutArchitectPromptUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutArchitectPromptUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put architect prompt unauthorized response has a 2xx status code
func (o *PutArchitectPromptUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put architect prompt unauthorized response has a 3xx status code
func (o *PutArchitectPromptUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put architect prompt unauthorized response has a 4xx status code
func (o *PutArchitectPromptUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put architect prompt unauthorized response has a 5xx status code
func (o *PutArchitectPromptUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put architect prompt unauthorized response a status code equal to that given
func (o *PutArchitectPromptUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutArchitectPromptUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptUnauthorized  %+v", 401, o.Payload)
}

func (o *PutArchitectPromptUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptUnauthorized  %+v", 401, o.Payload)
}

func (o *PutArchitectPromptUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutArchitectPromptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutArchitectPromptForbidden creates a PutArchitectPromptForbidden with default headers values
func NewPutArchitectPromptForbidden() *PutArchitectPromptForbidden {
	return &PutArchitectPromptForbidden{}
}

/*
PutArchitectPromptForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutArchitectPromptForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put architect prompt forbidden response has a 2xx status code
func (o *PutArchitectPromptForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put architect prompt forbidden response has a 3xx status code
func (o *PutArchitectPromptForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put architect prompt forbidden response has a 4xx status code
func (o *PutArchitectPromptForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put architect prompt forbidden response has a 5xx status code
func (o *PutArchitectPromptForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put architect prompt forbidden response a status code equal to that given
func (o *PutArchitectPromptForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutArchitectPromptForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptForbidden  %+v", 403, o.Payload)
}

func (o *PutArchitectPromptForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptForbidden  %+v", 403, o.Payload)
}

func (o *PutArchitectPromptForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutArchitectPromptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutArchitectPromptNotFound creates a PutArchitectPromptNotFound with default headers values
func NewPutArchitectPromptNotFound() *PutArchitectPromptNotFound {
	return &PutArchitectPromptNotFound{}
}

/*
PutArchitectPromptNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutArchitectPromptNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put architect prompt not found response has a 2xx status code
func (o *PutArchitectPromptNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put architect prompt not found response has a 3xx status code
func (o *PutArchitectPromptNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put architect prompt not found response has a 4xx status code
func (o *PutArchitectPromptNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put architect prompt not found response has a 5xx status code
func (o *PutArchitectPromptNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put architect prompt not found response a status code equal to that given
func (o *PutArchitectPromptNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutArchitectPromptNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptNotFound  %+v", 404, o.Payload)
}

func (o *PutArchitectPromptNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptNotFound  %+v", 404, o.Payload)
}

func (o *PutArchitectPromptNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutArchitectPromptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutArchitectPromptRequestTimeout creates a PutArchitectPromptRequestTimeout with default headers values
func NewPutArchitectPromptRequestTimeout() *PutArchitectPromptRequestTimeout {
	return &PutArchitectPromptRequestTimeout{}
}

/*
PutArchitectPromptRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutArchitectPromptRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put architect prompt request timeout response has a 2xx status code
func (o *PutArchitectPromptRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put architect prompt request timeout response has a 3xx status code
func (o *PutArchitectPromptRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put architect prompt request timeout response has a 4xx status code
func (o *PutArchitectPromptRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put architect prompt request timeout response has a 5xx status code
func (o *PutArchitectPromptRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put architect prompt request timeout response a status code equal to that given
func (o *PutArchitectPromptRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutArchitectPromptRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutArchitectPromptRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutArchitectPromptRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutArchitectPromptRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutArchitectPromptConflict creates a PutArchitectPromptConflict with default headers values
func NewPutArchitectPromptConflict() *PutArchitectPromptConflict {
	return &PutArchitectPromptConflict{}
}

/*
PutArchitectPromptConflict describes a response with status code 409, with default header values.

Conflict
*/
type PutArchitectPromptConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put architect prompt conflict response has a 2xx status code
func (o *PutArchitectPromptConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put architect prompt conflict response has a 3xx status code
func (o *PutArchitectPromptConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put architect prompt conflict response has a 4xx status code
func (o *PutArchitectPromptConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this put architect prompt conflict response has a 5xx status code
func (o *PutArchitectPromptConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this put architect prompt conflict response a status code equal to that given
func (o *PutArchitectPromptConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PutArchitectPromptConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptConflict  %+v", 409, o.Payload)
}

func (o *PutArchitectPromptConflict) String() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptConflict  %+v", 409, o.Payload)
}

func (o *PutArchitectPromptConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutArchitectPromptConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutArchitectPromptRequestEntityTooLarge creates a PutArchitectPromptRequestEntityTooLarge with default headers values
func NewPutArchitectPromptRequestEntityTooLarge() *PutArchitectPromptRequestEntityTooLarge {
	return &PutArchitectPromptRequestEntityTooLarge{}
}

/*
PutArchitectPromptRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutArchitectPromptRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put architect prompt request entity too large response has a 2xx status code
func (o *PutArchitectPromptRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put architect prompt request entity too large response has a 3xx status code
func (o *PutArchitectPromptRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put architect prompt request entity too large response has a 4xx status code
func (o *PutArchitectPromptRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put architect prompt request entity too large response has a 5xx status code
func (o *PutArchitectPromptRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put architect prompt request entity too large response a status code equal to that given
func (o *PutArchitectPromptRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutArchitectPromptRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutArchitectPromptRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutArchitectPromptRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutArchitectPromptRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutArchitectPromptUnsupportedMediaType creates a PutArchitectPromptUnsupportedMediaType with default headers values
func NewPutArchitectPromptUnsupportedMediaType() *PutArchitectPromptUnsupportedMediaType {
	return &PutArchitectPromptUnsupportedMediaType{}
}

/*
PutArchitectPromptUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutArchitectPromptUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put architect prompt unsupported media type response has a 2xx status code
func (o *PutArchitectPromptUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put architect prompt unsupported media type response has a 3xx status code
func (o *PutArchitectPromptUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put architect prompt unsupported media type response has a 4xx status code
func (o *PutArchitectPromptUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put architect prompt unsupported media type response has a 5xx status code
func (o *PutArchitectPromptUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put architect prompt unsupported media type response a status code equal to that given
func (o *PutArchitectPromptUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutArchitectPromptUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutArchitectPromptUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutArchitectPromptUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutArchitectPromptUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutArchitectPromptTooManyRequests creates a PutArchitectPromptTooManyRequests with default headers values
func NewPutArchitectPromptTooManyRequests() *PutArchitectPromptTooManyRequests {
	return &PutArchitectPromptTooManyRequests{}
}

/*
PutArchitectPromptTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutArchitectPromptTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put architect prompt too many requests response has a 2xx status code
func (o *PutArchitectPromptTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put architect prompt too many requests response has a 3xx status code
func (o *PutArchitectPromptTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put architect prompt too many requests response has a 4xx status code
func (o *PutArchitectPromptTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put architect prompt too many requests response has a 5xx status code
func (o *PutArchitectPromptTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put architect prompt too many requests response a status code equal to that given
func (o *PutArchitectPromptTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutArchitectPromptTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutArchitectPromptTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutArchitectPromptTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutArchitectPromptTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutArchitectPromptInternalServerError creates a PutArchitectPromptInternalServerError with default headers values
func NewPutArchitectPromptInternalServerError() *PutArchitectPromptInternalServerError {
	return &PutArchitectPromptInternalServerError{}
}

/*
PutArchitectPromptInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutArchitectPromptInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put architect prompt internal server error response has a 2xx status code
func (o *PutArchitectPromptInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put architect prompt internal server error response has a 3xx status code
func (o *PutArchitectPromptInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put architect prompt internal server error response has a 4xx status code
func (o *PutArchitectPromptInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put architect prompt internal server error response has a 5xx status code
func (o *PutArchitectPromptInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put architect prompt internal server error response a status code equal to that given
func (o *PutArchitectPromptInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutArchitectPromptInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptInternalServerError  %+v", 500, o.Payload)
}

func (o *PutArchitectPromptInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptInternalServerError  %+v", 500, o.Payload)
}

func (o *PutArchitectPromptInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutArchitectPromptInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutArchitectPromptServiceUnavailable creates a PutArchitectPromptServiceUnavailable with default headers values
func NewPutArchitectPromptServiceUnavailable() *PutArchitectPromptServiceUnavailable {
	return &PutArchitectPromptServiceUnavailable{}
}

/*
PutArchitectPromptServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutArchitectPromptServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put architect prompt service unavailable response has a 2xx status code
func (o *PutArchitectPromptServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put architect prompt service unavailable response has a 3xx status code
func (o *PutArchitectPromptServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put architect prompt service unavailable response has a 4xx status code
func (o *PutArchitectPromptServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put architect prompt service unavailable response has a 5xx status code
func (o *PutArchitectPromptServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put architect prompt service unavailable response a status code equal to that given
func (o *PutArchitectPromptServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutArchitectPromptServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutArchitectPromptServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutArchitectPromptServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutArchitectPromptServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutArchitectPromptGatewayTimeout creates a PutArchitectPromptGatewayTimeout with default headers values
func NewPutArchitectPromptGatewayTimeout() *PutArchitectPromptGatewayTimeout {
	return &PutArchitectPromptGatewayTimeout{}
}

/*
PutArchitectPromptGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutArchitectPromptGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put architect prompt gateway timeout response has a 2xx status code
func (o *PutArchitectPromptGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put architect prompt gateway timeout response has a 3xx status code
func (o *PutArchitectPromptGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put architect prompt gateway timeout response has a 4xx status code
func (o *PutArchitectPromptGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put architect prompt gateway timeout response has a 5xx status code
func (o *PutArchitectPromptGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put architect prompt gateway timeout response a status code equal to that given
func (o *PutArchitectPromptGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutArchitectPromptGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutArchitectPromptGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/architect/prompts/{promptId}][%d] putArchitectPromptGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutArchitectPromptGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutArchitectPromptGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

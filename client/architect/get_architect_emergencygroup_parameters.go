// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetArchitectEmergencygroupParams creates a new GetArchitectEmergencygroupParams object
// with the default values initialized.
func NewGetArchitectEmergencygroupParams() *GetArchitectEmergencygroupParams {
	var ()
	return &GetArchitectEmergencygroupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetArchitectEmergencygroupParamsWithTimeout creates a new GetArchitectEmergencygroupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetArchitectEmergencygroupParamsWithTimeout(timeout time.Duration) *GetArchitectEmergencygroupParams {
	var ()
	return &GetArchitectEmergencygroupParams{

		timeout: timeout,
	}
}

// NewGetArchitectEmergencygroupParamsWithContext creates a new GetArchitectEmergencygroupParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetArchitectEmergencygroupParamsWithContext(ctx context.Context) *GetArchitectEmergencygroupParams {
	var ()
	return &GetArchitectEmergencygroupParams{

		Context: ctx,
	}
}

// NewGetArchitectEmergencygroupParamsWithHTTPClient creates a new GetArchitectEmergencygroupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetArchitectEmergencygroupParamsWithHTTPClient(client *http.Client) *GetArchitectEmergencygroupParams {
	var ()
	return &GetArchitectEmergencygroupParams{
		HTTPClient: client,
	}
}

/*GetArchitectEmergencygroupParams contains all the parameters to send to the API endpoint
for the get architect emergencygroup operation typically these are written to a http.Request
*/
type GetArchitectEmergencygroupParams struct {

	/*EmergencyGroupID
	  Emergency group ID

	*/
	EmergencyGroupID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get architect emergencygroup params
func (o *GetArchitectEmergencygroupParams) WithTimeout(timeout time.Duration) *GetArchitectEmergencygroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get architect emergencygroup params
func (o *GetArchitectEmergencygroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get architect emergencygroup params
func (o *GetArchitectEmergencygroupParams) WithContext(ctx context.Context) *GetArchitectEmergencygroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get architect emergencygroup params
func (o *GetArchitectEmergencygroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get architect emergencygroup params
func (o *GetArchitectEmergencygroupParams) WithHTTPClient(client *http.Client) *GetArchitectEmergencygroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get architect emergencygroup params
func (o *GetArchitectEmergencygroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmergencyGroupID adds the emergencyGroupID to the get architect emergencygroup params
func (o *GetArchitectEmergencygroupParams) WithEmergencyGroupID(emergencyGroupID string) *GetArchitectEmergencygroupParams {
	o.SetEmergencyGroupID(emergencyGroupID)
	return o
}

// SetEmergencyGroupID adds the emergencyGroupId to the get architect emergencygroup params
func (o *GetArchitectEmergencygroupParams) SetEmergencyGroupID(emergencyGroupID string) {
	o.EmergencyGroupID = emergencyGroupID
}

// WriteToRequest writes these params to a swagger request
func (o *GetArchitectEmergencygroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param emergencyGroupId
	if err := r.SetPathParam("emergencyGroupId", o.EmergencyGroupID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

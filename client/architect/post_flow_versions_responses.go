// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostFlowVersionsReader is a Reader for the PostFlowVersions structure.
type PostFlowVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostFlowVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostFlowVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostFlowVersionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostFlowVersionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostFlowVersionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostFlowVersionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewPostFlowVersionsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostFlowVersionsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostFlowVersionsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewPostFlowVersionsGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostFlowVersionsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostFlowVersionsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostFlowVersionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostFlowVersionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostFlowVersionsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostFlowVersionsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostFlowVersionsOK creates a PostFlowVersionsOK with default headers values
func NewPostFlowVersionsOK() *PostFlowVersionsOK {
	return &PostFlowVersionsOK{}
}

/*
PostFlowVersionsOK describes a response with status code 200, with default header values.

successful operation
*/
type PostFlowVersionsOK struct {
	Payload *models.FlowVersion
}

// IsSuccess returns true when this post flow versions o k response has a 2xx status code
func (o *PostFlowVersionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post flow versions o k response has a 3xx status code
func (o *PostFlowVersionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow versions o k response has a 4xx status code
func (o *PostFlowVersionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post flow versions o k response has a 5xx status code
func (o *PostFlowVersionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow versions o k response a status code equal to that given
func (o *PostFlowVersionsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostFlowVersionsOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsOK  %+v", 200, o.Payload)
}

func (o *PostFlowVersionsOK) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsOK  %+v", 200, o.Payload)
}

func (o *PostFlowVersionsOK) GetPayload() *models.FlowVersion {
	return o.Payload
}

func (o *PostFlowVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FlowVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowVersionsBadRequest creates a PostFlowVersionsBadRequest with default headers values
func NewPostFlowVersionsBadRequest() *PostFlowVersionsBadRequest {
	return &PostFlowVersionsBadRequest{}
}

/*
PostFlowVersionsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostFlowVersionsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow versions bad request response has a 2xx status code
func (o *PostFlowVersionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow versions bad request response has a 3xx status code
func (o *PostFlowVersionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow versions bad request response has a 4xx status code
func (o *PostFlowVersionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow versions bad request response has a 5xx status code
func (o *PostFlowVersionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow versions bad request response a status code equal to that given
func (o *PostFlowVersionsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostFlowVersionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsBadRequest  %+v", 400, o.Payload)
}

func (o *PostFlowVersionsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsBadRequest  %+v", 400, o.Payload)
}

func (o *PostFlowVersionsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowVersionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowVersionsUnauthorized creates a PostFlowVersionsUnauthorized with default headers values
func NewPostFlowVersionsUnauthorized() *PostFlowVersionsUnauthorized {
	return &PostFlowVersionsUnauthorized{}
}

/*
PostFlowVersionsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostFlowVersionsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow versions unauthorized response has a 2xx status code
func (o *PostFlowVersionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow versions unauthorized response has a 3xx status code
func (o *PostFlowVersionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow versions unauthorized response has a 4xx status code
func (o *PostFlowVersionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow versions unauthorized response has a 5xx status code
func (o *PostFlowVersionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow versions unauthorized response a status code equal to that given
func (o *PostFlowVersionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostFlowVersionsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostFlowVersionsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostFlowVersionsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowVersionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowVersionsForbidden creates a PostFlowVersionsForbidden with default headers values
func NewPostFlowVersionsForbidden() *PostFlowVersionsForbidden {
	return &PostFlowVersionsForbidden{}
}

/*
PostFlowVersionsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostFlowVersionsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow versions forbidden response has a 2xx status code
func (o *PostFlowVersionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow versions forbidden response has a 3xx status code
func (o *PostFlowVersionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow versions forbidden response has a 4xx status code
func (o *PostFlowVersionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow versions forbidden response has a 5xx status code
func (o *PostFlowVersionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow versions forbidden response a status code equal to that given
func (o *PostFlowVersionsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostFlowVersionsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsForbidden  %+v", 403, o.Payload)
}

func (o *PostFlowVersionsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsForbidden  %+v", 403, o.Payload)
}

func (o *PostFlowVersionsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowVersionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowVersionsNotFound creates a PostFlowVersionsNotFound with default headers values
func NewPostFlowVersionsNotFound() *PostFlowVersionsNotFound {
	return &PostFlowVersionsNotFound{}
}

/*
PostFlowVersionsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostFlowVersionsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow versions not found response has a 2xx status code
func (o *PostFlowVersionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow versions not found response has a 3xx status code
func (o *PostFlowVersionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow versions not found response has a 4xx status code
func (o *PostFlowVersionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow versions not found response has a 5xx status code
func (o *PostFlowVersionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow versions not found response a status code equal to that given
func (o *PostFlowVersionsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostFlowVersionsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsNotFound  %+v", 404, o.Payload)
}

func (o *PostFlowVersionsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsNotFound  %+v", 404, o.Payload)
}

func (o *PostFlowVersionsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowVersionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowVersionsMethodNotAllowed creates a PostFlowVersionsMethodNotAllowed with default headers values
func NewPostFlowVersionsMethodNotAllowed() *PostFlowVersionsMethodNotAllowed {
	return &PostFlowVersionsMethodNotAllowed{}
}

/*
PostFlowVersionsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type PostFlowVersionsMethodNotAllowed struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow versions method not allowed response has a 2xx status code
func (o *PostFlowVersionsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow versions method not allowed response has a 3xx status code
func (o *PostFlowVersionsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow versions method not allowed response has a 4xx status code
func (o *PostFlowVersionsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow versions method not allowed response has a 5xx status code
func (o *PostFlowVersionsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow versions method not allowed response a status code equal to that given
func (o *PostFlowVersionsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *PostFlowVersionsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *PostFlowVersionsMethodNotAllowed) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *PostFlowVersionsMethodNotAllowed) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowVersionsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowVersionsRequestTimeout creates a PostFlowVersionsRequestTimeout with default headers values
func NewPostFlowVersionsRequestTimeout() *PostFlowVersionsRequestTimeout {
	return &PostFlowVersionsRequestTimeout{}
}

/*
PostFlowVersionsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostFlowVersionsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow versions request timeout response has a 2xx status code
func (o *PostFlowVersionsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow versions request timeout response has a 3xx status code
func (o *PostFlowVersionsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow versions request timeout response has a 4xx status code
func (o *PostFlowVersionsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow versions request timeout response has a 5xx status code
func (o *PostFlowVersionsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow versions request timeout response a status code equal to that given
func (o *PostFlowVersionsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostFlowVersionsRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostFlowVersionsRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostFlowVersionsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowVersionsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowVersionsConflict creates a PostFlowVersionsConflict with default headers values
func NewPostFlowVersionsConflict() *PostFlowVersionsConflict {
	return &PostFlowVersionsConflict{}
}

/*
PostFlowVersionsConflict describes a response with status code 409, with default header values.

Conflict
*/
type PostFlowVersionsConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow versions conflict response has a 2xx status code
func (o *PostFlowVersionsConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow versions conflict response has a 3xx status code
func (o *PostFlowVersionsConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow versions conflict response has a 4xx status code
func (o *PostFlowVersionsConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow versions conflict response has a 5xx status code
func (o *PostFlowVersionsConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow versions conflict response a status code equal to that given
func (o *PostFlowVersionsConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PostFlowVersionsConflict) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsConflict  %+v", 409, o.Payload)
}

func (o *PostFlowVersionsConflict) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsConflict  %+v", 409, o.Payload)
}

func (o *PostFlowVersionsConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowVersionsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowVersionsGone creates a PostFlowVersionsGone with default headers values
func NewPostFlowVersionsGone() *PostFlowVersionsGone {
	return &PostFlowVersionsGone{}
}

/*
PostFlowVersionsGone describes a response with status code 410, with default header values.

Gone
*/
type PostFlowVersionsGone struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow versions gone response has a 2xx status code
func (o *PostFlowVersionsGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow versions gone response has a 3xx status code
func (o *PostFlowVersionsGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow versions gone response has a 4xx status code
func (o *PostFlowVersionsGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow versions gone response has a 5xx status code
func (o *PostFlowVersionsGone) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow versions gone response a status code equal to that given
func (o *PostFlowVersionsGone) IsCode(code int) bool {
	return code == 410
}

func (o *PostFlowVersionsGone) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsGone  %+v", 410, o.Payload)
}

func (o *PostFlowVersionsGone) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsGone  %+v", 410, o.Payload)
}

func (o *PostFlowVersionsGone) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowVersionsGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowVersionsRequestEntityTooLarge creates a PostFlowVersionsRequestEntityTooLarge with default headers values
func NewPostFlowVersionsRequestEntityTooLarge() *PostFlowVersionsRequestEntityTooLarge {
	return &PostFlowVersionsRequestEntityTooLarge{}
}

/*
PostFlowVersionsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostFlowVersionsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow versions request entity too large response has a 2xx status code
func (o *PostFlowVersionsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow versions request entity too large response has a 3xx status code
func (o *PostFlowVersionsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow versions request entity too large response has a 4xx status code
func (o *PostFlowVersionsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow versions request entity too large response has a 5xx status code
func (o *PostFlowVersionsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow versions request entity too large response a status code equal to that given
func (o *PostFlowVersionsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostFlowVersionsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostFlowVersionsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostFlowVersionsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowVersionsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowVersionsUnsupportedMediaType creates a PostFlowVersionsUnsupportedMediaType with default headers values
func NewPostFlowVersionsUnsupportedMediaType() *PostFlowVersionsUnsupportedMediaType {
	return &PostFlowVersionsUnsupportedMediaType{}
}

/*
PostFlowVersionsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostFlowVersionsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow versions unsupported media type response has a 2xx status code
func (o *PostFlowVersionsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow versions unsupported media type response has a 3xx status code
func (o *PostFlowVersionsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow versions unsupported media type response has a 4xx status code
func (o *PostFlowVersionsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow versions unsupported media type response has a 5xx status code
func (o *PostFlowVersionsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow versions unsupported media type response a status code equal to that given
func (o *PostFlowVersionsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostFlowVersionsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostFlowVersionsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostFlowVersionsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowVersionsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowVersionsTooManyRequests creates a PostFlowVersionsTooManyRequests with default headers values
func NewPostFlowVersionsTooManyRequests() *PostFlowVersionsTooManyRequests {
	return &PostFlowVersionsTooManyRequests{}
}

/*
PostFlowVersionsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostFlowVersionsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow versions too many requests response has a 2xx status code
func (o *PostFlowVersionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow versions too many requests response has a 3xx status code
func (o *PostFlowVersionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow versions too many requests response has a 4xx status code
func (o *PostFlowVersionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow versions too many requests response has a 5xx status code
func (o *PostFlowVersionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow versions too many requests response a status code equal to that given
func (o *PostFlowVersionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostFlowVersionsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostFlowVersionsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostFlowVersionsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowVersionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowVersionsInternalServerError creates a PostFlowVersionsInternalServerError with default headers values
func NewPostFlowVersionsInternalServerError() *PostFlowVersionsInternalServerError {
	return &PostFlowVersionsInternalServerError{}
}

/*
PostFlowVersionsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostFlowVersionsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow versions internal server error response has a 2xx status code
func (o *PostFlowVersionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow versions internal server error response has a 3xx status code
func (o *PostFlowVersionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow versions internal server error response has a 4xx status code
func (o *PostFlowVersionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post flow versions internal server error response has a 5xx status code
func (o *PostFlowVersionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post flow versions internal server error response a status code equal to that given
func (o *PostFlowVersionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostFlowVersionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostFlowVersionsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostFlowVersionsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowVersionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowVersionsServiceUnavailable creates a PostFlowVersionsServiceUnavailable with default headers values
func NewPostFlowVersionsServiceUnavailable() *PostFlowVersionsServiceUnavailable {
	return &PostFlowVersionsServiceUnavailable{}
}

/*
PostFlowVersionsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostFlowVersionsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow versions service unavailable response has a 2xx status code
func (o *PostFlowVersionsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow versions service unavailable response has a 3xx status code
func (o *PostFlowVersionsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow versions service unavailable response has a 4xx status code
func (o *PostFlowVersionsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post flow versions service unavailable response has a 5xx status code
func (o *PostFlowVersionsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post flow versions service unavailable response a status code equal to that given
func (o *PostFlowVersionsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostFlowVersionsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostFlowVersionsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostFlowVersionsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowVersionsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowVersionsGatewayTimeout creates a PostFlowVersionsGatewayTimeout with default headers values
func NewPostFlowVersionsGatewayTimeout() *PostFlowVersionsGatewayTimeout {
	return &PostFlowVersionsGatewayTimeout{}
}

/*
PostFlowVersionsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostFlowVersionsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow versions gateway timeout response has a 2xx status code
func (o *PostFlowVersionsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow versions gateway timeout response has a 3xx status code
func (o *PostFlowVersionsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow versions gateway timeout response has a 4xx status code
func (o *PostFlowVersionsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post flow versions gateway timeout response has a 5xx status code
func (o *PostFlowVersionsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post flow versions gateway timeout response a status code equal to that given
func (o *PostFlowVersionsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostFlowVersionsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostFlowVersionsGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/versions][%d] postFlowVersionsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostFlowVersionsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowVersionsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

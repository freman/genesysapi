// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostFlowHistoryReader is a Reader for the PostFlowHistory structure.
type PostFlowHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostFlowHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostFlowHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostFlowHistoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostFlowHistoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostFlowHistoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostFlowHistoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostFlowHistoryRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostFlowHistoryRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostFlowHistoryUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostFlowHistoryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostFlowHistoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostFlowHistoryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostFlowHistoryGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostFlowHistoryOK creates a PostFlowHistoryOK with default headers values
func NewPostFlowHistoryOK() *PostFlowHistoryOK {
	return &PostFlowHistoryOK{}
}

/*
PostFlowHistoryOK describes a response with status code 200, with default header values.

successful operation
*/
type PostFlowHistoryOK struct {
	Payload *models.Operation
}

// IsSuccess returns true when this post flow history o k response has a 2xx status code
func (o *PostFlowHistoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post flow history o k response has a 3xx status code
func (o *PostFlowHistoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow history o k response has a 4xx status code
func (o *PostFlowHistoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post flow history o k response has a 5xx status code
func (o *PostFlowHistoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow history o k response a status code equal to that given
func (o *PostFlowHistoryOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostFlowHistoryOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryOK  %+v", 200, o.Payload)
}

func (o *PostFlowHistoryOK) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryOK  %+v", 200, o.Payload)
}

func (o *PostFlowHistoryOK) GetPayload() *models.Operation {
	return o.Payload
}

func (o *PostFlowHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Operation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowHistoryBadRequest creates a PostFlowHistoryBadRequest with default headers values
func NewPostFlowHistoryBadRequest() *PostFlowHistoryBadRequest {
	return &PostFlowHistoryBadRequest{}
}

/*
PostFlowHistoryBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostFlowHistoryBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow history bad request response has a 2xx status code
func (o *PostFlowHistoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow history bad request response has a 3xx status code
func (o *PostFlowHistoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow history bad request response has a 4xx status code
func (o *PostFlowHistoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow history bad request response has a 5xx status code
func (o *PostFlowHistoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow history bad request response a status code equal to that given
func (o *PostFlowHistoryBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostFlowHistoryBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryBadRequest  %+v", 400, o.Payload)
}

func (o *PostFlowHistoryBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryBadRequest  %+v", 400, o.Payload)
}

func (o *PostFlowHistoryBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowHistoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowHistoryUnauthorized creates a PostFlowHistoryUnauthorized with default headers values
func NewPostFlowHistoryUnauthorized() *PostFlowHistoryUnauthorized {
	return &PostFlowHistoryUnauthorized{}
}

/*
PostFlowHistoryUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostFlowHistoryUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow history unauthorized response has a 2xx status code
func (o *PostFlowHistoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow history unauthorized response has a 3xx status code
func (o *PostFlowHistoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow history unauthorized response has a 4xx status code
func (o *PostFlowHistoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow history unauthorized response has a 5xx status code
func (o *PostFlowHistoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow history unauthorized response a status code equal to that given
func (o *PostFlowHistoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostFlowHistoryUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryUnauthorized  %+v", 401, o.Payload)
}

func (o *PostFlowHistoryUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryUnauthorized  %+v", 401, o.Payload)
}

func (o *PostFlowHistoryUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowHistoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowHistoryForbidden creates a PostFlowHistoryForbidden with default headers values
func NewPostFlowHistoryForbidden() *PostFlowHistoryForbidden {
	return &PostFlowHistoryForbidden{}
}

/*
PostFlowHistoryForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostFlowHistoryForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow history forbidden response has a 2xx status code
func (o *PostFlowHistoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow history forbidden response has a 3xx status code
func (o *PostFlowHistoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow history forbidden response has a 4xx status code
func (o *PostFlowHistoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow history forbidden response has a 5xx status code
func (o *PostFlowHistoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow history forbidden response a status code equal to that given
func (o *PostFlowHistoryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostFlowHistoryForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryForbidden  %+v", 403, o.Payload)
}

func (o *PostFlowHistoryForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryForbidden  %+v", 403, o.Payload)
}

func (o *PostFlowHistoryForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowHistoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowHistoryNotFound creates a PostFlowHistoryNotFound with default headers values
func NewPostFlowHistoryNotFound() *PostFlowHistoryNotFound {
	return &PostFlowHistoryNotFound{}
}

/*
PostFlowHistoryNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostFlowHistoryNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow history not found response has a 2xx status code
func (o *PostFlowHistoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow history not found response has a 3xx status code
func (o *PostFlowHistoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow history not found response has a 4xx status code
func (o *PostFlowHistoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow history not found response has a 5xx status code
func (o *PostFlowHistoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow history not found response a status code equal to that given
func (o *PostFlowHistoryNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostFlowHistoryNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryNotFound  %+v", 404, o.Payload)
}

func (o *PostFlowHistoryNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryNotFound  %+v", 404, o.Payload)
}

func (o *PostFlowHistoryNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowHistoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowHistoryRequestTimeout creates a PostFlowHistoryRequestTimeout with default headers values
func NewPostFlowHistoryRequestTimeout() *PostFlowHistoryRequestTimeout {
	return &PostFlowHistoryRequestTimeout{}
}

/*
PostFlowHistoryRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostFlowHistoryRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow history request timeout response has a 2xx status code
func (o *PostFlowHistoryRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow history request timeout response has a 3xx status code
func (o *PostFlowHistoryRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow history request timeout response has a 4xx status code
func (o *PostFlowHistoryRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow history request timeout response has a 5xx status code
func (o *PostFlowHistoryRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow history request timeout response a status code equal to that given
func (o *PostFlowHistoryRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostFlowHistoryRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostFlowHistoryRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostFlowHistoryRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowHistoryRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowHistoryRequestEntityTooLarge creates a PostFlowHistoryRequestEntityTooLarge with default headers values
func NewPostFlowHistoryRequestEntityTooLarge() *PostFlowHistoryRequestEntityTooLarge {
	return &PostFlowHistoryRequestEntityTooLarge{}
}

/*
PostFlowHistoryRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostFlowHistoryRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow history request entity too large response has a 2xx status code
func (o *PostFlowHistoryRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow history request entity too large response has a 3xx status code
func (o *PostFlowHistoryRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow history request entity too large response has a 4xx status code
func (o *PostFlowHistoryRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow history request entity too large response has a 5xx status code
func (o *PostFlowHistoryRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow history request entity too large response a status code equal to that given
func (o *PostFlowHistoryRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostFlowHistoryRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostFlowHistoryRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostFlowHistoryRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowHistoryRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowHistoryUnsupportedMediaType creates a PostFlowHistoryUnsupportedMediaType with default headers values
func NewPostFlowHistoryUnsupportedMediaType() *PostFlowHistoryUnsupportedMediaType {
	return &PostFlowHistoryUnsupportedMediaType{}
}

/*
PostFlowHistoryUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostFlowHistoryUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow history unsupported media type response has a 2xx status code
func (o *PostFlowHistoryUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow history unsupported media type response has a 3xx status code
func (o *PostFlowHistoryUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow history unsupported media type response has a 4xx status code
func (o *PostFlowHistoryUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow history unsupported media type response has a 5xx status code
func (o *PostFlowHistoryUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow history unsupported media type response a status code equal to that given
func (o *PostFlowHistoryUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostFlowHistoryUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostFlowHistoryUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostFlowHistoryUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowHistoryUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowHistoryTooManyRequests creates a PostFlowHistoryTooManyRequests with default headers values
func NewPostFlowHistoryTooManyRequests() *PostFlowHistoryTooManyRequests {
	return &PostFlowHistoryTooManyRequests{}
}

/*
PostFlowHistoryTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostFlowHistoryTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow history too many requests response has a 2xx status code
func (o *PostFlowHistoryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow history too many requests response has a 3xx status code
func (o *PostFlowHistoryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow history too many requests response has a 4xx status code
func (o *PostFlowHistoryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flow history too many requests response has a 5xx status code
func (o *PostFlowHistoryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post flow history too many requests response a status code equal to that given
func (o *PostFlowHistoryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostFlowHistoryTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostFlowHistoryTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostFlowHistoryTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowHistoryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowHistoryInternalServerError creates a PostFlowHistoryInternalServerError with default headers values
func NewPostFlowHistoryInternalServerError() *PostFlowHistoryInternalServerError {
	return &PostFlowHistoryInternalServerError{}
}

/*
PostFlowHistoryInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostFlowHistoryInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow history internal server error response has a 2xx status code
func (o *PostFlowHistoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow history internal server error response has a 3xx status code
func (o *PostFlowHistoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow history internal server error response has a 4xx status code
func (o *PostFlowHistoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post flow history internal server error response has a 5xx status code
func (o *PostFlowHistoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post flow history internal server error response a status code equal to that given
func (o *PostFlowHistoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostFlowHistoryInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryInternalServerError  %+v", 500, o.Payload)
}

func (o *PostFlowHistoryInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryInternalServerError  %+v", 500, o.Payload)
}

func (o *PostFlowHistoryInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowHistoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowHistoryServiceUnavailable creates a PostFlowHistoryServiceUnavailable with default headers values
func NewPostFlowHistoryServiceUnavailable() *PostFlowHistoryServiceUnavailable {
	return &PostFlowHistoryServiceUnavailable{}
}

/*
PostFlowHistoryServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostFlowHistoryServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow history service unavailable response has a 2xx status code
func (o *PostFlowHistoryServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow history service unavailable response has a 3xx status code
func (o *PostFlowHistoryServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow history service unavailable response has a 4xx status code
func (o *PostFlowHistoryServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post flow history service unavailable response has a 5xx status code
func (o *PostFlowHistoryServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post flow history service unavailable response a status code equal to that given
func (o *PostFlowHistoryServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostFlowHistoryServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostFlowHistoryServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostFlowHistoryServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowHistoryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowHistoryGatewayTimeout creates a PostFlowHistoryGatewayTimeout with default headers values
func NewPostFlowHistoryGatewayTimeout() *PostFlowHistoryGatewayTimeout {
	return &PostFlowHistoryGatewayTimeout{}
}

/*
PostFlowHistoryGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostFlowHistoryGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flow history gateway timeout response has a 2xx status code
func (o *PostFlowHistoryGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flow history gateway timeout response has a 3xx status code
func (o *PostFlowHistoryGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flow history gateway timeout response has a 4xx status code
func (o *PostFlowHistoryGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post flow history gateway timeout response has a 5xx status code
func (o *PostFlowHistoryGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post flow history gateway timeout response a status code equal to that given
func (o *PostFlowHistoryGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostFlowHistoryGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostFlowHistoryGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/flows/{flowId}/history][%d] postFlowHistoryGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostFlowHistoryGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowHistoryGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

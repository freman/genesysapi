// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the architect client
type API interface {
	/*
	   DeleteArchitectEmergencygroup deletes a emergency group by ID
	*/
	DeleteArchitectEmergencygroup(ctx context.Context, params *DeleteArchitectEmergencygroupParams) (*DeleteArchitectEmergencygroupOK, error)
	/*
	   DeleteArchitectIvr deletes an i v r config
	*/
	DeleteArchitectIvr(ctx context.Context, params *DeleteArchitectIvrParams) (*DeleteArchitectIvrOK, error)
	/*
	   DeleteArchitectPrompt deletes specified user prompt
	*/
	DeleteArchitectPrompt(ctx context.Context, params *DeleteArchitectPromptParams) error
	/*
	   DeleteArchitectPromptResource deletes specified user prompt resource
	*/
	DeleteArchitectPromptResource(ctx context.Context, params *DeleteArchitectPromptResourceParams) error
	/*
	   DeleteArchitectPromptResourceAudio deletes specified user prompt resource audio
	*/
	DeleteArchitectPromptResourceAudio(ctx context.Context, params *DeleteArchitectPromptResourceAudioParams) (*DeleteArchitectPromptResourceAudioNoContent, error)
	/*
	   DeleteArchitectPrompts batches delete a list of prompts
	   Multiple IDs can be specified, in which case all specified prompts will be deleted.  Asynchronous.  Notification topic: v2.architect.prompts.{promptId}
	*/
	DeleteArchitectPrompts(ctx context.Context, params *DeleteArchitectPromptsParams) (*DeleteArchitectPromptsOK, error)
	/*
	   DeleteArchitectSchedule deletes a schedule by id
	*/
	DeleteArchitectSchedule(ctx context.Context, params *DeleteArchitectScheduleParams) (*DeleteArchitectScheduleOK, error)
	/*
	   DeleteArchitectSchedulegroup deletes a schedule group by ID
	*/
	DeleteArchitectSchedulegroup(ctx context.Context, params *DeleteArchitectSchedulegroupParams) (*DeleteArchitectSchedulegroupOK, error)
	/*
	   DeleteArchitectSystempromptResource deletes a system prompt resource override
	*/
	DeleteArchitectSystempromptResource(ctx context.Context, params *DeleteArchitectSystempromptResourceParams) (*DeleteArchitectSystempromptResourceOK, error)
	/*
	   DeleteFlow deletes flow
	*/
	DeleteFlow(ctx context.Context, params *DeleteFlowParams) error
	/*
	   DeleteFlows batches delete a list of flows
	   Multiple IDs can be specified, in which case all specified flows will be deleted.  Asynchronous.  Notification topic: v2.flows.{flowId}
	*/
	DeleteFlows(ctx context.Context, params *DeleteFlowsParams) (*DeleteFlowsOK, error)
	/*
	   DeleteFlowsDatatable deletes a specific datatable by id
	   Deletes an entire datatable (including the schema and data) with a given datatableId
	*/
	DeleteFlowsDatatable(ctx context.Context, params *DeleteFlowsDatatableParams) (*DeleteFlowsDatatableNoContent, error)
	/*
	   DeleteFlowsDatatableRow deletes a row entry
	   Deletes a row with a given rowId (the value of the key field).
	*/
	DeleteFlowsDatatableRow(ctx context.Context, params *DeleteFlowsDatatableRowParams) (*DeleteFlowsDatatableRowNoContent, error)
	/*
	   DeleteFlowsMilestone deletes a flow milestone
	*/
	DeleteFlowsMilestone(ctx context.Context, params *DeleteFlowsMilestoneParams) (*DeleteFlowsMilestoneOK, *DeleteFlowsMilestoneNoContent, error)
	/*
	   GetArchitectDependencytracking gets dependency tracking objects that have a given display name
	*/
	GetArchitectDependencytracking(ctx context.Context, params *GetArchitectDependencytrackingParams) (*GetArchitectDependencytrackingOK, *GetArchitectDependencytrackingPartialContent, error)
	/*
	   GetArchitectDependencytrackingBuild gets dependency tracking build status for an organization
	*/
	GetArchitectDependencytrackingBuild(ctx context.Context, params *GetArchitectDependencytrackingBuildParams) (*GetArchitectDependencytrackingBuildOK, error)
	/*
	   GetArchitectDependencytrackingConsumedresources gets resources that are consumed by a given dependency tracking object
	*/
	GetArchitectDependencytrackingConsumedresources(ctx context.Context, params *GetArchitectDependencytrackingConsumedresourcesParams) (*GetArchitectDependencytrackingConsumedresourcesOK, *GetArchitectDependencytrackingConsumedresourcesPartialContent, error)
	/*
	   GetArchitectDependencytrackingConsumingresources gets resources that consume a given dependency tracking object
	*/
	GetArchitectDependencytrackingConsumingresources(ctx context.Context, params *GetArchitectDependencytrackingConsumingresourcesParams) (*GetArchitectDependencytrackingConsumingresourcesOK, *GetArchitectDependencytrackingConsumingresourcesPartialContent, error)
	/*
	   GetArchitectDependencytrackingDeletedresourceconsumers gets dependency tracking objects that consume deleted resources
	*/
	GetArchitectDependencytrackingDeletedresourceconsumers(ctx context.Context, params *GetArchitectDependencytrackingDeletedresourceconsumersParams) (*GetArchitectDependencytrackingDeletedresourceconsumersOK, *GetArchitectDependencytrackingDeletedresourceconsumersPartialContent, error)
	/*
	   GetArchitectDependencytrackingObject gets a dependency tracking object
	*/
	GetArchitectDependencytrackingObject(ctx context.Context, params *GetArchitectDependencytrackingObjectParams) (*GetArchitectDependencytrackingObjectOK, *GetArchitectDependencytrackingObjectPartialContent, error)
	/*
	   GetArchitectDependencytrackingType gets a dependency tracking type
	*/
	GetArchitectDependencytrackingType(ctx context.Context, params *GetArchitectDependencytrackingTypeParams) (*GetArchitectDependencytrackingTypeOK, error)
	/*
	   GetArchitectDependencytrackingTypes gets dependency tracking types
	*/
	GetArchitectDependencytrackingTypes(ctx context.Context, params *GetArchitectDependencytrackingTypesParams) (*GetArchitectDependencytrackingTypesOK, error)
	/*
	   GetArchitectDependencytrackingUpdatedresourceconsumers gets dependency tracking objects that depend on updated resources
	*/
	GetArchitectDependencytrackingUpdatedresourceconsumers(ctx context.Context, params *GetArchitectDependencytrackingUpdatedresourceconsumersParams) (*GetArchitectDependencytrackingUpdatedresourceconsumersOK, *GetArchitectDependencytrackingUpdatedresourceconsumersPartialContent, error)
	/*
	   GetArchitectEmergencygroup gets a emergency group by ID
	*/
	GetArchitectEmergencygroup(ctx context.Context, params *GetArchitectEmergencygroupParams) (*GetArchitectEmergencygroupOK, error)
	/*
	   GetArchitectEmergencygroups gets a list of emergency groups
	*/
	GetArchitectEmergencygroups(ctx context.Context, params *GetArchitectEmergencygroupsParams) (*GetArchitectEmergencygroupsOK, error)
	/*
	   GetArchitectIvr gets an i v r config
	*/
	GetArchitectIvr(ctx context.Context, params *GetArchitectIvrParams) (*GetArchitectIvrOK, error)
	/*
	   GetArchitectIvrs gets i v r configs
	*/
	GetArchitectIvrs(ctx context.Context, params *GetArchitectIvrsParams) (*GetArchitectIvrsOK, error)
	/*
	   GetArchitectPrompt gets specified user prompt
	*/
	GetArchitectPrompt(ctx context.Context, params *GetArchitectPromptParams) (*GetArchitectPromptOK, error)
	/*
	   GetArchitectPromptHistoryHistoryID gets generated prompt history
	*/
	GetArchitectPromptHistoryHistoryID(ctx context.Context, params *GetArchitectPromptHistoryHistoryIDParams) (*GetArchitectPromptHistoryHistoryIDOK, error)
	/*
	   GetArchitectPromptResource gets specified user prompt resource
	*/
	GetArchitectPromptResource(ctx context.Context, params *GetArchitectPromptResourceParams) (*GetArchitectPromptResourceOK, error)
	/*
	   GetArchitectPromptResources gets a pageable list of user prompt resources
	   The returned list is pageable, and query parameters can be used for filtering.
	*/
	GetArchitectPromptResources(ctx context.Context, params *GetArchitectPromptResourcesParams) (*GetArchitectPromptResourcesOK, error)
	/*
	   GetArchitectPrompts gets a pageable list of user prompts
	   The returned list is pageable, and query parameters can be used for filtering.  Multiple names can be specified, in which case all matching prompts will be returned, and no other filters will be evaluated.
	*/
	GetArchitectPrompts(ctx context.Context, params *GetArchitectPromptsParams) (*GetArchitectPromptsOK, error)
	/*
	   GetArchitectSchedule gets a schedule by ID
	*/
	GetArchitectSchedule(ctx context.Context, params *GetArchitectScheduleParams) (*GetArchitectScheduleOK, error)
	/*
	   GetArchitectSchedulegroup gets a schedule group by ID
	*/
	GetArchitectSchedulegroup(ctx context.Context, params *GetArchitectSchedulegroupParams) (*GetArchitectSchedulegroupOK, error)
	/*
	   GetArchitectSchedulegroups gets a list of schedule groups
	*/
	GetArchitectSchedulegroups(ctx context.Context, params *GetArchitectSchedulegroupsParams) (*GetArchitectSchedulegroupsOK, error)
	/*
	   GetArchitectSchedules gets a list of schedules
	*/
	GetArchitectSchedules(ctx context.Context, params *GetArchitectSchedulesParams) (*GetArchitectSchedulesOK, error)
	/*
	   GetArchitectSystemprompt gets a system prompt
	*/
	GetArchitectSystemprompt(ctx context.Context, params *GetArchitectSystempromptParams) (*GetArchitectSystempromptOK, error)
	/*
	   GetArchitectSystempromptHistoryHistoryID gets generated prompt history
	*/
	GetArchitectSystempromptHistoryHistoryID(ctx context.Context, params *GetArchitectSystempromptHistoryHistoryIDParams) (*GetArchitectSystempromptHistoryHistoryIDOK, error)
	/*
	   GetArchitectSystempromptResource gets a system prompt resource
	*/
	GetArchitectSystempromptResource(ctx context.Context, params *GetArchitectSystempromptResourceParams) (*GetArchitectSystempromptResourceOK, error)
	/*
	   GetArchitectSystempromptResources gets system prompt resources
	*/
	GetArchitectSystempromptResources(ctx context.Context, params *GetArchitectSystempromptResourcesParams) (*GetArchitectSystempromptResourcesOK, error)
	/*
	   GetArchitectSystemprompts gets system prompts
	*/
	GetArchitectSystemprompts(ctx context.Context, params *GetArchitectSystempromptsParams) (*GetArchitectSystempromptsOK, error)
	/*
	   GetFlow gets flow
	*/
	GetFlow(ctx context.Context, params *GetFlowParams) (*GetFlowOK, error)
	/*
	   GetFlowHistoryHistoryID gets generated flow history
	*/
	GetFlowHistoryHistoryID(ctx context.Context, params *GetFlowHistoryHistoryIDParams) (*GetFlowHistoryHistoryIDOK, error)
	/*
	   GetFlowLatestconfiguration gets the latest configuration for flow
	*/
	GetFlowLatestconfiguration(ctx context.Context, params *GetFlowLatestconfigurationParams) (*GetFlowLatestconfigurationOK, error)
	/*
	   GetFlowVersion gets flow version
	*/
	GetFlowVersion(ctx context.Context, params *GetFlowVersionParams) (*GetFlowVersionOK, error)
	/*
	   GetFlowVersionConfiguration creates flow version configuration
	*/
	GetFlowVersionConfiguration(ctx context.Context, params *GetFlowVersionConfigurationParams) (*GetFlowVersionConfigurationOK, error)
	/*
	   GetFlowVersions gets flow version list
	*/
	GetFlowVersions(ctx context.Context, params *GetFlowVersionsParams) (*GetFlowVersionsOK, error)
	/*
	   GetFlows gets a pageable list of flows filtered by query parameters
	   If one or more IDs are specified, the search will fetch flows that match the given ID(s) and not use any additional supplied query parameters in the search.
	*/
	GetFlows(ctx context.Context, params *GetFlowsParams) (*GetFlowsOK, error)
	/*
	   GetFlowsDatatable returns a specific datatable by id
	   Given a datatableId returns the datatable object and schema associated with it.
	*/
	GetFlowsDatatable(ctx context.Context, params *GetFlowsDatatableParams) (*GetFlowsDatatableOK, error)
	/*
	   GetFlowsDatatableExportJob returns the state information about an export job
	   Returns the state information about an export job.
	*/
	GetFlowsDatatableExportJob(ctx context.Context, params *GetFlowsDatatableExportJobParams) (*GetFlowsDatatableExportJobOK, *GetFlowsDatatableExportJobAccepted, error)
	/*
	   GetFlowsDatatableImportJob returns the state information about an import job
	   Returns the state information about an import job.
	*/
	GetFlowsDatatableImportJob(ctx context.Context, params *GetFlowsDatatableImportJobParams) (*GetFlowsDatatableImportJobOK, *GetFlowsDatatableImportJobAccepted, error)
	/*
	   GetFlowsDatatableImportJobs gets all recent import jobs
	   Get all recent import jobs
	*/
	GetFlowsDatatableImportJobs(ctx context.Context, params *GetFlowsDatatableImportJobsParams) (*GetFlowsDatatableImportJobsOK, error)
	/*
	   GetFlowsDatatableRow returns a specific row for the datatable
	   Given a datatableId and a rowId (the value of the key field) this will return the full row contents for that rowId.
	*/
	GetFlowsDatatableRow(ctx context.Context, params *GetFlowsDatatableRowParams) (*GetFlowsDatatableRowOK, error)
	/*
	   GetFlowsDatatableRows returns the rows for the datatable with the given id
	   Returns all of the rows for the datatable with the given datatableId.  By default this will just be a truncated list returning the key for each row. Set showBrief to false to return all of the row contents.
	*/
	GetFlowsDatatableRows(ctx context.Context, params *GetFlowsDatatableRowsParams) (*GetFlowsDatatableRowsOK, error)
	/*
	   GetFlowsDatatables retrieves a list of datatables for the org
	   Returns a metadata list of the datatables associated with this org, including datatableId, name and description.
	*/
	GetFlowsDatatables(ctx context.Context, params *GetFlowsDatatablesParams) (*GetFlowsDatatablesOK, error)
	/*
	   GetFlowsDatatablesDivisionview returns a specific datatable by id
	   Given a datatableId returns the datatable object and schema associated with it.
	*/
	GetFlowsDatatablesDivisionview(ctx context.Context, params *GetFlowsDatatablesDivisionviewParams) (*GetFlowsDatatablesDivisionviewOK, error)
	/*
	   GetFlowsDatatablesDivisionviews retrieves a list of datatables for the org
	   Returns a metadata list of the datatables associated with this org, including datatableId, name and description.
	*/
	GetFlowsDatatablesDivisionviews(ctx context.Context, params *GetFlowsDatatablesDivisionviewsParams) (*GetFlowsDatatablesDivisionviewsOK, error)
	/*
	   GetFlowsDivisionviews gets a pageable list of basic flow information objects filterable by query parameters
	   This returns a simplified version of /flow consisting of name and type. If one or more IDs are specified, the search will fetch flows that match the given ID(s) and not use any additional supplied query parameters in the search.
	*/
	GetFlowsDivisionviews(ctx context.Context, params *GetFlowsDivisionviewsParams) (*GetFlowsDivisionviewsOK, error)
	/*
	   GetFlowsExecution gets a flow execution s details flow execution details are available for several days after the flow is started
	*/
	GetFlowsExecution(ctx context.Context, params *GetFlowsExecutionParams) (*GetFlowsExecutionOK, error)
	/*
	   GetFlowsMilestone gets a flow milestone
	   Returns a specified flow milestone
	*/
	GetFlowsMilestone(ctx context.Context, params *GetFlowsMilestoneParams) (*GetFlowsMilestoneOK, error)
	/*
	   GetFlowsMilestones gets a pageable list of flow milestones filtered by query parameters
	   Multiple IDs can be specified, in which case all matching flow milestones will be returned, and no other parameters will be evaluated.
	*/
	GetFlowsMilestones(ctx context.Context, params *GetFlowsMilestonesParams) (*GetFlowsMilestonesOK, error)
	/*
	   GetFlowsMilestonesDivisionviews gets a pageable list of basic flow milestone information objects filterable by query parameters
	   This returns flow milestones consisting of name and division. If one or more IDs are specified, the search will fetch flow milestones that match the given ID(s) and not use any additional supplied query parameters in the search.
	*/
	GetFlowsMilestonesDivisionviews(ctx context.Context, params *GetFlowsMilestonesDivisionviewsParams) (*GetFlowsMilestonesDivisionviewsOK, error)
	/*
	   GetFlowsOutcome gets a flow outcome
	   Returns a specified flow outcome
	*/
	GetFlowsOutcome(ctx context.Context, params *GetFlowsOutcomeParams) (*GetFlowsOutcomeOK, error)
	/*
	   GetFlowsOutcomes gets a pageable list of flow outcomes filtered by query parameters
	   Multiple IDs can be specified, in which case all matching flow outcomes will be returned, and no other parameters will be evaluated.
	*/
	GetFlowsOutcomes(ctx context.Context, params *GetFlowsOutcomesParams) (*GetFlowsOutcomesOK, error)
	/*
	   GetFlowsOutcomesDivisionviews gets a pageable list of basic flow outcome information objects filterable by query parameters
	   This returns flow outcomes consisting of name and division. If one or more IDs are specified, the search will fetch flow outcomes that match the given ID(s) and not use any additional supplied query parameters in the search.
	*/
	GetFlowsOutcomesDivisionviews(ctx context.Context, params *GetFlowsOutcomesDivisionviewsParams) (*GetFlowsOutcomesDivisionviewsOK, error)
	/*
	   PostArchitectDependencytrackingBuild rebuilds dependency tracking data for an organization
	   Asynchronous.  Notification topic: v2.architect.dependencytracking.build
	*/
	PostArchitectDependencytrackingBuild(ctx context.Context, params *PostArchitectDependencytrackingBuildParams) (*PostArchitectDependencytrackingBuildAccepted, error)
	/*
	   PostArchitectEmergencygroups creates a new emergency group
	*/
	PostArchitectEmergencygroups(ctx context.Context, params *PostArchitectEmergencygroupsParams) (*PostArchitectEmergencygroupsOK, error)
	/*
	   PostArchitectIvrs creates i v r config
	*/
	PostArchitectIvrs(ctx context.Context, params *PostArchitectIvrsParams) (*PostArchitectIvrsOK, error)
	/*
	   PostArchitectPromptHistory generates prompt history
	   Asynchronous.  Notification topic: v2.architect.prompts.{promptId}
	*/
	PostArchitectPromptHistory(ctx context.Context, params *PostArchitectPromptHistoryParams) (*PostArchitectPromptHistoryOK, error)
	/*
	   PostArchitectPromptResources creates a new user prompt resource
	*/
	PostArchitectPromptResources(ctx context.Context, params *PostArchitectPromptResourcesParams) (*PostArchitectPromptResourcesOK, error)
	/*
	   PostArchitectPrompts creates a new user prompt
	*/
	PostArchitectPrompts(ctx context.Context, params *PostArchitectPromptsParams) (*PostArchitectPromptsOK, error)
	/*
	   PostArchitectSchedulegroups creates a new schedule group
	*/
	PostArchitectSchedulegroups(ctx context.Context, params *PostArchitectSchedulegroupsParams) (*PostArchitectSchedulegroupsOK, error)
	/*
	   PostArchitectSchedules creates a new schedule
	*/
	PostArchitectSchedules(ctx context.Context, params *PostArchitectSchedulesParams) (*PostArchitectSchedulesOK, error)
	/*
	   PostArchitectSystempromptHistory generates system prompt history
	   Asynchronous.  Notification topic: v2.architect.systemprompts.{systemPromptId}
	*/
	PostArchitectSystempromptHistory(ctx context.Context, params *PostArchitectSystempromptHistoryParams) (*PostArchitectSystempromptHistoryOK, error)
	/*
	   PostArchitectSystempromptResources creates system prompt resource override
	*/
	PostArchitectSystempromptResources(ctx context.Context, params *PostArchitectSystempromptResourcesParams) (*PostArchitectSystempromptResourcesOK, error)
	/*
	   PostFlowHistory generates flow history
	   Asynchronous.  Notification topic: v2.flows.{flowId}
	*/
	PostFlowHistory(ctx context.Context, params *PostFlowHistoryParams) (*PostFlowHistoryOK, error)
	/*
	   PostFlowVersions creates flow version
	*/
	PostFlowVersions(ctx context.Context, params *PostFlowVersionsParams) (*PostFlowVersionsOK, error)
	/*
	   PostFlows creates flow
	*/
	PostFlows(ctx context.Context, params *PostFlowsParams) (*PostFlowsOK, error)
	/*
	   PostFlowsActionsCheckin checks in flow
	   Asynchronous.  Notification topic: v2.flows.{flowId}
	*/
	PostFlowsActionsCheckin(ctx context.Context, params *PostFlowsActionsCheckinParams) (*PostFlowsActionsCheckinOK, error)
	/*
	   PostFlowsActionsCheckout checks out flow
	*/
	PostFlowsActionsCheckout(ctx context.Context, params *PostFlowsActionsCheckoutParams) (*PostFlowsActionsCheckoutOK, error)
	/*
	   PostFlowsActionsDeactivate deactivates flow
	*/
	PostFlowsActionsDeactivate(ctx context.Context, params *PostFlowsActionsDeactivateParams) (*PostFlowsActionsDeactivateOK, error)
	/*
	   PostFlowsActionsPublish publishes flow
	   Asynchronous.  Notification topic: v2.flows.{flowId}
	*/
	PostFlowsActionsPublish(ctx context.Context, params *PostFlowsActionsPublishParams) (*PostFlowsActionsPublishOK, *PostFlowsActionsPublishAccepted, error)
	/*
	   PostFlowsActionsRevert reverts flow
	*/
	PostFlowsActionsRevert(ctx context.Context, params *PostFlowsActionsRevertParams) (*PostFlowsActionsRevertOK, error)
	/*
	   PostFlowsActionsUnlock unlocks flow
	   Allows for unlocking a flow in the case where there is no flow configuration available, and thus a check-in will not unlock the flow. The user must have Architect Admin permissions to perform this action.
	*/
	PostFlowsActionsUnlock(ctx context.Context, params *PostFlowsActionsUnlockParams) (*PostFlowsActionsUnlockOK, error)
	/*
	   PostFlowsDatatableExportJobs begins an export process for exporting all rows from a datatable
	   Create an export job for exporting rows. The caller can then poll for status of the export using the token returned in the response
	*/
	PostFlowsDatatableExportJobs(ctx context.Context, params *PostFlowsDatatableExportJobsParams) (*PostFlowsDatatableExportJobsOK, *PostFlowsDatatableExportJobsAccepted, error)
	/*
	   PostFlowsDatatableImportJobs begins an import process for importing rows into a datatable
	   Create an import job for importing rows. The caller can then poll for status of the import using the token returned in the response
	*/
	PostFlowsDatatableImportJobs(ctx context.Context, params *PostFlowsDatatableImportJobsParams) (*PostFlowsDatatableImportJobsOK, *PostFlowsDatatableImportJobsAccepted, error)
	/*
	   PostFlowsDatatableRows creates a new row entry for the datatable
	   Will add the passed in row entry to the datatable with the given datatableId after verifying it against the schema.  The DataTableRow should be a json-ized' stream of key -> value pairs
	   {
	       "Field1": "XYZZY",
	       "Field2": false,
	       "KEY": "27272"
	   }
	*/
	PostFlowsDatatableRows(ctx context.Context, params *PostFlowsDatatableRowsParams) (*PostFlowsDatatableRowsOK, error)
	/*
	   PostFlowsDatatables creates a new datatable with the specified json schema definition
	   This will create a new datatable with fields that match the property definitions in the JSON schema.  The schema's title field will be overridden by the name field in the DataTable object.  See also http://json-schema.org/
	*/
	PostFlowsDatatables(ctx context.Context, params *PostFlowsDatatablesParams) (*PostFlowsDatatablesOK, error)
	/*
	   PostFlowsExecutions launches an instance of a flow definition for flow types that support it such as the workflow type
	   The launch is asynchronous, it returns as soon as the flow starts. You can use the returned ID to query its status if you need.
	*/
	PostFlowsExecutions(ctx context.Context, params *PostFlowsExecutionsParams) (*PostFlowsExecutionsOK, error)
	/*
	   PostFlowsMilestones creates a flow milestone
	*/
	PostFlowsMilestones(ctx context.Context, params *PostFlowsMilestonesParams) (*PostFlowsMilestonesOK, error)
	/*
	   PostFlowsOutcomes creates a flow outcome
	   Asynchronous.  Notification topic: v2.flows.outcomes.{flowOutcomeId}
	*/
	PostFlowsOutcomes(ctx context.Context, params *PostFlowsOutcomesParams) (*PostFlowsOutcomesOK, error)
	/*
	   PutArchitectEmergencygroup updates a emergency group by ID
	*/
	PutArchitectEmergencygroup(ctx context.Context, params *PutArchitectEmergencygroupParams) (*PutArchitectEmergencygroupOK, error)
	/*
	   PutArchitectIvr updates an i v r config
	*/
	PutArchitectIvr(ctx context.Context, params *PutArchitectIvrParams) (*PutArchitectIvrOK, error)
	/*
	   PutArchitectPrompt updates specified user prompt
	*/
	PutArchitectPrompt(ctx context.Context, params *PutArchitectPromptParams) (*PutArchitectPromptOK, error)
	/*
	   PutArchitectPromptResource updates specified user prompt resource
	*/
	PutArchitectPromptResource(ctx context.Context, params *PutArchitectPromptResourceParams) (*PutArchitectPromptResourceOK, error)
	/*
	   PutArchitectSchedule updates schedule by ID
	*/
	PutArchitectSchedule(ctx context.Context, params *PutArchitectScheduleParams) (*PutArchitectScheduleOK, error)
	/*
	   PutArchitectSchedulegroup updates a schedule group by ID
	*/
	PutArchitectSchedulegroup(ctx context.Context, params *PutArchitectSchedulegroupParams) (*PutArchitectSchedulegroupOK, error)
	/*
	   PutArchitectSystempromptResource updates a system prompt resource override
	*/
	PutArchitectSystempromptResource(ctx context.Context, params *PutArchitectSystempromptResourceParams) (*PutArchitectSystempromptResourceOK, error)
	/*
	   PutFlow updates flow
	*/
	PutFlow(ctx context.Context, params *PutFlowParams) (*PutFlowOK, error)
	/*
	   PutFlowsDatatable updates a specific datatable by id
	   Updates a schema for a datatable with the given datatableId -updates allow only new fields to be added in the schema, no changes or removals of existing fields.
	*/
	PutFlowsDatatable(ctx context.Context, params *PutFlowsDatatableParams) (*PutFlowsDatatableOK, error)
	/*
	   PutFlowsDatatableRow updates a row entry
	   Updates a row with the given rowId (the value of the key field) to the new values.  The DataTableRow should be a json-ized' stream of key -> value pairs
	   {
	       "Field1": "XYZZY",
	       "Field2": false,
	       "KEY": "27272"
	   }
	*/
	PutFlowsDatatableRow(ctx context.Context, params *PutFlowsDatatableRowParams) (*PutFlowsDatatableRowOK, error)
	/*
	   PutFlowsMilestone updates a flow milestone
	*/
	PutFlowsMilestone(ctx context.Context, params *PutFlowsMilestoneParams) (*PutFlowsMilestoneOK, error)
	/*
	   PutFlowsOutcome updates a flow outcome
	   Updates a flow outcome.  Asynchronous.  Notification topic: v2.flowoutcomes.{flowoutcomeId}
	*/
	PutFlowsOutcome(ctx context.Context, params *PutFlowsOutcomeParams) (*PutFlowsOutcomeOK, error)
}

// New creates a new architect API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for architect API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteArchitectEmergencygroup deletes a emergency group by ID
*/
func (a *Client) DeleteArchitectEmergencygroup(ctx context.Context, params *DeleteArchitectEmergencygroupParams) (*DeleteArchitectEmergencygroupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteArchitectEmergencygroup",
		Method:             "DELETE",
		PathPattern:        "/api/v2/architect/emergencygroups/{emergencyGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteArchitectEmergencygroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteArchitectEmergencygroupOK), nil

}

/*
DeleteArchitectIvr deletes an i v r config
*/
func (a *Client) DeleteArchitectIvr(ctx context.Context, params *DeleteArchitectIvrParams) (*DeleteArchitectIvrOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteArchitectIvr",
		Method:             "DELETE",
		PathPattern:        "/api/v2/architect/ivrs/{ivrId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteArchitectIvrReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteArchitectIvrOK), nil

}

/*
DeleteArchitectPrompt deletes specified user prompt
*/
func (a *Client) DeleteArchitectPrompt(ctx context.Context, params *DeleteArchitectPromptParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteArchitectPrompt",
		Method:             "DELETE",
		PathPattern:        "/api/v2/architect/prompts/{promptId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteArchitectPromptReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteArchitectPromptResource deletes specified user prompt resource
*/
func (a *Client) DeleteArchitectPromptResource(ctx context.Context, params *DeleteArchitectPromptResourceParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteArchitectPromptResource",
		Method:             "DELETE",
		PathPattern:        "/api/v2/architect/prompts/{promptId}/resources/{languageCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteArchitectPromptResourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteArchitectPromptResourceAudio deletes specified user prompt resource audio
*/
func (a *Client) DeleteArchitectPromptResourceAudio(ctx context.Context, params *DeleteArchitectPromptResourceAudioParams) (*DeleteArchitectPromptResourceAudioNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteArchitectPromptResourceAudio",
		Method:             "DELETE",
		PathPattern:        "/api/v2/architect/prompts/{promptId}/resources/{languageCode}/audio",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteArchitectPromptResourceAudioReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteArchitectPromptResourceAudioNoContent), nil

}

/*
DeleteArchitectPrompts batches delete a list of prompts

Multiple IDs can be specified, in which case all specified prompts will be deleted.  Asynchronous.  Notification topic: v2.architect.prompts.{promptId}
*/
func (a *Client) DeleteArchitectPrompts(ctx context.Context, params *DeleteArchitectPromptsParams) (*DeleteArchitectPromptsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteArchitectPrompts",
		Method:             "DELETE",
		PathPattern:        "/api/v2/architect/prompts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteArchitectPromptsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteArchitectPromptsOK), nil

}

/*
DeleteArchitectSchedule deletes a schedule by id
*/
func (a *Client) DeleteArchitectSchedule(ctx context.Context, params *DeleteArchitectScheduleParams) (*DeleteArchitectScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteArchitectSchedule",
		Method:             "DELETE",
		PathPattern:        "/api/v2/architect/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteArchitectScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteArchitectScheduleOK), nil

}

/*
DeleteArchitectSchedulegroup deletes a schedule group by ID
*/
func (a *Client) DeleteArchitectSchedulegroup(ctx context.Context, params *DeleteArchitectSchedulegroupParams) (*DeleteArchitectSchedulegroupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteArchitectSchedulegroup",
		Method:             "DELETE",
		PathPattern:        "/api/v2/architect/schedulegroups/{scheduleGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteArchitectSchedulegroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteArchitectSchedulegroupOK), nil

}

/*
DeleteArchitectSystempromptResource deletes a system prompt resource override
*/
func (a *Client) DeleteArchitectSystempromptResource(ctx context.Context, params *DeleteArchitectSystempromptResourceParams) (*DeleteArchitectSystempromptResourceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteArchitectSystempromptResource",
		Method:             "DELETE",
		PathPattern:        "/api/v2/architect/systemprompts/{promptId}/resources/{languageCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteArchitectSystempromptResourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteArchitectSystempromptResourceOK), nil

}

/*
DeleteFlow deletes flow
*/
func (a *Client) DeleteFlow(ctx context.Context, params *DeleteFlowParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFlow",
		Method:             "DELETE",
		PathPattern:        "/api/v2/flows/{flowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFlowReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteFlows batches delete a list of flows

Multiple IDs can be specified, in which case all specified flows will be deleted.  Asynchronous.  Notification topic: v2.flows.{flowId}
*/
func (a *Client) DeleteFlows(ctx context.Context, params *DeleteFlowsParams) (*DeleteFlowsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFlows",
		Method:             "DELETE",
		PathPattern:        "/api/v2/flows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFlowsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFlowsOK), nil

}

/*
DeleteFlowsDatatable deletes a specific datatable by id

Deletes an entire datatable (including the schema and data) with a given datatableId
*/
func (a *Client) DeleteFlowsDatatable(ctx context.Context, params *DeleteFlowsDatatableParams) (*DeleteFlowsDatatableNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFlowsDatatable",
		Method:             "DELETE",
		PathPattern:        "/api/v2/flows/datatables/{datatableId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFlowsDatatableReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFlowsDatatableNoContent), nil

}

/*
DeleteFlowsDatatableRow deletes a row entry

Deletes a row with a given rowId (the value of the key field).
*/
func (a *Client) DeleteFlowsDatatableRow(ctx context.Context, params *DeleteFlowsDatatableRowParams) (*DeleteFlowsDatatableRowNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFlowsDatatableRow",
		Method:             "DELETE",
		PathPattern:        "/api/v2/flows/datatables/{datatableId}/rows/{rowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFlowsDatatableRowReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFlowsDatatableRowNoContent), nil

}

/*
DeleteFlowsMilestone deletes a flow milestone
*/
func (a *Client) DeleteFlowsMilestone(ctx context.Context, params *DeleteFlowsMilestoneParams) (*DeleteFlowsMilestoneOK, *DeleteFlowsMilestoneNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFlowsMilestone",
		Method:             "DELETE",
		PathPattern:        "/api/v2/flows/milestones/{milestoneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFlowsMilestoneReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteFlowsMilestoneOK:
		return value, nil, nil
	case *DeleteFlowsMilestoneNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetArchitectDependencytracking gets dependency tracking objects that have a given display name
*/
func (a *Client) GetArchitectDependencytracking(ctx context.Context, params *GetArchitectDependencytrackingParams) (*GetArchitectDependencytrackingOK, *GetArchitectDependencytrackingPartialContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectDependencytracking",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/dependencytracking",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectDependencytrackingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetArchitectDependencytrackingOK:
		return value, nil, nil
	case *GetArchitectDependencytrackingPartialContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetArchitectDependencytrackingBuild gets dependency tracking build status for an organization
*/
func (a *Client) GetArchitectDependencytrackingBuild(ctx context.Context, params *GetArchitectDependencytrackingBuildParams) (*GetArchitectDependencytrackingBuildOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectDependencytrackingBuild",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/dependencytracking/build",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectDependencytrackingBuildReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectDependencytrackingBuildOK), nil

}

/*
GetArchitectDependencytrackingConsumedresources gets resources that are consumed by a given dependency tracking object
*/
func (a *Client) GetArchitectDependencytrackingConsumedresources(ctx context.Context, params *GetArchitectDependencytrackingConsumedresourcesParams) (*GetArchitectDependencytrackingConsumedresourcesOK, *GetArchitectDependencytrackingConsumedresourcesPartialContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectDependencytrackingConsumedresources",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/dependencytracking/consumedresources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectDependencytrackingConsumedresourcesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetArchitectDependencytrackingConsumedresourcesOK:
		return value, nil, nil
	case *GetArchitectDependencytrackingConsumedresourcesPartialContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetArchitectDependencytrackingConsumingresources gets resources that consume a given dependency tracking object
*/
func (a *Client) GetArchitectDependencytrackingConsumingresources(ctx context.Context, params *GetArchitectDependencytrackingConsumingresourcesParams) (*GetArchitectDependencytrackingConsumingresourcesOK, *GetArchitectDependencytrackingConsumingresourcesPartialContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectDependencytrackingConsumingresources",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/dependencytracking/consumingresources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectDependencytrackingConsumingresourcesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetArchitectDependencytrackingConsumingresourcesOK:
		return value, nil, nil
	case *GetArchitectDependencytrackingConsumingresourcesPartialContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetArchitectDependencytrackingDeletedresourceconsumers gets dependency tracking objects that consume deleted resources
*/
func (a *Client) GetArchitectDependencytrackingDeletedresourceconsumers(ctx context.Context, params *GetArchitectDependencytrackingDeletedresourceconsumersParams) (*GetArchitectDependencytrackingDeletedresourceconsumersOK, *GetArchitectDependencytrackingDeletedresourceconsumersPartialContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectDependencytrackingDeletedresourceconsumers",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/dependencytracking/deletedresourceconsumers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectDependencytrackingDeletedresourceconsumersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetArchitectDependencytrackingDeletedresourceconsumersOK:
		return value, nil, nil
	case *GetArchitectDependencytrackingDeletedresourceconsumersPartialContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetArchitectDependencytrackingObject gets a dependency tracking object
*/
func (a *Client) GetArchitectDependencytrackingObject(ctx context.Context, params *GetArchitectDependencytrackingObjectParams) (*GetArchitectDependencytrackingObjectOK, *GetArchitectDependencytrackingObjectPartialContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectDependencytrackingObject",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/dependencytracking/object",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectDependencytrackingObjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetArchitectDependencytrackingObjectOK:
		return value, nil, nil
	case *GetArchitectDependencytrackingObjectPartialContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetArchitectDependencytrackingType gets a dependency tracking type
*/
func (a *Client) GetArchitectDependencytrackingType(ctx context.Context, params *GetArchitectDependencytrackingTypeParams) (*GetArchitectDependencytrackingTypeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectDependencytrackingType",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/dependencytracking/types/{typeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectDependencytrackingTypeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectDependencytrackingTypeOK), nil

}

/*
GetArchitectDependencytrackingTypes gets dependency tracking types
*/
func (a *Client) GetArchitectDependencytrackingTypes(ctx context.Context, params *GetArchitectDependencytrackingTypesParams) (*GetArchitectDependencytrackingTypesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectDependencytrackingTypes",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/dependencytracking/types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectDependencytrackingTypesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectDependencytrackingTypesOK), nil

}

/*
GetArchitectDependencytrackingUpdatedresourceconsumers gets dependency tracking objects that depend on updated resources
*/
func (a *Client) GetArchitectDependencytrackingUpdatedresourceconsumers(ctx context.Context, params *GetArchitectDependencytrackingUpdatedresourceconsumersParams) (*GetArchitectDependencytrackingUpdatedresourceconsumersOK, *GetArchitectDependencytrackingUpdatedresourceconsumersPartialContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectDependencytrackingUpdatedresourceconsumers",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/dependencytracking/updatedresourceconsumers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectDependencytrackingUpdatedresourceconsumersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetArchitectDependencytrackingUpdatedresourceconsumersOK:
		return value, nil, nil
	case *GetArchitectDependencytrackingUpdatedresourceconsumersPartialContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetArchitectEmergencygroup gets a emergency group by ID
*/
func (a *Client) GetArchitectEmergencygroup(ctx context.Context, params *GetArchitectEmergencygroupParams) (*GetArchitectEmergencygroupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectEmergencygroup",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/emergencygroups/{emergencyGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectEmergencygroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectEmergencygroupOK), nil

}

/*
GetArchitectEmergencygroups gets a list of emergency groups
*/
func (a *Client) GetArchitectEmergencygroups(ctx context.Context, params *GetArchitectEmergencygroupsParams) (*GetArchitectEmergencygroupsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectEmergencygroups",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/emergencygroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectEmergencygroupsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectEmergencygroupsOK), nil

}

/*
GetArchitectIvr gets an i v r config
*/
func (a *Client) GetArchitectIvr(ctx context.Context, params *GetArchitectIvrParams) (*GetArchitectIvrOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectIvr",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/ivrs/{ivrId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectIvrReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectIvrOK), nil

}

/*
GetArchitectIvrs gets i v r configs
*/
func (a *Client) GetArchitectIvrs(ctx context.Context, params *GetArchitectIvrsParams) (*GetArchitectIvrsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectIvrs",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/ivrs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectIvrsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectIvrsOK), nil

}

/*
GetArchitectPrompt gets specified user prompt
*/
func (a *Client) GetArchitectPrompt(ctx context.Context, params *GetArchitectPromptParams) (*GetArchitectPromptOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectPrompt",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/prompts/{promptId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectPromptReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectPromptOK), nil

}

/*
GetArchitectPromptHistoryHistoryID gets generated prompt history
*/
func (a *Client) GetArchitectPromptHistoryHistoryID(ctx context.Context, params *GetArchitectPromptHistoryHistoryIDParams) (*GetArchitectPromptHistoryHistoryIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectPromptHistoryHistoryId",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/prompts/{promptId}/history/{historyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectPromptHistoryHistoryIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectPromptHistoryHistoryIDOK), nil

}

/*
GetArchitectPromptResource gets specified user prompt resource
*/
func (a *Client) GetArchitectPromptResource(ctx context.Context, params *GetArchitectPromptResourceParams) (*GetArchitectPromptResourceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectPromptResource",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/prompts/{promptId}/resources/{languageCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectPromptResourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectPromptResourceOK), nil

}

/*
GetArchitectPromptResources gets a pageable list of user prompt resources

The returned list is pageable, and query parameters can be used for filtering.
*/
func (a *Client) GetArchitectPromptResources(ctx context.Context, params *GetArchitectPromptResourcesParams) (*GetArchitectPromptResourcesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectPromptResources",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/prompts/{promptId}/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectPromptResourcesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectPromptResourcesOK), nil

}

/*
GetArchitectPrompts gets a pageable list of user prompts

The returned list is pageable, and query parameters can be used for filtering.  Multiple names can be specified, in which case all matching prompts will be returned, and no other filters will be evaluated.
*/
func (a *Client) GetArchitectPrompts(ctx context.Context, params *GetArchitectPromptsParams) (*GetArchitectPromptsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectPrompts",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/prompts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectPromptsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectPromptsOK), nil

}

/*
GetArchitectSchedule gets a schedule by ID
*/
func (a *Client) GetArchitectSchedule(ctx context.Context, params *GetArchitectScheduleParams) (*GetArchitectScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectSchedule",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectScheduleOK), nil

}

/*
GetArchitectSchedulegroup gets a schedule group by ID
*/
func (a *Client) GetArchitectSchedulegroup(ctx context.Context, params *GetArchitectSchedulegroupParams) (*GetArchitectSchedulegroupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectSchedulegroup",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/schedulegroups/{scheduleGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectSchedulegroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectSchedulegroupOK), nil

}

/*
GetArchitectSchedulegroups gets a list of schedule groups
*/
func (a *Client) GetArchitectSchedulegroups(ctx context.Context, params *GetArchitectSchedulegroupsParams) (*GetArchitectSchedulegroupsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectSchedulegroups",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/schedulegroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectSchedulegroupsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectSchedulegroupsOK), nil

}

/*
GetArchitectSchedules gets a list of schedules
*/
func (a *Client) GetArchitectSchedules(ctx context.Context, params *GetArchitectSchedulesParams) (*GetArchitectSchedulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectSchedules",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectSchedulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectSchedulesOK), nil

}

/*
GetArchitectSystemprompt gets a system prompt
*/
func (a *Client) GetArchitectSystemprompt(ctx context.Context, params *GetArchitectSystempromptParams) (*GetArchitectSystempromptOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectSystemprompt",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/systemprompts/{promptId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectSystempromptReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectSystempromptOK), nil

}

/*
GetArchitectSystempromptHistoryHistoryID gets generated prompt history
*/
func (a *Client) GetArchitectSystempromptHistoryHistoryID(ctx context.Context, params *GetArchitectSystempromptHistoryHistoryIDParams) (*GetArchitectSystempromptHistoryHistoryIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectSystempromptHistoryHistoryId",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/systemprompts/{promptId}/history/{historyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectSystempromptHistoryHistoryIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectSystempromptHistoryHistoryIDOK), nil

}

/*
GetArchitectSystempromptResource gets a system prompt resource
*/
func (a *Client) GetArchitectSystempromptResource(ctx context.Context, params *GetArchitectSystempromptResourceParams) (*GetArchitectSystempromptResourceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectSystempromptResource",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/systemprompts/{promptId}/resources/{languageCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectSystempromptResourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectSystempromptResourceOK), nil

}

/*
GetArchitectSystempromptResources gets system prompt resources
*/
func (a *Client) GetArchitectSystempromptResources(ctx context.Context, params *GetArchitectSystempromptResourcesParams) (*GetArchitectSystempromptResourcesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectSystempromptResources",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/systemprompts/{promptId}/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectSystempromptResourcesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectSystempromptResourcesOK), nil

}

/*
GetArchitectSystemprompts gets system prompts
*/
func (a *Client) GetArchitectSystemprompts(ctx context.Context, params *GetArchitectSystempromptsParams) (*GetArchitectSystempromptsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchitectSystemprompts",
		Method:             "GET",
		PathPattern:        "/api/v2/architect/systemprompts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchitectSystempromptsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchitectSystempromptsOK), nil

}

/*
GetFlow gets flow
*/
func (a *Client) GetFlow(ctx context.Context, params *GetFlowParams) (*GetFlowOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlow",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/{flowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowOK), nil

}

/*
GetFlowHistoryHistoryID gets generated flow history
*/
func (a *Client) GetFlowHistoryHistoryID(ctx context.Context, params *GetFlowHistoryHistoryIDParams) (*GetFlowHistoryHistoryIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowHistoryHistoryId",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/{flowId}/history/{historyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowHistoryHistoryIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowHistoryHistoryIDOK), nil

}

/*
GetFlowLatestconfiguration gets the latest configuration for flow
*/
func (a *Client) GetFlowLatestconfiguration(ctx context.Context, params *GetFlowLatestconfigurationParams) (*GetFlowLatestconfigurationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowLatestconfiguration",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/{flowId}/latestconfiguration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowLatestconfigurationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowLatestconfigurationOK), nil

}

/*
GetFlowVersion gets flow version
*/
func (a *Client) GetFlowVersion(ctx context.Context, params *GetFlowVersionParams) (*GetFlowVersionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowVersion",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/{flowId}/versions/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowVersionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowVersionOK), nil

}

/*
GetFlowVersionConfiguration creates flow version configuration
*/
func (a *Client) GetFlowVersionConfiguration(ctx context.Context, params *GetFlowVersionConfigurationParams) (*GetFlowVersionConfigurationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowVersionConfiguration",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/{flowId}/versions/{versionId}/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowVersionConfigurationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowVersionConfigurationOK), nil

}

/*
GetFlowVersions gets flow version list
*/
func (a *Client) GetFlowVersions(ctx context.Context, params *GetFlowVersionsParams) (*GetFlowVersionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowVersions",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/{flowId}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowVersionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowVersionsOK), nil

}

/*
GetFlows gets a pageable list of flows filtered by query parameters

If one or more IDs are specified, the search will fetch flows that match the given ID(s) and not use any additional supplied query parameters in the search.
*/
func (a *Client) GetFlows(ctx context.Context, params *GetFlowsParams) (*GetFlowsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlows",
		Method:             "GET",
		PathPattern:        "/api/v2/flows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsOK), nil

}

/*
GetFlowsDatatable returns a specific datatable by id

Given a datatableId returns the datatable object and schema associated with it.
*/
func (a *Client) GetFlowsDatatable(ctx context.Context, params *GetFlowsDatatableParams) (*GetFlowsDatatableOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsDatatable",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/datatables/{datatableId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsDatatableReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsDatatableOK), nil

}

/*
GetFlowsDatatableExportJob returns the state information about an export job

Returns the state information about an export job.
*/
func (a *Client) GetFlowsDatatableExportJob(ctx context.Context, params *GetFlowsDatatableExportJobParams) (*GetFlowsDatatableExportJobOK, *GetFlowsDatatableExportJobAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsDatatableExportJob",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/datatables/{datatableId}/export/jobs/{exportJobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsDatatableExportJobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetFlowsDatatableExportJobOK:
		return value, nil, nil
	case *GetFlowsDatatableExportJobAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetFlowsDatatableImportJob returns the state information about an import job

Returns the state information about an import job.
*/
func (a *Client) GetFlowsDatatableImportJob(ctx context.Context, params *GetFlowsDatatableImportJobParams) (*GetFlowsDatatableImportJobOK, *GetFlowsDatatableImportJobAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsDatatableImportJob",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/datatables/{datatableId}/import/jobs/{importJobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsDatatableImportJobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetFlowsDatatableImportJobOK:
		return value, nil, nil
	case *GetFlowsDatatableImportJobAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetFlowsDatatableImportJobs gets all recent import jobs

Get all recent import jobs
*/
func (a *Client) GetFlowsDatatableImportJobs(ctx context.Context, params *GetFlowsDatatableImportJobsParams) (*GetFlowsDatatableImportJobsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsDatatableImportJobs",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/datatables/{datatableId}/import/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsDatatableImportJobsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsDatatableImportJobsOK), nil

}

/*
GetFlowsDatatableRow returns a specific row for the datatable

Given a datatableId and a rowId (the value of the key field) this will return the full row contents for that rowId.
*/
func (a *Client) GetFlowsDatatableRow(ctx context.Context, params *GetFlowsDatatableRowParams) (*GetFlowsDatatableRowOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsDatatableRow",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/datatables/{datatableId}/rows/{rowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsDatatableRowReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsDatatableRowOK), nil

}

/*
GetFlowsDatatableRows returns the rows for the datatable with the given id

Returns all of the rows for the datatable with the given datatableId.  By default this will just be a truncated list returning the key for each row. Set showBrief to false to return all of the row contents.
*/
func (a *Client) GetFlowsDatatableRows(ctx context.Context, params *GetFlowsDatatableRowsParams) (*GetFlowsDatatableRowsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsDatatableRows",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/datatables/{datatableId}/rows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsDatatableRowsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsDatatableRowsOK), nil

}

/*
GetFlowsDatatables retrieves a list of datatables for the org

Returns a metadata list of the datatables associated with this org, including datatableId, name and description.
*/
func (a *Client) GetFlowsDatatables(ctx context.Context, params *GetFlowsDatatablesParams) (*GetFlowsDatatablesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsDatatables",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/datatables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsDatatablesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsDatatablesOK), nil

}

/*
GetFlowsDatatablesDivisionview returns a specific datatable by id

Given a datatableId returns the datatable object and schema associated with it.
*/
func (a *Client) GetFlowsDatatablesDivisionview(ctx context.Context, params *GetFlowsDatatablesDivisionviewParams) (*GetFlowsDatatablesDivisionviewOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsDatatablesDivisionview",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/datatables/divisionviews/{datatableId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsDatatablesDivisionviewReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsDatatablesDivisionviewOK), nil

}

/*
GetFlowsDatatablesDivisionviews retrieves a list of datatables for the org

Returns a metadata list of the datatables associated with this org, including datatableId, name and description.
*/
func (a *Client) GetFlowsDatatablesDivisionviews(ctx context.Context, params *GetFlowsDatatablesDivisionviewsParams) (*GetFlowsDatatablesDivisionviewsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsDatatablesDivisionviews",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/datatables/divisionviews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsDatatablesDivisionviewsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsDatatablesDivisionviewsOK), nil

}

/*
GetFlowsDivisionviews gets a pageable list of basic flow information objects filterable by query parameters

This returns a simplified version of /flow consisting of name and type. If one or more IDs are specified, the search will fetch flows that match the given ID(s) and not use any additional supplied query parameters in the search.
*/
func (a *Client) GetFlowsDivisionviews(ctx context.Context, params *GetFlowsDivisionviewsParams) (*GetFlowsDivisionviewsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsDivisionviews",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/divisionviews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsDivisionviewsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsDivisionviewsOK), nil

}

/*
GetFlowsExecution gets a flow execution s details flow execution details are available for several days after the flow is started
*/
func (a *Client) GetFlowsExecution(ctx context.Context, params *GetFlowsExecutionParams) (*GetFlowsExecutionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsExecution",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/executions/{flowExecutionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsExecutionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsExecutionOK), nil

}

/*
GetFlowsMilestone gets a flow milestone

Returns a specified flow milestone
*/
func (a *Client) GetFlowsMilestone(ctx context.Context, params *GetFlowsMilestoneParams) (*GetFlowsMilestoneOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsMilestone",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/milestones/{milestoneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsMilestoneReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsMilestoneOK), nil

}

/*
GetFlowsMilestones gets a pageable list of flow milestones filtered by query parameters

Multiple IDs can be specified, in which case all matching flow milestones will be returned, and no other parameters will be evaluated.
*/
func (a *Client) GetFlowsMilestones(ctx context.Context, params *GetFlowsMilestonesParams) (*GetFlowsMilestonesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsMilestones",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/milestones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsMilestonesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsMilestonesOK), nil

}

/*
GetFlowsMilestonesDivisionviews gets a pageable list of basic flow milestone information objects filterable by query parameters

This returns flow milestones consisting of name and division. If one or more IDs are specified, the search will fetch flow milestones that match the given ID(s) and not use any additional supplied query parameters in the search.
*/
func (a *Client) GetFlowsMilestonesDivisionviews(ctx context.Context, params *GetFlowsMilestonesDivisionviewsParams) (*GetFlowsMilestonesDivisionviewsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsMilestonesDivisionviews",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/milestones/divisionviews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsMilestonesDivisionviewsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsMilestonesDivisionviewsOK), nil

}

/*
GetFlowsOutcome gets a flow outcome

Returns a specified flow outcome
*/
func (a *Client) GetFlowsOutcome(ctx context.Context, params *GetFlowsOutcomeParams) (*GetFlowsOutcomeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsOutcome",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/outcomes/{flowOutcomeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsOutcomeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsOutcomeOK), nil

}

/*
GetFlowsOutcomes gets a pageable list of flow outcomes filtered by query parameters

Multiple IDs can be specified, in which case all matching flow outcomes will be returned, and no other parameters will be evaluated.
*/
func (a *Client) GetFlowsOutcomes(ctx context.Context, params *GetFlowsOutcomesParams) (*GetFlowsOutcomesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsOutcomes",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/outcomes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsOutcomesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsOutcomesOK), nil

}

/*
GetFlowsOutcomesDivisionviews gets a pageable list of basic flow outcome information objects filterable by query parameters

This returns flow outcomes consisting of name and division. If one or more IDs are specified, the search will fetch flow outcomes that match the given ID(s) and not use any additional supplied query parameters in the search.
*/
func (a *Client) GetFlowsOutcomesDivisionviews(ctx context.Context, params *GetFlowsOutcomesDivisionviewsParams) (*GetFlowsOutcomesDivisionviewsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowsOutcomesDivisionviews",
		Method:             "GET",
		PathPattern:        "/api/v2/flows/outcomes/divisionviews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlowsOutcomesDivisionviewsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsOutcomesDivisionviewsOK), nil

}

/*
PostArchitectDependencytrackingBuild rebuilds dependency tracking data for an organization

Asynchronous.  Notification topic: v2.architect.dependencytracking.build
*/
func (a *Client) PostArchitectDependencytrackingBuild(ctx context.Context, params *PostArchitectDependencytrackingBuildParams) (*PostArchitectDependencytrackingBuildAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postArchitectDependencytrackingBuild",
		Method:             "POST",
		PathPattern:        "/api/v2/architect/dependencytracking/build",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostArchitectDependencytrackingBuildReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostArchitectDependencytrackingBuildAccepted), nil

}

/*
PostArchitectEmergencygroups creates a new emergency group
*/
func (a *Client) PostArchitectEmergencygroups(ctx context.Context, params *PostArchitectEmergencygroupsParams) (*PostArchitectEmergencygroupsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postArchitectEmergencygroups",
		Method:             "POST",
		PathPattern:        "/api/v2/architect/emergencygroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostArchitectEmergencygroupsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostArchitectEmergencygroupsOK), nil

}

/*
PostArchitectIvrs creates i v r config
*/
func (a *Client) PostArchitectIvrs(ctx context.Context, params *PostArchitectIvrsParams) (*PostArchitectIvrsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postArchitectIvrs",
		Method:             "POST",
		PathPattern:        "/api/v2/architect/ivrs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostArchitectIvrsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostArchitectIvrsOK), nil

}

/*
PostArchitectPromptHistory generates prompt history

Asynchronous.  Notification topic: v2.architect.prompts.{promptId}
*/
func (a *Client) PostArchitectPromptHistory(ctx context.Context, params *PostArchitectPromptHistoryParams) (*PostArchitectPromptHistoryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postArchitectPromptHistory",
		Method:             "POST",
		PathPattern:        "/api/v2/architect/prompts/{promptId}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostArchitectPromptHistoryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostArchitectPromptHistoryOK), nil

}

/*
PostArchitectPromptResources creates a new user prompt resource
*/
func (a *Client) PostArchitectPromptResources(ctx context.Context, params *PostArchitectPromptResourcesParams) (*PostArchitectPromptResourcesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postArchitectPromptResources",
		Method:             "POST",
		PathPattern:        "/api/v2/architect/prompts/{promptId}/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostArchitectPromptResourcesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostArchitectPromptResourcesOK), nil

}

/*
PostArchitectPrompts creates a new user prompt
*/
func (a *Client) PostArchitectPrompts(ctx context.Context, params *PostArchitectPromptsParams) (*PostArchitectPromptsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postArchitectPrompts",
		Method:             "POST",
		PathPattern:        "/api/v2/architect/prompts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostArchitectPromptsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostArchitectPromptsOK), nil

}

/*
PostArchitectSchedulegroups creates a new schedule group
*/
func (a *Client) PostArchitectSchedulegroups(ctx context.Context, params *PostArchitectSchedulegroupsParams) (*PostArchitectSchedulegroupsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postArchitectSchedulegroups",
		Method:             "POST",
		PathPattern:        "/api/v2/architect/schedulegroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostArchitectSchedulegroupsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostArchitectSchedulegroupsOK), nil

}

/*
PostArchitectSchedules creates a new schedule
*/
func (a *Client) PostArchitectSchedules(ctx context.Context, params *PostArchitectSchedulesParams) (*PostArchitectSchedulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postArchitectSchedules",
		Method:             "POST",
		PathPattern:        "/api/v2/architect/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostArchitectSchedulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostArchitectSchedulesOK), nil

}

/*
PostArchitectSystempromptHistory generates system prompt history

Asynchronous.  Notification topic: v2.architect.systemprompts.{systemPromptId}
*/
func (a *Client) PostArchitectSystempromptHistory(ctx context.Context, params *PostArchitectSystempromptHistoryParams) (*PostArchitectSystempromptHistoryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postArchitectSystempromptHistory",
		Method:             "POST",
		PathPattern:        "/api/v2/architect/systemprompts/{promptId}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostArchitectSystempromptHistoryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostArchitectSystempromptHistoryOK), nil

}

/*
PostArchitectSystempromptResources creates system prompt resource override
*/
func (a *Client) PostArchitectSystempromptResources(ctx context.Context, params *PostArchitectSystempromptResourcesParams) (*PostArchitectSystempromptResourcesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postArchitectSystempromptResources",
		Method:             "POST",
		PathPattern:        "/api/v2/architect/systemprompts/{promptId}/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostArchitectSystempromptResourcesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostArchitectSystempromptResourcesOK), nil

}

/*
PostFlowHistory generates flow history

Asynchronous.  Notification topic: v2.flows.{flowId}
*/
func (a *Client) PostFlowHistory(ctx context.Context, params *PostFlowHistoryParams) (*PostFlowHistoryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlowHistory",
		Method:             "POST",
		PathPattern:        "/api/v2/flows/{flowId}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowHistoryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFlowHistoryOK), nil

}

/*
PostFlowVersions creates flow version
*/
func (a *Client) PostFlowVersions(ctx context.Context, params *PostFlowVersionsParams) (*PostFlowVersionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlowVersions",
		Method:             "POST",
		PathPattern:        "/api/v2/flows/{flowId}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowVersionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFlowVersionsOK), nil

}

/*
PostFlows creates flow
*/
func (a *Client) PostFlows(ctx context.Context, params *PostFlowsParams) (*PostFlowsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlows",
		Method:             "POST",
		PathPattern:        "/api/v2/flows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFlowsOK), nil

}

/*
PostFlowsActionsCheckin checks in flow

Asynchronous.  Notification topic: v2.flows.{flowId}
*/
func (a *Client) PostFlowsActionsCheckin(ctx context.Context, params *PostFlowsActionsCheckinParams) (*PostFlowsActionsCheckinOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlowsActionsCheckin",
		Method:             "POST",
		PathPattern:        "/api/v2/flows/actions/checkin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowsActionsCheckinReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFlowsActionsCheckinOK), nil

}

/*
PostFlowsActionsCheckout checks out flow
*/
func (a *Client) PostFlowsActionsCheckout(ctx context.Context, params *PostFlowsActionsCheckoutParams) (*PostFlowsActionsCheckoutOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlowsActionsCheckout",
		Method:             "POST",
		PathPattern:        "/api/v2/flows/actions/checkout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowsActionsCheckoutReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFlowsActionsCheckoutOK), nil

}

/*
PostFlowsActionsDeactivate deactivates flow
*/
func (a *Client) PostFlowsActionsDeactivate(ctx context.Context, params *PostFlowsActionsDeactivateParams) (*PostFlowsActionsDeactivateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlowsActionsDeactivate",
		Method:             "POST",
		PathPattern:        "/api/v2/flows/actions/deactivate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowsActionsDeactivateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFlowsActionsDeactivateOK), nil

}

/*
PostFlowsActionsPublish publishes flow

Asynchronous.  Notification topic: v2.flows.{flowId}
*/
func (a *Client) PostFlowsActionsPublish(ctx context.Context, params *PostFlowsActionsPublishParams) (*PostFlowsActionsPublishOK, *PostFlowsActionsPublishAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlowsActionsPublish",
		Method:             "POST",
		PathPattern:        "/api/v2/flows/actions/publish",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowsActionsPublishReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostFlowsActionsPublishOK:
		return value, nil, nil
	case *PostFlowsActionsPublishAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostFlowsActionsRevert reverts flow
*/
func (a *Client) PostFlowsActionsRevert(ctx context.Context, params *PostFlowsActionsRevertParams) (*PostFlowsActionsRevertOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlowsActionsRevert",
		Method:             "POST",
		PathPattern:        "/api/v2/flows/actions/revert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowsActionsRevertReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFlowsActionsRevertOK), nil

}

/*
PostFlowsActionsUnlock unlocks flow

Allows for unlocking a flow in the case where there is no flow configuration available, and thus a check-in will not unlock the flow. The user must have Architect Admin permissions to perform this action.
*/
func (a *Client) PostFlowsActionsUnlock(ctx context.Context, params *PostFlowsActionsUnlockParams) (*PostFlowsActionsUnlockOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlowsActionsUnlock",
		Method:             "POST",
		PathPattern:        "/api/v2/flows/actions/unlock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowsActionsUnlockReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFlowsActionsUnlockOK), nil

}

/*
PostFlowsDatatableExportJobs begins an export process for exporting all rows from a datatable

Create an export job for exporting rows. The caller can then poll for status of the export using the token returned in the response
*/
func (a *Client) PostFlowsDatatableExportJobs(ctx context.Context, params *PostFlowsDatatableExportJobsParams) (*PostFlowsDatatableExportJobsOK, *PostFlowsDatatableExportJobsAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlowsDatatableExportJobs",
		Method:             "POST",
		PathPattern:        "/api/v2/flows/datatables/{datatableId}/export/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowsDatatableExportJobsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostFlowsDatatableExportJobsOK:
		return value, nil, nil
	case *PostFlowsDatatableExportJobsAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostFlowsDatatableImportJobs begins an import process for importing rows into a datatable

Create an import job for importing rows. The caller can then poll for status of the import using the token returned in the response
*/
func (a *Client) PostFlowsDatatableImportJobs(ctx context.Context, params *PostFlowsDatatableImportJobsParams) (*PostFlowsDatatableImportJobsOK, *PostFlowsDatatableImportJobsAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlowsDatatableImportJobs",
		Method:             "POST",
		PathPattern:        "/api/v2/flows/datatables/{datatableId}/import/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowsDatatableImportJobsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostFlowsDatatableImportJobsOK:
		return value, nil, nil
	case *PostFlowsDatatableImportJobsAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostFlowsDatatableRows creates a new row entry for the datatable

Will add the passed in row entry to the datatable with the given datatableId after verifying it against the schema.  The DataTableRow should be a json-ized' stream of key -> value pairs
{
    "Field1": "XYZZY",
    "Field2": false,
    "KEY": "27272"
}
*/
func (a *Client) PostFlowsDatatableRows(ctx context.Context, params *PostFlowsDatatableRowsParams) (*PostFlowsDatatableRowsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlowsDatatableRows",
		Method:             "POST",
		PathPattern:        "/api/v2/flows/datatables/{datatableId}/rows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowsDatatableRowsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFlowsDatatableRowsOK), nil

}

/*
PostFlowsDatatables creates a new datatable with the specified json schema definition

This will create a new datatable with fields that match the property definitions in the JSON schema.  The schema's title field will be overridden by the name field in the DataTable object.  See also http://json-schema.org/
*/
func (a *Client) PostFlowsDatatables(ctx context.Context, params *PostFlowsDatatablesParams) (*PostFlowsDatatablesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlowsDatatables",
		Method:             "POST",
		PathPattern:        "/api/v2/flows/datatables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowsDatatablesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFlowsDatatablesOK), nil

}

/*
PostFlowsExecutions launches an instance of a flow definition for flow types that support it such as the workflow type

The launch is asynchronous, it returns as soon as the flow starts. You can use the returned ID to query its status if you need.
*/
func (a *Client) PostFlowsExecutions(ctx context.Context, params *PostFlowsExecutionsParams) (*PostFlowsExecutionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlowsExecutions",
		Method:             "POST",
		PathPattern:        "/api/v2/flows/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowsExecutionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFlowsExecutionsOK), nil

}

/*
PostFlowsMilestones creates a flow milestone
*/
func (a *Client) PostFlowsMilestones(ctx context.Context, params *PostFlowsMilestonesParams) (*PostFlowsMilestonesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlowsMilestones",
		Method:             "POST",
		PathPattern:        "/api/v2/flows/milestones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowsMilestonesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFlowsMilestonesOK), nil

}

/*
PostFlowsOutcomes creates a flow outcome

Asynchronous.  Notification topic: v2.flows.outcomes.{flowOutcomeId}
*/
func (a *Client) PostFlowsOutcomes(ctx context.Context, params *PostFlowsOutcomesParams) (*PostFlowsOutcomesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFlowsOutcomes",
		Method:             "POST",
		PathPattern:        "/api/v2/flows/outcomes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlowsOutcomesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFlowsOutcomesOK), nil

}

/*
PutArchitectEmergencygroup updates a emergency group by ID
*/
func (a *Client) PutArchitectEmergencygroup(ctx context.Context, params *PutArchitectEmergencygroupParams) (*PutArchitectEmergencygroupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putArchitectEmergencygroup",
		Method:             "PUT",
		PathPattern:        "/api/v2/architect/emergencygroups/{emergencyGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutArchitectEmergencygroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutArchitectEmergencygroupOK), nil

}

/*
PutArchitectIvr updates an i v r config
*/
func (a *Client) PutArchitectIvr(ctx context.Context, params *PutArchitectIvrParams) (*PutArchitectIvrOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putArchitectIvr",
		Method:             "PUT",
		PathPattern:        "/api/v2/architect/ivrs/{ivrId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutArchitectIvrReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutArchitectIvrOK), nil

}

/*
PutArchitectPrompt updates specified user prompt
*/
func (a *Client) PutArchitectPrompt(ctx context.Context, params *PutArchitectPromptParams) (*PutArchitectPromptOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putArchitectPrompt",
		Method:             "PUT",
		PathPattern:        "/api/v2/architect/prompts/{promptId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutArchitectPromptReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutArchitectPromptOK), nil

}

/*
PutArchitectPromptResource updates specified user prompt resource
*/
func (a *Client) PutArchitectPromptResource(ctx context.Context, params *PutArchitectPromptResourceParams) (*PutArchitectPromptResourceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putArchitectPromptResource",
		Method:             "PUT",
		PathPattern:        "/api/v2/architect/prompts/{promptId}/resources/{languageCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutArchitectPromptResourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutArchitectPromptResourceOK), nil

}

/*
PutArchitectSchedule updates schedule by ID
*/
func (a *Client) PutArchitectSchedule(ctx context.Context, params *PutArchitectScheduleParams) (*PutArchitectScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putArchitectSchedule",
		Method:             "PUT",
		PathPattern:        "/api/v2/architect/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutArchitectScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutArchitectScheduleOK), nil

}

/*
PutArchitectSchedulegroup updates a schedule group by ID
*/
func (a *Client) PutArchitectSchedulegroup(ctx context.Context, params *PutArchitectSchedulegroupParams) (*PutArchitectSchedulegroupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putArchitectSchedulegroup",
		Method:             "PUT",
		PathPattern:        "/api/v2/architect/schedulegroups/{scheduleGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutArchitectSchedulegroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutArchitectSchedulegroupOK), nil

}

/*
PutArchitectSystempromptResource updates a system prompt resource override
*/
func (a *Client) PutArchitectSystempromptResource(ctx context.Context, params *PutArchitectSystempromptResourceParams) (*PutArchitectSystempromptResourceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putArchitectSystempromptResource",
		Method:             "PUT",
		PathPattern:        "/api/v2/architect/systemprompts/{promptId}/resources/{languageCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutArchitectSystempromptResourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutArchitectSystempromptResourceOK), nil

}

/*
PutFlow updates flow
*/
func (a *Client) PutFlow(ctx context.Context, params *PutFlowParams) (*PutFlowOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putFlow",
		Method:             "PUT",
		PathPattern:        "/api/v2/flows/{flowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutFlowReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutFlowOK), nil

}

/*
PutFlowsDatatable updates a specific datatable by id

Updates a schema for a datatable with the given datatableId -updates allow only new fields to be added in the schema, no changes or removals of existing fields.
*/
func (a *Client) PutFlowsDatatable(ctx context.Context, params *PutFlowsDatatableParams) (*PutFlowsDatatableOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putFlowsDatatable",
		Method:             "PUT",
		PathPattern:        "/api/v2/flows/datatables/{datatableId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutFlowsDatatableReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutFlowsDatatableOK), nil

}

/*
PutFlowsDatatableRow updates a row entry

Updates a row with the given rowId (the value of the key field) to the new values.  The DataTableRow should be a json-ized' stream of key -> value pairs
{
    "Field1": "XYZZY",
    "Field2": false,
    "KEY": "27272"
}
*/
func (a *Client) PutFlowsDatatableRow(ctx context.Context, params *PutFlowsDatatableRowParams) (*PutFlowsDatatableRowOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putFlowsDatatableRow",
		Method:             "PUT",
		PathPattern:        "/api/v2/flows/datatables/{datatableId}/rows/{rowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutFlowsDatatableRowReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutFlowsDatatableRowOK), nil

}

/*
PutFlowsMilestone updates a flow milestone
*/
func (a *Client) PutFlowsMilestone(ctx context.Context, params *PutFlowsMilestoneParams) (*PutFlowsMilestoneOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putFlowsMilestone",
		Method:             "PUT",
		PathPattern:        "/api/v2/flows/milestones/{milestoneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutFlowsMilestoneReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutFlowsMilestoneOK), nil

}

/*
PutFlowsOutcome updates a flow outcome

Updates a flow outcome.  Asynchronous.  Notification topic: v2.flowoutcomes.{flowoutcomeId}
*/
func (a *Client) PutFlowsOutcome(ctx context.Context, params *PutFlowsOutcomeParams) (*PutFlowsOutcomeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putFlowsOutcome",
		Method:             "PUT",
		PathPattern:        "/api/v2/flows/outcomes/{flowOutcomeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutFlowsOutcomeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutFlowsOutcomeOK), nil

}

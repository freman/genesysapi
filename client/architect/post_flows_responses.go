// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostFlowsReader is a Reader for the PostFlows structure.
type PostFlowsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostFlowsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostFlowsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostFlowsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostFlowsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostFlowsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostFlowsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewPostFlowsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostFlowsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostFlowsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostFlowsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostFlowsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostFlowsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostFlowsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostFlowsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostFlowsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostFlowsOK creates a PostFlowsOK with default headers values
func NewPostFlowsOK() *PostFlowsOK {
	return &PostFlowsOK{}
}

/*
PostFlowsOK describes a response with status code 200, with default header values.

successful operation
*/
type PostFlowsOK struct {
	Payload *models.Flow
}

// IsSuccess returns true when this post flows o k response has a 2xx status code
func (o *PostFlowsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post flows o k response has a 3xx status code
func (o *PostFlowsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flows o k response has a 4xx status code
func (o *PostFlowsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post flows o k response has a 5xx status code
func (o *PostFlowsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post flows o k response a status code equal to that given
func (o *PostFlowsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostFlowsOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsOK  %+v", 200, o.Payload)
}

func (o *PostFlowsOK) String() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsOK  %+v", 200, o.Payload)
}

func (o *PostFlowsOK) GetPayload() *models.Flow {
	return o.Payload
}

func (o *PostFlowsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Flow)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowsBadRequest creates a PostFlowsBadRequest with default headers values
func NewPostFlowsBadRequest() *PostFlowsBadRequest {
	return &PostFlowsBadRequest{}
}

/*
PostFlowsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostFlowsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flows bad request response has a 2xx status code
func (o *PostFlowsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flows bad request response has a 3xx status code
func (o *PostFlowsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flows bad request response has a 4xx status code
func (o *PostFlowsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flows bad request response has a 5xx status code
func (o *PostFlowsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post flows bad request response a status code equal to that given
func (o *PostFlowsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostFlowsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsBadRequest  %+v", 400, o.Payload)
}

func (o *PostFlowsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsBadRequest  %+v", 400, o.Payload)
}

func (o *PostFlowsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowsUnauthorized creates a PostFlowsUnauthorized with default headers values
func NewPostFlowsUnauthorized() *PostFlowsUnauthorized {
	return &PostFlowsUnauthorized{}
}

/*
PostFlowsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostFlowsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flows unauthorized response has a 2xx status code
func (o *PostFlowsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flows unauthorized response has a 3xx status code
func (o *PostFlowsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flows unauthorized response has a 4xx status code
func (o *PostFlowsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flows unauthorized response has a 5xx status code
func (o *PostFlowsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post flows unauthorized response a status code equal to that given
func (o *PostFlowsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostFlowsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostFlowsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostFlowsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowsForbidden creates a PostFlowsForbidden with default headers values
func NewPostFlowsForbidden() *PostFlowsForbidden {
	return &PostFlowsForbidden{}
}

/*
PostFlowsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostFlowsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flows forbidden response has a 2xx status code
func (o *PostFlowsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flows forbidden response has a 3xx status code
func (o *PostFlowsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flows forbidden response has a 4xx status code
func (o *PostFlowsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flows forbidden response has a 5xx status code
func (o *PostFlowsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post flows forbidden response a status code equal to that given
func (o *PostFlowsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostFlowsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsForbidden  %+v", 403, o.Payload)
}

func (o *PostFlowsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsForbidden  %+v", 403, o.Payload)
}

func (o *PostFlowsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowsNotFound creates a PostFlowsNotFound with default headers values
func NewPostFlowsNotFound() *PostFlowsNotFound {
	return &PostFlowsNotFound{}
}

/*
PostFlowsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostFlowsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flows not found response has a 2xx status code
func (o *PostFlowsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flows not found response has a 3xx status code
func (o *PostFlowsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flows not found response has a 4xx status code
func (o *PostFlowsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flows not found response has a 5xx status code
func (o *PostFlowsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post flows not found response a status code equal to that given
func (o *PostFlowsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostFlowsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsNotFound  %+v", 404, o.Payload)
}

func (o *PostFlowsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsNotFound  %+v", 404, o.Payload)
}

func (o *PostFlowsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowsMethodNotAllowed creates a PostFlowsMethodNotAllowed with default headers values
func NewPostFlowsMethodNotAllowed() *PostFlowsMethodNotAllowed {
	return &PostFlowsMethodNotAllowed{}
}

/*
PostFlowsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type PostFlowsMethodNotAllowed struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flows method not allowed response has a 2xx status code
func (o *PostFlowsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flows method not allowed response has a 3xx status code
func (o *PostFlowsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flows method not allowed response has a 4xx status code
func (o *PostFlowsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flows method not allowed response has a 5xx status code
func (o *PostFlowsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this post flows method not allowed response a status code equal to that given
func (o *PostFlowsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *PostFlowsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *PostFlowsMethodNotAllowed) String() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *PostFlowsMethodNotAllowed) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowsRequestTimeout creates a PostFlowsRequestTimeout with default headers values
func NewPostFlowsRequestTimeout() *PostFlowsRequestTimeout {
	return &PostFlowsRequestTimeout{}
}

/*
PostFlowsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostFlowsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flows request timeout response has a 2xx status code
func (o *PostFlowsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flows request timeout response has a 3xx status code
func (o *PostFlowsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flows request timeout response has a 4xx status code
func (o *PostFlowsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flows request timeout response has a 5xx status code
func (o *PostFlowsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post flows request timeout response a status code equal to that given
func (o *PostFlowsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostFlowsRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostFlowsRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostFlowsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowsConflict creates a PostFlowsConflict with default headers values
func NewPostFlowsConflict() *PostFlowsConflict {
	return &PostFlowsConflict{}
}

/*
PostFlowsConflict describes a response with status code 409, with default header values.

Conflict
*/
type PostFlowsConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flows conflict response has a 2xx status code
func (o *PostFlowsConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flows conflict response has a 3xx status code
func (o *PostFlowsConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flows conflict response has a 4xx status code
func (o *PostFlowsConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flows conflict response has a 5xx status code
func (o *PostFlowsConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post flows conflict response a status code equal to that given
func (o *PostFlowsConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PostFlowsConflict) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsConflict  %+v", 409, o.Payload)
}

func (o *PostFlowsConflict) String() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsConflict  %+v", 409, o.Payload)
}

func (o *PostFlowsConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowsRequestEntityTooLarge creates a PostFlowsRequestEntityTooLarge with default headers values
func NewPostFlowsRequestEntityTooLarge() *PostFlowsRequestEntityTooLarge {
	return &PostFlowsRequestEntityTooLarge{}
}

/*
PostFlowsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostFlowsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flows request entity too large response has a 2xx status code
func (o *PostFlowsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flows request entity too large response has a 3xx status code
func (o *PostFlowsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flows request entity too large response has a 4xx status code
func (o *PostFlowsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flows request entity too large response has a 5xx status code
func (o *PostFlowsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post flows request entity too large response a status code equal to that given
func (o *PostFlowsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostFlowsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostFlowsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostFlowsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowsUnsupportedMediaType creates a PostFlowsUnsupportedMediaType with default headers values
func NewPostFlowsUnsupportedMediaType() *PostFlowsUnsupportedMediaType {
	return &PostFlowsUnsupportedMediaType{}
}

/*
PostFlowsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostFlowsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flows unsupported media type response has a 2xx status code
func (o *PostFlowsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flows unsupported media type response has a 3xx status code
func (o *PostFlowsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flows unsupported media type response has a 4xx status code
func (o *PostFlowsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flows unsupported media type response has a 5xx status code
func (o *PostFlowsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post flows unsupported media type response a status code equal to that given
func (o *PostFlowsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostFlowsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostFlowsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostFlowsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowsTooManyRequests creates a PostFlowsTooManyRequests with default headers values
func NewPostFlowsTooManyRequests() *PostFlowsTooManyRequests {
	return &PostFlowsTooManyRequests{}
}

/*
PostFlowsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostFlowsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flows too many requests response has a 2xx status code
func (o *PostFlowsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flows too many requests response has a 3xx status code
func (o *PostFlowsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flows too many requests response has a 4xx status code
func (o *PostFlowsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post flows too many requests response has a 5xx status code
func (o *PostFlowsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post flows too many requests response a status code equal to that given
func (o *PostFlowsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostFlowsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostFlowsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostFlowsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowsInternalServerError creates a PostFlowsInternalServerError with default headers values
func NewPostFlowsInternalServerError() *PostFlowsInternalServerError {
	return &PostFlowsInternalServerError{}
}

/*
PostFlowsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostFlowsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flows internal server error response has a 2xx status code
func (o *PostFlowsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flows internal server error response has a 3xx status code
func (o *PostFlowsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flows internal server error response has a 4xx status code
func (o *PostFlowsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post flows internal server error response has a 5xx status code
func (o *PostFlowsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post flows internal server error response a status code equal to that given
func (o *PostFlowsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostFlowsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostFlowsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostFlowsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowsServiceUnavailable creates a PostFlowsServiceUnavailable with default headers values
func NewPostFlowsServiceUnavailable() *PostFlowsServiceUnavailable {
	return &PostFlowsServiceUnavailable{}
}

/*
PostFlowsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostFlowsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flows service unavailable response has a 2xx status code
func (o *PostFlowsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flows service unavailable response has a 3xx status code
func (o *PostFlowsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flows service unavailable response has a 4xx status code
func (o *PostFlowsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post flows service unavailable response has a 5xx status code
func (o *PostFlowsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post flows service unavailable response a status code equal to that given
func (o *PostFlowsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostFlowsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostFlowsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostFlowsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFlowsGatewayTimeout creates a PostFlowsGatewayTimeout with default headers values
func NewPostFlowsGatewayTimeout() *PostFlowsGatewayTimeout {
	return &PostFlowsGatewayTimeout{}
}

/*
PostFlowsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostFlowsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post flows gateway timeout response has a 2xx status code
func (o *PostFlowsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post flows gateway timeout response has a 3xx status code
func (o *PostFlowsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post flows gateway timeout response has a 4xx status code
func (o *PostFlowsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post flows gateway timeout response has a 5xx status code
func (o *PostFlowsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post flows gateway timeout response a status code equal to that given
func (o *PostFlowsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostFlowsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostFlowsGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/flows][%d] postFlowsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostFlowsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostFlowsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostFlowVersionsParams creates a new PostFlowVersionsParams object
// with the default values initialized.
func NewPostFlowVersionsParams() *PostFlowVersionsParams {
	var ()
	return &PostFlowVersionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostFlowVersionsParamsWithTimeout creates a new PostFlowVersionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostFlowVersionsParamsWithTimeout(timeout time.Duration) *PostFlowVersionsParams {
	var ()
	return &PostFlowVersionsParams{

		timeout: timeout,
	}
}

// NewPostFlowVersionsParamsWithContext creates a new PostFlowVersionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostFlowVersionsParamsWithContext(ctx context.Context) *PostFlowVersionsParams {
	var ()
	return &PostFlowVersionsParams{

		Context: ctx,
	}
}

// NewPostFlowVersionsParamsWithHTTPClient creates a new PostFlowVersionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostFlowVersionsParamsWithHTTPClient(client *http.Client) *PostFlowVersionsParams {
	var ()
	return &PostFlowVersionsParams{
		HTTPClient: client,
	}
}

/*PostFlowVersionsParams contains all the parameters to send to the API endpoint
for the post flow versions operation typically these are written to a http.Request
*/
type PostFlowVersionsParams struct {

	/*Body*/
	Body map[string]interface{}
	/*FlowID
	  Flow ID

	*/
	FlowID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post flow versions params
func (o *PostFlowVersionsParams) WithTimeout(timeout time.Duration) *PostFlowVersionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post flow versions params
func (o *PostFlowVersionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post flow versions params
func (o *PostFlowVersionsParams) WithContext(ctx context.Context) *PostFlowVersionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post flow versions params
func (o *PostFlowVersionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post flow versions params
func (o *PostFlowVersionsParams) WithHTTPClient(client *http.Client) *PostFlowVersionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post flow versions params
func (o *PostFlowVersionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post flow versions params
func (o *PostFlowVersionsParams) WithBody(body map[string]interface{}) *PostFlowVersionsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post flow versions params
func (o *PostFlowVersionsParams) SetBody(body map[string]interface{}) {
	o.Body = body
}

// WithFlowID adds the flowID to the post flow versions params
func (o *PostFlowVersionsParams) WithFlowID(flowID string) *PostFlowVersionsParams {
	o.SetFlowID(flowID)
	return o
}

// SetFlowID adds the flowId to the post flow versions params
func (o *PostFlowVersionsParams) SetFlowID(flowID string) {
	o.FlowID = flowID
}

// WriteToRequest writes these params to a swagger request
func (o *PostFlowVersionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param flowId
	if err := r.SetPathParam("flowId", o.FlowID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

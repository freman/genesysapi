// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetFlowVersionReader is a Reader for the GetFlowVersion structure.
type GetFlowVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFlowVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFlowVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetFlowVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetFlowVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetFlowVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFlowVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetFlowVersionRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetFlowVersionGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetFlowVersionRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetFlowVersionUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetFlowVersionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetFlowVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetFlowVersionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetFlowVersionGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetFlowVersionOK creates a GetFlowVersionOK with default headers values
func NewGetFlowVersionOK() *GetFlowVersionOK {
	return &GetFlowVersionOK{}
}

/*
GetFlowVersionOK describes a response with status code 200, with default header values.

successful operation
*/
type GetFlowVersionOK struct {
	Payload *models.FlowVersion
}

// IsSuccess returns true when this get flow version o k response has a 2xx status code
func (o *GetFlowVersionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get flow version o k response has a 3xx status code
func (o *GetFlowVersionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flow version o k response has a 4xx status code
func (o *GetFlowVersionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get flow version o k response has a 5xx status code
func (o *GetFlowVersionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get flow version o k response a status code equal to that given
func (o *GetFlowVersionOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetFlowVersionOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionOK  %+v", 200, o.Payload)
}

func (o *GetFlowVersionOK) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionOK  %+v", 200, o.Payload)
}

func (o *GetFlowVersionOK) GetPayload() *models.FlowVersion {
	return o.Payload
}

func (o *GetFlowVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FlowVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowVersionBadRequest creates a GetFlowVersionBadRequest with default headers values
func NewGetFlowVersionBadRequest() *GetFlowVersionBadRequest {
	return &GetFlowVersionBadRequest{}
}

/*
GetFlowVersionBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetFlowVersionBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flow version bad request response has a 2xx status code
func (o *GetFlowVersionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flow version bad request response has a 3xx status code
func (o *GetFlowVersionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flow version bad request response has a 4xx status code
func (o *GetFlowVersionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flow version bad request response has a 5xx status code
func (o *GetFlowVersionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get flow version bad request response a status code equal to that given
func (o *GetFlowVersionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetFlowVersionBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionBadRequest  %+v", 400, o.Payload)
}

func (o *GetFlowVersionBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionBadRequest  %+v", 400, o.Payload)
}

func (o *GetFlowVersionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowVersionUnauthorized creates a GetFlowVersionUnauthorized with default headers values
func NewGetFlowVersionUnauthorized() *GetFlowVersionUnauthorized {
	return &GetFlowVersionUnauthorized{}
}

/*
GetFlowVersionUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetFlowVersionUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flow version unauthorized response has a 2xx status code
func (o *GetFlowVersionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flow version unauthorized response has a 3xx status code
func (o *GetFlowVersionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flow version unauthorized response has a 4xx status code
func (o *GetFlowVersionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flow version unauthorized response has a 5xx status code
func (o *GetFlowVersionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get flow version unauthorized response a status code equal to that given
func (o *GetFlowVersionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetFlowVersionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetFlowVersionUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetFlowVersionUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowVersionForbidden creates a GetFlowVersionForbidden with default headers values
func NewGetFlowVersionForbidden() *GetFlowVersionForbidden {
	return &GetFlowVersionForbidden{}
}

/*
GetFlowVersionForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetFlowVersionForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flow version forbidden response has a 2xx status code
func (o *GetFlowVersionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flow version forbidden response has a 3xx status code
func (o *GetFlowVersionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flow version forbidden response has a 4xx status code
func (o *GetFlowVersionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flow version forbidden response has a 5xx status code
func (o *GetFlowVersionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get flow version forbidden response a status code equal to that given
func (o *GetFlowVersionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetFlowVersionForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionForbidden  %+v", 403, o.Payload)
}

func (o *GetFlowVersionForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionForbidden  %+v", 403, o.Payload)
}

func (o *GetFlowVersionForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowVersionNotFound creates a GetFlowVersionNotFound with default headers values
func NewGetFlowVersionNotFound() *GetFlowVersionNotFound {
	return &GetFlowVersionNotFound{}
}

/*
GetFlowVersionNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetFlowVersionNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flow version not found response has a 2xx status code
func (o *GetFlowVersionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flow version not found response has a 3xx status code
func (o *GetFlowVersionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flow version not found response has a 4xx status code
func (o *GetFlowVersionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flow version not found response has a 5xx status code
func (o *GetFlowVersionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get flow version not found response a status code equal to that given
func (o *GetFlowVersionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetFlowVersionNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionNotFound  %+v", 404, o.Payload)
}

func (o *GetFlowVersionNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionNotFound  %+v", 404, o.Payload)
}

func (o *GetFlowVersionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowVersionRequestTimeout creates a GetFlowVersionRequestTimeout with default headers values
func NewGetFlowVersionRequestTimeout() *GetFlowVersionRequestTimeout {
	return &GetFlowVersionRequestTimeout{}
}

/*
GetFlowVersionRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetFlowVersionRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flow version request timeout response has a 2xx status code
func (o *GetFlowVersionRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flow version request timeout response has a 3xx status code
func (o *GetFlowVersionRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flow version request timeout response has a 4xx status code
func (o *GetFlowVersionRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flow version request timeout response has a 5xx status code
func (o *GetFlowVersionRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get flow version request timeout response a status code equal to that given
func (o *GetFlowVersionRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetFlowVersionRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetFlowVersionRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetFlowVersionRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowVersionRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowVersionGone creates a GetFlowVersionGone with default headers values
func NewGetFlowVersionGone() *GetFlowVersionGone {
	return &GetFlowVersionGone{}
}

/*
GetFlowVersionGone describes a response with status code 410, with default header values.

Gone
*/
type GetFlowVersionGone struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flow version gone response has a 2xx status code
func (o *GetFlowVersionGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flow version gone response has a 3xx status code
func (o *GetFlowVersionGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flow version gone response has a 4xx status code
func (o *GetFlowVersionGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flow version gone response has a 5xx status code
func (o *GetFlowVersionGone) IsServerError() bool {
	return false
}

// IsCode returns true when this get flow version gone response a status code equal to that given
func (o *GetFlowVersionGone) IsCode(code int) bool {
	return code == 410
}

func (o *GetFlowVersionGone) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionGone  %+v", 410, o.Payload)
}

func (o *GetFlowVersionGone) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionGone  %+v", 410, o.Payload)
}

func (o *GetFlowVersionGone) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowVersionGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowVersionRequestEntityTooLarge creates a GetFlowVersionRequestEntityTooLarge with default headers values
func NewGetFlowVersionRequestEntityTooLarge() *GetFlowVersionRequestEntityTooLarge {
	return &GetFlowVersionRequestEntityTooLarge{}
}

/*
GetFlowVersionRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetFlowVersionRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flow version request entity too large response has a 2xx status code
func (o *GetFlowVersionRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flow version request entity too large response has a 3xx status code
func (o *GetFlowVersionRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flow version request entity too large response has a 4xx status code
func (o *GetFlowVersionRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flow version request entity too large response has a 5xx status code
func (o *GetFlowVersionRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get flow version request entity too large response a status code equal to that given
func (o *GetFlowVersionRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetFlowVersionRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetFlowVersionRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetFlowVersionRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowVersionRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowVersionUnsupportedMediaType creates a GetFlowVersionUnsupportedMediaType with default headers values
func NewGetFlowVersionUnsupportedMediaType() *GetFlowVersionUnsupportedMediaType {
	return &GetFlowVersionUnsupportedMediaType{}
}

/*
GetFlowVersionUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetFlowVersionUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flow version unsupported media type response has a 2xx status code
func (o *GetFlowVersionUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flow version unsupported media type response has a 3xx status code
func (o *GetFlowVersionUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flow version unsupported media type response has a 4xx status code
func (o *GetFlowVersionUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flow version unsupported media type response has a 5xx status code
func (o *GetFlowVersionUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get flow version unsupported media type response a status code equal to that given
func (o *GetFlowVersionUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetFlowVersionUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetFlowVersionUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetFlowVersionUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowVersionUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowVersionTooManyRequests creates a GetFlowVersionTooManyRequests with default headers values
func NewGetFlowVersionTooManyRequests() *GetFlowVersionTooManyRequests {
	return &GetFlowVersionTooManyRequests{}
}

/*
GetFlowVersionTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetFlowVersionTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flow version too many requests response has a 2xx status code
func (o *GetFlowVersionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flow version too many requests response has a 3xx status code
func (o *GetFlowVersionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flow version too many requests response has a 4xx status code
func (o *GetFlowVersionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get flow version too many requests response has a 5xx status code
func (o *GetFlowVersionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get flow version too many requests response a status code equal to that given
func (o *GetFlowVersionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetFlowVersionTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetFlowVersionTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetFlowVersionTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowVersionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowVersionInternalServerError creates a GetFlowVersionInternalServerError with default headers values
func NewGetFlowVersionInternalServerError() *GetFlowVersionInternalServerError {
	return &GetFlowVersionInternalServerError{}
}

/*
GetFlowVersionInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetFlowVersionInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flow version internal server error response has a 2xx status code
func (o *GetFlowVersionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flow version internal server error response has a 3xx status code
func (o *GetFlowVersionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flow version internal server error response has a 4xx status code
func (o *GetFlowVersionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get flow version internal server error response has a 5xx status code
func (o *GetFlowVersionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get flow version internal server error response a status code equal to that given
func (o *GetFlowVersionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetFlowVersionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetFlowVersionInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetFlowVersionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowVersionServiceUnavailable creates a GetFlowVersionServiceUnavailable with default headers values
func NewGetFlowVersionServiceUnavailable() *GetFlowVersionServiceUnavailable {
	return &GetFlowVersionServiceUnavailable{}
}

/*
GetFlowVersionServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetFlowVersionServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flow version service unavailable response has a 2xx status code
func (o *GetFlowVersionServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flow version service unavailable response has a 3xx status code
func (o *GetFlowVersionServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flow version service unavailable response has a 4xx status code
func (o *GetFlowVersionServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get flow version service unavailable response has a 5xx status code
func (o *GetFlowVersionServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get flow version service unavailable response a status code equal to that given
func (o *GetFlowVersionServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetFlowVersionServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetFlowVersionServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetFlowVersionServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowVersionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowVersionGatewayTimeout creates a GetFlowVersionGatewayTimeout with default headers values
func NewGetFlowVersionGatewayTimeout() *GetFlowVersionGatewayTimeout {
	return &GetFlowVersionGatewayTimeout{}
}

/*
GetFlowVersionGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetFlowVersionGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get flow version gateway timeout response has a 2xx status code
func (o *GetFlowVersionGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get flow version gateway timeout response has a 3xx status code
func (o *GetFlowVersionGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get flow version gateway timeout response has a 4xx status code
func (o *GetFlowVersionGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get flow version gateway timeout response has a 5xx status code
func (o *GetFlowVersionGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get flow version gateway timeout response a status code equal to that given
func (o *GetFlowVersionGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetFlowVersionGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetFlowVersionGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/flows/{flowId}/versions/{versionId}][%d] getFlowVersionGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetFlowVersionGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetFlowVersionGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

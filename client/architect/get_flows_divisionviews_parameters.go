// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFlowsDivisionviewsParams creates a new GetFlowsDivisionviewsParams object
// with the default values initialized.
func NewGetFlowsDivisionviewsParams() *GetFlowsDivisionviewsParams {
	var (
		includeSchemasDefault = bool(false)
		pageNumberDefault     = int32(1)
		pageSizeDefault       = int32(25)
		sortByDefault         = string("id")
		sortOrderDefault      = string("asc")
	)
	return &GetFlowsDivisionviewsParams{
		IncludeSchemas: &includeSchemasDefault,
		PageNumber:     &pageNumberDefault,
		PageSize:       &pageSizeDefault,
		SortBy:         &sortByDefault,
		SortOrder:      &sortOrderDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetFlowsDivisionviewsParamsWithTimeout creates a new GetFlowsDivisionviewsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetFlowsDivisionviewsParamsWithTimeout(timeout time.Duration) *GetFlowsDivisionviewsParams {
	var (
		includeSchemasDefault = bool(false)
		pageNumberDefault     = int32(1)
		pageSizeDefault       = int32(25)
		sortByDefault         = string("id")
		sortOrderDefault      = string("asc")
	)
	return &GetFlowsDivisionviewsParams{
		IncludeSchemas: &includeSchemasDefault,
		PageNumber:     &pageNumberDefault,
		PageSize:       &pageSizeDefault,
		SortBy:         &sortByDefault,
		SortOrder:      &sortOrderDefault,

		timeout: timeout,
	}
}

// NewGetFlowsDivisionviewsParamsWithContext creates a new GetFlowsDivisionviewsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetFlowsDivisionviewsParamsWithContext(ctx context.Context) *GetFlowsDivisionviewsParams {
	var (
		includeSchemasDefault = bool(false)
		pageNumberDefault     = int32(1)
		pageSizeDefault       = int32(25)
		sortByDefault         = string("id")
		sortOrderDefault      = string("asc")
	)
	return &GetFlowsDivisionviewsParams{
		IncludeSchemas: &includeSchemasDefault,
		PageNumber:     &pageNumberDefault,
		PageSize:       &pageSizeDefault,
		SortBy:         &sortByDefault,
		SortOrder:      &sortOrderDefault,

		Context: ctx,
	}
}

// NewGetFlowsDivisionviewsParamsWithHTTPClient creates a new GetFlowsDivisionviewsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetFlowsDivisionviewsParamsWithHTTPClient(client *http.Client) *GetFlowsDivisionviewsParams {
	var (
		includeSchemasDefault = bool(false)
		pageNumberDefault     = int32(1)
		pageSizeDefault       = int32(25)
		sortByDefault         = string("id")
		sortOrderDefault      = string("asc")
	)
	return &GetFlowsDivisionviewsParams{
		IncludeSchemas: &includeSchemasDefault,
		PageNumber:     &pageNumberDefault,
		PageSize:       &pageSizeDefault,
		SortBy:         &sortByDefault,
		SortOrder:      &sortOrderDefault,
		HTTPClient:     client,
	}
}

/*GetFlowsDivisionviewsParams contains all the parameters to send to the API endpoint
for the get flows divisionviews operation typically these are written to a http.Request
*/
type GetFlowsDivisionviewsParams struct {

	/*DivisionID
	  division ID(s)

	*/
	DivisionID []string
	/*ID
	  ID

	*/
	ID []string
	/*IncludeSchemas
	  Include variable schemas

	*/
	IncludeSchemas *bool
	/*Name
	  Name

	*/
	Name *string
	/*PageNumber
	  Page number

	*/
	PageNumber *int32
	/*PageSize
	  Page size

	*/
	PageSize *int32
	/*PublishVersionID
	  Publish version ID

	*/
	PublishVersionID *string
	/*PublishedAfter
	  Published after

	*/
	PublishedAfter *string
	/*PublishedBefore
	  Published before

	*/
	PublishedBefore *string
	/*SortBy
	  Sort by

	*/
	SortBy *string
	/*SortOrder
	  Sort order

	*/
	SortOrder *string
	/*Type
	  Type

	*/
	Type []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) WithTimeout(timeout time.Duration) *GetFlowsDivisionviewsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) WithContext(ctx context.Context) *GetFlowsDivisionviewsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) WithHTTPClient(client *http.Client) *GetFlowsDivisionviewsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDivisionID adds the divisionID to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) WithDivisionID(divisionID []string) *GetFlowsDivisionviewsParams {
	o.SetDivisionID(divisionID)
	return o
}

// SetDivisionID adds the divisionId to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) SetDivisionID(divisionID []string) {
	o.DivisionID = divisionID
}

// WithID adds the id to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) WithID(id []string) *GetFlowsDivisionviewsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) SetID(id []string) {
	o.ID = id
}

// WithIncludeSchemas adds the includeSchemas to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) WithIncludeSchemas(includeSchemas *bool) *GetFlowsDivisionviewsParams {
	o.SetIncludeSchemas(includeSchemas)
	return o
}

// SetIncludeSchemas adds the includeSchemas to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) SetIncludeSchemas(includeSchemas *bool) {
	o.IncludeSchemas = includeSchemas
}

// WithName adds the name to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) WithName(name *string) *GetFlowsDivisionviewsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) SetName(name *string) {
	o.Name = name
}

// WithPageNumber adds the pageNumber to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) WithPageNumber(pageNumber *int32) *GetFlowsDivisionviewsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) WithPageSize(pageSize *int32) *GetFlowsDivisionviewsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPublishVersionID adds the publishVersionID to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) WithPublishVersionID(publishVersionID *string) *GetFlowsDivisionviewsParams {
	o.SetPublishVersionID(publishVersionID)
	return o
}

// SetPublishVersionID adds the publishVersionId to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) SetPublishVersionID(publishVersionID *string) {
	o.PublishVersionID = publishVersionID
}

// WithPublishedAfter adds the publishedAfter to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) WithPublishedAfter(publishedAfter *string) *GetFlowsDivisionviewsParams {
	o.SetPublishedAfter(publishedAfter)
	return o
}

// SetPublishedAfter adds the publishedAfter to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) SetPublishedAfter(publishedAfter *string) {
	o.PublishedAfter = publishedAfter
}

// WithPublishedBefore adds the publishedBefore to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) WithPublishedBefore(publishedBefore *string) *GetFlowsDivisionviewsParams {
	o.SetPublishedBefore(publishedBefore)
	return o
}

// SetPublishedBefore adds the publishedBefore to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) SetPublishedBefore(publishedBefore *string) {
	o.PublishedBefore = publishedBefore
}

// WithSortBy adds the sortBy to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) WithSortBy(sortBy *string) *GetFlowsDivisionviewsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortOrder adds the sortOrder to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) WithSortOrder(sortOrder *string) *GetFlowsDivisionviewsParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithType adds the typeVar to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) WithType(typeVar []string) *GetFlowsDivisionviewsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get flows divisionviews params
func (o *GetFlowsDivisionviewsParams) SetType(typeVar []string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetFlowsDivisionviewsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesDivisionID := o.DivisionID

	joinedDivisionID := swag.JoinByFormat(valuesDivisionID, "multi")
	// query array param divisionId
	if err := r.SetQueryParam("divisionId", joinedDivisionID...); err != nil {
		return err
	}

	valuesID := o.ID

	joinedID := swag.JoinByFormat(valuesID, "multi")
	// query array param id
	if err := r.SetQueryParam("id", joinedID...); err != nil {
		return err
	}

	if o.IncludeSchemas != nil {

		// query param includeSchemas
		var qrIncludeSchemas bool
		if o.IncludeSchemas != nil {
			qrIncludeSchemas = *o.IncludeSchemas
		}
		qIncludeSchemas := swag.FormatBool(qrIncludeSchemas)
		if qIncludeSchemas != "" {
			if err := r.SetQueryParam("includeSchemas", qIncludeSchemas); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.PublishVersionID != nil {

		// query param publishVersionId
		var qrPublishVersionID string
		if o.PublishVersionID != nil {
			qrPublishVersionID = *o.PublishVersionID
		}
		qPublishVersionID := qrPublishVersionID
		if qPublishVersionID != "" {
			if err := r.SetQueryParam("publishVersionId", qPublishVersionID); err != nil {
				return err
			}
		}

	}

	if o.PublishedAfter != nil {

		// query param publishedAfter
		var qrPublishedAfter string
		if o.PublishedAfter != nil {
			qrPublishedAfter = *o.PublishedAfter
		}
		qPublishedAfter := qrPublishedAfter
		if qPublishedAfter != "" {
			if err := r.SetQueryParam("publishedAfter", qPublishedAfter); err != nil {
				return err
			}
		}

	}

	if o.PublishedBefore != nil {

		// query param publishedBefore
		var qrPublishedBefore string
		if o.PublishedBefore != nil {
			qrPublishedBefore = *o.PublishedBefore
		}
		qPublishedBefore := qrPublishedBefore
		if qPublishedBefore != "" {
			if err := r.SetQueryParam("publishedBefore", qPublishedBefore); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string
		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {
			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}

	}

	valuesType := o.Type

	joinedType := swag.JoinByFormat(valuesType, "multi")
	// query array param type
	if err := r.SetQueryParam("type", joinedType...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

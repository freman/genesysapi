// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteFlowReader is a Reader for the DeleteFlow structure.
type DeleteFlowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteFlowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewDeleteFlowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteFlowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteFlowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteFlowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteFlowMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteFlowRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteFlowConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewDeleteFlowGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteFlowRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteFlowUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteFlowTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteFlowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteFlowServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteFlowGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteFlowDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteFlowBadRequest creates a DeleteFlowBadRequest with default headers values
func NewDeleteFlowBadRequest() *DeleteFlowBadRequest {
	return &DeleteFlowBadRequest{}
}

/*
DeleteFlowBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteFlowBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flow bad request response has a 2xx status code
func (o *DeleteFlowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flow bad request response has a 3xx status code
func (o *DeleteFlowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flow bad request response has a 4xx status code
func (o *DeleteFlowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flow bad request response has a 5xx status code
func (o *DeleteFlowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flow bad request response a status code equal to that given
func (o *DeleteFlowBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteFlowBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteFlowBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteFlowBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowUnauthorized creates a DeleteFlowUnauthorized with default headers values
func NewDeleteFlowUnauthorized() *DeleteFlowUnauthorized {
	return &DeleteFlowUnauthorized{}
}

/*
DeleteFlowUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteFlowUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flow unauthorized response has a 2xx status code
func (o *DeleteFlowUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flow unauthorized response has a 3xx status code
func (o *DeleteFlowUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flow unauthorized response has a 4xx status code
func (o *DeleteFlowUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flow unauthorized response has a 5xx status code
func (o *DeleteFlowUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flow unauthorized response a status code equal to that given
func (o *DeleteFlowUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteFlowUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteFlowUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteFlowUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowForbidden creates a DeleteFlowForbidden with default headers values
func NewDeleteFlowForbidden() *DeleteFlowForbidden {
	return &DeleteFlowForbidden{}
}

/*
DeleteFlowForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type DeleteFlowForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flow forbidden response has a 2xx status code
func (o *DeleteFlowForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flow forbidden response has a 3xx status code
func (o *DeleteFlowForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flow forbidden response has a 4xx status code
func (o *DeleteFlowForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flow forbidden response has a 5xx status code
func (o *DeleteFlowForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flow forbidden response a status code equal to that given
func (o *DeleteFlowForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteFlowForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowForbidden  %+v", 403, o.Payload)
}

func (o *DeleteFlowForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowForbidden  %+v", 403, o.Payload)
}

func (o *DeleteFlowForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowNotFound creates a DeleteFlowNotFound with default headers values
func NewDeleteFlowNotFound() *DeleteFlowNotFound {
	return &DeleteFlowNotFound{}
}

/*
DeleteFlowNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type DeleteFlowNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flow not found response has a 2xx status code
func (o *DeleteFlowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flow not found response has a 3xx status code
func (o *DeleteFlowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flow not found response has a 4xx status code
func (o *DeleteFlowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flow not found response has a 5xx status code
func (o *DeleteFlowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flow not found response a status code equal to that given
func (o *DeleteFlowNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteFlowNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowNotFound  %+v", 404, o.Payload)
}

func (o *DeleteFlowNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowNotFound  %+v", 404, o.Payload)
}

func (o *DeleteFlowNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowMethodNotAllowed creates a DeleteFlowMethodNotAllowed with default headers values
func NewDeleteFlowMethodNotAllowed() *DeleteFlowMethodNotAllowed {
	return &DeleteFlowMethodNotAllowed{}
}

/*
DeleteFlowMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DeleteFlowMethodNotAllowed struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flow method not allowed response has a 2xx status code
func (o *DeleteFlowMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flow method not allowed response has a 3xx status code
func (o *DeleteFlowMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flow method not allowed response has a 4xx status code
func (o *DeleteFlowMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flow method not allowed response has a 5xx status code
func (o *DeleteFlowMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flow method not allowed response a status code equal to that given
func (o *DeleteFlowMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *DeleteFlowMethodNotAllowed) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *DeleteFlowMethodNotAllowed) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *DeleteFlowMethodNotAllowed) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowRequestTimeout creates a DeleteFlowRequestTimeout with default headers values
func NewDeleteFlowRequestTimeout() *DeleteFlowRequestTimeout {
	return &DeleteFlowRequestTimeout{}
}

/*
DeleteFlowRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteFlowRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flow request timeout response has a 2xx status code
func (o *DeleteFlowRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flow request timeout response has a 3xx status code
func (o *DeleteFlowRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flow request timeout response has a 4xx status code
func (o *DeleteFlowRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flow request timeout response has a 5xx status code
func (o *DeleteFlowRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flow request timeout response a status code equal to that given
func (o *DeleteFlowRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *DeleteFlowRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteFlowRequestTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteFlowRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowConflict creates a DeleteFlowConflict with default headers values
func NewDeleteFlowConflict() *DeleteFlowConflict {
	return &DeleteFlowConflict{}
}

/*
DeleteFlowConflict describes a response with status code 409, with default header values.

Conflict
*/
type DeleteFlowConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flow conflict response has a 2xx status code
func (o *DeleteFlowConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flow conflict response has a 3xx status code
func (o *DeleteFlowConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flow conflict response has a 4xx status code
func (o *DeleteFlowConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flow conflict response has a 5xx status code
func (o *DeleteFlowConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flow conflict response a status code equal to that given
func (o *DeleteFlowConflict) IsCode(code int) bool {
	return code == 409
}

func (o *DeleteFlowConflict) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowConflict  %+v", 409, o.Payload)
}

func (o *DeleteFlowConflict) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowConflict  %+v", 409, o.Payload)
}

func (o *DeleteFlowConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowGone creates a DeleteFlowGone with default headers values
func NewDeleteFlowGone() *DeleteFlowGone {
	return &DeleteFlowGone{}
}

/*
DeleteFlowGone describes a response with status code 410, with default header values.

Gone
*/
type DeleteFlowGone struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flow gone response has a 2xx status code
func (o *DeleteFlowGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flow gone response has a 3xx status code
func (o *DeleteFlowGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flow gone response has a 4xx status code
func (o *DeleteFlowGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flow gone response has a 5xx status code
func (o *DeleteFlowGone) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flow gone response a status code equal to that given
func (o *DeleteFlowGone) IsCode(code int) bool {
	return code == 410
}

func (o *DeleteFlowGone) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowGone  %+v", 410, o.Payload)
}

func (o *DeleteFlowGone) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowGone  %+v", 410, o.Payload)
}

func (o *DeleteFlowGone) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowRequestEntityTooLarge creates a DeleteFlowRequestEntityTooLarge with default headers values
func NewDeleteFlowRequestEntityTooLarge() *DeleteFlowRequestEntityTooLarge {
	return &DeleteFlowRequestEntityTooLarge{}
}

/*
DeleteFlowRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type DeleteFlowRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flow request entity too large response has a 2xx status code
func (o *DeleteFlowRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flow request entity too large response has a 3xx status code
func (o *DeleteFlowRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flow request entity too large response has a 4xx status code
func (o *DeleteFlowRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flow request entity too large response has a 5xx status code
func (o *DeleteFlowRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flow request entity too large response a status code equal to that given
func (o *DeleteFlowRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *DeleteFlowRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteFlowRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteFlowRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowUnsupportedMediaType creates a DeleteFlowUnsupportedMediaType with default headers values
func NewDeleteFlowUnsupportedMediaType() *DeleteFlowUnsupportedMediaType {
	return &DeleteFlowUnsupportedMediaType{}
}

/*
DeleteFlowUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteFlowUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flow unsupported media type response has a 2xx status code
func (o *DeleteFlowUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flow unsupported media type response has a 3xx status code
func (o *DeleteFlowUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flow unsupported media type response has a 4xx status code
func (o *DeleteFlowUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flow unsupported media type response has a 5xx status code
func (o *DeleteFlowUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flow unsupported media type response a status code equal to that given
func (o *DeleteFlowUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *DeleteFlowUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteFlowUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteFlowUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowTooManyRequests creates a DeleteFlowTooManyRequests with default headers values
func NewDeleteFlowTooManyRequests() *DeleteFlowTooManyRequests {
	return &DeleteFlowTooManyRequests{}
}

/*
DeleteFlowTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteFlowTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flow too many requests response has a 2xx status code
func (o *DeleteFlowTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flow too many requests response has a 3xx status code
func (o *DeleteFlowTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flow too many requests response has a 4xx status code
func (o *DeleteFlowTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete flow too many requests response has a 5xx status code
func (o *DeleteFlowTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete flow too many requests response a status code equal to that given
func (o *DeleteFlowTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeleteFlowTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteFlowTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteFlowTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowInternalServerError creates a DeleteFlowInternalServerError with default headers values
func NewDeleteFlowInternalServerError() *DeleteFlowInternalServerError {
	return &DeleteFlowInternalServerError{}
}

/*
DeleteFlowInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteFlowInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flow internal server error response has a 2xx status code
func (o *DeleteFlowInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flow internal server error response has a 3xx status code
func (o *DeleteFlowInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flow internal server error response has a 4xx status code
func (o *DeleteFlowInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete flow internal server error response has a 5xx status code
func (o *DeleteFlowInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete flow internal server error response a status code equal to that given
func (o *DeleteFlowInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteFlowInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteFlowInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteFlowInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowServiceUnavailable creates a DeleteFlowServiceUnavailable with default headers values
func NewDeleteFlowServiceUnavailable() *DeleteFlowServiceUnavailable {
	return &DeleteFlowServiceUnavailable{}
}

/*
DeleteFlowServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteFlowServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flow service unavailable response has a 2xx status code
func (o *DeleteFlowServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flow service unavailable response has a 3xx status code
func (o *DeleteFlowServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flow service unavailable response has a 4xx status code
func (o *DeleteFlowServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete flow service unavailable response has a 5xx status code
func (o *DeleteFlowServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete flow service unavailable response a status code equal to that given
func (o *DeleteFlowServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeleteFlowServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteFlowServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteFlowServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowGatewayTimeout creates a DeleteFlowGatewayTimeout with default headers values
func NewDeleteFlowGatewayTimeout() *DeleteFlowGatewayTimeout {
	return &DeleteFlowGatewayTimeout{}
}

/*
DeleteFlowGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type DeleteFlowGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete flow gateway timeout response has a 2xx status code
func (o *DeleteFlowGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete flow gateway timeout response has a 3xx status code
func (o *DeleteFlowGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete flow gateway timeout response has a 4xx status code
func (o *DeleteFlowGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete flow gateway timeout response has a 5xx status code
func (o *DeleteFlowGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this delete flow gateway timeout response a status code equal to that given
func (o *DeleteFlowGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *DeleteFlowGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteFlowGatewayTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlowGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteFlowGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteFlowGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFlowDefault creates a DeleteFlowDefault with default headers values
func NewDeleteFlowDefault(code int) *DeleteFlowDefault {
	return &DeleteFlowDefault{
		_statusCode: code,
	}
}

/*
DeleteFlowDefault describes a response with status code -1, with default header values.

successful operation
*/
type DeleteFlowDefault struct {
	_statusCode int
}

// Code gets the status code for the delete flow default response
func (o *DeleteFlowDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this delete flow default response has a 2xx status code
func (o *DeleteFlowDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete flow default response has a 3xx status code
func (o *DeleteFlowDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete flow default response has a 4xx status code
func (o *DeleteFlowDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete flow default response has a 5xx status code
func (o *DeleteFlowDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete flow default response a status code equal to that given
func (o *DeleteFlowDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *DeleteFlowDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlow default ", o._statusCode)
}

func (o *DeleteFlowDefault) String() string {
	return fmt.Sprintf("[DELETE /api/v2/flows/{flowId}][%d] deleteFlow default ", o._statusCode)
}

func (o *DeleteFlowDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

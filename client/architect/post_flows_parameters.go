// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// NewPostFlowsParams creates a new PostFlowsParams object
// with the default values initialized.
func NewPostFlowsParams() *PostFlowsParams {
	var ()
	return &PostFlowsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostFlowsParamsWithTimeout creates a new PostFlowsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostFlowsParamsWithTimeout(timeout time.Duration) *PostFlowsParams {
	var ()
	return &PostFlowsParams{

		timeout: timeout,
	}
}

// NewPostFlowsParamsWithContext creates a new PostFlowsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostFlowsParamsWithContext(ctx context.Context) *PostFlowsParams {
	var ()
	return &PostFlowsParams{

		Context: ctx,
	}
}

// NewPostFlowsParamsWithHTTPClient creates a new PostFlowsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostFlowsParamsWithHTTPClient(client *http.Client) *PostFlowsParams {
	var ()
	return &PostFlowsParams{
		HTTPClient: client,
	}
}

/*PostFlowsParams contains all the parameters to send to the API endpoint
for the post flows operation typically these are written to a http.Request
*/
type PostFlowsParams struct {

	/*Body*/
	Body *models.Flow
	/*Language
	  Language

	*/
	Language *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post flows params
func (o *PostFlowsParams) WithTimeout(timeout time.Duration) *PostFlowsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post flows params
func (o *PostFlowsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post flows params
func (o *PostFlowsParams) WithContext(ctx context.Context) *PostFlowsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post flows params
func (o *PostFlowsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post flows params
func (o *PostFlowsParams) WithHTTPClient(client *http.Client) *PostFlowsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post flows params
func (o *PostFlowsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post flows params
func (o *PostFlowsParams) WithBody(body *models.Flow) *PostFlowsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post flows params
func (o *PostFlowsParams) SetBody(body *models.Flow) {
	o.Body = body
}

// WithLanguage adds the language to the post flows params
func (o *PostFlowsParams) WithLanguage(language *string) *PostFlowsParams {
	o.SetLanguage(language)
	return o
}

// SetLanguage adds the language to the post flows params
func (o *PostFlowsParams) SetLanguage(language *string) {
	o.Language = language
}

// WriteToRequest writes these params to a swagger request
func (o *PostFlowsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Language != nil {

		// query param language
		var qrLanguage string
		if o.Language != nil {
			qrLanguage = *o.Language
		}
		qLanguage := qrLanguage
		if qLanguage != "" {
			if err := r.SetQueryParam("language", qLanguage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

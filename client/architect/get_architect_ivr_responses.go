// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetArchitectIvrReader is a Reader for the GetArchitectIvr structure.
type GetArchitectIvrReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetArchitectIvrReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetArchitectIvrOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetArchitectIvrBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetArchitectIvrUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetArchitectIvrForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetArchitectIvrNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetArchitectIvrRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetArchitectIvrRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetArchitectIvrUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetArchitectIvrTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetArchitectIvrInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetArchitectIvrServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetArchitectIvrGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetArchitectIvrOK creates a GetArchitectIvrOK with default headers values
func NewGetArchitectIvrOK() *GetArchitectIvrOK {
	return &GetArchitectIvrOK{}
}

/*
GetArchitectIvrOK describes a response with status code 200, with default header values.

successful operation
*/
type GetArchitectIvrOK struct {
	Payload *models.IVR
}

// IsSuccess returns true when this get architect ivr o k response has a 2xx status code
func (o *GetArchitectIvrOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get architect ivr o k response has a 3xx status code
func (o *GetArchitectIvrOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get architect ivr o k response has a 4xx status code
func (o *GetArchitectIvrOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get architect ivr o k response has a 5xx status code
func (o *GetArchitectIvrOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get architect ivr o k response a status code equal to that given
func (o *GetArchitectIvrOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetArchitectIvrOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrOK  %+v", 200, o.Payload)
}

func (o *GetArchitectIvrOK) String() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrOK  %+v", 200, o.Payload)
}

func (o *GetArchitectIvrOK) GetPayload() *models.IVR {
	return o.Payload
}

func (o *GetArchitectIvrOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IVR)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchitectIvrBadRequest creates a GetArchitectIvrBadRequest with default headers values
func NewGetArchitectIvrBadRequest() *GetArchitectIvrBadRequest {
	return &GetArchitectIvrBadRequest{}
}

/*
GetArchitectIvrBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetArchitectIvrBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get architect ivr bad request response has a 2xx status code
func (o *GetArchitectIvrBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get architect ivr bad request response has a 3xx status code
func (o *GetArchitectIvrBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get architect ivr bad request response has a 4xx status code
func (o *GetArchitectIvrBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get architect ivr bad request response has a 5xx status code
func (o *GetArchitectIvrBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get architect ivr bad request response a status code equal to that given
func (o *GetArchitectIvrBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetArchitectIvrBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrBadRequest  %+v", 400, o.Payload)
}

func (o *GetArchitectIvrBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrBadRequest  %+v", 400, o.Payload)
}

func (o *GetArchitectIvrBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetArchitectIvrBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchitectIvrUnauthorized creates a GetArchitectIvrUnauthorized with default headers values
func NewGetArchitectIvrUnauthorized() *GetArchitectIvrUnauthorized {
	return &GetArchitectIvrUnauthorized{}
}

/*
GetArchitectIvrUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetArchitectIvrUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get architect ivr unauthorized response has a 2xx status code
func (o *GetArchitectIvrUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get architect ivr unauthorized response has a 3xx status code
func (o *GetArchitectIvrUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get architect ivr unauthorized response has a 4xx status code
func (o *GetArchitectIvrUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get architect ivr unauthorized response has a 5xx status code
func (o *GetArchitectIvrUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get architect ivr unauthorized response a status code equal to that given
func (o *GetArchitectIvrUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetArchitectIvrUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrUnauthorized  %+v", 401, o.Payload)
}

func (o *GetArchitectIvrUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrUnauthorized  %+v", 401, o.Payload)
}

func (o *GetArchitectIvrUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetArchitectIvrUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchitectIvrForbidden creates a GetArchitectIvrForbidden with default headers values
func NewGetArchitectIvrForbidden() *GetArchitectIvrForbidden {
	return &GetArchitectIvrForbidden{}
}

/*
GetArchitectIvrForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetArchitectIvrForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get architect ivr forbidden response has a 2xx status code
func (o *GetArchitectIvrForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get architect ivr forbidden response has a 3xx status code
func (o *GetArchitectIvrForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get architect ivr forbidden response has a 4xx status code
func (o *GetArchitectIvrForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get architect ivr forbidden response has a 5xx status code
func (o *GetArchitectIvrForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get architect ivr forbidden response a status code equal to that given
func (o *GetArchitectIvrForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetArchitectIvrForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrForbidden  %+v", 403, o.Payload)
}

func (o *GetArchitectIvrForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrForbidden  %+v", 403, o.Payload)
}

func (o *GetArchitectIvrForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetArchitectIvrForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchitectIvrNotFound creates a GetArchitectIvrNotFound with default headers values
func NewGetArchitectIvrNotFound() *GetArchitectIvrNotFound {
	return &GetArchitectIvrNotFound{}
}

/*
GetArchitectIvrNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetArchitectIvrNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get architect ivr not found response has a 2xx status code
func (o *GetArchitectIvrNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get architect ivr not found response has a 3xx status code
func (o *GetArchitectIvrNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get architect ivr not found response has a 4xx status code
func (o *GetArchitectIvrNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get architect ivr not found response has a 5xx status code
func (o *GetArchitectIvrNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get architect ivr not found response a status code equal to that given
func (o *GetArchitectIvrNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetArchitectIvrNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrNotFound  %+v", 404, o.Payload)
}

func (o *GetArchitectIvrNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrNotFound  %+v", 404, o.Payload)
}

func (o *GetArchitectIvrNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetArchitectIvrNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchitectIvrRequestTimeout creates a GetArchitectIvrRequestTimeout with default headers values
func NewGetArchitectIvrRequestTimeout() *GetArchitectIvrRequestTimeout {
	return &GetArchitectIvrRequestTimeout{}
}

/*
GetArchitectIvrRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetArchitectIvrRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get architect ivr request timeout response has a 2xx status code
func (o *GetArchitectIvrRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get architect ivr request timeout response has a 3xx status code
func (o *GetArchitectIvrRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get architect ivr request timeout response has a 4xx status code
func (o *GetArchitectIvrRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get architect ivr request timeout response has a 5xx status code
func (o *GetArchitectIvrRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get architect ivr request timeout response a status code equal to that given
func (o *GetArchitectIvrRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetArchitectIvrRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetArchitectIvrRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetArchitectIvrRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetArchitectIvrRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchitectIvrRequestEntityTooLarge creates a GetArchitectIvrRequestEntityTooLarge with default headers values
func NewGetArchitectIvrRequestEntityTooLarge() *GetArchitectIvrRequestEntityTooLarge {
	return &GetArchitectIvrRequestEntityTooLarge{}
}

/*
GetArchitectIvrRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetArchitectIvrRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get architect ivr request entity too large response has a 2xx status code
func (o *GetArchitectIvrRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get architect ivr request entity too large response has a 3xx status code
func (o *GetArchitectIvrRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get architect ivr request entity too large response has a 4xx status code
func (o *GetArchitectIvrRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get architect ivr request entity too large response has a 5xx status code
func (o *GetArchitectIvrRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get architect ivr request entity too large response a status code equal to that given
func (o *GetArchitectIvrRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetArchitectIvrRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetArchitectIvrRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetArchitectIvrRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetArchitectIvrRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchitectIvrUnsupportedMediaType creates a GetArchitectIvrUnsupportedMediaType with default headers values
func NewGetArchitectIvrUnsupportedMediaType() *GetArchitectIvrUnsupportedMediaType {
	return &GetArchitectIvrUnsupportedMediaType{}
}

/*
GetArchitectIvrUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetArchitectIvrUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get architect ivr unsupported media type response has a 2xx status code
func (o *GetArchitectIvrUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get architect ivr unsupported media type response has a 3xx status code
func (o *GetArchitectIvrUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get architect ivr unsupported media type response has a 4xx status code
func (o *GetArchitectIvrUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get architect ivr unsupported media type response has a 5xx status code
func (o *GetArchitectIvrUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get architect ivr unsupported media type response a status code equal to that given
func (o *GetArchitectIvrUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetArchitectIvrUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetArchitectIvrUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetArchitectIvrUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetArchitectIvrUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchitectIvrTooManyRequests creates a GetArchitectIvrTooManyRequests with default headers values
func NewGetArchitectIvrTooManyRequests() *GetArchitectIvrTooManyRequests {
	return &GetArchitectIvrTooManyRequests{}
}

/*
GetArchitectIvrTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetArchitectIvrTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get architect ivr too many requests response has a 2xx status code
func (o *GetArchitectIvrTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get architect ivr too many requests response has a 3xx status code
func (o *GetArchitectIvrTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get architect ivr too many requests response has a 4xx status code
func (o *GetArchitectIvrTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get architect ivr too many requests response has a 5xx status code
func (o *GetArchitectIvrTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get architect ivr too many requests response a status code equal to that given
func (o *GetArchitectIvrTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetArchitectIvrTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetArchitectIvrTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetArchitectIvrTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetArchitectIvrTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchitectIvrInternalServerError creates a GetArchitectIvrInternalServerError with default headers values
func NewGetArchitectIvrInternalServerError() *GetArchitectIvrInternalServerError {
	return &GetArchitectIvrInternalServerError{}
}

/*
GetArchitectIvrInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetArchitectIvrInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get architect ivr internal server error response has a 2xx status code
func (o *GetArchitectIvrInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get architect ivr internal server error response has a 3xx status code
func (o *GetArchitectIvrInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get architect ivr internal server error response has a 4xx status code
func (o *GetArchitectIvrInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get architect ivr internal server error response has a 5xx status code
func (o *GetArchitectIvrInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get architect ivr internal server error response a status code equal to that given
func (o *GetArchitectIvrInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetArchitectIvrInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrInternalServerError  %+v", 500, o.Payload)
}

func (o *GetArchitectIvrInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrInternalServerError  %+v", 500, o.Payload)
}

func (o *GetArchitectIvrInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetArchitectIvrInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchitectIvrServiceUnavailable creates a GetArchitectIvrServiceUnavailable with default headers values
func NewGetArchitectIvrServiceUnavailable() *GetArchitectIvrServiceUnavailable {
	return &GetArchitectIvrServiceUnavailable{}
}

/*
GetArchitectIvrServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetArchitectIvrServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get architect ivr service unavailable response has a 2xx status code
func (o *GetArchitectIvrServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get architect ivr service unavailable response has a 3xx status code
func (o *GetArchitectIvrServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get architect ivr service unavailable response has a 4xx status code
func (o *GetArchitectIvrServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get architect ivr service unavailable response has a 5xx status code
func (o *GetArchitectIvrServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get architect ivr service unavailable response a status code equal to that given
func (o *GetArchitectIvrServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetArchitectIvrServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetArchitectIvrServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetArchitectIvrServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetArchitectIvrServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchitectIvrGatewayTimeout creates a GetArchitectIvrGatewayTimeout with default headers values
func NewGetArchitectIvrGatewayTimeout() *GetArchitectIvrGatewayTimeout {
	return &GetArchitectIvrGatewayTimeout{}
}

/*
GetArchitectIvrGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetArchitectIvrGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get architect ivr gateway timeout response has a 2xx status code
func (o *GetArchitectIvrGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get architect ivr gateway timeout response has a 3xx status code
func (o *GetArchitectIvrGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get architect ivr gateway timeout response has a 4xx status code
func (o *GetArchitectIvrGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get architect ivr gateway timeout response has a 5xx status code
func (o *GetArchitectIvrGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get architect ivr gateway timeout response a status code equal to that given
func (o *GetArchitectIvrGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetArchitectIvrGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetArchitectIvrGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/architect/ivrs/{ivrId}][%d] getArchitectIvrGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetArchitectIvrGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetArchitectIvrGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package architect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutFlowsDatatableRowReader is a Reader for the PutFlowsDatatableRow structure.
type PutFlowsDatatableRowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutFlowsDatatableRowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutFlowsDatatableRowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutFlowsDatatableRowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutFlowsDatatableRowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutFlowsDatatableRowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutFlowsDatatableRowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutFlowsDatatableRowRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutFlowsDatatableRowConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutFlowsDatatableRowRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutFlowsDatatableRowUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutFlowsDatatableRowTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutFlowsDatatableRowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutFlowsDatatableRowServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutFlowsDatatableRowGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutFlowsDatatableRowOK creates a PutFlowsDatatableRowOK with default headers values
func NewPutFlowsDatatableRowOK() *PutFlowsDatatableRowOK {
	return &PutFlowsDatatableRowOK{}
}

/*
PutFlowsDatatableRowOK describes a response with status code 200, with default header values.

successful operation
*/
type PutFlowsDatatableRowOK struct {
	Payload map[string]interface{}
}

// IsSuccess returns true when this put flows datatable row o k response has a 2xx status code
func (o *PutFlowsDatatableRowOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put flows datatable row o k response has a 3xx status code
func (o *PutFlowsDatatableRowOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put flows datatable row o k response has a 4xx status code
func (o *PutFlowsDatatableRowOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put flows datatable row o k response has a 5xx status code
func (o *PutFlowsDatatableRowOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put flows datatable row o k response a status code equal to that given
func (o *PutFlowsDatatableRowOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutFlowsDatatableRowOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowOK  %+v", 200, o.Payload)
}

func (o *PutFlowsDatatableRowOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowOK  %+v", 200, o.Payload)
}

func (o *PutFlowsDatatableRowOK) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *PutFlowsDatatableRowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFlowsDatatableRowBadRequest creates a PutFlowsDatatableRowBadRequest with default headers values
func NewPutFlowsDatatableRowBadRequest() *PutFlowsDatatableRowBadRequest {
	return &PutFlowsDatatableRowBadRequest{}
}

/*
PutFlowsDatatableRowBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutFlowsDatatableRowBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put flows datatable row bad request response has a 2xx status code
func (o *PutFlowsDatatableRowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put flows datatable row bad request response has a 3xx status code
func (o *PutFlowsDatatableRowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put flows datatable row bad request response has a 4xx status code
func (o *PutFlowsDatatableRowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put flows datatable row bad request response has a 5xx status code
func (o *PutFlowsDatatableRowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put flows datatable row bad request response a status code equal to that given
func (o *PutFlowsDatatableRowBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutFlowsDatatableRowBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowBadRequest  %+v", 400, o.Payload)
}

func (o *PutFlowsDatatableRowBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowBadRequest  %+v", 400, o.Payload)
}

func (o *PutFlowsDatatableRowBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFlowsDatatableRowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFlowsDatatableRowUnauthorized creates a PutFlowsDatatableRowUnauthorized with default headers values
func NewPutFlowsDatatableRowUnauthorized() *PutFlowsDatatableRowUnauthorized {
	return &PutFlowsDatatableRowUnauthorized{}
}

/*
PutFlowsDatatableRowUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutFlowsDatatableRowUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put flows datatable row unauthorized response has a 2xx status code
func (o *PutFlowsDatatableRowUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put flows datatable row unauthorized response has a 3xx status code
func (o *PutFlowsDatatableRowUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put flows datatable row unauthorized response has a 4xx status code
func (o *PutFlowsDatatableRowUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put flows datatable row unauthorized response has a 5xx status code
func (o *PutFlowsDatatableRowUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put flows datatable row unauthorized response a status code equal to that given
func (o *PutFlowsDatatableRowUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutFlowsDatatableRowUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowUnauthorized  %+v", 401, o.Payload)
}

func (o *PutFlowsDatatableRowUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowUnauthorized  %+v", 401, o.Payload)
}

func (o *PutFlowsDatatableRowUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFlowsDatatableRowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFlowsDatatableRowForbidden creates a PutFlowsDatatableRowForbidden with default headers values
func NewPutFlowsDatatableRowForbidden() *PutFlowsDatatableRowForbidden {
	return &PutFlowsDatatableRowForbidden{}
}

/*
PutFlowsDatatableRowForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutFlowsDatatableRowForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put flows datatable row forbidden response has a 2xx status code
func (o *PutFlowsDatatableRowForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put flows datatable row forbidden response has a 3xx status code
func (o *PutFlowsDatatableRowForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put flows datatable row forbidden response has a 4xx status code
func (o *PutFlowsDatatableRowForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put flows datatable row forbidden response has a 5xx status code
func (o *PutFlowsDatatableRowForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put flows datatable row forbidden response a status code equal to that given
func (o *PutFlowsDatatableRowForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutFlowsDatatableRowForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowForbidden  %+v", 403, o.Payload)
}

func (o *PutFlowsDatatableRowForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowForbidden  %+v", 403, o.Payload)
}

func (o *PutFlowsDatatableRowForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFlowsDatatableRowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFlowsDatatableRowNotFound creates a PutFlowsDatatableRowNotFound with default headers values
func NewPutFlowsDatatableRowNotFound() *PutFlowsDatatableRowNotFound {
	return &PutFlowsDatatableRowNotFound{}
}

/*
PutFlowsDatatableRowNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutFlowsDatatableRowNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put flows datatable row not found response has a 2xx status code
func (o *PutFlowsDatatableRowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put flows datatable row not found response has a 3xx status code
func (o *PutFlowsDatatableRowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put flows datatable row not found response has a 4xx status code
func (o *PutFlowsDatatableRowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put flows datatable row not found response has a 5xx status code
func (o *PutFlowsDatatableRowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put flows datatable row not found response a status code equal to that given
func (o *PutFlowsDatatableRowNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutFlowsDatatableRowNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowNotFound  %+v", 404, o.Payload)
}

func (o *PutFlowsDatatableRowNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowNotFound  %+v", 404, o.Payload)
}

func (o *PutFlowsDatatableRowNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFlowsDatatableRowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFlowsDatatableRowRequestTimeout creates a PutFlowsDatatableRowRequestTimeout with default headers values
func NewPutFlowsDatatableRowRequestTimeout() *PutFlowsDatatableRowRequestTimeout {
	return &PutFlowsDatatableRowRequestTimeout{}
}

/*
PutFlowsDatatableRowRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutFlowsDatatableRowRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put flows datatable row request timeout response has a 2xx status code
func (o *PutFlowsDatatableRowRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put flows datatable row request timeout response has a 3xx status code
func (o *PutFlowsDatatableRowRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put flows datatable row request timeout response has a 4xx status code
func (o *PutFlowsDatatableRowRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put flows datatable row request timeout response has a 5xx status code
func (o *PutFlowsDatatableRowRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put flows datatable row request timeout response a status code equal to that given
func (o *PutFlowsDatatableRowRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutFlowsDatatableRowRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutFlowsDatatableRowRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutFlowsDatatableRowRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFlowsDatatableRowRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFlowsDatatableRowConflict creates a PutFlowsDatatableRowConflict with default headers values
func NewPutFlowsDatatableRowConflict() *PutFlowsDatatableRowConflict {
	return &PutFlowsDatatableRowConflict{}
}

/*
PutFlowsDatatableRowConflict describes a response with status code 409, with default header values.

Conflict
*/
type PutFlowsDatatableRowConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put flows datatable row conflict response has a 2xx status code
func (o *PutFlowsDatatableRowConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put flows datatable row conflict response has a 3xx status code
func (o *PutFlowsDatatableRowConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put flows datatable row conflict response has a 4xx status code
func (o *PutFlowsDatatableRowConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this put flows datatable row conflict response has a 5xx status code
func (o *PutFlowsDatatableRowConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this put flows datatable row conflict response a status code equal to that given
func (o *PutFlowsDatatableRowConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PutFlowsDatatableRowConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowConflict  %+v", 409, o.Payload)
}

func (o *PutFlowsDatatableRowConflict) String() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowConflict  %+v", 409, o.Payload)
}

func (o *PutFlowsDatatableRowConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFlowsDatatableRowConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFlowsDatatableRowRequestEntityTooLarge creates a PutFlowsDatatableRowRequestEntityTooLarge with default headers values
func NewPutFlowsDatatableRowRequestEntityTooLarge() *PutFlowsDatatableRowRequestEntityTooLarge {
	return &PutFlowsDatatableRowRequestEntityTooLarge{}
}

/*
PutFlowsDatatableRowRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PutFlowsDatatableRowRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put flows datatable row request entity too large response has a 2xx status code
func (o *PutFlowsDatatableRowRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put flows datatable row request entity too large response has a 3xx status code
func (o *PutFlowsDatatableRowRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put flows datatable row request entity too large response has a 4xx status code
func (o *PutFlowsDatatableRowRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put flows datatable row request entity too large response has a 5xx status code
func (o *PutFlowsDatatableRowRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put flows datatable row request entity too large response a status code equal to that given
func (o *PutFlowsDatatableRowRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutFlowsDatatableRowRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutFlowsDatatableRowRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutFlowsDatatableRowRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFlowsDatatableRowRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFlowsDatatableRowUnsupportedMediaType creates a PutFlowsDatatableRowUnsupportedMediaType with default headers values
func NewPutFlowsDatatableRowUnsupportedMediaType() *PutFlowsDatatableRowUnsupportedMediaType {
	return &PutFlowsDatatableRowUnsupportedMediaType{}
}

/*
PutFlowsDatatableRowUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutFlowsDatatableRowUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put flows datatable row unsupported media type response has a 2xx status code
func (o *PutFlowsDatatableRowUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put flows datatable row unsupported media type response has a 3xx status code
func (o *PutFlowsDatatableRowUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put flows datatable row unsupported media type response has a 4xx status code
func (o *PutFlowsDatatableRowUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put flows datatable row unsupported media type response has a 5xx status code
func (o *PutFlowsDatatableRowUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put flows datatable row unsupported media type response a status code equal to that given
func (o *PutFlowsDatatableRowUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutFlowsDatatableRowUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutFlowsDatatableRowUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutFlowsDatatableRowUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFlowsDatatableRowUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFlowsDatatableRowTooManyRequests creates a PutFlowsDatatableRowTooManyRequests with default headers values
func NewPutFlowsDatatableRowTooManyRequests() *PutFlowsDatatableRowTooManyRequests {
	return &PutFlowsDatatableRowTooManyRequests{}
}

/*
PutFlowsDatatableRowTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutFlowsDatatableRowTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put flows datatable row too many requests response has a 2xx status code
func (o *PutFlowsDatatableRowTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put flows datatable row too many requests response has a 3xx status code
func (o *PutFlowsDatatableRowTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put flows datatable row too many requests response has a 4xx status code
func (o *PutFlowsDatatableRowTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put flows datatable row too many requests response has a 5xx status code
func (o *PutFlowsDatatableRowTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put flows datatable row too many requests response a status code equal to that given
func (o *PutFlowsDatatableRowTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutFlowsDatatableRowTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutFlowsDatatableRowTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutFlowsDatatableRowTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFlowsDatatableRowTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFlowsDatatableRowInternalServerError creates a PutFlowsDatatableRowInternalServerError with default headers values
func NewPutFlowsDatatableRowInternalServerError() *PutFlowsDatatableRowInternalServerError {
	return &PutFlowsDatatableRowInternalServerError{}
}

/*
PutFlowsDatatableRowInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutFlowsDatatableRowInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put flows datatable row internal server error response has a 2xx status code
func (o *PutFlowsDatatableRowInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put flows datatable row internal server error response has a 3xx status code
func (o *PutFlowsDatatableRowInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put flows datatable row internal server error response has a 4xx status code
func (o *PutFlowsDatatableRowInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put flows datatable row internal server error response has a 5xx status code
func (o *PutFlowsDatatableRowInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put flows datatable row internal server error response a status code equal to that given
func (o *PutFlowsDatatableRowInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutFlowsDatatableRowInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowInternalServerError  %+v", 500, o.Payload)
}

func (o *PutFlowsDatatableRowInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowInternalServerError  %+v", 500, o.Payload)
}

func (o *PutFlowsDatatableRowInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFlowsDatatableRowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFlowsDatatableRowServiceUnavailable creates a PutFlowsDatatableRowServiceUnavailable with default headers values
func NewPutFlowsDatatableRowServiceUnavailable() *PutFlowsDatatableRowServiceUnavailable {
	return &PutFlowsDatatableRowServiceUnavailable{}
}

/*
PutFlowsDatatableRowServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutFlowsDatatableRowServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put flows datatable row service unavailable response has a 2xx status code
func (o *PutFlowsDatatableRowServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put flows datatable row service unavailable response has a 3xx status code
func (o *PutFlowsDatatableRowServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put flows datatable row service unavailable response has a 4xx status code
func (o *PutFlowsDatatableRowServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put flows datatable row service unavailable response has a 5xx status code
func (o *PutFlowsDatatableRowServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put flows datatable row service unavailable response a status code equal to that given
func (o *PutFlowsDatatableRowServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutFlowsDatatableRowServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutFlowsDatatableRowServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutFlowsDatatableRowServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFlowsDatatableRowServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFlowsDatatableRowGatewayTimeout creates a PutFlowsDatatableRowGatewayTimeout with default headers values
func NewPutFlowsDatatableRowGatewayTimeout() *PutFlowsDatatableRowGatewayTimeout {
	return &PutFlowsDatatableRowGatewayTimeout{}
}

/*
PutFlowsDatatableRowGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutFlowsDatatableRowGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put flows datatable row gateway timeout response has a 2xx status code
func (o *PutFlowsDatatableRowGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put flows datatable row gateway timeout response has a 3xx status code
func (o *PutFlowsDatatableRowGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put flows datatable row gateway timeout response has a 4xx status code
func (o *PutFlowsDatatableRowGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put flows datatable row gateway timeout response has a 5xx status code
func (o *PutFlowsDatatableRowGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put flows datatable row gateway timeout response a status code equal to that given
func (o *PutFlowsDatatableRowGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutFlowsDatatableRowGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutFlowsDatatableRowGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}][%d] putFlowsDatatableRowGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutFlowsDatatableRowGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFlowsDatatableRowGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

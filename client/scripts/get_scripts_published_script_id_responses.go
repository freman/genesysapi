// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetScriptsPublishedScriptIDReader is a Reader for the GetScriptsPublishedScriptID structure.
type GetScriptsPublishedScriptIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScriptsPublishedScriptIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScriptsPublishedScriptIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetScriptsPublishedScriptIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetScriptsPublishedScriptIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScriptsPublishedScriptIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScriptsPublishedScriptIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetScriptsPublishedScriptIDRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetScriptsPublishedScriptIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetScriptsPublishedScriptIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScriptsPublishedScriptIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScriptsPublishedScriptIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetScriptsPublishedScriptIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetScriptsPublishedScriptIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScriptsPublishedScriptIDOK creates a GetScriptsPublishedScriptIDOK with default headers values
func NewGetScriptsPublishedScriptIDOK() *GetScriptsPublishedScriptIDOK {
	return &GetScriptsPublishedScriptIDOK{}
}

/*GetScriptsPublishedScriptIDOK handles this case with default header values.

successful operation
*/
type GetScriptsPublishedScriptIDOK struct {
	Payload *models.Script
}

func (o *GetScriptsPublishedScriptIDOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/published/{scriptId}][%d] getScriptsPublishedScriptIdOK  %+v", 200, o.Payload)
}

func (o *GetScriptsPublishedScriptIDOK) GetPayload() *models.Script {
	return o.Payload
}

func (o *GetScriptsPublishedScriptIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Script)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsPublishedScriptIDBadRequest creates a GetScriptsPublishedScriptIDBadRequest with default headers values
func NewGetScriptsPublishedScriptIDBadRequest() *GetScriptsPublishedScriptIDBadRequest {
	return &GetScriptsPublishedScriptIDBadRequest{}
}

/*GetScriptsPublishedScriptIDBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetScriptsPublishedScriptIDBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsPublishedScriptIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/published/{scriptId}][%d] getScriptsPublishedScriptIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetScriptsPublishedScriptIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsPublishedScriptIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsPublishedScriptIDUnauthorized creates a GetScriptsPublishedScriptIDUnauthorized with default headers values
func NewGetScriptsPublishedScriptIDUnauthorized() *GetScriptsPublishedScriptIDUnauthorized {
	return &GetScriptsPublishedScriptIDUnauthorized{}
}

/*GetScriptsPublishedScriptIDUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetScriptsPublishedScriptIDUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsPublishedScriptIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/published/{scriptId}][%d] getScriptsPublishedScriptIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScriptsPublishedScriptIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsPublishedScriptIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsPublishedScriptIDForbidden creates a GetScriptsPublishedScriptIDForbidden with default headers values
func NewGetScriptsPublishedScriptIDForbidden() *GetScriptsPublishedScriptIDForbidden {
	return &GetScriptsPublishedScriptIDForbidden{}
}

/*GetScriptsPublishedScriptIDForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetScriptsPublishedScriptIDForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsPublishedScriptIDForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/published/{scriptId}][%d] getScriptsPublishedScriptIdForbidden  %+v", 403, o.Payload)
}

func (o *GetScriptsPublishedScriptIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsPublishedScriptIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsPublishedScriptIDNotFound creates a GetScriptsPublishedScriptIDNotFound with default headers values
func NewGetScriptsPublishedScriptIDNotFound() *GetScriptsPublishedScriptIDNotFound {
	return &GetScriptsPublishedScriptIDNotFound{}
}

/*GetScriptsPublishedScriptIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetScriptsPublishedScriptIDNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsPublishedScriptIDNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/published/{scriptId}][%d] getScriptsPublishedScriptIdNotFound  %+v", 404, o.Payload)
}

func (o *GetScriptsPublishedScriptIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsPublishedScriptIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsPublishedScriptIDRequestTimeout creates a GetScriptsPublishedScriptIDRequestTimeout with default headers values
func NewGetScriptsPublishedScriptIDRequestTimeout() *GetScriptsPublishedScriptIDRequestTimeout {
	return &GetScriptsPublishedScriptIDRequestTimeout{}
}

/*GetScriptsPublishedScriptIDRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetScriptsPublishedScriptIDRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsPublishedScriptIDRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/published/{scriptId}][%d] getScriptsPublishedScriptIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScriptsPublishedScriptIDRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsPublishedScriptIDRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsPublishedScriptIDRequestEntityTooLarge creates a GetScriptsPublishedScriptIDRequestEntityTooLarge with default headers values
func NewGetScriptsPublishedScriptIDRequestEntityTooLarge() *GetScriptsPublishedScriptIDRequestEntityTooLarge {
	return &GetScriptsPublishedScriptIDRequestEntityTooLarge{}
}

/*GetScriptsPublishedScriptIDRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetScriptsPublishedScriptIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsPublishedScriptIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/published/{scriptId}][%d] getScriptsPublishedScriptIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScriptsPublishedScriptIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsPublishedScriptIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsPublishedScriptIDUnsupportedMediaType creates a GetScriptsPublishedScriptIDUnsupportedMediaType with default headers values
func NewGetScriptsPublishedScriptIDUnsupportedMediaType() *GetScriptsPublishedScriptIDUnsupportedMediaType {
	return &GetScriptsPublishedScriptIDUnsupportedMediaType{}
}

/*GetScriptsPublishedScriptIDUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetScriptsPublishedScriptIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsPublishedScriptIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/published/{scriptId}][%d] getScriptsPublishedScriptIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScriptsPublishedScriptIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsPublishedScriptIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsPublishedScriptIDTooManyRequests creates a GetScriptsPublishedScriptIDTooManyRequests with default headers values
func NewGetScriptsPublishedScriptIDTooManyRequests() *GetScriptsPublishedScriptIDTooManyRequests {
	return &GetScriptsPublishedScriptIDTooManyRequests{}
}

/*GetScriptsPublishedScriptIDTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetScriptsPublishedScriptIDTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsPublishedScriptIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/published/{scriptId}][%d] getScriptsPublishedScriptIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScriptsPublishedScriptIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsPublishedScriptIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsPublishedScriptIDInternalServerError creates a GetScriptsPublishedScriptIDInternalServerError with default headers values
func NewGetScriptsPublishedScriptIDInternalServerError() *GetScriptsPublishedScriptIDInternalServerError {
	return &GetScriptsPublishedScriptIDInternalServerError{}
}

/*GetScriptsPublishedScriptIDInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetScriptsPublishedScriptIDInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsPublishedScriptIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/published/{scriptId}][%d] getScriptsPublishedScriptIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScriptsPublishedScriptIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsPublishedScriptIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsPublishedScriptIDServiceUnavailable creates a GetScriptsPublishedScriptIDServiceUnavailable with default headers values
func NewGetScriptsPublishedScriptIDServiceUnavailable() *GetScriptsPublishedScriptIDServiceUnavailable {
	return &GetScriptsPublishedScriptIDServiceUnavailable{}
}

/*GetScriptsPublishedScriptIDServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetScriptsPublishedScriptIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsPublishedScriptIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/published/{scriptId}][%d] getScriptsPublishedScriptIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScriptsPublishedScriptIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsPublishedScriptIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsPublishedScriptIDGatewayTimeout creates a GetScriptsPublishedScriptIDGatewayTimeout with default headers values
func NewGetScriptsPublishedScriptIDGatewayTimeout() *GetScriptsPublishedScriptIDGatewayTimeout {
	return &GetScriptsPublishedScriptIDGatewayTimeout{}
}

/*GetScriptsPublishedScriptIDGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetScriptsPublishedScriptIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsPublishedScriptIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/published/{scriptId}][%d] getScriptsPublishedScriptIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScriptsPublishedScriptIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsPublishedScriptIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetScriptReader is a Reader for the GetScript structure.
type GetScriptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScriptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScriptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetScriptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetScriptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScriptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScriptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetScriptRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetScriptRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetScriptUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScriptTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScriptInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetScriptServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetScriptGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScriptOK creates a GetScriptOK with default headers values
func NewGetScriptOK() *GetScriptOK {
	return &GetScriptOK{}
}

/*
GetScriptOK describes a response with status code 200, with default header values.

successful operation
*/
type GetScriptOK struct {
	Payload *models.Script
}

// IsSuccess returns true when this get script o k response has a 2xx status code
func (o *GetScriptOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get script o k response has a 3xx status code
func (o *GetScriptOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script o k response has a 4xx status code
func (o *GetScriptOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get script o k response has a 5xx status code
func (o *GetScriptOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get script o k response a status code equal to that given
func (o *GetScriptOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetScriptOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptOK  %+v", 200, o.Payload)
}

func (o *GetScriptOK) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptOK  %+v", 200, o.Payload)
}

func (o *GetScriptOK) GetPayload() *models.Script {
	return o.Payload
}

func (o *GetScriptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Script)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptBadRequest creates a GetScriptBadRequest with default headers values
func NewGetScriptBadRequest() *GetScriptBadRequest {
	return &GetScriptBadRequest{}
}

/*
GetScriptBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetScriptBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get script bad request response has a 2xx status code
func (o *GetScriptBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get script bad request response has a 3xx status code
func (o *GetScriptBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script bad request response has a 4xx status code
func (o *GetScriptBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get script bad request response has a 5xx status code
func (o *GetScriptBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get script bad request response a status code equal to that given
func (o *GetScriptBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetScriptBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptBadRequest  %+v", 400, o.Payload)
}

func (o *GetScriptBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptBadRequest  %+v", 400, o.Payload)
}

func (o *GetScriptBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptUnauthorized creates a GetScriptUnauthorized with default headers values
func NewGetScriptUnauthorized() *GetScriptUnauthorized {
	return &GetScriptUnauthorized{}
}

/*
GetScriptUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetScriptUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get script unauthorized response has a 2xx status code
func (o *GetScriptUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get script unauthorized response has a 3xx status code
func (o *GetScriptUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script unauthorized response has a 4xx status code
func (o *GetScriptUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get script unauthorized response has a 5xx status code
func (o *GetScriptUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get script unauthorized response a status code equal to that given
func (o *GetScriptUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetScriptUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScriptUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScriptUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptForbidden creates a GetScriptForbidden with default headers values
func NewGetScriptForbidden() *GetScriptForbidden {
	return &GetScriptForbidden{}
}

/*
GetScriptForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetScriptForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get script forbidden response has a 2xx status code
func (o *GetScriptForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get script forbidden response has a 3xx status code
func (o *GetScriptForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script forbidden response has a 4xx status code
func (o *GetScriptForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get script forbidden response has a 5xx status code
func (o *GetScriptForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get script forbidden response a status code equal to that given
func (o *GetScriptForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetScriptForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptForbidden  %+v", 403, o.Payload)
}

func (o *GetScriptForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptForbidden  %+v", 403, o.Payload)
}

func (o *GetScriptForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptNotFound creates a GetScriptNotFound with default headers values
func NewGetScriptNotFound() *GetScriptNotFound {
	return &GetScriptNotFound{}
}

/*
GetScriptNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetScriptNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get script not found response has a 2xx status code
func (o *GetScriptNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get script not found response has a 3xx status code
func (o *GetScriptNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script not found response has a 4xx status code
func (o *GetScriptNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get script not found response has a 5xx status code
func (o *GetScriptNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get script not found response a status code equal to that given
func (o *GetScriptNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetScriptNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptNotFound  %+v", 404, o.Payload)
}

func (o *GetScriptNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptNotFound  %+v", 404, o.Payload)
}

func (o *GetScriptNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptRequestTimeout creates a GetScriptRequestTimeout with default headers values
func NewGetScriptRequestTimeout() *GetScriptRequestTimeout {
	return &GetScriptRequestTimeout{}
}

/*
GetScriptRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetScriptRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get script request timeout response has a 2xx status code
func (o *GetScriptRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get script request timeout response has a 3xx status code
func (o *GetScriptRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script request timeout response has a 4xx status code
func (o *GetScriptRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get script request timeout response has a 5xx status code
func (o *GetScriptRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get script request timeout response a status code equal to that given
func (o *GetScriptRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetScriptRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScriptRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScriptRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptRequestEntityTooLarge creates a GetScriptRequestEntityTooLarge with default headers values
func NewGetScriptRequestEntityTooLarge() *GetScriptRequestEntityTooLarge {
	return &GetScriptRequestEntityTooLarge{}
}

/*
GetScriptRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetScriptRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get script request entity too large response has a 2xx status code
func (o *GetScriptRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get script request entity too large response has a 3xx status code
func (o *GetScriptRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script request entity too large response has a 4xx status code
func (o *GetScriptRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get script request entity too large response has a 5xx status code
func (o *GetScriptRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get script request entity too large response a status code equal to that given
func (o *GetScriptRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetScriptRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScriptRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScriptRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptUnsupportedMediaType creates a GetScriptUnsupportedMediaType with default headers values
func NewGetScriptUnsupportedMediaType() *GetScriptUnsupportedMediaType {
	return &GetScriptUnsupportedMediaType{}
}

/*
GetScriptUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetScriptUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get script unsupported media type response has a 2xx status code
func (o *GetScriptUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get script unsupported media type response has a 3xx status code
func (o *GetScriptUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script unsupported media type response has a 4xx status code
func (o *GetScriptUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get script unsupported media type response has a 5xx status code
func (o *GetScriptUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get script unsupported media type response a status code equal to that given
func (o *GetScriptUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetScriptUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScriptUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScriptUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptTooManyRequests creates a GetScriptTooManyRequests with default headers values
func NewGetScriptTooManyRequests() *GetScriptTooManyRequests {
	return &GetScriptTooManyRequests{}
}

/*
GetScriptTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetScriptTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get script too many requests response has a 2xx status code
func (o *GetScriptTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get script too many requests response has a 3xx status code
func (o *GetScriptTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script too many requests response has a 4xx status code
func (o *GetScriptTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get script too many requests response has a 5xx status code
func (o *GetScriptTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get script too many requests response a status code equal to that given
func (o *GetScriptTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetScriptTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScriptTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScriptTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptInternalServerError creates a GetScriptInternalServerError with default headers values
func NewGetScriptInternalServerError() *GetScriptInternalServerError {
	return &GetScriptInternalServerError{}
}

/*
GetScriptInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetScriptInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get script internal server error response has a 2xx status code
func (o *GetScriptInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get script internal server error response has a 3xx status code
func (o *GetScriptInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script internal server error response has a 4xx status code
func (o *GetScriptInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get script internal server error response has a 5xx status code
func (o *GetScriptInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get script internal server error response a status code equal to that given
func (o *GetScriptInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetScriptInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScriptInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScriptInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptServiceUnavailable creates a GetScriptServiceUnavailable with default headers values
func NewGetScriptServiceUnavailable() *GetScriptServiceUnavailable {
	return &GetScriptServiceUnavailable{}
}

/*
GetScriptServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetScriptServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get script service unavailable response has a 2xx status code
func (o *GetScriptServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get script service unavailable response has a 3xx status code
func (o *GetScriptServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script service unavailable response has a 4xx status code
func (o *GetScriptServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get script service unavailable response has a 5xx status code
func (o *GetScriptServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get script service unavailable response a status code equal to that given
func (o *GetScriptServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetScriptServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScriptServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScriptServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptGatewayTimeout creates a GetScriptGatewayTimeout with default headers values
func NewGetScriptGatewayTimeout() *GetScriptGatewayTimeout {
	return &GetScriptGatewayTimeout{}
}

/*
GetScriptGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetScriptGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get script gateway timeout response has a 2xx status code
func (o *GetScriptGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get script gateway timeout response has a 3xx status code
func (o *GetScriptGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script gateway timeout response has a 4xx status code
func (o *GetScriptGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get script gateway timeout response has a 5xx status code
func (o *GetScriptGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get script gateway timeout response a status code equal to that given
func (o *GetScriptGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetScriptGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScriptGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}][%d] getScriptGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScriptGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

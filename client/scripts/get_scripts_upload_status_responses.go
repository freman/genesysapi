// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetScriptsUploadStatusReader is a Reader for the GetScriptsUploadStatus structure.
type GetScriptsUploadStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScriptsUploadStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScriptsUploadStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetScriptsUploadStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetScriptsUploadStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScriptsUploadStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScriptsUploadStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetScriptsUploadStatusRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetScriptsUploadStatusRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetScriptsUploadStatusUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScriptsUploadStatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScriptsUploadStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetScriptsUploadStatusServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetScriptsUploadStatusGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScriptsUploadStatusOK creates a GetScriptsUploadStatusOK with default headers values
func NewGetScriptsUploadStatusOK() *GetScriptsUploadStatusOK {
	return &GetScriptsUploadStatusOK{}
}

/*
GetScriptsUploadStatusOK describes a response with status code 200, with default header values.

successful operation
*/
type GetScriptsUploadStatusOK struct {
	Payload *models.ImportScriptStatusResponse
}

// IsSuccess returns true when this get scripts upload status o k response has a 2xx status code
func (o *GetScriptsUploadStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get scripts upload status o k response has a 3xx status code
func (o *GetScriptsUploadStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scripts upload status o k response has a 4xx status code
func (o *GetScriptsUploadStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get scripts upload status o k response has a 5xx status code
func (o *GetScriptsUploadStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get scripts upload status o k response a status code equal to that given
func (o *GetScriptsUploadStatusOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetScriptsUploadStatusOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusOK  %+v", 200, o.Payload)
}

func (o *GetScriptsUploadStatusOK) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusOK  %+v", 200, o.Payload)
}

func (o *GetScriptsUploadStatusOK) GetPayload() *models.ImportScriptStatusResponse {
	return o.Payload
}

func (o *GetScriptsUploadStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ImportScriptStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusBadRequest creates a GetScriptsUploadStatusBadRequest with default headers values
func NewGetScriptsUploadStatusBadRequest() *GetScriptsUploadStatusBadRequest {
	return &GetScriptsUploadStatusBadRequest{}
}

/*
GetScriptsUploadStatusBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetScriptsUploadStatusBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scripts upload status bad request response has a 2xx status code
func (o *GetScriptsUploadStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scripts upload status bad request response has a 3xx status code
func (o *GetScriptsUploadStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scripts upload status bad request response has a 4xx status code
func (o *GetScriptsUploadStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scripts upload status bad request response has a 5xx status code
func (o *GetScriptsUploadStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get scripts upload status bad request response a status code equal to that given
func (o *GetScriptsUploadStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetScriptsUploadStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetScriptsUploadStatusBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetScriptsUploadStatusBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusUnauthorized creates a GetScriptsUploadStatusUnauthorized with default headers values
func NewGetScriptsUploadStatusUnauthorized() *GetScriptsUploadStatusUnauthorized {
	return &GetScriptsUploadStatusUnauthorized{}
}

/*
GetScriptsUploadStatusUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetScriptsUploadStatusUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scripts upload status unauthorized response has a 2xx status code
func (o *GetScriptsUploadStatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scripts upload status unauthorized response has a 3xx status code
func (o *GetScriptsUploadStatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scripts upload status unauthorized response has a 4xx status code
func (o *GetScriptsUploadStatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scripts upload status unauthorized response has a 5xx status code
func (o *GetScriptsUploadStatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get scripts upload status unauthorized response a status code equal to that given
func (o *GetScriptsUploadStatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetScriptsUploadStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScriptsUploadStatusUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScriptsUploadStatusUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusForbidden creates a GetScriptsUploadStatusForbidden with default headers values
func NewGetScriptsUploadStatusForbidden() *GetScriptsUploadStatusForbidden {
	return &GetScriptsUploadStatusForbidden{}
}

/*
GetScriptsUploadStatusForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetScriptsUploadStatusForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scripts upload status forbidden response has a 2xx status code
func (o *GetScriptsUploadStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scripts upload status forbidden response has a 3xx status code
func (o *GetScriptsUploadStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scripts upload status forbidden response has a 4xx status code
func (o *GetScriptsUploadStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scripts upload status forbidden response has a 5xx status code
func (o *GetScriptsUploadStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get scripts upload status forbidden response a status code equal to that given
func (o *GetScriptsUploadStatusForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetScriptsUploadStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetScriptsUploadStatusForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetScriptsUploadStatusForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusNotFound creates a GetScriptsUploadStatusNotFound with default headers values
func NewGetScriptsUploadStatusNotFound() *GetScriptsUploadStatusNotFound {
	return &GetScriptsUploadStatusNotFound{}
}

/*
GetScriptsUploadStatusNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetScriptsUploadStatusNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scripts upload status not found response has a 2xx status code
func (o *GetScriptsUploadStatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scripts upload status not found response has a 3xx status code
func (o *GetScriptsUploadStatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scripts upload status not found response has a 4xx status code
func (o *GetScriptsUploadStatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scripts upload status not found response has a 5xx status code
func (o *GetScriptsUploadStatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get scripts upload status not found response a status code equal to that given
func (o *GetScriptsUploadStatusNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetScriptsUploadStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusNotFound  %+v", 404, o.Payload)
}

func (o *GetScriptsUploadStatusNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusNotFound  %+v", 404, o.Payload)
}

func (o *GetScriptsUploadStatusNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusRequestTimeout creates a GetScriptsUploadStatusRequestTimeout with default headers values
func NewGetScriptsUploadStatusRequestTimeout() *GetScriptsUploadStatusRequestTimeout {
	return &GetScriptsUploadStatusRequestTimeout{}
}

/*
GetScriptsUploadStatusRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetScriptsUploadStatusRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scripts upload status request timeout response has a 2xx status code
func (o *GetScriptsUploadStatusRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scripts upload status request timeout response has a 3xx status code
func (o *GetScriptsUploadStatusRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scripts upload status request timeout response has a 4xx status code
func (o *GetScriptsUploadStatusRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scripts upload status request timeout response has a 5xx status code
func (o *GetScriptsUploadStatusRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get scripts upload status request timeout response a status code equal to that given
func (o *GetScriptsUploadStatusRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetScriptsUploadStatusRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScriptsUploadStatusRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScriptsUploadStatusRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusRequestEntityTooLarge creates a GetScriptsUploadStatusRequestEntityTooLarge with default headers values
func NewGetScriptsUploadStatusRequestEntityTooLarge() *GetScriptsUploadStatusRequestEntityTooLarge {
	return &GetScriptsUploadStatusRequestEntityTooLarge{}
}

/*
GetScriptsUploadStatusRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetScriptsUploadStatusRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scripts upload status request entity too large response has a 2xx status code
func (o *GetScriptsUploadStatusRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scripts upload status request entity too large response has a 3xx status code
func (o *GetScriptsUploadStatusRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scripts upload status request entity too large response has a 4xx status code
func (o *GetScriptsUploadStatusRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scripts upload status request entity too large response has a 5xx status code
func (o *GetScriptsUploadStatusRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get scripts upload status request entity too large response a status code equal to that given
func (o *GetScriptsUploadStatusRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetScriptsUploadStatusRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScriptsUploadStatusRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScriptsUploadStatusRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusUnsupportedMediaType creates a GetScriptsUploadStatusUnsupportedMediaType with default headers values
func NewGetScriptsUploadStatusUnsupportedMediaType() *GetScriptsUploadStatusUnsupportedMediaType {
	return &GetScriptsUploadStatusUnsupportedMediaType{}
}

/*
GetScriptsUploadStatusUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetScriptsUploadStatusUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scripts upload status unsupported media type response has a 2xx status code
func (o *GetScriptsUploadStatusUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scripts upload status unsupported media type response has a 3xx status code
func (o *GetScriptsUploadStatusUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scripts upload status unsupported media type response has a 4xx status code
func (o *GetScriptsUploadStatusUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scripts upload status unsupported media type response has a 5xx status code
func (o *GetScriptsUploadStatusUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get scripts upload status unsupported media type response a status code equal to that given
func (o *GetScriptsUploadStatusUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetScriptsUploadStatusUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScriptsUploadStatusUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScriptsUploadStatusUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusTooManyRequests creates a GetScriptsUploadStatusTooManyRequests with default headers values
func NewGetScriptsUploadStatusTooManyRequests() *GetScriptsUploadStatusTooManyRequests {
	return &GetScriptsUploadStatusTooManyRequests{}
}

/*
GetScriptsUploadStatusTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetScriptsUploadStatusTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scripts upload status too many requests response has a 2xx status code
func (o *GetScriptsUploadStatusTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scripts upload status too many requests response has a 3xx status code
func (o *GetScriptsUploadStatusTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scripts upload status too many requests response has a 4xx status code
func (o *GetScriptsUploadStatusTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scripts upload status too many requests response has a 5xx status code
func (o *GetScriptsUploadStatusTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get scripts upload status too many requests response a status code equal to that given
func (o *GetScriptsUploadStatusTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetScriptsUploadStatusTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScriptsUploadStatusTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScriptsUploadStatusTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusInternalServerError creates a GetScriptsUploadStatusInternalServerError with default headers values
func NewGetScriptsUploadStatusInternalServerError() *GetScriptsUploadStatusInternalServerError {
	return &GetScriptsUploadStatusInternalServerError{}
}

/*
GetScriptsUploadStatusInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetScriptsUploadStatusInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scripts upload status internal server error response has a 2xx status code
func (o *GetScriptsUploadStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scripts upload status internal server error response has a 3xx status code
func (o *GetScriptsUploadStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scripts upload status internal server error response has a 4xx status code
func (o *GetScriptsUploadStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get scripts upload status internal server error response has a 5xx status code
func (o *GetScriptsUploadStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get scripts upload status internal server error response a status code equal to that given
func (o *GetScriptsUploadStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetScriptsUploadStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScriptsUploadStatusInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScriptsUploadStatusInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusServiceUnavailable creates a GetScriptsUploadStatusServiceUnavailable with default headers values
func NewGetScriptsUploadStatusServiceUnavailable() *GetScriptsUploadStatusServiceUnavailable {
	return &GetScriptsUploadStatusServiceUnavailable{}
}

/*
GetScriptsUploadStatusServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetScriptsUploadStatusServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scripts upload status service unavailable response has a 2xx status code
func (o *GetScriptsUploadStatusServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scripts upload status service unavailable response has a 3xx status code
func (o *GetScriptsUploadStatusServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scripts upload status service unavailable response has a 4xx status code
func (o *GetScriptsUploadStatusServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get scripts upload status service unavailable response has a 5xx status code
func (o *GetScriptsUploadStatusServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get scripts upload status service unavailable response a status code equal to that given
func (o *GetScriptsUploadStatusServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetScriptsUploadStatusServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScriptsUploadStatusServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScriptsUploadStatusServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusGatewayTimeout creates a GetScriptsUploadStatusGatewayTimeout with default headers values
func NewGetScriptsUploadStatusGatewayTimeout() *GetScriptsUploadStatusGatewayTimeout {
	return &GetScriptsUploadStatusGatewayTimeout{}
}

/*
GetScriptsUploadStatusGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetScriptsUploadStatusGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scripts upload status gateway timeout response has a 2xx status code
func (o *GetScriptsUploadStatusGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scripts upload status gateway timeout response has a 3xx status code
func (o *GetScriptsUploadStatusGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scripts upload status gateway timeout response has a 4xx status code
func (o *GetScriptsUploadStatusGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get scripts upload status gateway timeout response has a 5xx status code
func (o *GetScriptsUploadStatusGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get scripts upload status gateway timeout response a status code equal to that given
func (o *GetScriptsUploadStatusGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetScriptsUploadStatusGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScriptsUploadStatusGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScriptsUploadStatusGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

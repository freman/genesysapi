// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetScriptsUploadStatusReader is a Reader for the GetScriptsUploadStatus structure.
type GetScriptsUploadStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScriptsUploadStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScriptsUploadStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetScriptsUploadStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetScriptsUploadStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScriptsUploadStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScriptsUploadStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetScriptsUploadStatusRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetScriptsUploadStatusRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetScriptsUploadStatusUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScriptsUploadStatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScriptsUploadStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetScriptsUploadStatusServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetScriptsUploadStatusGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScriptsUploadStatusOK creates a GetScriptsUploadStatusOK with default headers values
func NewGetScriptsUploadStatusOK() *GetScriptsUploadStatusOK {
	return &GetScriptsUploadStatusOK{}
}

/*GetScriptsUploadStatusOK handles this case with default header values.

successful operation
*/
type GetScriptsUploadStatusOK struct {
	Payload *models.ImportScriptStatusResponse
}

func (o *GetScriptsUploadStatusOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusOK  %+v", 200, o.Payload)
}

func (o *GetScriptsUploadStatusOK) GetPayload() *models.ImportScriptStatusResponse {
	return o.Payload
}

func (o *GetScriptsUploadStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ImportScriptStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusBadRequest creates a GetScriptsUploadStatusBadRequest with default headers values
func NewGetScriptsUploadStatusBadRequest() *GetScriptsUploadStatusBadRequest {
	return &GetScriptsUploadStatusBadRequest{}
}

/*GetScriptsUploadStatusBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetScriptsUploadStatusBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsUploadStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetScriptsUploadStatusBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusUnauthorized creates a GetScriptsUploadStatusUnauthorized with default headers values
func NewGetScriptsUploadStatusUnauthorized() *GetScriptsUploadStatusUnauthorized {
	return &GetScriptsUploadStatusUnauthorized{}
}

/*GetScriptsUploadStatusUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetScriptsUploadStatusUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsUploadStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScriptsUploadStatusUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusForbidden creates a GetScriptsUploadStatusForbidden with default headers values
func NewGetScriptsUploadStatusForbidden() *GetScriptsUploadStatusForbidden {
	return &GetScriptsUploadStatusForbidden{}
}

/*GetScriptsUploadStatusForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetScriptsUploadStatusForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsUploadStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetScriptsUploadStatusForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusNotFound creates a GetScriptsUploadStatusNotFound with default headers values
func NewGetScriptsUploadStatusNotFound() *GetScriptsUploadStatusNotFound {
	return &GetScriptsUploadStatusNotFound{}
}

/*GetScriptsUploadStatusNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetScriptsUploadStatusNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsUploadStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusNotFound  %+v", 404, o.Payload)
}

func (o *GetScriptsUploadStatusNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusRequestTimeout creates a GetScriptsUploadStatusRequestTimeout with default headers values
func NewGetScriptsUploadStatusRequestTimeout() *GetScriptsUploadStatusRequestTimeout {
	return &GetScriptsUploadStatusRequestTimeout{}
}

/*GetScriptsUploadStatusRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetScriptsUploadStatusRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsUploadStatusRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScriptsUploadStatusRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusRequestEntityTooLarge creates a GetScriptsUploadStatusRequestEntityTooLarge with default headers values
func NewGetScriptsUploadStatusRequestEntityTooLarge() *GetScriptsUploadStatusRequestEntityTooLarge {
	return &GetScriptsUploadStatusRequestEntityTooLarge{}
}

/*GetScriptsUploadStatusRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetScriptsUploadStatusRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsUploadStatusRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScriptsUploadStatusRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusUnsupportedMediaType creates a GetScriptsUploadStatusUnsupportedMediaType with default headers values
func NewGetScriptsUploadStatusUnsupportedMediaType() *GetScriptsUploadStatusUnsupportedMediaType {
	return &GetScriptsUploadStatusUnsupportedMediaType{}
}

/*GetScriptsUploadStatusUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetScriptsUploadStatusUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsUploadStatusUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScriptsUploadStatusUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusTooManyRequests creates a GetScriptsUploadStatusTooManyRequests with default headers values
func NewGetScriptsUploadStatusTooManyRequests() *GetScriptsUploadStatusTooManyRequests {
	return &GetScriptsUploadStatusTooManyRequests{}
}

/*GetScriptsUploadStatusTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetScriptsUploadStatusTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsUploadStatusTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScriptsUploadStatusTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusInternalServerError creates a GetScriptsUploadStatusInternalServerError with default headers values
func NewGetScriptsUploadStatusInternalServerError() *GetScriptsUploadStatusInternalServerError {
	return &GetScriptsUploadStatusInternalServerError{}
}

/*GetScriptsUploadStatusInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetScriptsUploadStatusInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsUploadStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScriptsUploadStatusInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusServiceUnavailable creates a GetScriptsUploadStatusServiceUnavailable with default headers values
func NewGetScriptsUploadStatusServiceUnavailable() *GetScriptsUploadStatusServiceUnavailable {
	return &GetScriptsUploadStatusServiceUnavailable{}
}

/*GetScriptsUploadStatusServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetScriptsUploadStatusServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsUploadStatusServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScriptsUploadStatusServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptsUploadStatusGatewayTimeout creates a GetScriptsUploadStatusGatewayTimeout with default headers values
func NewGetScriptsUploadStatusGatewayTimeout() *GetScriptsUploadStatusGatewayTimeout {
	return &GetScriptsUploadStatusGatewayTimeout{}
}

/*GetScriptsUploadStatusGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetScriptsUploadStatusGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScriptsUploadStatusGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/uploads/{uploadId}/status][%d] getScriptsUploadStatusGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScriptsUploadStatusGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptsUploadStatusGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

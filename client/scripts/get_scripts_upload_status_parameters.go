// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetScriptsUploadStatusParams creates a new GetScriptsUploadStatusParams object
// with the default values initialized.
func NewGetScriptsUploadStatusParams() *GetScriptsUploadStatusParams {
	var (
		longPollDefault = bool(false)
	)
	return &GetScriptsUploadStatusParams{
		LongPoll: &longPollDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetScriptsUploadStatusParamsWithTimeout creates a new GetScriptsUploadStatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetScriptsUploadStatusParamsWithTimeout(timeout time.Duration) *GetScriptsUploadStatusParams {
	var (
		longPollDefault = bool(false)
	)
	return &GetScriptsUploadStatusParams{
		LongPoll: &longPollDefault,

		timeout: timeout,
	}
}

// NewGetScriptsUploadStatusParamsWithContext creates a new GetScriptsUploadStatusParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetScriptsUploadStatusParamsWithContext(ctx context.Context) *GetScriptsUploadStatusParams {
	var (
		longPollDefault = bool(false)
	)
	return &GetScriptsUploadStatusParams{
		LongPoll: &longPollDefault,

		Context: ctx,
	}
}

// NewGetScriptsUploadStatusParamsWithHTTPClient creates a new GetScriptsUploadStatusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetScriptsUploadStatusParamsWithHTTPClient(client *http.Client) *GetScriptsUploadStatusParams {
	var (
		longPollDefault = bool(false)
	)
	return &GetScriptsUploadStatusParams{
		LongPoll:   &longPollDefault,
		HTTPClient: client,
	}
}

/*GetScriptsUploadStatusParams contains all the parameters to send to the API endpoint
for the get scripts upload status operation typically these are written to a http.Request
*/
type GetScriptsUploadStatusParams struct {

	/*LongPoll
	  Enable longPolling endpoint

	*/
	LongPoll *bool
	/*UploadID
	  Upload ID

	*/
	UploadID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get scripts upload status params
func (o *GetScriptsUploadStatusParams) WithTimeout(timeout time.Duration) *GetScriptsUploadStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get scripts upload status params
func (o *GetScriptsUploadStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get scripts upload status params
func (o *GetScriptsUploadStatusParams) WithContext(ctx context.Context) *GetScriptsUploadStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get scripts upload status params
func (o *GetScriptsUploadStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get scripts upload status params
func (o *GetScriptsUploadStatusParams) WithHTTPClient(client *http.Client) *GetScriptsUploadStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get scripts upload status params
func (o *GetScriptsUploadStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLongPoll adds the longPoll to the get scripts upload status params
func (o *GetScriptsUploadStatusParams) WithLongPoll(longPoll *bool) *GetScriptsUploadStatusParams {
	o.SetLongPoll(longPoll)
	return o
}

// SetLongPoll adds the longPoll to the get scripts upload status params
func (o *GetScriptsUploadStatusParams) SetLongPoll(longPoll *bool) {
	o.LongPoll = longPoll
}

// WithUploadID adds the uploadID to the get scripts upload status params
func (o *GetScriptsUploadStatusParams) WithUploadID(uploadID string) *GetScriptsUploadStatusParams {
	o.SetUploadID(uploadID)
	return o
}

// SetUploadID adds the uploadId to the get scripts upload status params
func (o *GetScriptsUploadStatusParams) SetUploadID(uploadID string) {
	o.UploadID = uploadID
}

// WriteToRequest writes these params to a swagger request
func (o *GetScriptsUploadStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LongPoll != nil {

		// query param longPoll
		var qrLongPoll bool
		if o.LongPoll != nil {
			qrLongPoll = *o.LongPoll
		}
		qLongPoll := swag.FormatBool(qrLongPoll)
		if qLongPoll != "" {
			if err := r.SetQueryParam("longPoll", qLongPoll); err != nil {
				return err
			}
		}

	}

	// path param uploadId
	if err := r.SetPathParam("uploadId", o.UploadID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

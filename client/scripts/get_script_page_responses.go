// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetScriptPageReader is a Reader for the GetScriptPage structure.
type GetScriptPageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScriptPageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScriptPageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetScriptPageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetScriptPageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScriptPageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScriptPageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetScriptPageRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetScriptPageRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetScriptPageUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScriptPageTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScriptPageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetScriptPageServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetScriptPageGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScriptPageOK creates a GetScriptPageOK with default headers values
func NewGetScriptPageOK() *GetScriptPageOK {
	return &GetScriptPageOK{}
}

/*GetScriptPageOK handles this case with default header values.

successful operation
*/
type GetScriptPageOK struct {
	Payload *models.Page
}

func (o *GetScriptPageOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}/pages/{pageId}][%d] getScriptPageOK  %+v", 200, o.Payload)
}

func (o *GetScriptPageOK) GetPayload() *models.Page {
	return o.Payload
}

func (o *GetScriptPageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Page)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptPageBadRequest creates a GetScriptPageBadRequest with default headers values
func NewGetScriptPageBadRequest() *GetScriptPageBadRequest {
	return &GetScriptPageBadRequest{}
}

/*GetScriptPageBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetScriptPageBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetScriptPageBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}/pages/{pageId}][%d] getScriptPageBadRequest  %+v", 400, o.Payload)
}

func (o *GetScriptPageBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptPageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptPageUnauthorized creates a GetScriptPageUnauthorized with default headers values
func NewGetScriptPageUnauthorized() *GetScriptPageUnauthorized {
	return &GetScriptPageUnauthorized{}
}

/*GetScriptPageUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetScriptPageUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetScriptPageUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}/pages/{pageId}][%d] getScriptPageUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScriptPageUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptPageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptPageForbidden creates a GetScriptPageForbidden with default headers values
func NewGetScriptPageForbidden() *GetScriptPageForbidden {
	return &GetScriptPageForbidden{}
}

/*GetScriptPageForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetScriptPageForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetScriptPageForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}/pages/{pageId}][%d] getScriptPageForbidden  %+v", 403, o.Payload)
}

func (o *GetScriptPageForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptPageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptPageNotFound creates a GetScriptPageNotFound with default headers values
func NewGetScriptPageNotFound() *GetScriptPageNotFound {
	return &GetScriptPageNotFound{}
}

/*GetScriptPageNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetScriptPageNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetScriptPageNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}/pages/{pageId}][%d] getScriptPageNotFound  %+v", 404, o.Payload)
}

func (o *GetScriptPageNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptPageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptPageRequestTimeout creates a GetScriptPageRequestTimeout with default headers values
func NewGetScriptPageRequestTimeout() *GetScriptPageRequestTimeout {
	return &GetScriptPageRequestTimeout{}
}

/*GetScriptPageRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetScriptPageRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScriptPageRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}/pages/{pageId}][%d] getScriptPageRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScriptPageRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptPageRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptPageRequestEntityTooLarge creates a GetScriptPageRequestEntityTooLarge with default headers values
func NewGetScriptPageRequestEntityTooLarge() *GetScriptPageRequestEntityTooLarge {
	return &GetScriptPageRequestEntityTooLarge{}
}

/*GetScriptPageRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetScriptPageRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetScriptPageRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}/pages/{pageId}][%d] getScriptPageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScriptPageRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptPageRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptPageUnsupportedMediaType creates a GetScriptPageUnsupportedMediaType with default headers values
func NewGetScriptPageUnsupportedMediaType() *GetScriptPageUnsupportedMediaType {
	return &GetScriptPageUnsupportedMediaType{}
}

/*GetScriptPageUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetScriptPageUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetScriptPageUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}/pages/{pageId}][%d] getScriptPageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScriptPageUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptPageUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptPageTooManyRequests creates a GetScriptPageTooManyRequests with default headers values
func NewGetScriptPageTooManyRequests() *GetScriptPageTooManyRequests {
	return &GetScriptPageTooManyRequests{}
}

/*GetScriptPageTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetScriptPageTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetScriptPageTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}/pages/{pageId}][%d] getScriptPageTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScriptPageTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptPageTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptPageInternalServerError creates a GetScriptPageInternalServerError with default headers values
func NewGetScriptPageInternalServerError() *GetScriptPageInternalServerError {
	return &GetScriptPageInternalServerError{}
}

/*GetScriptPageInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetScriptPageInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetScriptPageInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}/pages/{pageId}][%d] getScriptPageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScriptPageInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptPageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptPageServiceUnavailable creates a GetScriptPageServiceUnavailable with default headers values
func NewGetScriptPageServiceUnavailable() *GetScriptPageServiceUnavailable {
	return &GetScriptPageServiceUnavailable{}
}

/*GetScriptPageServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetScriptPageServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetScriptPageServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}/pages/{pageId}][%d] getScriptPageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScriptPageServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptPageServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptPageGatewayTimeout creates a GetScriptPageGatewayTimeout with default headers values
func NewGetScriptPageGatewayTimeout() *GetScriptPageGatewayTimeout {
	return &GetScriptPageGatewayTimeout{}
}

/*GetScriptPageGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetScriptPageGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScriptPageGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scripts/{scriptId}/pages/{pageId}][%d] getScriptPageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScriptPageGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScriptPageGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

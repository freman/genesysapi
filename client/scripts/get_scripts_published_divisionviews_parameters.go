// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetScriptsPublishedDivisionviewsParams creates a new GetScriptsPublishedDivisionviewsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetScriptsPublishedDivisionviewsParams() *GetScriptsPublishedDivisionviewsParams {
	return &GetScriptsPublishedDivisionviewsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetScriptsPublishedDivisionviewsParamsWithTimeout creates a new GetScriptsPublishedDivisionviewsParams object
// with the ability to set a timeout on a request.
func NewGetScriptsPublishedDivisionviewsParamsWithTimeout(timeout time.Duration) *GetScriptsPublishedDivisionviewsParams {
	return &GetScriptsPublishedDivisionviewsParams{
		timeout: timeout,
	}
}

// NewGetScriptsPublishedDivisionviewsParamsWithContext creates a new GetScriptsPublishedDivisionviewsParams object
// with the ability to set a context for a request.
func NewGetScriptsPublishedDivisionviewsParamsWithContext(ctx context.Context) *GetScriptsPublishedDivisionviewsParams {
	return &GetScriptsPublishedDivisionviewsParams{
		Context: ctx,
	}
}

// NewGetScriptsPublishedDivisionviewsParamsWithHTTPClient creates a new GetScriptsPublishedDivisionviewsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetScriptsPublishedDivisionviewsParamsWithHTTPClient(client *http.Client) *GetScriptsPublishedDivisionviewsParams {
	return &GetScriptsPublishedDivisionviewsParams{
		HTTPClient: client,
	}
}

/*
GetScriptsPublishedDivisionviewsParams contains all the parameters to send to the API endpoint

	for the get scripts published divisionviews operation.

	Typically these are written to a http.Request.
*/
type GetScriptsPublishedDivisionviewsParams struct {

	/* DivisionIds.

	   Filters scripts to requested divisionIds
	*/
	DivisionIds *string

	/* Expand.

	   Expand
	*/
	Expand *string

	/* Feature.

	   Feature filter
	*/
	Feature *string

	/* FlowID.

	   Secure flow id filter
	*/
	FlowID *string

	/* Name.

	   Name filter
	*/
	Name *string

	/* PageNumber.

	   Page number

	   Format: int32
	   Default: 1
	*/
	PageNumber *int32

	/* PageSize.

	   Page size

	   Format: int32
	   Default: 25
	*/
	PageSize *int32

	/* ScriptDataVersion.

	   Advanced usage - controls the data version of the script
	*/
	ScriptDataVersion *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get scripts published divisionviews params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetScriptsPublishedDivisionviewsParams) WithDefaults() *GetScriptsPublishedDivisionviewsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get scripts published divisionviews params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetScriptsPublishedDivisionviewsParams) SetDefaults() {
	var (
		pageNumberDefault = int32(1)

		pageSizeDefault = int32(25)
	)

	val := GetScriptsPublishedDivisionviewsParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) WithTimeout(timeout time.Duration) *GetScriptsPublishedDivisionviewsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) WithContext(ctx context.Context) *GetScriptsPublishedDivisionviewsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) WithHTTPClient(client *http.Client) *GetScriptsPublishedDivisionviewsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDivisionIds adds the divisionIds to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) WithDivisionIds(divisionIds *string) *GetScriptsPublishedDivisionviewsParams {
	o.SetDivisionIds(divisionIds)
	return o
}

// SetDivisionIds adds the divisionIds to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) SetDivisionIds(divisionIds *string) {
	o.DivisionIds = divisionIds
}

// WithExpand adds the expand to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) WithExpand(expand *string) *GetScriptsPublishedDivisionviewsParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) SetExpand(expand *string) {
	o.Expand = expand
}

// WithFeature adds the feature to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) WithFeature(feature *string) *GetScriptsPublishedDivisionviewsParams {
	o.SetFeature(feature)
	return o
}

// SetFeature adds the feature to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) SetFeature(feature *string) {
	o.Feature = feature
}

// WithFlowID adds the flowID to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) WithFlowID(flowID *string) *GetScriptsPublishedDivisionviewsParams {
	o.SetFlowID(flowID)
	return o
}

// SetFlowID adds the flowId to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) SetFlowID(flowID *string) {
	o.FlowID = flowID
}

// WithName adds the name to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) WithName(name *string) *GetScriptsPublishedDivisionviewsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) SetName(name *string) {
	o.Name = name
}

// WithPageNumber adds the pageNumber to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) WithPageNumber(pageNumber *int32) *GetScriptsPublishedDivisionviewsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) WithPageSize(pageSize *int32) *GetScriptsPublishedDivisionviewsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithScriptDataVersion adds the scriptDataVersion to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) WithScriptDataVersion(scriptDataVersion *string) *GetScriptsPublishedDivisionviewsParams {
	o.SetScriptDataVersion(scriptDataVersion)
	return o
}

// SetScriptDataVersion adds the scriptDataVersion to the get scripts published divisionviews params
func (o *GetScriptsPublishedDivisionviewsParams) SetScriptDataVersion(scriptDataVersion *string) {
	o.ScriptDataVersion = scriptDataVersion
}

// WriteToRequest writes these params to a swagger request
func (o *GetScriptsPublishedDivisionviewsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DivisionIds != nil {

		// query param divisionIds
		var qrDivisionIds string

		if o.DivisionIds != nil {
			qrDivisionIds = *o.DivisionIds
		}
		qDivisionIds := qrDivisionIds
		if qDivisionIds != "" {

			if err := r.SetQueryParam("divisionIds", qDivisionIds); err != nil {
				return err
			}
		}
	}

	if o.Expand != nil {

		// query param expand
		var qrExpand string

		if o.Expand != nil {
			qrExpand = *o.Expand
		}
		qExpand := qrExpand
		if qExpand != "" {

			if err := r.SetQueryParam("expand", qExpand); err != nil {
				return err
			}
		}
	}

	if o.Feature != nil {

		// query param feature
		var qrFeature string

		if o.Feature != nil {
			qrFeature = *o.Feature
		}
		qFeature := qrFeature
		if qFeature != "" {

			if err := r.SetQueryParam("feature", qFeature); err != nil {
				return err
			}
		}
	}

	if o.FlowID != nil {

		// query param flowId
		var qrFlowID string

		if o.FlowID != nil {
			qrFlowID = *o.FlowID
		}
		qFlowID := qrFlowID
		if qFlowID != "" {

			if err := r.SetQueryParam("flowId", qFlowID); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.ScriptDataVersion != nil {

		// query param scriptDataVersion
		var qrScriptDataVersion string

		if o.ScriptDataVersion != nil {
			qrScriptDataVersion = *o.ScriptDataVersion
		}
		qScriptDataVersion := qrScriptDataVersion
		if qScriptDataVersion != "" {

			if err := r.SetQueryParam("scriptDataVersion", qScriptDataVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

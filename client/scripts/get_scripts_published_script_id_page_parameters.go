// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetScriptsPublishedScriptIDPageParams creates a new GetScriptsPublishedScriptIDPageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetScriptsPublishedScriptIDPageParams() *GetScriptsPublishedScriptIDPageParams {
	return &GetScriptsPublishedScriptIDPageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetScriptsPublishedScriptIDPageParamsWithTimeout creates a new GetScriptsPublishedScriptIDPageParams object
// with the ability to set a timeout on a request.
func NewGetScriptsPublishedScriptIDPageParamsWithTimeout(timeout time.Duration) *GetScriptsPublishedScriptIDPageParams {
	return &GetScriptsPublishedScriptIDPageParams{
		timeout: timeout,
	}
}

// NewGetScriptsPublishedScriptIDPageParamsWithContext creates a new GetScriptsPublishedScriptIDPageParams object
// with the ability to set a context for a request.
func NewGetScriptsPublishedScriptIDPageParamsWithContext(ctx context.Context) *GetScriptsPublishedScriptIDPageParams {
	return &GetScriptsPublishedScriptIDPageParams{
		Context: ctx,
	}
}

// NewGetScriptsPublishedScriptIDPageParamsWithHTTPClient creates a new GetScriptsPublishedScriptIDPageParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetScriptsPublishedScriptIDPageParamsWithHTTPClient(client *http.Client) *GetScriptsPublishedScriptIDPageParams {
	return &GetScriptsPublishedScriptIDPageParams{
		HTTPClient: client,
	}
}

/*
GetScriptsPublishedScriptIDPageParams contains all the parameters to send to the API endpoint

	for the get scripts published script Id page operation.

	Typically these are written to a http.Request.
*/
type GetScriptsPublishedScriptIDPageParams struct {

	/* PageID.

	   Page ID
	*/
	PageID string

	/* ScriptDataVersion.

	   Advanced usage - controls the data version of the script
	*/
	ScriptDataVersion *string

	/* ScriptID.

	   Script ID
	*/
	ScriptID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get scripts published script Id page params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetScriptsPublishedScriptIDPageParams) WithDefaults() *GetScriptsPublishedScriptIDPageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get scripts published script Id page params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetScriptsPublishedScriptIDPageParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get scripts published script Id page params
func (o *GetScriptsPublishedScriptIDPageParams) WithTimeout(timeout time.Duration) *GetScriptsPublishedScriptIDPageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get scripts published script Id page params
func (o *GetScriptsPublishedScriptIDPageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get scripts published script Id page params
func (o *GetScriptsPublishedScriptIDPageParams) WithContext(ctx context.Context) *GetScriptsPublishedScriptIDPageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get scripts published script Id page params
func (o *GetScriptsPublishedScriptIDPageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get scripts published script Id page params
func (o *GetScriptsPublishedScriptIDPageParams) WithHTTPClient(client *http.Client) *GetScriptsPublishedScriptIDPageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get scripts published script Id page params
func (o *GetScriptsPublishedScriptIDPageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPageID adds the pageID to the get scripts published script Id page params
func (o *GetScriptsPublishedScriptIDPageParams) WithPageID(pageID string) *GetScriptsPublishedScriptIDPageParams {
	o.SetPageID(pageID)
	return o
}

// SetPageID adds the pageId to the get scripts published script Id page params
func (o *GetScriptsPublishedScriptIDPageParams) SetPageID(pageID string) {
	o.PageID = pageID
}

// WithScriptDataVersion adds the scriptDataVersion to the get scripts published script Id page params
func (o *GetScriptsPublishedScriptIDPageParams) WithScriptDataVersion(scriptDataVersion *string) *GetScriptsPublishedScriptIDPageParams {
	o.SetScriptDataVersion(scriptDataVersion)
	return o
}

// SetScriptDataVersion adds the scriptDataVersion to the get scripts published script Id page params
func (o *GetScriptsPublishedScriptIDPageParams) SetScriptDataVersion(scriptDataVersion *string) {
	o.ScriptDataVersion = scriptDataVersion
}

// WithScriptID adds the scriptID to the get scripts published script Id page params
func (o *GetScriptsPublishedScriptIDPageParams) WithScriptID(scriptID string) *GetScriptsPublishedScriptIDPageParams {
	o.SetScriptID(scriptID)
	return o
}

// SetScriptID adds the scriptId to the get scripts published script Id page params
func (o *GetScriptsPublishedScriptIDPageParams) SetScriptID(scriptID string) {
	o.ScriptID = scriptID
}

// WriteToRequest writes these params to a swagger request
func (o *GetScriptsPublishedScriptIDPageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param pageId
	if err := r.SetPathParam("pageId", o.PageID); err != nil {
		return err
	}

	if o.ScriptDataVersion != nil {

		// query param scriptDataVersion
		var qrScriptDataVersion string

		if o.ScriptDataVersion != nil {
			qrScriptDataVersion = *o.ScriptDataVersion
		}
		qScriptDataVersion := qrScriptDataVersion
		if qScriptDataVersion != "" {

			if err := r.SetQueryParam("scriptDataVersion", qScriptDataVersion); err != nil {
				return err
			}
		}
	}

	// path param scriptId
	if err := r.SetPathParam("scriptId", o.ScriptID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

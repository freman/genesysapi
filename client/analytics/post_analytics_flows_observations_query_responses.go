// Code generated by go-swagger; DO NOT EDIT.

package analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostAnalyticsFlowsObservationsQueryReader is a Reader for the PostAnalyticsFlowsObservationsQuery structure.
type PostAnalyticsFlowsObservationsQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAnalyticsFlowsObservationsQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostAnalyticsFlowsObservationsQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostAnalyticsFlowsObservationsQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostAnalyticsFlowsObservationsQueryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostAnalyticsFlowsObservationsQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostAnalyticsFlowsObservationsQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostAnalyticsFlowsObservationsQueryRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostAnalyticsFlowsObservationsQueryRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostAnalyticsFlowsObservationsQueryUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostAnalyticsFlowsObservationsQueryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostAnalyticsFlowsObservationsQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostAnalyticsFlowsObservationsQueryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostAnalyticsFlowsObservationsQueryGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostAnalyticsFlowsObservationsQueryOK creates a PostAnalyticsFlowsObservationsQueryOK with default headers values
func NewPostAnalyticsFlowsObservationsQueryOK() *PostAnalyticsFlowsObservationsQueryOK {
	return &PostAnalyticsFlowsObservationsQueryOK{}
}

/*PostAnalyticsFlowsObservationsQueryOK handles this case with default header values.

successful operation
*/
type PostAnalyticsFlowsObservationsQueryOK struct {
	Payload *models.FlowObservationQueryResponse
}

func (o *PostAnalyticsFlowsObservationsQueryOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/analytics/flows/observations/query][%d] postAnalyticsFlowsObservationsQueryOK  %+v", 200, o.Payload)
}

func (o *PostAnalyticsFlowsObservationsQueryOK) GetPayload() *models.FlowObservationQueryResponse {
	return o.Payload
}

func (o *PostAnalyticsFlowsObservationsQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FlowObservationQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAnalyticsFlowsObservationsQueryBadRequest creates a PostAnalyticsFlowsObservationsQueryBadRequest with default headers values
func NewPostAnalyticsFlowsObservationsQueryBadRequest() *PostAnalyticsFlowsObservationsQueryBadRequest {
	return &PostAnalyticsFlowsObservationsQueryBadRequest{}
}

/*PostAnalyticsFlowsObservationsQueryBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostAnalyticsFlowsObservationsQueryBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostAnalyticsFlowsObservationsQueryBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/analytics/flows/observations/query][%d] postAnalyticsFlowsObservationsQueryBadRequest  %+v", 400, o.Payload)
}

func (o *PostAnalyticsFlowsObservationsQueryBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAnalyticsFlowsObservationsQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAnalyticsFlowsObservationsQueryUnauthorized creates a PostAnalyticsFlowsObservationsQueryUnauthorized with default headers values
func NewPostAnalyticsFlowsObservationsQueryUnauthorized() *PostAnalyticsFlowsObservationsQueryUnauthorized {
	return &PostAnalyticsFlowsObservationsQueryUnauthorized{}
}

/*PostAnalyticsFlowsObservationsQueryUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostAnalyticsFlowsObservationsQueryUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostAnalyticsFlowsObservationsQueryUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/analytics/flows/observations/query][%d] postAnalyticsFlowsObservationsQueryUnauthorized  %+v", 401, o.Payload)
}

func (o *PostAnalyticsFlowsObservationsQueryUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAnalyticsFlowsObservationsQueryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAnalyticsFlowsObservationsQueryForbidden creates a PostAnalyticsFlowsObservationsQueryForbidden with default headers values
func NewPostAnalyticsFlowsObservationsQueryForbidden() *PostAnalyticsFlowsObservationsQueryForbidden {
	return &PostAnalyticsFlowsObservationsQueryForbidden{}
}

/*PostAnalyticsFlowsObservationsQueryForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostAnalyticsFlowsObservationsQueryForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostAnalyticsFlowsObservationsQueryForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/analytics/flows/observations/query][%d] postAnalyticsFlowsObservationsQueryForbidden  %+v", 403, o.Payload)
}

func (o *PostAnalyticsFlowsObservationsQueryForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAnalyticsFlowsObservationsQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAnalyticsFlowsObservationsQueryNotFound creates a PostAnalyticsFlowsObservationsQueryNotFound with default headers values
func NewPostAnalyticsFlowsObservationsQueryNotFound() *PostAnalyticsFlowsObservationsQueryNotFound {
	return &PostAnalyticsFlowsObservationsQueryNotFound{}
}

/*PostAnalyticsFlowsObservationsQueryNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostAnalyticsFlowsObservationsQueryNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostAnalyticsFlowsObservationsQueryNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/analytics/flows/observations/query][%d] postAnalyticsFlowsObservationsQueryNotFound  %+v", 404, o.Payload)
}

func (o *PostAnalyticsFlowsObservationsQueryNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAnalyticsFlowsObservationsQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAnalyticsFlowsObservationsQueryRequestTimeout creates a PostAnalyticsFlowsObservationsQueryRequestTimeout with default headers values
func NewPostAnalyticsFlowsObservationsQueryRequestTimeout() *PostAnalyticsFlowsObservationsQueryRequestTimeout {
	return &PostAnalyticsFlowsObservationsQueryRequestTimeout{}
}

/*PostAnalyticsFlowsObservationsQueryRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostAnalyticsFlowsObservationsQueryRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostAnalyticsFlowsObservationsQueryRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/analytics/flows/observations/query][%d] postAnalyticsFlowsObservationsQueryRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostAnalyticsFlowsObservationsQueryRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAnalyticsFlowsObservationsQueryRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAnalyticsFlowsObservationsQueryRequestEntityTooLarge creates a PostAnalyticsFlowsObservationsQueryRequestEntityTooLarge with default headers values
func NewPostAnalyticsFlowsObservationsQueryRequestEntityTooLarge() *PostAnalyticsFlowsObservationsQueryRequestEntityTooLarge {
	return &PostAnalyticsFlowsObservationsQueryRequestEntityTooLarge{}
}

/*PostAnalyticsFlowsObservationsQueryRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostAnalyticsFlowsObservationsQueryRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostAnalyticsFlowsObservationsQueryRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/analytics/flows/observations/query][%d] postAnalyticsFlowsObservationsQueryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostAnalyticsFlowsObservationsQueryRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAnalyticsFlowsObservationsQueryRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAnalyticsFlowsObservationsQueryUnsupportedMediaType creates a PostAnalyticsFlowsObservationsQueryUnsupportedMediaType with default headers values
func NewPostAnalyticsFlowsObservationsQueryUnsupportedMediaType() *PostAnalyticsFlowsObservationsQueryUnsupportedMediaType {
	return &PostAnalyticsFlowsObservationsQueryUnsupportedMediaType{}
}

/*PostAnalyticsFlowsObservationsQueryUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostAnalyticsFlowsObservationsQueryUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostAnalyticsFlowsObservationsQueryUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/analytics/flows/observations/query][%d] postAnalyticsFlowsObservationsQueryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostAnalyticsFlowsObservationsQueryUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAnalyticsFlowsObservationsQueryUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAnalyticsFlowsObservationsQueryTooManyRequests creates a PostAnalyticsFlowsObservationsQueryTooManyRequests with default headers values
func NewPostAnalyticsFlowsObservationsQueryTooManyRequests() *PostAnalyticsFlowsObservationsQueryTooManyRequests {
	return &PostAnalyticsFlowsObservationsQueryTooManyRequests{}
}

/*PostAnalyticsFlowsObservationsQueryTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostAnalyticsFlowsObservationsQueryTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostAnalyticsFlowsObservationsQueryTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/analytics/flows/observations/query][%d] postAnalyticsFlowsObservationsQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostAnalyticsFlowsObservationsQueryTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAnalyticsFlowsObservationsQueryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAnalyticsFlowsObservationsQueryInternalServerError creates a PostAnalyticsFlowsObservationsQueryInternalServerError with default headers values
func NewPostAnalyticsFlowsObservationsQueryInternalServerError() *PostAnalyticsFlowsObservationsQueryInternalServerError {
	return &PostAnalyticsFlowsObservationsQueryInternalServerError{}
}

/*PostAnalyticsFlowsObservationsQueryInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostAnalyticsFlowsObservationsQueryInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostAnalyticsFlowsObservationsQueryInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/analytics/flows/observations/query][%d] postAnalyticsFlowsObservationsQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *PostAnalyticsFlowsObservationsQueryInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAnalyticsFlowsObservationsQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAnalyticsFlowsObservationsQueryServiceUnavailable creates a PostAnalyticsFlowsObservationsQueryServiceUnavailable with default headers values
func NewPostAnalyticsFlowsObservationsQueryServiceUnavailable() *PostAnalyticsFlowsObservationsQueryServiceUnavailable {
	return &PostAnalyticsFlowsObservationsQueryServiceUnavailable{}
}

/*PostAnalyticsFlowsObservationsQueryServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostAnalyticsFlowsObservationsQueryServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostAnalyticsFlowsObservationsQueryServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/analytics/flows/observations/query][%d] postAnalyticsFlowsObservationsQueryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostAnalyticsFlowsObservationsQueryServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAnalyticsFlowsObservationsQueryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAnalyticsFlowsObservationsQueryGatewayTimeout creates a PostAnalyticsFlowsObservationsQueryGatewayTimeout with default headers values
func NewPostAnalyticsFlowsObservationsQueryGatewayTimeout() *PostAnalyticsFlowsObservationsQueryGatewayTimeout {
	return &PostAnalyticsFlowsObservationsQueryGatewayTimeout{}
}

/*PostAnalyticsFlowsObservationsQueryGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostAnalyticsFlowsObservationsQueryGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostAnalyticsFlowsObservationsQueryGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/analytics/flows/observations/query][%d] postAnalyticsFlowsObservationsQueryGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostAnalyticsFlowsObservationsQueryGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAnalyticsFlowsObservationsQueryGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchAnalyticsReportingSettingsReader is a Reader for the PatchAnalyticsReportingSettings structure.
type PatchAnalyticsReportingSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAnalyticsReportingSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchAnalyticsReportingSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchAnalyticsReportingSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchAnalyticsReportingSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchAnalyticsReportingSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchAnalyticsReportingSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchAnalyticsReportingSettingsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchAnalyticsReportingSettingsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchAnalyticsReportingSettingsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchAnalyticsReportingSettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchAnalyticsReportingSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchAnalyticsReportingSettingsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchAnalyticsReportingSettingsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchAnalyticsReportingSettingsOK creates a PatchAnalyticsReportingSettingsOK with default headers values
func NewPatchAnalyticsReportingSettingsOK() *PatchAnalyticsReportingSettingsOK {
	return &PatchAnalyticsReportingSettingsOK{}
}

/*
PatchAnalyticsReportingSettingsOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchAnalyticsReportingSettingsOK struct {
	Payload *models.AnalyticsReportingSettings
}

// IsSuccess returns true when this patch analytics reporting settings o k response has a 2xx status code
func (o *PatchAnalyticsReportingSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch analytics reporting settings o k response has a 3xx status code
func (o *PatchAnalyticsReportingSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch analytics reporting settings o k response has a 4xx status code
func (o *PatchAnalyticsReportingSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch analytics reporting settings o k response has a 5xx status code
func (o *PatchAnalyticsReportingSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch analytics reporting settings o k response a status code equal to that given
func (o *PatchAnalyticsReportingSettingsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchAnalyticsReportingSettingsOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsOK  %+v", 200, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsOK  %+v", 200, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsOK) GetPayload() *models.AnalyticsReportingSettings {
	return o.Payload
}

func (o *PatchAnalyticsReportingSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AnalyticsReportingSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAnalyticsReportingSettingsBadRequest creates a PatchAnalyticsReportingSettingsBadRequest with default headers values
func NewPatchAnalyticsReportingSettingsBadRequest() *PatchAnalyticsReportingSettingsBadRequest {
	return &PatchAnalyticsReportingSettingsBadRequest{}
}

/*
PatchAnalyticsReportingSettingsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchAnalyticsReportingSettingsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch analytics reporting settings bad request response has a 2xx status code
func (o *PatchAnalyticsReportingSettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch analytics reporting settings bad request response has a 3xx status code
func (o *PatchAnalyticsReportingSettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch analytics reporting settings bad request response has a 4xx status code
func (o *PatchAnalyticsReportingSettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch analytics reporting settings bad request response has a 5xx status code
func (o *PatchAnalyticsReportingSettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch analytics reporting settings bad request response a status code equal to that given
func (o *PatchAnalyticsReportingSettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchAnalyticsReportingSettingsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAnalyticsReportingSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAnalyticsReportingSettingsUnauthorized creates a PatchAnalyticsReportingSettingsUnauthorized with default headers values
func NewPatchAnalyticsReportingSettingsUnauthorized() *PatchAnalyticsReportingSettingsUnauthorized {
	return &PatchAnalyticsReportingSettingsUnauthorized{}
}

/*
PatchAnalyticsReportingSettingsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchAnalyticsReportingSettingsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch analytics reporting settings unauthorized response has a 2xx status code
func (o *PatchAnalyticsReportingSettingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch analytics reporting settings unauthorized response has a 3xx status code
func (o *PatchAnalyticsReportingSettingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch analytics reporting settings unauthorized response has a 4xx status code
func (o *PatchAnalyticsReportingSettingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch analytics reporting settings unauthorized response has a 5xx status code
func (o *PatchAnalyticsReportingSettingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch analytics reporting settings unauthorized response a status code equal to that given
func (o *PatchAnalyticsReportingSettingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchAnalyticsReportingSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAnalyticsReportingSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAnalyticsReportingSettingsForbidden creates a PatchAnalyticsReportingSettingsForbidden with default headers values
func NewPatchAnalyticsReportingSettingsForbidden() *PatchAnalyticsReportingSettingsForbidden {
	return &PatchAnalyticsReportingSettingsForbidden{}
}

/*
PatchAnalyticsReportingSettingsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchAnalyticsReportingSettingsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch analytics reporting settings forbidden response has a 2xx status code
func (o *PatchAnalyticsReportingSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch analytics reporting settings forbidden response has a 3xx status code
func (o *PatchAnalyticsReportingSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch analytics reporting settings forbidden response has a 4xx status code
func (o *PatchAnalyticsReportingSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch analytics reporting settings forbidden response has a 5xx status code
func (o *PatchAnalyticsReportingSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch analytics reporting settings forbidden response a status code equal to that given
func (o *PatchAnalyticsReportingSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchAnalyticsReportingSettingsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAnalyticsReportingSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAnalyticsReportingSettingsNotFound creates a PatchAnalyticsReportingSettingsNotFound with default headers values
func NewPatchAnalyticsReportingSettingsNotFound() *PatchAnalyticsReportingSettingsNotFound {
	return &PatchAnalyticsReportingSettingsNotFound{}
}

/*
PatchAnalyticsReportingSettingsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchAnalyticsReportingSettingsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch analytics reporting settings not found response has a 2xx status code
func (o *PatchAnalyticsReportingSettingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch analytics reporting settings not found response has a 3xx status code
func (o *PatchAnalyticsReportingSettingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch analytics reporting settings not found response has a 4xx status code
func (o *PatchAnalyticsReportingSettingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch analytics reporting settings not found response has a 5xx status code
func (o *PatchAnalyticsReportingSettingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch analytics reporting settings not found response a status code equal to that given
func (o *PatchAnalyticsReportingSettingsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchAnalyticsReportingSettingsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAnalyticsReportingSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAnalyticsReportingSettingsRequestTimeout creates a PatchAnalyticsReportingSettingsRequestTimeout with default headers values
func NewPatchAnalyticsReportingSettingsRequestTimeout() *PatchAnalyticsReportingSettingsRequestTimeout {
	return &PatchAnalyticsReportingSettingsRequestTimeout{}
}

/*
PatchAnalyticsReportingSettingsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchAnalyticsReportingSettingsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch analytics reporting settings request timeout response has a 2xx status code
func (o *PatchAnalyticsReportingSettingsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch analytics reporting settings request timeout response has a 3xx status code
func (o *PatchAnalyticsReportingSettingsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch analytics reporting settings request timeout response has a 4xx status code
func (o *PatchAnalyticsReportingSettingsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch analytics reporting settings request timeout response has a 5xx status code
func (o *PatchAnalyticsReportingSettingsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch analytics reporting settings request timeout response a status code equal to that given
func (o *PatchAnalyticsReportingSettingsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchAnalyticsReportingSettingsRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAnalyticsReportingSettingsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAnalyticsReportingSettingsRequestEntityTooLarge creates a PatchAnalyticsReportingSettingsRequestEntityTooLarge with default headers values
func NewPatchAnalyticsReportingSettingsRequestEntityTooLarge() *PatchAnalyticsReportingSettingsRequestEntityTooLarge {
	return &PatchAnalyticsReportingSettingsRequestEntityTooLarge{}
}

/*
PatchAnalyticsReportingSettingsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchAnalyticsReportingSettingsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch analytics reporting settings request entity too large response has a 2xx status code
func (o *PatchAnalyticsReportingSettingsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch analytics reporting settings request entity too large response has a 3xx status code
func (o *PatchAnalyticsReportingSettingsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch analytics reporting settings request entity too large response has a 4xx status code
func (o *PatchAnalyticsReportingSettingsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch analytics reporting settings request entity too large response has a 5xx status code
func (o *PatchAnalyticsReportingSettingsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch analytics reporting settings request entity too large response a status code equal to that given
func (o *PatchAnalyticsReportingSettingsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchAnalyticsReportingSettingsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAnalyticsReportingSettingsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAnalyticsReportingSettingsUnsupportedMediaType creates a PatchAnalyticsReportingSettingsUnsupportedMediaType with default headers values
func NewPatchAnalyticsReportingSettingsUnsupportedMediaType() *PatchAnalyticsReportingSettingsUnsupportedMediaType {
	return &PatchAnalyticsReportingSettingsUnsupportedMediaType{}
}

/*
PatchAnalyticsReportingSettingsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchAnalyticsReportingSettingsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch analytics reporting settings unsupported media type response has a 2xx status code
func (o *PatchAnalyticsReportingSettingsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch analytics reporting settings unsupported media type response has a 3xx status code
func (o *PatchAnalyticsReportingSettingsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch analytics reporting settings unsupported media type response has a 4xx status code
func (o *PatchAnalyticsReportingSettingsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch analytics reporting settings unsupported media type response has a 5xx status code
func (o *PatchAnalyticsReportingSettingsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch analytics reporting settings unsupported media type response a status code equal to that given
func (o *PatchAnalyticsReportingSettingsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchAnalyticsReportingSettingsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAnalyticsReportingSettingsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAnalyticsReportingSettingsTooManyRequests creates a PatchAnalyticsReportingSettingsTooManyRequests with default headers values
func NewPatchAnalyticsReportingSettingsTooManyRequests() *PatchAnalyticsReportingSettingsTooManyRequests {
	return &PatchAnalyticsReportingSettingsTooManyRequests{}
}

/*
PatchAnalyticsReportingSettingsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchAnalyticsReportingSettingsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch analytics reporting settings too many requests response has a 2xx status code
func (o *PatchAnalyticsReportingSettingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch analytics reporting settings too many requests response has a 3xx status code
func (o *PatchAnalyticsReportingSettingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch analytics reporting settings too many requests response has a 4xx status code
func (o *PatchAnalyticsReportingSettingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch analytics reporting settings too many requests response has a 5xx status code
func (o *PatchAnalyticsReportingSettingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch analytics reporting settings too many requests response a status code equal to that given
func (o *PatchAnalyticsReportingSettingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchAnalyticsReportingSettingsTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAnalyticsReportingSettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAnalyticsReportingSettingsInternalServerError creates a PatchAnalyticsReportingSettingsInternalServerError with default headers values
func NewPatchAnalyticsReportingSettingsInternalServerError() *PatchAnalyticsReportingSettingsInternalServerError {
	return &PatchAnalyticsReportingSettingsInternalServerError{}
}

/*
PatchAnalyticsReportingSettingsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchAnalyticsReportingSettingsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch analytics reporting settings internal server error response has a 2xx status code
func (o *PatchAnalyticsReportingSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch analytics reporting settings internal server error response has a 3xx status code
func (o *PatchAnalyticsReportingSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch analytics reporting settings internal server error response has a 4xx status code
func (o *PatchAnalyticsReportingSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch analytics reporting settings internal server error response has a 5xx status code
func (o *PatchAnalyticsReportingSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch analytics reporting settings internal server error response a status code equal to that given
func (o *PatchAnalyticsReportingSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchAnalyticsReportingSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAnalyticsReportingSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAnalyticsReportingSettingsServiceUnavailable creates a PatchAnalyticsReportingSettingsServiceUnavailable with default headers values
func NewPatchAnalyticsReportingSettingsServiceUnavailable() *PatchAnalyticsReportingSettingsServiceUnavailable {
	return &PatchAnalyticsReportingSettingsServiceUnavailable{}
}

/*
PatchAnalyticsReportingSettingsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchAnalyticsReportingSettingsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch analytics reporting settings service unavailable response has a 2xx status code
func (o *PatchAnalyticsReportingSettingsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch analytics reporting settings service unavailable response has a 3xx status code
func (o *PatchAnalyticsReportingSettingsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch analytics reporting settings service unavailable response has a 4xx status code
func (o *PatchAnalyticsReportingSettingsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch analytics reporting settings service unavailable response has a 5xx status code
func (o *PatchAnalyticsReportingSettingsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch analytics reporting settings service unavailable response a status code equal to that given
func (o *PatchAnalyticsReportingSettingsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchAnalyticsReportingSettingsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAnalyticsReportingSettingsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAnalyticsReportingSettingsGatewayTimeout creates a PatchAnalyticsReportingSettingsGatewayTimeout with default headers values
func NewPatchAnalyticsReportingSettingsGatewayTimeout() *PatchAnalyticsReportingSettingsGatewayTimeout {
	return &PatchAnalyticsReportingSettingsGatewayTimeout{}
}

/*
PatchAnalyticsReportingSettingsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchAnalyticsReportingSettingsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch analytics reporting settings gateway timeout response has a 2xx status code
func (o *PatchAnalyticsReportingSettingsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch analytics reporting settings gateway timeout response has a 3xx status code
func (o *PatchAnalyticsReportingSettingsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch analytics reporting settings gateway timeout response has a 4xx status code
func (o *PatchAnalyticsReportingSettingsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch analytics reporting settings gateway timeout response has a 5xx status code
func (o *PatchAnalyticsReportingSettingsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch analytics reporting settings gateway timeout response a status code equal to that given
func (o *PatchAnalyticsReportingSettingsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchAnalyticsReportingSettingsGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/analytics/reporting/settings][%d] patchAnalyticsReportingSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchAnalyticsReportingSettingsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAnalyticsReportingSettingsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetAnalyticsReportingMetadataReader is a Reader for the GetAnalyticsReportingMetadata structure.
type GetAnalyticsReportingMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAnalyticsReportingMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAnalyticsReportingMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAnalyticsReportingMetadataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAnalyticsReportingMetadataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAnalyticsReportingMetadataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAnalyticsReportingMetadataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetAnalyticsReportingMetadataRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAnalyticsReportingMetadataRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAnalyticsReportingMetadataUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAnalyticsReportingMetadataTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAnalyticsReportingMetadataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAnalyticsReportingMetadataServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetAnalyticsReportingMetadataGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAnalyticsReportingMetadataOK creates a GetAnalyticsReportingMetadataOK with default headers values
func NewGetAnalyticsReportingMetadataOK() *GetAnalyticsReportingMetadataOK {
	return &GetAnalyticsReportingMetadataOK{}
}

/*
GetAnalyticsReportingMetadataOK describes a response with status code 200, with default header values.

successful operation
*/
type GetAnalyticsReportingMetadataOK struct {
	Payload *models.ReportMetaDataEntityListing
}

// IsSuccess returns true when this get analytics reporting metadata o k response has a 2xx status code
func (o *GetAnalyticsReportingMetadataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get analytics reporting metadata o k response has a 3xx status code
func (o *GetAnalyticsReportingMetadataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting metadata o k response has a 4xx status code
func (o *GetAnalyticsReportingMetadataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get analytics reporting metadata o k response has a 5xx status code
func (o *GetAnalyticsReportingMetadataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting metadata o k response a status code equal to that given
func (o *GetAnalyticsReportingMetadataOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAnalyticsReportingMetadataOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataOK  %+v", 200, o.Payload)
}

func (o *GetAnalyticsReportingMetadataOK) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataOK  %+v", 200, o.Payload)
}

func (o *GetAnalyticsReportingMetadataOK) GetPayload() *models.ReportMetaDataEntityListing {
	return o.Payload
}

func (o *GetAnalyticsReportingMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReportMetaDataEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingMetadataBadRequest creates a GetAnalyticsReportingMetadataBadRequest with default headers values
func NewGetAnalyticsReportingMetadataBadRequest() *GetAnalyticsReportingMetadataBadRequest {
	return &GetAnalyticsReportingMetadataBadRequest{}
}

/*
GetAnalyticsReportingMetadataBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetAnalyticsReportingMetadataBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting metadata bad request response has a 2xx status code
func (o *GetAnalyticsReportingMetadataBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting metadata bad request response has a 3xx status code
func (o *GetAnalyticsReportingMetadataBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting metadata bad request response has a 4xx status code
func (o *GetAnalyticsReportingMetadataBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting metadata bad request response has a 5xx status code
func (o *GetAnalyticsReportingMetadataBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting metadata bad request response a status code equal to that given
func (o *GetAnalyticsReportingMetadataBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAnalyticsReportingMetadataBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataBadRequest  %+v", 400, o.Payload)
}

func (o *GetAnalyticsReportingMetadataBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataBadRequest  %+v", 400, o.Payload)
}

func (o *GetAnalyticsReportingMetadataBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingMetadataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingMetadataUnauthorized creates a GetAnalyticsReportingMetadataUnauthorized with default headers values
func NewGetAnalyticsReportingMetadataUnauthorized() *GetAnalyticsReportingMetadataUnauthorized {
	return &GetAnalyticsReportingMetadataUnauthorized{}
}

/*
GetAnalyticsReportingMetadataUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetAnalyticsReportingMetadataUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting metadata unauthorized response has a 2xx status code
func (o *GetAnalyticsReportingMetadataUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting metadata unauthorized response has a 3xx status code
func (o *GetAnalyticsReportingMetadataUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting metadata unauthorized response has a 4xx status code
func (o *GetAnalyticsReportingMetadataUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting metadata unauthorized response has a 5xx status code
func (o *GetAnalyticsReportingMetadataUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting metadata unauthorized response a status code equal to that given
func (o *GetAnalyticsReportingMetadataUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAnalyticsReportingMetadataUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAnalyticsReportingMetadataUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAnalyticsReportingMetadataUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingMetadataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingMetadataForbidden creates a GetAnalyticsReportingMetadataForbidden with default headers values
func NewGetAnalyticsReportingMetadataForbidden() *GetAnalyticsReportingMetadataForbidden {
	return &GetAnalyticsReportingMetadataForbidden{}
}

/*
GetAnalyticsReportingMetadataForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetAnalyticsReportingMetadataForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting metadata forbidden response has a 2xx status code
func (o *GetAnalyticsReportingMetadataForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting metadata forbidden response has a 3xx status code
func (o *GetAnalyticsReportingMetadataForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting metadata forbidden response has a 4xx status code
func (o *GetAnalyticsReportingMetadataForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting metadata forbidden response has a 5xx status code
func (o *GetAnalyticsReportingMetadataForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting metadata forbidden response a status code equal to that given
func (o *GetAnalyticsReportingMetadataForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAnalyticsReportingMetadataForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataForbidden  %+v", 403, o.Payload)
}

func (o *GetAnalyticsReportingMetadataForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataForbidden  %+v", 403, o.Payload)
}

func (o *GetAnalyticsReportingMetadataForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingMetadataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingMetadataNotFound creates a GetAnalyticsReportingMetadataNotFound with default headers values
func NewGetAnalyticsReportingMetadataNotFound() *GetAnalyticsReportingMetadataNotFound {
	return &GetAnalyticsReportingMetadataNotFound{}
}

/*
GetAnalyticsReportingMetadataNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetAnalyticsReportingMetadataNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting metadata not found response has a 2xx status code
func (o *GetAnalyticsReportingMetadataNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting metadata not found response has a 3xx status code
func (o *GetAnalyticsReportingMetadataNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting metadata not found response has a 4xx status code
func (o *GetAnalyticsReportingMetadataNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting metadata not found response has a 5xx status code
func (o *GetAnalyticsReportingMetadataNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting metadata not found response a status code equal to that given
func (o *GetAnalyticsReportingMetadataNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAnalyticsReportingMetadataNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataNotFound  %+v", 404, o.Payload)
}

func (o *GetAnalyticsReportingMetadataNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataNotFound  %+v", 404, o.Payload)
}

func (o *GetAnalyticsReportingMetadataNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingMetadataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingMetadataRequestTimeout creates a GetAnalyticsReportingMetadataRequestTimeout with default headers values
func NewGetAnalyticsReportingMetadataRequestTimeout() *GetAnalyticsReportingMetadataRequestTimeout {
	return &GetAnalyticsReportingMetadataRequestTimeout{}
}

/*
GetAnalyticsReportingMetadataRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetAnalyticsReportingMetadataRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting metadata request timeout response has a 2xx status code
func (o *GetAnalyticsReportingMetadataRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting metadata request timeout response has a 3xx status code
func (o *GetAnalyticsReportingMetadataRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting metadata request timeout response has a 4xx status code
func (o *GetAnalyticsReportingMetadataRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting metadata request timeout response has a 5xx status code
func (o *GetAnalyticsReportingMetadataRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting metadata request timeout response a status code equal to that given
func (o *GetAnalyticsReportingMetadataRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetAnalyticsReportingMetadataRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAnalyticsReportingMetadataRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAnalyticsReportingMetadataRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingMetadataRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingMetadataRequestEntityTooLarge creates a GetAnalyticsReportingMetadataRequestEntityTooLarge with default headers values
func NewGetAnalyticsReportingMetadataRequestEntityTooLarge() *GetAnalyticsReportingMetadataRequestEntityTooLarge {
	return &GetAnalyticsReportingMetadataRequestEntityTooLarge{}
}

/*
GetAnalyticsReportingMetadataRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetAnalyticsReportingMetadataRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting metadata request entity too large response has a 2xx status code
func (o *GetAnalyticsReportingMetadataRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting metadata request entity too large response has a 3xx status code
func (o *GetAnalyticsReportingMetadataRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting metadata request entity too large response has a 4xx status code
func (o *GetAnalyticsReportingMetadataRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting metadata request entity too large response has a 5xx status code
func (o *GetAnalyticsReportingMetadataRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting metadata request entity too large response a status code equal to that given
func (o *GetAnalyticsReportingMetadataRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetAnalyticsReportingMetadataRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAnalyticsReportingMetadataRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAnalyticsReportingMetadataRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingMetadataRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingMetadataUnsupportedMediaType creates a GetAnalyticsReportingMetadataUnsupportedMediaType with default headers values
func NewGetAnalyticsReportingMetadataUnsupportedMediaType() *GetAnalyticsReportingMetadataUnsupportedMediaType {
	return &GetAnalyticsReportingMetadataUnsupportedMediaType{}
}

/*
GetAnalyticsReportingMetadataUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetAnalyticsReportingMetadataUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting metadata unsupported media type response has a 2xx status code
func (o *GetAnalyticsReportingMetadataUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting metadata unsupported media type response has a 3xx status code
func (o *GetAnalyticsReportingMetadataUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting metadata unsupported media type response has a 4xx status code
func (o *GetAnalyticsReportingMetadataUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting metadata unsupported media type response has a 5xx status code
func (o *GetAnalyticsReportingMetadataUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting metadata unsupported media type response a status code equal to that given
func (o *GetAnalyticsReportingMetadataUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetAnalyticsReportingMetadataUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAnalyticsReportingMetadataUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAnalyticsReportingMetadataUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingMetadataUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingMetadataTooManyRequests creates a GetAnalyticsReportingMetadataTooManyRequests with default headers values
func NewGetAnalyticsReportingMetadataTooManyRequests() *GetAnalyticsReportingMetadataTooManyRequests {
	return &GetAnalyticsReportingMetadataTooManyRequests{}
}

/*
GetAnalyticsReportingMetadataTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetAnalyticsReportingMetadataTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting metadata too many requests response has a 2xx status code
func (o *GetAnalyticsReportingMetadataTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting metadata too many requests response has a 3xx status code
func (o *GetAnalyticsReportingMetadataTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting metadata too many requests response has a 4xx status code
func (o *GetAnalyticsReportingMetadataTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting metadata too many requests response has a 5xx status code
func (o *GetAnalyticsReportingMetadataTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting metadata too many requests response a status code equal to that given
func (o *GetAnalyticsReportingMetadataTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAnalyticsReportingMetadataTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAnalyticsReportingMetadataTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAnalyticsReportingMetadataTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingMetadataTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingMetadataInternalServerError creates a GetAnalyticsReportingMetadataInternalServerError with default headers values
func NewGetAnalyticsReportingMetadataInternalServerError() *GetAnalyticsReportingMetadataInternalServerError {
	return &GetAnalyticsReportingMetadataInternalServerError{}
}

/*
GetAnalyticsReportingMetadataInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetAnalyticsReportingMetadataInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting metadata internal server error response has a 2xx status code
func (o *GetAnalyticsReportingMetadataInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting metadata internal server error response has a 3xx status code
func (o *GetAnalyticsReportingMetadataInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting metadata internal server error response has a 4xx status code
func (o *GetAnalyticsReportingMetadataInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get analytics reporting metadata internal server error response has a 5xx status code
func (o *GetAnalyticsReportingMetadataInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get analytics reporting metadata internal server error response a status code equal to that given
func (o *GetAnalyticsReportingMetadataInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAnalyticsReportingMetadataInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAnalyticsReportingMetadataInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAnalyticsReportingMetadataInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingMetadataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingMetadataServiceUnavailable creates a GetAnalyticsReportingMetadataServiceUnavailable with default headers values
func NewGetAnalyticsReportingMetadataServiceUnavailable() *GetAnalyticsReportingMetadataServiceUnavailable {
	return &GetAnalyticsReportingMetadataServiceUnavailable{}
}

/*
GetAnalyticsReportingMetadataServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetAnalyticsReportingMetadataServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting metadata service unavailable response has a 2xx status code
func (o *GetAnalyticsReportingMetadataServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting metadata service unavailable response has a 3xx status code
func (o *GetAnalyticsReportingMetadataServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting metadata service unavailable response has a 4xx status code
func (o *GetAnalyticsReportingMetadataServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get analytics reporting metadata service unavailable response has a 5xx status code
func (o *GetAnalyticsReportingMetadataServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get analytics reporting metadata service unavailable response a status code equal to that given
func (o *GetAnalyticsReportingMetadataServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAnalyticsReportingMetadataServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAnalyticsReportingMetadataServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAnalyticsReportingMetadataServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingMetadataServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingMetadataGatewayTimeout creates a GetAnalyticsReportingMetadataGatewayTimeout with default headers values
func NewGetAnalyticsReportingMetadataGatewayTimeout() *GetAnalyticsReportingMetadataGatewayTimeout {
	return &GetAnalyticsReportingMetadataGatewayTimeout{}
}

/*
GetAnalyticsReportingMetadataGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetAnalyticsReportingMetadataGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting metadata gateway timeout response has a 2xx status code
func (o *GetAnalyticsReportingMetadataGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting metadata gateway timeout response has a 3xx status code
func (o *GetAnalyticsReportingMetadataGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting metadata gateway timeout response has a 4xx status code
func (o *GetAnalyticsReportingMetadataGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get analytics reporting metadata gateway timeout response has a 5xx status code
func (o *GetAnalyticsReportingMetadataGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get analytics reporting metadata gateway timeout response a status code equal to that given
func (o *GetAnalyticsReportingMetadataGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetAnalyticsReportingMetadataGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAnalyticsReportingMetadataGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/metadata][%d] getAnalyticsReportingMetadataGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAnalyticsReportingMetadataGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingMetadataGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetAnalyticsReportingSettingsReader is a Reader for the GetAnalyticsReportingSettings structure.
type GetAnalyticsReportingSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAnalyticsReportingSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAnalyticsReportingSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAnalyticsReportingSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAnalyticsReportingSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAnalyticsReportingSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAnalyticsReportingSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetAnalyticsReportingSettingsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAnalyticsReportingSettingsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAnalyticsReportingSettingsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAnalyticsReportingSettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAnalyticsReportingSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAnalyticsReportingSettingsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetAnalyticsReportingSettingsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAnalyticsReportingSettingsOK creates a GetAnalyticsReportingSettingsOK with default headers values
func NewGetAnalyticsReportingSettingsOK() *GetAnalyticsReportingSettingsOK {
	return &GetAnalyticsReportingSettingsOK{}
}

/*
GetAnalyticsReportingSettingsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetAnalyticsReportingSettingsOK struct {
	Payload *models.AnalyticsReportingSettings
}

// IsSuccess returns true when this get analytics reporting settings o k response has a 2xx status code
func (o *GetAnalyticsReportingSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get analytics reporting settings o k response has a 3xx status code
func (o *GetAnalyticsReportingSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting settings o k response has a 4xx status code
func (o *GetAnalyticsReportingSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get analytics reporting settings o k response has a 5xx status code
func (o *GetAnalyticsReportingSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting settings o k response a status code equal to that given
func (o *GetAnalyticsReportingSettingsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAnalyticsReportingSettingsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsOK  %+v", 200, o.Payload)
}

func (o *GetAnalyticsReportingSettingsOK) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsOK  %+v", 200, o.Payload)
}

func (o *GetAnalyticsReportingSettingsOK) GetPayload() *models.AnalyticsReportingSettings {
	return o.Payload
}

func (o *GetAnalyticsReportingSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AnalyticsReportingSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingSettingsBadRequest creates a GetAnalyticsReportingSettingsBadRequest with default headers values
func NewGetAnalyticsReportingSettingsBadRequest() *GetAnalyticsReportingSettingsBadRequest {
	return &GetAnalyticsReportingSettingsBadRequest{}
}

/*
GetAnalyticsReportingSettingsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetAnalyticsReportingSettingsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting settings bad request response has a 2xx status code
func (o *GetAnalyticsReportingSettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting settings bad request response has a 3xx status code
func (o *GetAnalyticsReportingSettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting settings bad request response has a 4xx status code
func (o *GetAnalyticsReportingSettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting settings bad request response has a 5xx status code
func (o *GetAnalyticsReportingSettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting settings bad request response a status code equal to that given
func (o *GetAnalyticsReportingSettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAnalyticsReportingSettingsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAnalyticsReportingSettingsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAnalyticsReportingSettingsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingSettingsUnauthorized creates a GetAnalyticsReportingSettingsUnauthorized with default headers values
func NewGetAnalyticsReportingSettingsUnauthorized() *GetAnalyticsReportingSettingsUnauthorized {
	return &GetAnalyticsReportingSettingsUnauthorized{}
}

/*
GetAnalyticsReportingSettingsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetAnalyticsReportingSettingsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting settings unauthorized response has a 2xx status code
func (o *GetAnalyticsReportingSettingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting settings unauthorized response has a 3xx status code
func (o *GetAnalyticsReportingSettingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting settings unauthorized response has a 4xx status code
func (o *GetAnalyticsReportingSettingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting settings unauthorized response has a 5xx status code
func (o *GetAnalyticsReportingSettingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting settings unauthorized response a status code equal to that given
func (o *GetAnalyticsReportingSettingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAnalyticsReportingSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAnalyticsReportingSettingsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAnalyticsReportingSettingsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingSettingsForbidden creates a GetAnalyticsReportingSettingsForbidden with default headers values
func NewGetAnalyticsReportingSettingsForbidden() *GetAnalyticsReportingSettingsForbidden {
	return &GetAnalyticsReportingSettingsForbidden{}
}

/*
GetAnalyticsReportingSettingsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetAnalyticsReportingSettingsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting settings forbidden response has a 2xx status code
func (o *GetAnalyticsReportingSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting settings forbidden response has a 3xx status code
func (o *GetAnalyticsReportingSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting settings forbidden response has a 4xx status code
func (o *GetAnalyticsReportingSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting settings forbidden response has a 5xx status code
func (o *GetAnalyticsReportingSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting settings forbidden response a status code equal to that given
func (o *GetAnalyticsReportingSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAnalyticsReportingSettingsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsForbidden  %+v", 403, o.Payload)
}

func (o *GetAnalyticsReportingSettingsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsForbidden  %+v", 403, o.Payload)
}

func (o *GetAnalyticsReportingSettingsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingSettingsNotFound creates a GetAnalyticsReportingSettingsNotFound with default headers values
func NewGetAnalyticsReportingSettingsNotFound() *GetAnalyticsReportingSettingsNotFound {
	return &GetAnalyticsReportingSettingsNotFound{}
}

/*
GetAnalyticsReportingSettingsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetAnalyticsReportingSettingsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting settings not found response has a 2xx status code
func (o *GetAnalyticsReportingSettingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting settings not found response has a 3xx status code
func (o *GetAnalyticsReportingSettingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting settings not found response has a 4xx status code
func (o *GetAnalyticsReportingSettingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting settings not found response has a 5xx status code
func (o *GetAnalyticsReportingSettingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting settings not found response a status code equal to that given
func (o *GetAnalyticsReportingSettingsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAnalyticsReportingSettingsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsNotFound  %+v", 404, o.Payload)
}

func (o *GetAnalyticsReportingSettingsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsNotFound  %+v", 404, o.Payload)
}

func (o *GetAnalyticsReportingSettingsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingSettingsRequestTimeout creates a GetAnalyticsReportingSettingsRequestTimeout with default headers values
func NewGetAnalyticsReportingSettingsRequestTimeout() *GetAnalyticsReportingSettingsRequestTimeout {
	return &GetAnalyticsReportingSettingsRequestTimeout{}
}

/*
GetAnalyticsReportingSettingsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetAnalyticsReportingSettingsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting settings request timeout response has a 2xx status code
func (o *GetAnalyticsReportingSettingsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting settings request timeout response has a 3xx status code
func (o *GetAnalyticsReportingSettingsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting settings request timeout response has a 4xx status code
func (o *GetAnalyticsReportingSettingsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting settings request timeout response has a 5xx status code
func (o *GetAnalyticsReportingSettingsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting settings request timeout response a status code equal to that given
func (o *GetAnalyticsReportingSettingsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetAnalyticsReportingSettingsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAnalyticsReportingSettingsRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAnalyticsReportingSettingsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingSettingsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingSettingsRequestEntityTooLarge creates a GetAnalyticsReportingSettingsRequestEntityTooLarge with default headers values
func NewGetAnalyticsReportingSettingsRequestEntityTooLarge() *GetAnalyticsReportingSettingsRequestEntityTooLarge {
	return &GetAnalyticsReportingSettingsRequestEntityTooLarge{}
}

/*
GetAnalyticsReportingSettingsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetAnalyticsReportingSettingsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting settings request entity too large response has a 2xx status code
func (o *GetAnalyticsReportingSettingsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting settings request entity too large response has a 3xx status code
func (o *GetAnalyticsReportingSettingsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting settings request entity too large response has a 4xx status code
func (o *GetAnalyticsReportingSettingsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting settings request entity too large response has a 5xx status code
func (o *GetAnalyticsReportingSettingsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting settings request entity too large response a status code equal to that given
func (o *GetAnalyticsReportingSettingsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetAnalyticsReportingSettingsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAnalyticsReportingSettingsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAnalyticsReportingSettingsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingSettingsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingSettingsUnsupportedMediaType creates a GetAnalyticsReportingSettingsUnsupportedMediaType with default headers values
func NewGetAnalyticsReportingSettingsUnsupportedMediaType() *GetAnalyticsReportingSettingsUnsupportedMediaType {
	return &GetAnalyticsReportingSettingsUnsupportedMediaType{}
}

/*
GetAnalyticsReportingSettingsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetAnalyticsReportingSettingsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting settings unsupported media type response has a 2xx status code
func (o *GetAnalyticsReportingSettingsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting settings unsupported media type response has a 3xx status code
func (o *GetAnalyticsReportingSettingsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting settings unsupported media type response has a 4xx status code
func (o *GetAnalyticsReportingSettingsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting settings unsupported media type response has a 5xx status code
func (o *GetAnalyticsReportingSettingsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting settings unsupported media type response a status code equal to that given
func (o *GetAnalyticsReportingSettingsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetAnalyticsReportingSettingsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAnalyticsReportingSettingsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAnalyticsReportingSettingsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingSettingsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingSettingsTooManyRequests creates a GetAnalyticsReportingSettingsTooManyRequests with default headers values
func NewGetAnalyticsReportingSettingsTooManyRequests() *GetAnalyticsReportingSettingsTooManyRequests {
	return &GetAnalyticsReportingSettingsTooManyRequests{}
}

/*
GetAnalyticsReportingSettingsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetAnalyticsReportingSettingsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting settings too many requests response has a 2xx status code
func (o *GetAnalyticsReportingSettingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting settings too many requests response has a 3xx status code
func (o *GetAnalyticsReportingSettingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting settings too many requests response has a 4xx status code
func (o *GetAnalyticsReportingSettingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting settings too many requests response has a 5xx status code
func (o *GetAnalyticsReportingSettingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting settings too many requests response a status code equal to that given
func (o *GetAnalyticsReportingSettingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAnalyticsReportingSettingsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAnalyticsReportingSettingsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAnalyticsReportingSettingsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingSettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingSettingsInternalServerError creates a GetAnalyticsReportingSettingsInternalServerError with default headers values
func NewGetAnalyticsReportingSettingsInternalServerError() *GetAnalyticsReportingSettingsInternalServerError {
	return &GetAnalyticsReportingSettingsInternalServerError{}
}

/*
GetAnalyticsReportingSettingsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetAnalyticsReportingSettingsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting settings internal server error response has a 2xx status code
func (o *GetAnalyticsReportingSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting settings internal server error response has a 3xx status code
func (o *GetAnalyticsReportingSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting settings internal server error response has a 4xx status code
func (o *GetAnalyticsReportingSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get analytics reporting settings internal server error response has a 5xx status code
func (o *GetAnalyticsReportingSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get analytics reporting settings internal server error response a status code equal to that given
func (o *GetAnalyticsReportingSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAnalyticsReportingSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAnalyticsReportingSettingsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAnalyticsReportingSettingsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingSettingsServiceUnavailable creates a GetAnalyticsReportingSettingsServiceUnavailable with default headers values
func NewGetAnalyticsReportingSettingsServiceUnavailable() *GetAnalyticsReportingSettingsServiceUnavailable {
	return &GetAnalyticsReportingSettingsServiceUnavailable{}
}

/*
GetAnalyticsReportingSettingsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetAnalyticsReportingSettingsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting settings service unavailable response has a 2xx status code
func (o *GetAnalyticsReportingSettingsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting settings service unavailable response has a 3xx status code
func (o *GetAnalyticsReportingSettingsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting settings service unavailable response has a 4xx status code
func (o *GetAnalyticsReportingSettingsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get analytics reporting settings service unavailable response has a 5xx status code
func (o *GetAnalyticsReportingSettingsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get analytics reporting settings service unavailable response a status code equal to that given
func (o *GetAnalyticsReportingSettingsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAnalyticsReportingSettingsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAnalyticsReportingSettingsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAnalyticsReportingSettingsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingSettingsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingSettingsGatewayTimeout creates a GetAnalyticsReportingSettingsGatewayTimeout with default headers values
func NewGetAnalyticsReportingSettingsGatewayTimeout() *GetAnalyticsReportingSettingsGatewayTimeout {
	return &GetAnalyticsReportingSettingsGatewayTimeout{}
}

/*
GetAnalyticsReportingSettingsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetAnalyticsReportingSettingsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting settings gateway timeout response has a 2xx status code
func (o *GetAnalyticsReportingSettingsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting settings gateway timeout response has a 3xx status code
func (o *GetAnalyticsReportingSettingsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting settings gateway timeout response has a 4xx status code
func (o *GetAnalyticsReportingSettingsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get analytics reporting settings gateway timeout response has a 5xx status code
func (o *GetAnalyticsReportingSettingsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get analytics reporting settings gateway timeout response a status code equal to that given
func (o *GetAnalyticsReportingSettingsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetAnalyticsReportingSettingsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAnalyticsReportingSettingsGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/settings][%d] getAnalyticsReportingSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAnalyticsReportingSettingsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingSettingsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

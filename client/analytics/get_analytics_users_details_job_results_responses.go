// Code generated by go-swagger; DO NOT EDIT.

package analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetAnalyticsUsersDetailsJobResultsReader is a Reader for the GetAnalyticsUsersDetailsJobResults structure.
type GetAnalyticsUsersDetailsJobResultsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAnalyticsUsersDetailsJobResultsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAnalyticsUsersDetailsJobResultsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAnalyticsUsersDetailsJobResultsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAnalyticsUsersDetailsJobResultsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAnalyticsUsersDetailsJobResultsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAnalyticsUsersDetailsJobResultsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetAnalyticsUsersDetailsJobResultsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAnalyticsUsersDetailsJobResultsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAnalyticsUsersDetailsJobResultsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAnalyticsUsersDetailsJobResultsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAnalyticsUsersDetailsJobResultsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAnalyticsUsersDetailsJobResultsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetAnalyticsUsersDetailsJobResultsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAnalyticsUsersDetailsJobResultsOK creates a GetAnalyticsUsersDetailsJobResultsOK with default headers values
func NewGetAnalyticsUsersDetailsJobResultsOK() *GetAnalyticsUsersDetailsJobResultsOK {
	return &GetAnalyticsUsersDetailsJobResultsOK{}
}

/*GetAnalyticsUsersDetailsJobResultsOK handles this case with default header values.

successful operation
*/
type GetAnalyticsUsersDetailsJobResultsOK struct {
	Payload *models.AnalyticsUserDetailsAsyncQueryResponse
}

func (o *GetAnalyticsUsersDetailsJobResultsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/users/details/jobs/{jobId}/results][%d] getAnalyticsUsersDetailsJobResultsOK  %+v", 200, o.Payload)
}

func (o *GetAnalyticsUsersDetailsJobResultsOK) GetPayload() *models.AnalyticsUserDetailsAsyncQueryResponse {
	return o.Payload
}

func (o *GetAnalyticsUsersDetailsJobResultsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AnalyticsUserDetailsAsyncQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsUsersDetailsJobResultsBadRequest creates a GetAnalyticsUsersDetailsJobResultsBadRequest with default headers values
func NewGetAnalyticsUsersDetailsJobResultsBadRequest() *GetAnalyticsUsersDetailsJobResultsBadRequest {
	return &GetAnalyticsUsersDetailsJobResultsBadRequest{}
}

/*GetAnalyticsUsersDetailsJobResultsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetAnalyticsUsersDetailsJobResultsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetAnalyticsUsersDetailsJobResultsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/users/details/jobs/{jobId}/results][%d] getAnalyticsUsersDetailsJobResultsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAnalyticsUsersDetailsJobResultsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsUsersDetailsJobResultsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsUsersDetailsJobResultsUnauthorized creates a GetAnalyticsUsersDetailsJobResultsUnauthorized with default headers values
func NewGetAnalyticsUsersDetailsJobResultsUnauthorized() *GetAnalyticsUsersDetailsJobResultsUnauthorized {
	return &GetAnalyticsUsersDetailsJobResultsUnauthorized{}
}

/*GetAnalyticsUsersDetailsJobResultsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetAnalyticsUsersDetailsJobResultsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetAnalyticsUsersDetailsJobResultsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/users/details/jobs/{jobId}/results][%d] getAnalyticsUsersDetailsJobResultsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAnalyticsUsersDetailsJobResultsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsUsersDetailsJobResultsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsUsersDetailsJobResultsForbidden creates a GetAnalyticsUsersDetailsJobResultsForbidden with default headers values
func NewGetAnalyticsUsersDetailsJobResultsForbidden() *GetAnalyticsUsersDetailsJobResultsForbidden {
	return &GetAnalyticsUsersDetailsJobResultsForbidden{}
}

/*GetAnalyticsUsersDetailsJobResultsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetAnalyticsUsersDetailsJobResultsForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetAnalyticsUsersDetailsJobResultsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/users/details/jobs/{jobId}/results][%d] getAnalyticsUsersDetailsJobResultsForbidden  %+v", 403, o.Payload)
}

func (o *GetAnalyticsUsersDetailsJobResultsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsUsersDetailsJobResultsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsUsersDetailsJobResultsNotFound creates a GetAnalyticsUsersDetailsJobResultsNotFound with default headers values
func NewGetAnalyticsUsersDetailsJobResultsNotFound() *GetAnalyticsUsersDetailsJobResultsNotFound {
	return &GetAnalyticsUsersDetailsJobResultsNotFound{}
}

/*GetAnalyticsUsersDetailsJobResultsNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetAnalyticsUsersDetailsJobResultsNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetAnalyticsUsersDetailsJobResultsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/users/details/jobs/{jobId}/results][%d] getAnalyticsUsersDetailsJobResultsNotFound  %+v", 404, o.Payload)
}

func (o *GetAnalyticsUsersDetailsJobResultsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsUsersDetailsJobResultsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsUsersDetailsJobResultsRequestTimeout creates a GetAnalyticsUsersDetailsJobResultsRequestTimeout with default headers values
func NewGetAnalyticsUsersDetailsJobResultsRequestTimeout() *GetAnalyticsUsersDetailsJobResultsRequestTimeout {
	return &GetAnalyticsUsersDetailsJobResultsRequestTimeout{}
}

/*GetAnalyticsUsersDetailsJobResultsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetAnalyticsUsersDetailsJobResultsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetAnalyticsUsersDetailsJobResultsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/users/details/jobs/{jobId}/results][%d] getAnalyticsUsersDetailsJobResultsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAnalyticsUsersDetailsJobResultsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsUsersDetailsJobResultsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsUsersDetailsJobResultsRequestEntityTooLarge creates a GetAnalyticsUsersDetailsJobResultsRequestEntityTooLarge with default headers values
func NewGetAnalyticsUsersDetailsJobResultsRequestEntityTooLarge() *GetAnalyticsUsersDetailsJobResultsRequestEntityTooLarge {
	return &GetAnalyticsUsersDetailsJobResultsRequestEntityTooLarge{}
}

/*GetAnalyticsUsersDetailsJobResultsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetAnalyticsUsersDetailsJobResultsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetAnalyticsUsersDetailsJobResultsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/users/details/jobs/{jobId}/results][%d] getAnalyticsUsersDetailsJobResultsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAnalyticsUsersDetailsJobResultsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsUsersDetailsJobResultsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsUsersDetailsJobResultsUnsupportedMediaType creates a GetAnalyticsUsersDetailsJobResultsUnsupportedMediaType with default headers values
func NewGetAnalyticsUsersDetailsJobResultsUnsupportedMediaType() *GetAnalyticsUsersDetailsJobResultsUnsupportedMediaType {
	return &GetAnalyticsUsersDetailsJobResultsUnsupportedMediaType{}
}

/*GetAnalyticsUsersDetailsJobResultsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetAnalyticsUsersDetailsJobResultsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetAnalyticsUsersDetailsJobResultsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/users/details/jobs/{jobId}/results][%d] getAnalyticsUsersDetailsJobResultsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAnalyticsUsersDetailsJobResultsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsUsersDetailsJobResultsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsUsersDetailsJobResultsTooManyRequests creates a GetAnalyticsUsersDetailsJobResultsTooManyRequests with default headers values
func NewGetAnalyticsUsersDetailsJobResultsTooManyRequests() *GetAnalyticsUsersDetailsJobResultsTooManyRequests {
	return &GetAnalyticsUsersDetailsJobResultsTooManyRequests{}
}

/*GetAnalyticsUsersDetailsJobResultsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetAnalyticsUsersDetailsJobResultsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetAnalyticsUsersDetailsJobResultsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/users/details/jobs/{jobId}/results][%d] getAnalyticsUsersDetailsJobResultsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAnalyticsUsersDetailsJobResultsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsUsersDetailsJobResultsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsUsersDetailsJobResultsInternalServerError creates a GetAnalyticsUsersDetailsJobResultsInternalServerError with default headers values
func NewGetAnalyticsUsersDetailsJobResultsInternalServerError() *GetAnalyticsUsersDetailsJobResultsInternalServerError {
	return &GetAnalyticsUsersDetailsJobResultsInternalServerError{}
}

/*GetAnalyticsUsersDetailsJobResultsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetAnalyticsUsersDetailsJobResultsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetAnalyticsUsersDetailsJobResultsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/users/details/jobs/{jobId}/results][%d] getAnalyticsUsersDetailsJobResultsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAnalyticsUsersDetailsJobResultsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsUsersDetailsJobResultsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsUsersDetailsJobResultsServiceUnavailable creates a GetAnalyticsUsersDetailsJobResultsServiceUnavailable with default headers values
func NewGetAnalyticsUsersDetailsJobResultsServiceUnavailable() *GetAnalyticsUsersDetailsJobResultsServiceUnavailable {
	return &GetAnalyticsUsersDetailsJobResultsServiceUnavailable{}
}

/*GetAnalyticsUsersDetailsJobResultsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetAnalyticsUsersDetailsJobResultsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetAnalyticsUsersDetailsJobResultsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/users/details/jobs/{jobId}/results][%d] getAnalyticsUsersDetailsJobResultsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAnalyticsUsersDetailsJobResultsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsUsersDetailsJobResultsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsUsersDetailsJobResultsGatewayTimeout creates a GetAnalyticsUsersDetailsJobResultsGatewayTimeout with default headers values
func NewGetAnalyticsUsersDetailsJobResultsGatewayTimeout() *GetAnalyticsUsersDetailsJobResultsGatewayTimeout {
	return &GetAnalyticsUsersDetailsJobResultsGatewayTimeout{}
}

/*GetAnalyticsUsersDetailsJobResultsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetAnalyticsUsersDetailsJobResultsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetAnalyticsUsersDetailsJobResultsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/users/details/jobs/{jobId}/results][%d] getAnalyticsUsersDetailsJobResultsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAnalyticsUsersDetailsJobResultsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsUsersDetailsJobResultsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

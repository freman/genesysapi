// Code generated by go-swagger; DO NOT EDIT.

package analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the analytics client
type API interface {
	/*
	   DeleteAnalyticsReportingSchedule deletes a scheduled report job
	*/
	DeleteAnalyticsReportingSchedule(ctx context.Context, params *DeleteAnalyticsReportingScheduleParams) (*DeleteAnalyticsReportingScheduleOK, error)
	/*
	   GetAnalyticsReportingExports gets all view export requests for a user
	*/
	GetAnalyticsReportingExports(ctx context.Context, params *GetAnalyticsReportingExportsParams) (*GetAnalyticsReportingExportsOK, error)
	/*
	   GetAnalyticsReportingExportsMetadata gets all export metadata
	*/
	GetAnalyticsReportingExportsMetadata(ctx context.Context, params *GetAnalyticsReportingExportsMetadataParams) (*GetAnalyticsReportingExportsMetadataOK, error)
	/*
	   GetAnalyticsReportingMetadata gets list of reporting metadata
	*/
	GetAnalyticsReportingMetadata(ctx context.Context, params *GetAnalyticsReportingMetadataParams) (*GetAnalyticsReportingMetadataOK, error)
	/*
	   GetAnalyticsReportingReportIDMetadata gets a reporting metadata
	*/
	GetAnalyticsReportingReportIDMetadata(ctx context.Context, params *GetAnalyticsReportingReportIDMetadataParams) (*GetAnalyticsReportingReportIDMetadataOK, error)
	/*
	   GetAnalyticsReportingReportformats gets a list of report formats
	   Get a list of report formats.
	*/
	GetAnalyticsReportingReportformats(ctx context.Context, params *GetAnalyticsReportingReportformatsParams) (*GetAnalyticsReportingReportformatsOK, error)
	/*
	   GetAnalyticsReportingSchedule gets a scheduled report job
	*/
	GetAnalyticsReportingSchedule(ctx context.Context, params *GetAnalyticsReportingScheduleParams) (*GetAnalyticsReportingScheduleOK, error)
	/*
	   GetAnalyticsReportingScheduleHistory gets list of completed scheduled report jobs
	*/
	GetAnalyticsReportingScheduleHistory(ctx context.Context, params *GetAnalyticsReportingScheduleHistoryParams) (*GetAnalyticsReportingScheduleHistoryOK, error)
	/*
	   GetAnalyticsReportingScheduleHistoryLatest gets most recently completed scheduled report job
	*/
	GetAnalyticsReportingScheduleHistoryLatest(ctx context.Context, params *GetAnalyticsReportingScheduleHistoryLatestParams) (*GetAnalyticsReportingScheduleHistoryLatestOK, error)
	/*
	   GetAnalyticsReportingScheduleHistoryRunID as completed scheduled report job
	   A completed scheduled report job.
	*/
	GetAnalyticsReportingScheduleHistoryRunID(ctx context.Context, params *GetAnalyticsReportingScheduleHistoryRunIDParams) (*GetAnalyticsReportingScheduleHistoryRunIDOK, error)
	/*
	   GetAnalyticsReportingSchedules gets a list of scheduled report jobs
	   Get a list of scheduled report jobs.
	*/
	GetAnalyticsReportingSchedules(ctx context.Context, params *GetAnalyticsReportingSchedulesParams) (*GetAnalyticsReportingSchedulesOK, error)
	/*
	   GetAnalyticsReportingTimeperiods gets a list of report time periods
	*/
	GetAnalyticsReportingTimeperiods(ctx context.Context, params *GetAnalyticsReportingTimeperiodsParams) (*GetAnalyticsReportingTimeperiodsOK, error)
	/*
	   PostAnalyticsBotsAggregatesQuery queries for bot aggregates
	*/
	PostAnalyticsBotsAggregatesQuery(ctx context.Context, params *PostAnalyticsBotsAggregatesQueryParams) (*PostAnalyticsBotsAggregatesQueryOK, error)
	/*
	   PostAnalyticsReportingExports generates a view export request
	   This API creates a reporting export but the desired way to export analytics data is to use the analytics query APIs instead
	*/
	PostAnalyticsReportingExports(ctx context.Context, params *PostAnalyticsReportingExportsParams) (*PostAnalyticsReportingExportsOK, error)
	/*
	   PostAnalyticsReportingScheduleRunreport places a scheduled report immediately into the reporting queue
	*/
	PostAnalyticsReportingScheduleRunreport(ctx context.Context, params *PostAnalyticsReportingScheduleRunreportParams) (*PostAnalyticsReportingScheduleRunreportAccepted, error)
	/*
	   PostAnalyticsReportingSchedules creates a scheduled report job
	   Create a scheduled report job.
	*/
	PostAnalyticsReportingSchedules(ctx context.Context, params *PostAnalyticsReportingSchedulesParams) (*PostAnalyticsReportingSchedulesOK, error)
	/*
	   PostAnalyticsTranscriptsAggregatesQuery queries for transcript aggregates
	*/
	PostAnalyticsTranscriptsAggregatesQuery(ctx context.Context, params *PostAnalyticsTranscriptsAggregatesQueryParams) (*PostAnalyticsTranscriptsAggregatesQueryOK, error)
	/*
	   PutAnalyticsReportingSchedule updates a scheduled report job
	*/
	PutAnalyticsReportingSchedule(ctx context.Context, params *PutAnalyticsReportingScheduleParams) (*PutAnalyticsReportingScheduleOK, error)
}

// New creates a new analytics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for analytics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteAnalyticsReportingSchedule deletes a scheduled report job
*/
func (a *Client) DeleteAnalyticsReportingSchedule(ctx context.Context, params *DeleteAnalyticsReportingScheduleParams) (*DeleteAnalyticsReportingScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAnalyticsReportingSchedule",
		Method:             "DELETE",
		PathPattern:        "/api/v2/analytics/reporting/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAnalyticsReportingScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAnalyticsReportingScheduleOK), nil

}

/*
GetAnalyticsReportingExports gets all view export requests for a user
*/
func (a *Client) GetAnalyticsReportingExports(ctx context.Context, params *GetAnalyticsReportingExportsParams) (*GetAnalyticsReportingExportsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingExports",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/exports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingExportsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingExportsOK), nil

}

/*
GetAnalyticsReportingExportsMetadata gets all export metadata
*/
func (a *Client) GetAnalyticsReportingExportsMetadata(ctx context.Context, params *GetAnalyticsReportingExportsMetadataParams) (*GetAnalyticsReportingExportsMetadataOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingExportsMetadata",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/exports/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingExportsMetadataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingExportsMetadataOK), nil

}

/*
GetAnalyticsReportingMetadata gets list of reporting metadata
*/
func (a *Client) GetAnalyticsReportingMetadata(ctx context.Context, params *GetAnalyticsReportingMetadataParams) (*GetAnalyticsReportingMetadataOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingMetadata",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingMetadataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingMetadataOK), nil

}

/*
GetAnalyticsReportingReportIDMetadata gets a reporting metadata
*/
func (a *Client) GetAnalyticsReportingReportIDMetadata(ctx context.Context, params *GetAnalyticsReportingReportIDMetadataParams) (*GetAnalyticsReportingReportIDMetadataOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingReportIdMetadata",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/{reportId}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingReportIDMetadataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingReportIDMetadataOK), nil

}

/*
GetAnalyticsReportingReportformats gets a list of report formats

Get a list of report formats.
*/
func (a *Client) GetAnalyticsReportingReportformats(ctx context.Context, params *GetAnalyticsReportingReportformatsParams) (*GetAnalyticsReportingReportformatsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingReportformats",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/reportformats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingReportformatsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingReportformatsOK), nil

}

/*
GetAnalyticsReportingSchedule gets a scheduled report job
*/
func (a *Client) GetAnalyticsReportingSchedule(ctx context.Context, params *GetAnalyticsReportingScheduleParams) (*GetAnalyticsReportingScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingSchedule",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingScheduleOK), nil

}

/*
GetAnalyticsReportingScheduleHistory gets list of completed scheduled report jobs
*/
func (a *Client) GetAnalyticsReportingScheduleHistory(ctx context.Context, params *GetAnalyticsReportingScheduleHistoryParams) (*GetAnalyticsReportingScheduleHistoryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingScheduleHistory",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/schedules/{scheduleId}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingScheduleHistoryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingScheduleHistoryOK), nil

}

/*
GetAnalyticsReportingScheduleHistoryLatest gets most recently completed scheduled report job
*/
func (a *Client) GetAnalyticsReportingScheduleHistoryLatest(ctx context.Context, params *GetAnalyticsReportingScheduleHistoryLatestParams) (*GetAnalyticsReportingScheduleHistoryLatestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingScheduleHistoryLatest",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/schedules/{scheduleId}/history/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingScheduleHistoryLatestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingScheduleHistoryLatestOK), nil

}

/*
GetAnalyticsReportingScheduleHistoryRunID as completed scheduled report job

A completed scheduled report job.
*/
func (a *Client) GetAnalyticsReportingScheduleHistoryRunID(ctx context.Context, params *GetAnalyticsReportingScheduleHistoryRunIDParams) (*GetAnalyticsReportingScheduleHistoryRunIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingScheduleHistoryRunId",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/schedules/{scheduleId}/history/{runId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingScheduleHistoryRunIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingScheduleHistoryRunIDOK), nil

}

/*
GetAnalyticsReportingSchedules gets a list of scheduled report jobs

Get a list of scheduled report jobs.
*/
func (a *Client) GetAnalyticsReportingSchedules(ctx context.Context, params *GetAnalyticsReportingSchedulesParams) (*GetAnalyticsReportingSchedulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingSchedules",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingSchedulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingSchedulesOK), nil

}

/*
GetAnalyticsReportingTimeperiods gets a list of report time periods
*/
func (a *Client) GetAnalyticsReportingTimeperiods(ctx context.Context, params *GetAnalyticsReportingTimeperiodsParams) (*GetAnalyticsReportingTimeperiodsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingTimeperiods",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/timeperiods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingTimeperiodsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingTimeperiodsOK), nil

}

/*
PostAnalyticsBotsAggregatesQuery queries for bot aggregates
*/
func (a *Client) PostAnalyticsBotsAggregatesQuery(ctx context.Context, params *PostAnalyticsBotsAggregatesQueryParams) (*PostAnalyticsBotsAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsBotsAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/bots/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsBotsAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsBotsAggregatesQueryOK), nil

}

/*
PostAnalyticsReportingExports generates a view export request

This API creates a reporting export but the desired way to export analytics data is to use the analytics query APIs instead
*/
func (a *Client) PostAnalyticsReportingExports(ctx context.Context, params *PostAnalyticsReportingExportsParams) (*PostAnalyticsReportingExportsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsReportingExports",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/reporting/exports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsReportingExportsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsReportingExportsOK), nil

}

/*
PostAnalyticsReportingScheduleRunreport places a scheduled report immediately into the reporting queue
*/
func (a *Client) PostAnalyticsReportingScheduleRunreport(ctx context.Context, params *PostAnalyticsReportingScheduleRunreportParams) (*PostAnalyticsReportingScheduleRunreportAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsReportingScheduleRunreport",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/reporting/schedules/{scheduleId}/runreport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsReportingScheduleRunreportReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsReportingScheduleRunreportAccepted), nil

}

/*
PostAnalyticsReportingSchedules creates a scheduled report job

Create a scheduled report job.
*/
func (a *Client) PostAnalyticsReportingSchedules(ctx context.Context, params *PostAnalyticsReportingSchedulesParams) (*PostAnalyticsReportingSchedulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsReportingSchedules",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/reporting/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsReportingSchedulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsReportingSchedulesOK), nil

}

/*
PostAnalyticsTranscriptsAggregatesQuery queries for transcript aggregates
*/
func (a *Client) PostAnalyticsTranscriptsAggregatesQuery(ctx context.Context, params *PostAnalyticsTranscriptsAggregatesQueryParams) (*PostAnalyticsTranscriptsAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsTranscriptsAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/transcripts/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsTranscriptsAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsTranscriptsAggregatesQueryOK), nil

}

/*
PutAnalyticsReportingSchedule updates a scheduled report job
*/
func (a *Client) PutAnalyticsReportingSchedule(ctx context.Context, params *PutAnalyticsReportingScheduleParams) (*PutAnalyticsReportingScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAnalyticsReportingSchedule",
		Method:             "PUT",
		PathPattern:        "/api/v2/analytics/reporting/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAnalyticsReportingScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAnalyticsReportingScheduleOK), nil

}

// Code generated by go-swagger; DO NOT EDIT.

package analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the analytics client
type API interface {
	/*
	   DeleteAnalyticsConversationsDetailsJob deletes cancel an async details job
	*/
	DeleteAnalyticsConversationsDetailsJob(ctx context.Context, params *DeleteAnalyticsConversationsDetailsJobParams) (*DeleteAnalyticsConversationsDetailsJobNoContent, error)
	/*
	   DeleteAnalyticsReportingSchedule deletes a scheduled report job
	*/
	DeleteAnalyticsReportingSchedule(ctx context.Context, params *DeleteAnalyticsReportingScheduleParams) (*DeleteAnalyticsReportingScheduleOK, error)
	/*
	   DeleteAnalyticsUsersDetailsJob deletes cancel an async request
	*/
	DeleteAnalyticsUsersDetailsJob(ctx context.Context, params *DeleteAnalyticsUsersDetailsJobParams) (*DeleteAnalyticsUsersDetailsJobNoContent, error)
	/*
	   GetAnalyticsBotflowReportingturns gets reporting turns
	   Returns the reporting turns grouped by session, in reverse chronological order from the date the session was created, with the reporting turns from the most recent session appearing at the start of the list.
	*/
	GetAnalyticsBotflowReportingturns(ctx context.Context, params *GetAnalyticsBotflowReportingturnsParams) (*GetAnalyticsBotflowReportingturnsOK, error)
	/*
	   GetAnalyticsConversationDetails gets a conversation by id
	*/
	GetAnalyticsConversationDetails(ctx context.Context, params *GetAnalyticsConversationDetailsParams) (*GetAnalyticsConversationDetailsOK, error)
	/*
	   GetAnalyticsConversationsDetails gets multiple conversations by id
	*/
	GetAnalyticsConversationsDetails(ctx context.Context, params *GetAnalyticsConversationsDetailsParams) (*GetAnalyticsConversationsDetailsOK, error)
	/*
	   GetAnalyticsConversationsDetailsJob gets status for async query for conversation details
	*/
	GetAnalyticsConversationsDetailsJob(ctx context.Context, params *GetAnalyticsConversationsDetailsJobParams) (*GetAnalyticsConversationsDetailsJobOK, *GetAnalyticsConversationsDetailsJobAccepted, error)
	/*
	   GetAnalyticsConversationsDetailsJobResults fetches a page of results for an async details job
	*/
	GetAnalyticsConversationsDetailsJobResults(ctx context.Context, params *GetAnalyticsConversationsDetailsJobResultsParams) (*GetAnalyticsConversationsDetailsJobResultsOK, error)
	/*
	   GetAnalyticsConversationsDetailsJobsAvailability lookups the datalake availability date and time
	*/
	GetAnalyticsConversationsDetailsJobsAvailability(ctx context.Context, params *GetAnalyticsConversationsDetailsJobsAvailabilityParams) (*GetAnalyticsConversationsDetailsJobsAvailabilityOK, error)
	/*
	   GetAnalyticsDataretentionSettings gets analytics data retention setting
	*/
	GetAnalyticsDataretentionSettings(ctx context.Context, params *GetAnalyticsDataretentionSettingsParams) (*GetAnalyticsDataretentionSettingsOK, error)
	/*
	   GetAnalyticsReportingExports gets all view export requests for a user
	*/
	GetAnalyticsReportingExports(ctx context.Context, params *GetAnalyticsReportingExportsParams) (*GetAnalyticsReportingExportsOK, error)
	/*
	   GetAnalyticsReportingExportsMetadata gets all export metadata
	*/
	GetAnalyticsReportingExportsMetadata(ctx context.Context, params *GetAnalyticsReportingExportsMetadataParams) (*GetAnalyticsReportingExportsMetadataOK, error)
	/*
	   GetAnalyticsReportingMetadata gets list of reporting metadata
	*/
	GetAnalyticsReportingMetadata(ctx context.Context, params *GetAnalyticsReportingMetadataParams) (*GetAnalyticsReportingMetadataOK, error)
	/*
	   GetAnalyticsReportingReportIDMetadata gets a reporting metadata
	*/
	GetAnalyticsReportingReportIDMetadata(ctx context.Context, params *GetAnalyticsReportingReportIDMetadataParams) (*GetAnalyticsReportingReportIDMetadataOK, error)
	/*
	   GetAnalyticsReportingReportformats gets a list of report formats
	   Get a list of report formats.
	*/
	GetAnalyticsReportingReportformats(ctx context.Context, params *GetAnalyticsReportingReportformatsParams) (*GetAnalyticsReportingReportformatsOK, error)
	/*
	   GetAnalyticsReportingSchedule gets a scheduled report job
	*/
	GetAnalyticsReportingSchedule(ctx context.Context, params *GetAnalyticsReportingScheduleParams) (*GetAnalyticsReportingScheduleOK, error)
	/*
	   GetAnalyticsReportingScheduleHistory gets list of completed scheduled report jobs
	*/
	GetAnalyticsReportingScheduleHistory(ctx context.Context, params *GetAnalyticsReportingScheduleHistoryParams) (*GetAnalyticsReportingScheduleHistoryOK, error)
	/*
	   GetAnalyticsReportingScheduleHistoryLatest gets most recently completed scheduled report job
	*/
	GetAnalyticsReportingScheduleHistoryLatest(ctx context.Context, params *GetAnalyticsReportingScheduleHistoryLatestParams) (*GetAnalyticsReportingScheduleHistoryLatestOK, error)
	/*
	   GetAnalyticsReportingScheduleHistoryRunID as completed scheduled report job
	   A completed scheduled report job.
	*/
	GetAnalyticsReportingScheduleHistoryRunID(ctx context.Context, params *GetAnalyticsReportingScheduleHistoryRunIDParams) (*GetAnalyticsReportingScheduleHistoryRunIDOK, error)
	/*
	   GetAnalyticsReportingSchedules gets a list of scheduled report jobs
	   Get a list of scheduled report jobs.
	*/
	GetAnalyticsReportingSchedules(ctx context.Context, params *GetAnalyticsReportingSchedulesParams) (*GetAnalyticsReportingSchedulesOK, error)
	/*
	   GetAnalyticsReportingSettings gets analytics reporting settings for an organization
	*/
	GetAnalyticsReportingSettings(ctx context.Context, params *GetAnalyticsReportingSettingsParams) (*GetAnalyticsReportingSettingsOK, error)
	/*
	   GetAnalyticsReportingTimeperiods gets a list of report time periods
	*/
	GetAnalyticsReportingTimeperiods(ctx context.Context, params *GetAnalyticsReportingTimeperiodsParams) (*GetAnalyticsReportingTimeperiodsOK, error)
	/*
	   GetAnalyticsUsersDetailsJob gets status for async query for user details
	*/
	GetAnalyticsUsersDetailsJob(ctx context.Context, params *GetAnalyticsUsersDetailsJobParams) (*GetAnalyticsUsersDetailsJobOK, *GetAnalyticsUsersDetailsJobAccepted, error)
	/*
	   GetAnalyticsUsersDetailsJobResults fetches a page of results for an async query
	*/
	GetAnalyticsUsersDetailsJobResults(ctx context.Context, params *GetAnalyticsUsersDetailsJobResultsParams) (*GetAnalyticsUsersDetailsJobResultsOK, error)
	/*
	   GetAnalyticsUsersDetailsJobsAvailability lookups the datalake availability date and time
	*/
	GetAnalyticsUsersDetailsJobsAvailability(ctx context.Context, params *GetAnalyticsUsersDetailsJobsAvailabilityParams) (*GetAnalyticsUsersDetailsJobsAvailabilityOK, error)
	/*
	   PatchAnalyticsReportingSettings patches analytics reporting settings values for an organization
	*/
	PatchAnalyticsReportingSettings(ctx context.Context, params *PatchAnalyticsReportingSettingsParams) (*PatchAnalyticsReportingSettingsOK, error)
	/*
	   PostAnalyticsActionsAggregatesQuery queries for action aggregates
	*/
	PostAnalyticsActionsAggregatesQuery(ctx context.Context, params *PostAnalyticsActionsAggregatesQueryParams) (*PostAnalyticsActionsAggregatesQueryOK, error)
	/*
	   PostAnalyticsBotsAggregatesQuery queries for bot aggregates
	*/
	PostAnalyticsBotsAggregatesQuery(ctx context.Context, params *PostAnalyticsBotsAggregatesQueryParams) (*PostAnalyticsBotsAggregatesQueryOK, error)
	/*
	   PostAnalyticsConversationDetailsProperties indices conversation properties
	*/
	PostAnalyticsConversationDetailsProperties(ctx context.Context, params *PostAnalyticsConversationDetailsPropertiesParams) (*PostAnalyticsConversationDetailsPropertiesAccepted, error)
	/*
	   PostAnalyticsConversationsAggregatesQuery queries for conversation aggregates
	*/
	PostAnalyticsConversationsAggregatesQuery(ctx context.Context, params *PostAnalyticsConversationsAggregatesQueryParams) (*PostAnalyticsConversationsAggregatesQueryOK, error)
	/*
	   PostAnalyticsConversationsDetailsJobs queries for conversation details asynchronously
	*/
	PostAnalyticsConversationsDetailsJobs(ctx context.Context, params *PostAnalyticsConversationsDetailsJobsParams) (*PostAnalyticsConversationsDetailsJobsAccepted, error)
	/*
	   PostAnalyticsConversationsDetailsQuery queries for conversation details
	*/
	PostAnalyticsConversationsDetailsQuery(ctx context.Context, params *PostAnalyticsConversationsDetailsQueryParams) (*PostAnalyticsConversationsDetailsQueryOK, error)
	/*
	   PostAnalyticsEvaluationsAggregatesQuery queries for evaluation aggregates
	*/
	PostAnalyticsEvaluationsAggregatesQuery(ctx context.Context, params *PostAnalyticsEvaluationsAggregatesQueryParams) (*PostAnalyticsEvaluationsAggregatesQueryOK, error)
	/*
	   PostAnalyticsFlowsAggregatesQuery queries for flow aggregates
	*/
	PostAnalyticsFlowsAggregatesQuery(ctx context.Context, params *PostAnalyticsFlowsAggregatesQueryParams) (*PostAnalyticsFlowsAggregatesQueryOK, error)
	/*
	   PostAnalyticsFlowsObservationsQuery queries for flow observations
	*/
	PostAnalyticsFlowsObservationsQuery(ctx context.Context, params *PostAnalyticsFlowsObservationsQueryParams) (*PostAnalyticsFlowsObservationsQueryOK, error)
	/*
	   PostAnalyticsJourneysAggregatesQuery queries for journey aggregates
	*/
	PostAnalyticsJourneysAggregatesQuery(ctx context.Context, params *PostAnalyticsJourneysAggregatesQueryParams) (*PostAnalyticsJourneysAggregatesQueryOK, error)
	/*
	   PostAnalyticsQueuesObservationsQuery queries for queue observations
	*/
	PostAnalyticsQueuesObservationsQuery(ctx context.Context, params *PostAnalyticsQueuesObservationsQueryParams) (*PostAnalyticsQueuesObservationsQueryOK, error)
	/*
	   PostAnalyticsReportingExports generates a view export request
	   This API creates a reporting export but the desired way to export analytics data is to use the analytics query APIs instead
	*/
	PostAnalyticsReportingExports(ctx context.Context, params *PostAnalyticsReportingExportsParams) (*PostAnalyticsReportingExportsOK, error)
	/*
	   PostAnalyticsReportingScheduleRunreport places a scheduled report immediately into the reporting queue
	*/
	PostAnalyticsReportingScheduleRunreport(ctx context.Context, params *PostAnalyticsReportingScheduleRunreportParams) (*PostAnalyticsReportingScheduleRunreportAccepted, error)
	/*
	   PostAnalyticsReportingSchedules creates a scheduled report job
	   Create a scheduled report job.
	*/
	PostAnalyticsReportingSchedules(ctx context.Context, params *PostAnalyticsReportingSchedulesParams) (*PostAnalyticsReportingSchedulesOK, error)
	/*
	   PostAnalyticsSurveysAggregatesQuery queries for survey aggregates
	*/
	PostAnalyticsSurveysAggregatesQuery(ctx context.Context, params *PostAnalyticsSurveysAggregatesQueryParams) (*PostAnalyticsSurveysAggregatesQueryOK, error)
	/*
	   PostAnalyticsTranscriptsAggregatesQuery queries for transcript aggregates
	*/
	PostAnalyticsTranscriptsAggregatesQuery(ctx context.Context, params *PostAnalyticsTranscriptsAggregatesQueryParams) (*PostAnalyticsTranscriptsAggregatesQueryOK, error)
	/*
	   PostAnalyticsUsersAggregatesQuery queries for user aggregates
	*/
	PostAnalyticsUsersAggregatesQuery(ctx context.Context, params *PostAnalyticsUsersAggregatesQueryParams) (*PostAnalyticsUsersAggregatesQueryOK, error)
	/*
	   PostAnalyticsUsersDetailsJobs queries for user details asynchronously
	*/
	PostAnalyticsUsersDetailsJobs(ctx context.Context, params *PostAnalyticsUsersDetailsJobsParams) (*PostAnalyticsUsersDetailsJobsAccepted, error)
	/*
	   PostAnalyticsUsersDetailsQuery queries for user details
	*/
	PostAnalyticsUsersDetailsQuery(ctx context.Context, params *PostAnalyticsUsersDetailsQueryParams) (*PostAnalyticsUsersDetailsQueryOK, error)
	/*
	   PostAnalyticsUsersObservationsQuery queries for user observations
	*/
	PostAnalyticsUsersObservationsQuery(ctx context.Context, params *PostAnalyticsUsersObservationsQueryParams) (*PostAnalyticsUsersObservationsQueryOK, error)
	/*
	   PutAnalyticsDataretentionSettings updates analytics data retention setting
	*/
	PutAnalyticsDataretentionSettings(ctx context.Context, params *PutAnalyticsDataretentionSettingsParams) (*PutAnalyticsDataretentionSettingsOK, error)
	/*
	   PutAnalyticsReportingSchedule updates a scheduled report job
	*/
	PutAnalyticsReportingSchedule(ctx context.Context, params *PutAnalyticsReportingScheduleParams) (*PutAnalyticsReportingScheduleOK, error)
}

// New creates a new analytics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for analytics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteAnalyticsConversationsDetailsJob deletes cancel an async details job
*/
func (a *Client) DeleteAnalyticsConversationsDetailsJob(ctx context.Context, params *DeleteAnalyticsConversationsDetailsJobParams) (*DeleteAnalyticsConversationsDetailsJobNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAnalyticsConversationsDetailsJob",
		Method:             "DELETE",
		PathPattern:        "/api/v2/analytics/conversations/details/jobs/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAnalyticsConversationsDetailsJobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAnalyticsConversationsDetailsJobNoContent), nil

}

/*
DeleteAnalyticsReportingSchedule deletes a scheduled report job
*/
func (a *Client) DeleteAnalyticsReportingSchedule(ctx context.Context, params *DeleteAnalyticsReportingScheduleParams) (*DeleteAnalyticsReportingScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAnalyticsReportingSchedule",
		Method:             "DELETE",
		PathPattern:        "/api/v2/analytics/reporting/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAnalyticsReportingScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAnalyticsReportingScheduleOK), nil

}

/*
DeleteAnalyticsUsersDetailsJob deletes cancel an async request
*/
func (a *Client) DeleteAnalyticsUsersDetailsJob(ctx context.Context, params *DeleteAnalyticsUsersDetailsJobParams) (*DeleteAnalyticsUsersDetailsJobNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAnalyticsUsersDetailsJob",
		Method:             "DELETE",
		PathPattern:        "/api/v2/analytics/users/details/jobs/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAnalyticsUsersDetailsJobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAnalyticsUsersDetailsJobNoContent), nil

}

/*
GetAnalyticsBotflowReportingturns gets reporting turns

Returns the reporting turns grouped by session, in reverse chronological order from the date the session was created, with the reporting turns from the most recent session appearing at the start of the list.
*/
func (a *Client) GetAnalyticsBotflowReportingturns(ctx context.Context, params *GetAnalyticsBotflowReportingturnsParams) (*GetAnalyticsBotflowReportingturnsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsBotflowReportingturns",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/botflows/{botFlowId}/reportingturns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsBotflowReportingturnsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsBotflowReportingturnsOK), nil

}

/*
GetAnalyticsConversationDetails gets a conversation by id
*/
func (a *Client) GetAnalyticsConversationDetails(ctx context.Context, params *GetAnalyticsConversationDetailsParams) (*GetAnalyticsConversationDetailsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsConversationDetails",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/conversations/{conversationId}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsConversationDetailsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsConversationDetailsOK), nil

}

/*
GetAnalyticsConversationsDetails gets multiple conversations by id
*/
func (a *Client) GetAnalyticsConversationsDetails(ctx context.Context, params *GetAnalyticsConversationsDetailsParams) (*GetAnalyticsConversationsDetailsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsConversationsDetails",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/conversations/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsConversationsDetailsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsConversationsDetailsOK), nil

}

/*
GetAnalyticsConversationsDetailsJob gets status for async query for conversation details
*/
func (a *Client) GetAnalyticsConversationsDetailsJob(ctx context.Context, params *GetAnalyticsConversationsDetailsJobParams) (*GetAnalyticsConversationsDetailsJobOK, *GetAnalyticsConversationsDetailsJobAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsConversationsDetailsJob",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/conversations/details/jobs/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsConversationsDetailsJobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAnalyticsConversationsDetailsJobOK:
		return value, nil, nil
	case *GetAnalyticsConversationsDetailsJobAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetAnalyticsConversationsDetailsJobResults fetches a page of results for an async details job
*/
func (a *Client) GetAnalyticsConversationsDetailsJobResults(ctx context.Context, params *GetAnalyticsConversationsDetailsJobResultsParams) (*GetAnalyticsConversationsDetailsJobResultsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsConversationsDetailsJobResults",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/conversations/details/jobs/{jobId}/results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsConversationsDetailsJobResultsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsConversationsDetailsJobResultsOK), nil

}

/*
GetAnalyticsConversationsDetailsJobsAvailability lookups the datalake availability date and time
*/
func (a *Client) GetAnalyticsConversationsDetailsJobsAvailability(ctx context.Context, params *GetAnalyticsConversationsDetailsJobsAvailabilityParams) (*GetAnalyticsConversationsDetailsJobsAvailabilityOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsConversationsDetailsJobsAvailability",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/conversations/details/jobs/availability",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsConversationsDetailsJobsAvailabilityReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsConversationsDetailsJobsAvailabilityOK), nil

}

/*
GetAnalyticsDataretentionSettings gets analytics data retention setting
*/
func (a *Client) GetAnalyticsDataretentionSettings(ctx context.Context, params *GetAnalyticsDataretentionSettingsParams) (*GetAnalyticsDataretentionSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsDataretentionSettings",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/dataretention/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsDataretentionSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsDataretentionSettingsOK), nil

}

/*
GetAnalyticsReportingExports gets all view export requests for a user
*/
func (a *Client) GetAnalyticsReportingExports(ctx context.Context, params *GetAnalyticsReportingExportsParams) (*GetAnalyticsReportingExportsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingExports",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/exports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingExportsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingExportsOK), nil

}

/*
GetAnalyticsReportingExportsMetadata gets all export metadata
*/
func (a *Client) GetAnalyticsReportingExportsMetadata(ctx context.Context, params *GetAnalyticsReportingExportsMetadataParams) (*GetAnalyticsReportingExportsMetadataOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingExportsMetadata",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/exports/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingExportsMetadataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingExportsMetadataOK), nil

}

/*
GetAnalyticsReportingMetadata gets list of reporting metadata
*/
func (a *Client) GetAnalyticsReportingMetadata(ctx context.Context, params *GetAnalyticsReportingMetadataParams) (*GetAnalyticsReportingMetadataOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingMetadata",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingMetadataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingMetadataOK), nil

}

/*
GetAnalyticsReportingReportIDMetadata gets a reporting metadata
*/
func (a *Client) GetAnalyticsReportingReportIDMetadata(ctx context.Context, params *GetAnalyticsReportingReportIDMetadataParams) (*GetAnalyticsReportingReportIDMetadataOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingReportIdMetadata",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/{reportId}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingReportIDMetadataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingReportIDMetadataOK), nil

}

/*
GetAnalyticsReportingReportformats gets a list of report formats

Get a list of report formats.
*/
func (a *Client) GetAnalyticsReportingReportformats(ctx context.Context, params *GetAnalyticsReportingReportformatsParams) (*GetAnalyticsReportingReportformatsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingReportformats",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/reportformats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingReportformatsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingReportformatsOK), nil

}

/*
GetAnalyticsReportingSchedule gets a scheduled report job
*/
func (a *Client) GetAnalyticsReportingSchedule(ctx context.Context, params *GetAnalyticsReportingScheduleParams) (*GetAnalyticsReportingScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingSchedule",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingScheduleOK), nil

}

/*
GetAnalyticsReportingScheduleHistory gets list of completed scheduled report jobs
*/
func (a *Client) GetAnalyticsReportingScheduleHistory(ctx context.Context, params *GetAnalyticsReportingScheduleHistoryParams) (*GetAnalyticsReportingScheduleHistoryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingScheduleHistory",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/schedules/{scheduleId}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingScheduleHistoryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingScheduleHistoryOK), nil

}

/*
GetAnalyticsReportingScheduleHistoryLatest gets most recently completed scheduled report job
*/
func (a *Client) GetAnalyticsReportingScheduleHistoryLatest(ctx context.Context, params *GetAnalyticsReportingScheduleHistoryLatestParams) (*GetAnalyticsReportingScheduleHistoryLatestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingScheduleHistoryLatest",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/schedules/{scheduleId}/history/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingScheduleHistoryLatestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingScheduleHistoryLatestOK), nil

}

/*
GetAnalyticsReportingScheduleHistoryRunID as completed scheduled report job

A completed scheduled report job.
*/
func (a *Client) GetAnalyticsReportingScheduleHistoryRunID(ctx context.Context, params *GetAnalyticsReportingScheduleHistoryRunIDParams) (*GetAnalyticsReportingScheduleHistoryRunIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingScheduleHistoryRunId",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/schedules/{scheduleId}/history/{runId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingScheduleHistoryRunIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingScheduleHistoryRunIDOK), nil

}

/*
GetAnalyticsReportingSchedules gets a list of scheduled report jobs

Get a list of scheduled report jobs.
*/
func (a *Client) GetAnalyticsReportingSchedules(ctx context.Context, params *GetAnalyticsReportingSchedulesParams) (*GetAnalyticsReportingSchedulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingSchedules",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingSchedulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingSchedulesOK), nil

}

/*
GetAnalyticsReportingSettings gets analytics reporting settings for an organization
*/
func (a *Client) GetAnalyticsReportingSettings(ctx context.Context, params *GetAnalyticsReportingSettingsParams) (*GetAnalyticsReportingSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingSettings",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingSettingsOK), nil

}

/*
GetAnalyticsReportingTimeperiods gets a list of report time periods
*/
func (a *Client) GetAnalyticsReportingTimeperiods(ctx context.Context, params *GetAnalyticsReportingTimeperiodsParams) (*GetAnalyticsReportingTimeperiodsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsReportingTimeperiods",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/reporting/timeperiods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsReportingTimeperiodsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsReportingTimeperiodsOK), nil

}

/*
GetAnalyticsUsersDetailsJob gets status for async query for user details
*/
func (a *Client) GetAnalyticsUsersDetailsJob(ctx context.Context, params *GetAnalyticsUsersDetailsJobParams) (*GetAnalyticsUsersDetailsJobOK, *GetAnalyticsUsersDetailsJobAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsUsersDetailsJob",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/users/details/jobs/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsUsersDetailsJobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAnalyticsUsersDetailsJobOK:
		return value, nil, nil
	case *GetAnalyticsUsersDetailsJobAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetAnalyticsUsersDetailsJobResults fetches a page of results for an async query
*/
func (a *Client) GetAnalyticsUsersDetailsJobResults(ctx context.Context, params *GetAnalyticsUsersDetailsJobResultsParams) (*GetAnalyticsUsersDetailsJobResultsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsUsersDetailsJobResults",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/users/details/jobs/{jobId}/results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsUsersDetailsJobResultsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsUsersDetailsJobResultsOK), nil

}

/*
GetAnalyticsUsersDetailsJobsAvailability lookups the datalake availability date and time
*/
func (a *Client) GetAnalyticsUsersDetailsJobsAvailability(ctx context.Context, params *GetAnalyticsUsersDetailsJobsAvailabilityParams) (*GetAnalyticsUsersDetailsJobsAvailabilityOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnalyticsUsersDetailsJobsAvailability",
		Method:             "GET",
		PathPattern:        "/api/v2/analytics/users/details/jobs/availability",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnalyticsUsersDetailsJobsAvailabilityReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAnalyticsUsersDetailsJobsAvailabilityOK), nil

}

/*
PatchAnalyticsReportingSettings patches analytics reporting settings values for an organization
*/
func (a *Client) PatchAnalyticsReportingSettings(ctx context.Context, params *PatchAnalyticsReportingSettingsParams) (*PatchAnalyticsReportingSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAnalyticsReportingSettings",
		Method:             "PATCH",
		PathPattern:        "/api/v2/analytics/reporting/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAnalyticsReportingSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAnalyticsReportingSettingsOK), nil

}

/*
PostAnalyticsActionsAggregatesQuery queries for action aggregates
*/
func (a *Client) PostAnalyticsActionsAggregatesQuery(ctx context.Context, params *PostAnalyticsActionsAggregatesQueryParams) (*PostAnalyticsActionsAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsActionsAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/actions/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsActionsAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsActionsAggregatesQueryOK), nil

}

/*
PostAnalyticsBotsAggregatesQuery queries for bot aggregates
*/
func (a *Client) PostAnalyticsBotsAggregatesQuery(ctx context.Context, params *PostAnalyticsBotsAggregatesQueryParams) (*PostAnalyticsBotsAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsBotsAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/bots/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsBotsAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsBotsAggregatesQueryOK), nil

}

/*
PostAnalyticsConversationDetailsProperties indices conversation properties
*/
func (a *Client) PostAnalyticsConversationDetailsProperties(ctx context.Context, params *PostAnalyticsConversationDetailsPropertiesParams) (*PostAnalyticsConversationDetailsPropertiesAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsConversationDetailsProperties",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/conversations/{conversationId}/details/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsConversationDetailsPropertiesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsConversationDetailsPropertiesAccepted), nil

}

/*
PostAnalyticsConversationsAggregatesQuery queries for conversation aggregates
*/
func (a *Client) PostAnalyticsConversationsAggregatesQuery(ctx context.Context, params *PostAnalyticsConversationsAggregatesQueryParams) (*PostAnalyticsConversationsAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsConversationsAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/conversations/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsConversationsAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsConversationsAggregatesQueryOK), nil

}

/*
PostAnalyticsConversationsDetailsJobs queries for conversation details asynchronously
*/
func (a *Client) PostAnalyticsConversationsDetailsJobs(ctx context.Context, params *PostAnalyticsConversationsDetailsJobsParams) (*PostAnalyticsConversationsDetailsJobsAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsConversationsDetailsJobs",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/conversations/details/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsConversationsDetailsJobsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsConversationsDetailsJobsAccepted), nil

}

/*
PostAnalyticsConversationsDetailsQuery queries for conversation details
*/
func (a *Client) PostAnalyticsConversationsDetailsQuery(ctx context.Context, params *PostAnalyticsConversationsDetailsQueryParams) (*PostAnalyticsConversationsDetailsQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsConversationsDetailsQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/conversations/details/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsConversationsDetailsQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsConversationsDetailsQueryOK), nil

}

/*
PostAnalyticsEvaluationsAggregatesQuery queries for evaluation aggregates
*/
func (a *Client) PostAnalyticsEvaluationsAggregatesQuery(ctx context.Context, params *PostAnalyticsEvaluationsAggregatesQueryParams) (*PostAnalyticsEvaluationsAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsEvaluationsAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/evaluations/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsEvaluationsAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsEvaluationsAggregatesQueryOK), nil

}

/*
PostAnalyticsFlowsAggregatesQuery queries for flow aggregates
*/
func (a *Client) PostAnalyticsFlowsAggregatesQuery(ctx context.Context, params *PostAnalyticsFlowsAggregatesQueryParams) (*PostAnalyticsFlowsAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsFlowsAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/flows/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsFlowsAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsFlowsAggregatesQueryOK), nil

}

/*
PostAnalyticsFlowsObservationsQuery queries for flow observations
*/
func (a *Client) PostAnalyticsFlowsObservationsQuery(ctx context.Context, params *PostAnalyticsFlowsObservationsQueryParams) (*PostAnalyticsFlowsObservationsQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsFlowsObservationsQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/flows/observations/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsFlowsObservationsQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsFlowsObservationsQueryOK), nil

}

/*
PostAnalyticsJourneysAggregatesQuery queries for journey aggregates
*/
func (a *Client) PostAnalyticsJourneysAggregatesQuery(ctx context.Context, params *PostAnalyticsJourneysAggregatesQueryParams) (*PostAnalyticsJourneysAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsJourneysAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/journeys/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsJourneysAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsJourneysAggregatesQueryOK), nil

}

/*
PostAnalyticsQueuesObservationsQuery queries for queue observations
*/
func (a *Client) PostAnalyticsQueuesObservationsQuery(ctx context.Context, params *PostAnalyticsQueuesObservationsQueryParams) (*PostAnalyticsQueuesObservationsQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsQueuesObservationsQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/queues/observations/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsQueuesObservationsQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsQueuesObservationsQueryOK), nil

}

/*
PostAnalyticsReportingExports generates a view export request

This API creates a reporting export but the desired way to export analytics data is to use the analytics query APIs instead
*/
func (a *Client) PostAnalyticsReportingExports(ctx context.Context, params *PostAnalyticsReportingExportsParams) (*PostAnalyticsReportingExportsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsReportingExports",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/reporting/exports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsReportingExportsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsReportingExportsOK), nil

}

/*
PostAnalyticsReportingScheduleRunreport places a scheduled report immediately into the reporting queue
*/
func (a *Client) PostAnalyticsReportingScheduleRunreport(ctx context.Context, params *PostAnalyticsReportingScheduleRunreportParams) (*PostAnalyticsReportingScheduleRunreportAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsReportingScheduleRunreport",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/reporting/schedules/{scheduleId}/runreport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsReportingScheduleRunreportReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsReportingScheduleRunreportAccepted), nil

}

/*
PostAnalyticsReportingSchedules creates a scheduled report job

Create a scheduled report job.
*/
func (a *Client) PostAnalyticsReportingSchedules(ctx context.Context, params *PostAnalyticsReportingSchedulesParams) (*PostAnalyticsReportingSchedulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsReportingSchedules",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/reporting/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsReportingSchedulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsReportingSchedulesOK), nil

}

/*
PostAnalyticsSurveysAggregatesQuery queries for survey aggregates
*/
func (a *Client) PostAnalyticsSurveysAggregatesQuery(ctx context.Context, params *PostAnalyticsSurveysAggregatesQueryParams) (*PostAnalyticsSurveysAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsSurveysAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/surveys/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsSurveysAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsSurveysAggregatesQueryOK), nil

}

/*
PostAnalyticsTranscriptsAggregatesQuery queries for transcript aggregates
*/
func (a *Client) PostAnalyticsTranscriptsAggregatesQuery(ctx context.Context, params *PostAnalyticsTranscriptsAggregatesQueryParams) (*PostAnalyticsTranscriptsAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsTranscriptsAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/transcripts/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsTranscriptsAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsTranscriptsAggregatesQueryOK), nil

}

/*
PostAnalyticsUsersAggregatesQuery queries for user aggregates
*/
func (a *Client) PostAnalyticsUsersAggregatesQuery(ctx context.Context, params *PostAnalyticsUsersAggregatesQueryParams) (*PostAnalyticsUsersAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsUsersAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/users/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsUsersAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsUsersAggregatesQueryOK), nil

}

/*
PostAnalyticsUsersDetailsJobs queries for user details asynchronously
*/
func (a *Client) PostAnalyticsUsersDetailsJobs(ctx context.Context, params *PostAnalyticsUsersDetailsJobsParams) (*PostAnalyticsUsersDetailsJobsAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsUsersDetailsJobs",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/users/details/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsUsersDetailsJobsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsUsersDetailsJobsAccepted), nil

}

/*
PostAnalyticsUsersDetailsQuery queries for user details
*/
func (a *Client) PostAnalyticsUsersDetailsQuery(ctx context.Context, params *PostAnalyticsUsersDetailsQueryParams) (*PostAnalyticsUsersDetailsQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsUsersDetailsQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/users/details/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsUsersDetailsQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsUsersDetailsQueryOK), nil

}

/*
PostAnalyticsUsersObservationsQuery queries for user observations
*/
func (a *Client) PostAnalyticsUsersObservationsQuery(ctx context.Context, params *PostAnalyticsUsersObservationsQueryParams) (*PostAnalyticsUsersObservationsQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsUsersObservationsQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/users/observations/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsUsersObservationsQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsUsersObservationsQueryOK), nil

}

/*
PutAnalyticsDataretentionSettings updates analytics data retention setting
*/
func (a *Client) PutAnalyticsDataretentionSettings(ctx context.Context, params *PutAnalyticsDataretentionSettingsParams) (*PutAnalyticsDataretentionSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAnalyticsDataretentionSettings",
		Method:             "PUT",
		PathPattern:        "/api/v2/analytics/dataretention/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAnalyticsDataretentionSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAnalyticsDataretentionSettingsOK), nil

}

/*
PutAnalyticsReportingSchedule updates a scheduled report job
*/
func (a *Client) PutAnalyticsReportingSchedule(ctx context.Context, params *PutAnalyticsReportingScheduleParams) (*PutAnalyticsReportingScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAnalyticsReportingSchedule",
		Method:             "PUT",
		PathPattern:        "/api/v2/analytics/reporting/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAnalyticsReportingScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAnalyticsReportingScheduleOK), nil

}

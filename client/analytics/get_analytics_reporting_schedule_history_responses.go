// Code generated by go-swagger; DO NOT EDIT.

package analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetAnalyticsReportingScheduleHistoryReader is a Reader for the GetAnalyticsReportingScheduleHistory structure.
type GetAnalyticsReportingScheduleHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAnalyticsReportingScheduleHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAnalyticsReportingScheduleHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAnalyticsReportingScheduleHistoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAnalyticsReportingScheduleHistoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAnalyticsReportingScheduleHistoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAnalyticsReportingScheduleHistoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetAnalyticsReportingScheduleHistoryRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAnalyticsReportingScheduleHistoryRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAnalyticsReportingScheduleHistoryUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAnalyticsReportingScheduleHistoryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAnalyticsReportingScheduleHistoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAnalyticsReportingScheduleHistoryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetAnalyticsReportingScheduleHistoryGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAnalyticsReportingScheduleHistoryOK creates a GetAnalyticsReportingScheduleHistoryOK with default headers values
func NewGetAnalyticsReportingScheduleHistoryOK() *GetAnalyticsReportingScheduleHistoryOK {
	return &GetAnalyticsReportingScheduleHistoryOK{}
}

/*
GetAnalyticsReportingScheduleHistoryOK describes a response with status code 200, with default header values.

successful operation
*/
type GetAnalyticsReportingScheduleHistoryOK struct {
	Payload *models.ReportRunEntryEntityDomainListing
}

// IsSuccess returns true when this get analytics reporting schedule history o k response has a 2xx status code
func (o *GetAnalyticsReportingScheduleHistoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get analytics reporting schedule history o k response has a 3xx status code
func (o *GetAnalyticsReportingScheduleHistoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting schedule history o k response has a 4xx status code
func (o *GetAnalyticsReportingScheduleHistoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get analytics reporting schedule history o k response has a 5xx status code
func (o *GetAnalyticsReportingScheduleHistoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting schedule history o k response a status code equal to that given
func (o *GetAnalyticsReportingScheduleHistoryOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAnalyticsReportingScheduleHistoryOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryOK  %+v", 200, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryOK) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryOK  %+v", 200, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryOK) GetPayload() *models.ReportRunEntryEntityDomainListing {
	return o.Payload
}

func (o *GetAnalyticsReportingScheduleHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReportRunEntryEntityDomainListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingScheduleHistoryBadRequest creates a GetAnalyticsReportingScheduleHistoryBadRequest with default headers values
func NewGetAnalyticsReportingScheduleHistoryBadRequest() *GetAnalyticsReportingScheduleHistoryBadRequest {
	return &GetAnalyticsReportingScheduleHistoryBadRequest{}
}

/*
GetAnalyticsReportingScheduleHistoryBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetAnalyticsReportingScheduleHistoryBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting schedule history bad request response has a 2xx status code
func (o *GetAnalyticsReportingScheduleHistoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting schedule history bad request response has a 3xx status code
func (o *GetAnalyticsReportingScheduleHistoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting schedule history bad request response has a 4xx status code
func (o *GetAnalyticsReportingScheduleHistoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting schedule history bad request response has a 5xx status code
func (o *GetAnalyticsReportingScheduleHistoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting schedule history bad request response a status code equal to that given
func (o *GetAnalyticsReportingScheduleHistoryBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAnalyticsReportingScheduleHistoryBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryBadRequest  %+v", 400, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryBadRequest  %+v", 400, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingScheduleHistoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingScheduleHistoryUnauthorized creates a GetAnalyticsReportingScheduleHistoryUnauthorized with default headers values
func NewGetAnalyticsReportingScheduleHistoryUnauthorized() *GetAnalyticsReportingScheduleHistoryUnauthorized {
	return &GetAnalyticsReportingScheduleHistoryUnauthorized{}
}

/*
GetAnalyticsReportingScheduleHistoryUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetAnalyticsReportingScheduleHistoryUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting schedule history unauthorized response has a 2xx status code
func (o *GetAnalyticsReportingScheduleHistoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting schedule history unauthorized response has a 3xx status code
func (o *GetAnalyticsReportingScheduleHistoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting schedule history unauthorized response has a 4xx status code
func (o *GetAnalyticsReportingScheduleHistoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting schedule history unauthorized response has a 5xx status code
func (o *GetAnalyticsReportingScheduleHistoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting schedule history unauthorized response a status code equal to that given
func (o *GetAnalyticsReportingScheduleHistoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAnalyticsReportingScheduleHistoryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingScheduleHistoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingScheduleHistoryForbidden creates a GetAnalyticsReportingScheduleHistoryForbidden with default headers values
func NewGetAnalyticsReportingScheduleHistoryForbidden() *GetAnalyticsReportingScheduleHistoryForbidden {
	return &GetAnalyticsReportingScheduleHistoryForbidden{}
}

/*
GetAnalyticsReportingScheduleHistoryForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetAnalyticsReportingScheduleHistoryForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting schedule history forbidden response has a 2xx status code
func (o *GetAnalyticsReportingScheduleHistoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting schedule history forbidden response has a 3xx status code
func (o *GetAnalyticsReportingScheduleHistoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting schedule history forbidden response has a 4xx status code
func (o *GetAnalyticsReportingScheduleHistoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting schedule history forbidden response has a 5xx status code
func (o *GetAnalyticsReportingScheduleHistoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting schedule history forbidden response a status code equal to that given
func (o *GetAnalyticsReportingScheduleHistoryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAnalyticsReportingScheduleHistoryForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryForbidden  %+v", 403, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryForbidden  %+v", 403, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingScheduleHistoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingScheduleHistoryNotFound creates a GetAnalyticsReportingScheduleHistoryNotFound with default headers values
func NewGetAnalyticsReportingScheduleHistoryNotFound() *GetAnalyticsReportingScheduleHistoryNotFound {
	return &GetAnalyticsReportingScheduleHistoryNotFound{}
}

/*
GetAnalyticsReportingScheduleHistoryNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetAnalyticsReportingScheduleHistoryNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting schedule history not found response has a 2xx status code
func (o *GetAnalyticsReportingScheduleHistoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting schedule history not found response has a 3xx status code
func (o *GetAnalyticsReportingScheduleHistoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting schedule history not found response has a 4xx status code
func (o *GetAnalyticsReportingScheduleHistoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting schedule history not found response has a 5xx status code
func (o *GetAnalyticsReportingScheduleHistoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting schedule history not found response a status code equal to that given
func (o *GetAnalyticsReportingScheduleHistoryNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAnalyticsReportingScheduleHistoryNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryNotFound  %+v", 404, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryNotFound  %+v", 404, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingScheduleHistoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingScheduleHistoryRequestTimeout creates a GetAnalyticsReportingScheduleHistoryRequestTimeout with default headers values
func NewGetAnalyticsReportingScheduleHistoryRequestTimeout() *GetAnalyticsReportingScheduleHistoryRequestTimeout {
	return &GetAnalyticsReportingScheduleHistoryRequestTimeout{}
}

/*
GetAnalyticsReportingScheduleHistoryRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetAnalyticsReportingScheduleHistoryRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting schedule history request timeout response has a 2xx status code
func (o *GetAnalyticsReportingScheduleHistoryRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting schedule history request timeout response has a 3xx status code
func (o *GetAnalyticsReportingScheduleHistoryRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting schedule history request timeout response has a 4xx status code
func (o *GetAnalyticsReportingScheduleHistoryRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting schedule history request timeout response has a 5xx status code
func (o *GetAnalyticsReportingScheduleHistoryRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting schedule history request timeout response a status code equal to that given
func (o *GetAnalyticsReportingScheduleHistoryRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetAnalyticsReportingScheduleHistoryRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingScheduleHistoryRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingScheduleHistoryRequestEntityTooLarge creates a GetAnalyticsReportingScheduleHistoryRequestEntityTooLarge with default headers values
func NewGetAnalyticsReportingScheduleHistoryRequestEntityTooLarge() *GetAnalyticsReportingScheduleHistoryRequestEntityTooLarge {
	return &GetAnalyticsReportingScheduleHistoryRequestEntityTooLarge{}
}

/*
GetAnalyticsReportingScheduleHistoryRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetAnalyticsReportingScheduleHistoryRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting schedule history request entity too large response has a 2xx status code
func (o *GetAnalyticsReportingScheduleHistoryRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting schedule history request entity too large response has a 3xx status code
func (o *GetAnalyticsReportingScheduleHistoryRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting schedule history request entity too large response has a 4xx status code
func (o *GetAnalyticsReportingScheduleHistoryRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting schedule history request entity too large response has a 5xx status code
func (o *GetAnalyticsReportingScheduleHistoryRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting schedule history request entity too large response a status code equal to that given
func (o *GetAnalyticsReportingScheduleHistoryRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetAnalyticsReportingScheduleHistoryRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingScheduleHistoryRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingScheduleHistoryUnsupportedMediaType creates a GetAnalyticsReportingScheduleHistoryUnsupportedMediaType with default headers values
func NewGetAnalyticsReportingScheduleHistoryUnsupportedMediaType() *GetAnalyticsReportingScheduleHistoryUnsupportedMediaType {
	return &GetAnalyticsReportingScheduleHistoryUnsupportedMediaType{}
}

/*
GetAnalyticsReportingScheduleHistoryUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetAnalyticsReportingScheduleHistoryUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting schedule history unsupported media type response has a 2xx status code
func (o *GetAnalyticsReportingScheduleHistoryUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting schedule history unsupported media type response has a 3xx status code
func (o *GetAnalyticsReportingScheduleHistoryUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting schedule history unsupported media type response has a 4xx status code
func (o *GetAnalyticsReportingScheduleHistoryUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting schedule history unsupported media type response has a 5xx status code
func (o *GetAnalyticsReportingScheduleHistoryUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting schedule history unsupported media type response a status code equal to that given
func (o *GetAnalyticsReportingScheduleHistoryUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetAnalyticsReportingScheduleHistoryUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingScheduleHistoryUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingScheduleHistoryTooManyRequests creates a GetAnalyticsReportingScheduleHistoryTooManyRequests with default headers values
func NewGetAnalyticsReportingScheduleHistoryTooManyRequests() *GetAnalyticsReportingScheduleHistoryTooManyRequests {
	return &GetAnalyticsReportingScheduleHistoryTooManyRequests{}
}

/*
GetAnalyticsReportingScheduleHistoryTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetAnalyticsReportingScheduleHistoryTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting schedule history too many requests response has a 2xx status code
func (o *GetAnalyticsReportingScheduleHistoryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting schedule history too many requests response has a 3xx status code
func (o *GetAnalyticsReportingScheduleHistoryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting schedule history too many requests response has a 4xx status code
func (o *GetAnalyticsReportingScheduleHistoryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get analytics reporting schedule history too many requests response has a 5xx status code
func (o *GetAnalyticsReportingScheduleHistoryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get analytics reporting schedule history too many requests response a status code equal to that given
func (o *GetAnalyticsReportingScheduleHistoryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAnalyticsReportingScheduleHistoryTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingScheduleHistoryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingScheduleHistoryInternalServerError creates a GetAnalyticsReportingScheduleHistoryInternalServerError with default headers values
func NewGetAnalyticsReportingScheduleHistoryInternalServerError() *GetAnalyticsReportingScheduleHistoryInternalServerError {
	return &GetAnalyticsReportingScheduleHistoryInternalServerError{}
}

/*
GetAnalyticsReportingScheduleHistoryInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetAnalyticsReportingScheduleHistoryInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting schedule history internal server error response has a 2xx status code
func (o *GetAnalyticsReportingScheduleHistoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting schedule history internal server error response has a 3xx status code
func (o *GetAnalyticsReportingScheduleHistoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting schedule history internal server error response has a 4xx status code
func (o *GetAnalyticsReportingScheduleHistoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get analytics reporting schedule history internal server error response has a 5xx status code
func (o *GetAnalyticsReportingScheduleHistoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get analytics reporting schedule history internal server error response a status code equal to that given
func (o *GetAnalyticsReportingScheduleHistoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAnalyticsReportingScheduleHistoryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingScheduleHistoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingScheduleHistoryServiceUnavailable creates a GetAnalyticsReportingScheduleHistoryServiceUnavailable with default headers values
func NewGetAnalyticsReportingScheduleHistoryServiceUnavailable() *GetAnalyticsReportingScheduleHistoryServiceUnavailable {
	return &GetAnalyticsReportingScheduleHistoryServiceUnavailable{}
}

/*
GetAnalyticsReportingScheduleHistoryServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetAnalyticsReportingScheduleHistoryServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting schedule history service unavailable response has a 2xx status code
func (o *GetAnalyticsReportingScheduleHistoryServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting schedule history service unavailable response has a 3xx status code
func (o *GetAnalyticsReportingScheduleHistoryServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting schedule history service unavailable response has a 4xx status code
func (o *GetAnalyticsReportingScheduleHistoryServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get analytics reporting schedule history service unavailable response has a 5xx status code
func (o *GetAnalyticsReportingScheduleHistoryServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get analytics reporting schedule history service unavailable response a status code equal to that given
func (o *GetAnalyticsReportingScheduleHistoryServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAnalyticsReportingScheduleHistoryServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingScheduleHistoryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnalyticsReportingScheduleHistoryGatewayTimeout creates a GetAnalyticsReportingScheduleHistoryGatewayTimeout with default headers values
func NewGetAnalyticsReportingScheduleHistoryGatewayTimeout() *GetAnalyticsReportingScheduleHistoryGatewayTimeout {
	return &GetAnalyticsReportingScheduleHistoryGatewayTimeout{}
}

/*
GetAnalyticsReportingScheduleHistoryGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetAnalyticsReportingScheduleHistoryGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get analytics reporting schedule history gateway timeout response has a 2xx status code
func (o *GetAnalyticsReportingScheduleHistoryGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get analytics reporting schedule history gateway timeout response has a 3xx status code
func (o *GetAnalyticsReportingScheduleHistoryGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get analytics reporting schedule history gateway timeout response has a 4xx status code
func (o *GetAnalyticsReportingScheduleHistoryGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get analytics reporting schedule history gateway timeout response has a 5xx status code
func (o *GetAnalyticsReportingScheduleHistoryGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get analytics reporting schedule history gateway timeout response a status code equal to that given
func (o *GetAnalyticsReportingScheduleHistoryGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetAnalyticsReportingScheduleHistoryGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/analytics/reporting/schedules/{scheduleId}/history][%d] getAnalyticsReportingScheduleHistoryGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAnalyticsReportingScheduleHistoryGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAnalyticsReportingScheduleHistoryGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

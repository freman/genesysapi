// Code generated by go-swagger; DO NOT EDIT.

package voicemail

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchVoicemailMessageReader is a Reader for the PatchVoicemailMessage structure.
type PatchVoicemailMessageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchVoicemailMessageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchVoicemailMessageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchVoicemailMessageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchVoicemailMessageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchVoicemailMessageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchVoicemailMessageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchVoicemailMessageRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchVoicemailMessageConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchVoicemailMessageRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchVoicemailMessageUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchVoicemailMessageTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchVoicemailMessageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchVoicemailMessageServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchVoicemailMessageGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchVoicemailMessageOK creates a PatchVoicemailMessageOK with default headers values
func NewPatchVoicemailMessageOK() *PatchVoicemailMessageOK {
	return &PatchVoicemailMessageOK{}
}

/*
PatchVoicemailMessageOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchVoicemailMessageOK struct {
	Payload *models.VoicemailMessage
}

// IsSuccess returns true when this patch voicemail message o k response has a 2xx status code
func (o *PatchVoicemailMessageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch voicemail message o k response has a 3xx status code
func (o *PatchVoicemailMessageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch voicemail message o k response has a 4xx status code
func (o *PatchVoicemailMessageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch voicemail message o k response has a 5xx status code
func (o *PatchVoicemailMessageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch voicemail message o k response a status code equal to that given
func (o *PatchVoicemailMessageOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchVoicemailMessageOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageOK  %+v", 200, o.Payload)
}

func (o *PatchVoicemailMessageOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageOK  %+v", 200, o.Payload)
}

func (o *PatchVoicemailMessageOK) GetPayload() *models.VoicemailMessage {
	return o.Payload
}

func (o *PatchVoicemailMessageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VoicemailMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchVoicemailMessageBadRequest creates a PatchVoicemailMessageBadRequest with default headers values
func NewPatchVoicemailMessageBadRequest() *PatchVoicemailMessageBadRequest {
	return &PatchVoicemailMessageBadRequest{}
}

/*
PatchVoicemailMessageBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchVoicemailMessageBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch voicemail message bad request response has a 2xx status code
func (o *PatchVoicemailMessageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch voicemail message bad request response has a 3xx status code
func (o *PatchVoicemailMessageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch voicemail message bad request response has a 4xx status code
func (o *PatchVoicemailMessageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch voicemail message bad request response has a 5xx status code
func (o *PatchVoicemailMessageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch voicemail message bad request response a status code equal to that given
func (o *PatchVoicemailMessageBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchVoicemailMessageBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageBadRequest  %+v", 400, o.Payload)
}

func (o *PatchVoicemailMessageBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageBadRequest  %+v", 400, o.Payload)
}

func (o *PatchVoicemailMessageBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchVoicemailMessageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchVoicemailMessageUnauthorized creates a PatchVoicemailMessageUnauthorized with default headers values
func NewPatchVoicemailMessageUnauthorized() *PatchVoicemailMessageUnauthorized {
	return &PatchVoicemailMessageUnauthorized{}
}

/*
PatchVoicemailMessageUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchVoicemailMessageUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch voicemail message unauthorized response has a 2xx status code
func (o *PatchVoicemailMessageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch voicemail message unauthorized response has a 3xx status code
func (o *PatchVoicemailMessageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch voicemail message unauthorized response has a 4xx status code
func (o *PatchVoicemailMessageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch voicemail message unauthorized response has a 5xx status code
func (o *PatchVoicemailMessageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch voicemail message unauthorized response a status code equal to that given
func (o *PatchVoicemailMessageUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchVoicemailMessageUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchVoicemailMessageUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchVoicemailMessageUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchVoicemailMessageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchVoicemailMessageForbidden creates a PatchVoicemailMessageForbidden with default headers values
func NewPatchVoicemailMessageForbidden() *PatchVoicemailMessageForbidden {
	return &PatchVoicemailMessageForbidden{}
}

/*
PatchVoicemailMessageForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchVoicemailMessageForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch voicemail message forbidden response has a 2xx status code
func (o *PatchVoicemailMessageForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch voicemail message forbidden response has a 3xx status code
func (o *PatchVoicemailMessageForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch voicemail message forbidden response has a 4xx status code
func (o *PatchVoicemailMessageForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch voicemail message forbidden response has a 5xx status code
func (o *PatchVoicemailMessageForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch voicemail message forbidden response a status code equal to that given
func (o *PatchVoicemailMessageForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchVoicemailMessageForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageForbidden  %+v", 403, o.Payload)
}

func (o *PatchVoicemailMessageForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageForbidden  %+v", 403, o.Payload)
}

func (o *PatchVoicemailMessageForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchVoicemailMessageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchVoicemailMessageNotFound creates a PatchVoicemailMessageNotFound with default headers values
func NewPatchVoicemailMessageNotFound() *PatchVoicemailMessageNotFound {
	return &PatchVoicemailMessageNotFound{}
}

/*
PatchVoicemailMessageNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchVoicemailMessageNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch voicemail message not found response has a 2xx status code
func (o *PatchVoicemailMessageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch voicemail message not found response has a 3xx status code
func (o *PatchVoicemailMessageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch voicemail message not found response has a 4xx status code
func (o *PatchVoicemailMessageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch voicemail message not found response has a 5xx status code
func (o *PatchVoicemailMessageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch voicemail message not found response a status code equal to that given
func (o *PatchVoicemailMessageNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchVoicemailMessageNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageNotFound  %+v", 404, o.Payload)
}

func (o *PatchVoicemailMessageNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageNotFound  %+v", 404, o.Payload)
}

func (o *PatchVoicemailMessageNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchVoicemailMessageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchVoicemailMessageRequestTimeout creates a PatchVoicemailMessageRequestTimeout with default headers values
func NewPatchVoicemailMessageRequestTimeout() *PatchVoicemailMessageRequestTimeout {
	return &PatchVoicemailMessageRequestTimeout{}
}

/*
PatchVoicemailMessageRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchVoicemailMessageRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch voicemail message request timeout response has a 2xx status code
func (o *PatchVoicemailMessageRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch voicemail message request timeout response has a 3xx status code
func (o *PatchVoicemailMessageRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch voicemail message request timeout response has a 4xx status code
func (o *PatchVoicemailMessageRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch voicemail message request timeout response has a 5xx status code
func (o *PatchVoicemailMessageRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch voicemail message request timeout response a status code equal to that given
func (o *PatchVoicemailMessageRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchVoicemailMessageRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchVoicemailMessageRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchVoicemailMessageRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchVoicemailMessageRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchVoicemailMessageConflict creates a PatchVoicemailMessageConflict with default headers values
func NewPatchVoicemailMessageConflict() *PatchVoicemailMessageConflict {
	return &PatchVoicemailMessageConflict{}
}

/*
PatchVoicemailMessageConflict describes a response with status code 409, with default header values.

Conflict
*/
type PatchVoicemailMessageConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch voicemail message conflict response has a 2xx status code
func (o *PatchVoicemailMessageConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch voicemail message conflict response has a 3xx status code
func (o *PatchVoicemailMessageConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch voicemail message conflict response has a 4xx status code
func (o *PatchVoicemailMessageConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch voicemail message conflict response has a 5xx status code
func (o *PatchVoicemailMessageConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this patch voicemail message conflict response a status code equal to that given
func (o *PatchVoicemailMessageConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PatchVoicemailMessageConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageConflict  %+v", 409, o.Payload)
}

func (o *PatchVoicemailMessageConflict) String() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageConflict  %+v", 409, o.Payload)
}

func (o *PatchVoicemailMessageConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchVoicemailMessageConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchVoicemailMessageRequestEntityTooLarge creates a PatchVoicemailMessageRequestEntityTooLarge with default headers values
func NewPatchVoicemailMessageRequestEntityTooLarge() *PatchVoicemailMessageRequestEntityTooLarge {
	return &PatchVoicemailMessageRequestEntityTooLarge{}
}

/*
PatchVoicemailMessageRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchVoicemailMessageRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch voicemail message request entity too large response has a 2xx status code
func (o *PatchVoicemailMessageRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch voicemail message request entity too large response has a 3xx status code
func (o *PatchVoicemailMessageRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch voicemail message request entity too large response has a 4xx status code
func (o *PatchVoicemailMessageRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch voicemail message request entity too large response has a 5xx status code
func (o *PatchVoicemailMessageRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch voicemail message request entity too large response a status code equal to that given
func (o *PatchVoicemailMessageRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchVoicemailMessageRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchVoicemailMessageRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchVoicemailMessageRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchVoicemailMessageRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchVoicemailMessageUnsupportedMediaType creates a PatchVoicemailMessageUnsupportedMediaType with default headers values
func NewPatchVoicemailMessageUnsupportedMediaType() *PatchVoicemailMessageUnsupportedMediaType {
	return &PatchVoicemailMessageUnsupportedMediaType{}
}

/*
PatchVoicemailMessageUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchVoicemailMessageUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch voicemail message unsupported media type response has a 2xx status code
func (o *PatchVoicemailMessageUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch voicemail message unsupported media type response has a 3xx status code
func (o *PatchVoicemailMessageUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch voicemail message unsupported media type response has a 4xx status code
func (o *PatchVoicemailMessageUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch voicemail message unsupported media type response has a 5xx status code
func (o *PatchVoicemailMessageUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch voicemail message unsupported media type response a status code equal to that given
func (o *PatchVoicemailMessageUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchVoicemailMessageUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchVoicemailMessageUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchVoicemailMessageUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchVoicemailMessageUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchVoicemailMessageTooManyRequests creates a PatchVoicemailMessageTooManyRequests with default headers values
func NewPatchVoicemailMessageTooManyRequests() *PatchVoicemailMessageTooManyRequests {
	return &PatchVoicemailMessageTooManyRequests{}
}

/*
PatchVoicemailMessageTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchVoicemailMessageTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch voicemail message too many requests response has a 2xx status code
func (o *PatchVoicemailMessageTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch voicemail message too many requests response has a 3xx status code
func (o *PatchVoicemailMessageTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch voicemail message too many requests response has a 4xx status code
func (o *PatchVoicemailMessageTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch voicemail message too many requests response has a 5xx status code
func (o *PatchVoicemailMessageTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch voicemail message too many requests response a status code equal to that given
func (o *PatchVoicemailMessageTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchVoicemailMessageTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchVoicemailMessageTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchVoicemailMessageTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchVoicemailMessageTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchVoicemailMessageInternalServerError creates a PatchVoicemailMessageInternalServerError with default headers values
func NewPatchVoicemailMessageInternalServerError() *PatchVoicemailMessageInternalServerError {
	return &PatchVoicemailMessageInternalServerError{}
}

/*
PatchVoicemailMessageInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchVoicemailMessageInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch voicemail message internal server error response has a 2xx status code
func (o *PatchVoicemailMessageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch voicemail message internal server error response has a 3xx status code
func (o *PatchVoicemailMessageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch voicemail message internal server error response has a 4xx status code
func (o *PatchVoicemailMessageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch voicemail message internal server error response has a 5xx status code
func (o *PatchVoicemailMessageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch voicemail message internal server error response a status code equal to that given
func (o *PatchVoicemailMessageInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchVoicemailMessageInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchVoicemailMessageInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchVoicemailMessageInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchVoicemailMessageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchVoicemailMessageServiceUnavailable creates a PatchVoicemailMessageServiceUnavailable with default headers values
func NewPatchVoicemailMessageServiceUnavailable() *PatchVoicemailMessageServiceUnavailable {
	return &PatchVoicemailMessageServiceUnavailable{}
}

/*
PatchVoicemailMessageServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchVoicemailMessageServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch voicemail message service unavailable response has a 2xx status code
func (o *PatchVoicemailMessageServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch voicemail message service unavailable response has a 3xx status code
func (o *PatchVoicemailMessageServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch voicemail message service unavailable response has a 4xx status code
func (o *PatchVoicemailMessageServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch voicemail message service unavailable response has a 5xx status code
func (o *PatchVoicemailMessageServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch voicemail message service unavailable response a status code equal to that given
func (o *PatchVoicemailMessageServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchVoicemailMessageServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchVoicemailMessageServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchVoicemailMessageServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchVoicemailMessageServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchVoicemailMessageGatewayTimeout creates a PatchVoicemailMessageGatewayTimeout with default headers values
func NewPatchVoicemailMessageGatewayTimeout() *PatchVoicemailMessageGatewayTimeout {
	return &PatchVoicemailMessageGatewayTimeout{}
}

/*
PatchVoicemailMessageGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchVoicemailMessageGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch voicemail message gateway timeout response has a 2xx status code
func (o *PatchVoicemailMessageGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch voicemail message gateway timeout response has a 3xx status code
func (o *PatchVoicemailMessageGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch voicemail message gateway timeout response has a 4xx status code
func (o *PatchVoicemailMessageGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch voicemail message gateway timeout response has a 5xx status code
func (o *PatchVoicemailMessageGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch voicemail message gateway timeout response a status code equal to that given
func (o *PatchVoicemailMessageGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchVoicemailMessageGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchVoicemailMessageGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/voicemail/messages/{messageId}][%d] patchVoicemailMessageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchVoicemailMessageGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchVoicemailMessageGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

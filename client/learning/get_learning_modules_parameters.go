// Code generated by go-swagger; DO NOT EDIT.

package learning

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLearningModulesParams creates a new GetLearningModulesParams object
// with the default values initialized.
func NewGetLearningModulesParams() *GetLearningModulesParams {
	var (
		isArchivedDefault  = bool(false)
		isPublishedDefault = string("Any")
		pageNumberDefault  = int32(1)
		pageSizeDefault    = int32(25)
		sortByDefault      = string("name")
		sortOrderDefault   = string("ascending")
	)
	return &GetLearningModulesParams{
		IsArchived:  &isArchivedDefault,
		IsPublished: &isPublishedDefault,
		PageNumber:  &pageNumberDefault,
		PageSize:    &pageSizeDefault,
		SortBy:      &sortByDefault,
		SortOrder:   &sortOrderDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLearningModulesParamsWithTimeout creates a new GetLearningModulesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLearningModulesParamsWithTimeout(timeout time.Duration) *GetLearningModulesParams {
	var (
		isArchivedDefault  = bool(false)
		isPublishedDefault = string("Any")
		pageNumberDefault  = int32(1)
		pageSizeDefault    = int32(25)
		sortByDefault      = string("name")
		sortOrderDefault   = string("ascending")
	)
	return &GetLearningModulesParams{
		IsArchived:  &isArchivedDefault,
		IsPublished: &isPublishedDefault,
		PageNumber:  &pageNumberDefault,
		PageSize:    &pageSizeDefault,
		SortBy:      &sortByDefault,
		SortOrder:   &sortOrderDefault,

		timeout: timeout,
	}
}

// NewGetLearningModulesParamsWithContext creates a new GetLearningModulesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLearningModulesParamsWithContext(ctx context.Context) *GetLearningModulesParams {
	var (
		isArchivedDefault  = bool(false)
		isPublishedDefault = string("Any")
		pageNumberDefault  = int32(1)
		pageSizeDefault    = int32(25)
		sortByDefault      = string("name")
		sortOrderDefault   = string("ascending")
	)
	return &GetLearningModulesParams{
		IsArchived:  &isArchivedDefault,
		IsPublished: &isPublishedDefault,
		PageNumber:  &pageNumberDefault,
		PageSize:    &pageSizeDefault,
		SortBy:      &sortByDefault,
		SortOrder:   &sortOrderDefault,

		Context: ctx,
	}
}

// NewGetLearningModulesParamsWithHTTPClient creates a new GetLearningModulesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLearningModulesParamsWithHTTPClient(client *http.Client) *GetLearningModulesParams {
	var (
		isArchivedDefault  = bool(false)
		isPublishedDefault = string("Any")
		pageNumberDefault  = int32(1)
		pageSizeDefault    = int32(25)
		sortByDefault      = string("name")
		sortOrderDefault   = string("ascending")
	)
	return &GetLearningModulesParams{
		IsArchived:  &isArchivedDefault,
		IsPublished: &isPublishedDefault,
		PageNumber:  &pageNumberDefault,
		PageSize:    &pageSizeDefault,
		SortBy:      &sortByDefault,
		SortOrder:   &sortOrderDefault,
		HTTPClient:  client,
	}
}

/*GetLearningModulesParams contains all the parameters to send to the API endpoint
for the get learning modules operation typically these are written to a http.Request
*/
type GetLearningModulesParams struct {

	/*Expand
	  Fields to expand in response(case insensitive)

	*/
	Expand []string
	/*IsArchived
	  Archive status

	*/
	IsArchived *bool
	/*IsPublished
	  Specifies if only the Unpublished (isPublished is "False") or Published (isPublished is "True") modules are returned. If isPublished is "Any" or omitted, both types are returned

	*/
	IsPublished *string
	/*PageNumber
	  Page number

	*/
	PageNumber *int32
	/*PageSize
	  Page size

	*/
	PageSize *int32
	/*SearchTerm
	  Search Term (searchable by name)

	*/
	SearchTerm *string
	/*SortBy
	  Sort by

	*/
	SortBy *string
	/*SortOrder
	  Sort order

	*/
	SortOrder *string
	/*Types
	  Specifies the module types.

	*/
	Types []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get learning modules params
func (o *GetLearningModulesParams) WithTimeout(timeout time.Duration) *GetLearningModulesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get learning modules params
func (o *GetLearningModulesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get learning modules params
func (o *GetLearningModulesParams) WithContext(ctx context.Context) *GetLearningModulesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get learning modules params
func (o *GetLearningModulesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get learning modules params
func (o *GetLearningModulesParams) WithHTTPClient(client *http.Client) *GetLearningModulesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get learning modules params
func (o *GetLearningModulesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExpand adds the expand to the get learning modules params
func (o *GetLearningModulesParams) WithExpand(expand []string) *GetLearningModulesParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get learning modules params
func (o *GetLearningModulesParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithIsArchived adds the isArchived to the get learning modules params
func (o *GetLearningModulesParams) WithIsArchived(isArchived *bool) *GetLearningModulesParams {
	o.SetIsArchived(isArchived)
	return o
}

// SetIsArchived adds the isArchived to the get learning modules params
func (o *GetLearningModulesParams) SetIsArchived(isArchived *bool) {
	o.IsArchived = isArchived
}

// WithIsPublished adds the isPublished to the get learning modules params
func (o *GetLearningModulesParams) WithIsPublished(isPublished *string) *GetLearningModulesParams {
	o.SetIsPublished(isPublished)
	return o
}

// SetIsPublished adds the isPublished to the get learning modules params
func (o *GetLearningModulesParams) SetIsPublished(isPublished *string) {
	o.IsPublished = isPublished
}

// WithPageNumber adds the pageNumber to the get learning modules params
func (o *GetLearningModulesParams) WithPageNumber(pageNumber *int32) *GetLearningModulesParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get learning modules params
func (o *GetLearningModulesParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get learning modules params
func (o *GetLearningModulesParams) WithPageSize(pageSize *int32) *GetLearningModulesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get learning modules params
func (o *GetLearningModulesParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithSearchTerm adds the searchTerm to the get learning modules params
func (o *GetLearningModulesParams) WithSearchTerm(searchTerm *string) *GetLearningModulesParams {
	o.SetSearchTerm(searchTerm)
	return o
}

// SetSearchTerm adds the searchTerm to the get learning modules params
func (o *GetLearningModulesParams) SetSearchTerm(searchTerm *string) {
	o.SearchTerm = searchTerm
}

// WithSortBy adds the sortBy to the get learning modules params
func (o *GetLearningModulesParams) WithSortBy(sortBy *string) *GetLearningModulesParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get learning modules params
func (o *GetLearningModulesParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortOrder adds the sortOrder to the get learning modules params
func (o *GetLearningModulesParams) WithSortOrder(sortOrder *string) *GetLearningModulesParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get learning modules params
func (o *GetLearningModulesParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithTypes adds the types to the get learning modules params
func (o *GetLearningModulesParams) WithTypes(types []string) *GetLearningModulesParams {
	o.SetTypes(types)
	return o
}

// SetTypes adds the types to the get learning modules params
func (o *GetLearningModulesParams) SetTypes(types []string) {
	o.Types = types
}

// WriteToRequest writes these params to a swagger request
func (o *GetLearningModulesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesExpand := o.Expand

	joinedExpand := swag.JoinByFormat(valuesExpand, "multi")
	// query array param expand
	if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
		return err
	}

	if o.IsArchived != nil {

		// query param isArchived
		var qrIsArchived bool
		if o.IsArchived != nil {
			qrIsArchived = *o.IsArchived
		}
		qIsArchived := swag.FormatBool(qrIsArchived)
		if qIsArchived != "" {
			if err := r.SetQueryParam("isArchived", qIsArchived); err != nil {
				return err
			}
		}

	}

	if o.IsPublished != nil {

		// query param isPublished
		var qrIsPublished string
		if o.IsPublished != nil {
			qrIsPublished = *o.IsPublished
		}
		qIsPublished := qrIsPublished
		if qIsPublished != "" {
			if err := r.SetQueryParam("isPublished", qIsPublished); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.SearchTerm != nil {

		// query param searchTerm
		var qrSearchTerm string
		if o.SearchTerm != nil {
			qrSearchTerm = *o.SearchTerm
		}
		qSearchTerm := qrSearchTerm
		if qSearchTerm != "" {
			if err := r.SetQueryParam("searchTerm", qSearchTerm); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string
		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {
			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}

	}

	valuesTypes := o.Types

	joinedTypes := swag.JoinByFormat(valuesTypes, "multi")
	// query array param types
	if err := r.SetQueryParam("types", joinedTypes...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

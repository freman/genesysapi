// Code generated by go-swagger; DO NOT EDIT.

package learning

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchLearningAssignmentReader is a Reader for the PatchLearningAssignment structure.
type PatchLearningAssignmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLearningAssignmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchLearningAssignmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchLearningAssignmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchLearningAssignmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchLearningAssignmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchLearningAssignmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchLearningAssignmentRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchLearningAssignmentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchLearningAssignmentRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchLearningAssignmentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchLearningAssignmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchLearningAssignmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchLearningAssignmentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchLearningAssignmentGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchLearningAssignmentOK creates a PatchLearningAssignmentOK with default headers values
func NewPatchLearningAssignmentOK() *PatchLearningAssignmentOK {
	return &PatchLearningAssignmentOK{}
}

/*PatchLearningAssignmentOK handles this case with default header values.

successful operation
*/
type PatchLearningAssignmentOK struct {
	Payload *models.LearningAssignment
}

func (o *PatchLearningAssignmentOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}][%d] patchLearningAssignmentOK  %+v", 200, o.Payload)
}

func (o *PatchLearningAssignmentOK) GetPayload() *models.LearningAssignment {
	return o.Payload
}

func (o *PatchLearningAssignmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LearningAssignment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentBadRequest creates a PatchLearningAssignmentBadRequest with default headers values
func NewPatchLearningAssignmentBadRequest() *PatchLearningAssignmentBadRequest {
	return &PatchLearningAssignmentBadRequest{}
}

/*PatchLearningAssignmentBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchLearningAssignmentBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchLearningAssignmentBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}][%d] patchLearningAssignmentBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLearningAssignmentBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentUnauthorized creates a PatchLearningAssignmentUnauthorized with default headers values
func NewPatchLearningAssignmentUnauthorized() *PatchLearningAssignmentUnauthorized {
	return &PatchLearningAssignmentUnauthorized{}
}

/*PatchLearningAssignmentUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchLearningAssignmentUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchLearningAssignmentUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}][%d] patchLearningAssignmentUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchLearningAssignmentUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentForbidden creates a PatchLearningAssignmentForbidden with default headers values
func NewPatchLearningAssignmentForbidden() *PatchLearningAssignmentForbidden {
	return &PatchLearningAssignmentForbidden{}
}

/*PatchLearningAssignmentForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchLearningAssignmentForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchLearningAssignmentForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}][%d] patchLearningAssignmentForbidden  %+v", 403, o.Payload)
}

func (o *PatchLearningAssignmentForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentNotFound creates a PatchLearningAssignmentNotFound with default headers values
func NewPatchLearningAssignmentNotFound() *PatchLearningAssignmentNotFound {
	return &PatchLearningAssignmentNotFound{}
}

/*PatchLearningAssignmentNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchLearningAssignmentNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchLearningAssignmentNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}][%d] patchLearningAssignmentNotFound  %+v", 404, o.Payload)
}

func (o *PatchLearningAssignmentNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentRequestTimeout creates a PatchLearningAssignmentRequestTimeout with default headers values
func NewPatchLearningAssignmentRequestTimeout() *PatchLearningAssignmentRequestTimeout {
	return &PatchLearningAssignmentRequestTimeout{}
}

/*PatchLearningAssignmentRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchLearningAssignmentRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchLearningAssignmentRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}][%d] patchLearningAssignmentRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchLearningAssignmentRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentConflict creates a PatchLearningAssignmentConflict with default headers values
func NewPatchLearningAssignmentConflict() *PatchLearningAssignmentConflict {
	return &PatchLearningAssignmentConflict{}
}

/*PatchLearningAssignmentConflict handles this case with default header values.

Conflict
*/
type PatchLearningAssignmentConflict struct {
	Payload *models.ErrorBody
}

func (o *PatchLearningAssignmentConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}][%d] patchLearningAssignmentConflict  %+v", 409, o.Payload)
}

func (o *PatchLearningAssignmentConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentRequestEntityTooLarge creates a PatchLearningAssignmentRequestEntityTooLarge with default headers values
func NewPatchLearningAssignmentRequestEntityTooLarge() *PatchLearningAssignmentRequestEntityTooLarge {
	return &PatchLearningAssignmentRequestEntityTooLarge{}
}

/*PatchLearningAssignmentRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchLearningAssignmentRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchLearningAssignmentRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}][%d] patchLearningAssignmentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchLearningAssignmentRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentUnsupportedMediaType creates a PatchLearningAssignmentUnsupportedMediaType with default headers values
func NewPatchLearningAssignmentUnsupportedMediaType() *PatchLearningAssignmentUnsupportedMediaType {
	return &PatchLearningAssignmentUnsupportedMediaType{}
}

/*PatchLearningAssignmentUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchLearningAssignmentUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchLearningAssignmentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}][%d] patchLearningAssignmentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchLearningAssignmentUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentTooManyRequests creates a PatchLearningAssignmentTooManyRequests with default headers values
func NewPatchLearningAssignmentTooManyRequests() *PatchLearningAssignmentTooManyRequests {
	return &PatchLearningAssignmentTooManyRequests{}
}

/*PatchLearningAssignmentTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchLearningAssignmentTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchLearningAssignmentTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}][%d] patchLearningAssignmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchLearningAssignmentTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentInternalServerError creates a PatchLearningAssignmentInternalServerError with default headers values
func NewPatchLearningAssignmentInternalServerError() *PatchLearningAssignmentInternalServerError {
	return &PatchLearningAssignmentInternalServerError{}
}

/*PatchLearningAssignmentInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchLearningAssignmentInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchLearningAssignmentInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}][%d] patchLearningAssignmentInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchLearningAssignmentInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentServiceUnavailable creates a PatchLearningAssignmentServiceUnavailable with default headers values
func NewPatchLearningAssignmentServiceUnavailable() *PatchLearningAssignmentServiceUnavailable {
	return &PatchLearningAssignmentServiceUnavailable{}
}

/*PatchLearningAssignmentServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchLearningAssignmentServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchLearningAssignmentServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}][%d] patchLearningAssignmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchLearningAssignmentServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentGatewayTimeout creates a PatchLearningAssignmentGatewayTimeout with default headers values
func NewPatchLearningAssignmentGatewayTimeout() *PatchLearningAssignmentGatewayTimeout {
	return &PatchLearningAssignmentGatewayTimeout{}
}

/*PatchLearningAssignmentGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchLearningAssignmentGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchLearningAssignmentGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}][%d] patchLearningAssignmentGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchLearningAssignmentGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

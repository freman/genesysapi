// Code generated by go-swagger; DO NOT EDIT.

package learning

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetLearningModulesCoverartCoverArtIDReader is a Reader for the GetLearningModulesCoverartCoverArtID structure.
type GetLearningModulesCoverartCoverArtIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLearningModulesCoverartCoverArtIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLearningModulesCoverartCoverArtIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLearningModulesCoverartCoverArtIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLearningModulesCoverartCoverArtIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLearningModulesCoverartCoverArtIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLearningModulesCoverartCoverArtIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetLearningModulesCoverartCoverArtIDRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetLearningModulesCoverartCoverArtIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetLearningModulesCoverartCoverArtIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetLearningModulesCoverartCoverArtIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLearningModulesCoverartCoverArtIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetLearningModulesCoverartCoverArtIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetLearningModulesCoverartCoverArtIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLearningModulesCoverartCoverArtIDOK creates a GetLearningModulesCoverartCoverArtIDOK with default headers values
func NewGetLearningModulesCoverartCoverArtIDOK() *GetLearningModulesCoverartCoverArtIDOK {
	return &GetLearningModulesCoverartCoverArtIDOK{}
}

/*
GetLearningModulesCoverartCoverArtIDOK describes a response with status code 200, with default header values.

successful operation
*/
type GetLearningModulesCoverartCoverArtIDOK struct {
	Payload *models.LearningModuleCoverArtResponse
}

// IsSuccess returns true when this get learning modules coverart cover art Id o k response has a 2xx status code
func (o *GetLearningModulesCoverartCoverArtIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get learning modules coverart cover art Id o k response has a 3xx status code
func (o *GetLearningModulesCoverartCoverArtIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get learning modules coverart cover art Id o k response has a 4xx status code
func (o *GetLearningModulesCoverartCoverArtIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get learning modules coverart cover art Id o k response has a 5xx status code
func (o *GetLearningModulesCoverartCoverArtIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get learning modules coverart cover art Id o k response a status code equal to that given
func (o *GetLearningModulesCoverartCoverArtIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetLearningModulesCoverartCoverArtIDOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdOK  %+v", 200, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDOK) String() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdOK  %+v", 200, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDOK) GetPayload() *models.LearningModuleCoverArtResponse {
	return o.Payload
}

func (o *GetLearningModulesCoverartCoverArtIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LearningModuleCoverArtResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearningModulesCoverartCoverArtIDBadRequest creates a GetLearningModulesCoverartCoverArtIDBadRequest with default headers values
func NewGetLearningModulesCoverartCoverArtIDBadRequest() *GetLearningModulesCoverartCoverArtIDBadRequest {
	return &GetLearningModulesCoverartCoverArtIDBadRequest{}
}

/*
GetLearningModulesCoverartCoverArtIDBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetLearningModulesCoverartCoverArtIDBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get learning modules coverart cover art Id bad request response has a 2xx status code
func (o *GetLearningModulesCoverartCoverArtIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get learning modules coverart cover art Id bad request response has a 3xx status code
func (o *GetLearningModulesCoverartCoverArtIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get learning modules coverart cover art Id bad request response has a 4xx status code
func (o *GetLearningModulesCoverartCoverArtIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get learning modules coverart cover art Id bad request response has a 5xx status code
func (o *GetLearningModulesCoverartCoverArtIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get learning modules coverart cover art Id bad request response a status code equal to that given
func (o *GetLearningModulesCoverartCoverArtIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetLearningModulesCoverartCoverArtIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLearningModulesCoverartCoverArtIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearningModulesCoverartCoverArtIDUnauthorized creates a GetLearningModulesCoverartCoverArtIDUnauthorized with default headers values
func NewGetLearningModulesCoverartCoverArtIDUnauthorized() *GetLearningModulesCoverartCoverArtIDUnauthorized {
	return &GetLearningModulesCoverartCoverArtIDUnauthorized{}
}

/*
GetLearningModulesCoverartCoverArtIDUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetLearningModulesCoverartCoverArtIDUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get learning modules coverart cover art Id unauthorized response has a 2xx status code
func (o *GetLearningModulesCoverartCoverArtIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get learning modules coverart cover art Id unauthorized response has a 3xx status code
func (o *GetLearningModulesCoverartCoverArtIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get learning modules coverart cover art Id unauthorized response has a 4xx status code
func (o *GetLearningModulesCoverartCoverArtIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get learning modules coverart cover art Id unauthorized response has a 5xx status code
func (o *GetLearningModulesCoverartCoverArtIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get learning modules coverart cover art Id unauthorized response a status code equal to that given
func (o *GetLearningModulesCoverartCoverArtIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetLearningModulesCoverartCoverArtIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLearningModulesCoverartCoverArtIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearningModulesCoverartCoverArtIDForbidden creates a GetLearningModulesCoverartCoverArtIDForbidden with default headers values
func NewGetLearningModulesCoverartCoverArtIDForbidden() *GetLearningModulesCoverartCoverArtIDForbidden {
	return &GetLearningModulesCoverartCoverArtIDForbidden{}
}

/*
GetLearningModulesCoverartCoverArtIDForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetLearningModulesCoverartCoverArtIDForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get learning modules coverart cover art Id forbidden response has a 2xx status code
func (o *GetLearningModulesCoverartCoverArtIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get learning modules coverart cover art Id forbidden response has a 3xx status code
func (o *GetLearningModulesCoverartCoverArtIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get learning modules coverart cover art Id forbidden response has a 4xx status code
func (o *GetLearningModulesCoverartCoverArtIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get learning modules coverart cover art Id forbidden response has a 5xx status code
func (o *GetLearningModulesCoverartCoverArtIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get learning modules coverart cover art Id forbidden response a status code equal to that given
func (o *GetLearningModulesCoverartCoverArtIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetLearningModulesCoverartCoverArtIDForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdForbidden  %+v", 403, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdForbidden  %+v", 403, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLearningModulesCoverartCoverArtIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearningModulesCoverartCoverArtIDNotFound creates a GetLearningModulesCoverartCoverArtIDNotFound with default headers values
func NewGetLearningModulesCoverartCoverArtIDNotFound() *GetLearningModulesCoverartCoverArtIDNotFound {
	return &GetLearningModulesCoverartCoverArtIDNotFound{}
}

/*
GetLearningModulesCoverartCoverArtIDNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetLearningModulesCoverartCoverArtIDNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get learning modules coverart cover art Id not found response has a 2xx status code
func (o *GetLearningModulesCoverartCoverArtIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get learning modules coverart cover art Id not found response has a 3xx status code
func (o *GetLearningModulesCoverartCoverArtIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get learning modules coverart cover art Id not found response has a 4xx status code
func (o *GetLearningModulesCoverartCoverArtIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get learning modules coverart cover art Id not found response has a 5xx status code
func (o *GetLearningModulesCoverartCoverArtIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get learning modules coverart cover art Id not found response a status code equal to that given
func (o *GetLearningModulesCoverartCoverArtIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetLearningModulesCoverartCoverArtIDNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdNotFound  %+v", 404, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdNotFound  %+v", 404, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLearningModulesCoverartCoverArtIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearningModulesCoverartCoverArtIDRequestTimeout creates a GetLearningModulesCoverartCoverArtIDRequestTimeout with default headers values
func NewGetLearningModulesCoverartCoverArtIDRequestTimeout() *GetLearningModulesCoverartCoverArtIDRequestTimeout {
	return &GetLearningModulesCoverartCoverArtIDRequestTimeout{}
}

/*
GetLearningModulesCoverartCoverArtIDRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetLearningModulesCoverartCoverArtIDRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get learning modules coverart cover art Id request timeout response has a 2xx status code
func (o *GetLearningModulesCoverartCoverArtIDRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get learning modules coverart cover art Id request timeout response has a 3xx status code
func (o *GetLearningModulesCoverartCoverArtIDRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get learning modules coverart cover art Id request timeout response has a 4xx status code
func (o *GetLearningModulesCoverartCoverArtIDRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get learning modules coverart cover art Id request timeout response has a 5xx status code
func (o *GetLearningModulesCoverartCoverArtIDRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get learning modules coverart cover art Id request timeout response a status code equal to that given
func (o *GetLearningModulesCoverartCoverArtIDRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetLearningModulesCoverartCoverArtIDRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLearningModulesCoverartCoverArtIDRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearningModulesCoverartCoverArtIDRequestEntityTooLarge creates a GetLearningModulesCoverartCoverArtIDRequestEntityTooLarge with default headers values
func NewGetLearningModulesCoverartCoverArtIDRequestEntityTooLarge() *GetLearningModulesCoverartCoverArtIDRequestEntityTooLarge {
	return &GetLearningModulesCoverartCoverArtIDRequestEntityTooLarge{}
}

/*
GetLearningModulesCoverartCoverArtIDRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetLearningModulesCoverartCoverArtIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get learning modules coverart cover art Id request entity too large response has a 2xx status code
func (o *GetLearningModulesCoverartCoverArtIDRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get learning modules coverart cover art Id request entity too large response has a 3xx status code
func (o *GetLearningModulesCoverartCoverArtIDRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get learning modules coverart cover art Id request entity too large response has a 4xx status code
func (o *GetLearningModulesCoverartCoverArtIDRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get learning modules coverart cover art Id request entity too large response has a 5xx status code
func (o *GetLearningModulesCoverartCoverArtIDRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get learning modules coverart cover art Id request entity too large response a status code equal to that given
func (o *GetLearningModulesCoverartCoverArtIDRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetLearningModulesCoverartCoverArtIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLearningModulesCoverartCoverArtIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearningModulesCoverartCoverArtIDUnsupportedMediaType creates a GetLearningModulesCoverartCoverArtIDUnsupportedMediaType with default headers values
func NewGetLearningModulesCoverartCoverArtIDUnsupportedMediaType() *GetLearningModulesCoverartCoverArtIDUnsupportedMediaType {
	return &GetLearningModulesCoverartCoverArtIDUnsupportedMediaType{}
}

/*
GetLearningModulesCoverartCoverArtIDUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetLearningModulesCoverartCoverArtIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get learning modules coverart cover art Id unsupported media type response has a 2xx status code
func (o *GetLearningModulesCoverartCoverArtIDUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get learning modules coverart cover art Id unsupported media type response has a 3xx status code
func (o *GetLearningModulesCoverartCoverArtIDUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get learning modules coverart cover art Id unsupported media type response has a 4xx status code
func (o *GetLearningModulesCoverartCoverArtIDUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get learning modules coverart cover art Id unsupported media type response has a 5xx status code
func (o *GetLearningModulesCoverartCoverArtIDUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get learning modules coverart cover art Id unsupported media type response a status code equal to that given
func (o *GetLearningModulesCoverartCoverArtIDUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetLearningModulesCoverartCoverArtIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLearningModulesCoverartCoverArtIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearningModulesCoverartCoverArtIDTooManyRequests creates a GetLearningModulesCoverartCoverArtIDTooManyRequests with default headers values
func NewGetLearningModulesCoverartCoverArtIDTooManyRequests() *GetLearningModulesCoverartCoverArtIDTooManyRequests {
	return &GetLearningModulesCoverartCoverArtIDTooManyRequests{}
}

/*
GetLearningModulesCoverartCoverArtIDTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetLearningModulesCoverartCoverArtIDTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get learning modules coverart cover art Id too many requests response has a 2xx status code
func (o *GetLearningModulesCoverartCoverArtIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get learning modules coverart cover art Id too many requests response has a 3xx status code
func (o *GetLearningModulesCoverartCoverArtIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get learning modules coverart cover art Id too many requests response has a 4xx status code
func (o *GetLearningModulesCoverartCoverArtIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get learning modules coverart cover art Id too many requests response has a 5xx status code
func (o *GetLearningModulesCoverartCoverArtIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get learning modules coverart cover art Id too many requests response a status code equal to that given
func (o *GetLearningModulesCoverartCoverArtIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetLearningModulesCoverartCoverArtIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLearningModulesCoverartCoverArtIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearningModulesCoverartCoverArtIDInternalServerError creates a GetLearningModulesCoverartCoverArtIDInternalServerError with default headers values
func NewGetLearningModulesCoverartCoverArtIDInternalServerError() *GetLearningModulesCoverartCoverArtIDInternalServerError {
	return &GetLearningModulesCoverartCoverArtIDInternalServerError{}
}

/*
GetLearningModulesCoverartCoverArtIDInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetLearningModulesCoverartCoverArtIDInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get learning modules coverart cover art Id internal server error response has a 2xx status code
func (o *GetLearningModulesCoverartCoverArtIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get learning modules coverart cover art Id internal server error response has a 3xx status code
func (o *GetLearningModulesCoverartCoverArtIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get learning modules coverart cover art Id internal server error response has a 4xx status code
func (o *GetLearningModulesCoverartCoverArtIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get learning modules coverart cover art Id internal server error response has a 5xx status code
func (o *GetLearningModulesCoverartCoverArtIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get learning modules coverart cover art Id internal server error response a status code equal to that given
func (o *GetLearningModulesCoverartCoverArtIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetLearningModulesCoverartCoverArtIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLearningModulesCoverartCoverArtIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearningModulesCoverartCoverArtIDServiceUnavailable creates a GetLearningModulesCoverartCoverArtIDServiceUnavailable with default headers values
func NewGetLearningModulesCoverartCoverArtIDServiceUnavailable() *GetLearningModulesCoverartCoverArtIDServiceUnavailable {
	return &GetLearningModulesCoverartCoverArtIDServiceUnavailable{}
}

/*
GetLearningModulesCoverartCoverArtIDServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetLearningModulesCoverartCoverArtIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get learning modules coverart cover art Id service unavailable response has a 2xx status code
func (o *GetLearningModulesCoverartCoverArtIDServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get learning modules coverart cover art Id service unavailable response has a 3xx status code
func (o *GetLearningModulesCoverartCoverArtIDServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get learning modules coverart cover art Id service unavailable response has a 4xx status code
func (o *GetLearningModulesCoverartCoverArtIDServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get learning modules coverart cover art Id service unavailable response has a 5xx status code
func (o *GetLearningModulesCoverartCoverArtIDServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get learning modules coverart cover art Id service unavailable response a status code equal to that given
func (o *GetLearningModulesCoverartCoverArtIDServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetLearningModulesCoverartCoverArtIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLearningModulesCoverartCoverArtIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLearningModulesCoverartCoverArtIDGatewayTimeout creates a GetLearningModulesCoverartCoverArtIDGatewayTimeout with default headers values
func NewGetLearningModulesCoverartCoverArtIDGatewayTimeout() *GetLearningModulesCoverartCoverArtIDGatewayTimeout {
	return &GetLearningModulesCoverartCoverArtIDGatewayTimeout{}
}

/*
GetLearningModulesCoverartCoverArtIDGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetLearningModulesCoverartCoverArtIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get learning modules coverart cover art Id gateway timeout response has a 2xx status code
func (o *GetLearningModulesCoverartCoverArtIDGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get learning modules coverart cover art Id gateway timeout response has a 3xx status code
func (o *GetLearningModulesCoverartCoverArtIDGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get learning modules coverart cover art Id gateway timeout response has a 4xx status code
func (o *GetLearningModulesCoverartCoverArtIDGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get learning modules coverart cover art Id gateway timeout response has a 5xx status code
func (o *GetLearningModulesCoverartCoverArtIDGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get learning modules coverart cover art Id gateway timeout response a status code equal to that given
func (o *GetLearningModulesCoverartCoverArtIDGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetLearningModulesCoverartCoverArtIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/learning/modules/coverart/{coverArtId}][%d] getLearningModulesCoverartCoverArtIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetLearningModulesCoverartCoverArtIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLearningModulesCoverartCoverArtIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package learning

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLearningModulesAssignmentsParams creates a new GetLearningModulesAssignmentsParams object
// with the default values initialized.
func NewGetLearningModulesAssignmentsParams() *GetLearningModulesAssignmentsParams {
	var (
		overdueDefault    = string("Any")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
	)
	return &GetLearningModulesAssignmentsParams{
		Overdue:    &overdueDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLearningModulesAssignmentsParamsWithTimeout creates a new GetLearningModulesAssignmentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLearningModulesAssignmentsParamsWithTimeout(timeout time.Duration) *GetLearningModulesAssignmentsParams {
	var (
		overdueDefault    = string("Any")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
	)
	return &GetLearningModulesAssignmentsParams{
		Overdue:    &overdueDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		timeout: timeout,
	}
}

// NewGetLearningModulesAssignmentsParamsWithContext creates a new GetLearningModulesAssignmentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLearningModulesAssignmentsParamsWithContext(ctx context.Context) *GetLearningModulesAssignmentsParams {
	var (
		overdueDefault    = string("Any")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
	)
	return &GetLearningModulesAssignmentsParams{
		Overdue:    &overdueDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		Context: ctx,
	}
}

// NewGetLearningModulesAssignmentsParamsWithHTTPClient creates a new GetLearningModulesAssignmentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLearningModulesAssignmentsParamsWithHTTPClient(client *http.Client) *GetLearningModulesAssignmentsParams {
	var (
		overdueDefault    = string("Any")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
	)
	return &GetLearningModulesAssignmentsParams{
		Overdue:    &overdueDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		HTTPClient: client,
	}
}

/*GetLearningModulesAssignmentsParams contains all the parameters to send to the API endpoint
for the get learning modules assignments operation typically these are written to a http.Request
*/
type GetLearningModulesAssignmentsParams struct {

	/*AssignmentStates
	  Specifies the assignment states to return.

	*/
	AssignmentStates []string
	/*Expand
	  Fields to expand in response(case insensitive)

	*/
	Expand []string
	/*Overdue
	  Specifies if only modules with overdue/not overdue (overdue is "True" or "False") assignments are returned. If overdue is "Any" or omitted, both are returned and can including modules that are unassigned.

	*/
	Overdue *string
	/*PageNumber
	  Page number

	*/
	PageNumber *int32
	/*PageSize
	  Page size

	*/
	PageSize *int32
	/*SearchTerm
	  Search Term (searches by name and description)

	*/
	SearchTerm *string
	/*UserIds
	  The IDs of the users to include

	*/
	UserIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) WithTimeout(timeout time.Duration) *GetLearningModulesAssignmentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) WithContext(ctx context.Context) *GetLearningModulesAssignmentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) WithHTTPClient(client *http.Client) *GetLearningModulesAssignmentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssignmentStates adds the assignmentStates to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) WithAssignmentStates(assignmentStates []string) *GetLearningModulesAssignmentsParams {
	o.SetAssignmentStates(assignmentStates)
	return o
}

// SetAssignmentStates adds the assignmentStates to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) SetAssignmentStates(assignmentStates []string) {
	o.AssignmentStates = assignmentStates
}

// WithExpand adds the expand to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) WithExpand(expand []string) *GetLearningModulesAssignmentsParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithOverdue adds the overdue to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) WithOverdue(overdue *string) *GetLearningModulesAssignmentsParams {
	o.SetOverdue(overdue)
	return o
}

// SetOverdue adds the overdue to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) SetOverdue(overdue *string) {
	o.Overdue = overdue
}

// WithPageNumber adds the pageNumber to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) WithPageNumber(pageNumber *int32) *GetLearningModulesAssignmentsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) WithPageSize(pageSize *int32) *GetLearningModulesAssignmentsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithSearchTerm adds the searchTerm to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) WithSearchTerm(searchTerm *string) *GetLearningModulesAssignmentsParams {
	o.SetSearchTerm(searchTerm)
	return o
}

// SetSearchTerm adds the searchTerm to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) SetSearchTerm(searchTerm *string) {
	o.SearchTerm = searchTerm
}

// WithUserIds adds the userIds to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) WithUserIds(userIds []string) *GetLearningModulesAssignmentsParams {
	o.SetUserIds(userIds)
	return o
}

// SetUserIds adds the userIds to the get learning modules assignments params
func (o *GetLearningModulesAssignmentsParams) SetUserIds(userIds []string) {
	o.UserIds = userIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetLearningModulesAssignmentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesAssignmentStates := o.AssignmentStates

	joinedAssignmentStates := swag.JoinByFormat(valuesAssignmentStates, "multi")
	// query array param assignmentStates
	if err := r.SetQueryParam("assignmentStates", joinedAssignmentStates...); err != nil {
		return err
	}

	valuesExpand := o.Expand

	joinedExpand := swag.JoinByFormat(valuesExpand, "multi")
	// query array param expand
	if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
		return err
	}

	if o.Overdue != nil {

		// query param overdue
		var qrOverdue string
		if o.Overdue != nil {
			qrOverdue = *o.Overdue
		}
		qOverdue := qrOverdue
		if qOverdue != "" {
			if err := r.SetQueryParam("overdue", qOverdue); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.SearchTerm != nil {

		// query param searchTerm
		var qrSearchTerm string
		if o.SearchTerm != nil {
			qrSearchTerm = *o.SearchTerm
		}
		qSearchTerm := qrSearchTerm
		if qSearchTerm != "" {
			if err := r.SetQueryParam("searchTerm", qSearchTerm); err != nil {
				return err
			}
		}

	}

	valuesUserIds := o.UserIds

	joinedUserIds := swag.JoinByFormat(valuesUserIds, "multi")
	// query array param userIds
	if err := r.SetQueryParam("userIds", joinedUserIds...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

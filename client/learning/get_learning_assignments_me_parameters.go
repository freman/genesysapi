// Code generated by go-swagger; DO NOT EDIT.

package learning

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLearningAssignmentsMeParams creates a new GetLearningAssignmentsMeParams object
// with the default values initialized.
func NewGetLearningAssignmentsMeParams() *GetLearningAssignmentsMeParams {
	var (
		overdueDefault    = string("Any")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortOrderDefault  = string("Desc")
	)
	return &GetLearningAssignmentsMeParams{
		Overdue:    &overdueDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortOrder:  &sortOrderDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLearningAssignmentsMeParamsWithTimeout creates a new GetLearningAssignmentsMeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLearningAssignmentsMeParamsWithTimeout(timeout time.Duration) *GetLearningAssignmentsMeParams {
	var (
		overdueDefault    = string("Any")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortOrderDefault  = string("Desc")
	)
	return &GetLearningAssignmentsMeParams{
		Overdue:    &overdueDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortOrder:  &sortOrderDefault,

		timeout: timeout,
	}
}

// NewGetLearningAssignmentsMeParamsWithContext creates a new GetLearningAssignmentsMeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLearningAssignmentsMeParamsWithContext(ctx context.Context) *GetLearningAssignmentsMeParams {
	var (
		overdueDefault    = string("Any")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortOrderDefault  = string("Desc")
	)
	return &GetLearningAssignmentsMeParams{
		Overdue:    &overdueDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortOrder:  &sortOrderDefault,

		Context: ctx,
	}
}

// NewGetLearningAssignmentsMeParamsWithHTTPClient creates a new GetLearningAssignmentsMeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLearningAssignmentsMeParamsWithHTTPClient(client *http.Client) *GetLearningAssignmentsMeParams {
	var (
		overdueDefault    = string("Any")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortOrderDefault  = string("Desc")
	)
	return &GetLearningAssignmentsMeParams{
		Overdue:    &overdueDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortOrder:  &sortOrderDefault,
		HTTPClient: client,
	}
}

/*GetLearningAssignmentsMeParams contains all the parameters to send to the API endpoint
for the get learning assignments me operation typically these are written to a http.Request
*/
type GetLearningAssignmentsMeParams struct {

	/*CompletionInterval
	  Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss

	*/
	CompletionInterval *string
	/*Expand
	  Specifies the expand option for returning additional information

	*/
	Expand []string
	/*Interval
	  Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss

	*/
	Interval *string
	/*ModuleID
	  Specifies the ID of the learning module. Fetch assignments for learning module ID

	*/
	ModuleID *string
	/*Overdue
	  Specifies if only the non-overdue (overdue is "False") or overdue (overdue is "True") assignments are returned. If overdue is "Any" or if the overdue parameter is not supplied, all assignments are returned

	*/
	Overdue *string
	/*PageNumber
	  Page number

	*/
	PageNumber *int32
	/*PageSize
	  Page size

	*/
	PageSize *int32
	/*SortBy
	  Specifies which field to sort the results by, default sort is by recommendedCompletionDate

	*/
	SortBy *string
	/*SortOrder
	  Specifies result set sort order; if not specified, default sort order is descending (Desc)

	*/
	SortOrder *string
	/*States
	  Specifies the assignment states to filter by

	*/
	States []string
	/*Types
	  Specifies the assignment types, currently not supported and will be ignored. For now, all learning assignments regardless of types will be returned

	*/
	Types []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) WithTimeout(timeout time.Duration) *GetLearningAssignmentsMeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) WithContext(ctx context.Context) *GetLearningAssignmentsMeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) WithHTTPClient(client *http.Client) *GetLearningAssignmentsMeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCompletionInterval adds the completionInterval to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) WithCompletionInterval(completionInterval *string) *GetLearningAssignmentsMeParams {
	o.SetCompletionInterval(completionInterval)
	return o
}

// SetCompletionInterval adds the completionInterval to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) SetCompletionInterval(completionInterval *string) {
	o.CompletionInterval = completionInterval
}

// WithExpand adds the expand to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) WithExpand(expand []string) *GetLearningAssignmentsMeParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithInterval adds the interval to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) WithInterval(interval *string) *GetLearningAssignmentsMeParams {
	o.SetInterval(interval)
	return o
}

// SetInterval adds the interval to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) SetInterval(interval *string) {
	o.Interval = interval
}

// WithModuleID adds the moduleID to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) WithModuleID(moduleID *string) *GetLearningAssignmentsMeParams {
	o.SetModuleID(moduleID)
	return o
}

// SetModuleID adds the moduleId to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) SetModuleID(moduleID *string) {
	o.ModuleID = moduleID
}

// WithOverdue adds the overdue to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) WithOverdue(overdue *string) *GetLearningAssignmentsMeParams {
	o.SetOverdue(overdue)
	return o
}

// SetOverdue adds the overdue to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) SetOverdue(overdue *string) {
	o.Overdue = overdue
}

// WithPageNumber adds the pageNumber to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) WithPageNumber(pageNumber *int32) *GetLearningAssignmentsMeParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) WithPageSize(pageSize *int32) *GetLearningAssignmentsMeParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithSortBy adds the sortBy to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) WithSortBy(sortBy *string) *GetLearningAssignmentsMeParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortOrder adds the sortOrder to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) WithSortOrder(sortOrder *string) *GetLearningAssignmentsMeParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithStates adds the states to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) WithStates(states []string) *GetLearningAssignmentsMeParams {
	o.SetStates(states)
	return o
}

// SetStates adds the states to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) SetStates(states []string) {
	o.States = states
}

// WithTypes adds the types to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) WithTypes(types []string) *GetLearningAssignmentsMeParams {
	o.SetTypes(types)
	return o
}

// SetTypes adds the types to the get learning assignments me params
func (o *GetLearningAssignmentsMeParams) SetTypes(types []string) {
	o.Types = types
}

// WriteToRequest writes these params to a swagger request
func (o *GetLearningAssignmentsMeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CompletionInterval != nil {

		// query param completionInterval
		var qrCompletionInterval string
		if o.CompletionInterval != nil {
			qrCompletionInterval = *o.CompletionInterval
		}
		qCompletionInterval := qrCompletionInterval
		if qCompletionInterval != "" {
			if err := r.SetQueryParam("completionInterval", qCompletionInterval); err != nil {
				return err
			}
		}

	}

	valuesExpand := o.Expand

	joinedExpand := swag.JoinByFormat(valuesExpand, "multi")
	// query array param expand
	if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
		return err
	}

	if o.Interval != nil {

		// query param interval
		var qrInterval string
		if o.Interval != nil {
			qrInterval = *o.Interval
		}
		qInterval := qrInterval
		if qInterval != "" {
			if err := r.SetQueryParam("interval", qInterval); err != nil {
				return err
			}
		}

	}

	if o.ModuleID != nil {

		// query param moduleId
		var qrModuleID string
		if o.ModuleID != nil {
			qrModuleID = *o.ModuleID
		}
		qModuleID := qrModuleID
		if qModuleID != "" {
			if err := r.SetQueryParam("moduleId", qModuleID); err != nil {
				return err
			}
		}

	}

	if o.Overdue != nil {

		// query param overdue
		var qrOverdue string
		if o.Overdue != nil {
			qrOverdue = *o.Overdue
		}
		qOverdue := qrOverdue
		if qOverdue != "" {
			if err := r.SetQueryParam("overdue", qOverdue); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string
		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {
			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}

	}

	valuesStates := o.States

	joinedStates := swag.JoinByFormat(valuesStates, "multi")
	// query array param states
	if err := r.SetQueryParam("states", joinedStates...); err != nil {
		return err
	}

	valuesTypes := o.Types

	joinedTypes := swag.JoinByFormat(valuesTypes, "multi")
	// query array param types
	if err := r.SetQueryParam("types", joinedTypes...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package learning

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchLearningAssignmentRescheduleReader is a Reader for the PatchLearningAssignmentReschedule structure.
type PatchLearningAssignmentRescheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLearningAssignmentRescheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchLearningAssignmentRescheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchLearningAssignmentRescheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchLearningAssignmentRescheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchLearningAssignmentRescheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchLearningAssignmentRescheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchLearningAssignmentRescheduleRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchLearningAssignmentRescheduleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchLearningAssignmentRescheduleRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchLearningAssignmentRescheduleUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchLearningAssignmentRescheduleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchLearningAssignmentRescheduleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchLearningAssignmentRescheduleServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchLearningAssignmentRescheduleGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchLearningAssignmentRescheduleOK creates a PatchLearningAssignmentRescheduleOK with default headers values
func NewPatchLearningAssignmentRescheduleOK() *PatchLearningAssignmentRescheduleOK {
	return &PatchLearningAssignmentRescheduleOK{}
}

/*
PatchLearningAssignmentRescheduleOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchLearningAssignmentRescheduleOK struct {
	Payload *models.LearningAssignment
}

// IsSuccess returns true when this patch learning assignment reschedule o k response has a 2xx status code
func (o *PatchLearningAssignmentRescheduleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch learning assignment reschedule o k response has a 3xx status code
func (o *PatchLearningAssignmentRescheduleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch learning assignment reschedule o k response has a 4xx status code
func (o *PatchLearningAssignmentRescheduleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch learning assignment reschedule o k response has a 5xx status code
func (o *PatchLearningAssignmentRescheduleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch learning assignment reschedule o k response a status code equal to that given
func (o *PatchLearningAssignmentRescheduleOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchLearningAssignmentRescheduleOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleOK  %+v", 200, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleOK  %+v", 200, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleOK) GetPayload() *models.LearningAssignment {
	return o.Payload
}

func (o *PatchLearningAssignmentRescheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LearningAssignment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentRescheduleBadRequest creates a PatchLearningAssignmentRescheduleBadRequest with default headers values
func NewPatchLearningAssignmentRescheduleBadRequest() *PatchLearningAssignmentRescheduleBadRequest {
	return &PatchLearningAssignmentRescheduleBadRequest{}
}

/*
PatchLearningAssignmentRescheduleBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchLearningAssignmentRescheduleBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch learning assignment reschedule bad request response has a 2xx status code
func (o *PatchLearningAssignmentRescheduleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch learning assignment reschedule bad request response has a 3xx status code
func (o *PatchLearningAssignmentRescheduleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch learning assignment reschedule bad request response has a 4xx status code
func (o *PatchLearningAssignmentRescheduleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch learning assignment reschedule bad request response has a 5xx status code
func (o *PatchLearningAssignmentRescheduleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch learning assignment reschedule bad request response a status code equal to that given
func (o *PatchLearningAssignmentRescheduleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchLearningAssignmentRescheduleBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentRescheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentRescheduleUnauthorized creates a PatchLearningAssignmentRescheduleUnauthorized with default headers values
func NewPatchLearningAssignmentRescheduleUnauthorized() *PatchLearningAssignmentRescheduleUnauthorized {
	return &PatchLearningAssignmentRescheduleUnauthorized{}
}

/*
PatchLearningAssignmentRescheduleUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchLearningAssignmentRescheduleUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch learning assignment reschedule unauthorized response has a 2xx status code
func (o *PatchLearningAssignmentRescheduleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch learning assignment reschedule unauthorized response has a 3xx status code
func (o *PatchLearningAssignmentRescheduleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch learning assignment reschedule unauthorized response has a 4xx status code
func (o *PatchLearningAssignmentRescheduleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch learning assignment reschedule unauthorized response has a 5xx status code
func (o *PatchLearningAssignmentRescheduleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch learning assignment reschedule unauthorized response a status code equal to that given
func (o *PatchLearningAssignmentRescheduleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchLearningAssignmentRescheduleUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentRescheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentRescheduleForbidden creates a PatchLearningAssignmentRescheduleForbidden with default headers values
func NewPatchLearningAssignmentRescheduleForbidden() *PatchLearningAssignmentRescheduleForbidden {
	return &PatchLearningAssignmentRescheduleForbidden{}
}

/*
PatchLearningAssignmentRescheduleForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchLearningAssignmentRescheduleForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch learning assignment reschedule forbidden response has a 2xx status code
func (o *PatchLearningAssignmentRescheduleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch learning assignment reschedule forbidden response has a 3xx status code
func (o *PatchLearningAssignmentRescheduleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch learning assignment reschedule forbidden response has a 4xx status code
func (o *PatchLearningAssignmentRescheduleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch learning assignment reschedule forbidden response has a 5xx status code
func (o *PatchLearningAssignmentRescheduleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch learning assignment reschedule forbidden response a status code equal to that given
func (o *PatchLearningAssignmentRescheduleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchLearningAssignmentRescheduleForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleForbidden  %+v", 403, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleForbidden  %+v", 403, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentRescheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentRescheduleNotFound creates a PatchLearningAssignmentRescheduleNotFound with default headers values
func NewPatchLearningAssignmentRescheduleNotFound() *PatchLearningAssignmentRescheduleNotFound {
	return &PatchLearningAssignmentRescheduleNotFound{}
}

/*
PatchLearningAssignmentRescheduleNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchLearningAssignmentRescheduleNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch learning assignment reschedule not found response has a 2xx status code
func (o *PatchLearningAssignmentRescheduleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch learning assignment reschedule not found response has a 3xx status code
func (o *PatchLearningAssignmentRescheduleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch learning assignment reschedule not found response has a 4xx status code
func (o *PatchLearningAssignmentRescheduleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch learning assignment reschedule not found response has a 5xx status code
func (o *PatchLearningAssignmentRescheduleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch learning assignment reschedule not found response a status code equal to that given
func (o *PatchLearningAssignmentRescheduleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchLearningAssignmentRescheduleNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleNotFound  %+v", 404, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleNotFound  %+v", 404, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentRescheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentRescheduleRequestTimeout creates a PatchLearningAssignmentRescheduleRequestTimeout with default headers values
func NewPatchLearningAssignmentRescheduleRequestTimeout() *PatchLearningAssignmentRescheduleRequestTimeout {
	return &PatchLearningAssignmentRescheduleRequestTimeout{}
}

/*
PatchLearningAssignmentRescheduleRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchLearningAssignmentRescheduleRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch learning assignment reschedule request timeout response has a 2xx status code
func (o *PatchLearningAssignmentRescheduleRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch learning assignment reschedule request timeout response has a 3xx status code
func (o *PatchLearningAssignmentRescheduleRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch learning assignment reschedule request timeout response has a 4xx status code
func (o *PatchLearningAssignmentRescheduleRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch learning assignment reschedule request timeout response has a 5xx status code
func (o *PatchLearningAssignmentRescheduleRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch learning assignment reschedule request timeout response a status code equal to that given
func (o *PatchLearningAssignmentRescheduleRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchLearningAssignmentRescheduleRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentRescheduleRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentRescheduleConflict creates a PatchLearningAssignmentRescheduleConflict with default headers values
func NewPatchLearningAssignmentRescheduleConflict() *PatchLearningAssignmentRescheduleConflict {
	return &PatchLearningAssignmentRescheduleConflict{}
}

/*
PatchLearningAssignmentRescheduleConflict describes a response with status code 409, with default header values.

Conflict
*/
type PatchLearningAssignmentRescheduleConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch learning assignment reschedule conflict response has a 2xx status code
func (o *PatchLearningAssignmentRescheduleConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch learning assignment reschedule conflict response has a 3xx status code
func (o *PatchLearningAssignmentRescheduleConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch learning assignment reschedule conflict response has a 4xx status code
func (o *PatchLearningAssignmentRescheduleConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch learning assignment reschedule conflict response has a 5xx status code
func (o *PatchLearningAssignmentRescheduleConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this patch learning assignment reschedule conflict response a status code equal to that given
func (o *PatchLearningAssignmentRescheduleConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PatchLearningAssignmentRescheduleConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleConflict  %+v", 409, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleConflict) String() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleConflict  %+v", 409, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentRescheduleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentRescheduleRequestEntityTooLarge creates a PatchLearningAssignmentRescheduleRequestEntityTooLarge with default headers values
func NewPatchLearningAssignmentRescheduleRequestEntityTooLarge() *PatchLearningAssignmentRescheduleRequestEntityTooLarge {
	return &PatchLearningAssignmentRescheduleRequestEntityTooLarge{}
}

/*
PatchLearningAssignmentRescheduleRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchLearningAssignmentRescheduleRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch learning assignment reschedule request entity too large response has a 2xx status code
func (o *PatchLearningAssignmentRescheduleRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch learning assignment reschedule request entity too large response has a 3xx status code
func (o *PatchLearningAssignmentRescheduleRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch learning assignment reschedule request entity too large response has a 4xx status code
func (o *PatchLearningAssignmentRescheduleRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch learning assignment reschedule request entity too large response has a 5xx status code
func (o *PatchLearningAssignmentRescheduleRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch learning assignment reschedule request entity too large response a status code equal to that given
func (o *PatchLearningAssignmentRescheduleRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchLearningAssignmentRescheduleRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentRescheduleRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentRescheduleUnsupportedMediaType creates a PatchLearningAssignmentRescheduleUnsupportedMediaType with default headers values
func NewPatchLearningAssignmentRescheduleUnsupportedMediaType() *PatchLearningAssignmentRescheduleUnsupportedMediaType {
	return &PatchLearningAssignmentRescheduleUnsupportedMediaType{}
}

/*
PatchLearningAssignmentRescheduleUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchLearningAssignmentRescheduleUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch learning assignment reschedule unsupported media type response has a 2xx status code
func (o *PatchLearningAssignmentRescheduleUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch learning assignment reschedule unsupported media type response has a 3xx status code
func (o *PatchLearningAssignmentRescheduleUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch learning assignment reschedule unsupported media type response has a 4xx status code
func (o *PatchLearningAssignmentRescheduleUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch learning assignment reschedule unsupported media type response has a 5xx status code
func (o *PatchLearningAssignmentRescheduleUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch learning assignment reschedule unsupported media type response a status code equal to that given
func (o *PatchLearningAssignmentRescheduleUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchLearningAssignmentRescheduleUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentRescheduleUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentRescheduleTooManyRequests creates a PatchLearningAssignmentRescheduleTooManyRequests with default headers values
func NewPatchLearningAssignmentRescheduleTooManyRequests() *PatchLearningAssignmentRescheduleTooManyRequests {
	return &PatchLearningAssignmentRescheduleTooManyRequests{}
}

/*
PatchLearningAssignmentRescheduleTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchLearningAssignmentRescheduleTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch learning assignment reschedule too many requests response has a 2xx status code
func (o *PatchLearningAssignmentRescheduleTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch learning assignment reschedule too many requests response has a 3xx status code
func (o *PatchLearningAssignmentRescheduleTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch learning assignment reschedule too many requests response has a 4xx status code
func (o *PatchLearningAssignmentRescheduleTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch learning assignment reschedule too many requests response has a 5xx status code
func (o *PatchLearningAssignmentRescheduleTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch learning assignment reschedule too many requests response a status code equal to that given
func (o *PatchLearningAssignmentRescheduleTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchLearningAssignmentRescheduleTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentRescheduleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentRescheduleInternalServerError creates a PatchLearningAssignmentRescheduleInternalServerError with default headers values
func NewPatchLearningAssignmentRescheduleInternalServerError() *PatchLearningAssignmentRescheduleInternalServerError {
	return &PatchLearningAssignmentRescheduleInternalServerError{}
}

/*
PatchLearningAssignmentRescheduleInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchLearningAssignmentRescheduleInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch learning assignment reschedule internal server error response has a 2xx status code
func (o *PatchLearningAssignmentRescheduleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch learning assignment reschedule internal server error response has a 3xx status code
func (o *PatchLearningAssignmentRescheduleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch learning assignment reschedule internal server error response has a 4xx status code
func (o *PatchLearningAssignmentRescheduleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch learning assignment reschedule internal server error response has a 5xx status code
func (o *PatchLearningAssignmentRescheduleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch learning assignment reschedule internal server error response a status code equal to that given
func (o *PatchLearningAssignmentRescheduleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchLearningAssignmentRescheduleInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentRescheduleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentRescheduleServiceUnavailable creates a PatchLearningAssignmentRescheduleServiceUnavailable with default headers values
func NewPatchLearningAssignmentRescheduleServiceUnavailable() *PatchLearningAssignmentRescheduleServiceUnavailable {
	return &PatchLearningAssignmentRescheduleServiceUnavailable{}
}

/*
PatchLearningAssignmentRescheduleServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchLearningAssignmentRescheduleServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch learning assignment reschedule service unavailable response has a 2xx status code
func (o *PatchLearningAssignmentRescheduleServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch learning assignment reschedule service unavailable response has a 3xx status code
func (o *PatchLearningAssignmentRescheduleServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch learning assignment reschedule service unavailable response has a 4xx status code
func (o *PatchLearningAssignmentRescheduleServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch learning assignment reschedule service unavailable response has a 5xx status code
func (o *PatchLearningAssignmentRescheduleServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch learning assignment reschedule service unavailable response a status code equal to that given
func (o *PatchLearningAssignmentRescheduleServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchLearningAssignmentRescheduleServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentRescheduleServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLearningAssignmentRescheduleGatewayTimeout creates a PatchLearningAssignmentRescheduleGatewayTimeout with default headers values
func NewPatchLearningAssignmentRescheduleGatewayTimeout() *PatchLearningAssignmentRescheduleGatewayTimeout {
	return &PatchLearningAssignmentRescheduleGatewayTimeout{}
}

/*
PatchLearningAssignmentRescheduleGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchLearningAssignmentRescheduleGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch learning assignment reschedule gateway timeout response has a 2xx status code
func (o *PatchLearningAssignmentRescheduleGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch learning assignment reschedule gateway timeout response has a 3xx status code
func (o *PatchLearningAssignmentRescheduleGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch learning assignment reschedule gateway timeout response has a 4xx status code
func (o *PatchLearningAssignmentRescheduleGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch learning assignment reschedule gateway timeout response has a 5xx status code
func (o *PatchLearningAssignmentRescheduleGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch learning assignment reschedule gateway timeout response a status code equal to that given
func (o *PatchLearningAssignmentRescheduleGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchLearningAssignmentRescheduleGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/learning/assignments/{assignmentId}/reschedule][%d] patchLearningAssignmentRescheduleGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchLearningAssignmentRescheduleGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLearningAssignmentRescheduleGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package locations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the locations client
type API interface {
	/*
	   DeleteLocation deletes a location
	*/
	DeleteLocation(ctx context.Context, params *DeleteLocationParams) (*DeleteLocationNoContent, error)
	/*
	   GetLocation gets location by ID
	*/
	GetLocation(ctx context.Context, params *GetLocationParams) (*GetLocationOK, error)
	/*
	   GetLocationSublocations gets sublocations for location ID
	*/
	GetLocationSublocations(ctx context.Context, params *GetLocationSublocationsParams) (*GetLocationSublocationsOK, error)
	/*
	   GetLocations gets a list of all locations
	*/
	GetLocations(ctx context.Context, params *GetLocationsParams) (*GetLocationsOK, error)
	/*
	   GetLocationsSearch searches locations using the q64 value returned from a previous search
	*/
	GetLocationsSearch(ctx context.Context, params *GetLocationsSearchParams) (*GetLocationsSearchOK, error)
	/*
	   PatchLocation updates a location
	*/
	PatchLocation(ctx context.Context, params *PatchLocationParams) (*PatchLocationOK, error)
	/*
	   PostLocations creates a location
	*/
	PostLocations(ctx context.Context, params *PostLocationsParams) (*PostLocationsOK, error)
	/*
	   PostLocationsSearch searches locations
	*/
	PostLocationsSearch(ctx context.Context, params *PostLocationsSearchParams) (*PostLocationsSearchOK, error)
}

// New creates a new locations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for locations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteLocation deletes a location
*/
func (a *Client) DeleteLocation(ctx context.Context, params *DeleteLocationParams) (*DeleteLocationNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteLocation",
		Method:             "DELETE",
		PathPattern:        "/api/v2/locations/{locationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLocationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLocationNoContent), nil

}

/*
GetLocation gets location by ID
*/
func (a *Client) GetLocation(ctx context.Context, params *GetLocationParams) (*GetLocationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLocation",
		Method:             "GET",
		PathPattern:        "/api/v2/locations/{locationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLocationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLocationOK), nil

}

/*
GetLocationSublocations gets sublocations for location ID
*/
func (a *Client) GetLocationSublocations(ctx context.Context, params *GetLocationSublocationsParams) (*GetLocationSublocationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLocationSublocations",
		Method:             "GET",
		PathPattern:        "/api/v2/locations/{locationId}/sublocations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLocationSublocationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLocationSublocationsOK), nil

}

/*
GetLocations gets a list of all locations
*/
func (a *Client) GetLocations(ctx context.Context, params *GetLocationsParams) (*GetLocationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLocations",
		Method:             "GET",
		PathPattern:        "/api/v2/locations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLocationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLocationsOK), nil

}

/*
GetLocationsSearch searches locations using the q64 value returned from a previous search
*/
func (a *Client) GetLocationsSearch(ctx context.Context, params *GetLocationsSearchParams) (*GetLocationsSearchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLocationsSearch",
		Method:             "GET",
		PathPattern:        "/api/v2/locations/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLocationsSearchReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLocationsSearchOK), nil

}

/*
PatchLocation updates a location
*/
func (a *Client) PatchLocation(ctx context.Context, params *PatchLocationParams) (*PatchLocationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchLocation",
		Method:             "PATCH",
		PathPattern:        "/api/v2/locations/{locationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLocationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchLocationOK), nil

}

/*
PostLocations creates a location
*/
func (a *Client) PostLocations(ctx context.Context, params *PostLocationsParams) (*PostLocationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLocations",
		Method:             "POST",
		PathPattern:        "/api/v2/locations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLocationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLocationsOK), nil

}

/*
PostLocationsSearch searches locations
*/
func (a *Client) PostLocationsSearch(ctx context.Context, params *PostLocationsSearchParams) (*PostLocationsSearchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLocationsSearch",
		Method:             "POST",
		PathPattern:        "/api/v2/locations/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLocationsSearchReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLocationsSearchOK), nil

}

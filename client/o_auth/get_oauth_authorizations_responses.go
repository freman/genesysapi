// Code generated by go-swagger; DO NOT EDIT.

package o_auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetOauthAuthorizationsReader is a Reader for the GetOauthAuthorizations structure.
type GetOauthAuthorizationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOauthAuthorizationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOauthAuthorizationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOauthAuthorizationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOauthAuthorizationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOauthAuthorizationsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOauthAuthorizationsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetOauthAuthorizationsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetOauthAuthorizationsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetOauthAuthorizationsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOauthAuthorizationsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOauthAuthorizationsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetOauthAuthorizationsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetOauthAuthorizationsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOauthAuthorizationsOK creates a GetOauthAuthorizationsOK with default headers values
func NewGetOauthAuthorizationsOK() *GetOauthAuthorizationsOK {
	return &GetOauthAuthorizationsOK{}
}

/*GetOauthAuthorizationsOK handles this case with default header values.

successful operation
*/
type GetOauthAuthorizationsOK struct {
	Payload *models.OAuthAuthorizationListing
}

func (o *GetOauthAuthorizationsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations][%d] getOauthAuthorizationsOK  %+v", 200, o.Payload)
}

func (o *GetOauthAuthorizationsOK) GetPayload() *models.OAuthAuthorizationListing {
	return o.Payload
}

func (o *GetOauthAuthorizationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OAuthAuthorizationListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationsBadRequest creates a GetOauthAuthorizationsBadRequest with default headers values
func NewGetOauthAuthorizationsBadRequest() *GetOauthAuthorizationsBadRequest {
	return &GetOauthAuthorizationsBadRequest{}
}

/*GetOauthAuthorizationsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetOauthAuthorizationsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetOauthAuthorizationsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations][%d] getOauthAuthorizationsBadRequest  %+v", 400, o.Payload)
}

func (o *GetOauthAuthorizationsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationsUnauthorized creates a GetOauthAuthorizationsUnauthorized with default headers values
func NewGetOauthAuthorizationsUnauthorized() *GetOauthAuthorizationsUnauthorized {
	return &GetOauthAuthorizationsUnauthorized{}
}

/*GetOauthAuthorizationsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetOauthAuthorizationsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetOauthAuthorizationsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations][%d] getOauthAuthorizationsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOauthAuthorizationsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationsForbidden creates a GetOauthAuthorizationsForbidden with default headers values
func NewGetOauthAuthorizationsForbidden() *GetOauthAuthorizationsForbidden {
	return &GetOauthAuthorizationsForbidden{}
}

/*GetOauthAuthorizationsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetOauthAuthorizationsForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetOauthAuthorizationsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations][%d] getOauthAuthorizationsForbidden  %+v", 403, o.Payload)
}

func (o *GetOauthAuthorizationsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationsNotFound creates a GetOauthAuthorizationsNotFound with default headers values
func NewGetOauthAuthorizationsNotFound() *GetOauthAuthorizationsNotFound {
	return &GetOauthAuthorizationsNotFound{}
}

/*GetOauthAuthorizationsNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetOauthAuthorizationsNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetOauthAuthorizationsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations][%d] getOauthAuthorizationsNotFound  %+v", 404, o.Payload)
}

func (o *GetOauthAuthorizationsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationsRequestTimeout creates a GetOauthAuthorizationsRequestTimeout with default headers values
func NewGetOauthAuthorizationsRequestTimeout() *GetOauthAuthorizationsRequestTimeout {
	return &GetOauthAuthorizationsRequestTimeout{}
}

/*GetOauthAuthorizationsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetOauthAuthorizationsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetOauthAuthorizationsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations][%d] getOauthAuthorizationsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetOauthAuthorizationsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationsRequestEntityTooLarge creates a GetOauthAuthorizationsRequestEntityTooLarge with default headers values
func NewGetOauthAuthorizationsRequestEntityTooLarge() *GetOauthAuthorizationsRequestEntityTooLarge {
	return &GetOauthAuthorizationsRequestEntityTooLarge{}
}

/*GetOauthAuthorizationsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetOauthAuthorizationsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetOauthAuthorizationsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations][%d] getOauthAuthorizationsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOauthAuthorizationsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationsUnsupportedMediaType creates a GetOauthAuthorizationsUnsupportedMediaType with default headers values
func NewGetOauthAuthorizationsUnsupportedMediaType() *GetOauthAuthorizationsUnsupportedMediaType {
	return &GetOauthAuthorizationsUnsupportedMediaType{}
}

/*GetOauthAuthorizationsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetOauthAuthorizationsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetOauthAuthorizationsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations][%d] getOauthAuthorizationsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOauthAuthorizationsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationsTooManyRequests creates a GetOauthAuthorizationsTooManyRequests with default headers values
func NewGetOauthAuthorizationsTooManyRequests() *GetOauthAuthorizationsTooManyRequests {
	return &GetOauthAuthorizationsTooManyRequests{}
}

/*GetOauthAuthorizationsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetOauthAuthorizationsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetOauthAuthorizationsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations][%d] getOauthAuthorizationsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOauthAuthorizationsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationsInternalServerError creates a GetOauthAuthorizationsInternalServerError with default headers values
func NewGetOauthAuthorizationsInternalServerError() *GetOauthAuthorizationsInternalServerError {
	return &GetOauthAuthorizationsInternalServerError{}
}

/*GetOauthAuthorizationsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetOauthAuthorizationsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetOauthAuthorizationsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations][%d] getOauthAuthorizationsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOauthAuthorizationsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationsServiceUnavailable creates a GetOauthAuthorizationsServiceUnavailable with default headers values
func NewGetOauthAuthorizationsServiceUnavailable() *GetOauthAuthorizationsServiceUnavailable {
	return &GetOauthAuthorizationsServiceUnavailable{}
}

/*GetOauthAuthorizationsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetOauthAuthorizationsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetOauthAuthorizationsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations][%d] getOauthAuthorizationsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOauthAuthorizationsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationsGatewayTimeout creates a GetOauthAuthorizationsGatewayTimeout with default headers values
func NewGetOauthAuthorizationsGatewayTimeout() *GetOauthAuthorizationsGatewayTimeout {
	return &GetOauthAuthorizationsGatewayTimeout{}
}

/*GetOauthAuthorizationsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetOauthAuthorizationsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetOauthAuthorizationsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations][%d] getOauthAuthorizationsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetOauthAuthorizationsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package o_auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetOauthScopeReader is a Reader for the GetOauthScope structure.
type GetOauthScopeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOauthScopeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOauthScopeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOauthScopeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOauthScopeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOauthScopeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOauthScopeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetOauthScopeRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetOauthScopeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOauthScopeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOauthScopeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetOauthScopeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetOauthScopeGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOauthScopeOK creates a GetOauthScopeOK with default headers values
func NewGetOauthScopeOK() *GetOauthScopeOK {
	return &GetOauthScopeOK{}
}

/*GetOauthScopeOK handles this case with default header values.

successful operation
*/
type GetOauthScopeOK struct {
	Payload *models.OAuthScope
}

func (o *GetOauthScopeOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeOK  %+v", 200, o.Payload)
}

func (o *GetOauthScopeOK) GetPayload() *models.OAuthScope {
	return o.Payload
}

func (o *GetOauthScopeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OAuthScope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeBadRequest creates a GetOauthScopeBadRequest with default headers values
func NewGetOauthScopeBadRequest() *GetOauthScopeBadRequest {
	return &GetOauthScopeBadRequest{}
}

/*GetOauthScopeBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetOauthScopeBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetOauthScopeBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeBadRequest  %+v", 400, o.Payload)
}

func (o *GetOauthScopeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeUnauthorized creates a GetOauthScopeUnauthorized with default headers values
func NewGetOauthScopeUnauthorized() *GetOauthScopeUnauthorized {
	return &GetOauthScopeUnauthorized{}
}

/*GetOauthScopeUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetOauthScopeUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetOauthScopeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOauthScopeUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeForbidden creates a GetOauthScopeForbidden with default headers values
func NewGetOauthScopeForbidden() *GetOauthScopeForbidden {
	return &GetOauthScopeForbidden{}
}

/*GetOauthScopeForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetOauthScopeForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetOauthScopeForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeForbidden  %+v", 403, o.Payload)
}

func (o *GetOauthScopeForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeNotFound creates a GetOauthScopeNotFound with default headers values
func NewGetOauthScopeNotFound() *GetOauthScopeNotFound {
	return &GetOauthScopeNotFound{}
}

/*GetOauthScopeNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetOauthScopeNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetOauthScopeNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeNotFound  %+v", 404, o.Payload)
}

func (o *GetOauthScopeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeRequestEntityTooLarge creates a GetOauthScopeRequestEntityTooLarge with default headers values
func NewGetOauthScopeRequestEntityTooLarge() *GetOauthScopeRequestEntityTooLarge {
	return &GetOauthScopeRequestEntityTooLarge{}
}

/*GetOauthScopeRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetOauthScopeRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetOauthScopeRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOauthScopeRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeUnsupportedMediaType creates a GetOauthScopeUnsupportedMediaType with default headers values
func NewGetOauthScopeUnsupportedMediaType() *GetOauthScopeUnsupportedMediaType {
	return &GetOauthScopeUnsupportedMediaType{}
}

/*GetOauthScopeUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetOauthScopeUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetOauthScopeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOauthScopeUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeTooManyRequests creates a GetOauthScopeTooManyRequests with default headers values
func NewGetOauthScopeTooManyRequests() *GetOauthScopeTooManyRequests {
	return &GetOauthScopeTooManyRequests{}
}

/*GetOauthScopeTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type GetOauthScopeTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetOauthScopeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOauthScopeTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeInternalServerError creates a GetOauthScopeInternalServerError with default headers values
func NewGetOauthScopeInternalServerError() *GetOauthScopeInternalServerError {
	return &GetOauthScopeInternalServerError{}
}

/*GetOauthScopeInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetOauthScopeInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetOauthScopeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOauthScopeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeServiceUnavailable creates a GetOauthScopeServiceUnavailable with default headers values
func NewGetOauthScopeServiceUnavailable() *GetOauthScopeServiceUnavailable {
	return &GetOauthScopeServiceUnavailable{}
}

/*GetOauthScopeServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetOauthScopeServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetOauthScopeServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOauthScopeServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeGatewayTimeout creates a GetOauthScopeGatewayTimeout with default headers values
func NewGetOauthScopeGatewayTimeout() *GetOauthScopeGatewayTimeout {
	return &GetOauthScopeGatewayTimeout{}
}

/*GetOauthScopeGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetOauthScopeGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetOauthScopeGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetOauthScopeGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

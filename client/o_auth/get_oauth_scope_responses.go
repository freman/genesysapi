// Code generated by go-swagger; DO NOT EDIT.

package o_auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetOauthScopeReader is a Reader for the GetOauthScope structure.
type GetOauthScopeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOauthScopeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOauthScopeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOauthScopeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOauthScopeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOauthScopeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOauthScopeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetOauthScopeRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetOauthScopeRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetOauthScopeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOauthScopeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOauthScopeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetOauthScopeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetOauthScopeGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOauthScopeOK creates a GetOauthScopeOK with default headers values
func NewGetOauthScopeOK() *GetOauthScopeOK {
	return &GetOauthScopeOK{}
}

/*
GetOauthScopeOK describes a response with status code 200, with default header values.

successful operation
*/
type GetOauthScopeOK struct {
	Payload *models.OAuthScope
}

// IsSuccess returns true when this get oauth scope o k response has a 2xx status code
func (o *GetOauthScopeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get oauth scope o k response has a 3xx status code
func (o *GetOauthScopeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth scope o k response has a 4xx status code
func (o *GetOauthScopeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get oauth scope o k response has a 5xx status code
func (o *GetOauthScopeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth scope o k response a status code equal to that given
func (o *GetOauthScopeOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetOauthScopeOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeOK  %+v", 200, o.Payload)
}

func (o *GetOauthScopeOK) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeOK  %+v", 200, o.Payload)
}

func (o *GetOauthScopeOK) GetPayload() *models.OAuthScope {
	return o.Payload
}

func (o *GetOauthScopeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OAuthScope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeBadRequest creates a GetOauthScopeBadRequest with default headers values
func NewGetOauthScopeBadRequest() *GetOauthScopeBadRequest {
	return &GetOauthScopeBadRequest{}
}

/*
GetOauthScopeBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetOauthScopeBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth scope bad request response has a 2xx status code
func (o *GetOauthScopeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth scope bad request response has a 3xx status code
func (o *GetOauthScopeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth scope bad request response has a 4xx status code
func (o *GetOauthScopeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth scope bad request response has a 5xx status code
func (o *GetOauthScopeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth scope bad request response a status code equal to that given
func (o *GetOauthScopeBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetOauthScopeBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeBadRequest  %+v", 400, o.Payload)
}

func (o *GetOauthScopeBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeBadRequest  %+v", 400, o.Payload)
}

func (o *GetOauthScopeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeUnauthorized creates a GetOauthScopeUnauthorized with default headers values
func NewGetOauthScopeUnauthorized() *GetOauthScopeUnauthorized {
	return &GetOauthScopeUnauthorized{}
}

/*
GetOauthScopeUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetOauthScopeUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth scope unauthorized response has a 2xx status code
func (o *GetOauthScopeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth scope unauthorized response has a 3xx status code
func (o *GetOauthScopeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth scope unauthorized response has a 4xx status code
func (o *GetOauthScopeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth scope unauthorized response has a 5xx status code
func (o *GetOauthScopeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth scope unauthorized response a status code equal to that given
func (o *GetOauthScopeUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetOauthScopeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOauthScopeUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOauthScopeUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeForbidden creates a GetOauthScopeForbidden with default headers values
func NewGetOauthScopeForbidden() *GetOauthScopeForbidden {
	return &GetOauthScopeForbidden{}
}

/*
GetOauthScopeForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetOauthScopeForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth scope forbidden response has a 2xx status code
func (o *GetOauthScopeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth scope forbidden response has a 3xx status code
func (o *GetOauthScopeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth scope forbidden response has a 4xx status code
func (o *GetOauthScopeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth scope forbidden response has a 5xx status code
func (o *GetOauthScopeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth scope forbidden response a status code equal to that given
func (o *GetOauthScopeForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetOauthScopeForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeForbidden  %+v", 403, o.Payload)
}

func (o *GetOauthScopeForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeForbidden  %+v", 403, o.Payload)
}

func (o *GetOauthScopeForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeNotFound creates a GetOauthScopeNotFound with default headers values
func NewGetOauthScopeNotFound() *GetOauthScopeNotFound {
	return &GetOauthScopeNotFound{}
}

/*
GetOauthScopeNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetOauthScopeNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth scope not found response has a 2xx status code
func (o *GetOauthScopeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth scope not found response has a 3xx status code
func (o *GetOauthScopeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth scope not found response has a 4xx status code
func (o *GetOauthScopeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth scope not found response has a 5xx status code
func (o *GetOauthScopeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth scope not found response a status code equal to that given
func (o *GetOauthScopeNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetOauthScopeNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeNotFound  %+v", 404, o.Payload)
}

func (o *GetOauthScopeNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeNotFound  %+v", 404, o.Payload)
}

func (o *GetOauthScopeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeRequestTimeout creates a GetOauthScopeRequestTimeout with default headers values
func NewGetOauthScopeRequestTimeout() *GetOauthScopeRequestTimeout {
	return &GetOauthScopeRequestTimeout{}
}

/*
GetOauthScopeRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetOauthScopeRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth scope request timeout response has a 2xx status code
func (o *GetOauthScopeRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth scope request timeout response has a 3xx status code
func (o *GetOauthScopeRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth scope request timeout response has a 4xx status code
func (o *GetOauthScopeRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth scope request timeout response has a 5xx status code
func (o *GetOauthScopeRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth scope request timeout response a status code equal to that given
func (o *GetOauthScopeRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetOauthScopeRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetOauthScopeRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetOauthScopeRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeRequestEntityTooLarge creates a GetOauthScopeRequestEntityTooLarge with default headers values
func NewGetOauthScopeRequestEntityTooLarge() *GetOauthScopeRequestEntityTooLarge {
	return &GetOauthScopeRequestEntityTooLarge{}
}

/*
GetOauthScopeRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetOauthScopeRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth scope request entity too large response has a 2xx status code
func (o *GetOauthScopeRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth scope request entity too large response has a 3xx status code
func (o *GetOauthScopeRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth scope request entity too large response has a 4xx status code
func (o *GetOauthScopeRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth scope request entity too large response has a 5xx status code
func (o *GetOauthScopeRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth scope request entity too large response a status code equal to that given
func (o *GetOauthScopeRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetOauthScopeRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOauthScopeRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOauthScopeRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeUnsupportedMediaType creates a GetOauthScopeUnsupportedMediaType with default headers values
func NewGetOauthScopeUnsupportedMediaType() *GetOauthScopeUnsupportedMediaType {
	return &GetOauthScopeUnsupportedMediaType{}
}

/*
GetOauthScopeUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetOauthScopeUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth scope unsupported media type response has a 2xx status code
func (o *GetOauthScopeUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth scope unsupported media type response has a 3xx status code
func (o *GetOauthScopeUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth scope unsupported media type response has a 4xx status code
func (o *GetOauthScopeUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth scope unsupported media type response has a 5xx status code
func (o *GetOauthScopeUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth scope unsupported media type response a status code equal to that given
func (o *GetOauthScopeUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetOauthScopeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOauthScopeUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOauthScopeUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeTooManyRequests creates a GetOauthScopeTooManyRequests with default headers values
func NewGetOauthScopeTooManyRequests() *GetOauthScopeTooManyRequests {
	return &GetOauthScopeTooManyRequests{}
}

/*
GetOauthScopeTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetOauthScopeTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth scope too many requests response has a 2xx status code
func (o *GetOauthScopeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth scope too many requests response has a 3xx status code
func (o *GetOauthScopeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth scope too many requests response has a 4xx status code
func (o *GetOauthScopeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth scope too many requests response has a 5xx status code
func (o *GetOauthScopeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth scope too many requests response a status code equal to that given
func (o *GetOauthScopeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetOauthScopeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOauthScopeTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOauthScopeTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeInternalServerError creates a GetOauthScopeInternalServerError with default headers values
func NewGetOauthScopeInternalServerError() *GetOauthScopeInternalServerError {
	return &GetOauthScopeInternalServerError{}
}

/*
GetOauthScopeInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetOauthScopeInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth scope internal server error response has a 2xx status code
func (o *GetOauthScopeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth scope internal server error response has a 3xx status code
func (o *GetOauthScopeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth scope internal server error response has a 4xx status code
func (o *GetOauthScopeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get oauth scope internal server error response has a 5xx status code
func (o *GetOauthScopeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get oauth scope internal server error response a status code equal to that given
func (o *GetOauthScopeInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetOauthScopeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOauthScopeInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOauthScopeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeServiceUnavailable creates a GetOauthScopeServiceUnavailable with default headers values
func NewGetOauthScopeServiceUnavailable() *GetOauthScopeServiceUnavailable {
	return &GetOauthScopeServiceUnavailable{}
}

/*
GetOauthScopeServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetOauthScopeServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth scope service unavailable response has a 2xx status code
func (o *GetOauthScopeServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth scope service unavailable response has a 3xx status code
func (o *GetOauthScopeServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth scope service unavailable response has a 4xx status code
func (o *GetOauthScopeServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get oauth scope service unavailable response has a 5xx status code
func (o *GetOauthScopeServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get oauth scope service unavailable response a status code equal to that given
func (o *GetOauthScopeServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetOauthScopeServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOauthScopeServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOauthScopeServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthScopeGatewayTimeout creates a GetOauthScopeGatewayTimeout with default headers values
func NewGetOauthScopeGatewayTimeout() *GetOauthScopeGatewayTimeout {
	return &GetOauthScopeGatewayTimeout{}
}

/*
GetOauthScopeGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetOauthScopeGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth scope gateway timeout response has a 2xx status code
func (o *GetOauthScopeGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth scope gateway timeout response has a 3xx status code
func (o *GetOauthScopeGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth scope gateway timeout response has a 4xx status code
func (o *GetOauthScopeGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get oauth scope gateway timeout response has a 5xx status code
func (o *GetOauthScopeGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get oauth scope gateway timeout response a status code equal to that given
func (o *GetOauthScopeGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetOauthScopeGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetOauthScopeGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/scopes/{scopeId}][%d] getOauthScopeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetOauthScopeGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthScopeGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package o_auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutOauthClientReader is a Reader for the PutOauthClient structure.
type PutOauthClientReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutOauthClientReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutOauthClientOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutOauthClientBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutOauthClientUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutOauthClientForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutOauthClientNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutOauthClientRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutOauthClientRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutOauthClientUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutOauthClientTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutOauthClientInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutOauthClientServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutOauthClientGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutOauthClientOK creates a PutOauthClientOK with default headers values
func NewPutOauthClientOK() *PutOauthClientOK {
	return &PutOauthClientOK{}
}

/*
PutOauthClientOK describes a response with status code 200, with default header values.

successful operation
*/
type PutOauthClientOK struct {
	Payload *models.OAuthClient
}

// IsSuccess returns true when this put oauth client o k response has a 2xx status code
func (o *PutOauthClientOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put oauth client o k response has a 3xx status code
func (o *PutOauthClientOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put oauth client o k response has a 4xx status code
func (o *PutOauthClientOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put oauth client o k response has a 5xx status code
func (o *PutOauthClientOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put oauth client o k response a status code equal to that given
func (o *PutOauthClientOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutOauthClientOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientOK  %+v", 200, o.Payload)
}

func (o *PutOauthClientOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientOK  %+v", 200, o.Payload)
}

func (o *PutOauthClientOK) GetPayload() *models.OAuthClient {
	return o.Payload
}

func (o *PutOauthClientOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OAuthClient)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOauthClientBadRequest creates a PutOauthClientBadRequest with default headers values
func NewPutOauthClientBadRequest() *PutOauthClientBadRequest {
	return &PutOauthClientBadRequest{}
}

/*
PutOauthClientBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutOauthClientBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put oauth client bad request response has a 2xx status code
func (o *PutOauthClientBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put oauth client bad request response has a 3xx status code
func (o *PutOauthClientBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put oauth client bad request response has a 4xx status code
func (o *PutOauthClientBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put oauth client bad request response has a 5xx status code
func (o *PutOauthClientBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put oauth client bad request response a status code equal to that given
func (o *PutOauthClientBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutOauthClientBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientBadRequest  %+v", 400, o.Payload)
}

func (o *PutOauthClientBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientBadRequest  %+v", 400, o.Payload)
}

func (o *PutOauthClientBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOauthClientBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOauthClientUnauthorized creates a PutOauthClientUnauthorized with default headers values
func NewPutOauthClientUnauthorized() *PutOauthClientUnauthorized {
	return &PutOauthClientUnauthorized{}
}

/*
PutOauthClientUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutOauthClientUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put oauth client unauthorized response has a 2xx status code
func (o *PutOauthClientUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put oauth client unauthorized response has a 3xx status code
func (o *PutOauthClientUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put oauth client unauthorized response has a 4xx status code
func (o *PutOauthClientUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put oauth client unauthorized response has a 5xx status code
func (o *PutOauthClientUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put oauth client unauthorized response a status code equal to that given
func (o *PutOauthClientUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutOauthClientUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientUnauthorized  %+v", 401, o.Payload)
}

func (o *PutOauthClientUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientUnauthorized  %+v", 401, o.Payload)
}

func (o *PutOauthClientUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOauthClientUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOauthClientForbidden creates a PutOauthClientForbidden with default headers values
func NewPutOauthClientForbidden() *PutOauthClientForbidden {
	return &PutOauthClientForbidden{}
}

/*
PutOauthClientForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutOauthClientForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put oauth client forbidden response has a 2xx status code
func (o *PutOauthClientForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put oauth client forbidden response has a 3xx status code
func (o *PutOauthClientForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put oauth client forbidden response has a 4xx status code
func (o *PutOauthClientForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put oauth client forbidden response has a 5xx status code
func (o *PutOauthClientForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put oauth client forbidden response a status code equal to that given
func (o *PutOauthClientForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutOauthClientForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientForbidden  %+v", 403, o.Payload)
}

func (o *PutOauthClientForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientForbidden  %+v", 403, o.Payload)
}

func (o *PutOauthClientForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOauthClientForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOauthClientNotFound creates a PutOauthClientNotFound with default headers values
func NewPutOauthClientNotFound() *PutOauthClientNotFound {
	return &PutOauthClientNotFound{}
}

/*
PutOauthClientNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutOauthClientNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put oauth client not found response has a 2xx status code
func (o *PutOauthClientNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put oauth client not found response has a 3xx status code
func (o *PutOauthClientNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put oauth client not found response has a 4xx status code
func (o *PutOauthClientNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put oauth client not found response has a 5xx status code
func (o *PutOauthClientNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put oauth client not found response a status code equal to that given
func (o *PutOauthClientNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutOauthClientNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientNotFound  %+v", 404, o.Payload)
}

func (o *PutOauthClientNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientNotFound  %+v", 404, o.Payload)
}

func (o *PutOauthClientNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOauthClientNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOauthClientRequestTimeout creates a PutOauthClientRequestTimeout with default headers values
func NewPutOauthClientRequestTimeout() *PutOauthClientRequestTimeout {
	return &PutOauthClientRequestTimeout{}
}

/*
PutOauthClientRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutOauthClientRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put oauth client request timeout response has a 2xx status code
func (o *PutOauthClientRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put oauth client request timeout response has a 3xx status code
func (o *PutOauthClientRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put oauth client request timeout response has a 4xx status code
func (o *PutOauthClientRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put oauth client request timeout response has a 5xx status code
func (o *PutOauthClientRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put oauth client request timeout response a status code equal to that given
func (o *PutOauthClientRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutOauthClientRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutOauthClientRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutOauthClientRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOauthClientRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOauthClientRequestEntityTooLarge creates a PutOauthClientRequestEntityTooLarge with default headers values
func NewPutOauthClientRequestEntityTooLarge() *PutOauthClientRequestEntityTooLarge {
	return &PutOauthClientRequestEntityTooLarge{}
}

/*
PutOauthClientRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutOauthClientRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put oauth client request entity too large response has a 2xx status code
func (o *PutOauthClientRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put oauth client request entity too large response has a 3xx status code
func (o *PutOauthClientRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put oauth client request entity too large response has a 4xx status code
func (o *PutOauthClientRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put oauth client request entity too large response has a 5xx status code
func (o *PutOauthClientRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put oauth client request entity too large response a status code equal to that given
func (o *PutOauthClientRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutOauthClientRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutOauthClientRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutOauthClientRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOauthClientRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOauthClientUnsupportedMediaType creates a PutOauthClientUnsupportedMediaType with default headers values
func NewPutOauthClientUnsupportedMediaType() *PutOauthClientUnsupportedMediaType {
	return &PutOauthClientUnsupportedMediaType{}
}

/*
PutOauthClientUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutOauthClientUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put oauth client unsupported media type response has a 2xx status code
func (o *PutOauthClientUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put oauth client unsupported media type response has a 3xx status code
func (o *PutOauthClientUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put oauth client unsupported media type response has a 4xx status code
func (o *PutOauthClientUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put oauth client unsupported media type response has a 5xx status code
func (o *PutOauthClientUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put oauth client unsupported media type response a status code equal to that given
func (o *PutOauthClientUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutOauthClientUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutOauthClientUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutOauthClientUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOauthClientUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOauthClientTooManyRequests creates a PutOauthClientTooManyRequests with default headers values
func NewPutOauthClientTooManyRequests() *PutOauthClientTooManyRequests {
	return &PutOauthClientTooManyRequests{}
}

/*
PutOauthClientTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutOauthClientTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put oauth client too many requests response has a 2xx status code
func (o *PutOauthClientTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put oauth client too many requests response has a 3xx status code
func (o *PutOauthClientTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put oauth client too many requests response has a 4xx status code
func (o *PutOauthClientTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put oauth client too many requests response has a 5xx status code
func (o *PutOauthClientTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put oauth client too many requests response a status code equal to that given
func (o *PutOauthClientTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutOauthClientTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutOauthClientTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutOauthClientTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOauthClientTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOauthClientInternalServerError creates a PutOauthClientInternalServerError with default headers values
func NewPutOauthClientInternalServerError() *PutOauthClientInternalServerError {
	return &PutOauthClientInternalServerError{}
}

/*
PutOauthClientInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutOauthClientInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put oauth client internal server error response has a 2xx status code
func (o *PutOauthClientInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put oauth client internal server error response has a 3xx status code
func (o *PutOauthClientInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put oauth client internal server error response has a 4xx status code
func (o *PutOauthClientInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put oauth client internal server error response has a 5xx status code
func (o *PutOauthClientInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put oauth client internal server error response a status code equal to that given
func (o *PutOauthClientInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutOauthClientInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientInternalServerError  %+v", 500, o.Payload)
}

func (o *PutOauthClientInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientInternalServerError  %+v", 500, o.Payload)
}

func (o *PutOauthClientInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOauthClientInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOauthClientServiceUnavailable creates a PutOauthClientServiceUnavailable with default headers values
func NewPutOauthClientServiceUnavailable() *PutOauthClientServiceUnavailable {
	return &PutOauthClientServiceUnavailable{}
}

/*
PutOauthClientServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutOauthClientServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put oauth client service unavailable response has a 2xx status code
func (o *PutOauthClientServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put oauth client service unavailable response has a 3xx status code
func (o *PutOauthClientServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put oauth client service unavailable response has a 4xx status code
func (o *PutOauthClientServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put oauth client service unavailable response has a 5xx status code
func (o *PutOauthClientServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put oauth client service unavailable response a status code equal to that given
func (o *PutOauthClientServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutOauthClientServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutOauthClientServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutOauthClientServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOauthClientServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOauthClientGatewayTimeout creates a PutOauthClientGatewayTimeout with default headers values
func NewPutOauthClientGatewayTimeout() *PutOauthClientGatewayTimeout {
	return &PutOauthClientGatewayTimeout{}
}

/*
PutOauthClientGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutOauthClientGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put oauth client gateway timeout response has a 2xx status code
func (o *PutOauthClientGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put oauth client gateway timeout response has a 3xx status code
func (o *PutOauthClientGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put oauth client gateway timeout response has a 4xx status code
func (o *PutOauthClientGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put oauth client gateway timeout response has a 5xx status code
func (o *PutOauthClientGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put oauth client gateway timeout response a status code equal to that given
func (o *PutOauthClientGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutOauthClientGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutOauthClientGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/oauth/clients/{clientId}][%d] putOauthClientGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutOauthClientGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOauthClientGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

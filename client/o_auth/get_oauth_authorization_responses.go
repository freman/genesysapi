// Code generated by go-swagger; DO NOT EDIT.

package o_auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetOauthAuthorizationReader is a Reader for the GetOauthAuthorization structure.
type GetOauthAuthorizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOauthAuthorizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOauthAuthorizationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOauthAuthorizationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOauthAuthorizationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOauthAuthorizationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOauthAuthorizationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetOauthAuthorizationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetOauthAuthorizationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetOauthAuthorizationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOauthAuthorizationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOauthAuthorizationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetOauthAuthorizationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetOauthAuthorizationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOauthAuthorizationOK creates a GetOauthAuthorizationOK with default headers values
func NewGetOauthAuthorizationOK() *GetOauthAuthorizationOK {
	return &GetOauthAuthorizationOK{}
}

/*
GetOauthAuthorizationOK describes a response with status code 200, with default header values.

successful operation
*/
type GetOauthAuthorizationOK struct {
	Payload *models.OAuthAuthorization
}

// IsSuccess returns true when this get oauth authorization o k response has a 2xx status code
func (o *GetOauthAuthorizationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get oauth authorization o k response has a 3xx status code
func (o *GetOauthAuthorizationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth authorization o k response has a 4xx status code
func (o *GetOauthAuthorizationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get oauth authorization o k response has a 5xx status code
func (o *GetOauthAuthorizationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth authorization o k response a status code equal to that given
func (o *GetOauthAuthorizationOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetOauthAuthorizationOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationOK  %+v", 200, o.Payload)
}

func (o *GetOauthAuthorizationOK) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationOK  %+v", 200, o.Payload)
}

func (o *GetOauthAuthorizationOK) GetPayload() *models.OAuthAuthorization {
	return o.Payload
}

func (o *GetOauthAuthorizationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OAuthAuthorization)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationBadRequest creates a GetOauthAuthorizationBadRequest with default headers values
func NewGetOauthAuthorizationBadRequest() *GetOauthAuthorizationBadRequest {
	return &GetOauthAuthorizationBadRequest{}
}

/*
GetOauthAuthorizationBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetOauthAuthorizationBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth authorization bad request response has a 2xx status code
func (o *GetOauthAuthorizationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth authorization bad request response has a 3xx status code
func (o *GetOauthAuthorizationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth authorization bad request response has a 4xx status code
func (o *GetOauthAuthorizationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth authorization bad request response has a 5xx status code
func (o *GetOauthAuthorizationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth authorization bad request response a status code equal to that given
func (o *GetOauthAuthorizationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetOauthAuthorizationBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationBadRequest  %+v", 400, o.Payload)
}

func (o *GetOauthAuthorizationBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationBadRequest  %+v", 400, o.Payload)
}

func (o *GetOauthAuthorizationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationUnauthorized creates a GetOauthAuthorizationUnauthorized with default headers values
func NewGetOauthAuthorizationUnauthorized() *GetOauthAuthorizationUnauthorized {
	return &GetOauthAuthorizationUnauthorized{}
}

/*
GetOauthAuthorizationUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetOauthAuthorizationUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth authorization unauthorized response has a 2xx status code
func (o *GetOauthAuthorizationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth authorization unauthorized response has a 3xx status code
func (o *GetOauthAuthorizationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth authorization unauthorized response has a 4xx status code
func (o *GetOauthAuthorizationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth authorization unauthorized response has a 5xx status code
func (o *GetOauthAuthorizationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth authorization unauthorized response a status code equal to that given
func (o *GetOauthAuthorizationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetOauthAuthorizationUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOauthAuthorizationUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOauthAuthorizationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationForbidden creates a GetOauthAuthorizationForbidden with default headers values
func NewGetOauthAuthorizationForbidden() *GetOauthAuthorizationForbidden {
	return &GetOauthAuthorizationForbidden{}
}

/*
GetOauthAuthorizationForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetOauthAuthorizationForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth authorization forbidden response has a 2xx status code
func (o *GetOauthAuthorizationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth authorization forbidden response has a 3xx status code
func (o *GetOauthAuthorizationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth authorization forbidden response has a 4xx status code
func (o *GetOauthAuthorizationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth authorization forbidden response has a 5xx status code
func (o *GetOauthAuthorizationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth authorization forbidden response a status code equal to that given
func (o *GetOauthAuthorizationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetOauthAuthorizationForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationForbidden  %+v", 403, o.Payload)
}

func (o *GetOauthAuthorizationForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationForbidden  %+v", 403, o.Payload)
}

func (o *GetOauthAuthorizationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationNotFound creates a GetOauthAuthorizationNotFound with default headers values
func NewGetOauthAuthorizationNotFound() *GetOauthAuthorizationNotFound {
	return &GetOauthAuthorizationNotFound{}
}

/*
GetOauthAuthorizationNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetOauthAuthorizationNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth authorization not found response has a 2xx status code
func (o *GetOauthAuthorizationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth authorization not found response has a 3xx status code
func (o *GetOauthAuthorizationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth authorization not found response has a 4xx status code
func (o *GetOauthAuthorizationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth authorization not found response has a 5xx status code
func (o *GetOauthAuthorizationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth authorization not found response a status code equal to that given
func (o *GetOauthAuthorizationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetOauthAuthorizationNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationNotFound  %+v", 404, o.Payload)
}

func (o *GetOauthAuthorizationNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationNotFound  %+v", 404, o.Payload)
}

func (o *GetOauthAuthorizationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationRequestTimeout creates a GetOauthAuthorizationRequestTimeout with default headers values
func NewGetOauthAuthorizationRequestTimeout() *GetOauthAuthorizationRequestTimeout {
	return &GetOauthAuthorizationRequestTimeout{}
}

/*
GetOauthAuthorizationRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetOauthAuthorizationRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth authorization request timeout response has a 2xx status code
func (o *GetOauthAuthorizationRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth authorization request timeout response has a 3xx status code
func (o *GetOauthAuthorizationRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth authorization request timeout response has a 4xx status code
func (o *GetOauthAuthorizationRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth authorization request timeout response has a 5xx status code
func (o *GetOauthAuthorizationRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth authorization request timeout response a status code equal to that given
func (o *GetOauthAuthorizationRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetOauthAuthorizationRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetOauthAuthorizationRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetOauthAuthorizationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationRequestEntityTooLarge creates a GetOauthAuthorizationRequestEntityTooLarge with default headers values
func NewGetOauthAuthorizationRequestEntityTooLarge() *GetOauthAuthorizationRequestEntityTooLarge {
	return &GetOauthAuthorizationRequestEntityTooLarge{}
}

/*
GetOauthAuthorizationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetOauthAuthorizationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth authorization request entity too large response has a 2xx status code
func (o *GetOauthAuthorizationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth authorization request entity too large response has a 3xx status code
func (o *GetOauthAuthorizationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth authorization request entity too large response has a 4xx status code
func (o *GetOauthAuthorizationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth authorization request entity too large response has a 5xx status code
func (o *GetOauthAuthorizationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth authorization request entity too large response a status code equal to that given
func (o *GetOauthAuthorizationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetOauthAuthorizationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOauthAuthorizationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOauthAuthorizationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationUnsupportedMediaType creates a GetOauthAuthorizationUnsupportedMediaType with default headers values
func NewGetOauthAuthorizationUnsupportedMediaType() *GetOauthAuthorizationUnsupportedMediaType {
	return &GetOauthAuthorizationUnsupportedMediaType{}
}

/*
GetOauthAuthorizationUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetOauthAuthorizationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth authorization unsupported media type response has a 2xx status code
func (o *GetOauthAuthorizationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth authorization unsupported media type response has a 3xx status code
func (o *GetOauthAuthorizationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth authorization unsupported media type response has a 4xx status code
func (o *GetOauthAuthorizationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth authorization unsupported media type response has a 5xx status code
func (o *GetOauthAuthorizationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth authorization unsupported media type response a status code equal to that given
func (o *GetOauthAuthorizationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetOauthAuthorizationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOauthAuthorizationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOauthAuthorizationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationTooManyRequests creates a GetOauthAuthorizationTooManyRequests with default headers values
func NewGetOauthAuthorizationTooManyRequests() *GetOauthAuthorizationTooManyRequests {
	return &GetOauthAuthorizationTooManyRequests{}
}

/*
GetOauthAuthorizationTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetOauthAuthorizationTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth authorization too many requests response has a 2xx status code
func (o *GetOauthAuthorizationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth authorization too many requests response has a 3xx status code
func (o *GetOauthAuthorizationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth authorization too many requests response has a 4xx status code
func (o *GetOauthAuthorizationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oauth authorization too many requests response has a 5xx status code
func (o *GetOauthAuthorizationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get oauth authorization too many requests response a status code equal to that given
func (o *GetOauthAuthorizationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetOauthAuthorizationTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOauthAuthorizationTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOauthAuthorizationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationInternalServerError creates a GetOauthAuthorizationInternalServerError with default headers values
func NewGetOauthAuthorizationInternalServerError() *GetOauthAuthorizationInternalServerError {
	return &GetOauthAuthorizationInternalServerError{}
}

/*
GetOauthAuthorizationInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetOauthAuthorizationInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth authorization internal server error response has a 2xx status code
func (o *GetOauthAuthorizationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth authorization internal server error response has a 3xx status code
func (o *GetOauthAuthorizationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth authorization internal server error response has a 4xx status code
func (o *GetOauthAuthorizationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get oauth authorization internal server error response has a 5xx status code
func (o *GetOauthAuthorizationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get oauth authorization internal server error response a status code equal to that given
func (o *GetOauthAuthorizationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetOauthAuthorizationInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOauthAuthorizationInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOauthAuthorizationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationServiceUnavailable creates a GetOauthAuthorizationServiceUnavailable with default headers values
func NewGetOauthAuthorizationServiceUnavailable() *GetOauthAuthorizationServiceUnavailable {
	return &GetOauthAuthorizationServiceUnavailable{}
}

/*
GetOauthAuthorizationServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetOauthAuthorizationServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth authorization service unavailable response has a 2xx status code
func (o *GetOauthAuthorizationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth authorization service unavailable response has a 3xx status code
func (o *GetOauthAuthorizationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth authorization service unavailable response has a 4xx status code
func (o *GetOauthAuthorizationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get oauth authorization service unavailable response has a 5xx status code
func (o *GetOauthAuthorizationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get oauth authorization service unavailable response a status code equal to that given
func (o *GetOauthAuthorizationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetOauthAuthorizationServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOauthAuthorizationServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOauthAuthorizationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOauthAuthorizationGatewayTimeout creates a GetOauthAuthorizationGatewayTimeout with default headers values
func NewGetOauthAuthorizationGatewayTimeout() *GetOauthAuthorizationGatewayTimeout {
	return &GetOauthAuthorizationGatewayTimeout{}
}

/*
GetOauthAuthorizationGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetOauthAuthorizationGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get oauth authorization gateway timeout response has a 2xx status code
func (o *GetOauthAuthorizationGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oauth authorization gateway timeout response has a 3xx status code
func (o *GetOauthAuthorizationGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oauth authorization gateway timeout response has a 4xx status code
func (o *GetOauthAuthorizationGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get oauth authorization gateway timeout response has a 5xx status code
func (o *GetOauthAuthorizationGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get oauth authorization gateway timeout response a status code equal to that given
func (o *GetOauthAuthorizationGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetOauthAuthorizationGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetOauthAuthorizationGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/oauth/authorizations/{clientId}][%d] getOauthAuthorizationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetOauthAuthorizationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOauthAuthorizationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package o_auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the o auth client
type API interface {
	/*
	   DeleteOauthClient deletes o auth client
	*/
	DeleteOauthClient(ctx context.Context, params *DeleteOauthClientParams) error
	/*
	   GetOauthAuthorization gets a client that is authorized by the resource owner
	*/
	GetOauthAuthorization(ctx context.Context, params *GetOauthAuthorizationParams) (*GetOauthAuthorizationOK, error)
	/*
	   GetOauthAuthorizations lists clients that are authorized by the resource owner
	*/
	GetOauthAuthorizations(ctx context.Context, params *GetOauthAuthorizationsParams) (*GetOauthAuthorizationsOK, error)
	/*
	   GetOauthClient gets o auth client
	*/
	GetOauthClient(ctx context.Context, params *GetOauthClientParams) (*GetOauthClientOK, error)
	/*
	   GetOauthClientUsageQueryResult gets the results of a usage query
	*/
	GetOauthClientUsageQueryResult(ctx context.Context, params *GetOauthClientUsageQueryResultParams) (*GetOauthClientUsageQueryResultOK, error)
	/*
	   GetOauthClientUsageSummary gets a summary of o auth client API usage
	   After calling this method, you will then need to poll for the query results based on the returned execution Id
	*/
	GetOauthClientUsageSummary(ctx context.Context, params *GetOauthClientUsageSummaryParams) (*GetOauthClientUsageSummaryOK, *GetOauthClientUsageSummaryAccepted, error)
	/*
	   GetOauthClients thes list of o auth clients
	*/
	GetOauthClients(ctx context.Context, params *GetOauthClientsParams) (*GetOauthClientsOK, error)
	/*
	   GetOauthScope ans o auth scope
	*/
	GetOauthScope(ctx context.Context, params *GetOauthScopeParams) (*GetOauthScopeOK, error)
	/*
	   GetOauthScopes thes list of o auth scopes
	*/
	GetOauthScopes(ctx context.Context, params *GetOauthScopesParams) (*GetOauthScopesOK, error)
	/*
	   PostOauthClientSecret regenerates client secret
	   This operation will set the client secret to a randomly generated cryptographically random value. All clients must be updated with the new secret. This operation should be used with caution.
	*/
	PostOauthClientSecret(ctx context.Context, params *PostOauthClientSecretParams) (*PostOauthClientSecretOK, error)
	/*
	   PostOauthClientUsageQuery queries for o auth client API usage
	   After calling this method, you will then need to poll for the query results based on the returned execution Id
	*/
	PostOauthClientUsageQuery(ctx context.Context, params *PostOauthClientUsageQueryParams) (*PostOauthClientUsageQueryOK, *PostOauthClientUsageQueryAccepted, error)
	/*
	   PostOauthClients creates o auth client
	   The OAuth Grant/Client is required in order to create an authentication token and gain access to PureCloud.
	   The preferred authorizedGrantTypes is 'CODE' which requires applications to send a client ID and client secret. This is typically a web server.
	   If the client is unable to secure the client secret then the 'TOKEN' grant type aka IMPLICIT should be used. This is would be for browser or mobile apps.
	   If a client is to be used outside of the context of a user then the 'CLIENT-CREDENTIALS' grant may be used. In this case the client must be granted roles
	   via the 'roleIds' field.
	*/
	PostOauthClients(ctx context.Context, params *PostOauthClientsParams) (*PostOauthClientsOK, error)
	/*
	   PutOauthClient updates o auth client
	*/
	PutOauthClient(ctx context.Context, params *PutOauthClientParams) (*PutOauthClientOK, error)
}

// New creates a new o auth API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for o auth API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteOauthClient deletes o auth client
*/
func (a *Client) DeleteOauthClient(ctx context.Context, params *DeleteOauthClientParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOauthClient",
		Method:             "DELETE",
		PathPattern:        "/api/v2/oauth/clients/{clientId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOauthClientReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetOauthAuthorization gets a client that is authorized by the resource owner
*/
func (a *Client) GetOauthAuthorization(ctx context.Context, params *GetOauthAuthorizationParams) (*GetOauthAuthorizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOauthAuthorization",
		Method:             "GET",
		PathPattern:        "/api/v2/oauth/authorizations/{clientId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOauthAuthorizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOauthAuthorizationOK), nil

}

/*
GetOauthAuthorizations lists clients that are authorized by the resource owner
*/
func (a *Client) GetOauthAuthorizations(ctx context.Context, params *GetOauthAuthorizationsParams) (*GetOauthAuthorizationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOauthAuthorizations",
		Method:             "GET",
		PathPattern:        "/api/v2/oauth/authorizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOauthAuthorizationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOauthAuthorizationsOK), nil

}

/*
GetOauthClient gets o auth client
*/
func (a *Client) GetOauthClient(ctx context.Context, params *GetOauthClientParams) (*GetOauthClientOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOauthClient",
		Method:             "GET",
		PathPattern:        "/api/v2/oauth/clients/{clientId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOauthClientReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOauthClientOK), nil

}

/*
GetOauthClientUsageQueryResult gets the results of a usage query
*/
func (a *Client) GetOauthClientUsageQueryResult(ctx context.Context, params *GetOauthClientUsageQueryResultParams) (*GetOauthClientUsageQueryResultOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOauthClientUsageQueryResult",
		Method:             "GET",
		PathPattern:        "/api/v2/oauth/clients/{clientId}/usage/query/results/{executionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOauthClientUsageQueryResultReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOauthClientUsageQueryResultOK), nil

}

/*
GetOauthClientUsageSummary gets a summary of o auth client API usage

After calling this method, you will then need to poll for the query results based on the returned execution Id
*/
func (a *Client) GetOauthClientUsageSummary(ctx context.Context, params *GetOauthClientUsageSummaryParams) (*GetOauthClientUsageSummaryOK, *GetOauthClientUsageSummaryAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOauthClientUsageSummary",
		Method:             "GET",
		PathPattern:        "/api/v2/oauth/clients/{clientId}/usage/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOauthClientUsageSummaryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetOauthClientUsageSummaryOK:
		return value, nil, nil
	case *GetOauthClientUsageSummaryAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetOauthClients thes list of o auth clients
*/
func (a *Client) GetOauthClients(ctx context.Context, params *GetOauthClientsParams) (*GetOauthClientsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOauthClients",
		Method:             "GET",
		PathPattern:        "/api/v2/oauth/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOauthClientsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOauthClientsOK), nil

}

/*
GetOauthScope ans o auth scope
*/
func (a *Client) GetOauthScope(ctx context.Context, params *GetOauthScopeParams) (*GetOauthScopeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOauthScope",
		Method:             "GET",
		PathPattern:        "/api/v2/oauth/scopes/{scopeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOauthScopeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOauthScopeOK), nil

}

/*
GetOauthScopes thes list of o auth scopes
*/
func (a *Client) GetOauthScopes(ctx context.Context, params *GetOauthScopesParams) (*GetOauthScopesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOauthScopes",
		Method:             "GET",
		PathPattern:        "/api/v2/oauth/scopes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOauthScopesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOauthScopesOK), nil

}

/*
PostOauthClientSecret regenerates client secret

This operation will set the client secret to a randomly generated cryptographically random value. All clients must be updated with the new secret. This operation should be used with caution.
*/
func (a *Client) PostOauthClientSecret(ctx context.Context, params *PostOauthClientSecretParams) (*PostOauthClientSecretOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOauthClientSecret",
		Method:             "POST",
		PathPattern:        "/api/v2/oauth/clients/{clientId}/secret",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOauthClientSecretReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOauthClientSecretOK), nil

}

/*
PostOauthClientUsageQuery queries for o auth client API usage

After calling this method, you will then need to poll for the query results based on the returned execution Id
*/
func (a *Client) PostOauthClientUsageQuery(ctx context.Context, params *PostOauthClientUsageQueryParams) (*PostOauthClientUsageQueryOK, *PostOauthClientUsageQueryAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOauthClientUsageQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/oauth/clients/{clientId}/usage/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOauthClientUsageQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostOauthClientUsageQueryOK:
		return value, nil, nil
	case *PostOauthClientUsageQueryAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostOauthClients creates o auth client

The OAuth Grant/Client is required in order to create an authentication token and gain access to PureCloud.
The preferred authorizedGrantTypes is 'CODE' which requires applications to send a client ID and client secret. This is typically a web server.
If the client is unable to secure the client secret then the 'TOKEN' grant type aka IMPLICIT should be used. This is would be for browser or mobile apps.
If a client is to be used outside of the context of a user then the 'CLIENT-CREDENTIALS' grant may be used. In this case the client must be granted roles
via the 'roleIds' field.
*/
func (a *Client) PostOauthClients(ctx context.Context, params *PostOauthClientsParams) (*PostOauthClientsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOauthClients",
		Method:             "POST",
		PathPattern:        "/api/v2/oauth/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOauthClientsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOauthClientsOK), nil

}

/*
PutOauthClient updates o auth client
*/
func (a *Client) PutOauthClient(ctx context.Context, params *PutOauthClientParams) (*PutOauthClientOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOauthClient",
		Method:             "PUT",
		PathPattern:        "/api/v2/oauth/clients/{clientId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOauthClientReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOauthClientOK), nil

}

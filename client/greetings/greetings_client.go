// Code generated by go-swagger; DO NOT EDIT.

package greetings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the greetings client
type API interface {
	/*
	   DeleteGreeting deletes a greeting with the given greeting Id
	*/
	DeleteGreeting(ctx context.Context, params *DeleteGreetingParams) error
	/*
	   GetGreeting gets a greeting with the given greeting Id
	*/
	GetGreeting(ctx context.Context, params *GetGreetingParams) (*GetGreetingOK, error)
	/*
	   GetGreetingMedia gets media playback URI for this greeting
	*/
	GetGreetingMedia(ctx context.Context, params *GetGreetingMediaParams) (*GetGreetingMediaOK, error)
	/*
	   GetGreetings gets an organization s greetings
	*/
	GetGreetings(ctx context.Context, params *GetGreetingsParams) (*GetGreetingsOK, error)
	/*
	   GetGreetingsDefaults gets an organization s default greeting list
	*/
	GetGreetingsDefaults(ctx context.Context, params *GetGreetingsDefaultsParams) (*GetGreetingsDefaultsOK, error)
	/*
	   GetGroupGreetings gets a list of the group s greetings
	*/
	GetGroupGreetings(ctx context.Context, params *GetGroupGreetingsParams) (*GetGroupGreetingsOK, error)
	/*
	   GetGroupGreetingsDefaults grabs the list of default greetings given a group s ID
	*/
	GetGroupGreetingsDefaults(ctx context.Context, params *GetGroupGreetingsDefaultsParams) (*GetGroupGreetingsDefaultsOK, error)
	/*
	   GetUserGreetings gets a list of the user s greetings
	*/
	GetUserGreetings(ctx context.Context, params *GetUserGreetingsParams) (*GetUserGreetingsOK, error)
	/*
	   GetUserGreetingsDefaults grabs the list of default greetings given a user s ID
	*/
	GetUserGreetingsDefaults(ctx context.Context, params *GetUserGreetingsDefaultsParams) (*GetUserGreetingsDefaultsOK, error)
	/*
	   PostGreetings creates a greeting for an organization
	*/
	PostGreetings(ctx context.Context, params *PostGreetingsParams) (*PostGreetingsOK, error)
	/*
	   PostGroupGreetings creates a greeting for a group
	*/
	PostGroupGreetings(ctx context.Context, params *PostGroupGreetingsParams) (*PostGroupGreetingsOK, error)
	/*
	   PostUserGreetings creates a greeting for a user
	*/
	PostUserGreetings(ctx context.Context, params *PostUserGreetingsParams) (*PostUserGreetingsOK, error)
	/*
	   PutGreeting updates the greeting with the given greeting Id
	*/
	PutGreeting(ctx context.Context, params *PutGreetingParams) (*PutGreetingOK, error)
	/*
	   PutGreetingsDefaults updates an organization s default greeting list
	*/
	PutGreetingsDefaults(ctx context.Context, params *PutGreetingsDefaultsParams) (*PutGreetingsDefaultsOK, error)
	/*
	   PutGroupGreetingsDefaults updates the default greeting list of the specified group
	*/
	PutGroupGreetingsDefaults(ctx context.Context, params *PutGroupGreetingsDefaultsParams) (*PutGroupGreetingsDefaultsOK, error)
	/*
	   PutUserGreetingsDefaults updates the default greeting list of the specified user
	*/
	PutUserGreetingsDefaults(ctx context.Context, params *PutUserGreetingsDefaultsParams) (*PutUserGreetingsDefaultsOK, error)
}

// New creates a new greetings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for greetings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteGreeting deletes a greeting with the given greeting Id
*/
func (a *Client) DeleteGreeting(ctx context.Context, params *DeleteGreetingParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteGreeting",
		Method:             "DELETE",
		PathPattern:        "/api/v2/greetings/{greetingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGreetingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetGreeting gets a greeting with the given greeting Id
*/
func (a *Client) GetGreeting(ctx context.Context, params *GetGreetingParams) (*GetGreetingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGreeting",
		Method:             "GET",
		PathPattern:        "/api/v2/greetings/{greetingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGreetingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGreetingOK), nil

}

/*
GetGreetingMedia gets media playback URI for this greeting
*/
func (a *Client) GetGreetingMedia(ctx context.Context, params *GetGreetingMediaParams) (*GetGreetingMediaOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGreetingMedia",
		Method:             "GET",
		PathPattern:        "/api/v2/greetings/{greetingId}/media",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGreetingMediaReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGreetingMediaOK), nil

}

/*
GetGreetings gets an organization s greetings
*/
func (a *Client) GetGreetings(ctx context.Context, params *GetGreetingsParams) (*GetGreetingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGreetings",
		Method:             "GET",
		PathPattern:        "/api/v2/greetings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGreetingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGreetingsOK), nil

}

/*
GetGreetingsDefaults gets an organization s default greeting list
*/
func (a *Client) GetGreetingsDefaults(ctx context.Context, params *GetGreetingsDefaultsParams) (*GetGreetingsDefaultsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGreetingsDefaults",
		Method:             "GET",
		PathPattern:        "/api/v2/greetings/defaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGreetingsDefaultsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGreetingsDefaultsOK), nil

}

/*
GetGroupGreetings gets a list of the group s greetings
*/
func (a *Client) GetGroupGreetings(ctx context.Context, params *GetGroupGreetingsParams) (*GetGroupGreetingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupGreetings",
		Method:             "GET",
		PathPattern:        "/api/v2/groups/{groupId}/greetings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupGreetingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGroupGreetingsOK), nil

}

/*
GetGroupGreetingsDefaults grabs the list of default greetings given a group s ID
*/
func (a *Client) GetGroupGreetingsDefaults(ctx context.Context, params *GetGroupGreetingsDefaultsParams) (*GetGroupGreetingsDefaultsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupGreetingsDefaults",
		Method:             "GET",
		PathPattern:        "/api/v2/groups/{groupId}/greetings/defaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupGreetingsDefaultsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGroupGreetingsDefaultsOK), nil

}

/*
GetUserGreetings gets a list of the user s greetings
*/
func (a *Client) GetUserGreetings(ctx context.Context, params *GetUserGreetingsParams) (*GetUserGreetingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserGreetings",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/greetings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserGreetingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserGreetingsOK), nil

}

/*
GetUserGreetingsDefaults grabs the list of default greetings given a user s ID
*/
func (a *Client) GetUserGreetingsDefaults(ctx context.Context, params *GetUserGreetingsDefaultsParams) (*GetUserGreetingsDefaultsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserGreetingsDefaults",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/greetings/defaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserGreetingsDefaultsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserGreetingsDefaultsOK), nil

}

/*
PostGreetings creates a greeting for an organization
*/
func (a *Client) PostGreetings(ctx context.Context, params *PostGreetingsParams) (*PostGreetingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postGreetings",
		Method:             "POST",
		PathPattern:        "/api/v2/greetings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGreetingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostGreetingsOK), nil

}

/*
PostGroupGreetings creates a greeting for a group
*/
func (a *Client) PostGroupGreetings(ctx context.Context, params *PostGroupGreetingsParams) (*PostGroupGreetingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postGroupGreetings",
		Method:             "POST",
		PathPattern:        "/api/v2/groups/{groupId}/greetings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGroupGreetingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostGroupGreetingsOK), nil

}

/*
PostUserGreetings creates a greeting for a user
*/
func (a *Client) PostUserGreetings(ctx context.Context, params *PostUserGreetingsParams) (*PostUserGreetingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUserGreetings",
		Method:             "POST",
		PathPattern:        "/api/v2/users/{userId}/greetings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUserGreetingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUserGreetingsOK), nil

}

/*
PutGreeting updates the greeting with the given greeting Id
*/
func (a *Client) PutGreeting(ctx context.Context, params *PutGreetingParams) (*PutGreetingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putGreeting",
		Method:             "PUT",
		PathPattern:        "/api/v2/greetings/{greetingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutGreetingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutGreetingOK), nil

}

/*
PutGreetingsDefaults updates an organization s default greeting list
*/
func (a *Client) PutGreetingsDefaults(ctx context.Context, params *PutGreetingsDefaultsParams) (*PutGreetingsDefaultsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putGreetingsDefaults",
		Method:             "PUT",
		PathPattern:        "/api/v2/greetings/defaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutGreetingsDefaultsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutGreetingsDefaultsOK), nil

}

/*
PutGroupGreetingsDefaults updates the default greeting list of the specified group
*/
func (a *Client) PutGroupGreetingsDefaults(ctx context.Context, params *PutGroupGreetingsDefaultsParams) (*PutGroupGreetingsDefaultsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putGroupGreetingsDefaults",
		Method:             "PUT",
		PathPattern:        "/api/v2/groups/{groupId}/greetings/defaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutGroupGreetingsDefaultsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutGroupGreetingsDefaultsOK), nil

}

/*
PutUserGreetingsDefaults updates the default greeting list of the specified user
*/
func (a *Client) PutUserGreetingsDefaults(ctx context.Context, params *PutUserGreetingsDefaultsParams) (*PutUserGreetingsDefaultsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUserGreetingsDefaults",
		Method:             "PUT",
		PathPattern:        "/api/v2/users/{userId}/greetings/defaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserGreetingsDefaultsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUserGreetingsDefaultsOK), nil

}

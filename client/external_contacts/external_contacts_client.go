// Code generated by go-swagger; DO NOT EDIT.

package external_contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the external contacts client
type API interface {
	/*
	   DeleteExternalcontactsContact deletes an external contact
	*/
	DeleteExternalcontactsContact(ctx context.Context, params *DeleteExternalcontactsContactParams) (*DeleteExternalcontactsContactOK, error)
	/*
	   DeleteExternalcontactsContactNote deletes a note for an external contact
	*/
	DeleteExternalcontactsContactNote(ctx context.Context, params *DeleteExternalcontactsContactNoteParams) (*DeleteExternalcontactsContactNoteOK, error)
	/*
	   DeleteExternalcontactsContactsSchema deletes a schema
	*/
	DeleteExternalcontactsContactsSchema(ctx context.Context, params *DeleteExternalcontactsContactsSchemaParams) (*DeleteExternalcontactsContactsSchemaNoContent, error)
	/*
	   DeleteExternalcontactsOrganization deletes an external organization
	*/
	DeleteExternalcontactsOrganization(ctx context.Context, params *DeleteExternalcontactsOrganizationParams) (*DeleteExternalcontactsOrganizationOK, error)
	/*
	   DeleteExternalcontactsOrganizationNote deletes a note for an external organization
	*/
	DeleteExternalcontactsOrganizationNote(ctx context.Context, params *DeleteExternalcontactsOrganizationNoteParams) (*DeleteExternalcontactsOrganizationNoteOK, error)
	/*
	   DeleteExternalcontactsOrganizationTrustor unlinks the trustor for this external organization
	*/
	DeleteExternalcontactsOrganizationTrustor(ctx context.Context, params *DeleteExternalcontactsOrganizationTrustorParams) (*DeleteExternalcontactsOrganizationTrustorNoContent, error)
	/*
	   DeleteExternalcontactsRelationship deletes a relationship
	*/
	DeleteExternalcontactsRelationship(ctx context.Context, params *DeleteExternalcontactsRelationshipParams) (*DeleteExternalcontactsRelationshipOK, error)
	/*
	   GetExternalcontactsContact fetches an external contact
	*/
	GetExternalcontactsContact(ctx context.Context, params *GetExternalcontactsContactParams) (*GetExternalcontactsContactOK, error)
	/*
	   GetExternalcontactsContactNote fetches a note for an external contact
	*/
	GetExternalcontactsContactNote(ctx context.Context, params *GetExternalcontactsContactNoteParams) (*GetExternalcontactsContactNoteOK, error)
	/*
	   GetExternalcontactsContactNotes lists notes for an external contact
	*/
	GetExternalcontactsContactNotes(ctx context.Context, params *GetExternalcontactsContactNotesParams) (*GetExternalcontactsContactNotesOK, error)
	/*
	   GetExternalcontactsContacts searches for external contacts
	*/
	GetExternalcontactsContacts(ctx context.Context, params *GetExternalcontactsContactsParams) (*GetExternalcontactsContactsOK, error)
	/*
	   GetExternalcontactsContactsSchema gets a schema
	*/
	GetExternalcontactsContactsSchema(ctx context.Context, params *GetExternalcontactsContactsSchemaParams) (*GetExternalcontactsContactsSchemaOK, error)
	/*
	   GetExternalcontactsContactsSchemaVersion gets a specific version of a schema
	*/
	GetExternalcontactsContactsSchemaVersion(ctx context.Context, params *GetExternalcontactsContactsSchemaVersionParams) (*GetExternalcontactsContactsSchemaVersionOK, error)
	/*
	   GetExternalcontactsContactsSchemaVersions gets all versions of an external contact s schema
	*/
	GetExternalcontactsContactsSchemaVersions(ctx context.Context, params *GetExternalcontactsContactsSchemaVersionsParams) (*GetExternalcontactsContactsSchemaVersionsOK, error)
	/*
	   GetExternalcontactsContactsSchemas gets a list of schemas
	*/
	GetExternalcontactsContactsSchemas(ctx context.Context, params *GetExternalcontactsContactsSchemasParams) (*GetExternalcontactsContactsSchemasOK, error)
	/*
	   GetExternalcontactsOrganization fetches an external organization
	*/
	GetExternalcontactsOrganization(ctx context.Context, params *GetExternalcontactsOrganizationParams) (*GetExternalcontactsOrganizationOK, error)
	/*
	   GetExternalcontactsOrganizationContacts searches for external contacts in an external organization
	*/
	GetExternalcontactsOrganizationContacts(ctx context.Context, params *GetExternalcontactsOrganizationContactsParams) (*GetExternalcontactsOrganizationContactsOK, error)
	/*
	   GetExternalcontactsOrganizationNote fetches a note for an external organization
	*/
	GetExternalcontactsOrganizationNote(ctx context.Context, params *GetExternalcontactsOrganizationNoteParams) (*GetExternalcontactsOrganizationNoteOK, error)
	/*
	   GetExternalcontactsOrganizationNotes lists notes for an external organization
	*/
	GetExternalcontactsOrganizationNotes(ctx context.Context, params *GetExternalcontactsOrganizationNotesParams) (*GetExternalcontactsOrganizationNotesOK, error)
	/*
	   GetExternalcontactsOrganizationRelationships fetches a relationship for an external organization
	*/
	GetExternalcontactsOrganizationRelationships(ctx context.Context, params *GetExternalcontactsOrganizationRelationshipsParams) (*GetExternalcontactsOrganizationRelationshipsOK, error)
	/*
	   GetExternalcontactsOrganizations searches for external organizations
	*/
	GetExternalcontactsOrganizations(ctx context.Context, params *GetExternalcontactsOrganizationsParams) (*GetExternalcontactsOrganizationsOK, error)
	/*
	   GetExternalcontactsOrganizationsSchema gets a schema
	*/
	GetExternalcontactsOrganizationsSchema(ctx context.Context, params *GetExternalcontactsOrganizationsSchemaParams) (*GetExternalcontactsOrganizationsSchemaOK, error)
	/*
	   GetExternalcontactsOrganizationsSchemaVersion gets a specific version of a schema
	*/
	GetExternalcontactsOrganizationsSchemaVersion(ctx context.Context, params *GetExternalcontactsOrganizationsSchemaVersionParams) (*GetExternalcontactsOrganizationsSchemaVersionOK, error)
	/*
	   GetExternalcontactsOrganizationsSchemaVersions gets all versions of an external organization s schema
	*/
	GetExternalcontactsOrganizationsSchemaVersions(ctx context.Context, params *GetExternalcontactsOrganizationsSchemaVersionsParams) (*GetExternalcontactsOrganizationsSchemaVersionsOK, error)
	/*
	   GetExternalcontactsOrganizationsSchemas gets a list of schemas
	*/
	GetExternalcontactsOrganizationsSchemas(ctx context.Context, params *GetExternalcontactsOrganizationsSchemasParams) (*GetExternalcontactsOrganizationsSchemasOK, error)
	/*
	   GetExternalcontactsRelationship fetches a relationship
	*/
	GetExternalcontactsRelationship(ctx context.Context, params *GetExternalcontactsRelationshipParams) (*GetExternalcontactsRelationshipOK, error)
	/*
	   GetExternalcontactsReversewhitepageslookup looks up contacts and external organizations based on an attribute maximum of 25 values returned
	*/
	GetExternalcontactsReversewhitepageslookup(ctx context.Context, params *GetExternalcontactsReversewhitepageslookupParams) (*GetExternalcontactsReversewhitepageslookupOK, error)
	/*
	   GetExternalcontactsScanContacts scans for external contacts using paging
	*/
	GetExternalcontactsScanContacts(ctx context.Context, params *GetExternalcontactsScanContactsParams) (*GetExternalcontactsScanContactsOK, error)
	/*
	   GetExternalcontactsScanNotes scans for notes using paging
	*/
	GetExternalcontactsScanNotes(ctx context.Context, params *GetExternalcontactsScanNotesParams) (*GetExternalcontactsScanNotesOK, error)
	/*
	   GetExternalcontactsScanOrganizations scans for external organizations using paging
	*/
	GetExternalcontactsScanOrganizations(ctx context.Context, params *GetExternalcontactsScanOrganizationsParams) (*GetExternalcontactsScanOrganizationsOK, error)
	/*
	   GetExternalcontactsScanRelationships scans for relationships
	*/
	GetExternalcontactsScanRelationships(ctx context.Context, params *GetExternalcontactsScanRelationshipsParams) (*GetExternalcontactsScanRelationshipsOK, error)
	/*
	   PostExternalcontactsContactNotes creates a note for an external contact
	*/
	PostExternalcontactsContactNotes(ctx context.Context, params *PostExternalcontactsContactNotesParams) (*PostExternalcontactsContactNotesOK, error)
	/*
	   PostExternalcontactsContacts creates an external contact
	*/
	PostExternalcontactsContacts(ctx context.Context, params *PostExternalcontactsContactsParams) (*PostExternalcontactsContactsOK, error)
	/*
	   PostExternalcontactsContactsSchemas creates a schema
	*/
	PostExternalcontactsContactsSchemas(ctx context.Context, params *PostExternalcontactsContactsSchemasParams) (*PostExternalcontactsContactsSchemasOK, error)
	/*
	   PostExternalcontactsOrganizationNotes creates a note for an external organization
	*/
	PostExternalcontactsOrganizationNotes(ctx context.Context, params *PostExternalcontactsOrganizationNotesParams) (*PostExternalcontactsOrganizationNotesOK, error)
	/*
	   PostExternalcontactsOrganizations creates an external organization
	*/
	PostExternalcontactsOrganizations(ctx context.Context, params *PostExternalcontactsOrganizationsParams) (*PostExternalcontactsOrganizationsOK, error)
	/*
	   PostExternalcontactsOrganizationsSchemas creates a schema
	*/
	PostExternalcontactsOrganizationsSchemas(ctx context.Context, params *PostExternalcontactsOrganizationsSchemasParams) (*PostExternalcontactsOrganizationsSchemasOK, error)
	/*
	   PostExternalcontactsRelationships creates a relationship
	*/
	PostExternalcontactsRelationships(ctx context.Context, params *PostExternalcontactsRelationshipsParams) (*PostExternalcontactsRelationshipsOK, error)
	/*
	   PutExternalcontactsContact updates an external contact
	*/
	PutExternalcontactsContact(ctx context.Context, params *PutExternalcontactsContactParams) (*PutExternalcontactsContactOK, error)
	/*
	   PutExternalcontactsContactNote updates a note for an external contact
	*/
	PutExternalcontactsContactNote(ctx context.Context, params *PutExternalcontactsContactNoteParams) (*PutExternalcontactsContactNoteOK, error)
	/*
	   PutExternalcontactsContactsSchema updates a schema
	*/
	PutExternalcontactsContactsSchema(ctx context.Context, params *PutExternalcontactsContactsSchemaParams) (*PutExternalcontactsContactsSchemaOK, error)
	/*
	   PutExternalcontactsConversation associates disassociate an external contact with a conversation
	   To associate, supply a value for the externalContactId.  To disassociate, do not include the property at all.
	*/
	PutExternalcontactsConversation(ctx context.Context, params *PutExternalcontactsConversationParams) (*PutExternalcontactsConversationAccepted, error)
	/*
	   PutExternalcontactsOrganization updates an external organization
	*/
	PutExternalcontactsOrganization(ctx context.Context, params *PutExternalcontactsOrganizationParams) (*PutExternalcontactsOrganizationOK, error)
	/*
	   PutExternalcontactsOrganizationNote updates a note for an external organization
	*/
	PutExternalcontactsOrganizationNote(ctx context.Context, params *PutExternalcontactsOrganizationNoteParams) (*PutExternalcontactsOrganizationNoteOK, error)
	/*
	   PutExternalcontactsOrganizationTrustorTrustorID links a trustor with an external organization
	*/
	PutExternalcontactsOrganizationTrustorTrustorID(ctx context.Context, params *PutExternalcontactsOrganizationTrustorTrustorIDParams) (*PutExternalcontactsOrganizationTrustorTrustorIDOK, error)
	/*
	   PutExternalcontactsOrganizationsSchema updates a schema
	*/
	PutExternalcontactsOrganizationsSchema(ctx context.Context, params *PutExternalcontactsOrganizationsSchemaParams) (*PutExternalcontactsOrganizationsSchemaOK, error)
	/*
	   PutExternalcontactsRelationship updates a relationship
	*/
	PutExternalcontactsRelationship(ctx context.Context, params *PutExternalcontactsRelationshipParams) (*PutExternalcontactsRelationshipOK, error)
}

// New creates a new external contacts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for external contacts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteExternalcontactsContact deletes an external contact
*/
func (a *Client) DeleteExternalcontactsContact(ctx context.Context, params *DeleteExternalcontactsContactParams) (*DeleteExternalcontactsContactOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteExternalcontactsContact",
		Method:             "DELETE",
		PathPattern:        "/api/v2/externalcontacts/contacts/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteExternalcontactsContactReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteExternalcontactsContactOK), nil

}

/*
DeleteExternalcontactsContactNote deletes a note for an external contact
*/
func (a *Client) DeleteExternalcontactsContactNote(ctx context.Context, params *DeleteExternalcontactsContactNoteParams) (*DeleteExternalcontactsContactNoteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteExternalcontactsContactNote",
		Method:             "DELETE",
		PathPattern:        "/api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteExternalcontactsContactNoteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteExternalcontactsContactNoteOK), nil

}

/*
DeleteExternalcontactsContactsSchema deletes a schema
*/
func (a *Client) DeleteExternalcontactsContactsSchema(ctx context.Context, params *DeleteExternalcontactsContactsSchemaParams) (*DeleteExternalcontactsContactsSchemaNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteExternalcontactsContactsSchema",
		Method:             "DELETE",
		PathPattern:        "/api/v2/externalcontacts/contacts/schemas/{schemaId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteExternalcontactsContactsSchemaReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteExternalcontactsContactsSchemaNoContent), nil

}

/*
DeleteExternalcontactsOrganization deletes an external organization
*/
func (a *Client) DeleteExternalcontactsOrganization(ctx context.Context, params *DeleteExternalcontactsOrganizationParams) (*DeleteExternalcontactsOrganizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteExternalcontactsOrganization",
		Method:             "DELETE",
		PathPattern:        "/api/v2/externalcontacts/organizations/{externalOrganizationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteExternalcontactsOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteExternalcontactsOrganizationOK), nil

}

/*
DeleteExternalcontactsOrganizationNote deletes a note for an external organization
*/
func (a *Client) DeleteExternalcontactsOrganizationNote(ctx context.Context, params *DeleteExternalcontactsOrganizationNoteParams) (*DeleteExternalcontactsOrganizationNoteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteExternalcontactsOrganizationNote",
		Method:             "DELETE",
		PathPattern:        "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteExternalcontactsOrganizationNoteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteExternalcontactsOrganizationNoteOK), nil

}

/*
DeleteExternalcontactsOrganizationTrustor unlinks the trustor for this external organization
*/
func (a *Client) DeleteExternalcontactsOrganizationTrustor(ctx context.Context, params *DeleteExternalcontactsOrganizationTrustorParams) (*DeleteExternalcontactsOrganizationTrustorNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteExternalcontactsOrganizationTrustor",
		Method:             "DELETE",
		PathPattern:        "/api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteExternalcontactsOrganizationTrustorReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteExternalcontactsOrganizationTrustorNoContent), nil

}

/*
DeleteExternalcontactsRelationship deletes a relationship
*/
func (a *Client) DeleteExternalcontactsRelationship(ctx context.Context, params *DeleteExternalcontactsRelationshipParams) (*DeleteExternalcontactsRelationshipOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteExternalcontactsRelationship",
		Method:             "DELETE",
		PathPattern:        "/api/v2/externalcontacts/relationships/{relationshipId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteExternalcontactsRelationshipReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteExternalcontactsRelationshipOK), nil

}

/*
GetExternalcontactsContact fetches an external contact
*/
func (a *Client) GetExternalcontactsContact(ctx context.Context, params *GetExternalcontactsContactParams) (*GetExternalcontactsContactOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsContact",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/contacts/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsContactReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsContactOK), nil

}

/*
GetExternalcontactsContactNote fetches a note for an external contact
*/
func (a *Client) GetExternalcontactsContactNote(ctx context.Context, params *GetExternalcontactsContactNoteParams) (*GetExternalcontactsContactNoteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsContactNote",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsContactNoteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsContactNoteOK), nil

}

/*
GetExternalcontactsContactNotes lists notes for an external contact
*/
func (a *Client) GetExternalcontactsContactNotes(ctx context.Context, params *GetExternalcontactsContactNotesParams) (*GetExternalcontactsContactNotesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsContactNotes",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/contacts/{contactId}/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsContactNotesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsContactNotesOK), nil

}

/*
GetExternalcontactsContacts searches for external contacts
*/
func (a *Client) GetExternalcontactsContacts(ctx context.Context, params *GetExternalcontactsContactsParams) (*GetExternalcontactsContactsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsContacts",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/contacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsContactsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsContactsOK), nil

}

/*
GetExternalcontactsContactsSchema gets a schema
*/
func (a *Client) GetExternalcontactsContactsSchema(ctx context.Context, params *GetExternalcontactsContactsSchemaParams) (*GetExternalcontactsContactsSchemaOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsContactsSchema",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/contacts/schemas/{schemaId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsContactsSchemaReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsContactsSchemaOK), nil

}

/*
GetExternalcontactsContactsSchemaVersion gets a specific version of a schema
*/
func (a *Client) GetExternalcontactsContactsSchemaVersion(ctx context.Context, params *GetExternalcontactsContactsSchemaVersionParams) (*GetExternalcontactsContactsSchemaVersionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsContactsSchemaVersion",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/contacts/schemas/{schemaId}/versions/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsContactsSchemaVersionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsContactsSchemaVersionOK), nil

}

/*
GetExternalcontactsContactsSchemaVersions gets all versions of an external contact s schema
*/
func (a *Client) GetExternalcontactsContactsSchemaVersions(ctx context.Context, params *GetExternalcontactsContactsSchemaVersionsParams) (*GetExternalcontactsContactsSchemaVersionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsContactsSchemaVersions",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/contacts/schemas/{schemaId}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsContactsSchemaVersionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsContactsSchemaVersionsOK), nil

}

/*
GetExternalcontactsContactsSchemas gets a list of schemas
*/
func (a *Client) GetExternalcontactsContactsSchemas(ctx context.Context, params *GetExternalcontactsContactsSchemasParams) (*GetExternalcontactsContactsSchemasOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsContactsSchemas",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/contacts/schemas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsContactsSchemasReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsContactsSchemasOK), nil

}

/*
GetExternalcontactsOrganization fetches an external organization
*/
func (a *Client) GetExternalcontactsOrganization(ctx context.Context, params *GetExternalcontactsOrganizationParams) (*GetExternalcontactsOrganizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsOrganization",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/organizations/{externalOrganizationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsOrganizationOK), nil

}

/*
GetExternalcontactsOrganizationContacts searches for external contacts in an external organization
*/
func (a *Client) GetExternalcontactsOrganizationContacts(ctx context.Context, params *GetExternalcontactsOrganizationContactsParams) (*GetExternalcontactsOrganizationContactsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsOrganizationContacts",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/organizations/{externalOrganizationId}/contacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsOrganizationContactsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsOrganizationContactsOK), nil

}

/*
GetExternalcontactsOrganizationNote fetches a note for an external organization
*/
func (a *Client) GetExternalcontactsOrganizationNote(ctx context.Context, params *GetExternalcontactsOrganizationNoteParams) (*GetExternalcontactsOrganizationNoteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsOrganizationNote",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsOrganizationNoteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsOrganizationNoteOK), nil

}

/*
GetExternalcontactsOrganizationNotes lists notes for an external organization
*/
func (a *Client) GetExternalcontactsOrganizationNotes(ctx context.Context, params *GetExternalcontactsOrganizationNotesParams) (*GetExternalcontactsOrganizationNotesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsOrganizationNotes",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsOrganizationNotesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsOrganizationNotesOK), nil

}

/*
GetExternalcontactsOrganizationRelationships fetches a relationship for an external organization
*/
func (a *Client) GetExternalcontactsOrganizationRelationships(ctx context.Context, params *GetExternalcontactsOrganizationRelationshipsParams) (*GetExternalcontactsOrganizationRelationshipsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsOrganizationRelationships",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/organizations/{externalOrganizationId}/relationships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsOrganizationRelationshipsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsOrganizationRelationshipsOK), nil

}

/*
GetExternalcontactsOrganizations searches for external organizations
*/
func (a *Client) GetExternalcontactsOrganizations(ctx context.Context, params *GetExternalcontactsOrganizationsParams) (*GetExternalcontactsOrganizationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsOrganizations",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsOrganizationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsOrganizationsOK), nil

}

/*
GetExternalcontactsOrganizationsSchema gets a schema
*/
func (a *Client) GetExternalcontactsOrganizationsSchema(ctx context.Context, params *GetExternalcontactsOrganizationsSchemaParams) (*GetExternalcontactsOrganizationsSchemaOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsOrganizationsSchema",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/organizations/schemas/{schemaId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsOrganizationsSchemaReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsOrganizationsSchemaOK), nil

}

/*
GetExternalcontactsOrganizationsSchemaVersion gets a specific version of a schema
*/
func (a *Client) GetExternalcontactsOrganizationsSchemaVersion(ctx context.Context, params *GetExternalcontactsOrganizationsSchemaVersionParams) (*GetExternalcontactsOrganizationsSchemaVersionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsOrganizationsSchemaVersion",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/organizations/schemas/{schemaId}/versions/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsOrganizationsSchemaVersionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsOrganizationsSchemaVersionOK), nil

}

/*
GetExternalcontactsOrganizationsSchemaVersions gets all versions of an external organization s schema
*/
func (a *Client) GetExternalcontactsOrganizationsSchemaVersions(ctx context.Context, params *GetExternalcontactsOrganizationsSchemaVersionsParams) (*GetExternalcontactsOrganizationsSchemaVersionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsOrganizationsSchemaVersions",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/organizations/schemas/{schemaId}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsOrganizationsSchemaVersionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsOrganizationsSchemaVersionsOK), nil

}

/*
GetExternalcontactsOrganizationsSchemas gets a list of schemas
*/
func (a *Client) GetExternalcontactsOrganizationsSchemas(ctx context.Context, params *GetExternalcontactsOrganizationsSchemasParams) (*GetExternalcontactsOrganizationsSchemasOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsOrganizationsSchemas",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/organizations/schemas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsOrganizationsSchemasReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsOrganizationsSchemasOK), nil

}

/*
GetExternalcontactsRelationship fetches a relationship
*/
func (a *Client) GetExternalcontactsRelationship(ctx context.Context, params *GetExternalcontactsRelationshipParams) (*GetExternalcontactsRelationshipOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsRelationship",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/relationships/{relationshipId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsRelationshipReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsRelationshipOK), nil

}

/*
GetExternalcontactsReversewhitepageslookup looks up contacts and external organizations based on an attribute maximum of 25 values returned
*/
func (a *Client) GetExternalcontactsReversewhitepageslookup(ctx context.Context, params *GetExternalcontactsReversewhitepageslookupParams) (*GetExternalcontactsReversewhitepageslookupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsReversewhitepageslookup",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/reversewhitepageslookup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsReversewhitepageslookupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsReversewhitepageslookupOK), nil

}

/*
GetExternalcontactsScanContacts scans for external contacts using paging
*/
func (a *Client) GetExternalcontactsScanContacts(ctx context.Context, params *GetExternalcontactsScanContactsParams) (*GetExternalcontactsScanContactsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsScanContacts",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/scan/contacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsScanContactsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsScanContactsOK), nil

}

/*
GetExternalcontactsScanNotes scans for notes using paging
*/
func (a *Client) GetExternalcontactsScanNotes(ctx context.Context, params *GetExternalcontactsScanNotesParams) (*GetExternalcontactsScanNotesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsScanNotes",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/scan/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsScanNotesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsScanNotesOK), nil

}

/*
GetExternalcontactsScanOrganizations scans for external organizations using paging
*/
func (a *Client) GetExternalcontactsScanOrganizations(ctx context.Context, params *GetExternalcontactsScanOrganizationsParams) (*GetExternalcontactsScanOrganizationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsScanOrganizations",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/scan/organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsScanOrganizationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsScanOrganizationsOK), nil

}

/*
GetExternalcontactsScanRelationships scans for relationships
*/
func (a *Client) GetExternalcontactsScanRelationships(ctx context.Context, params *GetExternalcontactsScanRelationshipsParams) (*GetExternalcontactsScanRelationshipsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalcontactsScanRelationships",
		Method:             "GET",
		PathPattern:        "/api/v2/externalcontacts/scan/relationships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalcontactsScanRelationshipsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalcontactsScanRelationshipsOK), nil

}

/*
PostExternalcontactsContactNotes creates a note for an external contact
*/
func (a *Client) PostExternalcontactsContactNotes(ctx context.Context, params *PostExternalcontactsContactNotesParams) (*PostExternalcontactsContactNotesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postExternalcontactsContactNotes",
		Method:             "POST",
		PathPattern:        "/api/v2/externalcontacts/contacts/{contactId}/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostExternalcontactsContactNotesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostExternalcontactsContactNotesOK), nil

}

/*
PostExternalcontactsContacts creates an external contact
*/
func (a *Client) PostExternalcontactsContacts(ctx context.Context, params *PostExternalcontactsContactsParams) (*PostExternalcontactsContactsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postExternalcontactsContacts",
		Method:             "POST",
		PathPattern:        "/api/v2/externalcontacts/contacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostExternalcontactsContactsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostExternalcontactsContactsOK), nil

}

/*
PostExternalcontactsContactsSchemas creates a schema
*/
func (a *Client) PostExternalcontactsContactsSchemas(ctx context.Context, params *PostExternalcontactsContactsSchemasParams) (*PostExternalcontactsContactsSchemasOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postExternalcontactsContactsSchemas",
		Method:             "POST",
		PathPattern:        "/api/v2/externalcontacts/contacts/schemas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostExternalcontactsContactsSchemasReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostExternalcontactsContactsSchemasOK), nil

}

/*
PostExternalcontactsOrganizationNotes creates a note for an external organization
*/
func (a *Client) PostExternalcontactsOrganizationNotes(ctx context.Context, params *PostExternalcontactsOrganizationNotesParams) (*PostExternalcontactsOrganizationNotesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postExternalcontactsOrganizationNotes",
		Method:             "POST",
		PathPattern:        "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostExternalcontactsOrganizationNotesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostExternalcontactsOrganizationNotesOK), nil

}

/*
PostExternalcontactsOrganizations creates an external organization
*/
func (a *Client) PostExternalcontactsOrganizations(ctx context.Context, params *PostExternalcontactsOrganizationsParams) (*PostExternalcontactsOrganizationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postExternalcontactsOrganizations",
		Method:             "POST",
		PathPattern:        "/api/v2/externalcontacts/organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostExternalcontactsOrganizationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostExternalcontactsOrganizationsOK), nil

}

/*
PostExternalcontactsOrganizationsSchemas creates a schema
*/
func (a *Client) PostExternalcontactsOrganizationsSchemas(ctx context.Context, params *PostExternalcontactsOrganizationsSchemasParams) (*PostExternalcontactsOrganizationsSchemasOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postExternalcontactsOrganizationsSchemas",
		Method:             "POST",
		PathPattern:        "/api/v2/externalcontacts/organizations/schemas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostExternalcontactsOrganizationsSchemasReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostExternalcontactsOrganizationsSchemasOK), nil

}

/*
PostExternalcontactsRelationships creates a relationship
*/
func (a *Client) PostExternalcontactsRelationships(ctx context.Context, params *PostExternalcontactsRelationshipsParams) (*PostExternalcontactsRelationshipsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postExternalcontactsRelationships",
		Method:             "POST",
		PathPattern:        "/api/v2/externalcontacts/relationships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostExternalcontactsRelationshipsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostExternalcontactsRelationshipsOK), nil

}

/*
PutExternalcontactsContact updates an external contact
*/
func (a *Client) PutExternalcontactsContact(ctx context.Context, params *PutExternalcontactsContactParams) (*PutExternalcontactsContactOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putExternalcontactsContact",
		Method:             "PUT",
		PathPattern:        "/api/v2/externalcontacts/contacts/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutExternalcontactsContactReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutExternalcontactsContactOK), nil

}

/*
PutExternalcontactsContactNote updates a note for an external contact
*/
func (a *Client) PutExternalcontactsContactNote(ctx context.Context, params *PutExternalcontactsContactNoteParams) (*PutExternalcontactsContactNoteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putExternalcontactsContactNote",
		Method:             "PUT",
		PathPattern:        "/api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutExternalcontactsContactNoteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutExternalcontactsContactNoteOK), nil

}

/*
PutExternalcontactsContactsSchema updates a schema
*/
func (a *Client) PutExternalcontactsContactsSchema(ctx context.Context, params *PutExternalcontactsContactsSchemaParams) (*PutExternalcontactsContactsSchemaOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putExternalcontactsContactsSchema",
		Method:             "PUT",
		PathPattern:        "/api/v2/externalcontacts/contacts/schemas/{schemaId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutExternalcontactsContactsSchemaReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutExternalcontactsContactsSchemaOK), nil

}

/*
PutExternalcontactsConversation associates disassociate an external contact with a conversation

To associate, supply a value for the externalContactId.  To disassociate, do not include the property at all.
*/
func (a *Client) PutExternalcontactsConversation(ctx context.Context, params *PutExternalcontactsConversationParams) (*PutExternalcontactsConversationAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putExternalcontactsConversation",
		Method:             "PUT",
		PathPattern:        "/api/v2/externalcontacts/conversations/{conversationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutExternalcontactsConversationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutExternalcontactsConversationAccepted), nil

}

/*
PutExternalcontactsOrganization updates an external organization
*/
func (a *Client) PutExternalcontactsOrganization(ctx context.Context, params *PutExternalcontactsOrganizationParams) (*PutExternalcontactsOrganizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putExternalcontactsOrganization",
		Method:             "PUT",
		PathPattern:        "/api/v2/externalcontacts/organizations/{externalOrganizationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutExternalcontactsOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutExternalcontactsOrganizationOK), nil

}

/*
PutExternalcontactsOrganizationNote updates a note for an external organization
*/
func (a *Client) PutExternalcontactsOrganizationNote(ctx context.Context, params *PutExternalcontactsOrganizationNoteParams) (*PutExternalcontactsOrganizationNoteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putExternalcontactsOrganizationNote",
		Method:             "PUT",
		PathPattern:        "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutExternalcontactsOrganizationNoteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutExternalcontactsOrganizationNoteOK), nil

}

/*
PutExternalcontactsOrganizationTrustorTrustorID links a trustor with an external organization
*/
func (a *Client) PutExternalcontactsOrganizationTrustorTrustorID(ctx context.Context, params *PutExternalcontactsOrganizationTrustorTrustorIDParams) (*PutExternalcontactsOrganizationTrustorTrustorIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putExternalcontactsOrganizationTrustorTrustorId",
		Method:             "PUT",
		PathPattern:        "/api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor/{trustorId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutExternalcontactsOrganizationTrustorTrustorIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutExternalcontactsOrganizationTrustorTrustorIDOK), nil

}

/*
PutExternalcontactsOrganizationsSchema updates a schema
*/
func (a *Client) PutExternalcontactsOrganizationsSchema(ctx context.Context, params *PutExternalcontactsOrganizationsSchemaParams) (*PutExternalcontactsOrganizationsSchemaOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putExternalcontactsOrganizationsSchema",
		Method:             "PUT",
		PathPattern:        "/api/v2/externalcontacts/organizations/schemas/{schemaId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutExternalcontactsOrganizationsSchemaReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutExternalcontactsOrganizationsSchemaOK), nil

}

/*
PutExternalcontactsRelationship updates a relationship
*/
func (a *Client) PutExternalcontactsRelationship(ctx context.Context, params *PutExternalcontactsRelationshipParams) (*PutExternalcontactsRelationshipOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putExternalcontactsRelationship",
		Method:             "PUT",
		PathPattern:        "/api/v2/externalcontacts/relationships/{relationshipId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutExternalcontactsRelationshipReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutExternalcontactsRelationshipOK), nil

}

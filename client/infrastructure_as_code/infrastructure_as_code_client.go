// Code generated by go-swagger; DO NOT EDIT.

package infrastructure_as_code

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the infrastructure as code client
type API interface {
	/*
	   GetInfrastructureascodeJob gets job status and results
	   Get the execution status of a submitted job, optionally including results and error details.
	*/
	GetInfrastructureascodeJob(ctx context.Context, params *GetInfrastructureascodeJobParams) (*GetInfrastructureascodeJobOK, *GetInfrastructureascodeJobAccepted, error)
	/*
	   GetInfrastructureascodeJobs gets job history
	   Get a history of submitted jobs, optionally including error messages.
	*/
	GetInfrastructureascodeJobs(ctx context.Context, params *GetInfrastructureascodeJobsParams) (*GetInfrastructureascodeJobsOK, error)
	/*
	   PostInfrastructureascodeJobs creates a job
	   Create and submit a job for remote execution or see job planning results.
	*/
	PostInfrastructureascodeJobs(ctx context.Context, params *PostInfrastructureascodeJobsParams) (*PostInfrastructureascodeJobsOK, *PostInfrastructureascodeJobsAccepted, error)
}

// New creates a new infrastructure as code API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for infrastructure as code API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetInfrastructureascodeJob gets job status and results

Get the execution status of a submitted job, optionally including results and error details.
*/
func (a *Client) GetInfrastructureascodeJob(ctx context.Context, params *GetInfrastructureascodeJobParams) (*GetInfrastructureascodeJobOK, *GetInfrastructureascodeJobAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInfrastructureascodeJob",
		Method:             "GET",
		PathPattern:        "/api/v2/infrastructureascode/jobs/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInfrastructureascodeJobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetInfrastructureascodeJobOK:
		return value, nil, nil
	case *GetInfrastructureascodeJobAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetInfrastructureascodeJobs gets job history

Get a history of submitted jobs, optionally including error messages.
*/
func (a *Client) GetInfrastructureascodeJobs(ctx context.Context, params *GetInfrastructureascodeJobsParams) (*GetInfrastructureascodeJobsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInfrastructureascodeJobs",
		Method:             "GET",
		PathPattern:        "/api/v2/infrastructureascode/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInfrastructureascodeJobsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInfrastructureascodeJobsOK), nil

}

/*
PostInfrastructureascodeJobs creates a job

Create and submit a job for remote execution or see job planning results.
*/
func (a *Client) PostInfrastructureascodeJobs(ctx context.Context, params *PostInfrastructureascodeJobsParams) (*PostInfrastructureascodeJobsOK, *PostInfrastructureascodeJobsAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postInfrastructureascodeJobs",
		Method:             "POST",
		PathPattern:        "/api/v2/infrastructureascode/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInfrastructureascodeJobsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostInfrastructureascodeJobsOK:
		return value, nil, nil
	case *PostInfrastructureascodeJobsAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

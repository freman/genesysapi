// Code generated by go-swagger; DO NOT EDIT.

package coaching

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchCoachingAppointmentAnnotationReader is a Reader for the PatchCoachingAppointmentAnnotation structure.
type PatchCoachingAppointmentAnnotationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchCoachingAppointmentAnnotationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchCoachingAppointmentAnnotationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchCoachingAppointmentAnnotationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchCoachingAppointmentAnnotationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchCoachingAppointmentAnnotationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchCoachingAppointmentAnnotationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchCoachingAppointmentAnnotationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchCoachingAppointmentAnnotationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchCoachingAppointmentAnnotationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchCoachingAppointmentAnnotationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchCoachingAppointmentAnnotationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchCoachingAppointmentAnnotationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchCoachingAppointmentAnnotationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchCoachingAppointmentAnnotationOK creates a PatchCoachingAppointmentAnnotationOK with default headers values
func NewPatchCoachingAppointmentAnnotationOK() *PatchCoachingAppointmentAnnotationOK {
	return &PatchCoachingAppointmentAnnotationOK{}
}

/*
PatchCoachingAppointmentAnnotationOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchCoachingAppointmentAnnotationOK struct {
	Payload *models.CoachingAnnotation
}

// IsSuccess returns true when this patch coaching appointment annotation o k response has a 2xx status code
func (o *PatchCoachingAppointmentAnnotationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch coaching appointment annotation o k response has a 3xx status code
func (o *PatchCoachingAppointmentAnnotationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch coaching appointment annotation o k response has a 4xx status code
func (o *PatchCoachingAppointmentAnnotationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch coaching appointment annotation o k response has a 5xx status code
func (o *PatchCoachingAppointmentAnnotationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch coaching appointment annotation o k response a status code equal to that given
func (o *PatchCoachingAppointmentAnnotationOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchCoachingAppointmentAnnotationOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationOK  %+v", 200, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationOK  %+v", 200, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationOK) GetPayload() *models.CoachingAnnotation {
	return o.Payload
}

func (o *PatchCoachingAppointmentAnnotationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoachingAnnotation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCoachingAppointmentAnnotationBadRequest creates a PatchCoachingAppointmentAnnotationBadRequest with default headers values
func NewPatchCoachingAppointmentAnnotationBadRequest() *PatchCoachingAppointmentAnnotationBadRequest {
	return &PatchCoachingAppointmentAnnotationBadRequest{}
}

/*
PatchCoachingAppointmentAnnotationBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchCoachingAppointmentAnnotationBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch coaching appointment annotation bad request response has a 2xx status code
func (o *PatchCoachingAppointmentAnnotationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch coaching appointment annotation bad request response has a 3xx status code
func (o *PatchCoachingAppointmentAnnotationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch coaching appointment annotation bad request response has a 4xx status code
func (o *PatchCoachingAppointmentAnnotationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch coaching appointment annotation bad request response has a 5xx status code
func (o *PatchCoachingAppointmentAnnotationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch coaching appointment annotation bad request response a status code equal to that given
func (o *PatchCoachingAppointmentAnnotationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchCoachingAppointmentAnnotationBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchCoachingAppointmentAnnotationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCoachingAppointmentAnnotationUnauthorized creates a PatchCoachingAppointmentAnnotationUnauthorized with default headers values
func NewPatchCoachingAppointmentAnnotationUnauthorized() *PatchCoachingAppointmentAnnotationUnauthorized {
	return &PatchCoachingAppointmentAnnotationUnauthorized{}
}

/*
PatchCoachingAppointmentAnnotationUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchCoachingAppointmentAnnotationUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch coaching appointment annotation unauthorized response has a 2xx status code
func (o *PatchCoachingAppointmentAnnotationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch coaching appointment annotation unauthorized response has a 3xx status code
func (o *PatchCoachingAppointmentAnnotationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch coaching appointment annotation unauthorized response has a 4xx status code
func (o *PatchCoachingAppointmentAnnotationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch coaching appointment annotation unauthorized response has a 5xx status code
func (o *PatchCoachingAppointmentAnnotationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch coaching appointment annotation unauthorized response a status code equal to that given
func (o *PatchCoachingAppointmentAnnotationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchCoachingAppointmentAnnotationUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchCoachingAppointmentAnnotationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCoachingAppointmentAnnotationForbidden creates a PatchCoachingAppointmentAnnotationForbidden with default headers values
func NewPatchCoachingAppointmentAnnotationForbidden() *PatchCoachingAppointmentAnnotationForbidden {
	return &PatchCoachingAppointmentAnnotationForbidden{}
}

/*
PatchCoachingAppointmentAnnotationForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchCoachingAppointmentAnnotationForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch coaching appointment annotation forbidden response has a 2xx status code
func (o *PatchCoachingAppointmentAnnotationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch coaching appointment annotation forbidden response has a 3xx status code
func (o *PatchCoachingAppointmentAnnotationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch coaching appointment annotation forbidden response has a 4xx status code
func (o *PatchCoachingAppointmentAnnotationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch coaching appointment annotation forbidden response has a 5xx status code
func (o *PatchCoachingAppointmentAnnotationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch coaching appointment annotation forbidden response a status code equal to that given
func (o *PatchCoachingAppointmentAnnotationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchCoachingAppointmentAnnotationForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationForbidden  %+v", 403, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationForbidden  %+v", 403, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchCoachingAppointmentAnnotationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCoachingAppointmentAnnotationNotFound creates a PatchCoachingAppointmentAnnotationNotFound with default headers values
func NewPatchCoachingAppointmentAnnotationNotFound() *PatchCoachingAppointmentAnnotationNotFound {
	return &PatchCoachingAppointmentAnnotationNotFound{}
}

/*
PatchCoachingAppointmentAnnotationNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchCoachingAppointmentAnnotationNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch coaching appointment annotation not found response has a 2xx status code
func (o *PatchCoachingAppointmentAnnotationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch coaching appointment annotation not found response has a 3xx status code
func (o *PatchCoachingAppointmentAnnotationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch coaching appointment annotation not found response has a 4xx status code
func (o *PatchCoachingAppointmentAnnotationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch coaching appointment annotation not found response has a 5xx status code
func (o *PatchCoachingAppointmentAnnotationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch coaching appointment annotation not found response a status code equal to that given
func (o *PatchCoachingAppointmentAnnotationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchCoachingAppointmentAnnotationNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationNotFound  %+v", 404, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationNotFound  %+v", 404, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchCoachingAppointmentAnnotationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCoachingAppointmentAnnotationRequestTimeout creates a PatchCoachingAppointmentAnnotationRequestTimeout with default headers values
func NewPatchCoachingAppointmentAnnotationRequestTimeout() *PatchCoachingAppointmentAnnotationRequestTimeout {
	return &PatchCoachingAppointmentAnnotationRequestTimeout{}
}

/*
PatchCoachingAppointmentAnnotationRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchCoachingAppointmentAnnotationRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch coaching appointment annotation request timeout response has a 2xx status code
func (o *PatchCoachingAppointmentAnnotationRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch coaching appointment annotation request timeout response has a 3xx status code
func (o *PatchCoachingAppointmentAnnotationRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch coaching appointment annotation request timeout response has a 4xx status code
func (o *PatchCoachingAppointmentAnnotationRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch coaching appointment annotation request timeout response has a 5xx status code
func (o *PatchCoachingAppointmentAnnotationRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch coaching appointment annotation request timeout response a status code equal to that given
func (o *PatchCoachingAppointmentAnnotationRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchCoachingAppointmentAnnotationRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchCoachingAppointmentAnnotationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCoachingAppointmentAnnotationRequestEntityTooLarge creates a PatchCoachingAppointmentAnnotationRequestEntityTooLarge with default headers values
func NewPatchCoachingAppointmentAnnotationRequestEntityTooLarge() *PatchCoachingAppointmentAnnotationRequestEntityTooLarge {
	return &PatchCoachingAppointmentAnnotationRequestEntityTooLarge{}
}

/*
PatchCoachingAppointmentAnnotationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchCoachingAppointmentAnnotationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch coaching appointment annotation request entity too large response has a 2xx status code
func (o *PatchCoachingAppointmentAnnotationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch coaching appointment annotation request entity too large response has a 3xx status code
func (o *PatchCoachingAppointmentAnnotationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch coaching appointment annotation request entity too large response has a 4xx status code
func (o *PatchCoachingAppointmentAnnotationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch coaching appointment annotation request entity too large response has a 5xx status code
func (o *PatchCoachingAppointmentAnnotationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch coaching appointment annotation request entity too large response a status code equal to that given
func (o *PatchCoachingAppointmentAnnotationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchCoachingAppointmentAnnotationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchCoachingAppointmentAnnotationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCoachingAppointmentAnnotationUnsupportedMediaType creates a PatchCoachingAppointmentAnnotationUnsupportedMediaType with default headers values
func NewPatchCoachingAppointmentAnnotationUnsupportedMediaType() *PatchCoachingAppointmentAnnotationUnsupportedMediaType {
	return &PatchCoachingAppointmentAnnotationUnsupportedMediaType{}
}

/*
PatchCoachingAppointmentAnnotationUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchCoachingAppointmentAnnotationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch coaching appointment annotation unsupported media type response has a 2xx status code
func (o *PatchCoachingAppointmentAnnotationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch coaching appointment annotation unsupported media type response has a 3xx status code
func (o *PatchCoachingAppointmentAnnotationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch coaching appointment annotation unsupported media type response has a 4xx status code
func (o *PatchCoachingAppointmentAnnotationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch coaching appointment annotation unsupported media type response has a 5xx status code
func (o *PatchCoachingAppointmentAnnotationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch coaching appointment annotation unsupported media type response a status code equal to that given
func (o *PatchCoachingAppointmentAnnotationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchCoachingAppointmentAnnotationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchCoachingAppointmentAnnotationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCoachingAppointmentAnnotationTooManyRequests creates a PatchCoachingAppointmentAnnotationTooManyRequests with default headers values
func NewPatchCoachingAppointmentAnnotationTooManyRequests() *PatchCoachingAppointmentAnnotationTooManyRequests {
	return &PatchCoachingAppointmentAnnotationTooManyRequests{}
}

/*
PatchCoachingAppointmentAnnotationTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchCoachingAppointmentAnnotationTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch coaching appointment annotation too many requests response has a 2xx status code
func (o *PatchCoachingAppointmentAnnotationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch coaching appointment annotation too many requests response has a 3xx status code
func (o *PatchCoachingAppointmentAnnotationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch coaching appointment annotation too many requests response has a 4xx status code
func (o *PatchCoachingAppointmentAnnotationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch coaching appointment annotation too many requests response has a 5xx status code
func (o *PatchCoachingAppointmentAnnotationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch coaching appointment annotation too many requests response a status code equal to that given
func (o *PatchCoachingAppointmentAnnotationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchCoachingAppointmentAnnotationTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchCoachingAppointmentAnnotationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCoachingAppointmentAnnotationInternalServerError creates a PatchCoachingAppointmentAnnotationInternalServerError with default headers values
func NewPatchCoachingAppointmentAnnotationInternalServerError() *PatchCoachingAppointmentAnnotationInternalServerError {
	return &PatchCoachingAppointmentAnnotationInternalServerError{}
}

/*
PatchCoachingAppointmentAnnotationInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchCoachingAppointmentAnnotationInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch coaching appointment annotation internal server error response has a 2xx status code
func (o *PatchCoachingAppointmentAnnotationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch coaching appointment annotation internal server error response has a 3xx status code
func (o *PatchCoachingAppointmentAnnotationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch coaching appointment annotation internal server error response has a 4xx status code
func (o *PatchCoachingAppointmentAnnotationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch coaching appointment annotation internal server error response has a 5xx status code
func (o *PatchCoachingAppointmentAnnotationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch coaching appointment annotation internal server error response a status code equal to that given
func (o *PatchCoachingAppointmentAnnotationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchCoachingAppointmentAnnotationInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchCoachingAppointmentAnnotationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCoachingAppointmentAnnotationServiceUnavailable creates a PatchCoachingAppointmentAnnotationServiceUnavailable with default headers values
func NewPatchCoachingAppointmentAnnotationServiceUnavailable() *PatchCoachingAppointmentAnnotationServiceUnavailable {
	return &PatchCoachingAppointmentAnnotationServiceUnavailable{}
}

/*
PatchCoachingAppointmentAnnotationServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchCoachingAppointmentAnnotationServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch coaching appointment annotation service unavailable response has a 2xx status code
func (o *PatchCoachingAppointmentAnnotationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch coaching appointment annotation service unavailable response has a 3xx status code
func (o *PatchCoachingAppointmentAnnotationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch coaching appointment annotation service unavailable response has a 4xx status code
func (o *PatchCoachingAppointmentAnnotationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch coaching appointment annotation service unavailable response has a 5xx status code
func (o *PatchCoachingAppointmentAnnotationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch coaching appointment annotation service unavailable response a status code equal to that given
func (o *PatchCoachingAppointmentAnnotationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchCoachingAppointmentAnnotationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchCoachingAppointmentAnnotationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCoachingAppointmentAnnotationGatewayTimeout creates a PatchCoachingAppointmentAnnotationGatewayTimeout with default headers values
func NewPatchCoachingAppointmentAnnotationGatewayTimeout() *PatchCoachingAppointmentAnnotationGatewayTimeout {
	return &PatchCoachingAppointmentAnnotationGatewayTimeout{}
}

/*
PatchCoachingAppointmentAnnotationGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchCoachingAppointmentAnnotationGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch coaching appointment annotation gateway timeout response has a 2xx status code
func (o *PatchCoachingAppointmentAnnotationGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch coaching appointment annotation gateway timeout response has a 3xx status code
func (o *PatchCoachingAppointmentAnnotationGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch coaching appointment annotation gateway timeout response has a 4xx status code
func (o *PatchCoachingAppointmentAnnotationGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch coaching appointment annotation gateway timeout response has a 5xx status code
func (o *PatchCoachingAppointmentAnnotationGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch coaching appointment annotation gateway timeout response a status code equal to that given
func (o *PatchCoachingAppointmentAnnotationGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchCoachingAppointmentAnnotationGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}][%d] patchCoachingAppointmentAnnotationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchCoachingAppointmentAnnotationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchCoachingAppointmentAnnotationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package coaching

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// NewPatchCoachingAppointmentAnnotationParams creates a new PatchCoachingAppointmentAnnotationParams object
// with the default values initialized.
func NewPatchCoachingAppointmentAnnotationParams() *PatchCoachingAppointmentAnnotationParams {
	var ()
	return &PatchCoachingAppointmentAnnotationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchCoachingAppointmentAnnotationParamsWithTimeout creates a new PatchCoachingAppointmentAnnotationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchCoachingAppointmentAnnotationParamsWithTimeout(timeout time.Duration) *PatchCoachingAppointmentAnnotationParams {
	var ()
	return &PatchCoachingAppointmentAnnotationParams{

		timeout: timeout,
	}
}

// NewPatchCoachingAppointmentAnnotationParamsWithContext creates a new PatchCoachingAppointmentAnnotationParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchCoachingAppointmentAnnotationParamsWithContext(ctx context.Context) *PatchCoachingAppointmentAnnotationParams {
	var ()
	return &PatchCoachingAppointmentAnnotationParams{

		Context: ctx,
	}
}

// NewPatchCoachingAppointmentAnnotationParamsWithHTTPClient creates a new PatchCoachingAppointmentAnnotationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchCoachingAppointmentAnnotationParamsWithHTTPClient(client *http.Client) *PatchCoachingAppointmentAnnotationParams {
	var ()
	return &PatchCoachingAppointmentAnnotationParams{
		HTTPClient: client,
	}
}

/*PatchCoachingAppointmentAnnotationParams contains all the parameters to send to the API endpoint
for the patch coaching appointment annotation operation typically these are written to a http.Request
*/
type PatchCoachingAppointmentAnnotationParams struct {

	/*AnnotationID
	  The ID of the annotation.

	*/
	AnnotationID string
	/*AppointmentID
	  The ID of the coaching appointment.

	*/
	AppointmentID string
	/*Body
	  The new version of the annotation

	*/
	Body *models.CoachingAnnotation

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch coaching appointment annotation params
func (o *PatchCoachingAppointmentAnnotationParams) WithTimeout(timeout time.Duration) *PatchCoachingAppointmentAnnotationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch coaching appointment annotation params
func (o *PatchCoachingAppointmentAnnotationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch coaching appointment annotation params
func (o *PatchCoachingAppointmentAnnotationParams) WithContext(ctx context.Context) *PatchCoachingAppointmentAnnotationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch coaching appointment annotation params
func (o *PatchCoachingAppointmentAnnotationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch coaching appointment annotation params
func (o *PatchCoachingAppointmentAnnotationParams) WithHTTPClient(client *http.Client) *PatchCoachingAppointmentAnnotationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch coaching appointment annotation params
func (o *PatchCoachingAppointmentAnnotationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAnnotationID adds the annotationID to the patch coaching appointment annotation params
func (o *PatchCoachingAppointmentAnnotationParams) WithAnnotationID(annotationID string) *PatchCoachingAppointmentAnnotationParams {
	o.SetAnnotationID(annotationID)
	return o
}

// SetAnnotationID adds the annotationId to the patch coaching appointment annotation params
func (o *PatchCoachingAppointmentAnnotationParams) SetAnnotationID(annotationID string) {
	o.AnnotationID = annotationID
}

// WithAppointmentID adds the appointmentID to the patch coaching appointment annotation params
func (o *PatchCoachingAppointmentAnnotationParams) WithAppointmentID(appointmentID string) *PatchCoachingAppointmentAnnotationParams {
	o.SetAppointmentID(appointmentID)
	return o
}

// SetAppointmentID adds the appointmentId to the patch coaching appointment annotation params
func (o *PatchCoachingAppointmentAnnotationParams) SetAppointmentID(appointmentID string) {
	o.AppointmentID = appointmentID
}

// WithBody adds the body to the patch coaching appointment annotation params
func (o *PatchCoachingAppointmentAnnotationParams) WithBody(body *models.CoachingAnnotation) *PatchCoachingAppointmentAnnotationParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch coaching appointment annotation params
func (o *PatchCoachingAppointmentAnnotationParams) SetBody(body *models.CoachingAnnotation) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *PatchCoachingAppointmentAnnotationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param annotationId
	if err := r.SetPathParam("annotationId", o.AnnotationID); err != nil {
		return err
	}

	// path param appointmentId
	if err := r.SetPathParam("appointmentId", o.AppointmentID); err != nil {
		return err
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package coaching

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteCoachingAppointmentParams creates a new DeleteCoachingAppointmentParams object
// with the default values initialized.
func NewDeleteCoachingAppointmentParams() *DeleteCoachingAppointmentParams {
	var ()
	return &DeleteCoachingAppointmentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteCoachingAppointmentParamsWithTimeout creates a new DeleteCoachingAppointmentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteCoachingAppointmentParamsWithTimeout(timeout time.Duration) *DeleteCoachingAppointmentParams {
	var ()
	return &DeleteCoachingAppointmentParams{

		timeout: timeout,
	}
}

// NewDeleteCoachingAppointmentParamsWithContext creates a new DeleteCoachingAppointmentParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteCoachingAppointmentParamsWithContext(ctx context.Context) *DeleteCoachingAppointmentParams {
	var ()
	return &DeleteCoachingAppointmentParams{

		Context: ctx,
	}
}

// NewDeleteCoachingAppointmentParamsWithHTTPClient creates a new DeleteCoachingAppointmentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteCoachingAppointmentParamsWithHTTPClient(client *http.Client) *DeleteCoachingAppointmentParams {
	var ()
	return &DeleteCoachingAppointmentParams{
		HTTPClient: client,
	}
}

/*DeleteCoachingAppointmentParams contains all the parameters to send to the API endpoint
for the delete coaching appointment operation typically these are written to a http.Request
*/
type DeleteCoachingAppointmentParams struct {

	/*AppointmentID
	  The ID of the coaching appointment.

	*/
	AppointmentID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete coaching appointment params
func (o *DeleteCoachingAppointmentParams) WithTimeout(timeout time.Duration) *DeleteCoachingAppointmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete coaching appointment params
func (o *DeleteCoachingAppointmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete coaching appointment params
func (o *DeleteCoachingAppointmentParams) WithContext(ctx context.Context) *DeleteCoachingAppointmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete coaching appointment params
func (o *DeleteCoachingAppointmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete coaching appointment params
func (o *DeleteCoachingAppointmentParams) WithHTTPClient(client *http.Client) *DeleteCoachingAppointmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete coaching appointment params
func (o *DeleteCoachingAppointmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppointmentID adds the appointmentID to the delete coaching appointment params
func (o *DeleteCoachingAppointmentParams) WithAppointmentID(appointmentID string) *DeleteCoachingAppointmentParams {
	o.SetAppointmentID(appointmentID)
	return o
}

// SetAppointmentID adds the appointmentId to the delete coaching appointment params
func (o *DeleteCoachingAppointmentParams) SetAppointmentID(appointmentID string) {
	o.AppointmentID = appointmentID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteCoachingAppointmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param appointmentId
	if err := r.SetPathParam("appointmentId", o.AppointmentID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

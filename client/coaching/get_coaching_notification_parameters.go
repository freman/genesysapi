// Code generated by go-swagger; DO NOT EDIT.

package coaching

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCoachingNotificationParams creates a new GetCoachingNotificationParams object
// with the default values initialized.
func NewGetCoachingNotificationParams() *GetCoachingNotificationParams {
	var ()
	return &GetCoachingNotificationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCoachingNotificationParamsWithTimeout creates a new GetCoachingNotificationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCoachingNotificationParamsWithTimeout(timeout time.Duration) *GetCoachingNotificationParams {
	var ()
	return &GetCoachingNotificationParams{

		timeout: timeout,
	}
}

// NewGetCoachingNotificationParamsWithContext creates a new GetCoachingNotificationParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCoachingNotificationParamsWithContext(ctx context.Context) *GetCoachingNotificationParams {
	var ()
	return &GetCoachingNotificationParams{

		Context: ctx,
	}
}

// NewGetCoachingNotificationParamsWithHTTPClient creates a new GetCoachingNotificationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCoachingNotificationParamsWithHTTPClient(client *http.Client) *GetCoachingNotificationParams {
	var ()
	return &GetCoachingNotificationParams{
		HTTPClient: client,
	}
}

/*GetCoachingNotificationParams contains all the parameters to send to the API endpoint
for the get coaching notification operation typically these are written to a http.Request
*/
type GetCoachingNotificationParams struct {

	/*Expand
	  Indicates a field in the response which should be expanded.

	*/
	Expand []string
	/*NotificationID
	  The ID of the notification.

	*/
	NotificationID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get coaching notification params
func (o *GetCoachingNotificationParams) WithTimeout(timeout time.Duration) *GetCoachingNotificationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get coaching notification params
func (o *GetCoachingNotificationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get coaching notification params
func (o *GetCoachingNotificationParams) WithContext(ctx context.Context) *GetCoachingNotificationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get coaching notification params
func (o *GetCoachingNotificationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get coaching notification params
func (o *GetCoachingNotificationParams) WithHTTPClient(client *http.Client) *GetCoachingNotificationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get coaching notification params
func (o *GetCoachingNotificationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExpand adds the expand to the get coaching notification params
func (o *GetCoachingNotificationParams) WithExpand(expand []string) *GetCoachingNotificationParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get coaching notification params
func (o *GetCoachingNotificationParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithNotificationID adds the notificationID to the get coaching notification params
func (o *GetCoachingNotificationParams) WithNotificationID(notificationID string) *GetCoachingNotificationParams {
	o.SetNotificationID(notificationID)
	return o
}

// SetNotificationID adds the notificationId to the get coaching notification params
func (o *GetCoachingNotificationParams) SetNotificationID(notificationID string) {
	o.NotificationID = notificationID
}

// WriteToRequest writes these params to a swagger request
func (o *GetCoachingNotificationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesExpand := o.Expand

	joinedExpand := swag.JoinByFormat(valuesExpand, "multi")
	// query array param expand
	if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
		return err
	}

	// path param notificationId
	if err := r.SetPathParam("notificationId", o.NotificationID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

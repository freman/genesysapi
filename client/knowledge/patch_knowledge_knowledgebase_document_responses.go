// Code generated by go-swagger; DO NOT EDIT.

package knowledge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchKnowledgeKnowledgebaseDocumentReader is a Reader for the PatchKnowledgeKnowledgebaseDocument structure.
type PatchKnowledgeKnowledgebaseDocumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchKnowledgeKnowledgebaseDocumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchKnowledgeKnowledgebaseDocumentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchKnowledgeKnowledgebaseDocumentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchKnowledgeKnowledgebaseDocumentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchKnowledgeKnowledgebaseDocumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchKnowledgeKnowledgebaseDocumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchKnowledgeKnowledgebaseDocumentRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchKnowledgeKnowledgebaseDocumentRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchKnowledgeKnowledgebaseDocumentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchKnowledgeKnowledgebaseDocumentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchKnowledgeKnowledgebaseDocumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchKnowledgeKnowledgebaseDocumentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchKnowledgeKnowledgebaseDocumentGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchKnowledgeKnowledgebaseDocumentOK creates a PatchKnowledgeKnowledgebaseDocumentOK with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentOK() *PatchKnowledgeKnowledgebaseDocumentOK {
	return &PatchKnowledgeKnowledgebaseDocumentOK{}
}

/*PatchKnowledgeKnowledgebaseDocumentOK handles this case with default header values.

successful operation
*/
type PatchKnowledgeKnowledgebaseDocumentOK struct {
	Payload *models.KnowledgeDocumentResponse
}

func (o *PatchKnowledgeKnowledgebaseDocumentOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}][%d] patchKnowledgeKnowledgebaseDocumentOK  %+v", 200, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentOK) GetPayload() *models.KnowledgeDocumentResponse {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KnowledgeDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentBadRequest creates a PatchKnowledgeKnowledgebaseDocumentBadRequest with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentBadRequest() *PatchKnowledgeKnowledgebaseDocumentBadRequest {
	return &PatchKnowledgeKnowledgebaseDocumentBadRequest{}
}

/*PatchKnowledgeKnowledgebaseDocumentBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchKnowledgeKnowledgebaseDocumentBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchKnowledgeKnowledgebaseDocumentBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}][%d] patchKnowledgeKnowledgebaseDocumentBadRequest  %+v", 400, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentUnauthorized creates a PatchKnowledgeKnowledgebaseDocumentUnauthorized with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentUnauthorized() *PatchKnowledgeKnowledgebaseDocumentUnauthorized {
	return &PatchKnowledgeKnowledgebaseDocumentUnauthorized{}
}

/*PatchKnowledgeKnowledgebaseDocumentUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchKnowledgeKnowledgebaseDocumentUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchKnowledgeKnowledgebaseDocumentUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}][%d] patchKnowledgeKnowledgebaseDocumentUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentForbidden creates a PatchKnowledgeKnowledgebaseDocumentForbidden with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentForbidden() *PatchKnowledgeKnowledgebaseDocumentForbidden {
	return &PatchKnowledgeKnowledgebaseDocumentForbidden{}
}

/*PatchKnowledgeKnowledgebaseDocumentForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchKnowledgeKnowledgebaseDocumentForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchKnowledgeKnowledgebaseDocumentForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}][%d] patchKnowledgeKnowledgebaseDocumentForbidden  %+v", 403, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentNotFound creates a PatchKnowledgeKnowledgebaseDocumentNotFound with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentNotFound() *PatchKnowledgeKnowledgebaseDocumentNotFound {
	return &PatchKnowledgeKnowledgebaseDocumentNotFound{}
}

/*PatchKnowledgeKnowledgebaseDocumentNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchKnowledgeKnowledgebaseDocumentNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchKnowledgeKnowledgebaseDocumentNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}][%d] patchKnowledgeKnowledgebaseDocumentNotFound  %+v", 404, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentRequestTimeout creates a PatchKnowledgeKnowledgebaseDocumentRequestTimeout with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentRequestTimeout() *PatchKnowledgeKnowledgebaseDocumentRequestTimeout {
	return &PatchKnowledgeKnowledgebaseDocumentRequestTimeout{}
}

/*PatchKnowledgeKnowledgebaseDocumentRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchKnowledgeKnowledgebaseDocumentRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchKnowledgeKnowledgebaseDocumentRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}][%d] patchKnowledgeKnowledgebaseDocumentRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentRequestEntityTooLarge creates a PatchKnowledgeKnowledgebaseDocumentRequestEntityTooLarge with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentRequestEntityTooLarge() *PatchKnowledgeKnowledgebaseDocumentRequestEntityTooLarge {
	return &PatchKnowledgeKnowledgebaseDocumentRequestEntityTooLarge{}
}

/*PatchKnowledgeKnowledgebaseDocumentRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchKnowledgeKnowledgebaseDocumentRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchKnowledgeKnowledgebaseDocumentRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}][%d] patchKnowledgeKnowledgebaseDocumentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentUnsupportedMediaType creates a PatchKnowledgeKnowledgebaseDocumentUnsupportedMediaType with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentUnsupportedMediaType() *PatchKnowledgeKnowledgebaseDocumentUnsupportedMediaType {
	return &PatchKnowledgeKnowledgebaseDocumentUnsupportedMediaType{}
}

/*PatchKnowledgeKnowledgebaseDocumentUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchKnowledgeKnowledgebaseDocumentUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchKnowledgeKnowledgebaseDocumentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}][%d] patchKnowledgeKnowledgebaseDocumentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentTooManyRequests creates a PatchKnowledgeKnowledgebaseDocumentTooManyRequests with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentTooManyRequests() *PatchKnowledgeKnowledgebaseDocumentTooManyRequests {
	return &PatchKnowledgeKnowledgebaseDocumentTooManyRequests{}
}

/*PatchKnowledgeKnowledgebaseDocumentTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchKnowledgeKnowledgebaseDocumentTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchKnowledgeKnowledgebaseDocumentTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}][%d] patchKnowledgeKnowledgebaseDocumentTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentInternalServerError creates a PatchKnowledgeKnowledgebaseDocumentInternalServerError with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentInternalServerError() *PatchKnowledgeKnowledgebaseDocumentInternalServerError {
	return &PatchKnowledgeKnowledgebaseDocumentInternalServerError{}
}

/*PatchKnowledgeKnowledgebaseDocumentInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchKnowledgeKnowledgebaseDocumentInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchKnowledgeKnowledgebaseDocumentInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}][%d] patchKnowledgeKnowledgebaseDocumentInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentServiceUnavailable creates a PatchKnowledgeKnowledgebaseDocumentServiceUnavailable with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentServiceUnavailable() *PatchKnowledgeKnowledgebaseDocumentServiceUnavailable {
	return &PatchKnowledgeKnowledgebaseDocumentServiceUnavailable{}
}

/*PatchKnowledgeKnowledgebaseDocumentServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchKnowledgeKnowledgebaseDocumentServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchKnowledgeKnowledgebaseDocumentServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}][%d] patchKnowledgeKnowledgebaseDocumentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentGatewayTimeout creates a PatchKnowledgeKnowledgebaseDocumentGatewayTimeout with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentGatewayTimeout() *PatchKnowledgeKnowledgebaseDocumentGatewayTimeout {
	return &PatchKnowledgeKnowledgebaseDocumentGatewayTimeout{}
}

/*PatchKnowledgeKnowledgebaseDocumentGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchKnowledgeKnowledgebaseDocumentGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchKnowledgeKnowledgebaseDocumentGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}][%d] patchKnowledgeKnowledgebaseDocumentGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

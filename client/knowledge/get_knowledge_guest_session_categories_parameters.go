// Code generated by go-swagger; DO NOT EDIT.

package knowledge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetKnowledgeGuestSessionCategoriesParams creates a new GetKnowledgeGuestSessionCategoriesParams object
// with the default values initialized.
func NewGetKnowledgeGuestSessionCategoriesParams() *GetKnowledgeGuestSessionCategoriesParams {
	var (
		sortByDefault = string("Name")
	)
	return &GetKnowledgeGuestSessionCategoriesParams{
		SortBy: &sortByDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetKnowledgeGuestSessionCategoriesParamsWithTimeout creates a new GetKnowledgeGuestSessionCategoriesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetKnowledgeGuestSessionCategoriesParamsWithTimeout(timeout time.Duration) *GetKnowledgeGuestSessionCategoriesParams {
	var (
		sortByDefault = string("Name")
	)
	return &GetKnowledgeGuestSessionCategoriesParams{
		SortBy: &sortByDefault,

		timeout: timeout,
	}
}

// NewGetKnowledgeGuestSessionCategoriesParamsWithContext creates a new GetKnowledgeGuestSessionCategoriesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetKnowledgeGuestSessionCategoriesParamsWithContext(ctx context.Context) *GetKnowledgeGuestSessionCategoriesParams {
	var (
		sortByDefault = string("Name")
	)
	return &GetKnowledgeGuestSessionCategoriesParams{
		SortBy: &sortByDefault,

		Context: ctx,
	}
}

// NewGetKnowledgeGuestSessionCategoriesParamsWithHTTPClient creates a new GetKnowledgeGuestSessionCategoriesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetKnowledgeGuestSessionCategoriesParamsWithHTTPClient(client *http.Client) *GetKnowledgeGuestSessionCategoriesParams {
	var (
		sortByDefault = string("Name")
	)
	return &GetKnowledgeGuestSessionCategoriesParams{
		SortBy:     &sortByDefault,
		HTTPClient: client,
	}
}

/*GetKnowledgeGuestSessionCategoriesParams contains all the parameters to send to the API endpoint
for the get knowledge guest session categories operation typically these are written to a http.Request
*/
type GetKnowledgeGuestSessionCategoriesParams struct {

	/*After
	  The cursor that points to the end of the set of entities that has been returned.

	*/
	After *string
	/*Before
	  The cursor that points to the start of the set of entities that has been returned.

	*/
	Before *string
	/*Expand
	  The specified entity attribute will be filled. Supported value:"Ancestors": every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors.

	*/
	Expand *string
	/*IncludeDocumentCount
	  If specified, retrieves the number of documents related to category.

	*/
	IncludeDocumentCount *bool
	/*IsRoot
	  If specified, retrieves only the root categories.

	*/
	IsRoot *bool
	/*Name
	  Filter to return the categories that starts with the given category name.

	*/
	Name *string
	/*PageSize
	  Number of entities to return. Maximum of 200.

	*/
	PageSize *string
	/*ParentID
	  If specified, retrieves the children categories by parent category ID.

	*/
	ParentID *string
	/*SessionID
	  Knowledge guest session ID.

	*/
	SessionID string
	/*SortBy
	  Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically

	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) WithTimeout(timeout time.Duration) *GetKnowledgeGuestSessionCategoriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) WithContext(ctx context.Context) *GetKnowledgeGuestSessionCategoriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) WithHTTPClient(client *http.Client) *GetKnowledgeGuestSessionCategoriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) WithAfter(after *string) *GetKnowledgeGuestSessionCategoriesParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) SetAfter(after *string) {
	o.After = after
}

// WithBefore adds the before to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) WithBefore(before *string) *GetKnowledgeGuestSessionCategoriesParams {
	o.SetBefore(before)
	return o
}

// SetBefore adds the before to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) SetBefore(before *string) {
	o.Before = before
}

// WithExpand adds the expand to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) WithExpand(expand *string) *GetKnowledgeGuestSessionCategoriesParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) SetExpand(expand *string) {
	o.Expand = expand
}

// WithIncludeDocumentCount adds the includeDocumentCount to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) WithIncludeDocumentCount(includeDocumentCount *bool) *GetKnowledgeGuestSessionCategoriesParams {
	o.SetIncludeDocumentCount(includeDocumentCount)
	return o
}

// SetIncludeDocumentCount adds the includeDocumentCount to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) SetIncludeDocumentCount(includeDocumentCount *bool) {
	o.IncludeDocumentCount = includeDocumentCount
}

// WithIsRoot adds the isRoot to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) WithIsRoot(isRoot *bool) *GetKnowledgeGuestSessionCategoriesParams {
	o.SetIsRoot(isRoot)
	return o
}

// SetIsRoot adds the isRoot to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) SetIsRoot(isRoot *bool) {
	o.IsRoot = isRoot
}

// WithName adds the name to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) WithName(name *string) *GetKnowledgeGuestSessionCategoriesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) SetName(name *string) {
	o.Name = name
}

// WithPageSize adds the pageSize to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) WithPageSize(pageSize *string) *GetKnowledgeGuestSessionCategoriesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WithParentID adds the parentID to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) WithParentID(parentID *string) *GetKnowledgeGuestSessionCategoriesParams {
	o.SetParentID(parentID)
	return o
}

// SetParentID adds the parentId to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) SetParentID(parentID *string) {
	o.ParentID = parentID
}

// WithSessionID adds the sessionID to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) WithSessionID(sessionID string) *GetKnowledgeGuestSessionCategoriesParams {
	o.SetSessionID(sessionID)
	return o
}

// SetSessionID adds the sessionId to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) SetSessionID(sessionID string) {
	o.SessionID = sessionID
}

// WithSortBy adds the sortBy to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) WithSortBy(sortBy *string) *GetKnowledgeGuestSessionCategoriesParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get knowledge guest session categories params
func (o *GetKnowledgeGuestSessionCategoriesParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *GetKnowledgeGuestSessionCategoriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter string
		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter
		if qAfter != "" {
			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}

	}

	if o.Before != nil {

		// query param before
		var qrBefore string
		if o.Before != nil {
			qrBefore = *o.Before
		}
		qBefore := qrBefore
		if qBefore != "" {
			if err := r.SetQueryParam("before", qBefore); err != nil {
				return err
			}
		}

	}

	if o.Expand != nil {

		// query param expand
		var qrExpand string
		if o.Expand != nil {
			qrExpand = *o.Expand
		}
		qExpand := qrExpand
		if qExpand != "" {
			if err := r.SetQueryParam("expand", qExpand); err != nil {
				return err
			}
		}

	}

	if o.IncludeDocumentCount != nil {

		// query param includeDocumentCount
		var qrIncludeDocumentCount bool
		if o.IncludeDocumentCount != nil {
			qrIncludeDocumentCount = *o.IncludeDocumentCount
		}
		qIncludeDocumentCount := swag.FormatBool(qrIncludeDocumentCount)
		if qIncludeDocumentCount != "" {
			if err := r.SetQueryParam("includeDocumentCount", qIncludeDocumentCount); err != nil {
				return err
			}
		}

	}

	if o.IsRoot != nil {

		// query param isRoot
		var qrIsRoot bool
		if o.IsRoot != nil {
			qrIsRoot = *o.IsRoot
		}
		qIsRoot := swag.FormatBool(qrIsRoot)
		if qIsRoot != "" {
			if err := r.SetQueryParam("isRoot", qIsRoot); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize string
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.ParentID != nil {

		// query param parentId
		var qrParentID string
		if o.ParentID != nil {
			qrParentID = *o.ParentID
		}
		qParentID := qrParentID
		if qParentID != "" {
			if err := r.SetQueryParam("parentId", qParentID); err != nil {
				return err
			}
		}

	}

	// path param sessionId
	if err := r.SetPathParam("sessionId", o.SessionID); err != nil {
		return err
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

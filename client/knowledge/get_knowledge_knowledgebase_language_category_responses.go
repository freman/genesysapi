// Code generated by go-swagger; DO NOT EDIT.

package knowledge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetKnowledgeKnowledgebaseLanguageCategoryReader is a Reader for the GetKnowledgeKnowledgebaseLanguageCategory structure.
type GetKnowledgeKnowledgebaseLanguageCategoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetKnowledgeKnowledgebaseLanguageCategoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetKnowledgeKnowledgebaseLanguageCategoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetKnowledgeKnowledgebaseLanguageCategoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetKnowledgeKnowledgebaseLanguageCategoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetKnowledgeKnowledgebaseLanguageCategoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetKnowledgeKnowledgebaseLanguageCategoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetKnowledgeKnowledgebaseLanguageCategoryRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetKnowledgeKnowledgebaseLanguageCategoryUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetKnowledgeKnowledgebaseLanguageCategoryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetKnowledgeKnowledgebaseLanguageCategoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetKnowledgeKnowledgebaseLanguageCategoryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetKnowledgeKnowledgebaseLanguageCategoryGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetKnowledgeKnowledgebaseLanguageCategoryOK creates a GetKnowledgeKnowledgebaseLanguageCategoryOK with default headers values
func NewGetKnowledgeKnowledgebaseLanguageCategoryOK() *GetKnowledgeKnowledgebaseLanguageCategoryOK {
	return &GetKnowledgeKnowledgebaseLanguageCategoryOK{}
}

/*GetKnowledgeKnowledgebaseLanguageCategoryOK handles this case with default header values.

successful operation
*/
type GetKnowledgeKnowledgebaseLanguageCategoryOK struct {
	Payload *models.KnowledgeExtendedCategory
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}][%d] getKnowledgeKnowledgebaseLanguageCategoryOK  %+v", 200, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryOK) GetPayload() *models.KnowledgeExtendedCategory {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KnowledgeExtendedCategory)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseLanguageCategoryBadRequest creates a GetKnowledgeKnowledgebaseLanguageCategoryBadRequest with default headers values
func NewGetKnowledgeKnowledgebaseLanguageCategoryBadRequest() *GetKnowledgeKnowledgebaseLanguageCategoryBadRequest {
	return &GetKnowledgeKnowledgebaseLanguageCategoryBadRequest{}
}

/*GetKnowledgeKnowledgebaseLanguageCategoryBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetKnowledgeKnowledgebaseLanguageCategoryBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}][%d] getKnowledgeKnowledgebaseLanguageCategoryBadRequest  %+v", 400, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseLanguageCategoryUnauthorized creates a GetKnowledgeKnowledgebaseLanguageCategoryUnauthorized with default headers values
func NewGetKnowledgeKnowledgebaseLanguageCategoryUnauthorized() *GetKnowledgeKnowledgebaseLanguageCategoryUnauthorized {
	return &GetKnowledgeKnowledgebaseLanguageCategoryUnauthorized{}
}

/*GetKnowledgeKnowledgebaseLanguageCategoryUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetKnowledgeKnowledgebaseLanguageCategoryUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}][%d] getKnowledgeKnowledgebaseLanguageCategoryUnauthorized  %+v", 401, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseLanguageCategoryForbidden creates a GetKnowledgeKnowledgebaseLanguageCategoryForbidden with default headers values
func NewGetKnowledgeKnowledgebaseLanguageCategoryForbidden() *GetKnowledgeKnowledgebaseLanguageCategoryForbidden {
	return &GetKnowledgeKnowledgebaseLanguageCategoryForbidden{}
}

/*GetKnowledgeKnowledgebaseLanguageCategoryForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetKnowledgeKnowledgebaseLanguageCategoryForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}][%d] getKnowledgeKnowledgebaseLanguageCategoryForbidden  %+v", 403, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseLanguageCategoryNotFound creates a GetKnowledgeKnowledgebaseLanguageCategoryNotFound with default headers values
func NewGetKnowledgeKnowledgebaseLanguageCategoryNotFound() *GetKnowledgeKnowledgebaseLanguageCategoryNotFound {
	return &GetKnowledgeKnowledgebaseLanguageCategoryNotFound{}
}

/*GetKnowledgeKnowledgebaseLanguageCategoryNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetKnowledgeKnowledgebaseLanguageCategoryNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}][%d] getKnowledgeKnowledgebaseLanguageCategoryNotFound  %+v", 404, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseLanguageCategoryRequestEntityTooLarge creates a GetKnowledgeKnowledgebaseLanguageCategoryRequestEntityTooLarge with default headers values
func NewGetKnowledgeKnowledgebaseLanguageCategoryRequestEntityTooLarge() *GetKnowledgeKnowledgebaseLanguageCategoryRequestEntityTooLarge {
	return &GetKnowledgeKnowledgebaseLanguageCategoryRequestEntityTooLarge{}
}

/*GetKnowledgeKnowledgebaseLanguageCategoryRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetKnowledgeKnowledgebaseLanguageCategoryRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}][%d] getKnowledgeKnowledgebaseLanguageCategoryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseLanguageCategoryUnsupportedMediaType creates a GetKnowledgeKnowledgebaseLanguageCategoryUnsupportedMediaType with default headers values
func NewGetKnowledgeKnowledgebaseLanguageCategoryUnsupportedMediaType() *GetKnowledgeKnowledgebaseLanguageCategoryUnsupportedMediaType {
	return &GetKnowledgeKnowledgebaseLanguageCategoryUnsupportedMediaType{}
}

/*GetKnowledgeKnowledgebaseLanguageCategoryUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetKnowledgeKnowledgebaseLanguageCategoryUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}][%d] getKnowledgeKnowledgebaseLanguageCategoryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseLanguageCategoryTooManyRequests creates a GetKnowledgeKnowledgebaseLanguageCategoryTooManyRequests with default headers values
func NewGetKnowledgeKnowledgebaseLanguageCategoryTooManyRequests() *GetKnowledgeKnowledgebaseLanguageCategoryTooManyRequests {
	return &GetKnowledgeKnowledgebaseLanguageCategoryTooManyRequests{}
}

/*GetKnowledgeKnowledgebaseLanguageCategoryTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type GetKnowledgeKnowledgebaseLanguageCategoryTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}][%d] getKnowledgeKnowledgebaseLanguageCategoryTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseLanguageCategoryInternalServerError creates a GetKnowledgeKnowledgebaseLanguageCategoryInternalServerError with default headers values
func NewGetKnowledgeKnowledgebaseLanguageCategoryInternalServerError() *GetKnowledgeKnowledgebaseLanguageCategoryInternalServerError {
	return &GetKnowledgeKnowledgebaseLanguageCategoryInternalServerError{}
}

/*GetKnowledgeKnowledgebaseLanguageCategoryInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetKnowledgeKnowledgebaseLanguageCategoryInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}][%d] getKnowledgeKnowledgebaseLanguageCategoryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseLanguageCategoryServiceUnavailable creates a GetKnowledgeKnowledgebaseLanguageCategoryServiceUnavailable with default headers values
func NewGetKnowledgeKnowledgebaseLanguageCategoryServiceUnavailable() *GetKnowledgeKnowledgebaseLanguageCategoryServiceUnavailable {
	return &GetKnowledgeKnowledgebaseLanguageCategoryServiceUnavailable{}
}

/*GetKnowledgeKnowledgebaseLanguageCategoryServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetKnowledgeKnowledgebaseLanguageCategoryServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}][%d] getKnowledgeKnowledgebaseLanguageCategoryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseLanguageCategoryGatewayTimeout creates a GetKnowledgeKnowledgebaseLanguageCategoryGatewayTimeout with default headers values
func NewGetKnowledgeKnowledgebaseLanguageCategoryGatewayTimeout() *GetKnowledgeKnowledgebaseLanguageCategoryGatewayTimeout {
	return &GetKnowledgeKnowledgebaseLanguageCategoryGatewayTimeout{}
}

/*GetKnowledgeKnowledgebaseLanguageCategoryGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetKnowledgeKnowledgebaseLanguageCategoryGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}][%d] getKnowledgeKnowledgebaseLanguageCategoryGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseLanguageCategoryGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

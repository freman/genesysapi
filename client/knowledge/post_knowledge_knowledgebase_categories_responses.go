// Code generated by go-swagger; DO NOT EDIT.

package knowledge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostKnowledgeKnowledgebaseCategoriesReader is a Reader for the PostKnowledgeKnowledgebaseCategories structure.
type PostKnowledgeKnowledgebaseCategoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostKnowledgeKnowledgebaseCategoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostKnowledgeKnowledgebaseCategoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewPostKnowledgeKnowledgebaseCategoriesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostKnowledgeKnowledgebaseCategoriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostKnowledgeKnowledgebaseCategoriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostKnowledgeKnowledgebaseCategoriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostKnowledgeKnowledgebaseCategoriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostKnowledgeKnowledgebaseCategoriesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostKnowledgeKnowledgebaseCategoriesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostKnowledgeKnowledgebaseCategoriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostKnowledgeKnowledgebaseCategoriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostKnowledgeKnowledgebaseCategoriesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostKnowledgeKnowledgebaseCategoriesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostKnowledgeKnowledgebaseCategoriesOK creates a PostKnowledgeKnowledgebaseCategoriesOK with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesOK() *PostKnowledgeKnowledgebaseCategoriesOK {
	return &PostKnowledgeKnowledgebaseCategoriesOK{}
}

/*PostKnowledgeKnowledgebaseCategoriesOK handles this case with default header values.

successful operation
*/
type PostKnowledgeKnowledgebaseCategoriesOK struct {
	Payload *models.CategoryResponse
}

func (o *PostKnowledgeKnowledgebaseCategoriesOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesOK  %+v", 200, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesOK) GetPayload() *models.CategoryResponse {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CategoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesCreated creates a PostKnowledgeKnowledgebaseCategoriesCreated with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesCreated() *PostKnowledgeKnowledgebaseCategoriesCreated {
	return &PostKnowledgeKnowledgebaseCategoriesCreated{}
}

/*PostKnowledgeKnowledgebaseCategoriesCreated handles this case with default header values.

Category created
*/
type PostKnowledgeKnowledgebaseCategoriesCreated struct {
	Payload *models.CategoryResponse
}

func (o *PostKnowledgeKnowledgebaseCategoriesCreated) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesCreated  %+v", 201, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesCreated) GetPayload() *models.CategoryResponse {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CategoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesBadRequest creates a PostKnowledgeKnowledgebaseCategoriesBadRequest with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesBadRequest() *PostKnowledgeKnowledgebaseCategoriesBadRequest {
	return &PostKnowledgeKnowledgebaseCategoriesBadRequest{}
}

/*PostKnowledgeKnowledgebaseCategoriesBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostKnowledgeKnowledgebaseCategoriesBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseCategoriesBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesBadRequest  %+v", 400, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesUnauthorized creates a PostKnowledgeKnowledgebaseCategoriesUnauthorized with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesUnauthorized() *PostKnowledgeKnowledgebaseCategoriesUnauthorized {
	return &PostKnowledgeKnowledgebaseCategoriesUnauthorized{}
}

/*PostKnowledgeKnowledgebaseCategoriesUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostKnowledgeKnowledgebaseCategoriesUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseCategoriesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesForbidden creates a PostKnowledgeKnowledgebaseCategoriesForbidden with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesForbidden() *PostKnowledgeKnowledgebaseCategoriesForbidden {
	return &PostKnowledgeKnowledgebaseCategoriesForbidden{}
}

/*PostKnowledgeKnowledgebaseCategoriesForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostKnowledgeKnowledgebaseCategoriesForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseCategoriesForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesForbidden  %+v", 403, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesNotFound creates a PostKnowledgeKnowledgebaseCategoriesNotFound with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesNotFound() *PostKnowledgeKnowledgebaseCategoriesNotFound {
	return &PostKnowledgeKnowledgebaseCategoriesNotFound{}
}

/*PostKnowledgeKnowledgebaseCategoriesNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostKnowledgeKnowledgebaseCategoriesNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseCategoriesNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesNotFound  %+v", 404, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesRequestTimeout creates a PostKnowledgeKnowledgebaseCategoriesRequestTimeout with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesRequestTimeout() *PostKnowledgeKnowledgebaseCategoriesRequestTimeout {
	return &PostKnowledgeKnowledgebaseCategoriesRequestTimeout{}
}

/*PostKnowledgeKnowledgebaseCategoriesRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostKnowledgeKnowledgebaseCategoriesRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseCategoriesRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesConflict creates a PostKnowledgeKnowledgebaseCategoriesConflict with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesConflict() *PostKnowledgeKnowledgebaseCategoriesConflict {
	return &PostKnowledgeKnowledgebaseCategoriesConflict{}
}

/*PostKnowledgeKnowledgebaseCategoriesConflict handles this case with default header values.

Conflict
*/
type PostKnowledgeKnowledgebaseCategoriesConflict struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseCategoriesConflict) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesConflict  %+v", 409, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge creates a PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge() *PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge {
	return &PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge{}
}

/*PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType creates a PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType() *PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType {
	return &PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType{}
}

/*PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesTooManyRequests creates a PostKnowledgeKnowledgebaseCategoriesTooManyRequests with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesTooManyRequests() *PostKnowledgeKnowledgebaseCategoriesTooManyRequests {
	return &PostKnowledgeKnowledgebaseCategoriesTooManyRequests{}
}

/*PostKnowledgeKnowledgebaseCategoriesTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostKnowledgeKnowledgebaseCategoriesTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseCategoriesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesInternalServerError creates a PostKnowledgeKnowledgebaseCategoriesInternalServerError with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesInternalServerError() *PostKnowledgeKnowledgebaseCategoriesInternalServerError {
	return &PostKnowledgeKnowledgebaseCategoriesInternalServerError{}
}

/*PostKnowledgeKnowledgebaseCategoriesInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostKnowledgeKnowledgebaseCategoriesInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseCategoriesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesServiceUnavailable creates a PostKnowledgeKnowledgebaseCategoriesServiceUnavailable with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesServiceUnavailable() *PostKnowledgeKnowledgebaseCategoriesServiceUnavailable {
	return &PostKnowledgeKnowledgebaseCategoriesServiceUnavailable{}
}

/*PostKnowledgeKnowledgebaseCategoriesServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostKnowledgeKnowledgebaseCategoriesServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseCategoriesServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesGatewayTimeout creates a PostKnowledgeKnowledgebaseCategoriesGatewayTimeout with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesGatewayTimeout() *PostKnowledgeKnowledgebaseCategoriesGatewayTimeout {
	return &PostKnowledgeKnowledgebaseCategoriesGatewayTimeout{}
}

/*PostKnowledgeKnowledgebaseCategoriesGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostKnowledgeKnowledgebaseCategoriesGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseCategoriesGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

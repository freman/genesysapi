// Code generated by go-swagger; DO NOT EDIT.

package knowledge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostKnowledgeKnowledgebaseCategoriesReader is a Reader for the PostKnowledgeKnowledgebaseCategories structure.
type PostKnowledgeKnowledgebaseCategoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostKnowledgeKnowledgebaseCategoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostKnowledgeKnowledgebaseCategoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewPostKnowledgeKnowledgebaseCategoriesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostKnowledgeKnowledgebaseCategoriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostKnowledgeKnowledgebaseCategoriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostKnowledgeKnowledgebaseCategoriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostKnowledgeKnowledgebaseCategoriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostKnowledgeKnowledgebaseCategoriesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostKnowledgeKnowledgebaseCategoriesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostKnowledgeKnowledgebaseCategoriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostKnowledgeKnowledgebaseCategoriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostKnowledgeKnowledgebaseCategoriesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostKnowledgeKnowledgebaseCategoriesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostKnowledgeKnowledgebaseCategoriesOK creates a PostKnowledgeKnowledgebaseCategoriesOK with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesOK() *PostKnowledgeKnowledgebaseCategoriesOK {
	return &PostKnowledgeKnowledgebaseCategoriesOK{}
}

/*
PostKnowledgeKnowledgebaseCategoriesOK describes a response with status code 200, with default header values.

successful operation
*/
type PostKnowledgeKnowledgebaseCategoriesOK struct {
	Payload *models.CategoryResponse
}

// IsSuccess returns true when this post knowledge knowledgebase categories o k response has a 2xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post knowledge knowledgebase categories o k response has a 3xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post knowledge knowledgebase categories o k response has a 4xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post knowledge knowledgebase categories o k response has a 5xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post knowledge knowledgebase categories o k response a status code equal to that given
func (o *PostKnowledgeKnowledgebaseCategoriesOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostKnowledgeKnowledgebaseCategoriesOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesOK  %+v", 200, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesOK) String() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesOK  %+v", 200, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesOK) GetPayload() *models.CategoryResponse {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CategoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesCreated creates a PostKnowledgeKnowledgebaseCategoriesCreated with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesCreated() *PostKnowledgeKnowledgebaseCategoriesCreated {
	return &PostKnowledgeKnowledgebaseCategoriesCreated{}
}

/*
PostKnowledgeKnowledgebaseCategoriesCreated describes a response with status code 201, with default header values.

Category created
*/
type PostKnowledgeKnowledgebaseCategoriesCreated struct {
	Payload *models.CategoryResponse
}

// IsSuccess returns true when this post knowledge knowledgebase categories created response has a 2xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post knowledge knowledgebase categories created response has a 3xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post knowledge knowledgebase categories created response has a 4xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post knowledge knowledgebase categories created response has a 5xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post knowledge knowledgebase categories created response a status code equal to that given
func (o *PostKnowledgeKnowledgebaseCategoriesCreated) IsCode(code int) bool {
	return code == 201
}

func (o *PostKnowledgeKnowledgebaseCategoriesCreated) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesCreated  %+v", 201, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesCreated) String() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesCreated  %+v", 201, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesCreated) GetPayload() *models.CategoryResponse {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CategoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesBadRequest creates a PostKnowledgeKnowledgebaseCategoriesBadRequest with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesBadRequest() *PostKnowledgeKnowledgebaseCategoriesBadRequest {
	return &PostKnowledgeKnowledgebaseCategoriesBadRequest{}
}

/*
PostKnowledgeKnowledgebaseCategoriesBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostKnowledgeKnowledgebaseCategoriesBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post knowledge knowledgebase categories bad request response has a 2xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post knowledge knowledgebase categories bad request response has a 3xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post knowledge knowledgebase categories bad request response has a 4xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post knowledge knowledgebase categories bad request response has a 5xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post knowledge knowledgebase categories bad request response a status code equal to that given
func (o *PostKnowledgeKnowledgebaseCategoriesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostKnowledgeKnowledgebaseCategoriesBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesBadRequest  %+v", 400, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesBadRequest  %+v", 400, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesUnauthorized creates a PostKnowledgeKnowledgebaseCategoriesUnauthorized with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesUnauthorized() *PostKnowledgeKnowledgebaseCategoriesUnauthorized {
	return &PostKnowledgeKnowledgebaseCategoriesUnauthorized{}
}

/*
PostKnowledgeKnowledgebaseCategoriesUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostKnowledgeKnowledgebaseCategoriesUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post knowledge knowledgebase categories unauthorized response has a 2xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post knowledge knowledgebase categories unauthorized response has a 3xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post knowledge knowledgebase categories unauthorized response has a 4xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post knowledge knowledgebase categories unauthorized response has a 5xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post knowledge knowledgebase categories unauthorized response a status code equal to that given
func (o *PostKnowledgeKnowledgebaseCategoriesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostKnowledgeKnowledgebaseCategoriesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesForbidden creates a PostKnowledgeKnowledgebaseCategoriesForbidden with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesForbidden() *PostKnowledgeKnowledgebaseCategoriesForbidden {
	return &PostKnowledgeKnowledgebaseCategoriesForbidden{}
}

/*
PostKnowledgeKnowledgebaseCategoriesForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostKnowledgeKnowledgebaseCategoriesForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post knowledge knowledgebase categories forbidden response has a 2xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post knowledge knowledgebase categories forbidden response has a 3xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post knowledge knowledgebase categories forbidden response has a 4xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post knowledge knowledgebase categories forbidden response has a 5xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post knowledge knowledgebase categories forbidden response a status code equal to that given
func (o *PostKnowledgeKnowledgebaseCategoriesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostKnowledgeKnowledgebaseCategoriesForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesForbidden  %+v", 403, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesForbidden  %+v", 403, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesNotFound creates a PostKnowledgeKnowledgebaseCategoriesNotFound with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesNotFound() *PostKnowledgeKnowledgebaseCategoriesNotFound {
	return &PostKnowledgeKnowledgebaseCategoriesNotFound{}
}

/*
PostKnowledgeKnowledgebaseCategoriesNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostKnowledgeKnowledgebaseCategoriesNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post knowledge knowledgebase categories not found response has a 2xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post knowledge knowledgebase categories not found response has a 3xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post knowledge knowledgebase categories not found response has a 4xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post knowledge knowledgebase categories not found response has a 5xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post knowledge knowledgebase categories not found response a status code equal to that given
func (o *PostKnowledgeKnowledgebaseCategoriesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostKnowledgeKnowledgebaseCategoriesNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesNotFound  %+v", 404, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesNotFound  %+v", 404, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesRequestTimeout creates a PostKnowledgeKnowledgebaseCategoriesRequestTimeout with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesRequestTimeout() *PostKnowledgeKnowledgebaseCategoriesRequestTimeout {
	return &PostKnowledgeKnowledgebaseCategoriesRequestTimeout{}
}

/*
PostKnowledgeKnowledgebaseCategoriesRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostKnowledgeKnowledgebaseCategoriesRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post knowledge knowledgebase categories request timeout response has a 2xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post knowledge knowledgebase categories request timeout response has a 3xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post knowledge knowledgebase categories request timeout response has a 4xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post knowledge knowledgebase categories request timeout response has a 5xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post knowledge knowledgebase categories request timeout response a status code equal to that given
func (o *PostKnowledgeKnowledgebaseCategoriesRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostKnowledgeKnowledgebaseCategoriesRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesConflict creates a PostKnowledgeKnowledgebaseCategoriesConflict with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesConflict() *PostKnowledgeKnowledgebaseCategoriesConflict {
	return &PostKnowledgeKnowledgebaseCategoriesConflict{}
}

/*
PostKnowledgeKnowledgebaseCategoriesConflict describes a response with status code 409, with default header values.

Conflict
*/
type PostKnowledgeKnowledgebaseCategoriesConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post knowledge knowledgebase categories conflict response has a 2xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post knowledge knowledgebase categories conflict response has a 3xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post knowledge knowledgebase categories conflict response has a 4xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post knowledge knowledgebase categories conflict response has a 5xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post knowledge knowledgebase categories conflict response a status code equal to that given
func (o *PostKnowledgeKnowledgebaseCategoriesConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PostKnowledgeKnowledgebaseCategoriesConflict) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesConflict  %+v", 409, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesConflict) String() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesConflict  %+v", 409, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge creates a PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge() *PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge {
	return &PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge{}
}

/*
PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post knowledge knowledgebase categories request entity too large response has a 2xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post knowledge knowledgebase categories request entity too large response has a 3xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post knowledge knowledgebase categories request entity too large response has a 4xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post knowledge knowledgebase categories request entity too large response has a 5xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post knowledge knowledgebase categories request entity too large response a status code equal to that given
func (o *PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType creates a PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType() *PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType {
	return &PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType{}
}

/*
PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post knowledge knowledgebase categories unsupported media type response has a 2xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post knowledge knowledgebase categories unsupported media type response has a 3xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post knowledge knowledgebase categories unsupported media type response has a 4xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post knowledge knowledgebase categories unsupported media type response has a 5xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post knowledge knowledgebase categories unsupported media type response a status code equal to that given
func (o *PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesTooManyRequests creates a PostKnowledgeKnowledgebaseCategoriesTooManyRequests with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesTooManyRequests() *PostKnowledgeKnowledgebaseCategoriesTooManyRequests {
	return &PostKnowledgeKnowledgebaseCategoriesTooManyRequests{}
}

/*
PostKnowledgeKnowledgebaseCategoriesTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostKnowledgeKnowledgebaseCategoriesTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post knowledge knowledgebase categories too many requests response has a 2xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post knowledge knowledgebase categories too many requests response has a 3xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post knowledge knowledgebase categories too many requests response has a 4xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post knowledge knowledgebase categories too many requests response has a 5xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post knowledge knowledgebase categories too many requests response a status code equal to that given
func (o *PostKnowledgeKnowledgebaseCategoriesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostKnowledgeKnowledgebaseCategoriesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesInternalServerError creates a PostKnowledgeKnowledgebaseCategoriesInternalServerError with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesInternalServerError() *PostKnowledgeKnowledgebaseCategoriesInternalServerError {
	return &PostKnowledgeKnowledgebaseCategoriesInternalServerError{}
}

/*
PostKnowledgeKnowledgebaseCategoriesInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostKnowledgeKnowledgebaseCategoriesInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post knowledge knowledgebase categories internal server error response has a 2xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post knowledge knowledgebase categories internal server error response has a 3xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post knowledge knowledgebase categories internal server error response has a 4xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post knowledge knowledgebase categories internal server error response has a 5xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post knowledge knowledgebase categories internal server error response a status code equal to that given
func (o *PostKnowledgeKnowledgebaseCategoriesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostKnowledgeKnowledgebaseCategoriesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesServiceUnavailable creates a PostKnowledgeKnowledgebaseCategoriesServiceUnavailable with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesServiceUnavailable() *PostKnowledgeKnowledgebaseCategoriesServiceUnavailable {
	return &PostKnowledgeKnowledgebaseCategoriesServiceUnavailable{}
}

/*
PostKnowledgeKnowledgebaseCategoriesServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostKnowledgeKnowledgebaseCategoriesServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post knowledge knowledgebase categories service unavailable response has a 2xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post knowledge knowledgebase categories service unavailable response has a 3xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post knowledge knowledgebase categories service unavailable response has a 4xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post knowledge knowledgebase categories service unavailable response has a 5xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post knowledge knowledgebase categories service unavailable response a status code equal to that given
func (o *PostKnowledgeKnowledgebaseCategoriesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostKnowledgeKnowledgebaseCategoriesServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseCategoriesGatewayTimeout creates a PostKnowledgeKnowledgebaseCategoriesGatewayTimeout with default headers values
func NewPostKnowledgeKnowledgebaseCategoriesGatewayTimeout() *PostKnowledgeKnowledgebaseCategoriesGatewayTimeout {
	return &PostKnowledgeKnowledgebaseCategoriesGatewayTimeout{}
}

/*
PostKnowledgeKnowledgebaseCategoriesGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostKnowledgeKnowledgebaseCategoriesGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post knowledge knowledgebase categories gateway timeout response has a 2xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post knowledge knowledgebase categories gateway timeout response has a 3xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post knowledge knowledgebase categories gateway timeout response has a 4xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post knowledge knowledgebase categories gateway timeout response has a 5xx status code
func (o *PostKnowledgeKnowledgebaseCategoriesGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post knowledge knowledgebase categories gateway timeout response a status code equal to that given
func (o *PostKnowledgeKnowledgebaseCategoriesGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostKnowledgeKnowledgebaseCategoriesGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories][%d] postKnowledgeKnowledgebaseCategoriesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseCategoriesGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseCategoriesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

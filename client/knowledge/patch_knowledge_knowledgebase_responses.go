// Code generated by go-swagger; DO NOT EDIT.

package knowledge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchKnowledgeKnowledgebaseReader is a Reader for the PatchKnowledgeKnowledgebase structure.
type PatchKnowledgeKnowledgebaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchKnowledgeKnowledgebaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchKnowledgeKnowledgebaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchKnowledgeKnowledgebaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchKnowledgeKnowledgebaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchKnowledgeKnowledgebaseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchKnowledgeKnowledgebaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchKnowledgeKnowledgebaseRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchKnowledgeKnowledgebaseRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchKnowledgeKnowledgebaseUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchKnowledgeKnowledgebaseTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchKnowledgeKnowledgebaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchKnowledgeKnowledgebaseServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchKnowledgeKnowledgebaseGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchKnowledgeKnowledgebaseOK creates a PatchKnowledgeKnowledgebaseOK with default headers values
func NewPatchKnowledgeKnowledgebaseOK() *PatchKnowledgeKnowledgebaseOK {
	return &PatchKnowledgeKnowledgebaseOK{}
}

/*
PatchKnowledgeKnowledgebaseOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchKnowledgeKnowledgebaseOK struct {
	Payload *models.KnowledgeBase
}

// IsSuccess returns true when this patch knowledge knowledgebase o k response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch knowledge knowledgebase o k response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase o k response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch knowledge knowledgebase o k response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase o k response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchKnowledgeKnowledgebaseOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseOK  %+v", 200, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseOK  %+v", 200, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseOK) GetPayload() *models.KnowledgeBase {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KnowledgeBase)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseBadRequest creates a PatchKnowledgeKnowledgebaseBadRequest with default headers values
func NewPatchKnowledgeKnowledgebaseBadRequest() *PatchKnowledgeKnowledgebaseBadRequest {
	return &PatchKnowledgeKnowledgebaseBadRequest{}
}

/*
PatchKnowledgeKnowledgebaseBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchKnowledgeKnowledgebaseBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase bad request response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase bad request response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase bad request response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase bad request response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase bad request response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchKnowledgeKnowledgebaseBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseBadRequest  %+v", 400, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseBadRequest  %+v", 400, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseUnauthorized creates a PatchKnowledgeKnowledgebaseUnauthorized with default headers values
func NewPatchKnowledgeKnowledgebaseUnauthorized() *PatchKnowledgeKnowledgebaseUnauthorized {
	return &PatchKnowledgeKnowledgebaseUnauthorized{}
}

/*
PatchKnowledgeKnowledgebaseUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchKnowledgeKnowledgebaseUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase unauthorized response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase unauthorized response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase unauthorized response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase unauthorized response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase unauthorized response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchKnowledgeKnowledgebaseUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseForbidden creates a PatchKnowledgeKnowledgebaseForbidden with default headers values
func NewPatchKnowledgeKnowledgebaseForbidden() *PatchKnowledgeKnowledgebaseForbidden {
	return &PatchKnowledgeKnowledgebaseForbidden{}
}

/*
PatchKnowledgeKnowledgebaseForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchKnowledgeKnowledgebaseForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase forbidden response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase forbidden response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase forbidden response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase forbidden response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase forbidden response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchKnowledgeKnowledgebaseForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseForbidden  %+v", 403, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseForbidden  %+v", 403, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseNotFound creates a PatchKnowledgeKnowledgebaseNotFound with default headers values
func NewPatchKnowledgeKnowledgebaseNotFound() *PatchKnowledgeKnowledgebaseNotFound {
	return &PatchKnowledgeKnowledgebaseNotFound{}
}

/*
PatchKnowledgeKnowledgebaseNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchKnowledgeKnowledgebaseNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase not found response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase not found response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase not found response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase not found response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase not found response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchKnowledgeKnowledgebaseNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseNotFound  %+v", 404, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseNotFound  %+v", 404, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseRequestTimeout creates a PatchKnowledgeKnowledgebaseRequestTimeout with default headers values
func NewPatchKnowledgeKnowledgebaseRequestTimeout() *PatchKnowledgeKnowledgebaseRequestTimeout {
	return &PatchKnowledgeKnowledgebaseRequestTimeout{}
}

/*
PatchKnowledgeKnowledgebaseRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchKnowledgeKnowledgebaseRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase request timeout response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase request timeout response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase request timeout response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase request timeout response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase request timeout response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchKnowledgeKnowledgebaseRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseRequestEntityTooLarge creates a PatchKnowledgeKnowledgebaseRequestEntityTooLarge with default headers values
func NewPatchKnowledgeKnowledgebaseRequestEntityTooLarge() *PatchKnowledgeKnowledgebaseRequestEntityTooLarge {
	return &PatchKnowledgeKnowledgebaseRequestEntityTooLarge{}
}

/*
PatchKnowledgeKnowledgebaseRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchKnowledgeKnowledgebaseRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase request entity too large response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase request entity too large response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase request entity too large response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase request entity too large response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase request entity too large response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchKnowledgeKnowledgebaseRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseUnsupportedMediaType creates a PatchKnowledgeKnowledgebaseUnsupportedMediaType with default headers values
func NewPatchKnowledgeKnowledgebaseUnsupportedMediaType() *PatchKnowledgeKnowledgebaseUnsupportedMediaType {
	return &PatchKnowledgeKnowledgebaseUnsupportedMediaType{}
}

/*
PatchKnowledgeKnowledgebaseUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchKnowledgeKnowledgebaseUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase unsupported media type response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase unsupported media type response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase unsupported media type response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase unsupported media type response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase unsupported media type response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchKnowledgeKnowledgebaseUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseTooManyRequests creates a PatchKnowledgeKnowledgebaseTooManyRequests with default headers values
func NewPatchKnowledgeKnowledgebaseTooManyRequests() *PatchKnowledgeKnowledgebaseTooManyRequests {
	return &PatchKnowledgeKnowledgebaseTooManyRequests{}
}

/*
PatchKnowledgeKnowledgebaseTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchKnowledgeKnowledgebaseTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase too many requests response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase too many requests response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase too many requests response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase too many requests response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase too many requests response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchKnowledgeKnowledgebaseTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseInternalServerError creates a PatchKnowledgeKnowledgebaseInternalServerError with default headers values
func NewPatchKnowledgeKnowledgebaseInternalServerError() *PatchKnowledgeKnowledgebaseInternalServerError {
	return &PatchKnowledgeKnowledgebaseInternalServerError{}
}

/*
PatchKnowledgeKnowledgebaseInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchKnowledgeKnowledgebaseInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase internal server error response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase internal server error response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase internal server error response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch knowledge knowledgebase internal server error response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch knowledge knowledgebase internal server error response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchKnowledgeKnowledgebaseInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseServiceUnavailable creates a PatchKnowledgeKnowledgebaseServiceUnavailable with default headers values
func NewPatchKnowledgeKnowledgebaseServiceUnavailable() *PatchKnowledgeKnowledgebaseServiceUnavailable {
	return &PatchKnowledgeKnowledgebaseServiceUnavailable{}
}

/*
PatchKnowledgeKnowledgebaseServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchKnowledgeKnowledgebaseServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase service unavailable response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase service unavailable response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase service unavailable response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch knowledge knowledgebase service unavailable response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch knowledge knowledgebase service unavailable response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchKnowledgeKnowledgebaseServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseGatewayTimeout creates a PatchKnowledgeKnowledgebaseGatewayTimeout with default headers values
func NewPatchKnowledgeKnowledgebaseGatewayTimeout() *PatchKnowledgeKnowledgebaseGatewayTimeout {
	return &PatchKnowledgeKnowledgebaseGatewayTimeout{}
}

/*
PatchKnowledgeKnowledgebaseGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchKnowledgeKnowledgebaseGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase gateway timeout response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase gateway timeout response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase gateway timeout response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch knowledge knowledgebase gateway timeout response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch knowledge knowledgebase gateway timeout response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchKnowledgeKnowledgebaseGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}][%d] patchKnowledgeKnowledgebaseGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package knowledge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the knowledge client
type API interface {
	/*
	   DeleteKnowledgeKnowledgebase deletes knowledge base
	*/
	DeleteKnowledgeKnowledgebase(ctx context.Context, params *DeleteKnowledgeKnowledgebaseParams) (*DeleteKnowledgeKnowledgebaseOK, *DeleteKnowledgeKnowledgebaseNoContent, error)
	/*
	   DeleteKnowledgeKnowledgebaseLanguageCategory deletes category
	*/
	DeleteKnowledgeKnowledgebaseLanguageCategory(ctx context.Context, params *DeleteKnowledgeKnowledgebaseLanguageCategoryParams) (*DeleteKnowledgeKnowledgebaseLanguageCategoryOK, *DeleteKnowledgeKnowledgebaseLanguageCategoryNoContent, error)
	/*
	   DeleteKnowledgeKnowledgebaseLanguageDocument deletes document
	*/
	DeleteKnowledgeKnowledgebaseLanguageDocument(ctx context.Context, params *DeleteKnowledgeKnowledgebaseLanguageDocumentParams) (*DeleteKnowledgeKnowledgebaseLanguageDocumentOK, *DeleteKnowledgeKnowledgebaseLanguageDocumentNoContent, error)
	/*
	   GetKnowledgeKnowledgebase gets knowledge base
	*/
	GetKnowledgeKnowledgebase(ctx context.Context, params *GetKnowledgeKnowledgebaseParams) (*GetKnowledgeKnowledgebaseOK, error)
	/*
	   GetKnowledgeKnowledgebaseLanguageCategories gets categories
	*/
	GetKnowledgeKnowledgebaseLanguageCategories(ctx context.Context, params *GetKnowledgeKnowledgebaseLanguageCategoriesParams) (*GetKnowledgeKnowledgebaseLanguageCategoriesOK, error)
	/*
	   GetKnowledgeKnowledgebaseLanguageCategory gets category
	*/
	GetKnowledgeKnowledgebaseLanguageCategory(ctx context.Context, params *GetKnowledgeKnowledgebaseLanguageCategoryParams) (*GetKnowledgeKnowledgebaseLanguageCategoryOK, error)
	/*
	   GetKnowledgeKnowledgebaseLanguageDocument gets document
	*/
	GetKnowledgeKnowledgebaseLanguageDocument(ctx context.Context, params *GetKnowledgeKnowledgebaseLanguageDocumentParams) (*GetKnowledgeKnowledgebaseLanguageDocumentOK, error)
	/*
	   GetKnowledgeKnowledgebaseLanguageDocuments gets documents
	*/
	GetKnowledgeKnowledgebaseLanguageDocuments(ctx context.Context, params *GetKnowledgeKnowledgebaseLanguageDocumentsParams) (*GetKnowledgeKnowledgebaseLanguageDocumentsOK, error)
	/*
	   GetKnowledgeKnowledgebaseLanguageTraining gets training detail
	*/
	GetKnowledgeKnowledgebaseLanguageTraining(ctx context.Context, params *GetKnowledgeKnowledgebaseLanguageTrainingParams) (*GetKnowledgeKnowledgebaseLanguageTrainingOK, error)
	/*
	   GetKnowledgeKnowledgebaseLanguageTrainings gets all trainings information for a knowledgebase
	*/
	GetKnowledgeKnowledgebaseLanguageTrainings(ctx context.Context, params *GetKnowledgeKnowledgebaseLanguageTrainingsParams) (*GetKnowledgeKnowledgebaseLanguageTrainingsOK, error)
	/*
	   GetKnowledgeKnowledgebases gets knowledge bases
	*/
	GetKnowledgeKnowledgebases(ctx context.Context, params *GetKnowledgeKnowledgebasesParams) (*GetKnowledgeKnowledgebasesOK, error)
	/*
	   PatchKnowledgeKnowledgebase updates knowledge base
	*/
	PatchKnowledgeKnowledgebase(ctx context.Context, params *PatchKnowledgeKnowledgebaseParams) (*PatchKnowledgeKnowledgebaseOK, error)
	/*
	   PatchKnowledgeKnowledgebaseLanguageCategory updates category
	*/
	PatchKnowledgeKnowledgebaseLanguageCategory(ctx context.Context, params *PatchKnowledgeKnowledgebaseLanguageCategoryParams) (*PatchKnowledgeKnowledgebaseLanguageCategoryOK, error)
	/*
	   PatchKnowledgeKnowledgebaseLanguageDocument updates document
	*/
	PatchKnowledgeKnowledgebaseLanguageDocument(ctx context.Context, params *PatchKnowledgeKnowledgebaseLanguageDocumentParams) (*PatchKnowledgeKnowledgebaseLanguageDocumentOK, error)
	/*
	   PatchKnowledgeKnowledgebaseLanguageDocuments updates documents collection
	*/
	PatchKnowledgeKnowledgebaseLanguageDocuments(ctx context.Context, params *PatchKnowledgeKnowledgebaseLanguageDocumentsParams) (*PatchKnowledgeKnowledgebaseLanguageDocumentsOK, error)
	/*
	   PostKnowledgeKnowledgebaseLanguageCategories creates new category
	*/
	PostKnowledgeKnowledgebaseLanguageCategories(ctx context.Context, params *PostKnowledgeKnowledgebaseLanguageCategoriesParams) (*PostKnowledgeKnowledgebaseLanguageCategoriesOK, error)
	/*
	   PostKnowledgeKnowledgebaseLanguageDocuments creates document
	*/
	PostKnowledgeKnowledgebaseLanguageDocuments(ctx context.Context, params *PostKnowledgeKnowledgebaseLanguageDocumentsParams) (*PostKnowledgeKnowledgebaseLanguageDocumentsOK, error)
	/*
	   PostKnowledgeKnowledgebaseLanguageTrainingPromote promotes trained documents from draft state to active
	*/
	PostKnowledgeKnowledgebaseLanguageTrainingPromote(ctx context.Context, params *PostKnowledgeKnowledgebaseLanguageTrainingPromoteParams) (*PostKnowledgeKnowledgebaseLanguageTrainingPromoteOK, error)
	/*
	   PostKnowledgeKnowledgebaseLanguageTrainings triggers training
	*/
	PostKnowledgeKnowledgebaseLanguageTrainings(ctx context.Context, params *PostKnowledgeKnowledgebaseLanguageTrainingsParams) (*PostKnowledgeKnowledgebaseLanguageTrainingsOK, error)
	/*
	   PostKnowledgeKnowledgebases creates new knowledge base
	*/
	PostKnowledgeKnowledgebases(ctx context.Context, params *PostKnowledgeKnowledgebasesParams) (*PostKnowledgeKnowledgebasesOK, error)
}

// New creates a new knowledge API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for knowledge API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteKnowledgeKnowledgebase deletes knowledge base
*/
func (a *Client) DeleteKnowledgeKnowledgebase(ctx context.Context, params *DeleteKnowledgeKnowledgebaseParams) (*DeleteKnowledgeKnowledgebaseOK, *DeleteKnowledgeKnowledgebaseNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteKnowledgeKnowledgebase",
		Method:             "DELETE",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteKnowledgeKnowledgebaseReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteKnowledgeKnowledgebaseOK:
		return value, nil, nil
	case *DeleteKnowledgeKnowledgebaseNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteKnowledgeKnowledgebaseLanguageCategory deletes category
*/
func (a *Client) DeleteKnowledgeKnowledgebaseLanguageCategory(ctx context.Context, params *DeleteKnowledgeKnowledgebaseLanguageCategoryParams) (*DeleteKnowledgeKnowledgebaseLanguageCategoryOK, *DeleteKnowledgeKnowledgebaseLanguageCategoryNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteKnowledgeKnowledgebaseLanguageCategory",
		Method:             "DELETE",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteKnowledgeKnowledgebaseLanguageCategoryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteKnowledgeKnowledgebaseLanguageCategoryOK:
		return value, nil, nil
	case *DeleteKnowledgeKnowledgebaseLanguageCategoryNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteKnowledgeKnowledgebaseLanguageDocument deletes document
*/
func (a *Client) DeleteKnowledgeKnowledgebaseLanguageDocument(ctx context.Context, params *DeleteKnowledgeKnowledgebaseLanguageDocumentParams) (*DeleteKnowledgeKnowledgebaseLanguageDocumentOK, *DeleteKnowledgeKnowledgebaseLanguageDocumentNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteKnowledgeKnowledgebaseLanguageDocument",
		Method:             "DELETE",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteKnowledgeKnowledgebaseLanguageDocumentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteKnowledgeKnowledgebaseLanguageDocumentOK:
		return value, nil, nil
	case *DeleteKnowledgeKnowledgebaseLanguageDocumentNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetKnowledgeKnowledgebase gets knowledge base
*/
func (a *Client) GetKnowledgeKnowledgebase(ctx context.Context, params *GetKnowledgeKnowledgebaseParams) (*GetKnowledgeKnowledgebaseOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKnowledgeKnowledgebase",
		Method:             "GET",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKnowledgeKnowledgebaseReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKnowledgeKnowledgebaseOK), nil

}

/*
GetKnowledgeKnowledgebaseLanguageCategories gets categories
*/
func (a *Client) GetKnowledgeKnowledgebaseLanguageCategories(ctx context.Context, params *GetKnowledgeKnowledgebaseLanguageCategoriesParams) (*GetKnowledgeKnowledgebaseLanguageCategoriesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKnowledgeKnowledgebaseLanguageCategories",
		Method:             "GET",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKnowledgeKnowledgebaseLanguageCategoriesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKnowledgeKnowledgebaseLanguageCategoriesOK), nil

}

/*
GetKnowledgeKnowledgebaseLanguageCategory gets category
*/
func (a *Client) GetKnowledgeKnowledgebaseLanguageCategory(ctx context.Context, params *GetKnowledgeKnowledgebaseLanguageCategoryParams) (*GetKnowledgeKnowledgebaseLanguageCategoryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKnowledgeKnowledgebaseLanguageCategory",
		Method:             "GET",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKnowledgeKnowledgebaseLanguageCategoryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKnowledgeKnowledgebaseLanguageCategoryOK), nil

}

/*
GetKnowledgeKnowledgebaseLanguageDocument gets document
*/
func (a *Client) GetKnowledgeKnowledgebaseLanguageDocument(ctx context.Context, params *GetKnowledgeKnowledgebaseLanguageDocumentParams) (*GetKnowledgeKnowledgebaseLanguageDocumentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKnowledgeKnowledgebaseLanguageDocument",
		Method:             "GET",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKnowledgeKnowledgebaseLanguageDocumentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKnowledgeKnowledgebaseLanguageDocumentOK), nil

}

/*
GetKnowledgeKnowledgebaseLanguageDocuments gets documents
*/
func (a *Client) GetKnowledgeKnowledgebaseLanguageDocuments(ctx context.Context, params *GetKnowledgeKnowledgebaseLanguageDocumentsParams) (*GetKnowledgeKnowledgebaseLanguageDocumentsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKnowledgeKnowledgebaseLanguageDocuments",
		Method:             "GET",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKnowledgeKnowledgebaseLanguageDocumentsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKnowledgeKnowledgebaseLanguageDocumentsOK), nil

}

/*
GetKnowledgeKnowledgebaseLanguageTraining gets training detail
*/
func (a *Client) GetKnowledgeKnowledgebaseLanguageTraining(ctx context.Context, params *GetKnowledgeKnowledgebaseLanguageTrainingParams) (*GetKnowledgeKnowledgebaseLanguageTrainingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKnowledgeKnowledgebaseLanguageTraining",
		Method:             "GET",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKnowledgeKnowledgebaseLanguageTrainingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKnowledgeKnowledgebaseLanguageTrainingOK), nil

}

/*
GetKnowledgeKnowledgebaseLanguageTrainings gets all trainings information for a knowledgebase
*/
func (a *Client) GetKnowledgeKnowledgebaseLanguageTrainings(ctx context.Context, params *GetKnowledgeKnowledgebaseLanguageTrainingsParams) (*GetKnowledgeKnowledgebaseLanguageTrainingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKnowledgeKnowledgebaseLanguageTrainings",
		Method:             "GET",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKnowledgeKnowledgebaseLanguageTrainingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKnowledgeKnowledgebaseLanguageTrainingsOK), nil

}

/*
GetKnowledgeKnowledgebases gets knowledge bases
*/
func (a *Client) GetKnowledgeKnowledgebases(ctx context.Context, params *GetKnowledgeKnowledgebasesParams) (*GetKnowledgeKnowledgebasesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKnowledgeKnowledgebases",
		Method:             "GET",
		PathPattern:        "/api/v2/knowledge/knowledgebases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKnowledgeKnowledgebasesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKnowledgeKnowledgebasesOK), nil

}

/*
PatchKnowledgeKnowledgebase updates knowledge base
*/
func (a *Client) PatchKnowledgeKnowledgebase(ctx context.Context, params *PatchKnowledgeKnowledgebaseParams) (*PatchKnowledgeKnowledgebaseOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchKnowledgeKnowledgebase",
		Method:             "PATCH",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchKnowledgeKnowledgebaseReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchKnowledgeKnowledgebaseOK), nil

}

/*
PatchKnowledgeKnowledgebaseLanguageCategory updates category
*/
func (a *Client) PatchKnowledgeKnowledgebaseLanguageCategory(ctx context.Context, params *PatchKnowledgeKnowledgebaseLanguageCategoryParams) (*PatchKnowledgeKnowledgebaseLanguageCategoryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchKnowledgeKnowledgebaseLanguageCategory",
		Method:             "PATCH",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchKnowledgeKnowledgebaseLanguageCategoryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchKnowledgeKnowledgebaseLanguageCategoryOK), nil

}

/*
PatchKnowledgeKnowledgebaseLanguageDocument updates document
*/
func (a *Client) PatchKnowledgeKnowledgebaseLanguageDocument(ctx context.Context, params *PatchKnowledgeKnowledgebaseLanguageDocumentParams) (*PatchKnowledgeKnowledgebaseLanguageDocumentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchKnowledgeKnowledgebaseLanguageDocument",
		Method:             "PATCH",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchKnowledgeKnowledgebaseLanguageDocumentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchKnowledgeKnowledgebaseLanguageDocumentOK), nil

}

/*
PatchKnowledgeKnowledgebaseLanguageDocuments updates documents collection
*/
func (a *Client) PatchKnowledgeKnowledgebaseLanguageDocuments(ctx context.Context, params *PatchKnowledgeKnowledgebaseLanguageDocumentsParams) (*PatchKnowledgeKnowledgebaseLanguageDocumentsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchKnowledgeKnowledgebaseLanguageDocuments",
		Method:             "PATCH",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchKnowledgeKnowledgebaseLanguageDocumentsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchKnowledgeKnowledgebaseLanguageDocumentsOK), nil

}

/*
PostKnowledgeKnowledgebaseLanguageCategories creates new category
*/
func (a *Client) PostKnowledgeKnowledgebaseLanguageCategories(ctx context.Context, params *PostKnowledgeKnowledgebaseLanguageCategoriesParams) (*PostKnowledgeKnowledgebaseLanguageCategoriesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postKnowledgeKnowledgebaseLanguageCategories",
		Method:             "POST",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostKnowledgeKnowledgebaseLanguageCategoriesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostKnowledgeKnowledgebaseLanguageCategoriesOK), nil

}

/*
PostKnowledgeKnowledgebaseLanguageDocuments creates document
*/
func (a *Client) PostKnowledgeKnowledgebaseLanguageDocuments(ctx context.Context, params *PostKnowledgeKnowledgebaseLanguageDocumentsParams) (*PostKnowledgeKnowledgebaseLanguageDocumentsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postKnowledgeKnowledgebaseLanguageDocuments",
		Method:             "POST",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostKnowledgeKnowledgebaseLanguageDocumentsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostKnowledgeKnowledgebaseLanguageDocumentsOK), nil

}

/*
PostKnowledgeKnowledgebaseLanguageTrainingPromote promotes trained documents from draft state to active
*/
func (a *Client) PostKnowledgeKnowledgebaseLanguageTrainingPromote(ctx context.Context, params *PostKnowledgeKnowledgebaseLanguageTrainingPromoteParams) (*PostKnowledgeKnowledgebaseLanguageTrainingPromoteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postKnowledgeKnowledgebaseLanguageTrainingPromote",
		Method:             "POST",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}/promote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostKnowledgeKnowledgebaseLanguageTrainingPromoteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostKnowledgeKnowledgebaseLanguageTrainingPromoteOK), nil

}

/*
PostKnowledgeKnowledgebaseLanguageTrainings triggers training
*/
func (a *Client) PostKnowledgeKnowledgebaseLanguageTrainings(ctx context.Context, params *PostKnowledgeKnowledgebaseLanguageTrainingsParams) (*PostKnowledgeKnowledgebaseLanguageTrainingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postKnowledgeKnowledgebaseLanguageTrainings",
		Method:             "POST",
		PathPattern:        "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostKnowledgeKnowledgebaseLanguageTrainingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostKnowledgeKnowledgebaseLanguageTrainingsOK), nil

}

/*
PostKnowledgeKnowledgebases creates new knowledge base
*/
func (a *Client) PostKnowledgeKnowledgebases(ctx context.Context, params *PostKnowledgeKnowledgebasesParams) (*PostKnowledgeKnowledgebasesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postKnowledgeKnowledgebases",
		Method:             "POST",
		PathPattern:        "/api/v2/knowledge/knowledgebases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostKnowledgeKnowledgebasesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostKnowledgeKnowledgebasesOK), nil

}

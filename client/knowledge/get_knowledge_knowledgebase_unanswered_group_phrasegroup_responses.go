// Code generated by go-swagger; DO NOT EDIT.

package knowledge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupReader is a Reader for the GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroup structure.
type GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK creates a GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK with default headers values
func NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK() *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK {
	return &GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK{}
}

/*GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK handles this case with default header values.

successful operation
*/
type GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK struct {
	Payload *models.UnansweredPhraseGroup
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] getKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK  %+v", 200, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK) GetPayload() *models.UnansweredPhraseGroup {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UnansweredPhraseGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest creates a GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest with default headers values
func NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest() *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest {
	return &GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest{}
}

/*GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] getKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest  %+v", 400, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized creates a GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized with default headers values
func NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized() *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized {
	return &GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized{}
}

/*GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] getKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized  %+v", 401, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden creates a GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden with default headers values
func NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden() *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden {
	return &GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden{}
}

/*GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] getKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden  %+v", 403, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound creates a GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound with default headers values
func NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound() *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound {
	return &GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound{}
}

/*GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] getKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound  %+v", 404, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout creates a GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout with default headers values
func NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout() *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout {
	return &GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout{}
}

/*GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] getKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge creates a GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge with default headers values
func NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge() *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge {
	return &GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge{}
}

/*GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] getKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType creates a GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType with default headers values
func NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType() *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType {
	return &GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType{}
}

/*GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] getKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests creates a GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests with default headers values
func NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests() *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests {
	return &GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests{}
}

/*GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] getKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError creates a GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError with default headers values
func NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError() *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError {
	return &GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError{}
}

/*GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] getKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError  %+v", 500, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable creates a GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable with default headers values
func NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable() *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable {
	return &GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable{}
}

/*GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] getKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout creates a GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout with default headers values
func NewGetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout() *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout {
	return &GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout{}
}

/*GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] getKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

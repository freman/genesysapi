// Code generated by go-swagger; DO NOT EDIT.

package knowledge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchKnowledgeKnowledgebaseDocumentVariationReader is a Reader for the PatchKnowledgeKnowledgebaseDocumentVariation structure.
type PatchKnowledgeKnowledgebaseDocumentVariationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchKnowledgeKnowledgebaseDocumentVariationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchKnowledgeKnowledgebaseDocumentVariationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchKnowledgeKnowledgebaseDocumentVariationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchKnowledgeKnowledgebaseDocumentVariationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchKnowledgeKnowledgebaseDocumentVariationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchKnowledgeKnowledgebaseDocumentVariationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchKnowledgeKnowledgebaseDocumentVariationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchKnowledgeKnowledgebaseDocumentVariationOK creates a PatchKnowledgeKnowledgebaseDocumentVariationOK with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentVariationOK() *PatchKnowledgeKnowledgebaseDocumentVariationOK {
	return &PatchKnowledgeKnowledgebaseDocumentVariationOK{}
}

/*
PatchKnowledgeKnowledgebaseDocumentVariationOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchKnowledgeKnowledgebaseDocumentVariationOK struct {
	Payload *models.DocumentVariation
}

// IsSuccess returns true when this patch knowledge knowledgebase document variation o k response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch knowledge knowledgebase document variation o k response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase document variation o k response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch knowledge knowledgebase document variation o k response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase document variation o k response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseDocumentVariationOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationOK  %+v", 200, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationOK  %+v", 200, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationOK) GetPayload() *models.DocumentVariation {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DocumentVariation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentVariationBadRequest creates a PatchKnowledgeKnowledgebaseDocumentVariationBadRequest with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentVariationBadRequest() *PatchKnowledgeKnowledgebaseDocumentVariationBadRequest {
	return &PatchKnowledgeKnowledgebaseDocumentVariationBadRequest{}
}

/*
PatchKnowledgeKnowledgebaseDocumentVariationBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchKnowledgeKnowledgebaseDocumentVariationBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase document variation bad request response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase document variation bad request response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase document variation bad request response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase document variation bad request response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase document variation bad request response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseDocumentVariationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentVariationUnauthorized creates a PatchKnowledgeKnowledgebaseDocumentVariationUnauthorized with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentVariationUnauthorized() *PatchKnowledgeKnowledgebaseDocumentVariationUnauthorized {
	return &PatchKnowledgeKnowledgebaseDocumentVariationUnauthorized{}
}

/*
PatchKnowledgeKnowledgebaseDocumentVariationUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchKnowledgeKnowledgebaseDocumentVariationUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase document variation unauthorized response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase document variation unauthorized response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase document variation unauthorized response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase document variation unauthorized response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase document variation unauthorized response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentVariationForbidden creates a PatchKnowledgeKnowledgebaseDocumentVariationForbidden with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentVariationForbidden() *PatchKnowledgeKnowledgebaseDocumentVariationForbidden {
	return &PatchKnowledgeKnowledgebaseDocumentVariationForbidden{}
}

/*
PatchKnowledgeKnowledgebaseDocumentVariationForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchKnowledgeKnowledgebaseDocumentVariationForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase document variation forbidden response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase document variation forbidden response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase document variation forbidden response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase document variation forbidden response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase document variation forbidden response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseDocumentVariationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationForbidden  %+v", 403, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationForbidden  %+v", 403, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentVariationNotFound creates a PatchKnowledgeKnowledgebaseDocumentVariationNotFound with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentVariationNotFound() *PatchKnowledgeKnowledgebaseDocumentVariationNotFound {
	return &PatchKnowledgeKnowledgebaseDocumentVariationNotFound{}
}

/*
PatchKnowledgeKnowledgebaseDocumentVariationNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchKnowledgeKnowledgebaseDocumentVariationNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase document variation not found response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase document variation not found response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase document variation not found response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase document variation not found response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase document variation not found response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseDocumentVariationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationNotFound  %+v", 404, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationNotFound  %+v", 404, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout creates a PatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout() *PatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout {
	return &PatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout{}
}

/*
PatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase document variation request timeout response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase document variation request timeout response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase document variation request timeout response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase document variation request timeout response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase document variation request timeout response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge creates a PatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge() *PatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge {
	return &PatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge{}
}

/*
PatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase document variation request entity too large response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase document variation request entity too large response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase document variation request entity too large response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase document variation request entity too large response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase document variation request entity too large response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType creates a PatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType() *PatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType {
	return &PatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType{}
}

/*
PatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase document variation unsupported media type response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase document variation unsupported media type response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase document variation unsupported media type response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase document variation unsupported media type response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase document variation unsupported media type response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests creates a PatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests() *PatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests {
	return &PatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests{}
}

/*
PatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase document variation too many requests response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase document variation too many requests response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase document variation too many requests response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase document variation too many requests response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase document variation too many requests response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentVariationInternalServerError creates a PatchKnowledgeKnowledgebaseDocumentVariationInternalServerError with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentVariationInternalServerError() *PatchKnowledgeKnowledgebaseDocumentVariationInternalServerError {
	return &PatchKnowledgeKnowledgebaseDocumentVariationInternalServerError{}
}

/*
PatchKnowledgeKnowledgebaseDocumentVariationInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchKnowledgeKnowledgebaseDocumentVariationInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase document variation internal server error response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase document variation internal server error response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase document variation internal server error response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch knowledge knowledgebase document variation internal server error response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch knowledge knowledgebase document variation internal server error response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseDocumentVariationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable creates a PatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable() *PatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable {
	return &PatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable{}
}

/*
PatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase document variation service unavailable response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase document variation service unavailable response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase document variation service unavailable response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch knowledge knowledgebase document variation service unavailable response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch knowledge knowledgebase document variation service unavailable response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout creates a PatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout with default headers values
func NewPatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout() *PatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout {
	return &PatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout{}
}

/*
PatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase document variation gateway timeout response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase document variation gateway timeout response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase document variation gateway timeout response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch knowledge knowledgebase document variation gateway timeout response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch knowledge knowledgebase document variation gateway timeout response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}][%d] patchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseDocumentVariationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package knowledge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupReader is a Reader for the PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup structure.
type PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK creates a PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK with default headers values
func NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK() *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK {
	return &PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK{}
}

/*
PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK struct {
	Payload *models.UnansweredPhraseGroupUpdateResponse
}

// IsSuccess returns true when this patch knowledge knowledgebase unanswered group phrasegroup o k response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch knowledge knowledgebase unanswered group phrasegroup o k response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase unanswered group phrasegroup o k response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch knowledge knowledgebase unanswered group phrasegroup o k response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase unanswered group phrasegroup o k response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK  %+v", 200, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK  %+v", 200, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK) GetPayload() *models.UnansweredPhraseGroupUpdateResponse {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UnansweredPhraseGroupUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest creates a PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest with default headers values
func NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest() *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest {
	return &PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest{}
}

/*
PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase unanswered group phrasegroup bad request response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase unanswered group phrasegroup bad request response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase unanswered group phrasegroup bad request response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase unanswered group phrasegroup bad request response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase unanswered group phrasegroup bad request response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest  %+v", 400, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest  %+v", 400, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized creates a PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized with default headers values
func NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized() *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized {
	return &PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized{}
}

/*
PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase unanswered group phrasegroup unauthorized response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase unanswered group phrasegroup unauthorized response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase unanswered group phrasegroup unauthorized response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase unanswered group phrasegroup unauthorized response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase unanswered group phrasegroup unauthorized response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden creates a PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden with default headers values
func NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden() *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden {
	return &PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden{}
}

/*
PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase unanswered group phrasegroup forbidden response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase unanswered group phrasegroup forbidden response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase unanswered group phrasegroup forbidden response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase unanswered group phrasegroup forbidden response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase unanswered group phrasegroup forbidden response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden  %+v", 403, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden  %+v", 403, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound creates a PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound with default headers values
func NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound() *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound {
	return &PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound{}
}

/*
PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase unanswered group phrasegroup not found response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase unanswered group phrasegroup not found response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase unanswered group phrasegroup not found response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase unanswered group phrasegroup not found response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase unanswered group phrasegroup not found response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound  %+v", 404, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound  %+v", 404, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout creates a PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout with default headers values
func NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout() *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout {
	return &PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout{}
}

/*
PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase unanswered group phrasegroup request timeout response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase unanswered group phrasegroup request timeout response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase unanswered group phrasegroup request timeout response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase unanswered group phrasegroup request timeout response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase unanswered group phrasegroup request timeout response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge creates a PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge with default headers values
func NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge() *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge {
	return &PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge{}
}

/*
PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase unanswered group phrasegroup request entity too large response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase unanswered group phrasegroup request entity too large response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase unanswered group phrasegroup request entity too large response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase unanswered group phrasegroup request entity too large response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase unanswered group phrasegroup request entity too large response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType creates a PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType with default headers values
func NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType() *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType {
	return &PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType{}
}

/*
PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase unanswered group phrasegroup unsupported media type response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase unanswered group phrasegroup unsupported media type response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase unanswered group phrasegroup unsupported media type response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase unanswered group phrasegroup unsupported media type response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase unanswered group phrasegroup unsupported media type response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests creates a PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests with default headers values
func NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests() *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests {
	return &PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests{}
}

/*
PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase unanswered group phrasegroup too many requests response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase unanswered group phrasegroup too many requests response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase unanswered group phrasegroup too many requests response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch knowledge knowledgebase unanswered group phrasegroup too many requests response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch knowledge knowledgebase unanswered group phrasegroup too many requests response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError creates a PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError with default headers values
func NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError() *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError {
	return &PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError{}
}

/*
PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase unanswered group phrasegroup internal server error response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase unanswered group phrasegroup internal server error response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase unanswered group phrasegroup internal server error response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch knowledge knowledgebase unanswered group phrasegroup internal server error response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch knowledge knowledgebase unanswered group phrasegroup internal server error response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable creates a PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable with default headers values
func NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable() *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable {
	return &PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable{}
}

/*
PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase unanswered group phrasegroup service unavailable response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase unanswered group phrasegroup service unavailable response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase unanswered group phrasegroup service unavailable response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch knowledge knowledgebase unanswered group phrasegroup service unavailable response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch knowledge knowledgebase unanswered group phrasegroup service unavailable response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout creates a PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout with default headers values
func NewPatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout() *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout {
	return &PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout{}
}

/*
PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch knowledge knowledgebase unanswered group phrasegroup gateway timeout response has a 2xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch knowledge knowledgebase unanswered group phrasegroup gateway timeout response has a 3xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch knowledge knowledgebase unanswered group phrasegroup gateway timeout response has a 4xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch knowledge knowledgebase unanswered group phrasegroup gateway timeout response has a 5xx status code
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch knowledge knowledgebase unanswered group phrasegroup gateway timeout response a status code equal to that given
func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}][%d] patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package knowledge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// NewPatchKnowledgeKnowledgebaseLabelParams creates a new PatchKnowledgeKnowledgebaseLabelParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchKnowledgeKnowledgebaseLabelParams() *PatchKnowledgeKnowledgebaseLabelParams {
	return &PatchKnowledgeKnowledgebaseLabelParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchKnowledgeKnowledgebaseLabelParamsWithTimeout creates a new PatchKnowledgeKnowledgebaseLabelParams object
// with the ability to set a timeout on a request.
func NewPatchKnowledgeKnowledgebaseLabelParamsWithTimeout(timeout time.Duration) *PatchKnowledgeKnowledgebaseLabelParams {
	return &PatchKnowledgeKnowledgebaseLabelParams{
		timeout: timeout,
	}
}

// NewPatchKnowledgeKnowledgebaseLabelParamsWithContext creates a new PatchKnowledgeKnowledgebaseLabelParams object
// with the ability to set a context for a request.
func NewPatchKnowledgeKnowledgebaseLabelParamsWithContext(ctx context.Context) *PatchKnowledgeKnowledgebaseLabelParams {
	return &PatchKnowledgeKnowledgebaseLabelParams{
		Context: ctx,
	}
}

// NewPatchKnowledgeKnowledgebaseLabelParamsWithHTTPClient creates a new PatchKnowledgeKnowledgebaseLabelParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchKnowledgeKnowledgebaseLabelParamsWithHTTPClient(client *http.Client) *PatchKnowledgeKnowledgebaseLabelParams {
	return &PatchKnowledgeKnowledgebaseLabelParams{
		HTTPClient: client,
	}
}

/*
PatchKnowledgeKnowledgebaseLabelParams contains all the parameters to send to the API endpoint

	for the patch knowledge knowledgebase label operation.

	Typically these are written to a http.Request.
*/
type PatchKnowledgeKnowledgebaseLabelParams struct {

	// Body.
	Body *models.LabelUpdateRequest

	/* KnowledgeBaseID.

	   Knowledge base ID
	*/
	KnowledgeBaseID string

	/* LabelID.

	   Label ID
	*/
	LabelID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch knowledge knowledgebase label params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchKnowledgeKnowledgebaseLabelParams) WithDefaults() *PatchKnowledgeKnowledgebaseLabelParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch knowledge knowledgebase label params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchKnowledgeKnowledgebaseLabelParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the patch knowledge knowledgebase label params
func (o *PatchKnowledgeKnowledgebaseLabelParams) WithTimeout(timeout time.Duration) *PatchKnowledgeKnowledgebaseLabelParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch knowledge knowledgebase label params
func (o *PatchKnowledgeKnowledgebaseLabelParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch knowledge knowledgebase label params
func (o *PatchKnowledgeKnowledgebaseLabelParams) WithContext(ctx context.Context) *PatchKnowledgeKnowledgebaseLabelParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch knowledge knowledgebase label params
func (o *PatchKnowledgeKnowledgebaseLabelParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch knowledge knowledgebase label params
func (o *PatchKnowledgeKnowledgebaseLabelParams) WithHTTPClient(client *http.Client) *PatchKnowledgeKnowledgebaseLabelParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch knowledge knowledgebase label params
func (o *PatchKnowledgeKnowledgebaseLabelParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the patch knowledge knowledgebase label params
func (o *PatchKnowledgeKnowledgebaseLabelParams) WithBody(body *models.LabelUpdateRequest) *PatchKnowledgeKnowledgebaseLabelParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch knowledge knowledgebase label params
func (o *PatchKnowledgeKnowledgebaseLabelParams) SetBody(body *models.LabelUpdateRequest) {
	o.Body = body
}

// WithKnowledgeBaseID adds the knowledgeBaseID to the patch knowledge knowledgebase label params
func (o *PatchKnowledgeKnowledgebaseLabelParams) WithKnowledgeBaseID(knowledgeBaseID string) *PatchKnowledgeKnowledgebaseLabelParams {
	o.SetKnowledgeBaseID(knowledgeBaseID)
	return o
}

// SetKnowledgeBaseID adds the knowledgeBaseId to the patch knowledge knowledgebase label params
func (o *PatchKnowledgeKnowledgebaseLabelParams) SetKnowledgeBaseID(knowledgeBaseID string) {
	o.KnowledgeBaseID = knowledgeBaseID
}

// WithLabelID adds the labelID to the patch knowledge knowledgebase label params
func (o *PatchKnowledgeKnowledgebaseLabelParams) WithLabelID(labelID string) *PatchKnowledgeKnowledgebaseLabelParams {
	o.SetLabelID(labelID)
	return o
}

// SetLabelID adds the labelId to the patch knowledge knowledgebase label params
func (o *PatchKnowledgeKnowledgebaseLabelParams) SetLabelID(labelID string) {
	o.LabelID = labelID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchKnowledgeKnowledgebaseLabelParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param knowledgeBaseId
	if err := r.SetPathParam("knowledgeBaseId", o.KnowledgeBaseID); err != nil {
		return err
	}

	// path param labelId
	if err := r.SetPathParam("labelId", o.LabelID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

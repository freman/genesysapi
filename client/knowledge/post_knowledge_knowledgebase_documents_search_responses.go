// Code generated by go-swagger; DO NOT EDIT.

package knowledge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostKnowledgeKnowledgebaseDocumentsSearchReader is a Reader for the PostKnowledgeKnowledgebaseDocumentsSearch structure.
type PostKnowledgeKnowledgebaseDocumentsSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostKnowledgeKnowledgebaseDocumentsSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostKnowledgeKnowledgebaseDocumentsSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostKnowledgeKnowledgebaseDocumentsSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostKnowledgeKnowledgebaseDocumentsSearchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostKnowledgeKnowledgebaseDocumentsSearchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostKnowledgeKnowledgebaseDocumentsSearchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostKnowledgeKnowledgebaseDocumentsSearchRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostKnowledgeKnowledgebaseDocumentsSearchRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostKnowledgeKnowledgebaseDocumentsSearchUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostKnowledgeKnowledgebaseDocumentsSearchTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostKnowledgeKnowledgebaseDocumentsSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostKnowledgeKnowledgebaseDocumentsSearchServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostKnowledgeKnowledgebaseDocumentsSearchGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostKnowledgeKnowledgebaseDocumentsSearchOK creates a PostKnowledgeKnowledgebaseDocumentsSearchOK with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsSearchOK() *PostKnowledgeKnowledgebaseDocumentsSearchOK {
	return &PostKnowledgeKnowledgebaseDocumentsSearchOK{}
}

/*PostKnowledgeKnowledgebaseDocumentsSearchOK handles this case with default header values.

successful operation
*/
type PostKnowledgeKnowledgebaseDocumentsSearchOK struct {
	Payload *models.KnowledgeDocumentSearch
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search][%d] postKnowledgeKnowledgebaseDocumentsSearchOK  %+v", 200, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchOK) GetPayload() *models.KnowledgeDocumentSearch {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KnowledgeDocumentSearch)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsSearchBadRequest creates a PostKnowledgeKnowledgebaseDocumentsSearchBadRequest with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsSearchBadRequest() *PostKnowledgeKnowledgebaseDocumentsSearchBadRequest {
	return &PostKnowledgeKnowledgebaseDocumentsSearchBadRequest{}
}

/*PostKnowledgeKnowledgebaseDocumentsSearchBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostKnowledgeKnowledgebaseDocumentsSearchBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search][%d] postKnowledgeKnowledgebaseDocumentsSearchBadRequest  %+v", 400, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsSearchUnauthorized creates a PostKnowledgeKnowledgebaseDocumentsSearchUnauthorized with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsSearchUnauthorized() *PostKnowledgeKnowledgebaseDocumentsSearchUnauthorized {
	return &PostKnowledgeKnowledgebaseDocumentsSearchUnauthorized{}
}

/*PostKnowledgeKnowledgebaseDocumentsSearchUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostKnowledgeKnowledgebaseDocumentsSearchUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search][%d] postKnowledgeKnowledgebaseDocumentsSearchUnauthorized  %+v", 401, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsSearchForbidden creates a PostKnowledgeKnowledgebaseDocumentsSearchForbidden with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsSearchForbidden() *PostKnowledgeKnowledgebaseDocumentsSearchForbidden {
	return &PostKnowledgeKnowledgebaseDocumentsSearchForbidden{}
}

/*PostKnowledgeKnowledgebaseDocumentsSearchForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostKnowledgeKnowledgebaseDocumentsSearchForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search][%d] postKnowledgeKnowledgebaseDocumentsSearchForbidden  %+v", 403, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsSearchNotFound creates a PostKnowledgeKnowledgebaseDocumentsSearchNotFound with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsSearchNotFound() *PostKnowledgeKnowledgebaseDocumentsSearchNotFound {
	return &PostKnowledgeKnowledgebaseDocumentsSearchNotFound{}
}

/*PostKnowledgeKnowledgebaseDocumentsSearchNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostKnowledgeKnowledgebaseDocumentsSearchNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search][%d] postKnowledgeKnowledgebaseDocumentsSearchNotFound  %+v", 404, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsSearchRequestTimeout creates a PostKnowledgeKnowledgebaseDocumentsSearchRequestTimeout with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsSearchRequestTimeout() *PostKnowledgeKnowledgebaseDocumentsSearchRequestTimeout {
	return &PostKnowledgeKnowledgebaseDocumentsSearchRequestTimeout{}
}

/*PostKnowledgeKnowledgebaseDocumentsSearchRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostKnowledgeKnowledgebaseDocumentsSearchRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search][%d] postKnowledgeKnowledgebaseDocumentsSearchRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsSearchRequestEntityTooLarge creates a PostKnowledgeKnowledgebaseDocumentsSearchRequestEntityTooLarge with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsSearchRequestEntityTooLarge() *PostKnowledgeKnowledgebaseDocumentsSearchRequestEntityTooLarge {
	return &PostKnowledgeKnowledgebaseDocumentsSearchRequestEntityTooLarge{}
}

/*PostKnowledgeKnowledgebaseDocumentsSearchRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostKnowledgeKnowledgebaseDocumentsSearchRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search][%d] postKnowledgeKnowledgebaseDocumentsSearchRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsSearchUnsupportedMediaType creates a PostKnowledgeKnowledgebaseDocumentsSearchUnsupportedMediaType with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsSearchUnsupportedMediaType() *PostKnowledgeKnowledgebaseDocumentsSearchUnsupportedMediaType {
	return &PostKnowledgeKnowledgebaseDocumentsSearchUnsupportedMediaType{}
}

/*PostKnowledgeKnowledgebaseDocumentsSearchUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostKnowledgeKnowledgebaseDocumentsSearchUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search][%d] postKnowledgeKnowledgebaseDocumentsSearchUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsSearchTooManyRequests creates a PostKnowledgeKnowledgebaseDocumentsSearchTooManyRequests with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsSearchTooManyRequests() *PostKnowledgeKnowledgebaseDocumentsSearchTooManyRequests {
	return &PostKnowledgeKnowledgebaseDocumentsSearchTooManyRequests{}
}

/*PostKnowledgeKnowledgebaseDocumentsSearchTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostKnowledgeKnowledgebaseDocumentsSearchTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search][%d] postKnowledgeKnowledgebaseDocumentsSearchTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsSearchInternalServerError creates a PostKnowledgeKnowledgebaseDocumentsSearchInternalServerError with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsSearchInternalServerError() *PostKnowledgeKnowledgebaseDocumentsSearchInternalServerError {
	return &PostKnowledgeKnowledgebaseDocumentsSearchInternalServerError{}
}

/*PostKnowledgeKnowledgebaseDocumentsSearchInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostKnowledgeKnowledgebaseDocumentsSearchInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search][%d] postKnowledgeKnowledgebaseDocumentsSearchInternalServerError  %+v", 500, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsSearchServiceUnavailable creates a PostKnowledgeKnowledgebaseDocumentsSearchServiceUnavailable with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsSearchServiceUnavailable() *PostKnowledgeKnowledgebaseDocumentsSearchServiceUnavailable {
	return &PostKnowledgeKnowledgebaseDocumentsSearchServiceUnavailable{}
}

/*PostKnowledgeKnowledgebaseDocumentsSearchServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostKnowledgeKnowledgebaseDocumentsSearchServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search][%d] postKnowledgeKnowledgebaseDocumentsSearchServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsSearchGatewayTimeout creates a PostKnowledgeKnowledgebaseDocumentsSearchGatewayTimeout with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsSearchGatewayTimeout() *PostKnowledgeKnowledgebaseDocumentsSearchGatewayTimeout {
	return &PostKnowledgeKnowledgebaseDocumentsSearchGatewayTimeout{}
}

/*PostKnowledgeKnowledgebaseDocumentsSearchGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostKnowledgeKnowledgebaseDocumentsSearchGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search][%d] postKnowledgeKnowledgebaseDocumentsSearchGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsSearchGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

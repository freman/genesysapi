// Code generated by go-swagger; DO NOT EDIT.

package knowledge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetKnowledgeKnowledgebaseDocumentVersionReader is a Reader for the GetKnowledgeKnowledgebaseDocumentVersion structure.
type GetKnowledgeKnowledgebaseDocumentVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetKnowledgeKnowledgebaseDocumentVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetKnowledgeKnowledgebaseDocumentVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetKnowledgeKnowledgebaseDocumentVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetKnowledgeKnowledgebaseDocumentVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetKnowledgeKnowledgebaseDocumentVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetKnowledgeKnowledgebaseDocumentVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetKnowledgeKnowledgebaseDocumentVersionRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetKnowledgeKnowledgebaseDocumentVersionRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetKnowledgeKnowledgebaseDocumentVersionUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetKnowledgeKnowledgebaseDocumentVersionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetKnowledgeKnowledgebaseDocumentVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetKnowledgeKnowledgebaseDocumentVersionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetKnowledgeKnowledgebaseDocumentVersionGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetKnowledgeKnowledgebaseDocumentVersionOK creates a GetKnowledgeKnowledgebaseDocumentVersionOK with default headers values
func NewGetKnowledgeKnowledgebaseDocumentVersionOK() *GetKnowledgeKnowledgebaseDocumentVersionOK {
	return &GetKnowledgeKnowledgebaseDocumentVersionOK{}
}

/*GetKnowledgeKnowledgebaseDocumentVersionOK handles this case with default header values.

successful operation
*/
type GetKnowledgeKnowledgebaseDocumentVersionOK struct {
	Payload *models.KnowledgeDocumentVersion
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}][%d] getKnowledgeKnowledgebaseDocumentVersionOK  %+v", 200, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionOK) GetPayload() *models.KnowledgeDocumentVersion {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KnowledgeDocumentVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseDocumentVersionBadRequest creates a GetKnowledgeKnowledgebaseDocumentVersionBadRequest with default headers values
func NewGetKnowledgeKnowledgebaseDocumentVersionBadRequest() *GetKnowledgeKnowledgebaseDocumentVersionBadRequest {
	return &GetKnowledgeKnowledgebaseDocumentVersionBadRequest{}
}

/*GetKnowledgeKnowledgebaseDocumentVersionBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetKnowledgeKnowledgebaseDocumentVersionBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}][%d] getKnowledgeKnowledgebaseDocumentVersionBadRequest  %+v", 400, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseDocumentVersionUnauthorized creates a GetKnowledgeKnowledgebaseDocumentVersionUnauthorized with default headers values
func NewGetKnowledgeKnowledgebaseDocumentVersionUnauthorized() *GetKnowledgeKnowledgebaseDocumentVersionUnauthorized {
	return &GetKnowledgeKnowledgebaseDocumentVersionUnauthorized{}
}

/*GetKnowledgeKnowledgebaseDocumentVersionUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetKnowledgeKnowledgebaseDocumentVersionUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}][%d] getKnowledgeKnowledgebaseDocumentVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseDocumentVersionForbidden creates a GetKnowledgeKnowledgebaseDocumentVersionForbidden with default headers values
func NewGetKnowledgeKnowledgebaseDocumentVersionForbidden() *GetKnowledgeKnowledgebaseDocumentVersionForbidden {
	return &GetKnowledgeKnowledgebaseDocumentVersionForbidden{}
}

/*GetKnowledgeKnowledgebaseDocumentVersionForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetKnowledgeKnowledgebaseDocumentVersionForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}][%d] getKnowledgeKnowledgebaseDocumentVersionForbidden  %+v", 403, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseDocumentVersionNotFound creates a GetKnowledgeKnowledgebaseDocumentVersionNotFound with default headers values
func NewGetKnowledgeKnowledgebaseDocumentVersionNotFound() *GetKnowledgeKnowledgebaseDocumentVersionNotFound {
	return &GetKnowledgeKnowledgebaseDocumentVersionNotFound{}
}

/*GetKnowledgeKnowledgebaseDocumentVersionNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetKnowledgeKnowledgebaseDocumentVersionNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}][%d] getKnowledgeKnowledgebaseDocumentVersionNotFound  %+v", 404, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseDocumentVersionRequestTimeout creates a GetKnowledgeKnowledgebaseDocumentVersionRequestTimeout with default headers values
func NewGetKnowledgeKnowledgebaseDocumentVersionRequestTimeout() *GetKnowledgeKnowledgebaseDocumentVersionRequestTimeout {
	return &GetKnowledgeKnowledgebaseDocumentVersionRequestTimeout{}
}

/*GetKnowledgeKnowledgebaseDocumentVersionRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetKnowledgeKnowledgebaseDocumentVersionRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}][%d] getKnowledgeKnowledgebaseDocumentVersionRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseDocumentVersionRequestEntityTooLarge creates a GetKnowledgeKnowledgebaseDocumentVersionRequestEntityTooLarge with default headers values
func NewGetKnowledgeKnowledgebaseDocumentVersionRequestEntityTooLarge() *GetKnowledgeKnowledgebaseDocumentVersionRequestEntityTooLarge {
	return &GetKnowledgeKnowledgebaseDocumentVersionRequestEntityTooLarge{}
}

/*GetKnowledgeKnowledgebaseDocumentVersionRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetKnowledgeKnowledgebaseDocumentVersionRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}][%d] getKnowledgeKnowledgebaseDocumentVersionRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseDocumentVersionUnsupportedMediaType creates a GetKnowledgeKnowledgebaseDocumentVersionUnsupportedMediaType with default headers values
func NewGetKnowledgeKnowledgebaseDocumentVersionUnsupportedMediaType() *GetKnowledgeKnowledgebaseDocumentVersionUnsupportedMediaType {
	return &GetKnowledgeKnowledgebaseDocumentVersionUnsupportedMediaType{}
}

/*GetKnowledgeKnowledgebaseDocumentVersionUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetKnowledgeKnowledgebaseDocumentVersionUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}][%d] getKnowledgeKnowledgebaseDocumentVersionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseDocumentVersionTooManyRequests creates a GetKnowledgeKnowledgebaseDocumentVersionTooManyRequests with default headers values
func NewGetKnowledgeKnowledgebaseDocumentVersionTooManyRequests() *GetKnowledgeKnowledgebaseDocumentVersionTooManyRequests {
	return &GetKnowledgeKnowledgebaseDocumentVersionTooManyRequests{}
}

/*GetKnowledgeKnowledgebaseDocumentVersionTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetKnowledgeKnowledgebaseDocumentVersionTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}][%d] getKnowledgeKnowledgebaseDocumentVersionTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseDocumentVersionInternalServerError creates a GetKnowledgeKnowledgebaseDocumentVersionInternalServerError with default headers values
func NewGetKnowledgeKnowledgebaseDocumentVersionInternalServerError() *GetKnowledgeKnowledgebaseDocumentVersionInternalServerError {
	return &GetKnowledgeKnowledgebaseDocumentVersionInternalServerError{}
}

/*GetKnowledgeKnowledgebaseDocumentVersionInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetKnowledgeKnowledgebaseDocumentVersionInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}][%d] getKnowledgeKnowledgebaseDocumentVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseDocumentVersionServiceUnavailable creates a GetKnowledgeKnowledgebaseDocumentVersionServiceUnavailable with default headers values
func NewGetKnowledgeKnowledgebaseDocumentVersionServiceUnavailable() *GetKnowledgeKnowledgebaseDocumentVersionServiceUnavailable {
	return &GetKnowledgeKnowledgebaseDocumentVersionServiceUnavailable{}
}

/*GetKnowledgeKnowledgebaseDocumentVersionServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetKnowledgeKnowledgebaseDocumentVersionServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}][%d] getKnowledgeKnowledgebaseDocumentVersionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKnowledgeKnowledgebaseDocumentVersionGatewayTimeout creates a GetKnowledgeKnowledgebaseDocumentVersionGatewayTimeout with default headers values
func NewGetKnowledgeKnowledgebaseDocumentVersionGatewayTimeout() *GetKnowledgeKnowledgebaseDocumentVersionGatewayTimeout {
	return &GetKnowledgeKnowledgebaseDocumentVersionGatewayTimeout{}
}

/*GetKnowledgeKnowledgebaseDocumentVersionGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetKnowledgeKnowledgebaseDocumentVersionGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}][%d] getKnowledgeKnowledgebaseDocumentVersionGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetKnowledgeKnowledgebaseDocumentVersionGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

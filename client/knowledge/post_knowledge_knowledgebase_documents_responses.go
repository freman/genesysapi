// Code generated by go-swagger; DO NOT EDIT.

package knowledge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostKnowledgeKnowledgebaseDocumentsReader is a Reader for the PostKnowledgeKnowledgebaseDocuments structure.
type PostKnowledgeKnowledgebaseDocumentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostKnowledgeKnowledgebaseDocumentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostKnowledgeKnowledgebaseDocumentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostKnowledgeKnowledgebaseDocumentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostKnowledgeKnowledgebaseDocumentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostKnowledgeKnowledgebaseDocumentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostKnowledgeKnowledgebaseDocumentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostKnowledgeKnowledgebaseDocumentsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostKnowledgeKnowledgebaseDocumentsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostKnowledgeKnowledgebaseDocumentsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostKnowledgeKnowledgebaseDocumentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostKnowledgeKnowledgebaseDocumentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostKnowledgeKnowledgebaseDocumentsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostKnowledgeKnowledgebaseDocumentsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostKnowledgeKnowledgebaseDocumentsOK creates a PostKnowledgeKnowledgebaseDocumentsOK with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsOK() *PostKnowledgeKnowledgebaseDocumentsOK {
	return &PostKnowledgeKnowledgebaseDocumentsOK{}
}

/*PostKnowledgeKnowledgebaseDocumentsOK handles this case with default header values.

successful operation
*/
type PostKnowledgeKnowledgebaseDocumentsOK struct {
	Payload *models.KnowledgeDocumentResponse
}

func (o *PostKnowledgeKnowledgebaseDocumentsOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents][%d] postKnowledgeKnowledgebaseDocumentsOK  %+v", 200, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsOK) GetPayload() *models.KnowledgeDocumentResponse {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KnowledgeDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsBadRequest creates a PostKnowledgeKnowledgebaseDocumentsBadRequest with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsBadRequest() *PostKnowledgeKnowledgebaseDocumentsBadRequest {
	return &PostKnowledgeKnowledgebaseDocumentsBadRequest{}
}

/*PostKnowledgeKnowledgebaseDocumentsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostKnowledgeKnowledgebaseDocumentsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents][%d] postKnowledgeKnowledgebaseDocumentsBadRequest  %+v", 400, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsUnauthorized creates a PostKnowledgeKnowledgebaseDocumentsUnauthorized with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsUnauthorized() *PostKnowledgeKnowledgebaseDocumentsUnauthorized {
	return &PostKnowledgeKnowledgebaseDocumentsUnauthorized{}
}

/*PostKnowledgeKnowledgebaseDocumentsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostKnowledgeKnowledgebaseDocumentsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents][%d] postKnowledgeKnowledgebaseDocumentsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsForbidden creates a PostKnowledgeKnowledgebaseDocumentsForbidden with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsForbidden() *PostKnowledgeKnowledgebaseDocumentsForbidden {
	return &PostKnowledgeKnowledgebaseDocumentsForbidden{}
}

/*PostKnowledgeKnowledgebaseDocumentsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostKnowledgeKnowledgebaseDocumentsForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents][%d] postKnowledgeKnowledgebaseDocumentsForbidden  %+v", 403, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsNotFound creates a PostKnowledgeKnowledgebaseDocumentsNotFound with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsNotFound() *PostKnowledgeKnowledgebaseDocumentsNotFound {
	return &PostKnowledgeKnowledgebaseDocumentsNotFound{}
}

/*PostKnowledgeKnowledgebaseDocumentsNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostKnowledgeKnowledgebaseDocumentsNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents][%d] postKnowledgeKnowledgebaseDocumentsNotFound  %+v", 404, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsRequestTimeout creates a PostKnowledgeKnowledgebaseDocumentsRequestTimeout with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsRequestTimeout() *PostKnowledgeKnowledgebaseDocumentsRequestTimeout {
	return &PostKnowledgeKnowledgebaseDocumentsRequestTimeout{}
}

/*PostKnowledgeKnowledgebaseDocumentsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostKnowledgeKnowledgebaseDocumentsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents][%d] postKnowledgeKnowledgebaseDocumentsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsRequestEntityTooLarge creates a PostKnowledgeKnowledgebaseDocumentsRequestEntityTooLarge with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsRequestEntityTooLarge() *PostKnowledgeKnowledgebaseDocumentsRequestEntityTooLarge {
	return &PostKnowledgeKnowledgebaseDocumentsRequestEntityTooLarge{}
}

/*PostKnowledgeKnowledgebaseDocumentsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostKnowledgeKnowledgebaseDocumentsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents][%d] postKnowledgeKnowledgebaseDocumentsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsUnsupportedMediaType creates a PostKnowledgeKnowledgebaseDocumentsUnsupportedMediaType with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsUnsupportedMediaType() *PostKnowledgeKnowledgebaseDocumentsUnsupportedMediaType {
	return &PostKnowledgeKnowledgebaseDocumentsUnsupportedMediaType{}
}

/*PostKnowledgeKnowledgebaseDocumentsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostKnowledgeKnowledgebaseDocumentsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents][%d] postKnowledgeKnowledgebaseDocumentsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsTooManyRequests creates a PostKnowledgeKnowledgebaseDocumentsTooManyRequests with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsTooManyRequests() *PostKnowledgeKnowledgebaseDocumentsTooManyRequests {
	return &PostKnowledgeKnowledgebaseDocumentsTooManyRequests{}
}

/*PostKnowledgeKnowledgebaseDocumentsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostKnowledgeKnowledgebaseDocumentsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents][%d] postKnowledgeKnowledgebaseDocumentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsInternalServerError creates a PostKnowledgeKnowledgebaseDocumentsInternalServerError with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsInternalServerError() *PostKnowledgeKnowledgebaseDocumentsInternalServerError {
	return &PostKnowledgeKnowledgebaseDocumentsInternalServerError{}
}

/*PostKnowledgeKnowledgebaseDocumentsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostKnowledgeKnowledgebaseDocumentsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents][%d] postKnowledgeKnowledgebaseDocumentsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsServiceUnavailable creates a PostKnowledgeKnowledgebaseDocumentsServiceUnavailable with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsServiceUnavailable() *PostKnowledgeKnowledgebaseDocumentsServiceUnavailable {
	return &PostKnowledgeKnowledgebaseDocumentsServiceUnavailable{}
}

/*PostKnowledgeKnowledgebaseDocumentsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostKnowledgeKnowledgebaseDocumentsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents][%d] postKnowledgeKnowledgebaseDocumentsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKnowledgeKnowledgebaseDocumentsGatewayTimeout creates a PostKnowledgeKnowledgebaseDocumentsGatewayTimeout with default headers values
func NewPostKnowledgeKnowledgebaseDocumentsGatewayTimeout() *PostKnowledgeKnowledgebaseDocumentsGatewayTimeout {
	return &PostKnowledgeKnowledgebaseDocumentsGatewayTimeout{}
}

/*PostKnowledgeKnowledgebaseDocumentsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostKnowledgeKnowledgebaseDocumentsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostKnowledgeKnowledgebaseDocumentsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents][%d] postKnowledgeKnowledgebaseDocumentsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostKnowledgeKnowledgebaseDocumentsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostKnowledgeKnowledgebaseDocumentsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

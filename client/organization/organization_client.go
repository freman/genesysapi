// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the organization client
type API interface {
	/*
	   GetFieldconfig fetches field config for an entity type
	*/
	GetFieldconfig(ctx context.Context, params *GetFieldconfigParams) (*GetFieldconfigOK, error)
	/*
	   GetOrganizationsEmbeddedintegration gets the list of domains that will be allowed to embed pure cloud applications
	*/
	GetOrganizationsEmbeddedintegration(ctx context.Context, params *GetOrganizationsEmbeddedintegrationParams) (*GetOrganizationsEmbeddedintegrationOK, error)
	/*
	   GetOrganizationsIpaddressauthentication gets organization IP address whitelist settings
	*/
	GetOrganizationsIpaddressauthentication(ctx context.Context, params *GetOrganizationsIpaddressauthenticationParams) (*GetOrganizationsIpaddressauthenticationOK, error)
	/*
	   GetOrganizationsLimitsChangerequest gets a limit change request
	*/
	GetOrganizationsLimitsChangerequest(ctx context.Context, params *GetOrganizationsLimitsChangerequestParams) (*GetOrganizationsLimitsChangerequestOK, error)
	/*
	   GetOrganizationsLimitsChangerequests gets the available limit change requests
	   Timestamp interval defaults to the last 365 days if both query parameters are omitted. If only one parameter is omitted, the interval will default to a 180 day range in the specified direction.
	*/
	GetOrganizationsLimitsChangerequests(ctx context.Context, params *GetOrganizationsLimitsChangerequestsParams) (*GetOrganizationsLimitsChangerequestsOK, error)
	/*
	   GetOrganizationsLimitsDocs gets a link to the limit documentation
	*/
	GetOrganizationsLimitsDocs(ctx context.Context, params *GetOrganizationsLimitsDocsParams) (*GetOrganizationsLimitsDocsOK, error)
	/*
	   GetOrganizationsLimitsNamespace gets the effective limits in a namespace for an organization
	*/
	GetOrganizationsLimitsNamespace(ctx context.Context, params *GetOrganizationsLimitsNamespaceParams) (*GetOrganizationsLimitsNamespaceOK, error)
	/*
	   GetOrganizationsLimitsNamespaces gets the available limit namespaces
	*/
	GetOrganizationsLimitsNamespaces(ctx context.Context, params *GetOrganizationsLimitsNamespacesParams) (*GetOrganizationsLimitsNamespacesOK, error)
	/*
	   GetOrganizationsMe gets organization
	*/
	GetOrganizationsMe(ctx context.Context, params *GetOrganizationsMeParams) (*GetOrganizationsMeOK, error)
	/*
	   GetOrganizationsWhitelist uses p u t api v2 organizations embeddedintegration instead
	*/
	GetOrganizationsWhitelist(ctx context.Context, params *GetOrganizationsWhitelistParams) (*GetOrganizationsWhitelistOK, error)
	/*
	   PatchOrganizationsFeature updates organization
	*/
	PatchOrganizationsFeature(ctx context.Context, params *PatchOrganizationsFeatureParams) (*PatchOrganizationsFeatureOK, error)
	/*
	   PutOrganizationsEmbeddedintegration updates the list of domains that will be allowed to embed pure cloud applications
	*/
	PutOrganizationsEmbeddedintegration(ctx context.Context, params *PutOrganizationsEmbeddedintegrationParams) (*PutOrganizationsEmbeddedintegrationOK, error)
	/*
	   PutOrganizationsIpaddressauthentication updates organization IP address whitelist settings
	*/
	PutOrganizationsIpaddressauthentication(ctx context.Context, params *PutOrganizationsIpaddressauthenticationParams) (*PutOrganizationsIpaddressauthenticationOK, error)
	/*
	   PutOrganizationsMe updates organization
	*/
	PutOrganizationsMe(ctx context.Context, params *PutOrganizationsMeParams) (*PutOrganizationsMeOK, error)
	/*
	   PutOrganizationsWhitelist uses p u t api v2 organizations embeddedintegration instead
	*/
	PutOrganizationsWhitelist(ctx context.Context, params *PutOrganizationsWhitelistParams) (*PutOrganizationsWhitelistOK, error)
}

// New creates a new organization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for organization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetFieldconfig fetches field config for an entity type
*/
func (a *Client) GetFieldconfig(ctx context.Context, params *GetFieldconfigParams) (*GetFieldconfigOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFieldconfig",
		Method:             "GET",
		PathPattern:        "/api/v2/fieldconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFieldconfigReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFieldconfigOK), nil

}

/*
GetOrganizationsEmbeddedintegration gets the list of domains that will be allowed to embed pure cloud applications
*/
func (a *Client) GetOrganizationsEmbeddedintegration(ctx context.Context, params *GetOrganizationsEmbeddedintegrationParams) (*GetOrganizationsEmbeddedintegrationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationsEmbeddedintegration",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/embeddedintegration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsEmbeddedintegrationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationsEmbeddedintegrationOK), nil

}

/*
GetOrganizationsIpaddressauthentication gets organization IP address whitelist settings
*/
func (a *Client) GetOrganizationsIpaddressauthentication(ctx context.Context, params *GetOrganizationsIpaddressauthenticationParams) (*GetOrganizationsIpaddressauthenticationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationsIpaddressauthentication",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/ipaddressauthentication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsIpaddressauthenticationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationsIpaddressauthenticationOK), nil

}

/*
GetOrganizationsLimitsChangerequest gets a limit change request
*/
func (a *Client) GetOrganizationsLimitsChangerequest(ctx context.Context, params *GetOrganizationsLimitsChangerequestParams) (*GetOrganizationsLimitsChangerequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationsLimitsChangerequest",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/limits/changerequests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsLimitsChangerequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationsLimitsChangerequestOK), nil

}

/*
GetOrganizationsLimitsChangerequests gets the available limit change requests

Timestamp interval defaults to the last 365 days if both query parameters are omitted. If only one parameter is omitted, the interval will default to a 180 day range in the specified direction.
*/
func (a *Client) GetOrganizationsLimitsChangerequests(ctx context.Context, params *GetOrganizationsLimitsChangerequestsParams) (*GetOrganizationsLimitsChangerequestsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationsLimitsChangerequests",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/limits/changerequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsLimitsChangerequestsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationsLimitsChangerequestsOK), nil

}

/*
GetOrganizationsLimitsDocs gets a link to the limit documentation
*/
func (a *Client) GetOrganizationsLimitsDocs(ctx context.Context, params *GetOrganizationsLimitsDocsParams) (*GetOrganizationsLimitsDocsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationsLimitsDocs",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/limits/docs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsLimitsDocsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationsLimitsDocsOK), nil

}

/*
GetOrganizationsLimitsNamespace gets the effective limits in a namespace for an organization
*/
func (a *Client) GetOrganizationsLimitsNamespace(ctx context.Context, params *GetOrganizationsLimitsNamespaceParams) (*GetOrganizationsLimitsNamespaceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationsLimitsNamespace",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/limits/namespaces/{namespaceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsLimitsNamespaceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationsLimitsNamespaceOK), nil

}

/*
GetOrganizationsLimitsNamespaces gets the available limit namespaces
*/
func (a *Client) GetOrganizationsLimitsNamespaces(ctx context.Context, params *GetOrganizationsLimitsNamespacesParams) (*GetOrganizationsLimitsNamespacesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationsLimitsNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/limits/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsLimitsNamespacesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationsLimitsNamespacesOK), nil

}

/*
GetOrganizationsMe gets organization
*/
func (a *Client) GetOrganizationsMe(ctx context.Context, params *GetOrganizationsMeParams) (*GetOrganizationsMeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationsMe",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsMeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationsMeOK), nil

}

/*
GetOrganizationsWhitelist uses p u t api v2 organizations embeddedintegration instead
*/
func (a *Client) GetOrganizationsWhitelist(ctx context.Context, params *GetOrganizationsWhitelistParams) (*GetOrganizationsWhitelistOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationsWhitelist",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/whitelist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsWhitelistReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationsWhitelistOK), nil

}

/*
PatchOrganizationsFeature updates organization
*/
func (a *Client) PatchOrganizationsFeature(ctx context.Context, params *PatchOrganizationsFeatureParams) (*PatchOrganizationsFeatureOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchOrganizationsFeature",
		Method:             "PATCH",
		PathPattern:        "/api/v2/organizations/features/{featureName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchOrganizationsFeatureReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchOrganizationsFeatureOK), nil

}

/*
PutOrganizationsEmbeddedintegration updates the list of domains that will be allowed to embed pure cloud applications
*/
func (a *Client) PutOrganizationsEmbeddedintegration(ctx context.Context, params *PutOrganizationsEmbeddedintegrationParams) (*PutOrganizationsEmbeddedintegrationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOrganizationsEmbeddedintegration",
		Method:             "PUT",
		PathPattern:        "/api/v2/organizations/embeddedintegration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOrganizationsEmbeddedintegrationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOrganizationsEmbeddedintegrationOK), nil

}

/*
PutOrganizationsIpaddressauthentication updates organization IP address whitelist settings
*/
func (a *Client) PutOrganizationsIpaddressauthentication(ctx context.Context, params *PutOrganizationsIpaddressauthenticationParams) (*PutOrganizationsIpaddressauthenticationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOrganizationsIpaddressauthentication",
		Method:             "PUT",
		PathPattern:        "/api/v2/organizations/ipaddressauthentication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOrganizationsIpaddressauthenticationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOrganizationsIpaddressauthenticationOK), nil

}

/*
PutOrganizationsMe updates organization
*/
func (a *Client) PutOrganizationsMe(ctx context.Context, params *PutOrganizationsMeParams) (*PutOrganizationsMeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOrganizationsMe",
		Method:             "PUT",
		PathPattern:        "/api/v2/organizations/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOrganizationsMeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOrganizationsMeOK), nil

}

/*
PutOrganizationsWhitelist uses p u t api v2 organizations embeddedintegration instead
*/
func (a *Client) PutOrganizationsWhitelist(ctx context.Context, params *PutOrganizationsWhitelistParams) (*PutOrganizationsWhitelistOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOrganizationsWhitelist",
		Method:             "PUT",
		PathPattern:        "/api/v2/organizations/whitelist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOrganizationsWhitelistReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOrganizationsWhitelistOK), nil

}

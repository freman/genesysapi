// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchOrganizationsFeatureReader is a Reader for the PatchOrganizationsFeature structure.
type PatchOrganizationsFeatureReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchOrganizationsFeatureReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchOrganizationsFeatureOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchOrganizationsFeatureBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchOrganizationsFeatureUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchOrganizationsFeatureForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchOrganizationsFeatureNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchOrganizationsFeatureRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchOrganizationsFeatureRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchOrganizationsFeatureUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchOrganizationsFeatureTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchOrganizationsFeatureInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchOrganizationsFeatureServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchOrganizationsFeatureGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchOrganizationsFeatureOK creates a PatchOrganizationsFeatureOK with default headers values
func NewPatchOrganizationsFeatureOK() *PatchOrganizationsFeatureOK {
	return &PatchOrganizationsFeatureOK{}
}

/*
PatchOrganizationsFeatureOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchOrganizationsFeatureOK struct {
	Payload *models.OrganizationFeatures
}

// IsSuccess returns true when this patch organizations feature o k response has a 2xx status code
func (o *PatchOrganizationsFeatureOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch organizations feature o k response has a 3xx status code
func (o *PatchOrganizationsFeatureOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations feature o k response has a 4xx status code
func (o *PatchOrganizationsFeatureOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch organizations feature o k response has a 5xx status code
func (o *PatchOrganizationsFeatureOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch organizations feature o k response a status code equal to that given
func (o *PatchOrganizationsFeatureOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchOrganizationsFeatureOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureOK  %+v", 200, o.Payload)
}

func (o *PatchOrganizationsFeatureOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureOK  %+v", 200, o.Payload)
}

func (o *PatchOrganizationsFeatureOK) GetPayload() *models.OrganizationFeatures {
	return o.Payload
}

func (o *PatchOrganizationsFeatureOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OrganizationFeatures)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrganizationsFeatureBadRequest creates a PatchOrganizationsFeatureBadRequest with default headers values
func NewPatchOrganizationsFeatureBadRequest() *PatchOrganizationsFeatureBadRequest {
	return &PatchOrganizationsFeatureBadRequest{}
}

/*
PatchOrganizationsFeatureBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchOrganizationsFeatureBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch organizations feature bad request response has a 2xx status code
func (o *PatchOrganizationsFeatureBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch organizations feature bad request response has a 3xx status code
func (o *PatchOrganizationsFeatureBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations feature bad request response has a 4xx status code
func (o *PatchOrganizationsFeatureBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch organizations feature bad request response has a 5xx status code
func (o *PatchOrganizationsFeatureBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch organizations feature bad request response a status code equal to that given
func (o *PatchOrganizationsFeatureBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchOrganizationsFeatureBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureBadRequest  %+v", 400, o.Payload)
}

func (o *PatchOrganizationsFeatureBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureBadRequest  %+v", 400, o.Payload)
}

func (o *PatchOrganizationsFeatureBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchOrganizationsFeatureBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrganizationsFeatureUnauthorized creates a PatchOrganizationsFeatureUnauthorized with default headers values
func NewPatchOrganizationsFeatureUnauthorized() *PatchOrganizationsFeatureUnauthorized {
	return &PatchOrganizationsFeatureUnauthorized{}
}

/*
PatchOrganizationsFeatureUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchOrganizationsFeatureUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch organizations feature unauthorized response has a 2xx status code
func (o *PatchOrganizationsFeatureUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch organizations feature unauthorized response has a 3xx status code
func (o *PatchOrganizationsFeatureUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations feature unauthorized response has a 4xx status code
func (o *PatchOrganizationsFeatureUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch organizations feature unauthorized response has a 5xx status code
func (o *PatchOrganizationsFeatureUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch organizations feature unauthorized response a status code equal to that given
func (o *PatchOrganizationsFeatureUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchOrganizationsFeatureUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchOrganizationsFeatureUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchOrganizationsFeatureUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchOrganizationsFeatureUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrganizationsFeatureForbidden creates a PatchOrganizationsFeatureForbidden with default headers values
func NewPatchOrganizationsFeatureForbidden() *PatchOrganizationsFeatureForbidden {
	return &PatchOrganizationsFeatureForbidden{}
}

/*
PatchOrganizationsFeatureForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchOrganizationsFeatureForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch organizations feature forbidden response has a 2xx status code
func (o *PatchOrganizationsFeatureForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch organizations feature forbidden response has a 3xx status code
func (o *PatchOrganizationsFeatureForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations feature forbidden response has a 4xx status code
func (o *PatchOrganizationsFeatureForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch organizations feature forbidden response has a 5xx status code
func (o *PatchOrganizationsFeatureForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch organizations feature forbidden response a status code equal to that given
func (o *PatchOrganizationsFeatureForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchOrganizationsFeatureForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureForbidden  %+v", 403, o.Payload)
}

func (o *PatchOrganizationsFeatureForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureForbidden  %+v", 403, o.Payload)
}

func (o *PatchOrganizationsFeatureForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchOrganizationsFeatureForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrganizationsFeatureNotFound creates a PatchOrganizationsFeatureNotFound with default headers values
func NewPatchOrganizationsFeatureNotFound() *PatchOrganizationsFeatureNotFound {
	return &PatchOrganizationsFeatureNotFound{}
}

/*
PatchOrganizationsFeatureNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchOrganizationsFeatureNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch organizations feature not found response has a 2xx status code
func (o *PatchOrganizationsFeatureNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch organizations feature not found response has a 3xx status code
func (o *PatchOrganizationsFeatureNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations feature not found response has a 4xx status code
func (o *PatchOrganizationsFeatureNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch organizations feature not found response has a 5xx status code
func (o *PatchOrganizationsFeatureNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch organizations feature not found response a status code equal to that given
func (o *PatchOrganizationsFeatureNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchOrganizationsFeatureNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureNotFound  %+v", 404, o.Payload)
}

func (o *PatchOrganizationsFeatureNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureNotFound  %+v", 404, o.Payload)
}

func (o *PatchOrganizationsFeatureNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchOrganizationsFeatureNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrganizationsFeatureRequestTimeout creates a PatchOrganizationsFeatureRequestTimeout with default headers values
func NewPatchOrganizationsFeatureRequestTimeout() *PatchOrganizationsFeatureRequestTimeout {
	return &PatchOrganizationsFeatureRequestTimeout{}
}

/*
PatchOrganizationsFeatureRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchOrganizationsFeatureRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch organizations feature request timeout response has a 2xx status code
func (o *PatchOrganizationsFeatureRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch organizations feature request timeout response has a 3xx status code
func (o *PatchOrganizationsFeatureRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations feature request timeout response has a 4xx status code
func (o *PatchOrganizationsFeatureRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch organizations feature request timeout response has a 5xx status code
func (o *PatchOrganizationsFeatureRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch organizations feature request timeout response a status code equal to that given
func (o *PatchOrganizationsFeatureRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchOrganizationsFeatureRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchOrganizationsFeatureRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchOrganizationsFeatureRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchOrganizationsFeatureRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrganizationsFeatureRequestEntityTooLarge creates a PatchOrganizationsFeatureRequestEntityTooLarge with default headers values
func NewPatchOrganizationsFeatureRequestEntityTooLarge() *PatchOrganizationsFeatureRequestEntityTooLarge {
	return &PatchOrganizationsFeatureRequestEntityTooLarge{}
}

/*
PatchOrganizationsFeatureRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchOrganizationsFeatureRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch organizations feature request entity too large response has a 2xx status code
func (o *PatchOrganizationsFeatureRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch organizations feature request entity too large response has a 3xx status code
func (o *PatchOrganizationsFeatureRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations feature request entity too large response has a 4xx status code
func (o *PatchOrganizationsFeatureRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch organizations feature request entity too large response has a 5xx status code
func (o *PatchOrganizationsFeatureRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch organizations feature request entity too large response a status code equal to that given
func (o *PatchOrganizationsFeatureRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchOrganizationsFeatureRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchOrganizationsFeatureRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchOrganizationsFeatureRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchOrganizationsFeatureRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrganizationsFeatureUnsupportedMediaType creates a PatchOrganizationsFeatureUnsupportedMediaType with default headers values
func NewPatchOrganizationsFeatureUnsupportedMediaType() *PatchOrganizationsFeatureUnsupportedMediaType {
	return &PatchOrganizationsFeatureUnsupportedMediaType{}
}

/*
PatchOrganizationsFeatureUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchOrganizationsFeatureUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch organizations feature unsupported media type response has a 2xx status code
func (o *PatchOrganizationsFeatureUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch organizations feature unsupported media type response has a 3xx status code
func (o *PatchOrganizationsFeatureUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations feature unsupported media type response has a 4xx status code
func (o *PatchOrganizationsFeatureUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch organizations feature unsupported media type response has a 5xx status code
func (o *PatchOrganizationsFeatureUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch organizations feature unsupported media type response a status code equal to that given
func (o *PatchOrganizationsFeatureUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchOrganizationsFeatureUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchOrganizationsFeatureUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchOrganizationsFeatureUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchOrganizationsFeatureUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrganizationsFeatureTooManyRequests creates a PatchOrganizationsFeatureTooManyRequests with default headers values
func NewPatchOrganizationsFeatureTooManyRequests() *PatchOrganizationsFeatureTooManyRequests {
	return &PatchOrganizationsFeatureTooManyRequests{}
}

/*
PatchOrganizationsFeatureTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchOrganizationsFeatureTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch organizations feature too many requests response has a 2xx status code
func (o *PatchOrganizationsFeatureTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch organizations feature too many requests response has a 3xx status code
func (o *PatchOrganizationsFeatureTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations feature too many requests response has a 4xx status code
func (o *PatchOrganizationsFeatureTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch organizations feature too many requests response has a 5xx status code
func (o *PatchOrganizationsFeatureTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch organizations feature too many requests response a status code equal to that given
func (o *PatchOrganizationsFeatureTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchOrganizationsFeatureTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchOrganizationsFeatureTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchOrganizationsFeatureTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchOrganizationsFeatureTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrganizationsFeatureInternalServerError creates a PatchOrganizationsFeatureInternalServerError with default headers values
func NewPatchOrganizationsFeatureInternalServerError() *PatchOrganizationsFeatureInternalServerError {
	return &PatchOrganizationsFeatureInternalServerError{}
}

/*
PatchOrganizationsFeatureInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchOrganizationsFeatureInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch organizations feature internal server error response has a 2xx status code
func (o *PatchOrganizationsFeatureInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch organizations feature internal server error response has a 3xx status code
func (o *PatchOrganizationsFeatureInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations feature internal server error response has a 4xx status code
func (o *PatchOrganizationsFeatureInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch organizations feature internal server error response has a 5xx status code
func (o *PatchOrganizationsFeatureInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch organizations feature internal server error response a status code equal to that given
func (o *PatchOrganizationsFeatureInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchOrganizationsFeatureInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchOrganizationsFeatureInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchOrganizationsFeatureInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchOrganizationsFeatureInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrganizationsFeatureServiceUnavailable creates a PatchOrganizationsFeatureServiceUnavailable with default headers values
func NewPatchOrganizationsFeatureServiceUnavailable() *PatchOrganizationsFeatureServiceUnavailable {
	return &PatchOrganizationsFeatureServiceUnavailable{}
}

/*
PatchOrganizationsFeatureServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchOrganizationsFeatureServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch organizations feature service unavailable response has a 2xx status code
func (o *PatchOrganizationsFeatureServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch organizations feature service unavailable response has a 3xx status code
func (o *PatchOrganizationsFeatureServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations feature service unavailable response has a 4xx status code
func (o *PatchOrganizationsFeatureServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch organizations feature service unavailable response has a 5xx status code
func (o *PatchOrganizationsFeatureServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch organizations feature service unavailable response a status code equal to that given
func (o *PatchOrganizationsFeatureServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchOrganizationsFeatureServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchOrganizationsFeatureServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchOrganizationsFeatureServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchOrganizationsFeatureServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrganizationsFeatureGatewayTimeout creates a PatchOrganizationsFeatureGatewayTimeout with default headers values
func NewPatchOrganizationsFeatureGatewayTimeout() *PatchOrganizationsFeatureGatewayTimeout {
	return &PatchOrganizationsFeatureGatewayTimeout{}
}

/*
PatchOrganizationsFeatureGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchOrganizationsFeatureGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch organizations feature gateway timeout response has a 2xx status code
func (o *PatchOrganizationsFeatureGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch organizations feature gateway timeout response has a 3xx status code
func (o *PatchOrganizationsFeatureGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations feature gateway timeout response has a 4xx status code
func (o *PatchOrganizationsFeatureGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch organizations feature gateway timeout response has a 5xx status code
func (o *PatchOrganizationsFeatureGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch organizations feature gateway timeout response a status code equal to that given
func (o *PatchOrganizationsFeatureGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchOrganizationsFeatureGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchOrganizationsFeatureGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/organizations/features/{featureName}][%d] patchOrganizationsFeatureGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchOrganizationsFeatureGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchOrganizationsFeatureGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// NewPatchOrganizationsFeatureParams creates a new PatchOrganizationsFeatureParams object
// with the default values initialized.
func NewPatchOrganizationsFeatureParams() *PatchOrganizationsFeatureParams {
	var ()
	return &PatchOrganizationsFeatureParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchOrganizationsFeatureParamsWithTimeout creates a new PatchOrganizationsFeatureParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchOrganizationsFeatureParamsWithTimeout(timeout time.Duration) *PatchOrganizationsFeatureParams {
	var ()
	return &PatchOrganizationsFeatureParams{

		timeout: timeout,
	}
}

// NewPatchOrganizationsFeatureParamsWithContext creates a new PatchOrganizationsFeatureParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchOrganizationsFeatureParamsWithContext(ctx context.Context) *PatchOrganizationsFeatureParams {
	var ()
	return &PatchOrganizationsFeatureParams{

		Context: ctx,
	}
}

// NewPatchOrganizationsFeatureParamsWithHTTPClient creates a new PatchOrganizationsFeatureParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchOrganizationsFeatureParamsWithHTTPClient(client *http.Client) *PatchOrganizationsFeatureParams {
	var ()
	return &PatchOrganizationsFeatureParams{
		HTTPClient: client,
	}
}

/*PatchOrganizationsFeatureParams contains all the parameters to send to the API endpoint
for the patch organizations feature operation typically these are written to a http.Request
*/
type PatchOrganizationsFeatureParams struct {

	/*Enabled
	  New state of feature

	*/
	Enabled *models.FeatureState
	/*FeatureName
	  Organization feature

	*/
	FeatureName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch organizations feature params
func (o *PatchOrganizationsFeatureParams) WithTimeout(timeout time.Duration) *PatchOrganizationsFeatureParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch organizations feature params
func (o *PatchOrganizationsFeatureParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch organizations feature params
func (o *PatchOrganizationsFeatureParams) WithContext(ctx context.Context) *PatchOrganizationsFeatureParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch organizations feature params
func (o *PatchOrganizationsFeatureParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch organizations feature params
func (o *PatchOrganizationsFeatureParams) WithHTTPClient(client *http.Client) *PatchOrganizationsFeatureParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch organizations feature params
func (o *PatchOrganizationsFeatureParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnabled adds the enabled to the patch organizations feature params
func (o *PatchOrganizationsFeatureParams) WithEnabled(enabled *models.FeatureState) *PatchOrganizationsFeatureParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the patch organizations feature params
func (o *PatchOrganizationsFeatureParams) SetEnabled(enabled *models.FeatureState) {
	o.Enabled = enabled
}

// WithFeatureName adds the featureName to the patch organizations feature params
func (o *PatchOrganizationsFeatureParams) WithFeatureName(featureName string) *PatchOrganizationsFeatureParams {
	o.SetFeatureName(featureName)
	return o
}

// SetFeatureName adds the featureName to the patch organizations feature params
func (o *PatchOrganizationsFeatureParams) SetFeatureName(featureName string) {
	o.FeatureName = featureName
}

// WriteToRequest writes these params to a swagger request
func (o *PatchOrganizationsFeatureParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Enabled != nil {
		if err := r.SetBodyParam(o.Enabled); err != nil {
			return err
		}
	}

	// path param featureName
	if err := r.SetPathParam("featureName", o.FeatureName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

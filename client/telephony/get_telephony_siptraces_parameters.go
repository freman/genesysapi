// Code generated by go-swagger; DO NOT EDIT.

package telephony

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetTelephonySiptracesParams creates a new GetTelephonySiptracesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTelephonySiptracesParams() *GetTelephonySiptracesParams {
	return &GetTelephonySiptracesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTelephonySiptracesParamsWithTimeout creates a new GetTelephonySiptracesParams object
// with the ability to set a timeout on a request.
func NewGetTelephonySiptracesParamsWithTimeout(timeout time.Duration) *GetTelephonySiptracesParams {
	return &GetTelephonySiptracesParams{
		timeout: timeout,
	}
}

// NewGetTelephonySiptracesParamsWithContext creates a new GetTelephonySiptracesParams object
// with the ability to set a context for a request.
func NewGetTelephonySiptracesParamsWithContext(ctx context.Context) *GetTelephonySiptracesParams {
	return &GetTelephonySiptracesParams{
		Context: ctx,
	}
}

// NewGetTelephonySiptracesParamsWithHTTPClient creates a new GetTelephonySiptracesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTelephonySiptracesParamsWithHTTPClient(client *http.Client) *GetTelephonySiptracesParams {
	return &GetTelephonySiptracesParams{
		HTTPClient: client,
	}
}

/*
GetTelephonySiptracesParams contains all the parameters to send to the API endpoint

	for the get telephony siptraces operation.

	Typically these are written to a http.Request.
*/
type GetTelephonySiptracesParams struct {

	/* CallID.

	   unique identification of the placed call
	*/
	CallID *string

	/* ConversationID.

	   Unique identification of the conversation
	*/
	ConversationID *string

	/* DateEnd.

	   End date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

	   Format: date-time
	*/
	DateEnd strfmt.DateTime

	/* DateStart.

	   Start date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

	   Format: date-time
	*/
	DateStart strfmt.DateTime

	/* FromUser.

	   user who placed the call
	*/
	FromUser *string

	/* ToUser.

	   User to who the call was placed
	*/
	ToUser *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get telephony siptraces params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTelephonySiptracesParams) WithDefaults() *GetTelephonySiptracesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get telephony siptraces params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTelephonySiptracesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) WithTimeout(timeout time.Duration) *GetTelephonySiptracesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) WithContext(ctx context.Context) *GetTelephonySiptracesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) WithHTTPClient(client *http.Client) *GetTelephonySiptracesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCallID adds the callID to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) WithCallID(callID *string) *GetTelephonySiptracesParams {
	o.SetCallID(callID)
	return o
}

// SetCallID adds the callId to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) SetCallID(callID *string) {
	o.CallID = callID
}

// WithConversationID adds the conversationID to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) WithConversationID(conversationID *string) *GetTelephonySiptracesParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) SetConversationID(conversationID *string) {
	o.ConversationID = conversationID
}

// WithDateEnd adds the dateEnd to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) WithDateEnd(dateEnd strfmt.DateTime) *GetTelephonySiptracesParams {
	o.SetDateEnd(dateEnd)
	return o
}

// SetDateEnd adds the dateEnd to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) SetDateEnd(dateEnd strfmt.DateTime) {
	o.DateEnd = dateEnd
}

// WithDateStart adds the dateStart to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) WithDateStart(dateStart strfmt.DateTime) *GetTelephonySiptracesParams {
	o.SetDateStart(dateStart)
	return o
}

// SetDateStart adds the dateStart to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) SetDateStart(dateStart strfmt.DateTime) {
	o.DateStart = dateStart
}

// WithFromUser adds the fromUser to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) WithFromUser(fromUser *string) *GetTelephonySiptracesParams {
	o.SetFromUser(fromUser)
	return o
}

// SetFromUser adds the fromUser to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) SetFromUser(fromUser *string) {
	o.FromUser = fromUser
}

// WithToUser adds the toUser to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) WithToUser(toUser *string) *GetTelephonySiptracesParams {
	o.SetToUser(toUser)
	return o
}

// SetToUser adds the toUser to the get telephony siptraces params
func (o *GetTelephonySiptracesParams) SetToUser(toUser *string) {
	o.ToUser = toUser
}

// WriteToRequest writes these params to a swagger request
func (o *GetTelephonySiptracesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CallID != nil {

		// query param callId
		var qrCallID string

		if o.CallID != nil {
			qrCallID = *o.CallID
		}
		qCallID := qrCallID
		if qCallID != "" {

			if err := r.SetQueryParam("callId", qCallID); err != nil {
				return err
			}
		}
	}

	if o.ConversationID != nil {

		// query param conversationId
		var qrConversationID string

		if o.ConversationID != nil {
			qrConversationID = *o.ConversationID
		}
		qConversationID := qrConversationID
		if qConversationID != "" {

			if err := r.SetQueryParam("conversationId", qConversationID); err != nil {
				return err
			}
		}
	}

	// query param dateEnd
	qrDateEnd := o.DateEnd
	qDateEnd := qrDateEnd.String()
	if qDateEnd != "" {

		if err := r.SetQueryParam("dateEnd", qDateEnd); err != nil {
			return err
		}
	}

	// query param dateStart
	qrDateStart := o.DateStart
	qDateStart := qrDateStart.String()
	if qDateStart != "" {

		if err := r.SetQueryParam("dateStart", qDateStart); err != nil {
			return err
		}
	}

	if o.FromUser != nil {

		// query param fromUser
		var qrFromUser string

		if o.FromUser != nil {
			qrFromUser = *o.FromUser
		}
		qFromUser := qrFromUser
		if qFromUser != "" {

			if err := r.SetQueryParam("fromUser", qFromUser); err != nil {
				return err
			}
		}
	}

	if o.ToUser != nil {

		// query param toUser
		var qrToUser string

		if o.ToUser != nil {
			qrToUser = *o.ToUser
		}
		qToUser := qrToUser
		if qToUser != "" {

			if err := r.SetQueryParam("toUser", qToUser); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

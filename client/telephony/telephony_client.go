// Code generated by go-swagger; DO NOT EDIT.

package telephony

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the telephony client
type API interface {
	/*
	   GetTelephonyMediaregions retrieves the list of a w s regions media can stream through
	*/
	GetTelephonyMediaregions(ctx context.Context, params *GetTelephonyMediaregionsParams) (*GetTelephonyMediaregionsOK, error)
	/*
	   GetTelephonySiptraces fetches s IP metadata
	   Fetch SIP metadata that matches a given parameter. If exactMatch is passed as a parameter only sip records that have exactly that value will be returned. For example, some records contain conversationId but not all relevant records for that call may contain the conversationId so only a partial view of the call will be reflected
	*/
	GetTelephonySiptraces(ctx context.Context, params *GetTelephonySiptracesParams) (*GetTelephonySiptracesOK, error)
	/*
	   GetTelephonySiptracesDownloadDownloadID gets signed s3 URL for a pcap download
	*/
	GetTelephonySiptracesDownloadDownloadID(ctx context.Context, params *GetTelephonySiptracesDownloadDownloadIDParams) (*GetTelephonySiptracesDownloadDownloadIDOK, *GetTelephonySiptracesDownloadDownloadIDAccepted, error)
	/*
	   PostTelephonySiptracesDownload requests a download of a pcap file to s3
	*/
	PostTelephonySiptracesDownload(ctx context.Context, params *PostTelephonySiptracesDownloadParams) (*PostTelephonySiptracesDownloadOK, error)
}

// New creates a new telephony API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for telephony API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetTelephonyMediaregions retrieves the list of a w s regions media can stream through
*/
func (a *Client) GetTelephonyMediaregions(ctx context.Context, params *GetTelephonyMediaregionsParams) (*GetTelephonyMediaregionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyMediaregions",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/mediaregions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyMediaregionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyMediaregionsOK), nil

}

/*
GetTelephonySiptraces fetches s IP metadata

Fetch SIP metadata that matches a given parameter. If exactMatch is passed as a parameter only sip records that have exactly that value will be returned. For example, some records contain conversationId but not all relevant records for that call may contain the conversationId so only a partial view of the call will be reflected
*/
func (a *Client) GetTelephonySiptraces(ctx context.Context, params *GetTelephonySiptracesParams) (*GetTelephonySiptracesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonySiptraces",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/siptraces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonySiptracesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonySiptracesOK), nil

}

/*
GetTelephonySiptracesDownloadDownloadID gets signed s3 URL for a pcap download
*/
func (a *Client) GetTelephonySiptracesDownloadDownloadID(ctx context.Context, params *GetTelephonySiptracesDownloadDownloadIDParams) (*GetTelephonySiptracesDownloadDownloadIDOK, *GetTelephonySiptracesDownloadDownloadIDAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonySiptracesDownloadDownloadId",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/siptraces/download/{downloadId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonySiptracesDownloadDownloadIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetTelephonySiptracesDownloadDownloadIDOK:
		return value, nil, nil
	case *GetTelephonySiptracesDownloadDownloadIDAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostTelephonySiptracesDownload requests a download of a pcap file to s3
*/
func (a *Client) PostTelephonySiptracesDownload(ctx context.Context, params *PostTelephonySiptracesDownloadParams) (*PostTelephonySiptracesDownloadOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonySiptracesDownload",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/siptraces/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonySiptracesDownloadReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonySiptracesDownloadOK), nil

}

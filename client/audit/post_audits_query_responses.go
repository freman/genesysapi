// Code generated by go-swagger; DO NOT EDIT.

package audit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostAuditsQueryReader is a Reader for the PostAuditsQuery structure.
type PostAuditsQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAuditsQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostAuditsQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewPostAuditsQueryAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostAuditsQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostAuditsQueryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostAuditsQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostAuditsQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostAuditsQueryRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostAuditsQueryRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostAuditsQueryUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostAuditsQueryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostAuditsQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostAuditsQueryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostAuditsQueryGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostAuditsQueryOK creates a PostAuditsQueryOK with default headers values
func NewPostAuditsQueryOK() *PostAuditsQueryOK {
	return &PostAuditsQueryOK{}
}

/*PostAuditsQueryOK handles this case with default header values.

successful operation
*/
type PostAuditsQueryOK struct {
	Payload *models.AuditQueryExecutionStatusResponse
}

func (o *PostAuditsQueryOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/audits/query][%d] postAuditsQueryOK  %+v", 200, o.Payload)
}

func (o *PostAuditsQueryOK) GetPayload() *models.AuditQueryExecutionStatusResponse {
	return o.Payload
}

func (o *PostAuditsQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuditQueryExecutionStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuditsQueryAccepted creates a PostAuditsQueryAccepted with default headers values
func NewPostAuditsQueryAccepted() *PostAuditsQueryAccepted {
	return &PostAuditsQueryAccepted{}
}

/*PostAuditsQueryAccepted handles this case with default header values.

Accepted - Query execution is accepted.
*/
type PostAuditsQueryAccepted struct {
	Payload *models.AuditQueryExecutionStatusResponse
}

func (o *PostAuditsQueryAccepted) Error() string {
	return fmt.Sprintf("[POST /api/v2/audits/query][%d] postAuditsQueryAccepted  %+v", 202, o.Payload)
}

func (o *PostAuditsQueryAccepted) GetPayload() *models.AuditQueryExecutionStatusResponse {
	return o.Payload
}

func (o *PostAuditsQueryAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuditQueryExecutionStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuditsQueryBadRequest creates a PostAuditsQueryBadRequest with default headers values
func NewPostAuditsQueryBadRequest() *PostAuditsQueryBadRequest {
	return &PostAuditsQueryBadRequest{}
}

/*PostAuditsQueryBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostAuditsQueryBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostAuditsQueryBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/audits/query][%d] postAuditsQueryBadRequest  %+v", 400, o.Payload)
}

func (o *PostAuditsQueryBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuditsQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuditsQueryUnauthorized creates a PostAuditsQueryUnauthorized with default headers values
func NewPostAuditsQueryUnauthorized() *PostAuditsQueryUnauthorized {
	return &PostAuditsQueryUnauthorized{}
}

/*PostAuditsQueryUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostAuditsQueryUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostAuditsQueryUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/audits/query][%d] postAuditsQueryUnauthorized  %+v", 401, o.Payload)
}

func (o *PostAuditsQueryUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuditsQueryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuditsQueryForbidden creates a PostAuditsQueryForbidden with default headers values
func NewPostAuditsQueryForbidden() *PostAuditsQueryForbidden {
	return &PostAuditsQueryForbidden{}
}

/*PostAuditsQueryForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostAuditsQueryForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostAuditsQueryForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/audits/query][%d] postAuditsQueryForbidden  %+v", 403, o.Payload)
}

func (o *PostAuditsQueryForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuditsQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuditsQueryNotFound creates a PostAuditsQueryNotFound with default headers values
func NewPostAuditsQueryNotFound() *PostAuditsQueryNotFound {
	return &PostAuditsQueryNotFound{}
}

/*PostAuditsQueryNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostAuditsQueryNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostAuditsQueryNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/audits/query][%d] postAuditsQueryNotFound  %+v", 404, o.Payload)
}

func (o *PostAuditsQueryNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuditsQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuditsQueryRequestTimeout creates a PostAuditsQueryRequestTimeout with default headers values
func NewPostAuditsQueryRequestTimeout() *PostAuditsQueryRequestTimeout {
	return &PostAuditsQueryRequestTimeout{}
}

/*PostAuditsQueryRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostAuditsQueryRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostAuditsQueryRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/audits/query][%d] postAuditsQueryRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostAuditsQueryRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuditsQueryRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuditsQueryRequestEntityTooLarge creates a PostAuditsQueryRequestEntityTooLarge with default headers values
func NewPostAuditsQueryRequestEntityTooLarge() *PostAuditsQueryRequestEntityTooLarge {
	return &PostAuditsQueryRequestEntityTooLarge{}
}

/*PostAuditsQueryRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PostAuditsQueryRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostAuditsQueryRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/audits/query][%d] postAuditsQueryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostAuditsQueryRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuditsQueryRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuditsQueryUnsupportedMediaType creates a PostAuditsQueryUnsupportedMediaType with default headers values
func NewPostAuditsQueryUnsupportedMediaType() *PostAuditsQueryUnsupportedMediaType {
	return &PostAuditsQueryUnsupportedMediaType{}
}

/*PostAuditsQueryUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostAuditsQueryUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostAuditsQueryUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/audits/query][%d] postAuditsQueryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostAuditsQueryUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuditsQueryUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuditsQueryTooManyRequests creates a PostAuditsQueryTooManyRequests with default headers values
func NewPostAuditsQueryTooManyRequests() *PostAuditsQueryTooManyRequests {
	return &PostAuditsQueryTooManyRequests{}
}

/*PostAuditsQueryTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostAuditsQueryTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostAuditsQueryTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/audits/query][%d] postAuditsQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostAuditsQueryTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuditsQueryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuditsQueryInternalServerError creates a PostAuditsQueryInternalServerError with default headers values
func NewPostAuditsQueryInternalServerError() *PostAuditsQueryInternalServerError {
	return &PostAuditsQueryInternalServerError{}
}

/*PostAuditsQueryInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostAuditsQueryInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostAuditsQueryInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/audits/query][%d] postAuditsQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *PostAuditsQueryInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuditsQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuditsQueryServiceUnavailable creates a PostAuditsQueryServiceUnavailable with default headers values
func NewPostAuditsQueryServiceUnavailable() *PostAuditsQueryServiceUnavailable {
	return &PostAuditsQueryServiceUnavailable{}
}

/*PostAuditsQueryServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostAuditsQueryServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostAuditsQueryServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/audits/query][%d] postAuditsQueryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostAuditsQueryServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuditsQueryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuditsQueryGatewayTimeout creates a PostAuditsQueryGatewayTimeout with default headers values
func NewPostAuditsQueryGatewayTimeout() *PostAuditsQueryGatewayTimeout {
	return &PostAuditsQueryGatewayTimeout{}
}

/*PostAuditsQueryGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostAuditsQueryGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostAuditsQueryGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/audits/query][%d] postAuditsQueryGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostAuditsQueryGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuditsQueryGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

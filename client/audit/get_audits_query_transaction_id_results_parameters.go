// Code generated by go-swagger; DO NOT EDIT.

package audit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAuditsQueryTransactionIDResultsParams creates a new GetAuditsQueryTransactionIDResultsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAuditsQueryTransactionIDResultsParams() *GetAuditsQueryTransactionIDResultsParams {
	return &GetAuditsQueryTransactionIDResultsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAuditsQueryTransactionIDResultsParamsWithTimeout creates a new GetAuditsQueryTransactionIDResultsParams object
// with the ability to set a timeout on a request.
func NewGetAuditsQueryTransactionIDResultsParamsWithTimeout(timeout time.Duration) *GetAuditsQueryTransactionIDResultsParams {
	return &GetAuditsQueryTransactionIDResultsParams{
		timeout: timeout,
	}
}

// NewGetAuditsQueryTransactionIDResultsParamsWithContext creates a new GetAuditsQueryTransactionIDResultsParams object
// with the ability to set a context for a request.
func NewGetAuditsQueryTransactionIDResultsParamsWithContext(ctx context.Context) *GetAuditsQueryTransactionIDResultsParams {
	return &GetAuditsQueryTransactionIDResultsParams{
		Context: ctx,
	}
}

// NewGetAuditsQueryTransactionIDResultsParamsWithHTTPClient creates a new GetAuditsQueryTransactionIDResultsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAuditsQueryTransactionIDResultsParamsWithHTTPClient(client *http.Client) *GetAuditsQueryTransactionIDResultsParams {
	return &GetAuditsQueryTransactionIDResultsParams{
		HTTPClient: client,
	}
}

/*
GetAuditsQueryTransactionIDResultsParams contains all the parameters to send to the API endpoint

	for the get audits query transaction Id results operation.

	Typically these are written to a http.Request.
*/
type GetAuditsQueryTransactionIDResultsParams struct {

	/* Cursor.

	   Indicates where to resume query results (not required for first page)
	*/
	Cursor *string

	/* Expand.

	   Which fields, if any, to expand
	*/
	Expand []string

	/* PageSize.

	   Page size

	   Format: int32
	   Default: 25
	*/
	PageSize *int32

	/* TransactionID.

	   Transaction ID
	*/
	TransactionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get audits query transaction Id results params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuditsQueryTransactionIDResultsParams) WithDefaults() *GetAuditsQueryTransactionIDResultsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get audits query transaction Id results params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuditsQueryTransactionIDResultsParams) SetDefaults() {
	var (
		pageSizeDefault = int32(25)
	)

	val := GetAuditsQueryTransactionIDResultsParams{
		PageSize: &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get audits query transaction Id results params
func (o *GetAuditsQueryTransactionIDResultsParams) WithTimeout(timeout time.Duration) *GetAuditsQueryTransactionIDResultsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get audits query transaction Id results params
func (o *GetAuditsQueryTransactionIDResultsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get audits query transaction Id results params
func (o *GetAuditsQueryTransactionIDResultsParams) WithContext(ctx context.Context) *GetAuditsQueryTransactionIDResultsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get audits query transaction Id results params
func (o *GetAuditsQueryTransactionIDResultsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get audits query transaction Id results params
func (o *GetAuditsQueryTransactionIDResultsParams) WithHTTPClient(client *http.Client) *GetAuditsQueryTransactionIDResultsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get audits query transaction Id results params
func (o *GetAuditsQueryTransactionIDResultsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the get audits query transaction Id results params
func (o *GetAuditsQueryTransactionIDResultsParams) WithCursor(cursor *string) *GetAuditsQueryTransactionIDResultsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the get audits query transaction Id results params
func (o *GetAuditsQueryTransactionIDResultsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithExpand adds the expand to the get audits query transaction Id results params
func (o *GetAuditsQueryTransactionIDResultsParams) WithExpand(expand []string) *GetAuditsQueryTransactionIDResultsParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get audits query transaction Id results params
func (o *GetAuditsQueryTransactionIDResultsParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithPageSize adds the pageSize to the get audits query transaction Id results params
func (o *GetAuditsQueryTransactionIDResultsParams) WithPageSize(pageSize *int32) *GetAuditsQueryTransactionIDResultsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get audits query transaction Id results params
func (o *GetAuditsQueryTransactionIDResultsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithTransactionID adds the transactionID to the get audits query transaction Id results params
func (o *GetAuditsQueryTransactionIDResultsParams) WithTransactionID(transactionID string) *GetAuditsQueryTransactionIDResultsParams {
	o.SetTransactionID(transactionID)
	return o
}

// SetTransactionID adds the transactionId to the get audits query transaction Id results params
func (o *GetAuditsQueryTransactionIDResultsParams) SetTransactionID(transactionID string) {
	o.TransactionID = transactionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAuditsQueryTransactionIDResultsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.Expand != nil {

		// binding items for expand
		joinedExpand := o.bindParamExpand(reg)

		// query array param expand
		if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
			return err
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	// path param transactionId
	if err := r.SetPathParam("transactionId", o.TransactionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetAuditsQueryTransactionIDResults binds the parameter expand
func (o *GetAuditsQueryTransactionIDResultsParams) bindParamExpand(formats strfmt.Registry) []string {
	expandIR := o.Expand

	var expandIC []string
	for _, expandIIR := range expandIR { // explode []string

		expandIIV := expandIIR // string as string
		expandIC = append(expandIC, expandIIV)
	}

	// items.CollectionFormat: "multi"
	expandIS := swag.JoinByFormat(expandIC, "multi")

	return expandIS
}

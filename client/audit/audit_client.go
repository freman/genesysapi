// Code generated by go-swagger; DO NOT EDIT.

package audit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the audit client
type API interface {
	/*
	   GetAuditsQueryRealtimeServicemapping gets service mapping information used in realtime audits
	*/
	GetAuditsQueryRealtimeServicemapping(ctx context.Context, params *GetAuditsQueryRealtimeServicemappingParams) (*GetAuditsQueryRealtimeServicemappingOK, error)
	/*
	   GetAuditsQueryServicemapping gets service mapping information used in audits
	*/
	GetAuditsQueryServicemapping(ctx context.Context, params *GetAuditsQueryServicemappingParams) (*GetAuditsQueryServicemappingOK, error)
	/*
	   GetAuditsQueryTransactionID gets status of audit query execution
	*/
	GetAuditsQueryTransactionID(ctx context.Context, params *GetAuditsQueryTransactionIDParams) (*GetAuditsQueryTransactionIDOK, *GetAuditsQueryTransactionIDAccepted, error)
	/*
	   GetAuditsQueryTransactionIDResults gets results of audit query
	*/
	GetAuditsQueryTransactionIDResults(ctx context.Context, params *GetAuditsQueryTransactionIDResultsParams) (*GetAuditsQueryTransactionIDResultsOK, error)
	/*
	   PostAuditsQuery creates audit query execution
	*/
	PostAuditsQuery(ctx context.Context, params *PostAuditsQueryParams) (*PostAuditsQueryOK, *PostAuditsQueryAccepted, error)
	/*
	   PostAuditsQueryRealtime this endpoint will only retrieve 7 days worth of audits for certain services please use query to get a full list and older audits
	*/
	PostAuditsQueryRealtime(ctx context.Context, params *PostAuditsQueryRealtimeParams) (*PostAuditsQueryRealtimeOK, error)
}

// New creates a new audit API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for audit API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetAuditsQueryRealtimeServicemapping gets service mapping information used in realtime audits
*/
func (a *Client) GetAuditsQueryRealtimeServicemapping(ctx context.Context, params *GetAuditsQueryRealtimeServicemappingParams) (*GetAuditsQueryRealtimeServicemappingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuditsQueryRealtimeServicemapping",
		Method:             "GET",
		PathPattern:        "/api/v2/audits/query/realtime/servicemapping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuditsQueryRealtimeServicemappingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuditsQueryRealtimeServicemappingOK), nil

}

/*
GetAuditsQueryServicemapping gets service mapping information used in audits
*/
func (a *Client) GetAuditsQueryServicemapping(ctx context.Context, params *GetAuditsQueryServicemappingParams) (*GetAuditsQueryServicemappingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuditsQueryServicemapping",
		Method:             "GET",
		PathPattern:        "/api/v2/audits/query/servicemapping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuditsQueryServicemappingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuditsQueryServicemappingOK), nil

}

/*
GetAuditsQueryTransactionID gets status of audit query execution
*/
func (a *Client) GetAuditsQueryTransactionID(ctx context.Context, params *GetAuditsQueryTransactionIDParams) (*GetAuditsQueryTransactionIDOK, *GetAuditsQueryTransactionIDAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuditsQueryTransactionId",
		Method:             "GET",
		PathPattern:        "/api/v2/audits/query/{transactionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuditsQueryTransactionIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAuditsQueryTransactionIDOK:
		return value, nil, nil
	case *GetAuditsQueryTransactionIDAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetAuditsQueryTransactionIDResults gets results of audit query
*/
func (a *Client) GetAuditsQueryTransactionIDResults(ctx context.Context, params *GetAuditsQueryTransactionIDResultsParams) (*GetAuditsQueryTransactionIDResultsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuditsQueryTransactionIdResults",
		Method:             "GET",
		PathPattern:        "/api/v2/audits/query/{transactionId}/results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuditsQueryTransactionIDResultsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuditsQueryTransactionIDResultsOK), nil

}

/*
PostAuditsQuery creates audit query execution
*/
func (a *Client) PostAuditsQuery(ctx context.Context, params *PostAuditsQueryParams) (*PostAuditsQueryOK, *PostAuditsQueryAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuditsQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/audits/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuditsQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostAuditsQueryOK:
		return value, nil, nil
	case *PostAuditsQueryAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostAuditsQueryRealtime this endpoint will only retrieve 7 days worth of audits for certain services please use query to get a full list and older audits
*/
func (a *Client) PostAuditsQueryRealtime(ctx context.Context, params *PostAuditsQueryRealtimeParams) (*PostAuditsQueryRealtimeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuditsQueryRealtime",
		Method:             "POST",
		PathPattern:        "/api/v2/audits/query/realtime",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuditsQueryRealtimeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAuditsQueryRealtimeOK), nil

}

// Code generated by go-swagger; DO NOT EDIT.

package audit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetAuditsQueryTransactionIDResultsReader is a Reader for the GetAuditsQueryTransactionIDResults structure.
type GetAuditsQueryTransactionIDResultsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuditsQueryTransactionIDResultsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuditsQueryTransactionIDResultsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuditsQueryTransactionIDResultsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAuditsQueryTransactionIDResultsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAuditsQueryTransactionIDResultsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuditsQueryTransactionIDResultsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetAuditsQueryTransactionIDResultsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAuditsQueryTransactionIDResultsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAuditsQueryTransactionIDResultsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAuditsQueryTransactionIDResultsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuditsQueryTransactionIDResultsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAuditsQueryTransactionIDResultsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetAuditsQueryTransactionIDResultsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAuditsQueryTransactionIDResultsOK creates a GetAuditsQueryTransactionIDResultsOK with default headers values
func NewGetAuditsQueryTransactionIDResultsOK() *GetAuditsQueryTransactionIDResultsOK {
	return &GetAuditsQueryTransactionIDResultsOK{}
}

/*
GetAuditsQueryTransactionIDResultsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetAuditsQueryTransactionIDResultsOK struct {
	Payload *models.AuditQueryExecutionResultsResponse
}

// IsSuccess returns true when this get audits query transaction Id results o k response has a 2xx status code
func (o *GetAuditsQueryTransactionIDResultsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get audits query transaction Id results o k response has a 3xx status code
func (o *GetAuditsQueryTransactionIDResultsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audits query transaction Id results o k response has a 4xx status code
func (o *GetAuditsQueryTransactionIDResultsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get audits query transaction Id results o k response has a 5xx status code
func (o *GetAuditsQueryTransactionIDResultsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get audits query transaction Id results o k response a status code equal to that given
func (o *GetAuditsQueryTransactionIDResultsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAuditsQueryTransactionIDResultsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsOK  %+v", 200, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsOK) String() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsOK  %+v", 200, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsOK) GetPayload() *models.AuditQueryExecutionResultsResponse {
	return o.Payload
}

func (o *GetAuditsQueryTransactionIDResultsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuditQueryExecutionResultsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditsQueryTransactionIDResultsBadRequest creates a GetAuditsQueryTransactionIDResultsBadRequest with default headers values
func NewGetAuditsQueryTransactionIDResultsBadRequest() *GetAuditsQueryTransactionIDResultsBadRequest {
	return &GetAuditsQueryTransactionIDResultsBadRequest{}
}

/*
GetAuditsQueryTransactionIDResultsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetAuditsQueryTransactionIDResultsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get audits query transaction Id results bad request response has a 2xx status code
func (o *GetAuditsQueryTransactionIDResultsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audits query transaction Id results bad request response has a 3xx status code
func (o *GetAuditsQueryTransactionIDResultsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audits query transaction Id results bad request response has a 4xx status code
func (o *GetAuditsQueryTransactionIDResultsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audits query transaction Id results bad request response has a 5xx status code
func (o *GetAuditsQueryTransactionIDResultsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get audits query transaction Id results bad request response a status code equal to that given
func (o *GetAuditsQueryTransactionIDResultsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAuditsQueryTransactionIDResultsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuditsQueryTransactionIDResultsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditsQueryTransactionIDResultsUnauthorized creates a GetAuditsQueryTransactionIDResultsUnauthorized with default headers values
func NewGetAuditsQueryTransactionIDResultsUnauthorized() *GetAuditsQueryTransactionIDResultsUnauthorized {
	return &GetAuditsQueryTransactionIDResultsUnauthorized{}
}

/*
GetAuditsQueryTransactionIDResultsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetAuditsQueryTransactionIDResultsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get audits query transaction Id results unauthorized response has a 2xx status code
func (o *GetAuditsQueryTransactionIDResultsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audits query transaction Id results unauthorized response has a 3xx status code
func (o *GetAuditsQueryTransactionIDResultsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audits query transaction Id results unauthorized response has a 4xx status code
func (o *GetAuditsQueryTransactionIDResultsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audits query transaction Id results unauthorized response has a 5xx status code
func (o *GetAuditsQueryTransactionIDResultsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get audits query transaction Id results unauthorized response a status code equal to that given
func (o *GetAuditsQueryTransactionIDResultsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAuditsQueryTransactionIDResultsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuditsQueryTransactionIDResultsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditsQueryTransactionIDResultsForbidden creates a GetAuditsQueryTransactionIDResultsForbidden with default headers values
func NewGetAuditsQueryTransactionIDResultsForbidden() *GetAuditsQueryTransactionIDResultsForbidden {
	return &GetAuditsQueryTransactionIDResultsForbidden{}
}

/*
GetAuditsQueryTransactionIDResultsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetAuditsQueryTransactionIDResultsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get audits query transaction Id results forbidden response has a 2xx status code
func (o *GetAuditsQueryTransactionIDResultsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audits query transaction Id results forbidden response has a 3xx status code
func (o *GetAuditsQueryTransactionIDResultsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audits query transaction Id results forbidden response has a 4xx status code
func (o *GetAuditsQueryTransactionIDResultsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audits query transaction Id results forbidden response has a 5xx status code
func (o *GetAuditsQueryTransactionIDResultsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get audits query transaction Id results forbidden response a status code equal to that given
func (o *GetAuditsQueryTransactionIDResultsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAuditsQueryTransactionIDResultsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsForbidden  %+v", 403, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsForbidden  %+v", 403, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuditsQueryTransactionIDResultsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditsQueryTransactionIDResultsNotFound creates a GetAuditsQueryTransactionIDResultsNotFound with default headers values
func NewGetAuditsQueryTransactionIDResultsNotFound() *GetAuditsQueryTransactionIDResultsNotFound {
	return &GetAuditsQueryTransactionIDResultsNotFound{}
}

/*
GetAuditsQueryTransactionIDResultsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetAuditsQueryTransactionIDResultsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get audits query transaction Id results not found response has a 2xx status code
func (o *GetAuditsQueryTransactionIDResultsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audits query transaction Id results not found response has a 3xx status code
func (o *GetAuditsQueryTransactionIDResultsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audits query transaction Id results not found response has a 4xx status code
func (o *GetAuditsQueryTransactionIDResultsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audits query transaction Id results not found response has a 5xx status code
func (o *GetAuditsQueryTransactionIDResultsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get audits query transaction Id results not found response a status code equal to that given
func (o *GetAuditsQueryTransactionIDResultsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAuditsQueryTransactionIDResultsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsNotFound  %+v", 404, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsNotFound  %+v", 404, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuditsQueryTransactionIDResultsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditsQueryTransactionIDResultsRequestTimeout creates a GetAuditsQueryTransactionIDResultsRequestTimeout with default headers values
func NewGetAuditsQueryTransactionIDResultsRequestTimeout() *GetAuditsQueryTransactionIDResultsRequestTimeout {
	return &GetAuditsQueryTransactionIDResultsRequestTimeout{}
}

/*
GetAuditsQueryTransactionIDResultsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetAuditsQueryTransactionIDResultsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get audits query transaction Id results request timeout response has a 2xx status code
func (o *GetAuditsQueryTransactionIDResultsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audits query transaction Id results request timeout response has a 3xx status code
func (o *GetAuditsQueryTransactionIDResultsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audits query transaction Id results request timeout response has a 4xx status code
func (o *GetAuditsQueryTransactionIDResultsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audits query transaction Id results request timeout response has a 5xx status code
func (o *GetAuditsQueryTransactionIDResultsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get audits query transaction Id results request timeout response a status code equal to that given
func (o *GetAuditsQueryTransactionIDResultsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetAuditsQueryTransactionIDResultsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuditsQueryTransactionIDResultsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditsQueryTransactionIDResultsRequestEntityTooLarge creates a GetAuditsQueryTransactionIDResultsRequestEntityTooLarge with default headers values
func NewGetAuditsQueryTransactionIDResultsRequestEntityTooLarge() *GetAuditsQueryTransactionIDResultsRequestEntityTooLarge {
	return &GetAuditsQueryTransactionIDResultsRequestEntityTooLarge{}
}

/*
GetAuditsQueryTransactionIDResultsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetAuditsQueryTransactionIDResultsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get audits query transaction Id results request entity too large response has a 2xx status code
func (o *GetAuditsQueryTransactionIDResultsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audits query transaction Id results request entity too large response has a 3xx status code
func (o *GetAuditsQueryTransactionIDResultsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audits query transaction Id results request entity too large response has a 4xx status code
func (o *GetAuditsQueryTransactionIDResultsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audits query transaction Id results request entity too large response has a 5xx status code
func (o *GetAuditsQueryTransactionIDResultsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get audits query transaction Id results request entity too large response a status code equal to that given
func (o *GetAuditsQueryTransactionIDResultsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetAuditsQueryTransactionIDResultsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuditsQueryTransactionIDResultsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditsQueryTransactionIDResultsUnsupportedMediaType creates a GetAuditsQueryTransactionIDResultsUnsupportedMediaType with default headers values
func NewGetAuditsQueryTransactionIDResultsUnsupportedMediaType() *GetAuditsQueryTransactionIDResultsUnsupportedMediaType {
	return &GetAuditsQueryTransactionIDResultsUnsupportedMediaType{}
}

/*
GetAuditsQueryTransactionIDResultsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetAuditsQueryTransactionIDResultsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get audits query transaction Id results unsupported media type response has a 2xx status code
func (o *GetAuditsQueryTransactionIDResultsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audits query transaction Id results unsupported media type response has a 3xx status code
func (o *GetAuditsQueryTransactionIDResultsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audits query transaction Id results unsupported media type response has a 4xx status code
func (o *GetAuditsQueryTransactionIDResultsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audits query transaction Id results unsupported media type response has a 5xx status code
func (o *GetAuditsQueryTransactionIDResultsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get audits query transaction Id results unsupported media type response a status code equal to that given
func (o *GetAuditsQueryTransactionIDResultsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetAuditsQueryTransactionIDResultsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuditsQueryTransactionIDResultsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditsQueryTransactionIDResultsTooManyRequests creates a GetAuditsQueryTransactionIDResultsTooManyRequests with default headers values
func NewGetAuditsQueryTransactionIDResultsTooManyRequests() *GetAuditsQueryTransactionIDResultsTooManyRequests {
	return &GetAuditsQueryTransactionIDResultsTooManyRequests{}
}

/*
GetAuditsQueryTransactionIDResultsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetAuditsQueryTransactionIDResultsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get audits query transaction Id results too many requests response has a 2xx status code
func (o *GetAuditsQueryTransactionIDResultsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audits query transaction Id results too many requests response has a 3xx status code
func (o *GetAuditsQueryTransactionIDResultsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audits query transaction Id results too many requests response has a 4xx status code
func (o *GetAuditsQueryTransactionIDResultsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audits query transaction Id results too many requests response has a 5xx status code
func (o *GetAuditsQueryTransactionIDResultsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get audits query transaction Id results too many requests response a status code equal to that given
func (o *GetAuditsQueryTransactionIDResultsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAuditsQueryTransactionIDResultsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuditsQueryTransactionIDResultsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditsQueryTransactionIDResultsInternalServerError creates a GetAuditsQueryTransactionIDResultsInternalServerError with default headers values
func NewGetAuditsQueryTransactionIDResultsInternalServerError() *GetAuditsQueryTransactionIDResultsInternalServerError {
	return &GetAuditsQueryTransactionIDResultsInternalServerError{}
}

/*
GetAuditsQueryTransactionIDResultsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetAuditsQueryTransactionIDResultsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get audits query transaction Id results internal server error response has a 2xx status code
func (o *GetAuditsQueryTransactionIDResultsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audits query transaction Id results internal server error response has a 3xx status code
func (o *GetAuditsQueryTransactionIDResultsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audits query transaction Id results internal server error response has a 4xx status code
func (o *GetAuditsQueryTransactionIDResultsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get audits query transaction Id results internal server error response has a 5xx status code
func (o *GetAuditsQueryTransactionIDResultsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get audits query transaction Id results internal server error response a status code equal to that given
func (o *GetAuditsQueryTransactionIDResultsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAuditsQueryTransactionIDResultsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuditsQueryTransactionIDResultsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditsQueryTransactionIDResultsServiceUnavailable creates a GetAuditsQueryTransactionIDResultsServiceUnavailable with default headers values
func NewGetAuditsQueryTransactionIDResultsServiceUnavailable() *GetAuditsQueryTransactionIDResultsServiceUnavailable {
	return &GetAuditsQueryTransactionIDResultsServiceUnavailable{}
}

/*
GetAuditsQueryTransactionIDResultsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetAuditsQueryTransactionIDResultsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get audits query transaction Id results service unavailable response has a 2xx status code
func (o *GetAuditsQueryTransactionIDResultsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audits query transaction Id results service unavailable response has a 3xx status code
func (o *GetAuditsQueryTransactionIDResultsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audits query transaction Id results service unavailable response has a 4xx status code
func (o *GetAuditsQueryTransactionIDResultsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get audits query transaction Id results service unavailable response has a 5xx status code
func (o *GetAuditsQueryTransactionIDResultsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get audits query transaction Id results service unavailable response a status code equal to that given
func (o *GetAuditsQueryTransactionIDResultsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAuditsQueryTransactionIDResultsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuditsQueryTransactionIDResultsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditsQueryTransactionIDResultsGatewayTimeout creates a GetAuditsQueryTransactionIDResultsGatewayTimeout with default headers values
func NewGetAuditsQueryTransactionIDResultsGatewayTimeout() *GetAuditsQueryTransactionIDResultsGatewayTimeout {
	return &GetAuditsQueryTransactionIDResultsGatewayTimeout{}
}

/*
GetAuditsQueryTransactionIDResultsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetAuditsQueryTransactionIDResultsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get audits query transaction Id results gateway timeout response has a 2xx status code
func (o *GetAuditsQueryTransactionIDResultsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audits query transaction Id results gateway timeout response has a 3xx status code
func (o *GetAuditsQueryTransactionIDResultsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audits query transaction Id results gateway timeout response has a 4xx status code
func (o *GetAuditsQueryTransactionIDResultsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get audits query transaction Id results gateway timeout response has a 5xx status code
func (o *GetAuditsQueryTransactionIDResultsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get audits query transaction Id results gateway timeout response a status code equal to that given
func (o *GetAuditsQueryTransactionIDResultsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetAuditsQueryTransactionIDResultsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/audits/query/{transactionId}/results][%d] getAuditsQueryTransactionIdResultsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAuditsQueryTransactionIDResultsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuditsQueryTransactionIDResultsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

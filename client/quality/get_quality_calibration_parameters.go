// Code generated by go-swagger; DO NOT EDIT.

package quality

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetQualityCalibrationParams creates a new GetQualityCalibrationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetQualityCalibrationParams() *GetQualityCalibrationParams {
	return &GetQualityCalibrationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetQualityCalibrationParamsWithTimeout creates a new GetQualityCalibrationParams object
// with the ability to set a timeout on a request.
func NewGetQualityCalibrationParamsWithTimeout(timeout time.Duration) *GetQualityCalibrationParams {
	return &GetQualityCalibrationParams{
		timeout: timeout,
	}
}

// NewGetQualityCalibrationParamsWithContext creates a new GetQualityCalibrationParams object
// with the ability to set a context for a request.
func NewGetQualityCalibrationParamsWithContext(ctx context.Context) *GetQualityCalibrationParams {
	return &GetQualityCalibrationParams{
		Context: ctx,
	}
}

// NewGetQualityCalibrationParamsWithHTTPClient creates a new GetQualityCalibrationParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetQualityCalibrationParamsWithHTTPClient(client *http.Client) *GetQualityCalibrationParams {
	return &GetQualityCalibrationParams{
		HTTPClient: client,
	}
}

/*
GetQualityCalibrationParams contains all the parameters to send to the API endpoint

	for the get quality calibration operation.

	Typically these are written to a http.Request.
*/
type GetQualityCalibrationParams struct {

	/* CalibrationID.

	   Calibration ID
	*/
	CalibrationID string

	/* CalibratorID.

	   calibratorId
	*/
	CalibratorID *string

	/* ConversationID.

	   conversationId
	*/
	ConversationID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get quality calibration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetQualityCalibrationParams) WithDefaults() *GetQualityCalibrationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get quality calibration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetQualityCalibrationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get quality calibration params
func (o *GetQualityCalibrationParams) WithTimeout(timeout time.Duration) *GetQualityCalibrationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get quality calibration params
func (o *GetQualityCalibrationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get quality calibration params
func (o *GetQualityCalibrationParams) WithContext(ctx context.Context) *GetQualityCalibrationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get quality calibration params
func (o *GetQualityCalibrationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get quality calibration params
func (o *GetQualityCalibrationParams) WithHTTPClient(client *http.Client) *GetQualityCalibrationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get quality calibration params
func (o *GetQualityCalibrationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCalibrationID adds the calibrationID to the get quality calibration params
func (o *GetQualityCalibrationParams) WithCalibrationID(calibrationID string) *GetQualityCalibrationParams {
	o.SetCalibrationID(calibrationID)
	return o
}

// SetCalibrationID adds the calibrationId to the get quality calibration params
func (o *GetQualityCalibrationParams) SetCalibrationID(calibrationID string) {
	o.CalibrationID = calibrationID
}

// WithCalibratorID adds the calibratorID to the get quality calibration params
func (o *GetQualityCalibrationParams) WithCalibratorID(calibratorID *string) *GetQualityCalibrationParams {
	o.SetCalibratorID(calibratorID)
	return o
}

// SetCalibratorID adds the calibratorId to the get quality calibration params
func (o *GetQualityCalibrationParams) SetCalibratorID(calibratorID *string) {
	o.CalibratorID = calibratorID
}

// WithConversationID adds the conversationID to the get quality calibration params
func (o *GetQualityCalibrationParams) WithConversationID(conversationID *string) *GetQualityCalibrationParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the get quality calibration params
func (o *GetQualityCalibrationParams) SetConversationID(conversationID *string) {
	o.ConversationID = conversationID
}

// WriteToRequest writes these params to a swagger request
func (o *GetQualityCalibrationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param calibrationId
	if err := r.SetPathParam("calibrationId", o.CalibrationID); err != nil {
		return err
	}

	if o.CalibratorID != nil {

		// query param calibratorId
		var qrCalibratorID string

		if o.CalibratorID != nil {
			qrCalibratorID = *o.CalibratorID
		}
		qCalibratorID := qrCalibratorID
		if qCalibratorID != "" {

			if err := r.SetQueryParam("calibratorId", qCalibratorID); err != nil {
				return err
			}
		}
	}

	if o.ConversationID != nil {

		// query param conversationId
		var qrConversationID string

		if o.ConversationID != nil {
			qrConversationID = *o.ConversationID
		}
		qConversationID := qrConversationID
		if qConversationID != "" {

			if err := r.SetQueryParam("conversationId", qConversationID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

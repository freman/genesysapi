// Code generated by go-swagger; DO NOT EDIT.

package quality

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutQualityKeywordsetReader is a Reader for the PutQualityKeywordset structure.
type PutQualityKeywordsetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutQualityKeywordsetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutQualityKeywordsetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutQualityKeywordsetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutQualityKeywordsetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutQualityKeywordsetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutQualityKeywordsetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutQualityKeywordsetRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutQualityKeywordsetUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutQualityKeywordsetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutQualityKeywordsetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutQualityKeywordsetServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutQualityKeywordsetGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutQualityKeywordsetOK creates a PutQualityKeywordsetOK with default headers values
func NewPutQualityKeywordsetOK() *PutQualityKeywordsetOK {
	return &PutQualityKeywordsetOK{}
}

/*PutQualityKeywordsetOK handles this case with default header values.

successful operation
*/
type PutQualityKeywordsetOK struct {
	Payload *models.KeywordSet
}

func (o *PutQualityKeywordsetOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/keywordsets/{keywordSetId}][%d] putQualityKeywordsetOK  %+v", 200, o.Payload)
}

func (o *PutQualityKeywordsetOK) GetPayload() *models.KeywordSet {
	return o.Payload
}

func (o *PutQualityKeywordsetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KeywordSet)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityKeywordsetBadRequest creates a PutQualityKeywordsetBadRequest with default headers values
func NewPutQualityKeywordsetBadRequest() *PutQualityKeywordsetBadRequest {
	return &PutQualityKeywordsetBadRequest{}
}

/*PutQualityKeywordsetBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutQualityKeywordsetBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutQualityKeywordsetBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/keywordsets/{keywordSetId}][%d] putQualityKeywordsetBadRequest  %+v", 400, o.Payload)
}

func (o *PutQualityKeywordsetBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityKeywordsetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityKeywordsetUnauthorized creates a PutQualityKeywordsetUnauthorized with default headers values
func NewPutQualityKeywordsetUnauthorized() *PutQualityKeywordsetUnauthorized {
	return &PutQualityKeywordsetUnauthorized{}
}

/*PutQualityKeywordsetUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutQualityKeywordsetUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutQualityKeywordsetUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/keywordsets/{keywordSetId}][%d] putQualityKeywordsetUnauthorized  %+v", 401, o.Payload)
}

func (o *PutQualityKeywordsetUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityKeywordsetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityKeywordsetForbidden creates a PutQualityKeywordsetForbidden with default headers values
func NewPutQualityKeywordsetForbidden() *PutQualityKeywordsetForbidden {
	return &PutQualityKeywordsetForbidden{}
}

/*PutQualityKeywordsetForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutQualityKeywordsetForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutQualityKeywordsetForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/keywordsets/{keywordSetId}][%d] putQualityKeywordsetForbidden  %+v", 403, o.Payload)
}

func (o *PutQualityKeywordsetForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityKeywordsetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityKeywordsetNotFound creates a PutQualityKeywordsetNotFound with default headers values
func NewPutQualityKeywordsetNotFound() *PutQualityKeywordsetNotFound {
	return &PutQualityKeywordsetNotFound{}
}

/*PutQualityKeywordsetNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutQualityKeywordsetNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutQualityKeywordsetNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/keywordsets/{keywordSetId}][%d] putQualityKeywordsetNotFound  %+v", 404, o.Payload)
}

func (o *PutQualityKeywordsetNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityKeywordsetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityKeywordsetRequestEntityTooLarge creates a PutQualityKeywordsetRequestEntityTooLarge with default headers values
func NewPutQualityKeywordsetRequestEntityTooLarge() *PutQualityKeywordsetRequestEntityTooLarge {
	return &PutQualityKeywordsetRequestEntityTooLarge{}
}

/*PutQualityKeywordsetRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PutQualityKeywordsetRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutQualityKeywordsetRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/keywordsets/{keywordSetId}][%d] putQualityKeywordsetRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutQualityKeywordsetRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityKeywordsetRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityKeywordsetUnsupportedMediaType creates a PutQualityKeywordsetUnsupportedMediaType with default headers values
func NewPutQualityKeywordsetUnsupportedMediaType() *PutQualityKeywordsetUnsupportedMediaType {
	return &PutQualityKeywordsetUnsupportedMediaType{}
}

/*PutQualityKeywordsetUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutQualityKeywordsetUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutQualityKeywordsetUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/keywordsets/{keywordSetId}][%d] putQualityKeywordsetUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutQualityKeywordsetUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityKeywordsetUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityKeywordsetTooManyRequests creates a PutQualityKeywordsetTooManyRequests with default headers values
func NewPutQualityKeywordsetTooManyRequests() *PutQualityKeywordsetTooManyRequests {
	return &PutQualityKeywordsetTooManyRequests{}
}

/*PutQualityKeywordsetTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PutQualityKeywordsetTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutQualityKeywordsetTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/keywordsets/{keywordSetId}][%d] putQualityKeywordsetTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutQualityKeywordsetTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityKeywordsetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityKeywordsetInternalServerError creates a PutQualityKeywordsetInternalServerError with default headers values
func NewPutQualityKeywordsetInternalServerError() *PutQualityKeywordsetInternalServerError {
	return &PutQualityKeywordsetInternalServerError{}
}

/*PutQualityKeywordsetInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutQualityKeywordsetInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutQualityKeywordsetInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/keywordsets/{keywordSetId}][%d] putQualityKeywordsetInternalServerError  %+v", 500, o.Payload)
}

func (o *PutQualityKeywordsetInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityKeywordsetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityKeywordsetServiceUnavailable creates a PutQualityKeywordsetServiceUnavailable with default headers values
func NewPutQualityKeywordsetServiceUnavailable() *PutQualityKeywordsetServiceUnavailable {
	return &PutQualityKeywordsetServiceUnavailable{}
}

/*PutQualityKeywordsetServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutQualityKeywordsetServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutQualityKeywordsetServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/keywordsets/{keywordSetId}][%d] putQualityKeywordsetServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutQualityKeywordsetServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityKeywordsetServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityKeywordsetGatewayTimeout creates a PutQualityKeywordsetGatewayTimeout with default headers values
func NewPutQualityKeywordsetGatewayTimeout() *PutQualityKeywordsetGatewayTimeout {
	return &PutQualityKeywordsetGatewayTimeout{}
}

/*PutQualityKeywordsetGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutQualityKeywordsetGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutQualityKeywordsetGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/keywordsets/{keywordSetId}][%d] putQualityKeywordsetGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutQualityKeywordsetGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityKeywordsetGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package quality

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the quality client
type API interface {
	/*
	   DeleteQualityCalibration deletes a calibration by id
	*/
	DeleteQualityCalibration(ctx context.Context, params *DeleteQualityCalibrationParams) (*DeleteQualityCalibrationOK, error)
	/*
	   DeleteQualityConversationEvaluation deletes an evaluation
	*/
	DeleteQualityConversationEvaluation(ctx context.Context, params *DeleteQualityConversationEvaluationParams) (*DeleteQualityConversationEvaluationOK, error)
	/*
	   DeleteQualityForm deletes an evaluation form
	*/
	DeleteQualityForm(ctx context.Context, params *DeleteQualityFormParams) (*DeleteQualityFormOK, error)
	/*
	   DeleteQualityFormsEvaluation deletes an evaluation form
	*/
	DeleteQualityFormsEvaluation(ctx context.Context, params *DeleteQualityFormsEvaluationParams) (*DeleteQualityFormsEvaluationNoContent, error)
	/*
	   DeleteQualityFormsSurvey deletes a survey form
	*/
	DeleteQualityFormsSurvey(ctx context.Context, params *DeleteQualityFormsSurveyParams) (*DeleteQualityFormsSurveyNoContent, error)
	/*
	   DeleteQualityKeywordset deletes a keyword set by id
	*/
	DeleteQualityKeywordset(ctx context.Context, params *DeleteQualityKeywordsetParams) error
	/*
	   DeleteQualityKeywordsets deletes keyword sets
	   Bulk delete of keyword sets; this will only delete the keyword sets that match the ids specified in the query param.
	*/
	DeleteQualityKeywordsets(ctx context.Context, params *DeleteQualityKeywordsetsParams) (*DeleteQualityKeywordsetsOK, error)
	/*
	   GetQualityAgentsActivity gets a list of agent activities
	   Including the number of evaluations and average evaluation score
	*/
	GetQualityAgentsActivity(ctx context.Context, params *GetQualityAgentsActivityParams) (*GetQualityAgentsActivityOK, error)
	/*
	   GetQualityCalibration gets a calibration by id requires either calibrator id or conversation id
	*/
	GetQualityCalibration(ctx context.Context, params *GetQualityCalibrationParams) (*GetQualityCalibrationOK, error)
	/*
	   GetQualityCalibrations gets the list of calibrations
	*/
	GetQualityCalibrations(ctx context.Context, params *GetQualityCalibrationsParams) (*GetQualityCalibrationsOK, error)
	/*
	   GetQualityConversationAudits gets audits for conversation or recording
	   Different permissions are required for viewing different resource audit entries.  The quality:evaluation:viewAudit permission is required to view evaluation audits, the recording:recording:viewAudit permission is required to view recording audits, and so on.
	*/
	GetQualityConversationAudits(ctx context.Context, params *GetQualityConversationAuditsParams) (*GetQualityConversationAuditsOK, error)
	/*
	   GetQualityConversationEvaluation gets an evaluation
	*/
	GetQualityConversationEvaluation(ctx context.Context, params *GetQualityConversationEvaluationParams) (*GetQualityConversationEvaluationOK, error)
	/*
	   GetQualityConversationSurveys gets the surveys for a conversation
	*/
	GetQualityConversationSurveys(ctx context.Context, params *GetQualityConversationSurveysParams) (*GetQualityConversationSurveysOK, error)
	/*
	   GetQualityEvaluationsQuery queries evaluations and returns a paged list
	   Query params must include one of conversationId, evaluatorUserId, or agentUserId
	*/
	GetQualityEvaluationsQuery(ctx context.Context, params *GetQualityEvaluationsQueryParams) (*GetQualityEvaluationsQueryOK, error)
	/*
	   GetQualityEvaluatorsActivity gets an evaluator activity
	*/
	GetQualityEvaluatorsActivity(ctx context.Context, params *GetQualityEvaluatorsActivityParams) (*GetQualityEvaluatorsActivityOK, error)
	/*
	   GetQualityForm gets an evaluation form
	*/
	GetQualityForm(ctx context.Context, params *GetQualityFormParams) (*GetQualityFormOK, error)
	/*
	   GetQualityFormVersions gets all the revisions for a specific evaluation
	*/
	GetQualityFormVersions(ctx context.Context, params *GetQualityFormVersionsParams) (*GetQualityFormVersionsOK, error)
	/*
	   GetQualityForms gets the list of evaluation forms
	*/
	GetQualityForms(ctx context.Context, params *GetQualityFormsParams) (*GetQualityFormsOK, error)
	/*
	   GetQualityFormsEvaluation gets an evaluation form
	*/
	GetQualityFormsEvaluation(ctx context.Context, params *GetQualityFormsEvaluationParams) (*GetQualityFormsEvaluationOK, error)
	/*
	   GetQualityFormsEvaluationVersions gets all the revisions for a specific evaluation
	*/
	GetQualityFormsEvaluationVersions(ctx context.Context, params *GetQualityFormsEvaluationVersionsParams) (*GetQualityFormsEvaluationVersionsOK, error)
	/*
	   GetQualityFormsEvaluations gets the list of evaluation forms
	*/
	GetQualityFormsEvaluations(ctx context.Context, params *GetQualityFormsEvaluationsParams) (*GetQualityFormsEvaluationsOK, error)
	/*
	   GetQualityFormsSurvey gets a survey form
	*/
	GetQualityFormsSurvey(ctx context.Context, params *GetQualityFormsSurveyParams) (*GetQualityFormsSurveyOK, error)
	/*
	   GetQualityFormsSurveyVersions gets all the revisions for a specific survey
	*/
	GetQualityFormsSurveyVersions(ctx context.Context, params *GetQualityFormsSurveyVersionsParams) (*GetQualityFormsSurveyVersionsOK, error)
	/*
	   GetQualityFormsSurveys gets the list of survey forms
	*/
	GetQualityFormsSurveys(ctx context.Context, params *GetQualityFormsSurveysParams) (*GetQualityFormsSurveysOK, error)
	/*
	   GetQualityFormsSurveysBulk retrieves a list of survey forms by their ids
	*/
	GetQualityFormsSurveysBulk(ctx context.Context, params *GetQualityFormsSurveysBulkParams) (*GetQualityFormsSurveysBulkOK, error)
	/*
	   GetQualityFormsSurveysBulkContexts retrieves a list of the latest form versions by context ids
	*/
	GetQualityFormsSurveysBulkContexts(ctx context.Context, params *GetQualityFormsSurveysBulkContextsParams) (*GetQualityFormsSurveysBulkContextsOK, error)
	/*
	   GetQualityKeywordset gets a keyword set by id
	*/
	GetQualityKeywordset(ctx context.Context, params *GetQualityKeywordsetParams) (*GetQualityKeywordsetOK, error)
	/*
	   GetQualityKeywordsets gets the list of keyword sets
	*/
	GetQualityKeywordsets(ctx context.Context, params *GetQualityKeywordsetsParams) (*GetQualityKeywordsetsOK, error)
	/*
	   GetQualityPublishedform gets the published evaluation forms
	*/
	GetQualityPublishedform(ctx context.Context, params *GetQualityPublishedformParams) (*GetQualityPublishedformOK, error)
	/*
	   GetQualityPublishedforms gets the published evaluation forms
	*/
	GetQualityPublishedforms(ctx context.Context, params *GetQualityPublishedformsParams) (*GetQualityPublishedformsOK, error)
	/*
	   GetQualityPublishedformsEvaluation gets the most recent published version of an evaluation form
	*/
	GetQualityPublishedformsEvaluation(ctx context.Context, params *GetQualityPublishedformsEvaluationParams) (*GetQualityPublishedformsEvaluationOK, error)
	/*
	   GetQualityPublishedformsEvaluations gets the published evaluation forms
	*/
	GetQualityPublishedformsEvaluations(ctx context.Context, params *GetQualityPublishedformsEvaluationsParams) (*GetQualityPublishedformsEvaluationsOK, error)
	/*
	   GetQualityPublishedformsSurvey gets the most recent published version of a survey form
	*/
	GetQualityPublishedformsSurvey(ctx context.Context, params *GetQualityPublishedformsSurveyParams) (*GetQualityPublishedformsSurveyOK, error)
	/*
	   GetQualityPublishedformsSurveys gets the published survey forms
	*/
	GetQualityPublishedformsSurveys(ctx context.Context, params *GetQualityPublishedformsSurveysParams) (*GetQualityPublishedformsSurveysOK, error)
	/*
	   GetQualitySurvey gets a survey for a conversation
	*/
	GetQualitySurvey(ctx context.Context, params *GetQualitySurveyParams) (*GetQualitySurveyOK, error)
	/*
	   GetQualitySurveysScorable gets a survey as an end customer for the purposes of scoring it
	*/
	GetQualitySurveysScorable(ctx context.Context, params *GetQualitySurveysScorableParams) (*GetQualitySurveysScorableOK, error)
	/*
	   PatchQualityFormsSurvey disables a particular version of a survey form and invalidates any invitations that have already been sent to customers using this version of the form
	*/
	PatchQualityFormsSurvey(ctx context.Context, params *PatchQualityFormsSurveyParams) (*PatchQualityFormsSurveyOK, error)
	/*
	   PostAnalyticsEvaluationsAggregatesQuery queries for evaluation aggregates
	*/
	PostAnalyticsEvaluationsAggregatesQuery(ctx context.Context, params *PostAnalyticsEvaluationsAggregatesQueryParams) (*PostAnalyticsEvaluationsAggregatesQueryOK, error)
	/*
	   PostAnalyticsSurveysAggregatesQuery queries for survey aggregates
	*/
	PostAnalyticsSurveysAggregatesQuery(ctx context.Context, params *PostAnalyticsSurveysAggregatesQueryParams) (*PostAnalyticsSurveysAggregatesQueryOK, error)
	/*
	   PostAnalyticsTranscriptsAggregatesQuery queries for transcript aggregates
	*/
	PostAnalyticsTranscriptsAggregatesQuery(ctx context.Context, params *PostAnalyticsTranscriptsAggregatesQueryParams) (*PostAnalyticsTranscriptsAggregatesQueryOK, error)
	/*
	   PostQualityCalibrations creates a calibration
	*/
	PostQualityCalibrations(ctx context.Context, params *PostQualityCalibrationsParams) (*PostQualityCalibrationsOK, error)
	/*
	   PostQualityConversationEvaluations creates an evaluation
	*/
	PostQualityConversationEvaluations(ctx context.Context, params *PostQualityConversationEvaluationsParams) (*PostQualityConversationEvaluationsOK, error)
	/*
	   PostQualityEvaluationsScoring scores evaluation
	*/
	PostQualityEvaluationsScoring(ctx context.Context, params *PostQualityEvaluationsScoringParams) (*PostQualityEvaluationsScoringOK, error)
	/*
	   PostQualityForms creates an evaluation form
	*/
	PostQualityForms(ctx context.Context, params *PostQualityFormsParams) (*PostQualityFormsOK, error)
	/*
	   PostQualityFormsEvaluations creates an evaluation form
	*/
	PostQualityFormsEvaluations(ctx context.Context, params *PostQualityFormsEvaluationsParams) (*PostQualityFormsEvaluationsOK, error)
	/*
	   PostQualityFormsSurveys creates a survey form
	*/
	PostQualityFormsSurveys(ctx context.Context, params *PostQualityFormsSurveysParams) (*PostQualityFormsSurveysOK, error)
	/*
	   PostQualityKeywordsets creates a keyword set
	*/
	PostQualityKeywordsets(ctx context.Context, params *PostQualityKeywordsetsParams) (*PostQualityKeywordsetsOK, error)
	/*
	   PostQualityPublishedforms publishes an evaluation form
	*/
	PostQualityPublishedforms(ctx context.Context, params *PostQualityPublishedformsParams) (*PostQualityPublishedformsOK, error)
	/*
	   PostQualityPublishedformsEvaluations publishes an evaluation form
	*/
	PostQualityPublishedformsEvaluations(ctx context.Context, params *PostQualityPublishedformsEvaluationsParams) (*PostQualityPublishedformsEvaluationsOK, error)
	/*
	   PostQualityPublishedformsSurveys publishes a survey form
	*/
	PostQualityPublishedformsSurveys(ctx context.Context, params *PostQualityPublishedformsSurveysParams) (*PostQualityPublishedformsSurveysOK, error)
	/*
	   PostQualitySpotability retrieves the spotability statistic
	*/
	PostQualitySpotability(ctx context.Context, params *PostQualitySpotabilityParams) (*PostQualitySpotabilityOK, error)
	/*
	   PostQualitySurveysScoring scores survey
	*/
	PostQualitySurveysScoring(ctx context.Context, params *PostQualitySurveysScoringParams) (*PostQualitySurveysScoringOK, error)
	/*
	   PutQualityCalibration updates a calibration to the specified calibration via p u t editable fields include evaluators expert evaluator and scoring index
	*/
	PutQualityCalibration(ctx context.Context, params *PutQualityCalibrationParams) (*PutQualityCalibrationOK, error)
	/*
	   PutQualityConversationEvaluation updates an evaluation
	   The quality:evaluation:edit permission allows modification of most fields, while the quality:evaluation:editScore permission allows an evaluator to change just the question scores, and the quality:evaluation:editAgentSignoff permission allows an agent to change the agent comments and sign off on the evaluation.
	*/
	PutQualityConversationEvaluation(ctx context.Context, params *PutQualityConversationEvaluationParams) (*PutQualityConversationEvaluationOK, error)
	/*
	   PutQualityForm updates an evaluation form
	*/
	PutQualityForm(ctx context.Context, params *PutQualityFormParams) (*PutQualityFormOK, error)
	/*
	   PutQualityFormsEvaluation updates an evaluation form
	*/
	PutQualityFormsEvaluation(ctx context.Context, params *PutQualityFormsEvaluationParams) (*PutQualityFormsEvaluationOK, error)
	/*
	   PutQualityFormsSurvey updates a survey form
	*/
	PutQualityFormsSurvey(ctx context.Context, params *PutQualityFormsSurveyParams) (*PutQualityFormsSurveyOK, error)
	/*
	   PutQualityKeywordset updates a keyword set to the specified keyword set via p u t
	*/
	PutQualityKeywordset(ctx context.Context, params *PutQualityKeywordsetParams) (*PutQualityKeywordsetOK, error)
	/*
	   PutQualitySurveysScorable updates a survey as an end customer for the purposes of scoring it
	*/
	PutQualitySurveysScorable(ctx context.Context, params *PutQualitySurveysScorableParams) (*PutQualitySurveysScorableOK, error)
}

// New creates a new quality API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for quality API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteQualityCalibration deletes a calibration by id
*/
func (a *Client) DeleteQualityCalibration(ctx context.Context, params *DeleteQualityCalibrationParams) (*DeleteQualityCalibrationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteQualityCalibration",
		Method:             "DELETE",
		PathPattern:        "/api/v2/quality/calibrations/{calibrationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteQualityCalibrationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteQualityCalibrationOK), nil

}

/*
DeleteQualityConversationEvaluation deletes an evaluation
*/
func (a *Client) DeleteQualityConversationEvaluation(ctx context.Context, params *DeleteQualityConversationEvaluationParams) (*DeleteQualityConversationEvaluationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteQualityConversationEvaluation",
		Method:             "DELETE",
		PathPattern:        "/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteQualityConversationEvaluationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteQualityConversationEvaluationOK), nil

}

/*
DeleteQualityForm deletes an evaluation form
*/
func (a *Client) DeleteQualityForm(ctx context.Context, params *DeleteQualityFormParams) (*DeleteQualityFormOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteQualityForm",
		Method:             "DELETE",
		PathPattern:        "/api/v2/quality/forms/{formId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteQualityFormReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteQualityFormOK), nil

}

/*
DeleteQualityFormsEvaluation deletes an evaluation form
*/
func (a *Client) DeleteQualityFormsEvaluation(ctx context.Context, params *DeleteQualityFormsEvaluationParams) (*DeleteQualityFormsEvaluationNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteQualityFormsEvaluation",
		Method:             "DELETE",
		PathPattern:        "/api/v2/quality/forms/evaluations/{formId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteQualityFormsEvaluationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteQualityFormsEvaluationNoContent), nil

}

/*
DeleteQualityFormsSurvey deletes a survey form
*/
func (a *Client) DeleteQualityFormsSurvey(ctx context.Context, params *DeleteQualityFormsSurveyParams) (*DeleteQualityFormsSurveyNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteQualityFormsSurvey",
		Method:             "DELETE",
		PathPattern:        "/api/v2/quality/forms/surveys/{formId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteQualityFormsSurveyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteQualityFormsSurveyNoContent), nil

}

/*
DeleteQualityKeywordset deletes a keyword set by id
*/
func (a *Client) DeleteQualityKeywordset(ctx context.Context, params *DeleteQualityKeywordsetParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteQualityKeywordset",
		Method:             "DELETE",
		PathPattern:        "/api/v2/quality/keywordsets/{keywordSetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteQualityKeywordsetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteQualityKeywordsets deletes keyword sets

Bulk delete of keyword sets; this will only delete the keyword sets that match the ids specified in the query param.
*/
func (a *Client) DeleteQualityKeywordsets(ctx context.Context, params *DeleteQualityKeywordsetsParams) (*DeleteQualityKeywordsetsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteQualityKeywordsets",
		Method:             "DELETE",
		PathPattern:        "/api/v2/quality/keywordsets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteQualityKeywordsetsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteQualityKeywordsetsOK), nil

}

/*
GetQualityAgentsActivity gets a list of agent activities

Including the number of evaluations and average evaluation score
*/
func (a *Client) GetQualityAgentsActivity(ctx context.Context, params *GetQualityAgentsActivityParams) (*GetQualityAgentsActivityOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityAgentsActivity",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/agents/activity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityAgentsActivityReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityAgentsActivityOK), nil

}

/*
GetQualityCalibration gets a calibration by id requires either calibrator id or conversation id
*/
func (a *Client) GetQualityCalibration(ctx context.Context, params *GetQualityCalibrationParams) (*GetQualityCalibrationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityCalibration",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/calibrations/{calibrationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityCalibrationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityCalibrationOK), nil

}

/*
GetQualityCalibrations gets the list of calibrations
*/
func (a *Client) GetQualityCalibrations(ctx context.Context, params *GetQualityCalibrationsParams) (*GetQualityCalibrationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityCalibrations",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/calibrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityCalibrationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityCalibrationsOK), nil

}

/*
GetQualityConversationAudits gets audits for conversation or recording

Different permissions are required for viewing different resource audit entries.  The quality:evaluation:viewAudit permission is required to view evaluation audits, the recording:recording:viewAudit permission is required to view recording audits, and so on.
*/
func (a *Client) GetQualityConversationAudits(ctx context.Context, params *GetQualityConversationAuditsParams) (*GetQualityConversationAuditsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityConversationAudits",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/conversations/{conversationId}/audits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityConversationAuditsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityConversationAuditsOK), nil

}

/*
GetQualityConversationEvaluation gets an evaluation
*/
func (a *Client) GetQualityConversationEvaluation(ctx context.Context, params *GetQualityConversationEvaluationParams) (*GetQualityConversationEvaluationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityConversationEvaluation",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityConversationEvaluationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityConversationEvaluationOK), nil

}

/*
GetQualityConversationSurveys gets the surveys for a conversation
*/
func (a *Client) GetQualityConversationSurveys(ctx context.Context, params *GetQualityConversationSurveysParams) (*GetQualityConversationSurveysOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityConversationSurveys",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/conversations/{conversationId}/surveys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityConversationSurveysReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityConversationSurveysOK), nil

}

/*
GetQualityEvaluationsQuery queries evaluations and returns a paged list

Query params must include one of conversationId, evaluatorUserId, or agentUserId
*/
func (a *Client) GetQualityEvaluationsQuery(ctx context.Context, params *GetQualityEvaluationsQueryParams) (*GetQualityEvaluationsQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityEvaluationsQuery",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/evaluations/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityEvaluationsQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityEvaluationsQueryOK), nil

}

/*
GetQualityEvaluatorsActivity gets an evaluator activity
*/
func (a *Client) GetQualityEvaluatorsActivity(ctx context.Context, params *GetQualityEvaluatorsActivityParams) (*GetQualityEvaluatorsActivityOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityEvaluatorsActivity",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/evaluators/activity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityEvaluatorsActivityReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityEvaluatorsActivityOK), nil

}

/*
GetQualityForm gets an evaluation form
*/
func (a *Client) GetQualityForm(ctx context.Context, params *GetQualityFormParams) (*GetQualityFormOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityForm",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/forms/{formId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityFormReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityFormOK), nil

}

/*
GetQualityFormVersions gets all the revisions for a specific evaluation
*/
func (a *Client) GetQualityFormVersions(ctx context.Context, params *GetQualityFormVersionsParams) (*GetQualityFormVersionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityFormVersions",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/forms/{formId}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityFormVersionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityFormVersionsOK), nil

}

/*
GetQualityForms gets the list of evaluation forms
*/
func (a *Client) GetQualityForms(ctx context.Context, params *GetQualityFormsParams) (*GetQualityFormsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityForms",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/forms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityFormsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityFormsOK), nil

}

/*
GetQualityFormsEvaluation gets an evaluation form
*/
func (a *Client) GetQualityFormsEvaluation(ctx context.Context, params *GetQualityFormsEvaluationParams) (*GetQualityFormsEvaluationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityFormsEvaluation",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/forms/evaluations/{formId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityFormsEvaluationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityFormsEvaluationOK), nil

}

/*
GetQualityFormsEvaluationVersions gets all the revisions for a specific evaluation
*/
func (a *Client) GetQualityFormsEvaluationVersions(ctx context.Context, params *GetQualityFormsEvaluationVersionsParams) (*GetQualityFormsEvaluationVersionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityFormsEvaluationVersions",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/forms/evaluations/{formId}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityFormsEvaluationVersionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityFormsEvaluationVersionsOK), nil

}

/*
GetQualityFormsEvaluations gets the list of evaluation forms
*/
func (a *Client) GetQualityFormsEvaluations(ctx context.Context, params *GetQualityFormsEvaluationsParams) (*GetQualityFormsEvaluationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityFormsEvaluations",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/forms/evaluations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityFormsEvaluationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityFormsEvaluationsOK), nil

}

/*
GetQualityFormsSurvey gets a survey form
*/
func (a *Client) GetQualityFormsSurvey(ctx context.Context, params *GetQualityFormsSurveyParams) (*GetQualityFormsSurveyOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityFormsSurvey",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/forms/surveys/{formId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityFormsSurveyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityFormsSurveyOK), nil

}

/*
GetQualityFormsSurveyVersions gets all the revisions for a specific survey
*/
func (a *Client) GetQualityFormsSurveyVersions(ctx context.Context, params *GetQualityFormsSurveyVersionsParams) (*GetQualityFormsSurveyVersionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityFormsSurveyVersions",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/forms/surveys/{formId}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityFormsSurveyVersionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityFormsSurveyVersionsOK), nil

}

/*
GetQualityFormsSurveys gets the list of survey forms
*/
func (a *Client) GetQualityFormsSurveys(ctx context.Context, params *GetQualityFormsSurveysParams) (*GetQualityFormsSurveysOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityFormsSurveys",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/forms/surveys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityFormsSurveysReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityFormsSurveysOK), nil

}

/*
GetQualityFormsSurveysBulk retrieves a list of survey forms by their ids
*/
func (a *Client) GetQualityFormsSurveysBulk(ctx context.Context, params *GetQualityFormsSurveysBulkParams) (*GetQualityFormsSurveysBulkOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityFormsSurveysBulk",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/forms/surveys/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityFormsSurveysBulkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityFormsSurveysBulkOK), nil

}

/*
GetQualityFormsSurveysBulkContexts retrieves a list of the latest form versions by context ids
*/
func (a *Client) GetQualityFormsSurveysBulkContexts(ctx context.Context, params *GetQualityFormsSurveysBulkContextsParams) (*GetQualityFormsSurveysBulkContextsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityFormsSurveysBulkContexts",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/forms/surveys/bulk/contexts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityFormsSurveysBulkContextsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityFormsSurveysBulkContextsOK), nil

}

/*
GetQualityKeywordset gets a keyword set by id
*/
func (a *Client) GetQualityKeywordset(ctx context.Context, params *GetQualityKeywordsetParams) (*GetQualityKeywordsetOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityKeywordset",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/keywordsets/{keywordSetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityKeywordsetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityKeywordsetOK), nil

}

/*
GetQualityKeywordsets gets the list of keyword sets
*/
func (a *Client) GetQualityKeywordsets(ctx context.Context, params *GetQualityKeywordsetsParams) (*GetQualityKeywordsetsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityKeywordsets",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/keywordsets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityKeywordsetsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityKeywordsetsOK), nil

}

/*
GetQualityPublishedform gets the published evaluation forms
*/
func (a *Client) GetQualityPublishedform(ctx context.Context, params *GetQualityPublishedformParams) (*GetQualityPublishedformOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityPublishedform",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/publishedforms/{formId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityPublishedformReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityPublishedformOK), nil

}

/*
GetQualityPublishedforms gets the published evaluation forms
*/
func (a *Client) GetQualityPublishedforms(ctx context.Context, params *GetQualityPublishedformsParams) (*GetQualityPublishedformsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityPublishedforms",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/publishedforms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityPublishedformsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityPublishedformsOK), nil

}

/*
GetQualityPublishedformsEvaluation gets the most recent published version of an evaluation form
*/
func (a *Client) GetQualityPublishedformsEvaluation(ctx context.Context, params *GetQualityPublishedformsEvaluationParams) (*GetQualityPublishedformsEvaluationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityPublishedformsEvaluation",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/publishedforms/evaluations/{formId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityPublishedformsEvaluationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityPublishedformsEvaluationOK), nil

}

/*
GetQualityPublishedformsEvaluations gets the published evaluation forms
*/
func (a *Client) GetQualityPublishedformsEvaluations(ctx context.Context, params *GetQualityPublishedformsEvaluationsParams) (*GetQualityPublishedformsEvaluationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityPublishedformsEvaluations",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/publishedforms/evaluations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityPublishedformsEvaluationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityPublishedformsEvaluationsOK), nil

}

/*
GetQualityPublishedformsSurvey gets the most recent published version of a survey form
*/
func (a *Client) GetQualityPublishedformsSurvey(ctx context.Context, params *GetQualityPublishedformsSurveyParams) (*GetQualityPublishedformsSurveyOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityPublishedformsSurvey",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/publishedforms/surveys/{formId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityPublishedformsSurveyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityPublishedformsSurveyOK), nil

}

/*
GetQualityPublishedformsSurveys gets the published survey forms
*/
func (a *Client) GetQualityPublishedformsSurveys(ctx context.Context, params *GetQualityPublishedformsSurveysParams) (*GetQualityPublishedformsSurveysOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualityPublishedformsSurveys",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/publishedforms/surveys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualityPublishedformsSurveysReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualityPublishedformsSurveysOK), nil

}

/*
GetQualitySurvey gets a survey for a conversation
*/
func (a *Client) GetQualitySurvey(ctx context.Context, params *GetQualitySurveyParams) (*GetQualitySurveyOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualitySurvey",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/surveys/{surveyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualitySurveyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualitySurveyOK), nil

}

/*
GetQualitySurveysScorable gets a survey as an end customer for the purposes of scoring it
*/
func (a *Client) GetQualitySurveysScorable(ctx context.Context, params *GetQualitySurveysScorableParams) (*GetQualitySurveysScorableOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQualitySurveysScorable",
		Method:             "GET",
		PathPattern:        "/api/v2/quality/surveys/scorable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQualitySurveysScorableReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQualitySurveysScorableOK), nil

}

/*
PatchQualityFormsSurvey disables a particular version of a survey form and invalidates any invitations that have already been sent to customers using this version of the form
*/
func (a *Client) PatchQualityFormsSurvey(ctx context.Context, params *PatchQualityFormsSurveyParams) (*PatchQualityFormsSurveyOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchQualityFormsSurvey",
		Method:             "PATCH",
		PathPattern:        "/api/v2/quality/forms/surveys/{formId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchQualityFormsSurveyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchQualityFormsSurveyOK), nil

}

/*
PostAnalyticsEvaluationsAggregatesQuery queries for evaluation aggregates
*/
func (a *Client) PostAnalyticsEvaluationsAggregatesQuery(ctx context.Context, params *PostAnalyticsEvaluationsAggregatesQueryParams) (*PostAnalyticsEvaluationsAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsEvaluationsAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/evaluations/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsEvaluationsAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsEvaluationsAggregatesQueryOK), nil

}

/*
PostAnalyticsSurveysAggregatesQuery queries for survey aggregates
*/
func (a *Client) PostAnalyticsSurveysAggregatesQuery(ctx context.Context, params *PostAnalyticsSurveysAggregatesQueryParams) (*PostAnalyticsSurveysAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsSurveysAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/surveys/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsSurveysAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsSurveysAggregatesQueryOK), nil

}

/*
PostAnalyticsTranscriptsAggregatesQuery queries for transcript aggregates
*/
func (a *Client) PostAnalyticsTranscriptsAggregatesQuery(ctx context.Context, params *PostAnalyticsTranscriptsAggregatesQueryParams) (*PostAnalyticsTranscriptsAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsTranscriptsAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/transcripts/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsTranscriptsAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsTranscriptsAggregatesQueryOK), nil

}

/*
PostQualityCalibrations creates a calibration
*/
func (a *Client) PostQualityCalibrations(ctx context.Context, params *PostQualityCalibrationsParams) (*PostQualityCalibrationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postQualityCalibrations",
		Method:             "POST",
		PathPattern:        "/api/v2/quality/calibrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostQualityCalibrationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostQualityCalibrationsOK), nil

}

/*
PostQualityConversationEvaluations creates an evaluation
*/
func (a *Client) PostQualityConversationEvaluations(ctx context.Context, params *PostQualityConversationEvaluationsParams) (*PostQualityConversationEvaluationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postQualityConversationEvaluations",
		Method:             "POST",
		PathPattern:        "/api/v2/quality/conversations/{conversationId}/evaluations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostQualityConversationEvaluationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostQualityConversationEvaluationsOK), nil

}

/*
PostQualityEvaluationsScoring scores evaluation
*/
func (a *Client) PostQualityEvaluationsScoring(ctx context.Context, params *PostQualityEvaluationsScoringParams) (*PostQualityEvaluationsScoringOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postQualityEvaluationsScoring",
		Method:             "POST",
		PathPattern:        "/api/v2/quality/evaluations/scoring",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostQualityEvaluationsScoringReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostQualityEvaluationsScoringOK), nil

}

/*
PostQualityForms creates an evaluation form
*/
func (a *Client) PostQualityForms(ctx context.Context, params *PostQualityFormsParams) (*PostQualityFormsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postQualityForms",
		Method:             "POST",
		PathPattern:        "/api/v2/quality/forms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostQualityFormsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostQualityFormsOK), nil

}

/*
PostQualityFormsEvaluations creates an evaluation form
*/
func (a *Client) PostQualityFormsEvaluations(ctx context.Context, params *PostQualityFormsEvaluationsParams) (*PostQualityFormsEvaluationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postQualityFormsEvaluations",
		Method:             "POST",
		PathPattern:        "/api/v2/quality/forms/evaluations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostQualityFormsEvaluationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostQualityFormsEvaluationsOK), nil

}

/*
PostQualityFormsSurveys creates a survey form
*/
func (a *Client) PostQualityFormsSurveys(ctx context.Context, params *PostQualityFormsSurveysParams) (*PostQualityFormsSurveysOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postQualityFormsSurveys",
		Method:             "POST",
		PathPattern:        "/api/v2/quality/forms/surveys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostQualityFormsSurveysReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostQualityFormsSurveysOK), nil

}

/*
PostQualityKeywordsets creates a keyword set
*/
func (a *Client) PostQualityKeywordsets(ctx context.Context, params *PostQualityKeywordsetsParams) (*PostQualityKeywordsetsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postQualityKeywordsets",
		Method:             "POST",
		PathPattern:        "/api/v2/quality/keywordsets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostQualityKeywordsetsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostQualityKeywordsetsOK), nil

}

/*
PostQualityPublishedforms publishes an evaluation form
*/
func (a *Client) PostQualityPublishedforms(ctx context.Context, params *PostQualityPublishedformsParams) (*PostQualityPublishedformsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postQualityPublishedforms",
		Method:             "POST",
		PathPattern:        "/api/v2/quality/publishedforms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostQualityPublishedformsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostQualityPublishedformsOK), nil

}

/*
PostQualityPublishedformsEvaluations publishes an evaluation form
*/
func (a *Client) PostQualityPublishedformsEvaluations(ctx context.Context, params *PostQualityPublishedformsEvaluationsParams) (*PostQualityPublishedformsEvaluationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postQualityPublishedformsEvaluations",
		Method:             "POST",
		PathPattern:        "/api/v2/quality/publishedforms/evaluations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostQualityPublishedformsEvaluationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostQualityPublishedformsEvaluationsOK), nil

}

/*
PostQualityPublishedformsSurveys publishes a survey form
*/
func (a *Client) PostQualityPublishedformsSurveys(ctx context.Context, params *PostQualityPublishedformsSurveysParams) (*PostQualityPublishedformsSurveysOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postQualityPublishedformsSurveys",
		Method:             "POST",
		PathPattern:        "/api/v2/quality/publishedforms/surveys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostQualityPublishedformsSurveysReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostQualityPublishedformsSurveysOK), nil

}

/*
PostQualitySpotability retrieves the spotability statistic
*/
func (a *Client) PostQualitySpotability(ctx context.Context, params *PostQualitySpotabilityParams) (*PostQualitySpotabilityOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postQualitySpotability",
		Method:             "POST",
		PathPattern:        "/api/v2/quality/spotability",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostQualitySpotabilityReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostQualitySpotabilityOK), nil

}

/*
PostQualitySurveysScoring scores survey
*/
func (a *Client) PostQualitySurveysScoring(ctx context.Context, params *PostQualitySurveysScoringParams) (*PostQualitySurveysScoringOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postQualitySurveysScoring",
		Method:             "POST",
		PathPattern:        "/api/v2/quality/surveys/scoring",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostQualitySurveysScoringReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostQualitySurveysScoringOK), nil

}

/*
PutQualityCalibration updates a calibration to the specified calibration via p u t editable fields include evaluators expert evaluator and scoring index
*/
func (a *Client) PutQualityCalibration(ctx context.Context, params *PutQualityCalibrationParams) (*PutQualityCalibrationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putQualityCalibration",
		Method:             "PUT",
		PathPattern:        "/api/v2/quality/calibrations/{calibrationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutQualityCalibrationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutQualityCalibrationOK), nil

}

/*
PutQualityConversationEvaluation updates an evaluation

The quality:evaluation:edit permission allows modification of most fields, while the quality:evaluation:editScore permission allows an evaluator to change just the question scores, and the quality:evaluation:editAgentSignoff permission allows an agent to change the agent comments and sign off on the evaluation.
*/
func (a *Client) PutQualityConversationEvaluation(ctx context.Context, params *PutQualityConversationEvaluationParams) (*PutQualityConversationEvaluationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putQualityConversationEvaluation",
		Method:             "PUT",
		PathPattern:        "/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutQualityConversationEvaluationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutQualityConversationEvaluationOK), nil

}

/*
PutQualityForm updates an evaluation form
*/
func (a *Client) PutQualityForm(ctx context.Context, params *PutQualityFormParams) (*PutQualityFormOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putQualityForm",
		Method:             "PUT",
		PathPattern:        "/api/v2/quality/forms/{formId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutQualityFormReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutQualityFormOK), nil

}

/*
PutQualityFormsEvaluation updates an evaluation form
*/
func (a *Client) PutQualityFormsEvaluation(ctx context.Context, params *PutQualityFormsEvaluationParams) (*PutQualityFormsEvaluationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putQualityFormsEvaluation",
		Method:             "PUT",
		PathPattern:        "/api/v2/quality/forms/evaluations/{formId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutQualityFormsEvaluationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutQualityFormsEvaluationOK), nil

}

/*
PutQualityFormsSurvey updates a survey form
*/
func (a *Client) PutQualityFormsSurvey(ctx context.Context, params *PutQualityFormsSurveyParams) (*PutQualityFormsSurveyOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putQualityFormsSurvey",
		Method:             "PUT",
		PathPattern:        "/api/v2/quality/forms/surveys/{formId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutQualityFormsSurveyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutQualityFormsSurveyOK), nil

}

/*
PutQualityKeywordset updates a keyword set to the specified keyword set via p u t
*/
func (a *Client) PutQualityKeywordset(ctx context.Context, params *PutQualityKeywordsetParams) (*PutQualityKeywordsetOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putQualityKeywordset",
		Method:             "PUT",
		PathPattern:        "/api/v2/quality/keywordsets/{keywordSetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutQualityKeywordsetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutQualityKeywordsetOK), nil

}

/*
PutQualitySurveysScorable updates a survey as an end customer for the purposes of scoring it
*/
func (a *Client) PutQualitySurveysScorable(ctx context.Context, params *PutQualitySurveysScorableParams) (*PutQualitySurveysScorableOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putQualitySurveysScorable",
		Method:             "PUT",
		PathPattern:        "/api/v2/quality/surveys/scorable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutQualitySurveysScorableReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutQualitySurveysScorableOK), nil

}

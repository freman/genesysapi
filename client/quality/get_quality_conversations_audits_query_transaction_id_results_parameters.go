// Code generated by go-swagger; DO NOT EDIT.

package quality

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetQualityConversationsAuditsQueryTransactionIDResultsParams creates a new GetQualityConversationsAuditsQueryTransactionIDResultsParams object
// with the default values initialized.
func NewGetQualityConversationsAuditsQueryTransactionIDResultsParams() *GetQualityConversationsAuditsQueryTransactionIDResultsParams {
	var (
		pageSizeDefault = int32(25)
	)
	return &GetQualityConversationsAuditsQueryTransactionIDResultsParams{
		PageSize: &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetQualityConversationsAuditsQueryTransactionIDResultsParamsWithTimeout creates a new GetQualityConversationsAuditsQueryTransactionIDResultsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetQualityConversationsAuditsQueryTransactionIDResultsParamsWithTimeout(timeout time.Duration) *GetQualityConversationsAuditsQueryTransactionIDResultsParams {
	var (
		pageSizeDefault = int32(25)
	)
	return &GetQualityConversationsAuditsQueryTransactionIDResultsParams{
		PageSize: &pageSizeDefault,

		timeout: timeout,
	}
}

// NewGetQualityConversationsAuditsQueryTransactionIDResultsParamsWithContext creates a new GetQualityConversationsAuditsQueryTransactionIDResultsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetQualityConversationsAuditsQueryTransactionIDResultsParamsWithContext(ctx context.Context) *GetQualityConversationsAuditsQueryTransactionIDResultsParams {
	var (
		pageSizeDefault = int32(25)
	)
	return &GetQualityConversationsAuditsQueryTransactionIDResultsParams{
		PageSize: &pageSizeDefault,

		Context: ctx,
	}
}

// NewGetQualityConversationsAuditsQueryTransactionIDResultsParamsWithHTTPClient creates a new GetQualityConversationsAuditsQueryTransactionIDResultsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetQualityConversationsAuditsQueryTransactionIDResultsParamsWithHTTPClient(client *http.Client) *GetQualityConversationsAuditsQueryTransactionIDResultsParams {
	var (
		pageSizeDefault = int32(25)
	)
	return &GetQualityConversationsAuditsQueryTransactionIDResultsParams{
		PageSize:   &pageSizeDefault,
		HTTPClient: client,
	}
}

/*GetQualityConversationsAuditsQueryTransactionIDResultsParams contains all the parameters to send to the API endpoint
for the get quality conversations audits query transaction Id results operation typically these are written to a http.Request
*/
type GetQualityConversationsAuditsQueryTransactionIDResultsParams struct {

	/*Cursor
	  Indicates where to resume query results (not required for first page)

	*/
	Cursor *string
	/*Expand
	  Which fields, if any, to expand

	*/
	Expand []string
	/*PageSize
	  Page size

	*/
	PageSize *int32
	/*TransactionID
	  Transaction ID

	*/
	TransactionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get quality conversations audits query transaction Id results params
func (o *GetQualityConversationsAuditsQueryTransactionIDResultsParams) WithTimeout(timeout time.Duration) *GetQualityConversationsAuditsQueryTransactionIDResultsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get quality conversations audits query transaction Id results params
func (o *GetQualityConversationsAuditsQueryTransactionIDResultsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get quality conversations audits query transaction Id results params
func (o *GetQualityConversationsAuditsQueryTransactionIDResultsParams) WithContext(ctx context.Context) *GetQualityConversationsAuditsQueryTransactionIDResultsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get quality conversations audits query transaction Id results params
func (o *GetQualityConversationsAuditsQueryTransactionIDResultsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get quality conversations audits query transaction Id results params
func (o *GetQualityConversationsAuditsQueryTransactionIDResultsParams) WithHTTPClient(client *http.Client) *GetQualityConversationsAuditsQueryTransactionIDResultsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get quality conversations audits query transaction Id results params
func (o *GetQualityConversationsAuditsQueryTransactionIDResultsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the get quality conversations audits query transaction Id results params
func (o *GetQualityConversationsAuditsQueryTransactionIDResultsParams) WithCursor(cursor *string) *GetQualityConversationsAuditsQueryTransactionIDResultsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the get quality conversations audits query transaction Id results params
func (o *GetQualityConversationsAuditsQueryTransactionIDResultsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithExpand adds the expand to the get quality conversations audits query transaction Id results params
func (o *GetQualityConversationsAuditsQueryTransactionIDResultsParams) WithExpand(expand []string) *GetQualityConversationsAuditsQueryTransactionIDResultsParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get quality conversations audits query transaction Id results params
func (o *GetQualityConversationsAuditsQueryTransactionIDResultsParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithPageSize adds the pageSize to the get quality conversations audits query transaction Id results params
func (o *GetQualityConversationsAuditsQueryTransactionIDResultsParams) WithPageSize(pageSize *int32) *GetQualityConversationsAuditsQueryTransactionIDResultsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get quality conversations audits query transaction Id results params
func (o *GetQualityConversationsAuditsQueryTransactionIDResultsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithTransactionID adds the transactionID to the get quality conversations audits query transaction Id results params
func (o *GetQualityConversationsAuditsQueryTransactionIDResultsParams) WithTransactionID(transactionID string) *GetQualityConversationsAuditsQueryTransactionIDResultsParams {
	o.SetTransactionID(transactionID)
	return o
}

// SetTransactionID adds the transactionId to the get quality conversations audits query transaction Id results params
func (o *GetQualityConversationsAuditsQueryTransactionIDResultsParams) SetTransactionID(transactionID string) {
	o.TransactionID = transactionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetQualityConversationsAuditsQueryTransactionIDResultsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string
		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {
			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}

	}

	valuesExpand := o.Expand

	joinedExpand := swag.JoinByFormat(valuesExpand, "multi")
	// query array param expand
	if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
		return err
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	// path param transactionId
	if err := r.SetPathParam("transactionId", o.TransactionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

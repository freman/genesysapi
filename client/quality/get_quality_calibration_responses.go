// Code generated by go-swagger; DO NOT EDIT.

package quality

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetQualityCalibrationReader is a Reader for the GetQualityCalibration structure.
type GetQualityCalibrationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetQualityCalibrationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetQualityCalibrationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetQualityCalibrationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetQualityCalibrationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetQualityCalibrationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetQualityCalibrationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetQualityCalibrationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetQualityCalibrationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetQualityCalibrationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetQualityCalibrationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetQualityCalibrationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetQualityCalibrationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetQualityCalibrationOK creates a GetQualityCalibrationOK with default headers values
func NewGetQualityCalibrationOK() *GetQualityCalibrationOK {
	return &GetQualityCalibrationOK{}
}

/*GetQualityCalibrationOK handles this case with default header values.

successful operation
*/
type GetQualityCalibrationOK struct {
	Payload *models.Calibration
}

func (o *GetQualityCalibrationOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations/{calibrationId}][%d] getQualityCalibrationOK  %+v", 200, o.Payload)
}

func (o *GetQualityCalibrationOK) GetPayload() *models.Calibration {
	return o.Payload
}

func (o *GetQualityCalibrationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Calibration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationBadRequest creates a GetQualityCalibrationBadRequest with default headers values
func NewGetQualityCalibrationBadRequest() *GetQualityCalibrationBadRequest {
	return &GetQualityCalibrationBadRequest{}
}

/*GetQualityCalibrationBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetQualityCalibrationBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations/{calibrationId}][%d] getQualityCalibrationBadRequest  %+v", 400, o.Payload)
}

func (o *GetQualityCalibrationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationUnauthorized creates a GetQualityCalibrationUnauthorized with default headers values
func NewGetQualityCalibrationUnauthorized() *GetQualityCalibrationUnauthorized {
	return &GetQualityCalibrationUnauthorized{}
}

/*GetQualityCalibrationUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetQualityCalibrationUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations/{calibrationId}][%d] getQualityCalibrationUnauthorized  %+v", 401, o.Payload)
}

func (o *GetQualityCalibrationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationForbidden creates a GetQualityCalibrationForbidden with default headers values
func NewGetQualityCalibrationForbidden() *GetQualityCalibrationForbidden {
	return &GetQualityCalibrationForbidden{}
}

/*GetQualityCalibrationForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetQualityCalibrationForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations/{calibrationId}][%d] getQualityCalibrationForbidden  %+v", 403, o.Payload)
}

func (o *GetQualityCalibrationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationNotFound creates a GetQualityCalibrationNotFound with default headers values
func NewGetQualityCalibrationNotFound() *GetQualityCalibrationNotFound {
	return &GetQualityCalibrationNotFound{}
}

/*GetQualityCalibrationNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetQualityCalibrationNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations/{calibrationId}][%d] getQualityCalibrationNotFound  %+v", 404, o.Payload)
}

func (o *GetQualityCalibrationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationRequestEntityTooLarge creates a GetQualityCalibrationRequestEntityTooLarge with default headers values
func NewGetQualityCalibrationRequestEntityTooLarge() *GetQualityCalibrationRequestEntityTooLarge {
	return &GetQualityCalibrationRequestEntityTooLarge{}
}

/*GetQualityCalibrationRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetQualityCalibrationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations/{calibrationId}][%d] getQualityCalibrationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetQualityCalibrationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationUnsupportedMediaType creates a GetQualityCalibrationUnsupportedMediaType with default headers values
func NewGetQualityCalibrationUnsupportedMediaType() *GetQualityCalibrationUnsupportedMediaType {
	return &GetQualityCalibrationUnsupportedMediaType{}
}

/*GetQualityCalibrationUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetQualityCalibrationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations/{calibrationId}][%d] getQualityCalibrationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetQualityCalibrationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationTooManyRequests creates a GetQualityCalibrationTooManyRequests with default headers values
func NewGetQualityCalibrationTooManyRequests() *GetQualityCalibrationTooManyRequests {
	return &GetQualityCalibrationTooManyRequests{}
}

/*GetQualityCalibrationTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type GetQualityCalibrationTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations/{calibrationId}][%d] getQualityCalibrationTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetQualityCalibrationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationInternalServerError creates a GetQualityCalibrationInternalServerError with default headers values
func NewGetQualityCalibrationInternalServerError() *GetQualityCalibrationInternalServerError {
	return &GetQualityCalibrationInternalServerError{}
}

/*GetQualityCalibrationInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetQualityCalibrationInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations/{calibrationId}][%d] getQualityCalibrationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetQualityCalibrationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationServiceUnavailable creates a GetQualityCalibrationServiceUnavailable with default headers values
func NewGetQualityCalibrationServiceUnavailable() *GetQualityCalibrationServiceUnavailable {
	return &GetQualityCalibrationServiceUnavailable{}
}

/*GetQualityCalibrationServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetQualityCalibrationServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations/{calibrationId}][%d] getQualityCalibrationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetQualityCalibrationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationGatewayTimeout creates a GetQualityCalibrationGatewayTimeout with default headers values
func NewGetQualityCalibrationGatewayTimeout() *GetQualityCalibrationGatewayTimeout {
	return &GetQualityCalibrationGatewayTimeout{}
}

/*GetQualityCalibrationGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetQualityCalibrationGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations/{calibrationId}][%d] getQualityCalibrationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetQualityCalibrationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

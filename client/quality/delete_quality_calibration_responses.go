// Code generated by go-swagger; DO NOT EDIT.

package quality

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteQualityCalibrationReader is a Reader for the DeleteQualityCalibration structure.
type DeleteQualityCalibrationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteQualityCalibrationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteQualityCalibrationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteQualityCalibrationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteQualityCalibrationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteQualityCalibrationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteQualityCalibrationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteQualityCalibrationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteQualityCalibrationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteQualityCalibrationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteQualityCalibrationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteQualityCalibrationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteQualityCalibrationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteQualityCalibrationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteQualityCalibrationOK creates a DeleteQualityCalibrationOK with default headers values
func NewDeleteQualityCalibrationOK() *DeleteQualityCalibrationOK {
	return &DeleteQualityCalibrationOK{}
}

/*
DeleteQualityCalibrationOK describes a response with status code 200, with default header values.

successful operation
*/
type DeleteQualityCalibrationOK struct {
	Payload *models.Calibration
}

// IsSuccess returns true when this delete quality calibration o k response has a 2xx status code
func (o *DeleteQualityCalibrationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete quality calibration o k response has a 3xx status code
func (o *DeleteQualityCalibrationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quality calibration o k response has a 4xx status code
func (o *DeleteQualityCalibrationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete quality calibration o k response has a 5xx status code
func (o *DeleteQualityCalibrationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete quality calibration o k response a status code equal to that given
func (o *DeleteQualityCalibrationOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeleteQualityCalibrationOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationOK  %+v", 200, o.Payload)
}

func (o *DeleteQualityCalibrationOK) String() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationOK  %+v", 200, o.Payload)
}

func (o *DeleteQualityCalibrationOK) GetPayload() *models.Calibration {
	return o.Payload
}

func (o *DeleteQualityCalibrationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Calibration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityCalibrationBadRequest creates a DeleteQualityCalibrationBadRequest with default headers values
func NewDeleteQualityCalibrationBadRequest() *DeleteQualityCalibrationBadRequest {
	return &DeleteQualityCalibrationBadRequest{}
}

/*
DeleteQualityCalibrationBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteQualityCalibrationBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete quality calibration bad request response has a 2xx status code
func (o *DeleteQualityCalibrationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete quality calibration bad request response has a 3xx status code
func (o *DeleteQualityCalibrationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quality calibration bad request response has a 4xx status code
func (o *DeleteQualityCalibrationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete quality calibration bad request response has a 5xx status code
func (o *DeleteQualityCalibrationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete quality calibration bad request response a status code equal to that given
func (o *DeleteQualityCalibrationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteQualityCalibrationBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteQualityCalibrationBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteQualityCalibrationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityCalibrationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityCalibrationUnauthorized creates a DeleteQualityCalibrationUnauthorized with default headers values
func NewDeleteQualityCalibrationUnauthorized() *DeleteQualityCalibrationUnauthorized {
	return &DeleteQualityCalibrationUnauthorized{}
}

/*
DeleteQualityCalibrationUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteQualityCalibrationUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete quality calibration unauthorized response has a 2xx status code
func (o *DeleteQualityCalibrationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete quality calibration unauthorized response has a 3xx status code
func (o *DeleteQualityCalibrationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quality calibration unauthorized response has a 4xx status code
func (o *DeleteQualityCalibrationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete quality calibration unauthorized response has a 5xx status code
func (o *DeleteQualityCalibrationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete quality calibration unauthorized response a status code equal to that given
func (o *DeleteQualityCalibrationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteQualityCalibrationUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteQualityCalibrationUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteQualityCalibrationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityCalibrationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityCalibrationForbidden creates a DeleteQualityCalibrationForbidden with default headers values
func NewDeleteQualityCalibrationForbidden() *DeleteQualityCalibrationForbidden {
	return &DeleteQualityCalibrationForbidden{}
}

/*
DeleteQualityCalibrationForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type DeleteQualityCalibrationForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete quality calibration forbidden response has a 2xx status code
func (o *DeleteQualityCalibrationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete quality calibration forbidden response has a 3xx status code
func (o *DeleteQualityCalibrationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quality calibration forbidden response has a 4xx status code
func (o *DeleteQualityCalibrationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete quality calibration forbidden response has a 5xx status code
func (o *DeleteQualityCalibrationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete quality calibration forbidden response a status code equal to that given
func (o *DeleteQualityCalibrationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteQualityCalibrationForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationForbidden  %+v", 403, o.Payload)
}

func (o *DeleteQualityCalibrationForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationForbidden  %+v", 403, o.Payload)
}

func (o *DeleteQualityCalibrationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityCalibrationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityCalibrationNotFound creates a DeleteQualityCalibrationNotFound with default headers values
func NewDeleteQualityCalibrationNotFound() *DeleteQualityCalibrationNotFound {
	return &DeleteQualityCalibrationNotFound{}
}

/*
DeleteQualityCalibrationNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type DeleteQualityCalibrationNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete quality calibration not found response has a 2xx status code
func (o *DeleteQualityCalibrationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete quality calibration not found response has a 3xx status code
func (o *DeleteQualityCalibrationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quality calibration not found response has a 4xx status code
func (o *DeleteQualityCalibrationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete quality calibration not found response has a 5xx status code
func (o *DeleteQualityCalibrationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete quality calibration not found response a status code equal to that given
func (o *DeleteQualityCalibrationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteQualityCalibrationNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationNotFound  %+v", 404, o.Payload)
}

func (o *DeleteQualityCalibrationNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationNotFound  %+v", 404, o.Payload)
}

func (o *DeleteQualityCalibrationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityCalibrationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityCalibrationRequestTimeout creates a DeleteQualityCalibrationRequestTimeout with default headers values
func NewDeleteQualityCalibrationRequestTimeout() *DeleteQualityCalibrationRequestTimeout {
	return &DeleteQualityCalibrationRequestTimeout{}
}

/*
DeleteQualityCalibrationRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteQualityCalibrationRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete quality calibration request timeout response has a 2xx status code
func (o *DeleteQualityCalibrationRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete quality calibration request timeout response has a 3xx status code
func (o *DeleteQualityCalibrationRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quality calibration request timeout response has a 4xx status code
func (o *DeleteQualityCalibrationRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete quality calibration request timeout response has a 5xx status code
func (o *DeleteQualityCalibrationRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this delete quality calibration request timeout response a status code equal to that given
func (o *DeleteQualityCalibrationRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *DeleteQualityCalibrationRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteQualityCalibrationRequestTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteQualityCalibrationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityCalibrationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityCalibrationRequestEntityTooLarge creates a DeleteQualityCalibrationRequestEntityTooLarge with default headers values
func NewDeleteQualityCalibrationRequestEntityTooLarge() *DeleteQualityCalibrationRequestEntityTooLarge {
	return &DeleteQualityCalibrationRequestEntityTooLarge{}
}

/*
DeleteQualityCalibrationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type DeleteQualityCalibrationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete quality calibration request entity too large response has a 2xx status code
func (o *DeleteQualityCalibrationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete quality calibration request entity too large response has a 3xx status code
func (o *DeleteQualityCalibrationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quality calibration request entity too large response has a 4xx status code
func (o *DeleteQualityCalibrationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete quality calibration request entity too large response has a 5xx status code
func (o *DeleteQualityCalibrationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this delete quality calibration request entity too large response a status code equal to that given
func (o *DeleteQualityCalibrationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *DeleteQualityCalibrationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteQualityCalibrationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteQualityCalibrationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityCalibrationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityCalibrationUnsupportedMediaType creates a DeleteQualityCalibrationUnsupportedMediaType with default headers values
func NewDeleteQualityCalibrationUnsupportedMediaType() *DeleteQualityCalibrationUnsupportedMediaType {
	return &DeleteQualityCalibrationUnsupportedMediaType{}
}

/*
DeleteQualityCalibrationUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteQualityCalibrationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete quality calibration unsupported media type response has a 2xx status code
func (o *DeleteQualityCalibrationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete quality calibration unsupported media type response has a 3xx status code
func (o *DeleteQualityCalibrationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quality calibration unsupported media type response has a 4xx status code
func (o *DeleteQualityCalibrationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete quality calibration unsupported media type response has a 5xx status code
func (o *DeleteQualityCalibrationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this delete quality calibration unsupported media type response a status code equal to that given
func (o *DeleteQualityCalibrationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *DeleteQualityCalibrationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteQualityCalibrationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteQualityCalibrationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityCalibrationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityCalibrationTooManyRequests creates a DeleteQualityCalibrationTooManyRequests with default headers values
func NewDeleteQualityCalibrationTooManyRequests() *DeleteQualityCalibrationTooManyRequests {
	return &DeleteQualityCalibrationTooManyRequests{}
}

/*
DeleteQualityCalibrationTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteQualityCalibrationTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete quality calibration too many requests response has a 2xx status code
func (o *DeleteQualityCalibrationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete quality calibration too many requests response has a 3xx status code
func (o *DeleteQualityCalibrationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quality calibration too many requests response has a 4xx status code
func (o *DeleteQualityCalibrationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete quality calibration too many requests response has a 5xx status code
func (o *DeleteQualityCalibrationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete quality calibration too many requests response a status code equal to that given
func (o *DeleteQualityCalibrationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeleteQualityCalibrationTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteQualityCalibrationTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteQualityCalibrationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityCalibrationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityCalibrationInternalServerError creates a DeleteQualityCalibrationInternalServerError with default headers values
func NewDeleteQualityCalibrationInternalServerError() *DeleteQualityCalibrationInternalServerError {
	return &DeleteQualityCalibrationInternalServerError{}
}

/*
DeleteQualityCalibrationInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteQualityCalibrationInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete quality calibration internal server error response has a 2xx status code
func (o *DeleteQualityCalibrationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete quality calibration internal server error response has a 3xx status code
func (o *DeleteQualityCalibrationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quality calibration internal server error response has a 4xx status code
func (o *DeleteQualityCalibrationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete quality calibration internal server error response has a 5xx status code
func (o *DeleteQualityCalibrationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete quality calibration internal server error response a status code equal to that given
func (o *DeleteQualityCalibrationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteQualityCalibrationInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteQualityCalibrationInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteQualityCalibrationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityCalibrationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityCalibrationServiceUnavailable creates a DeleteQualityCalibrationServiceUnavailable with default headers values
func NewDeleteQualityCalibrationServiceUnavailable() *DeleteQualityCalibrationServiceUnavailable {
	return &DeleteQualityCalibrationServiceUnavailable{}
}

/*
DeleteQualityCalibrationServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteQualityCalibrationServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete quality calibration service unavailable response has a 2xx status code
func (o *DeleteQualityCalibrationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete quality calibration service unavailable response has a 3xx status code
func (o *DeleteQualityCalibrationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quality calibration service unavailable response has a 4xx status code
func (o *DeleteQualityCalibrationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete quality calibration service unavailable response has a 5xx status code
func (o *DeleteQualityCalibrationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete quality calibration service unavailable response a status code equal to that given
func (o *DeleteQualityCalibrationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeleteQualityCalibrationServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteQualityCalibrationServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteQualityCalibrationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityCalibrationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityCalibrationGatewayTimeout creates a DeleteQualityCalibrationGatewayTimeout with default headers values
func NewDeleteQualityCalibrationGatewayTimeout() *DeleteQualityCalibrationGatewayTimeout {
	return &DeleteQualityCalibrationGatewayTimeout{}
}

/*
DeleteQualityCalibrationGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type DeleteQualityCalibrationGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete quality calibration gateway timeout response has a 2xx status code
func (o *DeleteQualityCalibrationGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete quality calibration gateway timeout response has a 3xx status code
func (o *DeleteQualityCalibrationGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quality calibration gateway timeout response has a 4xx status code
func (o *DeleteQualityCalibrationGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete quality calibration gateway timeout response has a 5xx status code
func (o *DeleteQualityCalibrationGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this delete quality calibration gateway timeout response a status code equal to that given
func (o *DeleteQualityCalibrationGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *DeleteQualityCalibrationGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteQualityCalibrationGatewayTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/calibrations/{calibrationId}][%d] deleteQualityCalibrationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteQualityCalibrationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityCalibrationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

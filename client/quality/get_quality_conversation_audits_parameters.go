// Code generated by go-swagger; DO NOT EDIT.

package quality

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetQualityConversationAuditsParams creates a new GetQualityConversationAuditsParams object
// with the default values initialized.
func NewGetQualityConversationAuditsParams() *GetQualityConversationAuditsParams {
	var (
		entityTypeDefault = string("Recording")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
	)
	return &GetQualityConversationAuditsParams{
		EntityType: &entityTypeDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetQualityConversationAuditsParamsWithTimeout creates a new GetQualityConversationAuditsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetQualityConversationAuditsParamsWithTimeout(timeout time.Duration) *GetQualityConversationAuditsParams {
	var (
		entityTypeDefault = string("Recording")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
	)
	return &GetQualityConversationAuditsParams{
		EntityType: &entityTypeDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		timeout: timeout,
	}
}

// NewGetQualityConversationAuditsParamsWithContext creates a new GetQualityConversationAuditsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetQualityConversationAuditsParamsWithContext(ctx context.Context) *GetQualityConversationAuditsParams {
	var (
		entityTypeDefault = string("Recording")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
	)
	return &GetQualityConversationAuditsParams{
		EntityType: &entityTypeDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		Context: ctx,
	}
}

// NewGetQualityConversationAuditsParamsWithHTTPClient creates a new GetQualityConversationAuditsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetQualityConversationAuditsParamsWithHTTPClient(client *http.Client) *GetQualityConversationAuditsParams {
	var (
		entityTypeDefault = string("Recording")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
	)
	return &GetQualityConversationAuditsParams{
		EntityType: &entityTypeDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		HTTPClient: client,
	}
}

/*GetQualityConversationAuditsParams contains all the parameters to send to the API endpoint
for the get quality conversation audits operation typically these are written to a http.Request
*/
type GetQualityConversationAuditsParams struct {

	/*ConversationID
	  Conversation ID

	*/
	ConversationID string
	/*EntityType
	  entity type options: Recording, Calibration, Evaluation, Annotation, Screen_Recording

	*/
	EntityType *string
	/*Expand
	  variable name requested by expand list

	*/
	Expand []string
	/*NextPage
	  next page token

	*/
	NextPage *string
	/*PageNumber
	  The page number requested

	*/
	PageNumber *int32
	/*PageSize
	  The total page size requested

	*/
	PageSize *int32
	/*PreviousPage
	  Previous page token

	*/
	PreviousPage *string
	/*RecordingID
	  id of the recording

	*/
	RecordingID *string
	/*SortBy
	  variable name requested to sort by

	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) WithTimeout(timeout time.Duration) *GetQualityConversationAuditsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) WithContext(ctx context.Context) *GetQualityConversationAuditsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) WithHTTPClient(client *http.Client) *GetQualityConversationAuditsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConversationID adds the conversationID to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) WithConversationID(conversationID string) *GetQualityConversationAuditsParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) SetConversationID(conversationID string) {
	o.ConversationID = conversationID
}

// WithEntityType adds the entityType to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) WithEntityType(entityType *string) *GetQualityConversationAuditsParams {
	o.SetEntityType(entityType)
	return o
}

// SetEntityType adds the entityType to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) SetEntityType(entityType *string) {
	o.EntityType = entityType
}

// WithExpand adds the expand to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) WithExpand(expand []string) *GetQualityConversationAuditsParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithNextPage adds the nextPage to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) WithNextPage(nextPage *string) *GetQualityConversationAuditsParams {
	o.SetNextPage(nextPage)
	return o
}

// SetNextPage adds the nextPage to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) SetNextPage(nextPage *string) {
	o.NextPage = nextPage
}

// WithPageNumber adds the pageNumber to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) WithPageNumber(pageNumber *int32) *GetQualityConversationAuditsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) WithPageSize(pageSize *int32) *GetQualityConversationAuditsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPreviousPage adds the previousPage to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) WithPreviousPage(previousPage *string) *GetQualityConversationAuditsParams {
	o.SetPreviousPage(previousPage)
	return o
}

// SetPreviousPage adds the previousPage to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) SetPreviousPage(previousPage *string) {
	o.PreviousPage = previousPage
}

// WithRecordingID adds the recordingID to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) WithRecordingID(recordingID *string) *GetQualityConversationAuditsParams {
	o.SetRecordingID(recordingID)
	return o
}

// SetRecordingID adds the recordingId to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) SetRecordingID(recordingID *string) {
	o.RecordingID = recordingID
}

// WithSortBy adds the sortBy to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) WithSortBy(sortBy *string) *GetQualityConversationAuditsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get quality conversation audits params
func (o *GetQualityConversationAuditsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *GetQualityConversationAuditsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param conversationId
	if err := r.SetPathParam("conversationId", o.ConversationID); err != nil {
		return err
	}

	if o.EntityType != nil {

		// query param entityType
		var qrEntityType string
		if o.EntityType != nil {
			qrEntityType = *o.EntityType
		}
		qEntityType := qrEntityType
		if qEntityType != "" {
			if err := r.SetQueryParam("entityType", qEntityType); err != nil {
				return err
			}
		}

	}

	valuesExpand := o.Expand

	joinedExpand := swag.JoinByFormat(valuesExpand, "multi")
	// query array param expand
	if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
		return err
	}

	if o.NextPage != nil {

		// query param nextPage
		var qrNextPage string
		if o.NextPage != nil {
			qrNextPage = *o.NextPage
		}
		qNextPage := qrNextPage
		if qNextPage != "" {
			if err := r.SetQueryParam("nextPage", qNextPage); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.PreviousPage != nil {

		// query param previousPage
		var qrPreviousPage string
		if o.PreviousPage != nil {
			qrPreviousPage = *o.PreviousPage
		}
		qPreviousPage := qrPreviousPage
		if qPreviousPage != "" {
			if err := r.SetQueryParam("previousPage", qPreviousPage); err != nil {
				return err
			}
		}

	}

	if o.RecordingID != nil {

		// query param recordingId
		var qrRecordingID string
		if o.RecordingID != nil {
			qrRecordingID = *o.RecordingID
		}
		qRecordingID := qrRecordingID
		if qRecordingID != "" {
			if err := r.SetQueryParam("recordingId", qRecordingID); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

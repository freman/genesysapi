// Code generated by go-swagger; DO NOT EDIT.

package quality

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetQualityEvaluatorsActivityParams creates a new GetQualityEvaluatorsActivityParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetQualityEvaluatorsActivityParams() *GetQualityEvaluatorsActivityParams {
	return &GetQualityEvaluatorsActivityParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetQualityEvaluatorsActivityParamsWithTimeout creates a new GetQualityEvaluatorsActivityParams object
// with the ability to set a timeout on a request.
func NewGetQualityEvaluatorsActivityParamsWithTimeout(timeout time.Duration) *GetQualityEvaluatorsActivityParams {
	return &GetQualityEvaluatorsActivityParams{
		timeout: timeout,
	}
}

// NewGetQualityEvaluatorsActivityParamsWithContext creates a new GetQualityEvaluatorsActivityParams object
// with the ability to set a context for a request.
func NewGetQualityEvaluatorsActivityParamsWithContext(ctx context.Context) *GetQualityEvaluatorsActivityParams {
	return &GetQualityEvaluatorsActivityParams{
		Context: ctx,
	}
}

// NewGetQualityEvaluatorsActivityParamsWithHTTPClient creates a new GetQualityEvaluatorsActivityParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetQualityEvaluatorsActivityParamsWithHTTPClient(client *http.Client) *GetQualityEvaluatorsActivityParams {
	return &GetQualityEvaluatorsActivityParams{
		HTTPClient: client,
	}
}

/*
GetQualityEvaluatorsActivityParams contains all the parameters to send to the API endpoint

	for the get quality evaluators activity operation.

	Typically these are written to a http.Request.
*/
type GetQualityEvaluatorsActivityParams struct {

	/* EndTime.

	   The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

	   Format: date-time
	*/
	EndTime *strfmt.DateTime

	/* Expand.

	   variable name requested by expand list
	*/
	Expand []string

	/* Group.

	   group id
	*/
	Group *string

	/* Name.

	   Evaluator name
	*/
	Name *string

	/* NextPage.

	   next page token
	*/
	NextPage *string

	/* PageNumber.

	   The page number requested

	   Format: int32
	   Default: 1
	*/
	PageNumber *int32

	/* PageSize.

	   The total page size requested

	   Format: int32
	   Default: 25
	*/
	PageSize *int32

	/* Permission.

	   permission strings
	*/
	Permission []string

	/* PreviousPage.

	   Previous page token
	*/
	PreviousPage *string

	/* SortBy.

	   variable name requested to sort by
	*/
	SortBy *string

	/* StartTime.

	   The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

	   Format: date-time
	*/
	StartTime *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get quality evaluators activity params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetQualityEvaluatorsActivityParams) WithDefaults() *GetQualityEvaluatorsActivityParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get quality evaluators activity params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetQualityEvaluatorsActivityParams) SetDefaults() {
	var (
		pageNumberDefault = int32(1)

		pageSizeDefault = int32(25)
	)

	val := GetQualityEvaluatorsActivityParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) WithTimeout(timeout time.Duration) *GetQualityEvaluatorsActivityParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) WithContext(ctx context.Context) *GetQualityEvaluatorsActivityParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) WithHTTPClient(client *http.Client) *GetQualityEvaluatorsActivityParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTime adds the endTime to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) WithEndTime(endTime *strfmt.DateTime) *GetQualityEvaluatorsActivityParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) SetEndTime(endTime *strfmt.DateTime) {
	o.EndTime = endTime
}

// WithExpand adds the expand to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) WithExpand(expand []string) *GetQualityEvaluatorsActivityParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithGroup adds the group to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) WithGroup(group *string) *GetQualityEvaluatorsActivityParams {
	o.SetGroup(group)
	return o
}

// SetGroup adds the group to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) SetGroup(group *string) {
	o.Group = group
}

// WithName adds the name to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) WithName(name *string) *GetQualityEvaluatorsActivityParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) SetName(name *string) {
	o.Name = name
}

// WithNextPage adds the nextPage to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) WithNextPage(nextPage *string) *GetQualityEvaluatorsActivityParams {
	o.SetNextPage(nextPage)
	return o
}

// SetNextPage adds the nextPage to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) SetNextPage(nextPage *string) {
	o.NextPage = nextPage
}

// WithPageNumber adds the pageNumber to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) WithPageNumber(pageNumber *int32) *GetQualityEvaluatorsActivityParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) WithPageSize(pageSize *int32) *GetQualityEvaluatorsActivityParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPermission adds the permission to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) WithPermission(permission []string) *GetQualityEvaluatorsActivityParams {
	o.SetPermission(permission)
	return o
}

// SetPermission adds the permission to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) SetPermission(permission []string) {
	o.Permission = permission
}

// WithPreviousPage adds the previousPage to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) WithPreviousPage(previousPage *string) *GetQualityEvaluatorsActivityParams {
	o.SetPreviousPage(previousPage)
	return o
}

// SetPreviousPage adds the previousPage to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) SetPreviousPage(previousPage *string) {
	o.PreviousPage = previousPage
}

// WithSortBy adds the sortBy to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) WithSortBy(sortBy *string) *GetQualityEvaluatorsActivityParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithStartTime adds the startTime to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) WithStartTime(startTime *strfmt.DateTime) *GetQualityEvaluatorsActivityParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the get quality evaluators activity params
func (o *GetQualityEvaluatorsActivityParams) SetStartTime(startTime *strfmt.DateTime) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *GetQualityEvaluatorsActivityParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime strfmt.DateTime

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime.String()
		if qEndTime != "" {

			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.Expand != nil {

		// binding items for expand
		joinedExpand := o.bindParamExpand(reg)

		// query array param expand
		if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
			return err
		}
	}

	if o.Group != nil {

		// query param group
		var qrGroup string

		if o.Group != nil {
			qrGroup = *o.Group
		}
		qGroup := qrGroup
		if qGroup != "" {

			if err := r.SetQueryParam("group", qGroup); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NextPage != nil {

		// query param nextPage
		var qrNextPage string

		if o.NextPage != nil {
			qrNextPage = *o.NextPage
		}
		qNextPage := qrNextPage
		if qNextPage != "" {

			if err := r.SetQueryParam("nextPage", qNextPage); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.Permission != nil {

		// binding items for permission
		joinedPermission := o.bindParamPermission(reg)

		// query array param permission
		if err := r.SetQueryParam("permission", joinedPermission...); err != nil {
			return err
		}
	}

	if o.PreviousPage != nil {

		// query param previousPage
		var qrPreviousPage string

		if o.PreviousPage != nil {
			qrPreviousPage = *o.PreviousPage
		}
		qPreviousPage := qrPreviousPage
		if qPreviousPage != "" {

			if err := r.SetQueryParam("previousPage", qPreviousPage); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime strfmt.DateTime

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime.String()
		if qStartTime != "" {

			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetQualityEvaluatorsActivity binds the parameter expand
func (o *GetQualityEvaluatorsActivityParams) bindParamExpand(formats strfmt.Registry) []string {
	expandIR := o.Expand

	var expandIC []string
	for _, expandIIR := range expandIR { // explode []string

		expandIIV := expandIIR // string as string
		expandIC = append(expandIC, expandIIV)
	}

	// items.CollectionFormat: "multi"
	expandIS := swag.JoinByFormat(expandIC, "multi")

	return expandIS
}

// bindParamGetQualityEvaluatorsActivity binds the parameter permission
func (o *GetQualityEvaluatorsActivityParams) bindParamPermission(formats strfmt.Registry) []string {
	permissionIR := o.Permission

	var permissionIC []string
	for _, permissionIIR := range permissionIR { // explode []string

		permissionIIV := permissionIIR // string as string
		permissionIC = append(permissionIC, permissionIIV)
	}

	// items.CollectionFormat: "multi"
	permissionIS := swag.JoinByFormat(permissionIC, "multi")

	return permissionIS
}

// Code generated by go-swagger; DO NOT EDIT.

package quality

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetQualityConversationEvaluationParams creates a new GetQualityConversationEvaluationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetQualityConversationEvaluationParams() *GetQualityConversationEvaluationParams {
	return &GetQualityConversationEvaluationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetQualityConversationEvaluationParamsWithTimeout creates a new GetQualityConversationEvaluationParams object
// with the ability to set a timeout on a request.
func NewGetQualityConversationEvaluationParamsWithTimeout(timeout time.Duration) *GetQualityConversationEvaluationParams {
	return &GetQualityConversationEvaluationParams{
		timeout: timeout,
	}
}

// NewGetQualityConversationEvaluationParamsWithContext creates a new GetQualityConversationEvaluationParams object
// with the ability to set a context for a request.
func NewGetQualityConversationEvaluationParamsWithContext(ctx context.Context) *GetQualityConversationEvaluationParams {
	return &GetQualityConversationEvaluationParams{
		Context: ctx,
	}
}

// NewGetQualityConversationEvaluationParamsWithHTTPClient creates a new GetQualityConversationEvaluationParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetQualityConversationEvaluationParamsWithHTTPClient(client *http.Client) *GetQualityConversationEvaluationParams {
	return &GetQualityConversationEvaluationParams{
		HTTPClient: client,
	}
}

/*
GetQualityConversationEvaluationParams contains all the parameters to send to the API endpoint

	for the get quality conversation evaluation operation.

	Typically these are written to a http.Request.
*/
type GetQualityConversationEvaluationParams struct {

	/* ConversationID.

	   conversationId
	*/
	ConversationID string

	/* EvaluationID.

	   evaluationId
	*/
	EvaluationID string

	/* Expand.

	   agent, assignee, evaluator, evaluationForm
	*/
	Expand *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get quality conversation evaluation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetQualityConversationEvaluationParams) WithDefaults() *GetQualityConversationEvaluationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get quality conversation evaluation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetQualityConversationEvaluationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get quality conversation evaluation params
func (o *GetQualityConversationEvaluationParams) WithTimeout(timeout time.Duration) *GetQualityConversationEvaluationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get quality conversation evaluation params
func (o *GetQualityConversationEvaluationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get quality conversation evaluation params
func (o *GetQualityConversationEvaluationParams) WithContext(ctx context.Context) *GetQualityConversationEvaluationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get quality conversation evaluation params
func (o *GetQualityConversationEvaluationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get quality conversation evaluation params
func (o *GetQualityConversationEvaluationParams) WithHTTPClient(client *http.Client) *GetQualityConversationEvaluationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get quality conversation evaluation params
func (o *GetQualityConversationEvaluationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConversationID adds the conversationID to the get quality conversation evaluation params
func (o *GetQualityConversationEvaluationParams) WithConversationID(conversationID string) *GetQualityConversationEvaluationParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the get quality conversation evaluation params
func (o *GetQualityConversationEvaluationParams) SetConversationID(conversationID string) {
	o.ConversationID = conversationID
}

// WithEvaluationID adds the evaluationID to the get quality conversation evaluation params
func (o *GetQualityConversationEvaluationParams) WithEvaluationID(evaluationID string) *GetQualityConversationEvaluationParams {
	o.SetEvaluationID(evaluationID)
	return o
}

// SetEvaluationID adds the evaluationId to the get quality conversation evaluation params
func (o *GetQualityConversationEvaluationParams) SetEvaluationID(evaluationID string) {
	o.EvaluationID = evaluationID
}

// WithExpand adds the expand to the get quality conversation evaluation params
func (o *GetQualityConversationEvaluationParams) WithExpand(expand *string) *GetQualityConversationEvaluationParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get quality conversation evaluation params
func (o *GetQualityConversationEvaluationParams) SetExpand(expand *string) {
	o.Expand = expand
}

// WriteToRequest writes these params to a swagger request
func (o *GetQualityConversationEvaluationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param conversationId
	if err := r.SetPathParam("conversationId", o.ConversationID); err != nil {
		return err
	}

	// path param evaluationId
	if err := r.SetPathParam("evaluationId", o.EvaluationID); err != nil {
		return err
	}

	if o.Expand != nil {

		// query param expand
		var qrExpand string

		if o.Expand != nil {
			qrExpand = *o.Expand
		}
		qExpand := qrExpand
		if qExpand != "" {

			if err := r.SetQueryParam("expand", qExpand); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

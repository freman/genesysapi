// Code generated by go-swagger; DO NOT EDIT.

package quality

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteQualityKeywordsetReader is a Reader for the DeleteQualityKeywordset structure.
type DeleteQualityKeywordsetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteQualityKeywordsetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewDeleteQualityKeywordsetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteQualityKeywordsetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteQualityKeywordsetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteQualityKeywordsetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteQualityKeywordsetRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteQualityKeywordsetUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteQualityKeywordsetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteQualityKeywordsetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteQualityKeywordsetServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteQualityKeywordsetGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteQualityKeywordsetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteQualityKeywordsetBadRequest creates a DeleteQualityKeywordsetBadRequest with default headers values
func NewDeleteQualityKeywordsetBadRequest() *DeleteQualityKeywordsetBadRequest {
	return &DeleteQualityKeywordsetBadRequest{}
}

/*DeleteQualityKeywordsetBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteQualityKeywordsetBadRequest struct {
	Payload *models.ErrorBody
}

func (o *DeleteQualityKeywordsetBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/keywordsets/{keywordSetId}][%d] deleteQualityKeywordsetBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteQualityKeywordsetBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityKeywordsetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityKeywordsetUnauthorized creates a DeleteQualityKeywordsetUnauthorized with default headers values
func NewDeleteQualityKeywordsetUnauthorized() *DeleteQualityKeywordsetUnauthorized {
	return &DeleteQualityKeywordsetUnauthorized{}
}

/*DeleteQualityKeywordsetUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteQualityKeywordsetUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *DeleteQualityKeywordsetUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/keywordsets/{keywordSetId}][%d] deleteQualityKeywordsetUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteQualityKeywordsetUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityKeywordsetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityKeywordsetForbidden creates a DeleteQualityKeywordsetForbidden with default headers values
func NewDeleteQualityKeywordsetForbidden() *DeleteQualityKeywordsetForbidden {
	return &DeleteQualityKeywordsetForbidden{}
}

/*DeleteQualityKeywordsetForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type DeleteQualityKeywordsetForbidden struct {
	Payload *models.ErrorBody
}

func (o *DeleteQualityKeywordsetForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/keywordsets/{keywordSetId}][%d] deleteQualityKeywordsetForbidden  %+v", 403, o.Payload)
}

func (o *DeleteQualityKeywordsetForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityKeywordsetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityKeywordsetNotFound creates a DeleteQualityKeywordsetNotFound with default headers values
func NewDeleteQualityKeywordsetNotFound() *DeleteQualityKeywordsetNotFound {
	return &DeleteQualityKeywordsetNotFound{}
}

/*DeleteQualityKeywordsetNotFound handles this case with default header values.

The requested resource was not found.
*/
type DeleteQualityKeywordsetNotFound struct {
	Payload *models.ErrorBody
}

func (o *DeleteQualityKeywordsetNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/keywordsets/{keywordSetId}][%d] deleteQualityKeywordsetNotFound  %+v", 404, o.Payload)
}

func (o *DeleteQualityKeywordsetNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityKeywordsetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityKeywordsetRequestEntityTooLarge creates a DeleteQualityKeywordsetRequestEntityTooLarge with default headers values
func NewDeleteQualityKeywordsetRequestEntityTooLarge() *DeleteQualityKeywordsetRequestEntityTooLarge {
	return &DeleteQualityKeywordsetRequestEntityTooLarge{}
}

/*DeleteQualityKeywordsetRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type DeleteQualityKeywordsetRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *DeleteQualityKeywordsetRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/keywordsets/{keywordSetId}][%d] deleteQualityKeywordsetRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteQualityKeywordsetRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityKeywordsetRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityKeywordsetUnsupportedMediaType creates a DeleteQualityKeywordsetUnsupportedMediaType with default headers values
func NewDeleteQualityKeywordsetUnsupportedMediaType() *DeleteQualityKeywordsetUnsupportedMediaType {
	return &DeleteQualityKeywordsetUnsupportedMediaType{}
}

/*DeleteQualityKeywordsetUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteQualityKeywordsetUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *DeleteQualityKeywordsetUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/keywordsets/{keywordSetId}][%d] deleteQualityKeywordsetUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteQualityKeywordsetUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityKeywordsetUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityKeywordsetTooManyRequests creates a DeleteQualityKeywordsetTooManyRequests with default headers values
func NewDeleteQualityKeywordsetTooManyRequests() *DeleteQualityKeywordsetTooManyRequests {
	return &DeleteQualityKeywordsetTooManyRequests{}
}

/*DeleteQualityKeywordsetTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type DeleteQualityKeywordsetTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *DeleteQualityKeywordsetTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/keywordsets/{keywordSetId}][%d] deleteQualityKeywordsetTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteQualityKeywordsetTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityKeywordsetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityKeywordsetInternalServerError creates a DeleteQualityKeywordsetInternalServerError with default headers values
func NewDeleteQualityKeywordsetInternalServerError() *DeleteQualityKeywordsetInternalServerError {
	return &DeleteQualityKeywordsetInternalServerError{}
}

/*DeleteQualityKeywordsetInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteQualityKeywordsetInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *DeleteQualityKeywordsetInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/keywordsets/{keywordSetId}][%d] deleteQualityKeywordsetInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteQualityKeywordsetInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityKeywordsetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityKeywordsetServiceUnavailable creates a DeleteQualityKeywordsetServiceUnavailable with default headers values
func NewDeleteQualityKeywordsetServiceUnavailable() *DeleteQualityKeywordsetServiceUnavailable {
	return &DeleteQualityKeywordsetServiceUnavailable{}
}

/*DeleteQualityKeywordsetServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteQualityKeywordsetServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *DeleteQualityKeywordsetServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/keywordsets/{keywordSetId}][%d] deleteQualityKeywordsetServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteQualityKeywordsetServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityKeywordsetServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityKeywordsetGatewayTimeout creates a DeleteQualityKeywordsetGatewayTimeout with default headers values
func NewDeleteQualityKeywordsetGatewayTimeout() *DeleteQualityKeywordsetGatewayTimeout {
	return &DeleteQualityKeywordsetGatewayTimeout{}
}

/*DeleteQualityKeywordsetGatewayTimeout handles this case with default header values.

The request timed out.
*/
type DeleteQualityKeywordsetGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *DeleteQualityKeywordsetGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/keywordsets/{keywordSetId}][%d] deleteQualityKeywordsetGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteQualityKeywordsetGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteQualityKeywordsetGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQualityKeywordsetDefault creates a DeleteQualityKeywordsetDefault with default headers values
func NewDeleteQualityKeywordsetDefault(code int) *DeleteQualityKeywordsetDefault {
	return &DeleteQualityKeywordsetDefault{
		_statusCode: code,
	}
}

/*DeleteQualityKeywordsetDefault handles this case with default header values.

successful operation
*/
type DeleteQualityKeywordsetDefault struct {
	_statusCode int
}

// Code gets the status code for the delete quality keywordset default response
func (o *DeleteQualityKeywordsetDefault) Code() int {
	return o._statusCode
}

func (o *DeleteQualityKeywordsetDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/quality/keywordsets/{keywordSetId}][%d] deleteQualityKeywordset default ", o._statusCode)
}

func (o *DeleteQualityKeywordsetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package quality

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetQualityKeywordsetParams creates a new GetQualityKeywordsetParams object
// with the default values initialized.
func NewGetQualityKeywordsetParams() *GetQualityKeywordsetParams {
	var ()
	return &GetQualityKeywordsetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetQualityKeywordsetParamsWithTimeout creates a new GetQualityKeywordsetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetQualityKeywordsetParamsWithTimeout(timeout time.Duration) *GetQualityKeywordsetParams {
	var ()
	return &GetQualityKeywordsetParams{

		timeout: timeout,
	}
}

// NewGetQualityKeywordsetParamsWithContext creates a new GetQualityKeywordsetParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetQualityKeywordsetParamsWithContext(ctx context.Context) *GetQualityKeywordsetParams {
	var ()
	return &GetQualityKeywordsetParams{

		Context: ctx,
	}
}

// NewGetQualityKeywordsetParamsWithHTTPClient creates a new GetQualityKeywordsetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetQualityKeywordsetParamsWithHTTPClient(client *http.Client) *GetQualityKeywordsetParams {
	var ()
	return &GetQualityKeywordsetParams{
		HTTPClient: client,
	}
}

/*GetQualityKeywordsetParams contains all the parameters to send to the API endpoint
for the get quality keywordset operation typically these are written to a http.Request
*/
type GetQualityKeywordsetParams struct {

	/*KeywordSetID
	  KeywordSet ID

	*/
	KeywordSetID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get quality keywordset params
func (o *GetQualityKeywordsetParams) WithTimeout(timeout time.Duration) *GetQualityKeywordsetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get quality keywordset params
func (o *GetQualityKeywordsetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get quality keywordset params
func (o *GetQualityKeywordsetParams) WithContext(ctx context.Context) *GetQualityKeywordsetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get quality keywordset params
func (o *GetQualityKeywordsetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get quality keywordset params
func (o *GetQualityKeywordsetParams) WithHTTPClient(client *http.Client) *GetQualityKeywordsetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get quality keywordset params
func (o *GetQualityKeywordsetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKeywordSetID adds the keywordSetID to the get quality keywordset params
func (o *GetQualityKeywordsetParams) WithKeywordSetID(keywordSetID string) *GetQualityKeywordsetParams {
	o.SetKeywordSetID(keywordSetID)
	return o
}

// SetKeywordSetID adds the keywordSetId to the get quality keywordset params
func (o *GetQualityKeywordsetParams) SetKeywordSetID(keywordSetID string) {
	o.KeywordSetID = keywordSetID
}

// WriteToRequest writes these params to a swagger request
func (o *GetQualityKeywordsetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param keywordSetId
	if err := r.SetPathParam("keywordSetId", o.KeywordSetID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package quality

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostQualityCalibrationsReader is a Reader for the PostQualityCalibrations structure.
type PostQualityCalibrationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostQualityCalibrationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostQualityCalibrationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostQualityCalibrationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostQualityCalibrationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostQualityCalibrationsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostQualityCalibrationsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostQualityCalibrationsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostQualityCalibrationsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostQualityCalibrationsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostQualityCalibrationsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostQualityCalibrationsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostQualityCalibrationsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostQualityCalibrationsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostQualityCalibrationsOK creates a PostQualityCalibrationsOK with default headers values
func NewPostQualityCalibrationsOK() *PostQualityCalibrationsOK {
	return &PostQualityCalibrationsOK{}
}

/*PostQualityCalibrationsOK handles this case with default header values.

successful operation
*/
type PostQualityCalibrationsOK struct {
	Payload *models.Calibration
}

func (o *PostQualityCalibrationsOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/quality/calibrations][%d] postQualityCalibrationsOK  %+v", 200, o.Payload)
}

func (o *PostQualityCalibrationsOK) GetPayload() *models.Calibration {
	return o.Payload
}

func (o *PostQualityCalibrationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Calibration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostQualityCalibrationsBadRequest creates a PostQualityCalibrationsBadRequest with default headers values
func NewPostQualityCalibrationsBadRequest() *PostQualityCalibrationsBadRequest {
	return &PostQualityCalibrationsBadRequest{}
}

/*PostQualityCalibrationsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostQualityCalibrationsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostQualityCalibrationsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/quality/calibrations][%d] postQualityCalibrationsBadRequest  %+v", 400, o.Payload)
}

func (o *PostQualityCalibrationsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostQualityCalibrationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostQualityCalibrationsUnauthorized creates a PostQualityCalibrationsUnauthorized with default headers values
func NewPostQualityCalibrationsUnauthorized() *PostQualityCalibrationsUnauthorized {
	return &PostQualityCalibrationsUnauthorized{}
}

/*PostQualityCalibrationsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostQualityCalibrationsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostQualityCalibrationsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/quality/calibrations][%d] postQualityCalibrationsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostQualityCalibrationsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostQualityCalibrationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostQualityCalibrationsForbidden creates a PostQualityCalibrationsForbidden with default headers values
func NewPostQualityCalibrationsForbidden() *PostQualityCalibrationsForbidden {
	return &PostQualityCalibrationsForbidden{}
}

/*PostQualityCalibrationsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostQualityCalibrationsForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostQualityCalibrationsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/quality/calibrations][%d] postQualityCalibrationsForbidden  %+v", 403, o.Payload)
}

func (o *PostQualityCalibrationsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostQualityCalibrationsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostQualityCalibrationsNotFound creates a PostQualityCalibrationsNotFound with default headers values
func NewPostQualityCalibrationsNotFound() *PostQualityCalibrationsNotFound {
	return &PostQualityCalibrationsNotFound{}
}

/*PostQualityCalibrationsNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostQualityCalibrationsNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostQualityCalibrationsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/quality/calibrations][%d] postQualityCalibrationsNotFound  %+v", 404, o.Payload)
}

func (o *PostQualityCalibrationsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostQualityCalibrationsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostQualityCalibrationsRequestTimeout creates a PostQualityCalibrationsRequestTimeout with default headers values
func NewPostQualityCalibrationsRequestTimeout() *PostQualityCalibrationsRequestTimeout {
	return &PostQualityCalibrationsRequestTimeout{}
}

/*PostQualityCalibrationsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostQualityCalibrationsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostQualityCalibrationsRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/quality/calibrations][%d] postQualityCalibrationsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostQualityCalibrationsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostQualityCalibrationsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostQualityCalibrationsRequestEntityTooLarge creates a PostQualityCalibrationsRequestEntityTooLarge with default headers values
func NewPostQualityCalibrationsRequestEntityTooLarge() *PostQualityCalibrationsRequestEntityTooLarge {
	return &PostQualityCalibrationsRequestEntityTooLarge{}
}

/*PostQualityCalibrationsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostQualityCalibrationsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostQualityCalibrationsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/quality/calibrations][%d] postQualityCalibrationsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostQualityCalibrationsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostQualityCalibrationsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostQualityCalibrationsUnsupportedMediaType creates a PostQualityCalibrationsUnsupportedMediaType with default headers values
func NewPostQualityCalibrationsUnsupportedMediaType() *PostQualityCalibrationsUnsupportedMediaType {
	return &PostQualityCalibrationsUnsupportedMediaType{}
}

/*PostQualityCalibrationsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostQualityCalibrationsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostQualityCalibrationsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/quality/calibrations][%d] postQualityCalibrationsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostQualityCalibrationsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostQualityCalibrationsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostQualityCalibrationsTooManyRequests creates a PostQualityCalibrationsTooManyRequests with default headers values
func NewPostQualityCalibrationsTooManyRequests() *PostQualityCalibrationsTooManyRequests {
	return &PostQualityCalibrationsTooManyRequests{}
}

/*PostQualityCalibrationsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostQualityCalibrationsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostQualityCalibrationsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/quality/calibrations][%d] postQualityCalibrationsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostQualityCalibrationsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostQualityCalibrationsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostQualityCalibrationsInternalServerError creates a PostQualityCalibrationsInternalServerError with default headers values
func NewPostQualityCalibrationsInternalServerError() *PostQualityCalibrationsInternalServerError {
	return &PostQualityCalibrationsInternalServerError{}
}

/*PostQualityCalibrationsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostQualityCalibrationsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostQualityCalibrationsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/quality/calibrations][%d] postQualityCalibrationsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostQualityCalibrationsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostQualityCalibrationsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostQualityCalibrationsServiceUnavailable creates a PostQualityCalibrationsServiceUnavailable with default headers values
func NewPostQualityCalibrationsServiceUnavailable() *PostQualityCalibrationsServiceUnavailable {
	return &PostQualityCalibrationsServiceUnavailable{}
}

/*PostQualityCalibrationsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostQualityCalibrationsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostQualityCalibrationsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/quality/calibrations][%d] postQualityCalibrationsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostQualityCalibrationsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostQualityCalibrationsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostQualityCalibrationsGatewayTimeout creates a PostQualityCalibrationsGatewayTimeout with default headers values
func NewPostQualityCalibrationsGatewayTimeout() *PostQualityCalibrationsGatewayTimeout {
	return &PostQualityCalibrationsGatewayTimeout{}
}

/*PostQualityCalibrationsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostQualityCalibrationsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostQualityCalibrationsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/quality/calibrations][%d] postQualityCalibrationsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostQualityCalibrationsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostQualityCalibrationsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

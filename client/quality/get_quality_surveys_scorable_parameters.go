// Code generated by go-swagger; DO NOT EDIT.

package quality

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetQualitySurveysScorableParams creates a new GetQualitySurveysScorableParams object
// with the default values initialized.
func NewGetQualitySurveysScorableParams() *GetQualitySurveysScorableParams {
	var ()
	return &GetQualitySurveysScorableParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetQualitySurveysScorableParamsWithTimeout creates a new GetQualitySurveysScorableParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetQualitySurveysScorableParamsWithTimeout(timeout time.Duration) *GetQualitySurveysScorableParams {
	var ()
	return &GetQualitySurveysScorableParams{

		timeout: timeout,
	}
}

// NewGetQualitySurveysScorableParamsWithContext creates a new GetQualitySurveysScorableParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetQualitySurveysScorableParamsWithContext(ctx context.Context) *GetQualitySurveysScorableParams {
	var ()
	return &GetQualitySurveysScorableParams{

		Context: ctx,
	}
}

// NewGetQualitySurveysScorableParamsWithHTTPClient creates a new GetQualitySurveysScorableParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetQualitySurveysScorableParamsWithHTTPClient(client *http.Client) *GetQualitySurveysScorableParams {
	var ()
	return &GetQualitySurveysScorableParams{
		HTTPClient: client,
	}
}

/*GetQualitySurveysScorableParams contains all the parameters to send to the API endpoint
for the get quality surveys scorable operation typically these are written to a http.Request
*/
type GetQualitySurveysScorableParams struct {

	/*CustomerSurveyURL
	  customerSurveyUrl

	*/
	CustomerSurveyURL string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get quality surveys scorable params
func (o *GetQualitySurveysScorableParams) WithTimeout(timeout time.Duration) *GetQualitySurveysScorableParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get quality surveys scorable params
func (o *GetQualitySurveysScorableParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get quality surveys scorable params
func (o *GetQualitySurveysScorableParams) WithContext(ctx context.Context) *GetQualitySurveysScorableParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get quality surveys scorable params
func (o *GetQualitySurveysScorableParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get quality surveys scorable params
func (o *GetQualitySurveysScorableParams) WithHTTPClient(client *http.Client) *GetQualitySurveysScorableParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get quality surveys scorable params
func (o *GetQualitySurveysScorableParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCustomerSurveyURL adds the customerSurveyURL to the get quality surveys scorable params
func (o *GetQualitySurveysScorableParams) WithCustomerSurveyURL(customerSurveyURL string) *GetQualitySurveysScorableParams {
	o.SetCustomerSurveyURL(customerSurveyURL)
	return o
}

// SetCustomerSurveyURL adds the customerSurveyUrl to the get quality surveys scorable params
func (o *GetQualitySurveysScorableParams) SetCustomerSurveyURL(customerSurveyURL string) {
	o.CustomerSurveyURL = customerSurveyURL
}

// WriteToRequest writes these params to a swagger request
func (o *GetQualitySurveysScorableParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param customerSurveyUrl
	qrCustomerSurveyURL := o.CustomerSurveyURL
	qCustomerSurveyURL := qrCustomerSurveyURL
	if qCustomerSurveyURL != "" {
		if err := r.SetQueryParam("customerSurveyUrl", qCustomerSurveyURL); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package quality

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetQualityCalibrationsReader is a Reader for the GetQualityCalibrations structure.
type GetQualityCalibrationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetQualityCalibrationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetQualityCalibrationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetQualityCalibrationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetQualityCalibrationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetQualityCalibrationsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetQualityCalibrationsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetQualityCalibrationsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetQualityCalibrationsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetQualityCalibrationsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetQualityCalibrationsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetQualityCalibrationsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetQualityCalibrationsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetQualityCalibrationsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetQualityCalibrationsOK creates a GetQualityCalibrationsOK with default headers values
func NewGetQualityCalibrationsOK() *GetQualityCalibrationsOK {
	return &GetQualityCalibrationsOK{}
}

/*GetQualityCalibrationsOK handles this case with default header values.

successful operation
*/
type GetQualityCalibrationsOK struct {
	Payload *models.CalibrationEntityListing
}

func (o *GetQualityCalibrationsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations][%d] getQualityCalibrationsOK  %+v", 200, o.Payload)
}

func (o *GetQualityCalibrationsOK) GetPayload() *models.CalibrationEntityListing {
	return o.Payload
}

func (o *GetQualityCalibrationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CalibrationEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationsBadRequest creates a GetQualityCalibrationsBadRequest with default headers values
func NewGetQualityCalibrationsBadRequest() *GetQualityCalibrationsBadRequest {
	return &GetQualityCalibrationsBadRequest{}
}

/*GetQualityCalibrationsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetQualityCalibrationsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations][%d] getQualityCalibrationsBadRequest  %+v", 400, o.Payload)
}

func (o *GetQualityCalibrationsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationsUnauthorized creates a GetQualityCalibrationsUnauthorized with default headers values
func NewGetQualityCalibrationsUnauthorized() *GetQualityCalibrationsUnauthorized {
	return &GetQualityCalibrationsUnauthorized{}
}

/*GetQualityCalibrationsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetQualityCalibrationsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations][%d] getQualityCalibrationsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetQualityCalibrationsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationsForbidden creates a GetQualityCalibrationsForbidden with default headers values
func NewGetQualityCalibrationsForbidden() *GetQualityCalibrationsForbidden {
	return &GetQualityCalibrationsForbidden{}
}

/*GetQualityCalibrationsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetQualityCalibrationsForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations][%d] getQualityCalibrationsForbidden  %+v", 403, o.Payload)
}

func (o *GetQualityCalibrationsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationsNotFound creates a GetQualityCalibrationsNotFound with default headers values
func NewGetQualityCalibrationsNotFound() *GetQualityCalibrationsNotFound {
	return &GetQualityCalibrationsNotFound{}
}

/*GetQualityCalibrationsNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetQualityCalibrationsNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations][%d] getQualityCalibrationsNotFound  %+v", 404, o.Payload)
}

func (o *GetQualityCalibrationsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationsRequestTimeout creates a GetQualityCalibrationsRequestTimeout with default headers values
func NewGetQualityCalibrationsRequestTimeout() *GetQualityCalibrationsRequestTimeout {
	return &GetQualityCalibrationsRequestTimeout{}
}

/*GetQualityCalibrationsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetQualityCalibrationsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations][%d] getQualityCalibrationsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetQualityCalibrationsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationsRequestEntityTooLarge creates a GetQualityCalibrationsRequestEntityTooLarge with default headers values
func NewGetQualityCalibrationsRequestEntityTooLarge() *GetQualityCalibrationsRequestEntityTooLarge {
	return &GetQualityCalibrationsRequestEntityTooLarge{}
}

/*GetQualityCalibrationsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetQualityCalibrationsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations][%d] getQualityCalibrationsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetQualityCalibrationsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationsUnsupportedMediaType creates a GetQualityCalibrationsUnsupportedMediaType with default headers values
func NewGetQualityCalibrationsUnsupportedMediaType() *GetQualityCalibrationsUnsupportedMediaType {
	return &GetQualityCalibrationsUnsupportedMediaType{}
}

/*GetQualityCalibrationsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetQualityCalibrationsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations][%d] getQualityCalibrationsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetQualityCalibrationsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationsTooManyRequests creates a GetQualityCalibrationsTooManyRequests with default headers values
func NewGetQualityCalibrationsTooManyRequests() *GetQualityCalibrationsTooManyRequests {
	return &GetQualityCalibrationsTooManyRequests{}
}

/*GetQualityCalibrationsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetQualityCalibrationsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations][%d] getQualityCalibrationsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetQualityCalibrationsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationsInternalServerError creates a GetQualityCalibrationsInternalServerError with default headers values
func NewGetQualityCalibrationsInternalServerError() *GetQualityCalibrationsInternalServerError {
	return &GetQualityCalibrationsInternalServerError{}
}

/*GetQualityCalibrationsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetQualityCalibrationsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations][%d] getQualityCalibrationsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetQualityCalibrationsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationsServiceUnavailable creates a GetQualityCalibrationsServiceUnavailable with default headers values
func NewGetQualityCalibrationsServiceUnavailable() *GetQualityCalibrationsServiceUnavailable {
	return &GetQualityCalibrationsServiceUnavailable{}
}

/*GetQualityCalibrationsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetQualityCalibrationsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations][%d] getQualityCalibrationsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetQualityCalibrationsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQualityCalibrationsGatewayTimeout creates a GetQualityCalibrationsGatewayTimeout with default headers values
func NewGetQualityCalibrationsGatewayTimeout() *GetQualityCalibrationsGatewayTimeout {
	return &GetQualityCalibrationsGatewayTimeout{}
}

/*GetQualityCalibrationsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetQualityCalibrationsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetQualityCalibrationsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/quality/calibrations][%d] getQualityCalibrationsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetQualityCalibrationsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetQualityCalibrationsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

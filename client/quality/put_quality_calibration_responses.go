// Code generated by go-swagger; DO NOT EDIT.

package quality

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutQualityCalibrationReader is a Reader for the PutQualityCalibration structure.
type PutQualityCalibrationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutQualityCalibrationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutQualityCalibrationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutQualityCalibrationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutQualityCalibrationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutQualityCalibrationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutQualityCalibrationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutQualityCalibrationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutQualityCalibrationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutQualityCalibrationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutQualityCalibrationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutQualityCalibrationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutQualityCalibrationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutQualityCalibrationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutQualityCalibrationOK creates a PutQualityCalibrationOK with default headers values
func NewPutQualityCalibrationOK() *PutQualityCalibrationOK {
	return &PutQualityCalibrationOK{}
}

/*PutQualityCalibrationOK handles this case with default header values.

successful operation
*/
type PutQualityCalibrationOK struct {
	Payload *models.Calibration
}

func (o *PutQualityCalibrationOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/calibrations/{calibrationId}][%d] putQualityCalibrationOK  %+v", 200, o.Payload)
}

func (o *PutQualityCalibrationOK) GetPayload() *models.Calibration {
	return o.Payload
}

func (o *PutQualityCalibrationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Calibration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityCalibrationBadRequest creates a PutQualityCalibrationBadRequest with default headers values
func NewPutQualityCalibrationBadRequest() *PutQualityCalibrationBadRequest {
	return &PutQualityCalibrationBadRequest{}
}

/*PutQualityCalibrationBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutQualityCalibrationBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutQualityCalibrationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/calibrations/{calibrationId}][%d] putQualityCalibrationBadRequest  %+v", 400, o.Payload)
}

func (o *PutQualityCalibrationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityCalibrationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityCalibrationUnauthorized creates a PutQualityCalibrationUnauthorized with default headers values
func NewPutQualityCalibrationUnauthorized() *PutQualityCalibrationUnauthorized {
	return &PutQualityCalibrationUnauthorized{}
}

/*PutQualityCalibrationUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutQualityCalibrationUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutQualityCalibrationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/calibrations/{calibrationId}][%d] putQualityCalibrationUnauthorized  %+v", 401, o.Payload)
}

func (o *PutQualityCalibrationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityCalibrationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityCalibrationForbidden creates a PutQualityCalibrationForbidden with default headers values
func NewPutQualityCalibrationForbidden() *PutQualityCalibrationForbidden {
	return &PutQualityCalibrationForbidden{}
}

/*PutQualityCalibrationForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutQualityCalibrationForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutQualityCalibrationForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/calibrations/{calibrationId}][%d] putQualityCalibrationForbidden  %+v", 403, o.Payload)
}

func (o *PutQualityCalibrationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityCalibrationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityCalibrationNotFound creates a PutQualityCalibrationNotFound with default headers values
func NewPutQualityCalibrationNotFound() *PutQualityCalibrationNotFound {
	return &PutQualityCalibrationNotFound{}
}

/*PutQualityCalibrationNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutQualityCalibrationNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutQualityCalibrationNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/calibrations/{calibrationId}][%d] putQualityCalibrationNotFound  %+v", 404, o.Payload)
}

func (o *PutQualityCalibrationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityCalibrationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityCalibrationRequestTimeout creates a PutQualityCalibrationRequestTimeout with default headers values
func NewPutQualityCalibrationRequestTimeout() *PutQualityCalibrationRequestTimeout {
	return &PutQualityCalibrationRequestTimeout{}
}

/*PutQualityCalibrationRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutQualityCalibrationRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutQualityCalibrationRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/calibrations/{calibrationId}][%d] putQualityCalibrationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutQualityCalibrationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityCalibrationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityCalibrationRequestEntityTooLarge creates a PutQualityCalibrationRequestEntityTooLarge with default headers values
func NewPutQualityCalibrationRequestEntityTooLarge() *PutQualityCalibrationRequestEntityTooLarge {
	return &PutQualityCalibrationRequestEntityTooLarge{}
}

/*PutQualityCalibrationRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PutQualityCalibrationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutQualityCalibrationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/calibrations/{calibrationId}][%d] putQualityCalibrationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutQualityCalibrationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityCalibrationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityCalibrationUnsupportedMediaType creates a PutQualityCalibrationUnsupportedMediaType with default headers values
func NewPutQualityCalibrationUnsupportedMediaType() *PutQualityCalibrationUnsupportedMediaType {
	return &PutQualityCalibrationUnsupportedMediaType{}
}

/*PutQualityCalibrationUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutQualityCalibrationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutQualityCalibrationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/calibrations/{calibrationId}][%d] putQualityCalibrationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutQualityCalibrationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityCalibrationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityCalibrationTooManyRequests creates a PutQualityCalibrationTooManyRequests with default headers values
func NewPutQualityCalibrationTooManyRequests() *PutQualityCalibrationTooManyRequests {
	return &PutQualityCalibrationTooManyRequests{}
}

/*PutQualityCalibrationTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutQualityCalibrationTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutQualityCalibrationTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/calibrations/{calibrationId}][%d] putQualityCalibrationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutQualityCalibrationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityCalibrationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityCalibrationInternalServerError creates a PutQualityCalibrationInternalServerError with default headers values
func NewPutQualityCalibrationInternalServerError() *PutQualityCalibrationInternalServerError {
	return &PutQualityCalibrationInternalServerError{}
}

/*PutQualityCalibrationInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutQualityCalibrationInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutQualityCalibrationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/calibrations/{calibrationId}][%d] putQualityCalibrationInternalServerError  %+v", 500, o.Payload)
}

func (o *PutQualityCalibrationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityCalibrationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityCalibrationServiceUnavailable creates a PutQualityCalibrationServiceUnavailable with default headers values
func NewPutQualityCalibrationServiceUnavailable() *PutQualityCalibrationServiceUnavailable {
	return &PutQualityCalibrationServiceUnavailable{}
}

/*PutQualityCalibrationServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutQualityCalibrationServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutQualityCalibrationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/calibrations/{calibrationId}][%d] putQualityCalibrationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutQualityCalibrationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityCalibrationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQualityCalibrationGatewayTimeout creates a PutQualityCalibrationGatewayTimeout with default headers values
func NewPutQualityCalibrationGatewayTimeout() *PutQualityCalibrationGatewayTimeout {
	return &PutQualityCalibrationGatewayTimeout{}
}

/*PutQualityCalibrationGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutQualityCalibrationGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutQualityCalibrationGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/quality/calibrations/{calibrationId}][%d] putQualityCalibrationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutQualityCalibrationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutQualityCalibrationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package presence

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutPresencedefinitionReader is a Reader for the PutPresencedefinition structure.
type PutPresencedefinitionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutPresencedefinitionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutPresencedefinitionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutPresencedefinitionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutPresencedefinitionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutPresencedefinitionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutPresencedefinitionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutPresencedefinitionRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutPresencedefinitionRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutPresencedefinitionUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutPresencedefinitionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutPresencedefinitionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutPresencedefinitionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutPresencedefinitionGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutPresencedefinitionOK creates a PutPresencedefinitionOK with default headers values
func NewPutPresencedefinitionOK() *PutPresencedefinitionOK {
	return &PutPresencedefinitionOK{}
}

/*
PutPresencedefinitionOK describes a response with status code 200, with default header values.

successful operation
*/
type PutPresencedefinitionOK struct {
	Payload *models.OrganizationPresence
}

// IsSuccess returns true when this put presencedefinition o k response has a 2xx status code
func (o *PutPresencedefinitionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put presencedefinition o k response has a 3xx status code
func (o *PutPresencedefinitionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put presencedefinition o k response has a 4xx status code
func (o *PutPresencedefinitionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put presencedefinition o k response has a 5xx status code
func (o *PutPresencedefinitionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put presencedefinition o k response a status code equal to that given
func (o *PutPresencedefinitionOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutPresencedefinitionOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionOK  %+v", 200, o.Payload)
}

func (o *PutPresencedefinitionOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionOK  %+v", 200, o.Payload)
}

func (o *PutPresencedefinitionOK) GetPayload() *models.OrganizationPresence {
	return o.Payload
}

func (o *PutPresencedefinitionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OrganizationPresence)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPresencedefinitionBadRequest creates a PutPresencedefinitionBadRequest with default headers values
func NewPutPresencedefinitionBadRequest() *PutPresencedefinitionBadRequest {
	return &PutPresencedefinitionBadRequest{}
}

/*
PutPresencedefinitionBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutPresencedefinitionBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put presencedefinition bad request response has a 2xx status code
func (o *PutPresencedefinitionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put presencedefinition bad request response has a 3xx status code
func (o *PutPresencedefinitionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put presencedefinition bad request response has a 4xx status code
func (o *PutPresencedefinitionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put presencedefinition bad request response has a 5xx status code
func (o *PutPresencedefinitionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put presencedefinition bad request response a status code equal to that given
func (o *PutPresencedefinitionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutPresencedefinitionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionBadRequest  %+v", 400, o.Payload)
}

func (o *PutPresencedefinitionBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionBadRequest  %+v", 400, o.Payload)
}

func (o *PutPresencedefinitionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutPresencedefinitionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPresencedefinitionUnauthorized creates a PutPresencedefinitionUnauthorized with default headers values
func NewPutPresencedefinitionUnauthorized() *PutPresencedefinitionUnauthorized {
	return &PutPresencedefinitionUnauthorized{}
}

/*
PutPresencedefinitionUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutPresencedefinitionUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put presencedefinition unauthorized response has a 2xx status code
func (o *PutPresencedefinitionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put presencedefinition unauthorized response has a 3xx status code
func (o *PutPresencedefinitionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put presencedefinition unauthorized response has a 4xx status code
func (o *PutPresencedefinitionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put presencedefinition unauthorized response has a 5xx status code
func (o *PutPresencedefinitionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put presencedefinition unauthorized response a status code equal to that given
func (o *PutPresencedefinitionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutPresencedefinitionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionUnauthorized  %+v", 401, o.Payload)
}

func (o *PutPresencedefinitionUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionUnauthorized  %+v", 401, o.Payload)
}

func (o *PutPresencedefinitionUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutPresencedefinitionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPresencedefinitionForbidden creates a PutPresencedefinitionForbidden with default headers values
func NewPutPresencedefinitionForbidden() *PutPresencedefinitionForbidden {
	return &PutPresencedefinitionForbidden{}
}

/*
PutPresencedefinitionForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutPresencedefinitionForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put presencedefinition forbidden response has a 2xx status code
func (o *PutPresencedefinitionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put presencedefinition forbidden response has a 3xx status code
func (o *PutPresencedefinitionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put presencedefinition forbidden response has a 4xx status code
func (o *PutPresencedefinitionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put presencedefinition forbidden response has a 5xx status code
func (o *PutPresencedefinitionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put presencedefinition forbidden response a status code equal to that given
func (o *PutPresencedefinitionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutPresencedefinitionForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionForbidden  %+v", 403, o.Payload)
}

func (o *PutPresencedefinitionForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionForbidden  %+v", 403, o.Payload)
}

func (o *PutPresencedefinitionForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutPresencedefinitionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPresencedefinitionNotFound creates a PutPresencedefinitionNotFound with default headers values
func NewPutPresencedefinitionNotFound() *PutPresencedefinitionNotFound {
	return &PutPresencedefinitionNotFound{}
}

/*
PutPresencedefinitionNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutPresencedefinitionNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put presencedefinition not found response has a 2xx status code
func (o *PutPresencedefinitionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put presencedefinition not found response has a 3xx status code
func (o *PutPresencedefinitionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put presencedefinition not found response has a 4xx status code
func (o *PutPresencedefinitionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put presencedefinition not found response has a 5xx status code
func (o *PutPresencedefinitionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put presencedefinition not found response a status code equal to that given
func (o *PutPresencedefinitionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutPresencedefinitionNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionNotFound  %+v", 404, o.Payload)
}

func (o *PutPresencedefinitionNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionNotFound  %+v", 404, o.Payload)
}

func (o *PutPresencedefinitionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutPresencedefinitionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPresencedefinitionRequestTimeout creates a PutPresencedefinitionRequestTimeout with default headers values
func NewPutPresencedefinitionRequestTimeout() *PutPresencedefinitionRequestTimeout {
	return &PutPresencedefinitionRequestTimeout{}
}

/*
PutPresencedefinitionRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutPresencedefinitionRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put presencedefinition request timeout response has a 2xx status code
func (o *PutPresencedefinitionRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put presencedefinition request timeout response has a 3xx status code
func (o *PutPresencedefinitionRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put presencedefinition request timeout response has a 4xx status code
func (o *PutPresencedefinitionRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put presencedefinition request timeout response has a 5xx status code
func (o *PutPresencedefinitionRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put presencedefinition request timeout response a status code equal to that given
func (o *PutPresencedefinitionRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutPresencedefinitionRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutPresencedefinitionRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutPresencedefinitionRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutPresencedefinitionRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPresencedefinitionRequestEntityTooLarge creates a PutPresencedefinitionRequestEntityTooLarge with default headers values
func NewPutPresencedefinitionRequestEntityTooLarge() *PutPresencedefinitionRequestEntityTooLarge {
	return &PutPresencedefinitionRequestEntityTooLarge{}
}

/*
PutPresencedefinitionRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutPresencedefinitionRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put presencedefinition request entity too large response has a 2xx status code
func (o *PutPresencedefinitionRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put presencedefinition request entity too large response has a 3xx status code
func (o *PutPresencedefinitionRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put presencedefinition request entity too large response has a 4xx status code
func (o *PutPresencedefinitionRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put presencedefinition request entity too large response has a 5xx status code
func (o *PutPresencedefinitionRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put presencedefinition request entity too large response a status code equal to that given
func (o *PutPresencedefinitionRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutPresencedefinitionRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutPresencedefinitionRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutPresencedefinitionRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutPresencedefinitionRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPresencedefinitionUnsupportedMediaType creates a PutPresencedefinitionUnsupportedMediaType with default headers values
func NewPutPresencedefinitionUnsupportedMediaType() *PutPresencedefinitionUnsupportedMediaType {
	return &PutPresencedefinitionUnsupportedMediaType{}
}

/*
PutPresencedefinitionUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutPresencedefinitionUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put presencedefinition unsupported media type response has a 2xx status code
func (o *PutPresencedefinitionUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put presencedefinition unsupported media type response has a 3xx status code
func (o *PutPresencedefinitionUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put presencedefinition unsupported media type response has a 4xx status code
func (o *PutPresencedefinitionUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put presencedefinition unsupported media type response has a 5xx status code
func (o *PutPresencedefinitionUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put presencedefinition unsupported media type response a status code equal to that given
func (o *PutPresencedefinitionUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutPresencedefinitionUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutPresencedefinitionUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutPresencedefinitionUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutPresencedefinitionUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPresencedefinitionTooManyRequests creates a PutPresencedefinitionTooManyRequests with default headers values
func NewPutPresencedefinitionTooManyRequests() *PutPresencedefinitionTooManyRequests {
	return &PutPresencedefinitionTooManyRequests{}
}

/*
PutPresencedefinitionTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutPresencedefinitionTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put presencedefinition too many requests response has a 2xx status code
func (o *PutPresencedefinitionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put presencedefinition too many requests response has a 3xx status code
func (o *PutPresencedefinitionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put presencedefinition too many requests response has a 4xx status code
func (o *PutPresencedefinitionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put presencedefinition too many requests response has a 5xx status code
func (o *PutPresencedefinitionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put presencedefinition too many requests response a status code equal to that given
func (o *PutPresencedefinitionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutPresencedefinitionTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutPresencedefinitionTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutPresencedefinitionTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutPresencedefinitionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPresencedefinitionInternalServerError creates a PutPresencedefinitionInternalServerError with default headers values
func NewPutPresencedefinitionInternalServerError() *PutPresencedefinitionInternalServerError {
	return &PutPresencedefinitionInternalServerError{}
}

/*
PutPresencedefinitionInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutPresencedefinitionInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put presencedefinition internal server error response has a 2xx status code
func (o *PutPresencedefinitionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put presencedefinition internal server error response has a 3xx status code
func (o *PutPresencedefinitionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put presencedefinition internal server error response has a 4xx status code
func (o *PutPresencedefinitionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put presencedefinition internal server error response has a 5xx status code
func (o *PutPresencedefinitionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put presencedefinition internal server error response a status code equal to that given
func (o *PutPresencedefinitionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutPresencedefinitionInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionInternalServerError  %+v", 500, o.Payload)
}

func (o *PutPresencedefinitionInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionInternalServerError  %+v", 500, o.Payload)
}

func (o *PutPresencedefinitionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutPresencedefinitionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPresencedefinitionServiceUnavailable creates a PutPresencedefinitionServiceUnavailable with default headers values
func NewPutPresencedefinitionServiceUnavailable() *PutPresencedefinitionServiceUnavailable {
	return &PutPresencedefinitionServiceUnavailable{}
}

/*
PutPresencedefinitionServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutPresencedefinitionServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put presencedefinition service unavailable response has a 2xx status code
func (o *PutPresencedefinitionServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put presencedefinition service unavailable response has a 3xx status code
func (o *PutPresencedefinitionServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put presencedefinition service unavailable response has a 4xx status code
func (o *PutPresencedefinitionServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put presencedefinition service unavailable response has a 5xx status code
func (o *PutPresencedefinitionServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put presencedefinition service unavailable response a status code equal to that given
func (o *PutPresencedefinitionServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutPresencedefinitionServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutPresencedefinitionServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutPresencedefinitionServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutPresencedefinitionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPresencedefinitionGatewayTimeout creates a PutPresencedefinitionGatewayTimeout with default headers values
func NewPutPresencedefinitionGatewayTimeout() *PutPresencedefinitionGatewayTimeout {
	return &PutPresencedefinitionGatewayTimeout{}
}

/*
PutPresencedefinitionGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutPresencedefinitionGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put presencedefinition gateway timeout response has a 2xx status code
func (o *PutPresencedefinitionGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put presencedefinition gateway timeout response has a 3xx status code
func (o *PutPresencedefinitionGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put presencedefinition gateway timeout response has a 4xx status code
func (o *PutPresencedefinitionGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put presencedefinition gateway timeout response has a 5xx status code
func (o *PutPresencedefinitionGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put presencedefinition gateway timeout response a status code equal to that given
func (o *PutPresencedefinitionGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutPresencedefinitionGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutPresencedefinitionGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/presencedefinitions/{presenceId}][%d] putPresencedefinitionGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutPresencedefinitionGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutPresencedefinitionGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

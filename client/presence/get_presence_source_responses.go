// Code generated by go-swagger; DO NOT EDIT.

package presence

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetPresenceSourceReader is a Reader for the GetPresenceSource structure.
type GetPresenceSourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPresenceSourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPresenceSourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPresenceSourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPresenceSourceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPresenceSourceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPresenceSourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetPresenceSourceRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetPresenceSourceRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetPresenceSourceUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetPresenceSourceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPresenceSourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetPresenceSourceServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetPresenceSourceGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPresenceSourceOK creates a GetPresenceSourceOK with default headers values
func NewGetPresenceSourceOK() *GetPresenceSourceOK {
	return &GetPresenceSourceOK{}
}

/*GetPresenceSourceOK handles this case with default header values.

successful operation
*/
type GetPresenceSourceOK struct {
	Payload *models.Source
}

func (o *GetPresenceSourceOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/presence/sources/{sourceId}][%d] getPresenceSourceOK  %+v", 200, o.Payload)
}

func (o *GetPresenceSourceOK) GetPayload() *models.Source {
	return o.Payload
}

func (o *GetPresenceSourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Source)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPresenceSourceBadRequest creates a GetPresenceSourceBadRequest with default headers values
func NewGetPresenceSourceBadRequest() *GetPresenceSourceBadRequest {
	return &GetPresenceSourceBadRequest{}
}

/*GetPresenceSourceBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetPresenceSourceBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetPresenceSourceBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/presence/sources/{sourceId}][%d] getPresenceSourceBadRequest  %+v", 400, o.Payload)
}

func (o *GetPresenceSourceBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetPresenceSourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPresenceSourceUnauthorized creates a GetPresenceSourceUnauthorized with default headers values
func NewGetPresenceSourceUnauthorized() *GetPresenceSourceUnauthorized {
	return &GetPresenceSourceUnauthorized{}
}

/*GetPresenceSourceUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetPresenceSourceUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetPresenceSourceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/presence/sources/{sourceId}][%d] getPresenceSourceUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPresenceSourceUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetPresenceSourceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPresenceSourceForbidden creates a GetPresenceSourceForbidden with default headers values
func NewGetPresenceSourceForbidden() *GetPresenceSourceForbidden {
	return &GetPresenceSourceForbidden{}
}

/*GetPresenceSourceForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetPresenceSourceForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetPresenceSourceForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/presence/sources/{sourceId}][%d] getPresenceSourceForbidden  %+v", 403, o.Payload)
}

func (o *GetPresenceSourceForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetPresenceSourceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPresenceSourceNotFound creates a GetPresenceSourceNotFound with default headers values
func NewGetPresenceSourceNotFound() *GetPresenceSourceNotFound {
	return &GetPresenceSourceNotFound{}
}

/*GetPresenceSourceNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetPresenceSourceNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetPresenceSourceNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/presence/sources/{sourceId}][%d] getPresenceSourceNotFound  %+v", 404, o.Payload)
}

func (o *GetPresenceSourceNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetPresenceSourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPresenceSourceRequestTimeout creates a GetPresenceSourceRequestTimeout with default headers values
func NewGetPresenceSourceRequestTimeout() *GetPresenceSourceRequestTimeout {
	return &GetPresenceSourceRequestTimeout{}
}

/*GetPresenceSourceRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetPresenceSourceRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetPresenceSourceRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/presence/sources/{sourceId}][%d] getPresenceSourceRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetPresenceSourceRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetPresenceSourceRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPresenceSourceRequestEntityTooLarge creates a GetPresenceSourceRequestEntityTooLarge with default headers values
func NewGetPresenceSourceRequestEntityTooLarge() *GetPresenceSourceRequestEntityTooLarge {
	return &GetPresenceSourceRequestEntityTooLarge{}
}

/*GetPresenceSourceRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetPresenceSourceRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetPresenceSourceRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/presence/sources/{sourceId}][%d] getPresenceSourceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetPresenceSourceRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetPresenceSourceRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPresenceSourceUnsupportedMediaType creates a GetPresenceSourceUnsupportedMediaType with default headers values
func NewGetPresenceSourceUnsupportedMediaType() *GetPresenceSourceUnsupportedMediaType {
	return &GetPresenceSourceUnsupportedMediaType{}
}

/*GetPresenceSourceUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetPresenceSourceUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetPresenceSourceUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/presence/sources/{sourceId}][%d] getPresenceSourceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetPresenceSourceUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetPresenceSourceUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPresenceSourceTooManyRequests creates a GetPresenceSourceTooManyRequests with default headers values
func NewGetPresenceSourceTooManyRequests() *GetPresenceSourceTooManyRequests {
	return &GetPresenceSourceTooManyRequests{}
}

/*GetPresenceSourceTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetPresenceSourceTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetPresenceSourceTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/presence/sources/{sourceId}][%d] getPresenceSourceTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPresenceSourceTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetPresenceSourceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPresenceSourceInternalServerError creates a GetPresenceSourceInternalServerError with default headers values
func NewGetPresenceSourceInternalServerError() *GetPresenceSourceInternalServerError {
	return &GetPresenceSourceInternalServerError{}
}

/*GetPresenceSourceInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetPresenceSourceInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetPresenceSourceInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/presence/sources/{sourceId}][%d] getPresenceSourceInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPresenceSourceInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetPresenceSourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPresenceSourceServiceUnavailable creates a GetPresenceSourceServiceUnavailable with default headers values
func NewGetPresenceSourceServiceUnavailable() *GetPresenceSourceServiceUnavailable {
	return &GetPresenceSourceServiceUnavailable{}
}

/*GetPresenceSourceServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetPresenceSourceServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetPresenceSourceServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/presence/sources/{sourceId}][%d] getPresenceSourceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetPresenceSourceServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetPresenceSourceServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPresenceSourceGatewayTimeout creates a GetPresenceSourceGatewayTimeout with default headers values
func NewGetPresenceSourceGatewayTimeout() *GetPresenceSourceGatewayTimeout {
	return &GetPresenceSourceGatewayTimeout{}
}

/*GetPresenceSourceGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetPresenceSourceGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetPresenceSourceGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/presence/sources/{sourceId}][%d] getPresenceSourceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetPresenceSourceGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetPresenceSourceGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package presence

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeletePresenceSourceReader is a Reader for the DeletePresenceSource structure.
type DeletePresenceSourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePresenceSourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeletePresenceSourceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeletePresenceSourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeletePresenceSourceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeletePresenceSourceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeletePresenceSourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeletePresenceSourceRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeletePresenceSourceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeletePresenceSourceRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeletePresenceSourceUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeletePresenceSourceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeletePresenceSourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeletePresenceSourceServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeletePresenceSourceGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeletePresenceSourceNoContent creates a DeletePresenceSourceNoContent with default headers values
func NewDeletePresenceSourceNoContent() *DeletePresenceSourceNoContent {
	return &DeletePresenceSourceNoContent{}
}

/*
DeletePresenceSourceNoContent describes a response with status code 204, with default header values.

Presence source successfully deactivated.
*/
type DeletePresenceSourceNoContent struct {
}

// IsSuccess returns true when this delete presence source no content response has a 2xx status code
func (o *DeletePresenceSourceNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete presence source no content response has a 3xx status code
func (o *DeletePresenceSourceNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete presence source no content response has a 4xx status code
func (o *DeletePresenceSourceNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete presence source no content response has a 5xx status code
func (o *DeletePresenceSourceNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete presence source no content response a status code equal to that given
func (o *DeletePresenceSourceNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeletePresenceSourceNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceNoContent ", 204)
}

func (o *DeletePresenceSourceNoContent) String() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceNoContent ", 204)
}

func (o *DeletePresenceSourceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePresenceSourceBadRequest creates a DeletePresenceSourceBadRequest with default headers values
func NewDeletePresenceSourceBadRequest() *DeletePresenceSourceBadRequest {
	return &DeletePresenceSourceBadRequest{}
}

/*
DeletePresenceSourceBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeletePresenceSourceBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete presence source bad request response has a 2xx status code
func (o *DeletePresenceSourceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete presence source bad request response has a 3xx status code
func (o *DeletePresenceSourceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete presence source bad request response has a 4xx status code
func (o *DeletePresenceSourceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete presence source bad request response has a 5xx status code
func (o *DeletePresenceSourceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete presence source bad request response a status code equal to that given
func (o *DeletePresenceSourceBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeletePresenceSourceBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceBadRequest  %+v", 400, o.Payload)
}

func (o *DeletePresenceSourceBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceBadRequest  %+v", 400, o.Payload)
}

func (o *DeletePresenceSourceBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeletePresenceSourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePresenceSourceUnauthorized creates a DeletePresenceSourceUnauthorized with default headers values
func NewDeletePresenceSourceUnauthorized() *DeletePresenceSourceUnauthorized {
	return &DeletePresenceSourceUnauthorized{}
}

/*
DeletePresenceSourceUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type DeletePresenceSourceUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete presence source unauthorized response has a 2xx status code
func (o *DeletePresenceSourceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete presence source unauthorized response has a 3xx status code
func (o *DeletePresenceSourceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete presence source unauthorized response has a 4xx status code
func (o *DeletePresenceSourceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete presence source unauthorized response has a 5xx status code
func (o *DeletePresenceSourceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete presence source unauthorized response a status code equal to that given
func (o *DeletePresenceSourceUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeletePresenceSourceUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceUnauthorized  %+v", 401, o.Payload)
}

func (o *DeletePresenceSourceUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceUnauthorized  %+v", 401, o.Payload)
}

func (o *DeletePresenceSourceUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeletePresenceSourceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePresenceSourceForbidden creates a DeletePresenceSourceForbidden with default headers values
func NewDeletePresenceSourceForbidden() *DeletePresenceSourceForbidden {
	return &DeletePresenceSourceForbidden{}
}

/*
DeletePresenceSourceForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type DeletePresenceSourceForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete presence source forbidden response has a 2xx status code
func (o *DeletePresenceSourceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete presence source forbidden response has a 3xx status code
func (o *DeletePresenceSourceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete presence source forbidden response has a 4xx status code
func (o *DeletePresenceSourceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete presence source forbidden response has a 5xx status code
func (o *DeletePresenceSourceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete presence source forbidden response a status code equal to that given
func (o *DeletePresenceSourceForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeletePresenceSourceForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceForbidden  %+v", 403, o.Payload)
}

func (o *DeletePresenceSourceForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceForbidden  %+v", 403, o.Payload)
}

func (o *DeletePresenceSourceForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeletePresenceSourceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePresenceSourceNotFound creates a DeletePresenceSourceNotFound with default headers values
func NewDeletePresenceSourceNotFound() *DeletePresenceSourceNotFound {
	return &DeletePresenceSourceNotFound{}
}

/*
DeletePresenceSourceNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type DeletePresenceSourceNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete presence source not found response has a 2xx status code
func (o *DeletePresenceSourceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete presence source not found response has a 3xx status code
func (o *DeletePresenceSourceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete presence source not found response has a 4xx status code
func (o *DeletePresenceSourceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete presence source not found response has a 5xx status code
func (o *DeletePresenceSourceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete presence source not found response a status code equal to that given
func (o *DeletePresenceSourceNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeletePresenceSourceNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceNotFound  %+v", 404, o.Payload)
}

func (o *DeletePresenceSourceNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceNotFound  %+v", 404, o.Payload)
}

func (o *DeletePresenceSourceNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeletePresenceSourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePresenceSourceRequestTimeout creates a DeletePresenceSourceRequestTimeout with default headers values
func NewDeletePresenceSourceRequestTimeout() *DeletePresenceSourceRequestTimeout {
	return &DeletePresenceSourceRequestTimeout{}
}

/*
DeletePresenceSourceRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeletePresenceSourceRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete presence source request timeout response has a 2xx status code
func (o *DeletePresenceSourceRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete presence source request timeout response has a 3xx status code
func (o *DeletePresenceSourceRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete presence source request timeout response has a 4xx status code
func (o *DeletePresenceSourceRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete presence source request timeout response has a 5xx status code
func (o *DeletePresenceSourceRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this delete presence source request timeout response a status code equal to that given
func (o *DeletePresenceSourceRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *DeletePresenceSourceRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeletePresenceSourceRequestTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeletePresenceSourceRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeletePresenceSourceRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePresenceSourceConflict creates a DeletePresenceSourceConflict with default headers values
func NewDeletePresenceSourceConflict() *DeletePresenceSourceConflict {
	return &DeletePresenceSourceConflict{}
}

/*
DeletePresenceSourceConflict describes a response with status code 409, with default header values.

Conflict
*/
type DeletePresenceSourceConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete presence source conflict response has a 2xx status code
func (o *DeletePresenceSourceConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete presence source conflict response has a 3xx status code
func (o *DeletePresenceSourceConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete presence source conflict response has a 4xx status code
func (o *DeletePresenceSourceConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete presence source conflict response has a 5xx status code
func (o *DeletePresenceSourceConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete presence source conflict response a status code equal to that given
func (o *DeletePresenceSourceConflict) IsCode(code int) bool {
	return code == 409
}

func (o *DeletePresenceSourceConflict) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceConflict  %+v", 409, o.Payload)
}

func (o *DeletePresenceSourceConflict) String() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceConflict  %+v", 409, o.Payload)
}

func (o *DeletePresenceSourceConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeletePresenceSourceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePresenceSourceRequestEntityTooLarge creates a DeletePresenceSourceRequestEntityTooLarge with default headers values
func NewDeletePresenceSourceRequestEntityTooLarge() *DeletePresenceSourceRequestEntityTooLarge {
	return &DeletePresenceSourceRequestEntityTooLarge{}
}

/*
DeletePresenceSourceRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type DeletePresenceSourceRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete presence source request entity too large response has a 2xx status code
func (o *DeletePresenceSourceRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete presence source request entity too large response has a 3xx status code
func (o *DeletePresenceSourceRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete presence source request entity too large response has a 4xx status code
func (o *DeletePresenceSourceRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete presence source request entity too large response has a 5xx status code
func (o *DeletePresenceSourceRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this delete presence source request entity too large response a status code equal to that given
func (o *DeletePresenceSourceRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *DeletePresenceSourceRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeletePresenceSourceRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeletePresenceSourceRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeletePresenceSourceRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePresenceSourceUnsupportedMediaType creates a DeletePresenceSourceUnsupportedMediaType with default headers values
func NewDeletePresenceSourceUnsupportedMediaType() *DeletePresenceSourceUnsupportedMediaType {
	return &DeletePresenceSourceUnsupportedMediaType{}
}

/*
DeletePresenceSourceUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeletePresenceSourceUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete presence source unsupported media type response has a 2xx status code
func (o *DeletePresenceSourceUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete presence source unsupported media type response has a 3xx status code
func (o *DeletePresenceSourceUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete presence source unsupported media type response has a 4xx status code
func (o *DeletePresenceSourceUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete presence source unsupported media type response has a 5xx status code
func (o *DeletePresenceSourceUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this delete presence source unsupported media type response a status code equal to that given
func (o *DeletePresenceSourceUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *DeletePresenceSourceUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeletePresenceSourceUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeletePresenceSourceUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeletePresenceSourceUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePresenceSourceTooManyRequests creates a DeletePresenceSourceTooManyRequests with default headers values
func NewDeletePresenceSourceTooManyRequests() *DeletePresenceSourceTooManyRequests {
	return &DeletePresenceSourceTooManyRequests{}
}

/*
DeletePresenceSourceTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeletePresenceSourceTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete presence source too many requests response has a 2xx status code
func (o *DeletePresenceSourceTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete presence source too many requests response has a 3xx status code
func (o *DeletePresenceSourceTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete presence source too many requests response has a 4xx status code
func (o *DeletePresenceSourceTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete presence source too many requests response has a 5xx status code
func (o *DeletePresenceSourceTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete presence source too many requests response a status code equal to that given
func (o *DeletePresenceSourceTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeletePresenceSourceTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeletePresenceSourceTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeletePresenceSourceTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeletePresenceSourceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePresenceSourceInternalServerError creates a DeletePresenceSourceInternalServerError with default headers values
func NewDeletePresenceSourceInternalServerError() *DeletePresenceSourceInternalServerError {
	return &DeletePresenceSourceInternalServerError{}
}

/*
DeletePresenceSourceInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeletePresenceSourceInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete presence source internal server error response has a 2xx status code
func (o *DeletePresenceSourceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete presence source internal server error response has a 3xx status code
func (o *DeletePresenceSourceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete presence source internal server error response has a 4xx status code
func (o *DeletePresenceSourceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete presence source internal server error response has a 5xx status code
func (o *DeletePresenceSourceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete presence source internal server error response a status code equal to that given
func (o *DeletePresenceSourceInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeletePresenceSourceInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceInternalServerError  %+v", 500, o.Payload)
}

func (o *DeletePresenceSourceInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceInternalServerError  %+v", 500, o.Payload)
}

func (o *DeletePresenceSourceInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeletePresenceSourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePresenceSourceServiceUnavailable creates a DeletePresenceSourceServiceUnavailable with default headers values
func NewDeletePresenceSourceServiceUnavailable() *DeletePresenceSourceServiceUnavailable {
	return &DeletePresenceSourceServiceUnavailable{}
}

/*
DeletePresenceSourceServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeletePresenceSourceServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete presence source service unavailable response has a 2xx status code
func (o *DeletePresenceSourceServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete presence source service unavailable response has a 3xx status code
func (o *DeletePresenceSourceServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete presence source service unavailable response has a 4xx status code
func (o *DeletePresenceSourceServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete presence source service unavailable response has a 5xx status code
func (o *DeletePresenceSourceServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete presence source service unavailable response a status code equal to that given
func (o *DeletePresenceSourceServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeletePresenceSourceServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeletePresenceSourceServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeletePresenceSourceServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeletePresenceSourceServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePresenceSourceGatewayTimeout creates a DeletePresenceSourceGatewayTimeout with default headers values
func NewDeletePresenceSourceGatewayTimeout() *DeletePresenceSourceGatewayTimeout {
	return &DeletePresenceSourceGatewayTimeout{}
}

/*
DeletePresenceSourceGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type DeletePresenceSourceGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete presence source gateway timeout response has a 2xx status code
func (o *DeletePresenceSourceGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete presence source gateway timeout response has a 3xx status code
func (o *DeletePresenceSourceGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete presence source gateway timeout response has a 4xx status code
func (o *DeletePresenceSourceGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete presence source gateway timeout response has a 5xx status code
func (o *DeletePresenceSourceGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this delete presence source gateway timeout response a status code equal to that given
func (o *DeletePresenceSourceGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *DeletePresenceSourceGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeletePresenceSourceGatewayTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/presence/sources/{sourceId}][%d] deletePresenceSourceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeletePresenceSourceGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeletePresenceSourceGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

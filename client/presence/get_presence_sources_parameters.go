// Code generated by go-swagger; DO NOT EDIT.

package presence

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetPresenceSourcesParams creates a new GetPresenceSourcesParams object
// with the default values initialized.
func NewGetPresenceSourcesParams() *GetPresenceSourcesParams {
	var (
		deletedDefault = string("false")
	)
	return &GetPresenceSourcesParams{
		Deleted: &deletedDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPresenceSourcesParamsWithTimeout creates a new GetPresenceSourcesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPresenceSourcesParamsWithTimeout(timeout time.Duration) *GetPresenceSourcesParams {
	var (
		deletedDefault = string("false")
	)
	return &GetPresenceSourcesParams{
		Deleted: &deletedDefault,

		timeout: timeout,
	}
}

// NewGetPresenceSourcesParamsWithContext creates a new GetPresenceSourcesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPresenceSourcesParamsWithContext(ctx context.Context) *GetPresenceSourcesParams {
	var (
		deletedDefault = string("false")
	)
	return &GetPresenceSourcesParams{
		Deleted: &deletedDefault,

		Context: ctx,
	}
}

// NewGetPresenceSourcesParamsWithHTTPClient creates a new GetPresenceSourcesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPresenceSourcesParamsWithHTTPClient(client *http.Client) *GetPresenceSourcesParams {
	var (
		deletedDefault = string("false")
	)
	return &GetPresenceSourcesParams{
		Deleted:    &deletedDefault,
		HTTPClient: client,
	}
}

/*GetPresenceSourcesParams contains all the parameters to send to the API endpoint
for the get presence sources operation typically these are written to a http.Request
*/
type GetPresenceSourcesParams struct {

	/*Deleted
	  Deleted query can be TRUE or FALSE

	*/
	Deleted *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get presence sources params
func (o *GetPresenceSourcesParams) WithTimeout(timeout time.Duration) *GetPresenceSourcesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get presence sources params
func (o *GetPresenceSourcesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get presence sources params
func (o *GetPresenceSourcesParams) WithContext(ctx context.Context) *GetPresenceSourcesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get presence sources params
func (o *GetPresenceSourcesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get presence sources params
func (o *GetPresenceSourcesParams) WithHTTPClient(client *http.Client) *GetPresenceSourcesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get presence sources params
func (o *GetPresenceSourcesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeleted adds the deleted to the get presence sources params
func (o *GetPresenceSourcesParams) WithDeleted(deleted *string) *GetPresenceSourcesParams {
	o.SetDeleted(deleted)
	return o
}

// SetDeleted adds the deleted to the get presence sources params
func (o *GetPresenceSourcesParams) SetDeleted(deleted *string) {
	o.Deleted = deleted
}

// WriteToRequest writes these params to a swagger request
func (o *GetPresenceSourcesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Deleted != nil {

		// query param deleted
		var qrDeleted string
		if o.Deleted != nil {
			qrDeleted = *o.Deleted
		}
		qDeleted := qrDeleted
		if qDeleted != "" {
			if err := r.SetQueryParam("deleted", qDeleted); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

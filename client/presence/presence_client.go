// Code generated by go-swagger; DO NOT EDIT.

package presence

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the presence client
type API interface {
	/*
	   DeletePresenceSource deletes a presence source
	*/
	DeletePresenceSource(ctx context.Context, params *DeletePresenceSourceParams) (*DeletePresenceSourceNoContent, error)
	/*
	   DeletePresencedefinition deletes a presence definition
	*/
	DeletePresencedefinition(ctx context.Context, params *DeletePresencedefinitionParams) error
	/*
	   GetPresenceSource gets a presence source
	*/
	GetPresenceSource(ctx context.Context, params *GetPresenceSourceParams) (*GetPresenceSourceOK, error)
	/*
	   GetPresenceSources gets a list of presence sources
	*/
	GetPresenceSources(ctx context.Context, params *GetPresenceSourcesParams) (*GetPresenceSourcesOK, error)
	/*
	   GetPresenceUserPrimarysource gets a user s primary presence source
	*/
	GetPresenceUserPrimarysource(ctx context.Context, params *GetPresenceUserPrimarysourceParams) (*GetPresenceUserPrimarysourceOK, error)
	/*
	   GetPresencedefinition gets a presence definition
	*/
	GetPresencedefinition(ctx context.Context, params *GetPresencedefinitionParams) (*GetPresencedefinitionOK, error)
	/*
	   GetPresencedefinitions gets an organization s list of presence definitions
	*/
	GetPresencedefinitions(ctx context.Context, params *GetPresencedefinitionsParams) (*GetPresencedefinitionsOK, error)
	/*
	   GetSystempresences gets the list of system presences
	*/
	GetSystempresences(ctx context.Context, params *GetSystempresencesParams) (*GetSystempresencesOK, error)
	/*
	   GetUserPresence gets a user s presence
	   Get a user's presence for the specified source that is not specifically listed.  Used to support custom presence sources.
	*/
	GetUserPresence(ctx context.Context, params *GetUserPresenceParams) (*GetUserPresenceOK, error)
	/*
	   GetUserPresencesPurecloud gets a user s genesys cloud presence
	   Get the default Genesys Cloud user presence source PURECLOUD
	*/
	GetUserPresencesPurecloud(ctx context.Context, params *GetUserPresencesPurecloudParams) (*GetUserPresencesPurecloudOK, error)
	/*
	   PatchUserPresence patches a user s presence
	   Patch a user's presence for the specified source that is not specifically listed. The presence object can be patched one of three ways. Option 1: Set the 'primary' property to true. This will set the 'source' defined in the path as the user's primary presence source. Option 2: Provide the presenceDefinition value. The 'id' is the only value required within the presenceDefinition. Option 3: Provide the message value. Option 1 can be combined with Option 2 and/or Option 3.
	*/
	PatchUserPresence(ctx context.Context, params *PatchUserPresenceParams) (*PatchUserPresenceOK, error)
	/*
	   PatchUserPresencesPurecloud patches a genesys cloud user s presence
	   The presence object can be patched one of three ways. Option 1: Set the 'primary' property to true. This will set the PURECLOUD source as the user's primary presence source. Option 2: Provide the presenceDefinition value. The 'id' is the only value required within the presenceDefinition. Option 3: Provide the message value. Option 1 can be combined with Option 2 and/or Option 3.
	*/
	PatchUserPresencesPurecloud(ctx context.Context, params *PatchUserPresencesPurecloudParams) (*PatchUserPresencesPurecloudOK, error)
	/*
	   PostPresenceSources creates a presence source
	*/
	PostPresenceSources(ctx context.Context, params *PostPresenceSourcesParams) (*PostPresenceSourcesOK, error)
	/*
	   PostPresencedefinitions creates a presence definition
	*/
	PostPresencedefinitions(ctx context.Context, params *PostPresencedefinitionsParams) (*PostPresencedefinitionsOK, error)
	/*
	   PutPresenceSource updates a presence source
	*/
	PutPresenceSource(ctx context.Context, params *PutPresenceSourceParams) (*PutPresenceSourceOK, error)
	/*
	   PutPresenceUserPrimarysource updates a user s primary presence source
	*/
	PutPresenceUserPrimarysource(ctx context.Context, params *PutPresenceUserPrimarysourceParams) (*PutPresenceUserPrimarysourceOK, error)
	/*
	   PutPresencedefinition updates a presence definition
	*/
	PutPresencedefinition(ctx context.Context, params *PutPresencedefinitionParams) (*PutPresencedefinitionOK, error)
	/*
	   PutUsersPresencesBulk updates bulk user presences
	*/
	PutUsersPresencesBulk(ctx context.Context, params *PutUsersPresencesBulkParams) (*PutUsersPresencesBulkOK, error)
}

// New creates a new presence API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for presence API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeletePresenceSource deletes a presence source
*/
func (a *Client) DeletePresenceSource(ctx context.Context, params *DeletePresenceSourceParams) (*DeletePresenceSourceNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePresenceSource",
		Method:             "DELETE",
		PathPattern:        "/api/v2/presence/sources/{sourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePresenceSourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePresenceSourceNoContent), nil

}

/*
DeletePresencedefinition deletes a presence definition
*/
func (a *Client) DeletePresencedefinition(ctx context.Context, params *DeletePresencedefinitionParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePresencedefinition",
		Method:             "DELETE",
		PathPattern:        "/api/v2/presencedefinitions/{presenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePresencedefinitionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetPresenceSource gets a presence source
*/
func (a *Client) GetPresenceSource(ctx context.Context, params *GetPresenceSourceParams) (*GetPresenceSourceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPresenceSource",
		Method:             "GET",
		PathPattern:        "/api/v2/presence/sources/{sourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPresenceSourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPresenceSourceOK), nil

}

/*
GetPresenceSources gets a list of presence sources
*/
func (a *Client) GetPresenceSources(ctx context.Context, params *GetPresenceSourcesParams) (*GetPresenceSourcesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPresenceSources",
		Method:             "GET",
		PathPattern:        "/api/v2/presence/sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPresenceSourcesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPresenceSourcesOK), nil

}

/*
GetPresenceUserPrimarysource gets a user s primary presence source
*/
func (a *Client) GetPresenceUserPrimarysource(ctx context.Context, params *GetPresenceUserPrimarysourceParams) (*GetPresenceUserPrimarysourceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPresenceUserPrimarysource",
		Method:             "GET",
		PathPattern:        "/api/v2/presence/users/{userId}/primarysource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPresenceUserPrimarysourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPresenceUserPrimarysourceOK), nil

}

/*
GetPresencedefinition gets a presence definition
*/
func (a *Client) GetPresencedefinition(ctx context.Context, params *GetPresencedefinitionParams) (*GetPresencedefinitionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPresencedefinition",
		Method:             "GET",
		PathPattern:        "/api/v2/presencedefinitions/{presenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPresencedefinitionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPresencedefinitionOK), nil

}

/*
GetPresencedefinitions gets an organization s list of presence definitions
*/
func (a *Client) GetPresencedefinitions(ctx context.Context, params *GetPresencedefinitionsParams) (*GetPresencedefinitionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPresencedefinitions",
		Method:             "GET",
		PathPattern:        "/api/v2/presencedefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPresencedefinitionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPresencedefinitionsOK), nil

}

/*
GetSystempresences gets the list of system presences
*/
func (a *Client) GetSystempresences(ctx context.Context, params *GetSystempresencesParams) (*GetSystempresencesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSystempresences",
		Method:             "GET",
		PathPattern:        "/api/v2/systempresences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSystempresencesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystempresencesOK), nil

}

/*
GetUserPresence gets a user s presence

Get a user's presence for the specified source that is not specifically listed.  Used to support custom presence sources.
*/
func (a *Client) GetUserPresence(ctx context.Context, params *GetUserPresenceParams) (*GetUserPresenceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserPresence",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/presences/{sourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserPresenceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserPresenceOK), nil

}

/*
GetUserPresencesPurecloud gets a user s genesys cloud presence

Get the default Genesys Cloud user presence source PURECLOUD
*/
func (a *Client) GetUserPresencesPurecloud(ctx context.Context, params *GetUserPresencesPurecloudParams) (*GetUserPresencesPurecloudOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserPresencesPurecloud",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/presences/purecloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserPresencesPurecloudReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserPresencesPurecloudOK), nil

}

/*
PatchUserPresence patches a user s presence

Patch a user's presence for the specified source that is not specifically listed. The presence object can be patched one of three ways. Option 1: Set the 'primary' property to true. This will set the 'source' defined in the path as the user's primary presence source. Option 2: Provide the presenceDefinition value. The 'id' is the only value required within the presenceDefinition. Option 3: Provide the message value. Option 1 can be combined with Option 2 and/or Option 3.
*/
func (a *Client) PatchUserPresence(ctx context.Context, params *PatchUserPresenceParams) (*PatchUserPresenceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUserPresence",
		Method:             "PATCH",
		PathPattern:        "/api/v2/users/{userId}/presences/{sourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUserPresenceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUserPresenceOK), nil

}

/*
PatchUserPresencesPurecloud patches a genesys cloud user s presence

The presence object can be patched one of three ways. Option 1: Set the 'primary' property to true. This will set the PURECLOUD source as the user's primary presence source. Option 2: Provide the presenceDefinition value. The 'id' is the only value required within the presenceDefinition. Option 3: Provide the message value. Option 1 can be combined with Option 2 and/or Option 3.
*/
func (a *Client) PatchUserPresencesPurecloud(ctx context.Context, params *PatchUserPresencesPurecloudParams) (*PatchUserPresencesPurecloudOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUserPresencesPurecloud",
		Method:             "PATCH",
		PathPattern:        "/api/v2/users/{userId}/presences/purecloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUserPresencesPurecloudReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUserPresencesPurecloudOK), nil

}

/*
PostPresenceSources creates a presence source
*/
func (a *Client) PostPresenceSources(ctx context.Context, params *PostPresenceSourcesParams) (*PostPresenceSourcesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPresenceSources",
		Method:             "POST",
		PathPattern:        "/api/v2/presence/sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPresenceSourcesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPresenceSourcesOK), nil

}

/*
PostPresencedefinitions creates a presence definition
*/
func (a *Client) PostPresencedefinitions(ctx context.Context, params *PostPresencedefinitionsParams) (*PostPresencedefinitionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPresencedefinitions",
		Method:             "POST",
		PathPattern:        "/api/v2/presencedefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPresencedefinitionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPresencedefinitionsOK), nil

}

/*
PutPresenceSource updates a presence source
*/
func (a *Client) PutPresenceSource(ctx context.Context, params *PutPresenceSourceParams) (*PutPresenceSourceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putPresenceSource",
		Method:             "PUT",
		PathPattern:        "/api/v2/presence/sources/{sourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutPresenceSourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPresenceSourceOK), nil

}

/*
PutPresenceUserPrimarysource updates a user s primary presence source
*/
func (a *Client) PutPresenceUserPrimarysource(ctx context.Context, params *PutPresenceUserPrimarysourceParams) (*PutPresenceUserPrimarysourceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putPresenceUserPrimarysource",
		Method:             "PUT",
		PathPattern:        "/api/v2/presence/users/{userId}/primarysource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutPresenceUserPrimarysourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPresenceUserPrimarysourceOK), nil

}

/*
PutPresencedefinition updates a presence definition
*/
func (a *Client) PutPresencedefinition(ctx context.Context, params *PutPresencedefinitionParams) (*PutPresencedefinitionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putPresencedefinition",
		Method:             "PUT",
		PathPattern:        "/api/v2/presencedefinitions/{presenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutPresencedefinitionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPresencedefinitionOK), nil

}

/*
PutUsersPresencesBulk updates bulk user presences
*/
func (a *Client) PutUsersPresencesBulk(ctx context.Context, params *PutUsersPresencesBulkParams) (*PutUsersPresencesBulkOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUsersPresencesBulk",
		Method:             "PUT",
		PathPattern:        "/api/v2/users/presences/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUsersPresencesBulkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUsersPresencesBulkOK), nil

}

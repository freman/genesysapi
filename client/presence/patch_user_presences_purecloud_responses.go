// Code generated by go-swagger; DO NOT EDIT.

package presence

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchUserPresencesPurecloudReader is a Reader for the PatchUserPresencesPurecloud structure.
type PatchUserPresencesPurecloudReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchUserPresencesPurecloudReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchUserPresencesPurecloudOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchUserPresencesPurecloudBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchUserPresencesPurecloudUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchUserPresencesPurecloudForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchUserPresencesPurecloudNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchUserPresencesPurecloudRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchUserPresencesPurecloudConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchUserPresencesPurecloudRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchUserPresencesPurecloudUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchUserPresencesPurecloudTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchUserPresencesPurecloudInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchUserPresencesPurecloudServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchUserPresencesPurecloudGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchUserPresencesPurecloudOK creates a PatchUserPresencesPurecloudOK with default headers values
func NewPatchUserPresencesPurecloudOK() *PatchUserPresencesPurecloudOK {
	return &PatchUserPresencesPurecloudOK{}
}

/*
PatchUserPresencesPurecloudOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchUserPresencesPurecloudOK struct {
	Payload *models.UserPresence
}

// IsSuccess returns true when this patch user presences purecloud o k response has a 2xx status code
func (o *PatchUserPresencesPurecloudOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch user presences purecloud o k response has a 3xx status code
func (o *PatchUserPresencesPurecloudOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user presences purecloud o k response has a 4xx status code
func (o *PatchUserPresencesPurecloudOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch user presences purecloud o k response has a 5xx status code
func (o *PatchUserPresencesPurecloudOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user presences purecloud o k response a status code equal to that given
func (o *PatchUserPresencesPurecloudOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchUserPresencesPurecloudOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudOK  %+v", 200, o.Payload)
}

func (o *PatchUserPresencesPurecloudOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudOK  %+v", 200, o.Payload)
}

func (o *PatchUserPresencesPurecloudOK) GetPayload() *models.UserPresence {
	return o.Payload
}

func (o *PatchUserPresencesPurecloudOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserPresence)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserPresencesPurecloudBadRequest creates a PatchUserPresencesPurecloudBadRequest with default headers values
func NewPatchUserPresencesPurecloudBadRequest() *PatchUserPresencesPurecloudBadRequest {
	return &PatchUserPresencesPurecloudBadRequest{}
}

/*
PatchUserPresencesPurecloudBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchUserPresencesPurecloudBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user presences purecloud bad request response has a 2xx status code
func (o *PatchUserPresencesPurecloudBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user presences purecloud bad request response has a 3xx status code
func (o *PatchUserPresencesPurecloudBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user presences purecloud bad request response has a 4xx status code
func (o *PatchUserPresencesPurecloudBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user presences purecloud bad request response has a 5xx status code
func (o *PatchUserPresencesPurecloudBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user presences purecloud bad request response a status code equal to that given
func (o *PatchUserPresencesPurecloudBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchUserPresencesPurecloudBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudBadRequest  %+v", 400, o.Payload)
}

func (o *PatchUserPresencesPurecloudBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudBadRequest  %+v", 400, o.Payload)
}

func (o *PatchUserPresencesPurecloudBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserPresencesPurecloudBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserPresencesPurecloudUnauthorized creates a PatchUserPresencesPurecloudUnauthorized with default headers values
func NewPatchUserPresencesPurecloudUnauthorized() *PatchUserPresencesPurecloudUnauthorized {
	return &PatchUserPresencesPurecloudUnauthorized{}
}

/*
PatchUserPresencesPurecloudUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchUserPresencesPurecloudUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user presences purecloud unauthorized response has a 2xx status code
func (o *PatchUserPresencesPurecloudUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user presences purecloud unauthorized response has a 3xx status code
func (o *PatchUserPresencesPurecloudUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user presences purecloud unauthorized response has a 4xx status code
func (o *PatchUserPresencesPurecloudUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user presences purecloud unauthorized response has a 5xx status code
func (o *PatchUserPresencesPurecloudUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user presences purecloud unauthorized response a status code equal to that given
func (o *PatchUserPresencesPurecloudUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchUserPresencesPurecloudUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchUserPresencesPurecloudUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchUserPresencesPurecloudUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserPresencesPurecloudUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserPresencesPurecloudForbidden creates a PatchUserPresencesPurecloudForbidden with default headers values
func NewPatchUserPresencesPurecloudForbidden() *PatchUserPresencesPurecloudForbidden {
	return &PatchUserPresencesPurecloudForbidden{}
}

/*
PatchUserPresencesPurecloudForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchUserPresencesPurecloudForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user presences purecloud forbidden response has a 2xx status code
func (o *PatchUserPresencesPurecloudForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user presences purecloud forbidden response has a 3xx status code
func (o *PatchUserPresencesPurecloudForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user presences purecloud forbidden response has a 4xx status code
func (o *PatchUserPresencesPurecloudForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user presences purecloud forbidden response has a 5xx status code
func (o *PatchUserPresencesPurecloudForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user presences purecloud forbidden response a status code equal to that given
func (o *PatchUserPresencesPurecloudForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchUserPresencesPurecloudForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudForbidden  %+v", 403, o.Payload)
}

func (o *PatchUserPresencesPurecloudForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudForbidden  %+v", 403, o.Payload)
}

func (o *PatchUserPresencesPurecloudForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserPresencesPurecloudForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserPresencesPurecloudNotFound creates a PatchUserPresencesPurecloudNotFound with default headers values
func NewPatchUserPresencesPurecloudNotFound() *PatchUserPresencesPurecloudNotFound {
	return &PatchUserPresencesPurecloudNotFound{}
}

/*
PatchUserPresencesPurecloudNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchUserPresencesPurecloudNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user presences purecloud not found response has a 2xx status code
func (o *PatchUserPresencesPurecloudNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user presences purecloud not found response has a 3xx status code
func (o *PatchUserPresencesPurecloudNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user presences purecloud not found response has a 4xx status code
func (o *PatchUserPresencesPurecloudNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user presences purecloud not found response has a 5xx status code
func (o *PatchUserPresencesPurecloudNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user presences purecloud not found response a status code equal to that given
func (o *PatchUserPresencesPurecloudNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchUserPresencesPurecloudNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudNotFound  %+v", 404, o.Payload)
}

func (o *PatchUserPresencesPurecloudNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudNotFound  %+v", 404, o.Payload)
}

func (o *PatchUserPresencesPurecloudNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserPresencesPurecloudNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserPresencesPurecloudRequestTimeout creates a PatchUserPresencesPurecloudRequestTimeout with default headers values
func NewPatchUserPresencesPurecloudRequestTimeout() *PatchUserPresencesPurecloudRequestTimeout {
	return &PatchUserPresencesPurecloudRequestTimeout{}
}

/*
PatchUserPresencesPurecloudRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchUserPresencesPurecloudRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user presences purecloud request timeout response has a 2xx status code
func (o *PatchUserPresencesPurecloudRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user presences purecloud request timeout response has a 3xx status code
func (o *PatchUserPresencesPurecloudRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user presences purecloud request timeout response has a 4xx status code
func (o *PatchUserPresencesPurecloudRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user presences purecloud request timeout response has a 5xx status code
func (o *PatchUserPresencesPurecloudRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user presences purecloud request timeout response a status code equal to that given
func (o *PatchUserPresencesPurecloudRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchUserPresencesPurecloudRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchUserPresencesPurecloudRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchUserPresencesPurecloudRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserPresencesPurecloudRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserPresencesPurecloudConflict creates a PatchUserPresencesPurecloudConflict with default headers values
func NewPatchUserPresencesPurecloudConflict() *PatchUserPresencesPurecloudConflict {
	return &PatchUserPresencesPurecloudConflict{}
}

/*
PatchUserPresencesPurecloudConflict describes a response with status code 409, with default header values.

Conflict
*/
type PatchUserPresencesPurecloudConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user presences purecloud conflict response has a 2xx status code
func (o *PatchUserPresencesPurecloudConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user presences purecloud conflict response has a 3xx status code
func (o *PatchUserPresencesPurecloudConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user presences purecloud conflict response has a 4xx status code
func (o *PatchUserPresencesPurecloudConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user presences purecloud conflict response has a 5xx status code
func (o *PatchUserPresencesPurecloudConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user presences purecloud conflict response a status code equal to that given
func (o *PatchUserPresencesPurecloudConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PatchUserPresencesPurecloudConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudConflict  %+v", 409, o.Payload)
}

func (o *PatchUserPresencesPurecloudConflict) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudConflict  %+v", 409, o.Payload)
}

func (o *PatchUserPresencesPurecloudConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserPresencesPurecloudConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserPresencesPurecloudRequestEntityTooLarge creates a PatchUserPresencesPurecloudRequestEntityTooLarge with default headers values
func NewPatchUserPresencesPurecloudRequestEntityTooLarge() *PatchUserPresencesPurecloudRequestEntityTooLarge {
	return &PatchUserPresencesPurecloudRequestEntityTooLarge{}
}

/*
PatchUserPresencesPurecloudRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchUserPresencesPurecloudRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user presences purecloud request entity too large response has a 2xx status code
func (o *PatchUserPresencesPurecloudRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user presences purecloud request entity too large response has a 3xx status code
func (o *PatchUserPresencesPurecloudRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user presences purecloud request entity too large response has a 4xx status code
func (o *PatchUserPresencesPurecloudRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user presences purecloud request entity too large response has a 5xx status code
func (o *PatchUserPresencesPurecloudRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user presences purecloud request entity too large response a status code equal to that given
func (o *PatchUserPresencesPurecloudRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchUserPresencesPurecloudRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchUserPresencesPurecloudRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchUserPresencesPurecloudRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserPresencesPurecloudRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserPresencesPurecloudUnsupportedMediaType creates a PatchUserPresencesPurecloudUnsupportedMediaType with default headers values
func NewPatchUserPresencesPurecloudUnsupportedMediaType() *PatchUserPresencesPurecloudUnsupportedMediaType {
	return &PatchUserPresencesPurecloudUnsupportedMediaType{}
}

/*
PatchUserPresencesPurecloudUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchUserPresencesPurecloudUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user presences purecloud unsupported media type response has a 2xx status code
func (o *PatchUserPresencesPurecloudUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user presences purecloud unsupported media type response has a 3xx status code
func (o *PatchUserPresencesPurecloudUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user presences purecloud unsupported media type response has a 4xx status code
func (o *PatchUserPresencesPurecloudUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user presences purecloud unsupported media type response has a 5xx status code
func (o *PatchUserPresencesPurecloudUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user presences purecloud unsupported media type response a status code equal to that given
func (o *PatchUserPresencesPurecloudUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchUserPresencesPurecloudUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchUserPresencesPurecloudUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchUserPresencesPurecloudUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserPresencesPurecloudUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserPresencesPurecloudTooManyRequests creates a PatchUserPresencesPurecloudTooManyRequests with default headers values
func NewPatchUserPresencesPurecloudTooManyRequests() *PatchUserPresencesPurecloudTooManyRequests {
	return &PatchUserPresencesPurecloudTooManyRequests{}
}

/*
PatchUserPresencesPurecloudTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchUserPresencesPurecloudTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user presences purecloud too many requests response has a 2xx status code
func (o *PatchUserPresencesPurecloudTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user presences purecloud too many requests response has a 3xx status code
func (o *PatchUserPresencesPurecloudTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user presences purecloud too many requests response has a 4xx status code
func (o *PatchUserPresencesPurecloudTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user presences purecloud too many requests response has a 5xx status code
func (o *PatchUserPresencesPurecloudTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user presences purecloud too many requests response a status code equal to that given
func (o *PatchUserPresencesPurecloudTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchUserPresencesPurecloudTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchUserPresencesPurecloudTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchUserPresencesPurecloudTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserPresencesPurecloudTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserPresencesPurecloudInternalServerError creates a PatchUserPresencesPurecloudInternalServerError with default headers values
func NewPatchUserPresencesPurecloudInternalServerError() *PatchUserPresencesPurecloudInternalServerError {
	return &PatchUserPresencesPurecloudInternalServerError{}
}

/*
PatchUserPresencesPurecloudInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchUserPresencesPurecloudInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user presences purecloud internal server error response has a 2xx status code
func (o *PatchUserPresencesPurecloudInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user presences purecloud internal server error response has a 3xx status code
func (o *PatchUserPresencesPurecloudInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user presences purecloud internal server error response has a 4xx status code
func (o *PatchUserPresencesPurecloudInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch user presences purecloud internal server error response has a 5xx status code
func (o *PatchUserPresencesPurecloudInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch user presences purecloud internal server error response a status code equal to that given
func (o *PatchUserPresencesPurecloudInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchUserPresencesPurecloudInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchUserPresencesPurecloudInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchUserPresencesPurecloudInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserPresencesPurecloudInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserPresencesPurecloudServiceUnavailable creates a PatchUserPresencesPurecloudServiceUnavailable with default headers values
func NewPatchUserPresencesPurecloudServiceUnavailable() *PatchUserPresencesPurecloudServiceUnavailable {
	return &PatchUserPresencesPurecloudServiceUnavailable{}
}

/*
PatchUserPresencesPurecloudServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchUserPresencesPurecloudServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user presences purecloud service unavailable response has a 2xx status code
func (o *PatchUserPresencesPurecloudServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user presences purecloud service unavailable response has a 3xx status code
func (o *PatchUserPresencesPurecloudServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user presences purecloud service unavailable response has a 4xx status code
func (o *PatchUserPresencesPurecloudServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch user presences purecloud service unavailable response has a 5xx status code
func (o *PatchUserPresencesPurecloudServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch user presences purecloud service unavailable response a status code equal to that given
func (o *PatchUserPresencesPurecloudServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchUserPresencesPurecloudServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchUserPresencesPurecloudServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchUserPresencesPurecloudServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserPresencesPurecloudServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserPresencesPurecloudGatewayTimeout creates a PatchUserPresencesPurecloudGatewayTimeout with default headers values
func NewPatchUserPresencesPurecloudGatewayTimeout() *PatchUserPresencesPurecloudGatewayTimeout {
	return &PatchUserPresencesPurecloudGatewayTimeout{}
}

/*
PatchUserPresencesPurecloudGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchUserPresencesPurecloudGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user presences purecloud gateway timeout response has a 2xx status code
func (o *PatchUserPresencesPurecloudGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user presences purecloud gateway timeout response has a 3xx status code
func (o *PatchUserPresencesPurecloudGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user presences purecloud gateway timeout response has a 4xx status code
func (o *PatchUserPresencesPurecloudGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch user presences purecloud gateway timeout response has a 5xx status code
func (o *PatchUserPresencesPurecloudGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch user presences purecloud gateway timeout response a status code equal to that given
func (o *PatchUserPresencesPurecloudGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchUserPresencesPurecloudGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchUserPresencesPurecloudGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/presences/purecloud][%d] patchUserPresencesPurecloudGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchUserPresencesPurecloudGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserPresencesPurecloudGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

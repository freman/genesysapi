// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetGroupProfileParams creates a new GetGroupProfileParams object
// with the default values initialized.
func NewGetGroupProfileParams() *GetGroupProfileParams {
	var ()
	return &GetGroupProfileParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetGroupProfileParamsWithTimeout creates a new GetGroupProfileParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetGroupProfileParamsWithTimeout(timeout time.Duration) *GetGroupProfileParams {
	var ()
	return &GetGroupProfileParams{

		timeout: timeout,
	}
}

// NewGetGroupProfileParamsWithContext creates a new GetGroupProfileParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetGroupProfileParamsWithContext(ctx context.Context) *GetGroupProfileParams {
	var ()
	return &GetGroupProfileParams{

		Context: ctx,
	}
}

// NewGetGroupProfileParamsWithHTTPClient creates a new GetGroupProfileParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetGroupProfileParamsWithHTTPClient(client *http.Client) *GetGroupProfileParams {
	var ()
	return &GetGroupProfileParams{
		HTTPClient: client,
	}
}

/*GetGroupProfileParams contains all the parameters to send to the API endpoint
for the get group profile operation typically these are written to a http.Request
*/
type GetGroupProfileParams struct {

	/*Fields
	  Comma separated fields to return.  Allowable values can be found by querying /api/v2/fieldconfig?type=group and using the key for the elements returned by the fieldList

	*/
	Fields *string
	/*GroupID
	  groupId

	*/
	GroupID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get group profile params
func (o *GetGroupProfileParams) WithTimeout(timeout time.Duration) *GetGroupProfileParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get group profile params
func (o *GetGroupProfileParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get group profile params
func (o *GetGroupProfileParams) WithContext(ctx context.Context) *GetGroupProfileParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get group profile params
func (o *GetGroupProfileParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get group profile params
func (o *GetGroupProfileParams) WithHTTPClient(client *http.Client) *GetGroupProfileParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get group profile params
func (o *GetGroupProfileParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the get group profile params
func (o *GetGroupProfileParams) WithFields(fields *string) *GetGroupProfileParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get group profile params
func (o *GetGroupProfileParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithGroupID adds the groupID to the get group profile params
func (o *GetGroupProfileParams) WithGroupID(groupID string) *GetGroupProfileParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the get group profile params
func (o *GetGroupProfileParams) SetGroupID(groupID string) {
	o.GroupID = groupID
}

// WriteToRequest writes these params to a swagger request
func (o *GetGroupProfileParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	// path param groupId
	if err := r.SetPathParam("groupId", o.GroupID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteGroupReader is a Reader for the DeleteGroup structure.
type DeleteGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewDeleteGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteGroupRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteGroupRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteGroupUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteGroupServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteGroupGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteGroupDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteGroupBadRequest creates a DeleteGroupBadRequest with default headers values
func NewDeleteGroupBadRequest() *DeleteGroupBadRequest {
	return &DeleteGroupBadRequest{}
}

/*
DeleteGroupBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteGroupBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete group bad request response has a 2xx status code
func (o *DeleteGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete group bad request response has a 3xx status code
func (o *DeleteGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group bad request response has a 4xx status code
func (o *DeleteGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete group bad request response has a 5xx status code
func (o *DeleteGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete group bad request response a status code equal to that given
func (o *DeleteGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteGroupBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteGroupBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteGroupBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupUnauthorized creates a DeleteGroupUnauthorized with default headers values
func NewDeleteGroupUnauthorized() *DeleteGroupUnauthorized {
	return &DeleteGroupUnauthorized{}
}

/*
DeleteGroupUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteGroupUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete group unauthorized response has a 2xx status code
func (o *DeleteGroupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete group unauthorized response has a 3xx status code
func (o *DeleteGroupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group unauthorized response has a 4xx status code
func (o *DeleteGroupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete group unauthorized response has a 5xx status code
func (o *DeleteGroupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete group unauthorized response a status code equal to that given
func (o *DeleteGroupUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteGroupUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteGroupUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteGroupUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupForbidden creates a DeleteGroupForbidden with default headers values
func NewDeleteGroupForbidden() *DeleteGroupForbidden {
	return &DeleteGroupForbidden{}
}

/*
DeleteGroupForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type DeleteGroupForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete group forbidden response has a 2xx status code
func (o *DeleteGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete group forbidden response has a 3xx status code
func (o *DeleteGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group forbidden response has a 4xx status code
func (o *DeleteGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete group forbidden response has a 5xx status code
func (o *DeleteGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete group forbidden response a status code equal to that given
func (o *DeleteGroupForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteGroupForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupForbidden  %+v", 403, o.Payload)
}

func (o *DeleteGroupForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupForbidden  %+v", 403, o.Payload)
}

func (o *DeleteGroupForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupNotFound creates a DeleteGroupNotFound with default headers values
func NewDeleteGroupNotFound() *DeleteGroupNotFound {
	return &DeleteGroupNotFound{}
}

/*
DeleteGroupNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type DeleteGroupNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete group not found response has a 2xx status code
func (o *DeleteGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete group not found response has a 3xx status code
func (o *DeleteGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group not found response has a 4xx status code
func (o *DeleteGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete group not found response has a 5xx status code
func (o *DeleteGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete group not found response a status code equal to that given
func (o *DeleteGroupNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteGroupNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupNotFound  %+v", 404, o.Payload)
}

func (o *DeleteGroupNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupNotFound  %+v", 404, o.Payload)
}

func (o *DeleteGroupNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupRequestTimeout creates a DeleteGroupRequestTimeout with default headers values
func NewDeleteGroupRequestTimeout() *DeleteGroupRequestTimeout {
	return &DeleteGroupRequestTimeout{}
}

/*
DeleteGroupRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteGroupRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete group request timeout response has a 2xx status code
func (o *DeleteGroupRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete group request timeout response has a 3xx status code
func (o *DeleteGroupRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group request timeout response has a 4xx status code
func (o *DeleteGroupRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete group request timeout response has a 5xx status code
func (o *DeleteGroupRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this delete group request timeout response a status code equal to that given
func (o *DeleteGroupRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *DeleteGroupRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteGroupRequestTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteGroupRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteGroupRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupRequestEntityTooLarge creates a DeleteGroupRequestEntityTooLarge with default headers values
func NewDeleteGroupRequestEntityTooLarge() *DeleteGroupRequestEntityTooLarge {
	return &DeleteGroupRequestEntityTooLarge{}
}

/*
DeleteGroupRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type DeleteGroupRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete group request entity too large response has a 2xx status code
func (o *DeleteGroupRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete group request entity too large response has a 3xx status code
func (o *DeleteGroupRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group request entity too large response has a 4xx status code
func (o *DeleteGroupRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete group request entity too large response has a 5xx status code
func (o *DeleteGroupRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this delete group request entity too large response a status code equal to that given
func (o *DeleteGroupRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *DeleteGroupRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteGroupRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteGroupRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteGroupRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupUnsupportedMediaType creates a DeleteGroupUnsupportedMediaType with default headers values
func NewDeleteGroupUnsupportedMediaType() *DeleteGroupUnsupportedMediaType {
	return &DeleteGroupUnsupportedMediaType{}
}

/*
DeleteGroupUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteGroupUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete group unsupported media type response has a 2xx status code
func (o *DeleteGroupUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete group unsupported media type response has a 3xx status code
func (o *DeleteGroupUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group unsupported media type response has a 4xx status code
func (o *DeleteGroupUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete group unsupported media type response has a 5xx status code
func (o *DeleteGroupUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this delete group unsupported media type response a status code equal to that given
func (o *DeleteGroupUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *DeleteGroupUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteGroupUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteGroupUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteGroupUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupTooManyRequests creates a DeleteGroupTooManyRequests with default headers values
func NewDeleteGroupTooManyRequests() *DeleteGroupTooManyRequests {
	return &DeleteGroupTooManyRequests{}
}

/*
DeleteGroupTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteGroupTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete group too many requests response has a 2xx status code
func (o *DeleteGroupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete group too many requests response has a 3xx status code
func (o *DeleteGroupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group too many requests response has a 4xx status code
func (o *DeleteGroupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete group too many requests response has a 5xx status code
func (o *DeleteGroupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete group too many requests response a status code equal to that given
func (o *DeleteGroupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeleteGroupTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteGroupTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteGroupTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupInternalServerError creates a DeleteGroupInternalServerError with default headers values
func NewDeleteGroupInternalServerError() *DeleteGroupInternalServerError {
	return &DeleteGroupInternalServerError{}
}

/*
DeleteGroupInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteGroupInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete group internal server error response has a 2xx status code
func (o *DeleteGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete group internal server error response has a 3xx status code
func (o *DeleteGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group internal server error response has a 4xx status code
func (o *DeleteGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete group internal server error response has a 5xx status code
func (o *DeleteGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete group internal server error response a status code equal to that given
func (o *DeleteGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteGroupInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteGroupInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteGroupInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupServiceUnavailable creates a DeleteGroupServiceUnavailable with default headers values
func NewDeleteGroupServiceUnavailable() *DeleteGroupServiceUnavailable {
	return &DeleteGroupServiceUnavailable{}
}

/*
DeleteGroupServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteGroupServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete group service unavailable response has a 2xx status code
func (o *DeleteGroupServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete group service unavailable response has a 3xx status code
func (o *DeleteGroupServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group service unavailable response has a 4xx status code
func (o *DeleteGroupServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete group service unavailable response has a 5xx status code
func (o *DeleteGroupServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete group service unavailable response a status code equal to that given
func (o *DeleteGroupServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeleteGroupServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteGroupServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteGroupServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteGroupServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupGatewayTimeout creates a DeleteGroupGatewayTimeout with default headers values
func NewDeleteGroupGatewayTimeout() *DeleteGroupGatewayTimeout {
	return &DeleteGroupGatewayTimeout{}
}

/*
DeleteGroupGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type DeleteGroupGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete group gateway timeout response has a 2xx status code
func (o *DeleteGroupGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete group gateway timeout response has a 3xx status code
func (o *DeleteGroupGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group gateway timeout response has a 4xx status code
func (o *DeleteGroupGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete group gateway timeout response has a 5xx status code
func (o *DeleteGroupGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this delete group gateway timeout response a status code equal to that given
func (o *DeleteGroupGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *DeleteGroupGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteGroupGatewayTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteGroupGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteGroupGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupDefault creates a DeleteGroupDefault with default headers values
func NewDeleteGroupDefault(code int) *DeleteGroupDefault {
	return &DeleteGroupDefault{
		_statusCode: code,
	}
}

/*
DeleteGroupDefault describes a response with status code -1, with default header values.

successful operation
*/
type DeleteGroupDefault struct {
	_statusCode int
}

// Code gets the status code for the delete group default response
func (o *DeleteGroupDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this delete group default response has a 2xx status code
func (o *DeleteGroupDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete group default response has a 3xx status code
func (o *DeleteGroupDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete group default response has a 4xx status code
func (o *DeleteGroupDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete group default response has a 5xx status code
func (o *DeleteGroupDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete group default response a status code equal to that given
func (o *DeleteGroupDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *DeleteGroupDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroup default ", o._statusCode)
}

func (o *DeleteGroupDefault) String() string {
	return fmt.Sprintf("[DELETE /api/v2/groups/{groupId}][%d] deleteGroup default ", o._statusCode)
}

func (o *DeleteGroupDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

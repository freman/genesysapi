// Code generated by go-swagger; DO NOT EDIT.

package geolocation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetUserGeolocationReader is a Reader for the GetUserGeolocation structure.
type GetUserGeolocationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserGeolocationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserGeolocationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserGeolocationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetUserGeolocationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserGeolocationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserGeolocationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetUserGeolocationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetUserGeolocationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetUserGeolocationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUserGeolocationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetUserGeolocationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetUserGeolocationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUserGeolocationOK creates a GetUserGeolocationOK with default headers values
func NewGetUserGeolocationOK() *GetUserGeolocationOK {
	return &GetUserGeolocationOK{}
}

/*GetUserGeolocationOK handles this case with default header values.

successful operation
*/
type GetUserGeolocationOK struct {
	Payload *models.Geolocation
}

func (o *GetUserGeolocationOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/geolocations/{clientId}][%d] getUserGeolocationOK  %+v", 200, o.Payload)
}

func (o *GetUserGeolocationOK) GetPayload() *models.Geolocation {
	return o.Payload
}

func (o *GetUserGeolocationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Geolocation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGeolocationBadRequest creates a GetUserGeolocationBadRequest with default headers values
func NewGetUserGeolocationBadRequest() *GetUserGeolocationBadRequest {
	return &GetUserGeolocationBadRequest{}
}

/*GetUserGeolocationBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetUserGeolocationBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetUserGeolocationBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/geolocations/{clientId}][%d] getUserGeolocationBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserGeolocationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserGeolocationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGeolocationUnauthorized creates a GetUserGeolocationUnauthorized with default headers values
func NewGetUserGeolocationUnauthorized() *GetUserGeolocationUnauthorized {
	return &GetUserGeolocationUnauthorized{}
}

/*GetUserGeolocationUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetUserGeolocationUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetUserGeolocationUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/geolocations/{clientId}][%d] getUserGeolocationUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserGeolocationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserGeolocationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGeolocationForbidden creates a GetUserGeolocationForbidden with default headers values
func NewGetUserGeolocationForbidden() *GetUserGeolocationForbidden {
	return &GetUserGeolocationForbidden{}
}

/*GetUserGeolocationForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetUserGeolocationForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetUserGeolocationForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/geolocations/{clientId}][%d] getUserGeolocationForbidden  %+v", 403, o.Payload)
}

func (o *GetUserGeolocationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserGeolocationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGeolocationNotFound creates a GetUserGeolocationNotFound with default headers values
func NewGetUserGeolocationNotFound() *GetUserGeolocationNotFound {
	return &GetUserGeolocationNotFound{}
}

/*GetUserGeolocationNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetUserGeolocationNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetUserGeolocationNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/geolocations/{clientId}][%d] getUserGeolocationNotFound  %+v", 404, o.Payload)
}

func (o *GetUserGeolocationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserGeolocationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGeolocationRequestEntityTooLarge creates a GetUserGeolocationRequestEntityTooLarge with default headers values
func NewGetUserGeolocationRequestEntityTooLarge() *GetUserGeolocationRequestEntityTooLarge {
	return &GetUserGeolocationRequestEntityTooLarge{}
}

/*GetUserGeolocationRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetUserGeolocationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetUserGeolocationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/geolocations/{clientId}][%d] getUserGeolocationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetUserGeolocationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserGeolocationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGeolocationUnsupportedMediaType creates a GetUserGeolocationUnsupportedMediaType with default headers values
func NewGetUserGeolocationUnsupportedMediaType() *GetUserGeolocationUnsupportedMediaType {
	return &GetUserGeolocationUnsupportedMediaType{}
}

/*GetUserGeolocationUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetUserGeolocationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetUserGeolocationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/geolocations/{clientId}][%d] getUserGeolocationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetUserGeolocationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserGeolocationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGeolocationTooManyRequests creates a GetUserGeolocationTooManyRequests with default headers values
func NewGetUserGeolocationTooManyRequests() *GetUserGeolocationTooManyRequests {
	return &GetUserGeolocationTooManyRequests{}
}

/*GetUserGeolocationTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type GetUserGeolocationTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetUserGeolocationTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/geolocations/{clientId}][%d] getUserGeolocationTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetUserGeolocationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserGeolocationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGeolocationInternalServerError creates a GetUserGeolocationInternalServerError with default headers values
func NewGetUserGeolocationInternalServerError() *GetUserGeolocationInternalServerError {
	return &GetUserGeolocationInternalServerError{}
}

/*GetUserGeolocationInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetUserGeolocationInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetUserGeolocationInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/geolocations/{clientId}][%d] getUserGeolocationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUserGeolocationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserGeolocationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGeolocationServiceUnavailable creates a GetUserGeolocationServiceUnavailable with default headers values
func NewGetUserGeolocationServiceUnavailable() *GetUserGeolocationServiceUnavailable {
	return &GetUserGeolocationServiceUnavailable{}
}

/*GetUserGeolocationServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetUserGeolocationServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetUserGeolocationServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/geolocations/{clientId}][%d] getUserGeolocationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetUserGeolocationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserGeolocationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGeolocationGatewayTimeout creates a GetUserGeolocationGatewayTimeout with default headers values
func NewGetUserGeolocationGatewayTimeout() *GetUserGeolocationGatewayTimeout {
	return &GetUserGeolocationGatewayTimeout{}
}

/*GetUserGeolocationGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetUserGeolocationGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetUserGeolocationGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/geolocations/{clientId}][%d] getUserGeolocationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetUserGeolocationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserGeolocationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

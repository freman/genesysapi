// Code generated by go-swagger; DO NOT EDIT.

package geolocation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchGeolocationsSettingsReader is a Reader for the PatchGeolocationsSettings structure.
type PatchGeolocationsSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchGeolocationsSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchGeolocationsSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchGeolocationsSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchGeolocationsSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchGeolocationsSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchGeolocationsSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchGeolocationsSettingsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchGeolocationsSettingsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchGeolocationsSettingsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchGeolocationsSettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchGeolocationsSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchGeolocationsSettingsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchGeolocationsSettingsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchGeolocationsSettingsOK creates a PatchGeolocationsSettingsOK with default headers values
func NewPatchGeolocationsSettingsOK() *PatchGeolocationsSettingsOK {
	return &PatchGeolocationsSettingsOK{}
}

/*
PatchGeolocationsSettingsOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchGeolocationsSettingsOK struct {
	Payload *models.GeolocationSettings
}

// IsSuccess returns true when this patch geolocations settings o k response has a 2xx status code
func (o *PatchGeolocationsSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch geolocations settings o k response has a 3xx status code
func (o *PatchGeolocationsSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch geolocations settings o k response has a 4xx status code
func (o *PatchGeolocationsSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch geolocations settings o k response has a 5xx status code
func (o *PatchGeolocationsSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch geolocations settings o k response a status code equal to that given
func (o *PatchGeolocationsSettingsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchGeolocationsSettingsOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsOK  %+v", 200, o.Payload)
}

func (o *PatchGeolocationsSettingsOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsOK  %+v", 200, o.Payload)
}

func (o *PatchGeolocationsSettingsOK) GetPayload() *models.GeolocationSettings {
	return o.Payload
}

func (o *PatchGeolocationsSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeolocationSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchGeolocationsSettingsBadRequest creates a PatchGeolocationsSettingsBadRequest with default headers values
func NewPatchGeolocationsSettingsBadRequest() *PatchGeolocationsSettingsBadRequest {
	return &PatchGeolocationsSettingsBadRequest{}
}

/*
PatchGeolocationsSettingsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchGeolocationsSettingsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch geolocations settings bad request response has a 2xx status code
func (o *PatchGeolocationsSettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch geolocations settings bad request response has a 3xx status code
func (o *PatchGeolocationsSettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch geolocations settings bad request response has a 4xx status code
func (o *PatchGeolocationsSettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch geolocations settings bad request response has a 5xx status code
func (o *PatchGeolocationsSettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch geolocations settings bad request response a status code equal to that given
func (o *PatchGeolocationsSettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchGeolocationsSettingsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchGeolocationsSettingsBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchGeolocationsSettingsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchGeolocationsSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchGeolocationsSettingsUnauthorized creates a PatchGeolocationsSettingsUnauthorized with default headers values
func NewPatchGeolocationsSettingsUnauthorized() *PatchGeolocationsSettingsUnauthorized {
	return &PatchGeolocationsSettingsUnauthorized{}
}

/*
PatchGeolocationsSettingsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchGeolocationsSettingsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch geolocations settings unauthorized response has a 2xx status code
func (o *PatchGeolocationsSettingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch geolocations settings unauthorized response has a 3xx status code
func (o *PatchGeolocationsSettingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch geolocations settings unauthorized response has a 4xx status code
func (o *PatchGeolocationsSettingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch geolocations settings unauthorized response has a 5xx status code
func (o *PatchGeolocationsSettingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch geolocations settings unauthorized response a status code equal to that given
func (o *PatchGeolocationsSettingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchGeolocationsSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchGeolocationsSettingsUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchGeolocationsSettingsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchGeolocationsSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchGeolocationsSettingsForbidden creates a PatchGeolocationsSettingsForbidden with default headers values
func NewPatchGeolocationsSettingsForbidden() *PatchGeolocationsSettingsForbidden {
	return &PatchGeolocationsSettingsForbidden{}
}

/*
PatchGeolocationsSettingsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchGeolocationsSettingsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch geolocations settings forbidden response has a 2xx status code
func (o *PatchGeolocationsSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch geolocations settings forbidden response has a 3xx status code
func (o *PatchGeolocationsSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch geolocations settings forbidden response has a 4xx status code
func (o *PatchGeolocationsSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch geolocations settings forbidden response has a 5xx status code
func (o *PatchGeolocationsSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch geolocations settings forbidden response a status code equal to that given
func (o *PatchGeolocationsSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchGeolocationsSettingsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PatchGeolocationsSettingsForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PatchGeolocationsSettingsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchGeolocationsSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchGeolocationsSettingsNotFound creates a PatchGeolocationsSettingsNotFound with default headers values
func NewPatchGeolocationsSettingsNotFound() *PatchGeolocationsSettingsNotFound {
	return &PatchGeolocationsSettingsNotFound{}
}

/*
PatchGeolocationsSettingsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchGeolocationsSettingsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch geolocations settings not found response has a 2xx status code
func (o *PatchGeolocationsSettingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch geolocations settings not found response has a 3xx status code
func (o *PatchGeolocationsSettingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch geolocations settings not found response has a 4xx status code
func (o *PatchGeolocationsSettingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch geolocations settings not found response has a 5xx status code
func (o *PatchGeolocationsSettingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch geolocations settings not found response a status code equal to that given
func (o *PatchGeolocationsSettingsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchGeolocationsSettingsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PatchGeolocationsSettingsNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PatchGeolocationsSettingsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchGeolocationsSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchGeolocationsSettingsRequestTimeout creates a PatchGeolocationsSettingsRequestTimeout with default headers values
func NewPatchGeolocationsSettingsRequestTimeout() *PatchGeolocationsSettingsRequestTimeout {
	return &PatchGeolocationsSettingsRequestTimeout{}
}

/*
PatchGeolocationsSettingsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchGeolocationsSettingsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch geolocations settings request timeout response has a 2xx status code
func (o *PatchGeolocationsSettingsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch geolocations settings request timeout response has a 3xx status code
func (o *PatchGeolocationsSettingsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch geolocations settings request timeout response has a 4xx status code
func (o *PatchGeolocationsSettingsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch geolocations settings request timeout response has a 5xx status code
func (o *PatchGeolocationsSettingsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch geolocations settings request timeout response a status code equal to that given
func (o *PatchGeolocationsSettingsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchGeolocationsSettingsRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchGeolocationsSettingsRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchGeolocationsSettingsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchGeolocationsSettingsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchGeolocationsSettingsRequestEntityTooLarge creates a PatchGeolocationsSettingsRequestEntityTooLarge with default headers values
func NewPatchGeolocationsSettingsRequestEntityTooLarge() *PatchGeolocationsSettingsRequestEntityTooLarge {
	return &PatchGeolocationsSettingsRequestEntityTooLarge{}
}

/*
PatchGeolocationsSettingsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchGeolocationsSettingsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch geolocations settings request entity too large response has a 2xx status code
func (o *PatchGeolocationsSettingsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch geolocations settings request entity too large response has a 3xx status code
func (o *PatchGeolocationsSettingsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch geolocations settings request entity too large response has a 4xx status code
func (o *PatchGeolocationsSettingsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch geolocations settings request entity too large response has a 5xx status code
func (o *PatchGeolocationsSettingsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch geolocations settings request entity too large response a status code equal to that given
func (o *PatchGeolocationsSettingsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchGeolocationsSettingsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchGeolocationsSettingsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchGeolocationsSettingsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchGeolocationsSettingsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchGeolocationsSettingsUnsupportedMediaType creates a PatchGeolocationsSettingsUnsupportedMediaType with default headers values
func NewPatchGeolocationsSettingsUnsupportedMediaType() *PatchGeolocationsSettingsUnsupportedMediaType {
	return &PatchGeolocationsSettingsUnsupportedMediaType{}
}

/*
PatchGeolocationsSettingsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchGeolocationsSettingsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch geolocations settings unsupported media type response has a 2xx status code
func (o *PatchGeolocationsSettingsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch geolocations settings unsupported media type response has a 3xx status code
func (o *PatchGeolocationsSettingsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch geolocations settings unsupported media type response has a 4xx status code
func (o *PatchGeolocationsSettingsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch geolocations settings unsupported media type response has a 5xx status code
func (o *PatchGeolocationsSettingsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch geolocations settings unsupported media type response a status code equal to that given
func (o *PatchGeolocationsSettingsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchGeolocationsSettingsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchGeolocationsSettingsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchGeolocationsSettingsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchGeolocationsSettingsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchGeolocationsSettingsTooManyRequests creates a PatchGeolocationsSettingsTooManyRequests with default headers values
func NewPatchGeolocationsSettingsTooManyRequests() *PatchGeolocationsSettingsTooManyRequests {
	return &PatchGeolocationsSettingsTooManyRequests{}
}

/*
PatchGeolocationsSettingsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchGeolocationsSettingsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch geolocations settings too many requests response has a 2xx status code
func (o *PatchGeolocationsSettingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch geolocations settings too many requests response has a 3xx status code
func (o *PatchGeolocationsSettingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch geolocations settings too many requests response has a 4xx status code
func (o *PatchGeolocationsSettingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch geolocations settings too many requests response has a 5xx status code
func (o *PatchGeolocationsSettingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch geolocations settings too many requests response a status code equal to that given
func (o *PatchGeolocationsSettingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchGeolocationsSettingsTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchGeolocationsSettingsTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchGeolocationsSettingsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchGeolocationsSettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchGeolocationsSettingsInternalServerError creates a PatchGeolocationsSettingsInternalServerError with default headers values
func NewPatchGeolocationsSettingsInternalServerError() *PatchGeolocationsSettingsInternalServerError {
	return &PatchGeolocationsSettingsInternalServerError{}
}

/*
PatchGeolocationsSettingsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchGeolocationsSettingsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch geolocations settings internal server error response has a 2xx status code
func (o *PatchGeolocationsSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch geolocations settings internal server error response has a 3xx status code
func (o *PatchGeolocationsSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch geolocations settings internal server error response has a 4xx status code
func (o *PatchGeolocationsSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch geolocations settings internal server error response has a 5xx status code
func (o *PatchGeolocationsSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch geolocations settings internal server error response a status code equal to that given
func (o *PatchGeolocationsSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchGeolocationsSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchGeolocationsSettingsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchGeolocationsSettingsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchGeolocationsSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchGeolocationsSettingsServiceUnavailable creates a PatchGeolocationsSettingsServiceUnavailable with default headers values
func NewPatchGeolocationsSettingsServiceUnavailable() *PatchGeolocationsSettingsServiceUnavailable {
	return &PatchGeolocationsSettingsServiceUnavailable{}
}

/*
PatchGeolocationsSettingsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchGeolocationsSettingsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch geolocations settings service unavailable response has a 2xx status code
func (o *PatchGeolocationsSettingsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch geolocations settings service unavailable response has a 3xx status code
func (o *PatchGeolocationsSettingsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch geolocations settings service unavailable response has a 4xx status code
func (o *PatchGeolocationsSettingsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch geolocations settings service unavailable response has a 5xx status code
func (o *PatchGeolocationsSettingsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch geolocations settings service unavailable response a status code equal to that given
func (o *PatchGeolocationsSettingsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchGeolocationsSettingsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchGeolocationsSettingsServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchGeolocationsSettingsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchGeolocationsSettingsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchGeolocationsSettingsGatewayTimeout creates a PatchGeolocationsSettingsGatewayTimeout with default headers values
func NewPatchGeolocationsSettingsGatewayTimeout() *PatchGeolocationsSettingsGatewayTimeout {
	return &PatchGeolocationsSettingsGatewayTimeout{}
}

/*
PatchGeolocationsSettingsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchGeolocationsSettingsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch geolocations settings gateway timeout response has a 2xx status code
func (o *PatchGeolocationsSettingsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch geolocations settings gateway timeout response has a 3xx status code
func (o *PatchGeolocationsSettingsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch geolocations settings gateway timeout response has a 4xx status code
func (o *PatchGeolocationsSettingsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch geolocations settings gateway timeout response has a 5xx status code
func (o *PatchGeolocationsSettingsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch geolocations settings gateway timeout response a status code equal to that given
func (o *PatchGeolocationsSettingsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchGeolocationsSettingsGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchGeolocationsSettingsGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/geolocations/settings][%d] patchGeolocationsSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchGeolocationsSettingsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchGeolocationsSettingsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

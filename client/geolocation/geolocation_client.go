// Code generated by go-swagger; DO NOT EDIT.

package geolocation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the geolocation client
type API interface {
	/*
	   GetGeolocationsSettings gets a organization s geolocation settings
	*/
	GetGeolocationsSettings(ctx context.Context, params *GetGeolocationsSettingsParams) (*GetGeolocationsSettingsOK, error)
	/*
	   GetUserGeolocation gets a user s geolocation
	*/
	GetUserGeolocation(ctx context.Context, params *GetUserGeolocationParams) (*GetUserGeolocationOK, error)
	/*
	   PatchGeolocationsSettings patches a organization s geolocation settings
	*/
	PatchGeolocationsSettings(ctx context.Context, params *PatchGeolocationsSettingsParams) (*PatchGeolocationsSettingsOK, error)
	/*
	   PatchUserGeolocation patches a user s geolocation
	   The geolocation object can be patched one of three ways. Option 1: Set the 'primary' property to true. This will set the client as the user's primary geolocation source.  Option 2: Provide the 'latitude' and 'longitude' values.  This will enqueue an asynchronous update of the 'city', 'region', and 'country', generating a notification. A subsequent GET operation will include the new values for 'city', 'region' and 'country'.  Option 3:  Provide the 'city', 'region', 'country' values.  Option 1 can be combined with Option 2 or Option 3.  For example, update the client as primary and provide latitude and longitude values.
	*/
	PatchUserGeolocation(ctx context.Context, params *PatchUserGeolocationParams) (*PatchUserGeolocationOK, error)
}

// New creates a new geolocation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for geolocation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetGeolocationsSettings gets a organization s geolocation settings
*/
func (a *Client) GetGeolocationsSettings(ctx context.Context, params *GetGeolocationsSettingsParams) (*GetGeolocationsSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGeolocationsSettings",
		Method:             "GET",
		PathPattern:        "/api/v2/geolocations/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGeolocationsSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGeolocationsSettingsOK), nil

}

/*
GetUserGeolocation gets a user s geolocation
*/
func (a *Client) GetUserGeolocation(ctx context.Context, params *GetUserGeolocationParams) (*GetUserGeolocationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserGeolocation",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/geolocations/{clientId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserGeolocationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserGeolocationOK), nil

}

/*
PatchGeolocationsSettings patches a organization s geolocation settings
*/
func (a *Client) PatchGeolocationsSettings(ctx context.Context, params *PatchGeolocationsSettingsParams) (*PatchGeolocationsSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchGeolocationsSettings",
		Method:             "PATCH",
		PathPattern:        "/api/v2/geolocations/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchGeolocationsSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchGeolocationsSettingsOK), nil

}

/*
PatchUserGeolocation patches a user s geolocation

The geolocation object can be patched one of three ways. Option 1: Set the 'primary' property to true. This will set the client as the user's primary geolocation source.  Option 2: Provide the 'latitude' and 'longitude' values.  This will enqueue an asynchronous update of the 'city', 'region', and 'country', generating a notification. A subsequent GET operation will include the new values for 'city', 'region' and 'country'.  Option 3:  Provide the 'city', 'region', 'country' values.  Option 1 can be combined with Option 2 or Option 3.  For example, update the client as primary and provide latitude and longitude values.
*/
func (a *Client) PatchUserGeolocation(ctx context.Context, params *PatchUserGeolocationParams) (*PatchUserGeolocationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUserGeolocation",
		Method:             "PATCH",
		PathPattern:        "/api/v2/users/{userId}/geolocations/{clientId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUserGeolocationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUserGeolocationOK), nil

}

// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostSearchReader is a Reader for the PostSearch structure.
type PostSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostSearchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostSearchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostSearchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostSearchRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostSearchRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostSearchUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostSearchTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostSearchServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostSearchGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostSearchOK creates a PostSearchOK with default headers values
func NewPostSearchOK() *PostSearchOK {
	return &PostSearchOK{}
}

/*PostSearchOK handles this case with default header values.

successful operation
*/
type PostSearchOK struct {
	Payload *models.JSONNodeSearchResponse
}

func (o *PostSearchOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/search][%d] postSearchOK  %+v", 200, o.Payload)
}

func (o *PostSearchOK) GetPayload() *models.JSONNodeSearchResponse {
	return o.Payload
}

func (o *PostSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JSONNodeSearchResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSearchBadRequest creates a PostSearchBadRequest with default headers values
func NewPostSearchBadRequest() *PostSearchBadRequest {
	return &PostSearchBadRequest{}
}

/*PostSearchBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostSearchBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostSearchBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/search][%d] postSearchBadRequest  %+v", 400, o.Payload)
}

func (o *PostSearchBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSearchUnauthorized creates a PostSearchUnauthorized with default headers values
func NewPostSearchUnauthorized() *PostSearchUnauthorized {
	return &PostSearchUnauthorized{}
}

/*PostSearchUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostSearchUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostSearchUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/search][%d] postSearchUnauthorized  %+v", 401, o.Payload)
}

func (o *PostSearchUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSearchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSearchForbidden creates a PostSearchForbidden with default headers values
func NewPostSearchForbidden() *PostSearchForbidden {
	return &PostSearchForbidden{}
}

/*PostSearchForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostSearchForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostSearchForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/search][%d] postSearchForbidden  %+v", 403, o.Payload)
}

func (o *PostSearchForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSearchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSearchNotFound creates a PostSearchNotFound with default headers values
func NewPostSearchNotFound() *PostSearchNotFound {
	return &PostSearchNotFound{}
}

/*PostSearchNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostSearchNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostSearchNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/search][%d] postSearchNotFound  %+v", 404, o.Payload)
}

func (o *PostSearchNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSearchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSearchRequestTimeout creates a PostSearchRequestTimeout with default headers values
func NewPostSearchRequestTimeout() *PostSearchRequestTimeout {
	return &PostSearchRequestTimeout{}
}

/*PostSearchRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostSearchRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostSearchRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/search][%d] postSearchRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostSearchRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSearchRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSearchRequestEntityTooLarge creates a PostSearchRequestEntityTooLarge with default headers values
func NewPostSearchRequestEntityTooLarge() *PostSearchRequestEntityTooLarge {
	return &PostSearchRequestEntityTooLarge{}
}

/*PostSearchRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostSearchRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostSearchRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/search][%d] postSearchRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostSearchRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSearchRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSearchUnsupportedMediaType creates a PostSearchUnsupportedMediaType with default headers values
func NewPostSearchUnsupportedMediaType() *PostSearchUnsupportedMediaType {
	return &PostSearchUnsupportedMediaType{}
}

/*PostSearchUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostSearchUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostSearchUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/search][%d] postSearchUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostSearchUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSearchUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSearchTooManyRequests creates a PostSearchTooManyRequests with default headers values
func NewPostSearchTooManyRequests() *PostSearchTooManyRequests {
	return &PostSearchTooManyRequests{}
}

/*PostSearchTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostSearchTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostSearchTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/search][%d] postSearchTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostSearchTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSearchTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSearchInternalServerError creates a PostSearchInternalServerError with default headers values
func NewPostSearchInternalServerError() *PostSearchInternalServerError {
	return &PostSearchInternalServerError{}
}

/*PostSearchInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostSearchInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostSearchInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/search][%d] postSearchInternalServerError  %+v", 500, o.Payload)
}

func (o *PostSearchInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSearchServiceUnavailable creates a PostSearchServiceUnavailable with default headers values
func NewPostSearchServiceUnavailable() *PostSearchServiceUnavailable {
	return &PostSearchServiceUnavailable{}
}

/*PostSearchServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostSearchServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostSearchServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/search][%d] postSearchServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostSearchServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSearchServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSearchGatewayTimeout creates a PostSearchGatewayTimeout with default headers values
func NewPostSearchGatewayTimeout() *PostSearchGatewayTimeout {
	return &PostSearchGatewayTimeout{}
}

/*PostSearchGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostSearchGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostSearchGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/search][%d] postSearchGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostSearchGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSearchGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

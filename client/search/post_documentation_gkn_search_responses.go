// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostDocumentationGknSearchReader is a Reader for the PostDocumentationGknSearch structure.
type PostDocumentationGknSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostDocumentationGknSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostDocumentationGknSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostDocumentationGknSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostDocumentationGknSearchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostDocumentationGknSearchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostDocumentationGknSearchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostDocumentationGknSearchRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostDocumentationGknSearchRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostDocumentationGknSearchUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostDocumentationGknSearchTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostDocumentationGknSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostDocumentationGknSearchServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostDocumentationGknSearchGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostDocumentationGknSearchOK creates a PostDocumentationGknSearchOK with default headers values
func NewPostDocumentationGknSearchOK() *PostDocumentationGknSearchOK {
	return &PostDocumentationGknSearchOK{}
}

/*
PostDocumentationGknSearchOK describes a response with status code 200, with default header values.

successful operation
*/
type PostDocumentationGknSearchOK struct {
	Payload *models.GKNDocumentationSearchResponse
}

// IsSuccess returns true when this post documentation gkn search o k response has a 2xx status code
func (o *PostDocumentationGknSearchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post documentation gkn search o k response has a 3xx status code
func (o *PostDocumentationGknSearchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post documentation gkn search o k response has a 4xx status code
func (o *PostDocumentationGknSearchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post documentation gkn search o k response has a 5xx status code
func (o *PostDocumentationGknSearchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post documentation gkn search o k response a status code equal to that given
func (o *PostDocumentationGknSearchOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostDocumentationGknSearchOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchOK  %+v", 200, o.Payload)
}

func (o *PostDocumentationGknSearchOK) String() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchOK  %+v", 200, o.Payload)
}

func (o *PostDocumentationGknSearchOK) GetPayload() *models.GKNDocumentationSearchResponse {
	return o.Payload
}

func (o *PostDocumentationGknSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GKNDocumentationSearchResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDocumentationGknSearchBadRequest creates a PostDocumentationGknSearchBadRequest with default headers values
func NewPostDocumentationGknSearchBadRequest() *PostDocumentationGknSearchBadRequest {
	return &PostDocumentationGknSearchBadRequest{}
}

/*
PostDocumentationGknSearchBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostDocumentationGknSearchBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post documentation gkn search bad request response has a 2xx status code
func (o *PostDocumentationGknSearchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post documentation gkn search bad request response has a 3xx status code
func (o *PostDocumentationGknSearchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post documentation gkn search bad request response has a 4xx status code
func (o *PostDocumentationGknSearchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post documentation gkn search bad request response has a 5xx status code
func (o *PostDocumentationGknSearchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post documentation gkn search bad request response a status code equal to that given
func (o *PostDocumentationGknSearchBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostDocumentationGknSearchBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchBadRequest  %+v", 400, o.Payload)
}

func (o *PostDocumentationGknSearchBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchBadRequest  %+v", 400, o.Payload)
}

func (o *PostDocumentationGknSearchBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostDocumentationGknSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDocumentationGknSearchUnauthorized creates a PostDocumentationGknSearchUnauthorized with default headers values
func NewPostDocumentationGknSearchUnauthorized() *PostDocumentationGknSearchUnauthorized {
	return &PostDocumentationGknSearchUnauthorized{}
}

/*
PostDocumentationGknSearchUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostDocumentationGknSearchUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post documentation gkn search unauthorized response has a 2xx status code
func (o *PostDocumentationGknSearchUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post documentation gkn search unauthorized response has a 3xx status code
func (o *PostDocumentationGknSearchUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post documentation gkn search unauthorized response has a 4xx status code
func (o *PostDocumentationGknSearchUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post documentation gkn search unauthorized response has a 5xx status code
func (o *PostDocumentationGknSearchUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post documentation gkn search unauthorized response a status code equal to that given
func (o *PostDocumentationGknSearchUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostDocumentationGknSearchUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchUnauthorized  %+v", 401, o.Payload)
}

func (o *PostDocumentationGknSearchUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchUnauthorized  %+v", 401, o.Payload)
}

func (o *PostDocumentationGknSearchUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostDocumentationGknSearchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDocumentationGknSearchForbidden creates a PostDocumentationGknSearchForbidden with default headers values
func NewPostDocumentationGknSearchForbidden() *PostDocumentationGknSearchForbidden {
	return &PostDocumentationGknSearchForbidden{}
}

/*
PostDocumentationGknSearchForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostDocumentationGknSearchForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post documentation gkn search forbidden response has a 2xx status code
func (o *PostDocumentationGknSearchForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post documentation gkn search forbidden response has a 3xx status code
func (o *PostDocumentationGknSearchForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post documentation gkn search forbidden response has a 4xx status code
func (o *PostDocumentationGknSearchForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post documentation gkn search forbidden response has a 5xx status code
func (o *PostDocumentationGknSearchForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post documentation gkn search forbidden response a status code equal to that given
func (o *PostDocumentationGknSearchForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostDocumentationGknSearchForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchForbidden  %+v", 403, o.Payload)
}

func (o *PostDocumentationGknSearchForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchForbidden  %+v", 403, o.Payload)
}

func (o *PostDocumentationGknSearchForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostDocumentationGknSearchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDocumentationGknSearchNotFound creates a PostDocumentationGknSearchNotFound with default headers values
func NewPostDocumentationGknSearchNotFound() *PostDocumentationGknSearchNotFound {
	return &PostDocumentationGknSearchNotFound{}
}

/*
PostDocumentationGknSearchNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostDocumentationGknSearchNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post documentation gkn search not found response has a 2xx status code
func (o *PostDocumentationGknSearchNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post documentation gkn search not found response has a 3xx status code
func (o *PostDocumentationGknSearchNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post documentation gkn search not found response has a 4xx status code
func (o *PostDocumentationGknSearchNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post documentation gkn search not found response has a 5xx status code
func (o *PostDocumentationGknSearchNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post documentation gkn search not found response a status code equal to that given
func (o *PostDocumentationGknSearchNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostDocumentationGknSearchNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchNotFound  %+v", 404, o.Payload)
}

func (o *PostDocumentationGknSearchNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchNotFound  %+v", 404, o.Payload)
}

func (o *PostDocumentationGknSearchNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostDocumentationGknSearchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDocumentationGknSearchRequestTimeout creates a PostDocumentationGknSearchRequestTimeout with default headers values
func NewPostDocumentationGknSearchRequestTimeout() *PostDocumentationGknSearchRequestTimeout {
	return &PostDocumentationGknSearchRequestTimeout{}
}

/*
PostDocumentationGknSearchRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostDocumentationGknSearchRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post documentation gkn search request timeout response has a 2xx status code
func (o *PostDocumentationGknSearchRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post documentation gkn search request timeout response has a 3xx status code
func (o *PostDocumentationGknSearchRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post documentation gkn search request timeout response has a 4xx status code
func (o *PostDocumentationGknSearchRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post documentation gkn search request timeout response has a 5xx status code
func (o *PostDocumentationGknSearchRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post documentation gkn search request timeout response a status code equal to that given
func (o *PostDocumentationGknSearchRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostDocumentationGknSearchRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostDocumentationGknSearchRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostDocumentationGknSearchRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostDocumentationGknSearchRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDocumentationGknSearchRequestEntityTooLarge creates a PostDocumentationGknSearchRequestEntityTooLarge with default headers values
func NewPostDocumentationGknSearchRequestEntityTooLarge() *PostDocumentationGknSearchRequestEntityTooLarge {
	return &PostDocumentationGknSearchRequestEntityTooLarge{}
}

/*
PostDocumentationGknSearchRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PostDocumentationGknSearchRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post documentation gkn search request entity too large response has a 2xx status code
func (o *PostDocumentationGknSearchRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post documentation gkn search request entity too large response has a 3xx status code
func (o *PostDocumentationGknSearchRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post documentation gkn search request entity too large response has a 4xx status code
func (o *PostDocumentationGknSearchRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post documentation gkn search request entity too large response has a 5xx status code
func (o *PostDocumentationGknSearchRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post documentation gkn search request entity too large response a status code equal to that given
func (o *PostDocumentationGknSearchRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostDocumentationGknSearchRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostDocumentationGknSearchRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostDocumentationGknSearchRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostDocumentationGknSearchRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDocumentationGknSearchUnsupportedMediaType creates a PostDocumentationGknSearchUnsupportedMediaType with default headers values
func NewPostDocumentationGknSearchUnsupportedMediaType() *PostDocumentationGknSearchUnsupportedMediaType {
	return &PostDocumentationGknSearchUnsupportedMediaType{}
}

/*
PostDocumentationGknSearchUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostDocumentationGknSearchUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post documentation gkn search unsupported media type response has a 2xx status code
func (o *PostDocumentationGknSearchUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post documentation gkn search unsupported media type response has a 3xx status code
func (o *PostDocumentationGknSearchUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post documentation gkn search unsupported media type response has a 4xx status code
func (o *PostDocumentationGknSearchUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post documentation gkn search unsupported media type response has a 5xx status code
func (o *PostDocumentationGknSearchUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post documentation gkn search unsupported media type response a status code equal to that given
func (o *PostDocumentationGknSearchUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostDocumentationGknSearchUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostDocumentationGknSearchUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostDocumentationGknSearchUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostDocumentationGknSearchUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDocumentationGknSearchTooManyRequests creates a PostDocumentationGknSearchTooManyRequests with default headers values
func NewPostDocumentationGknSearchTooManyRequests() *PostDocumentationGknSearchTooManyRequests {
	return &PostDocumentationGknSearchTooManyRequests{}
}

/*
PostDocumentationGknSearchTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostDocumentationGknSearchTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post documentation gkn search too many requests response has a 2xx status code
func (o *PostDocumentationGknSearchTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post documentation gkn search too many requests response has a 3xx status code
func (o *PostDocumentationGknSearchTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post documentation gkn search too many requests response has a 4xx status code
func (o *PostDocumentationGknSearchTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post documentation gkn search too many requests response has a 5xx status code
func (o *PostDocumentationGknSearchTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post documentation gkn search too many requests response a status code equal to that given
func (o *PostDocumentationGknSearchTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostDocumentationGknSearchTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostDocumentationGknSearchTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostDocumentationGknSearchTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostDocumentationGknSearchTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDocumentationGknSearchInternalServerError creates a PostDocumentationGknSearchInternalServerError with default headers values
func NewPostDocumentationGknSearchInternalServerError() *PostDocumentationGknSearchInternalServerError {
	return &PostDocumentationGknSearchInternalServerError{}
}

/*
PostDocumentationGknSearchInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostDocumentationGknSearchInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post documentation gkn search internal server error response has a 2xx status code
func (o *PostDocumentationGknSearchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post documentation gkn search internal server error response has a 3xx status code
func (o *PostDocumentationGknSearchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post documentation gkn search internal server error response has a 4xx status code
func (o *PostDocumentationGknSearchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post documentation gkn search internal server error response has a 5xx status code
func (o *PostDocumentationGknSearchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post documentation gkn search internal server error response a status code equal to that given
func (o *PostDocumentationGknSearchInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostDocumentationGknSearchInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchInternalServerError  %+v", 500, o.Payload)
}

func (o *PostDocumentationGknSearchInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchInternalServerError  %+v", 500, o.Payload)
}

func (o *PostDocumentationGknSearchInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostDocumentationGknSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDocumentationGknSearchServiceUnavailable creates a PostDocumentationGknSearchServiceUnavailable with default headers values
func NewPostDocumentationGknSearchServiceUnavailable() *PostDocumentationGknSearchServiceUnavailable {
	return &PostDocumentationGknSearchServiceUnavailable{}
}

/*
PostDocumentationGknSearchServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostDocumentationGknSearchServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post documentation gkn search service unavailable response has a 2xx status code
func (o *PostDocumentationGknSearchServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post documentation gkn search service unavailable response has a 3xx status code
func (o *PostDocumentationGknSearchServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post documentation gkn search service unavailable response has a 4xx status code
func (o *PostDocumentationGknSearchServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post documentation gkn search service unavailable response has a 5xx status code
func (o *PostDocumentationGknSearchServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post documentation gkn search service unavailable response a status code equal to that given
func (o *PostDocumentationGknSearchServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostDocumentationGknSearchServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostDocumentationGknSearchServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostDocumentationGknSearchServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostDocumentationGknSearchServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDocumentationGknSearchGatewayTimeout creates a PostDocumentationGknSearchGatewayTimeout with default headers values
func NewPostDocumentationGknSearchGatewayTimeout() *PostDocumentationGknSearchGatewayTimeout {
	return &PostDocumentationGknSearchGatewayTimeout{}
}

/*
PostDocumentationGknSearchGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostDocumentationGknSearchGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post documentation gkn search gateway timeout response has a 2xx status code
func (o *PostDocumentationGknSearchGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post documentation gkn search gateway timeout response has a 3xx status code
func (o *PostDocumentationGknSearchGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post documentation gkn search gateway timeout response has a 4xx status code
func (o *PostDocumentationGknSearchGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post documentation gkn search gateway timeout response has a 5xx status code
func (o *PostDocumentationGknSearchGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post documentation gkn search gateway timeout response a status code equal to that given
func (o *PostDocumentationGknSearchGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostDocumentationGknSearchGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostDocumentationGknSearchGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/documentation/gkn/search][%d] postDocumentationGknSearchGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostDocumentationGknSearchGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostDocumentationGknSearchGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

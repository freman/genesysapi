// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetUserOutofofficeReader is a Reader for the GetUserOutofoffice structure.
type GetUserOutofofficeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserOutofofficeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserOutofofficeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserOutofofficeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetUserOutofofficeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserOutofofficeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserOutofofficeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetUserOutofofficeRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetUserOutofofficeRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetUserOutofofficeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetUserOutofofficeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUserOutofofficeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetUserOutofofficeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetUserOutofofficeGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUserOutofofficeOK creates a GetUserOutofofficeOK with default headers values
func NewGetUserOutofofficeOK() *GetUserOutofofficeOK {
	return &GetUserOutofofficeOK{}
}

/*GetUserOutofofficeOK handles this case with default header values.

successful operation
*/
type GetUserOutofofficeOK struct {
	Payload *models.OutOfOffice
}

func (o *GetUserOutofofficeOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/outofoffice][%d] getUserOutofofficeOK  %+v", 200, o.Payload)
}

func (o *GetUserOutofofficeOK) GetPayload() *models.OutOfOffice {
	return o.Payload
}

func (o *GetUserOutofofficeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OutOfOffice)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserOutofofficeBadRequest creates a GetUserOutofofficeBadRequest with default headers values
func NewGetUserOutofofficeBadRequest() *GetUserOutofofficeBadRequest {
	return &GetUserOutofofficeBadRequest{}
}

/*GetUserOutofofficeBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetUserOutofofficeBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetUserOutofofficeBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/outofoffice][%d] getUserOutofofficeBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserOutofofficeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserOutofofficeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserOutofofficeUnauthorized creates a GetUserOutofofficeUnauthorized with default headers values
func NewGetUserOutofofficeUnauthorized() *GetUserOutofofficeUnauthorized {
	return &GetUserOutofofficeUnauthorized{}
}

/*GetUserOutofofficeUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetUserOutofofficeUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetUserOutofofficeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/outofoffice][%d] getUserOutofofficeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserOutofofficeUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserOutofofficeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserOutofofficeForbidden creates a GetUserOutofofficeForbidden with default headers values
func NewGetUserOutofofficeForbidden() *GetUserOutofofficeForbidden {
	return &GetUserOutofofficeForbidden{}
}

/*GetUserOutofofficeForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetUserOutofofficeForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetUserOutofofficeForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/outofoffice][%d] getUserOutofofficeForbidden  %+v", 403, o.Payload)
}

func (o *GetUserOutofofficeForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserOutofofficeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserOutofofficeNotFound creates a GetUserOutofofficeNotFound with default headers values
func NewGetUserOutofofficeNotFound() *GetUserOutofofficeNotFound {
	return &GetUserOutofofficeNotFound{}
}

/*GetUserOutofofficeNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetUserOutofofficeNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetUserOutofofficeNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/outofoffice][%d] getUserOutofofficeNotFound  %+v", 404, o.Payload)
}

func (o *GetUserOutofofficeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserOutofofficeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserOutofofficeRequestTimeout creates a GetUserOutofofficeRequestTimeout with default headers values
func NewGetUserOutofofficeRequestTimeout() *GetUserOutofofficeRequestTimeout {
	return &GetUserOutofofficeRequestTimeout{}
}

/*GetUserOutofofficeRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetUserOutofofficeRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetUserOutofofficeRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/outofoffice][%d] getUserOutofofficeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetUserOutofofficeRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserOutofofficeRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserOutofofficeRequestEntityTooLarge creates a GetUserOutofofficeRequestEntityTooLarge with default headers values
func NewGetUserOutofofficeRequestEntityTooLarge() *GetUserOutofofficeRequestEntityTooLarge {
	return &GetUserOutofofficeRequestEntityTooLarge{}
}

/*GetUserOutofofficeRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetUserOutofofficeRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetUserOutofofficeRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/outofoffice][%d] getUserOutofofficeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetUserOutofofficeRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserOutofofficeRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserOutofofficeUnsupportedMediaType creates a GetUserOutofofficeUnsupportedMediaType with default headers values
func NewGetUserOutofofficeUnsupportedMediaType() *GetUserOutofofficeUnsupportedMediaType {
	return &GetUserOutofofficeUnsupportedMediaType{}
}

/*GetUserOutofofficeUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetUserOutofofficeUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetUserOutofofficeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/outofoffice][%d] getUserOutofofficeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetUserOutofofficeUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserOutofofficeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserOutofofficeTooManyRequests creates a GetUserOutofofficeTooManyRequests with default headers values
func NewGetUserOutofofficeTooManyRequests() *GetUserOutofofficeTooManyRequests {
	return &GetUserOutofofficeTooManyRequests{}
}

/*GetUserOutofofficeTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetUserOutofofficeTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetUserOutofofficeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/outofoffice][%d] getUserOutofofficeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetUserOutofofficeTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserOutofofficeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserOutofofficeInternalServerError creates a GetUserOutofofficeInternalServerError with default headers values
func NewGetUserOutofofficeInternalServerError() *GetUserOutofofficeInternalServerError {
	return &GetUserOutofofficeInternalServerError{}
}

/*GetUserOutofofficeInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetUserOutofofficeInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetUserOutofofficeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/outofoffice][%d] getUserOutofofficeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUserOutofofficeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserOutofofficeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserOutofofficeServiceUnavailable creates a GetUserOutofofficeServiceUnavailable with default headers values
func NewGetUserOutofofficeServiceUnavailable() *GetUserOutofofficeServiceUnavailable {
	return &GetUserOutofofficeServiceUnavailable{}
}

/*GetUserOutofofficeServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetUserOutofofficeServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetUserOutofofficeServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/outofoffice][%d] getUserOutofofficeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetUserOutofofficeServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserOutofofficeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserOutofofficeGatewayTimeout creates a GetUserOutofofficeGatewayTimeout with default headers values
func NewGetUserOutofofficeGatewayTimeout() *GetUserOutofofficeGatewayTimeout {
	return &GetUserOutofofficeGatewayTimeout{}
}

/*GetUserOutofofficeGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetUserOutofofficeGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetUserOutofofficeGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/outofoffice][%d] getUserOutofofficeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetUserOutofofficeGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserOutofofficeGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostUserRoutingskillsReader is a Reader for the PostUserRoutingskills structure.
type PostUserRoutingskillsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUserRoutingskillsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUserRoutingskillsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUserRoutingskillsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostUserRoutingskillsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostUserRoutingskillsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostUserRoutingskillsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostUserRoutingskillsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostUserRoutingskillsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostUserRoutingskillsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostUserRoutingskillsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostUserRoutingskillsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostUserRoutingskillsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostUserRoutingskillsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostUserRoutingskillsOK creates a PostUserRoutingskillsOK with default headers values
func NewPostUserRoutingskillsOK() *PostUserRoutingskillsOK {
	return &PostUserRoutingskillsOK{}
}

/*
PostUserRoutingskillsOK describes a response with status code 200, with default header values.

successful operation
*/
type PostUserRoutingskillsOK struct {
	Payload *models.UserRoutingSkill
}

// IsSuccess returns true when this post user routingskills o k response has a 2xx status code
func (o *PostUserRoutingskillsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post user routingskills o k response has a 3xx status code
func (o *PostUserRoutingskillsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post user routingskills o k response has a 4xx status code
func (o *PostUserRoutingskillsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post user routingskills o k response has a 5xx status code
func (o *PostUserRoutingskillsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post user routingskills o k response a status code equal to that given
func (o *PostUserRoutingskillsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostUserRoutingskillsOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsOK  %+v", 200, o.Payload)
}

func (o *PostUserRoutingskillsOK) String() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsOK  %+v", 200, o.Payload)
}

func (o *PostUserRoutingskillsOK) GetPayload() *models.UserRoutingSkill {
	return o.Payload
}

func (o *PostUserRoutingskillsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserRoutingSkill)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserRoutingskillsBadRequest creates a PostUserRoutingskillsBadRequest with default headers values
func NewPostUserRoutingskillsBadRequest() *PostUserRoutingskillsBadRequest {
	return &PostUserRoutingskillsBadRequest{}
}

/*
PostUserRoutingskillsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostUserRoutingskillsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post user routingskills bad request response has a 2xx status code
func (o *PostUserRoutingskillsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post user routingskills bad request response has a 3xx status code
func (o *PostUserRoutingskillsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post user routingskills bad request response has a 4xx status code
func (o *PostUserRoutingskillsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post user routingskills bad request response has a 5xx status code
func (o *PostUserRoutingskillsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post user routingskills bad request response a status code equal to that given
func (o *PostUserRoutingskillsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostUserRoutingskillsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsBadRequest  %+v", 400, o.Payload)
}

func (o *PostUserRoutingskillsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsBadRequest  %+v", 400, o.Payload)
}

func (o *PostUserRoutingskillsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUserRoutingskillsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserRoutingskillsUnauthorized creates a PostUserRoutingskillsUnauthorized with default headers values
func NewPostUserRoutingskillsUnauthorized() *PostUserRoutingskillsUnauthorized {
	return &PostUserRoutingskillsUnauthorized{}
}

/*
PostUserRoutingskillsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostUserRoutingskillsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post user routingskills unauthorized response has a 2xx status code
func (o *PostUserRoutingskillsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post user routingskills unauthorized response has a 3xx status code
func (o *PostUserRoutingskillsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post user routingskills unauthorized response has a 4xx status code
func (o *PostUserRoutingskillsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post user routingskills unauthorized response has a 5xx status code
func (o *PostUserRoutingskillsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post user routingskills unauthorized response a status code equal to that given
func (o *PostUserRoutingskillsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostUserRoutingskillsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostUserRoutingskillsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostUserRoutingskillsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUserRoutingskillsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserRoutingskillsForbidden creates a PostUserRoutingskillsForbidden with default headers values
func NewPostUserRoutingskillsForbidden() *PostUserRoutingskillsForbidden {
	return &PostUserRoutingskillsForbidden{}
}

/*
PostUserRoutingskillsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostUserRoutingskillsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post user routingskills forbidden response has a 2xx status code
func (o *PostUserRoutingskillsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post user routingskills forbidden response has a 3xx status code
func (o *PostUserRoutingskillsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post user routingskills forbidden response has a 4xx status code
func (o *PostUserRoutingskillsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post user routingskills forbidden response has a 5xx status code
func (o *PostUserRoutingskillsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post user routingskills forbidden response a status code equal to that given
func (o *PostUserRoutingskillsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostUserRoutingskillsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsForbidden  %+v", 403, o.Payload)
}

func (o *PostUserRoutingskillsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsForbidden  %+v", 403, o.Payload)
}

func (o *PostUserRoutingskillsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUserRoutingskillsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserRoutingskillsNotFound creates a PostUserRoutingskillsNotFound with default headers values
func NewPostUserRoutingskillsNotFound() *PostUserRoutingskillsNotFound {
	return &PostUserRoutingskillsNotFound{}
}

/*
PostUserRoutingskillsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostUserRoutingskillsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post user routingskills not found response has a 2xx status code
func (o *PostUserRoutingskillsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post user routingskills not found response has a 3xx status code
func (o *PostUserRoutingskillsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post user routingskills not found response has a 4xx status code
func (o *PostUserRoutingskillsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post user routingskills not found response has a 5xx status code
func (o *PostUserRoutingskillsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post user routingskills not found response a status code equal to that given
func (o *PostUserRoutingskillsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostUserRoutingskillsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsNotFound  %+v", 404, o.Payload)
}

func (o *PostUserRoutingskillsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsNotFound  %+v", 404, o.Payload)
}

func (o *PostUserRoutingskillsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUserRoutingskillsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserRoutingskillsRequestTimeout creates a PostUserRoutingskillsRequestTimeout with default headers values
func NewPostUserRoutingskillsRequestTimeout() *PostUserRoutingskillsRequestTimeout {
	return &PostUserRoutingskillsRequestTimeout{}
}

/*
PostUserRoutingskillsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostUserRoutingskillsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post user routingskills request timeout response has a 2xx status code
func (o *PostUserRoutingskillsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post user routingskills request timeout response has a 3xx status code
func (o *PostUserRoutingskillsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post user routingskills request timeout response has a 4xx status code
func (o *PostUserRoutingskillsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post user routingskills request timeout response has a 5xx status code
func (o *PostUserRoutingskillsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post user routingskills request timeout response a status code equal to that given
func (o *PostUserRoutingskillsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostUserRoutingskillsRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostUserRoutingskillsRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostUserRoutingskillsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUserRoutingskillsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserRoutingskillsRequestEntityTooLarge creates a PostUserRoutingskillsRequestEntityTooLarge with default headers values
func NewPostUserRoutingskillsRequestEntityTooLarge() *PostUserRoutingskillsRequestEntityTooLarge {
	return &PostUserRoutingskillsRequestEntityTooLarge{}
}

/*
PostUserRoutingskillsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PostUserRoutingskillsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post user routingskills request entity too large response has a 2xx status code
func (o *PostUserRoutingskillsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post user routingskills request entity too large response has a 3xx status code
func (o *PostUserRoutingskillsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post user routingskills request entity too large response has a 4xx status code
func (o *PostUserRoutingskillsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post user routingskills request entity too large response has a 5xx status code
func (o *PostUserRoutingskillsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post user routingskills request entity too large response a status code equal to that given
func (o *PostUserRoutingskillsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostUserRoutingskillsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostUserRoutingskillsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostUserRoutingskillsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUserRoutingskillsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserRoutingskillsUnsupportedMediaType creates a PostUserRoutingskillsUnsupportedMediaType with default headers values
func NewPostUserRoutingskillsUnsupportedMediaType() *PostUserRoutingskillsUnsupportedMediaType {
	return &PostUserRoutingskillsUnsupportedMediaType{}
}

/*
PostUserRoutingskillsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostUserRoutingskillsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post user routingskills unsupported media type response has a 2xx status code
func (o *PostUserRoutingskillsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post user routingskills unsupported media type response has a 3xx status code
func (o *PostUserRoutingskillsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post user routingskills unsupported media type response has a 4xx status code
func (o *PostUserRoutingskillsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post user routingskills unsupported media type response has a 5xx status code
func (o *PostUserRoutingskillsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post user routingskills unsupported media type response a status code equal to that given
func (o *PostUserRoutingskillsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostUserRoutingskillsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostUserRoutingskillsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostUserRoutingskillsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUserRoutingskillsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserRoutingskillsTooManyRequests creates a PostUserRoutingskillsTooManyRequests with default headers values
func NewPostUserRoutingskillsTooManyRequests() *PostUserRoutingskillsTooManyRequests {
	return &PostUserRoutingskillsTooManyRequests{}
}

/*
PostUserRoutingskillsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostUserRoutingskillsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post user routingskills too many requests response has a 2xx status code
func (o *PostUserRoutingskillsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post user routingskills too many requests response has a 3xx status code
func (o *PostUserRoutingskillsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post user routingskills too many requests response has a 4xx status code
func (o *PostUserRoutingskillsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post user routingskills too many requests response has a 5xx status code
func (o *PostUserRoutingskillsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post user routingskills too many requests response a status code equal to that given
func (o *PostUserRoutingskillsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostUserRoutingskillsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostUserRoutingskillsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostUserRoutingskillsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUserRoutingskillsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserRoutingskillsInternalServerError creates a PostUserRoutingskillsInternalServerError with default headers values
func NewPostUserRoutingskillsInternalServerError() *PostUserRoutingskillsInternalServerError {
	return &PostUserRoutingskillsInternalServerError{}
}

/*
PostUserRoutingskillsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostUserRoutingskillsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post user routingskills internal server error response has a 2xx status code
func (o *PostUserRoutingskillsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post user routingskills internal server error response has a 3xx status code
func (o *PostUserRoutingskillsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post user routingskills internal server error response has a 4xx status code
func (o *PostUserRoutingskillsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post user routingskills internal server error response has a 5xx status code
func (o *PostUserRoutingskillsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post user routingskills internal server error response a status code equal to that given
func (o *PostUserRoutingskillsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostUserRoutingskillsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUserRoutingskillsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUserRoutingskillsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUserRoutingskillsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserRoutingskillsServiceUnavailable creates a PostUserRoutingskillsServiceUnavailable with default headers values
func NewPostUserRoutingskillsServiceUnavailable() *PostUserRoutingskillsServiceUnavailable {
	return &PostUserRoutingskillsServiceUnavailable{}
}

/*
PostUserRoutingskillsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostUserRoutingskillsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post user routingskills service unavailable response has a 2xx status code
func (o *PostUserRoutingskillsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post user routingskills service unavailable response has a 3xx status code
func (o *PostUserRoutingskillsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post user routingskills service unavailable response has a 4xx status code
func (o *PostUserRoutingskillsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post user routingskills service unavailable response has a 5xx status code
func (o *PostUserRoutingskillsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post user routingskills service unavailable response a status code equal to that given
func (o *PostUserRoutingskillsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostUserRoutingskillsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostUserRoutingskillsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostUserRoutingskillsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUserRoutingskillsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserRoutingskillsGatewayTimeout creates a PostUserRoutingskillsGatewayTimeout with default headers values
func NewPostUserRoutingskillsGatewayTimeout() *PostUserRoutingskillsGatewayTimeout {
	return &PostUserRoutingskillsGatewayTimeout{}
}

/*
PostUserRoutingskillsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostUserRoutingskillsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post user routingskills gateway timeout response has a 2xx status code
func (o *PostUserRoutingskillsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post user routingskills gateway timeout response has a 3xx status code
func (o *PostUserRoutingskillsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post user routingskills gateway timeout response has a 4xx status code
func (o *PostUserRoutingskillsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post user routingskills gateway timeout response has a 5xx status code
func (o *PostUserRoutingskillsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post user routingskills gateway timeout response a status code equal to that given
func (o *PostUserRoutingskillsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostUserRoutingskillsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostUserRoutingskillsGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/users/{userId}/routingskills][%d] postUserRoutingskillsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostUserRoutingskillsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUserRoutingskillsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

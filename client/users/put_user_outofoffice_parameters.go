// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// NewPutUserOutofofficeParams creates a new PutUserOutofofficeParams object
// with the default values initialized.
func NewPutUserOutofofficeParams() *PutUserOutofofficeParams {
	var ()
	return &PutUserOutofofficeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutUserOutofofficeParamsWithTimeout creates a new PutUserOutofofficeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutUserOutofofficeParamsWithTimeout(timeout time.Duration) *PutUserOutofofficeParams {
	var ()
	return &PutUserOutofofficeParams{

		timeout: timeout,
	}
}

// NewPutUserOutofofficeParamsWithContext creates a new PutUserOutofofficeParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutUserOutofofficeParamsWithContext(ctx context.Context) *PutUserOutofofficeParams {
	var ()
	return &PutUserOutofofficeParams{

		Context: ctx,
	}
}

// NewPutUserOutofofficeParamsWithHTTPClient creates a new PutUserOutofofficeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutUserOutofofficeParamsWithHTTPClient(client *http.Client) *PutUserOutofofficeParams {
	var ()
	return &PutUserOutofofficeParams{
		HTTPClient: client,
	}
}

/*PutUserOutofofficeParams contains all the parameters to send to the API endpoint
for the put user outofoffice operation typically these are written to a http.Request
*/
type PutUserOutofofficeParams struct {

	/*Body
	  The updated OutOffOffice

	*/
	Body *models.OutOfOffice
	/*UserID
	  User ID

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put user outofoffice params
func (o *PutUserOutofofficeParams) WithTimeout(timeout time.Duration) *PutUserOutofofficeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put user outofoffice params
func (o *PutUserOutofofficeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put user outofoffice params
func (o *PutUserOutofofficeParams) WithContext(ctx context.Context) *PutUserOutofofficeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put user outofoffice params
func (o *PutUserOutofofficeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put user outofoffice params
func (o *PutUserOutofofficeParams) WithHTTPClient(client *http.Client) *PutUserOutofofficeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put user outofoffice params
func (o *PutUserOutofofficeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the put user outofoffice params
func (o *PutUserOutofofficeParams) WithBody(body *models.OutOfOffice) *PutUserOutofofficeParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the put user outofoffice params
func (o *PutUserOutofofficeParams) SetBody(body *models.OutOfOffice) {
	o.Body = body
}

// WithUserID adds the userID to the put user outofoffice params
func (o *PutUserOutofofficeParams) WithUserID(userID string) *PutUserOutofofficeParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the put user outofoffice params
func (o *PutUserOutofofficeParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *PutUserOutofofficeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

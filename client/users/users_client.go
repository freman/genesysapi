// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the users client
type API interface {
	/*
	   DeleteUser deletes user
	*/
	DeleteUser(ctx context.Context, params *DeleteUserParams) (*DeleteUserOK, error)
	/*
	   DeleteUserRoutinglanguage removes routing language from user
	*/
	DeleteUserRoutinglanguage(ctx context.Context, params *DeleteUserRoutinglanguageParams) (*DeleteUserRoutinglanguageNoContent, error)
	/*
	   DeleteUserRoutingskill removes routing skill from user
	*/
	DeleteUserRoutingskill(ctx context.Context, params *DeleteUserRoutingskillParams) (*DeleteUserRoutingskillOK, error)
	/*
	   DeleteUserStationAssociatedstation clears associated station
	*/
	DeleteUserStationAssociatedstation(ctx context.Context, params *DeleteUserStationAssociatedstationParams) (*DeleteUserStationAssociatedstationAccepted, error)
	/*
	   DeleteUserStationDefaultstation clears default station
	*/
	DeleteUserStationDefaultstation(ctx context.Context, params *DeleteUserStationDefaultstationParams) (*DeleteUserStationDefaultstationAccepted, error)
	/*
	   GetFieldconfig fetches field config for an entity type
	*/
	GetFieldconfig(ctx context.Context, params *GetFieldconfigParams) (*GetFieldconfigOK, error)
	/*
	   GetProfilesUsers gets a user profile listing
	   This api is deprecated. User /api/v2/users
	*/
	GetProfilesUsers(ctx context.Context, params *GetProfilesUsersParams) (*GetProfilesUsersOK, error)
	/*
	   GetUser gets user
	*/
	GetUser(ctx context.Context, params *GetUserParams) (*GetUserOK, error)
	/*
	   GetUserAdjacents gets adjacents
	*/
	GetUserAdjacents(ctx context.Context, params *GetUserAdjacentsParams) (*GetUserAdjacentsOK, error)
	/*
	   GetUserCallforwarding gets a user s call forwarding
	*/
	GetUserCallforwarding(ctx context.Context, params *GetUserCallforwardingParams) (*GetUserCallforwardingOK, error)
	/*
	   GetUserDirectreports gets direct reports
	*/
	GetUserDirectreports(ctx context.Context, params *GetUserDirectreportsParams) (*GetUserDirectreportsOK, error)
	/*
	   GetUserFavorites deprecateds will be revived with new contract
	*/
	GetUserFavorites(ctx context.Context, params *GetUserFavoritesParams) (*GetUserFavoritesOK, error)
	/*
	   GetUserOutofoffice gets a out of office
	*/
	GetUserOutofoffice(ctx context.Context, params *GetUserOutofofficeParams) (*GetUserOutofofficeOK, error)
	/*
	   GetUserProfile gets user profile
	   This api has been deprecated. Use api/v2/users instead
	*/
	GetUserProfile(ctx context.Context, params *GetUserProfileParams) (*GetUserProfileOK, error)
	/*
	   GetUserProfileskills lists profile skills for a user
	*/
	GetUserProfileskills(ctx context.Context, params *GetUserProfileskillsParams) (*GetUserProfileskillsOK, error)
	/*
	   GetUserRoutinglanguages lists routing language for user
	*/
	GetUserRoutinglanguages(ctx context.Context, params *GetUserRoutinglanguagesParams) (*GetUserRoutinglanguagesOK, error)
	/*
	   GetUserRoutingskills lists routing skills for user
	*/
	GetUserRoutingskills(ctx context.Context, params *GetUserRoutingskillsParams) (*GetUserRoutingskillsOK, error)
	/*
	   GetUserRoutingstatus fetches the routing status of a user
	*/
	GetUserRoutingstatus(ctx context.Context, params *GetUserRoutingstatusParams) (*GetUserRoutingstatusOK, error)
	/*
	   GetUserState gets user state information
	*/
	GetUserState(ctx context.Context, params *GetUserStateParams) (*GetUserStateOK, error)
	/*
	   GetUserStation gets station information for user
	*/
	GetUserStation(ctx context.Context, params *GetUserStationParams) (*GetUserStationOK, error)
	/*
	   GetUserSuperiors gets superiors
	*/
	GetUserSuperiors(ctx context.Context, params *GetUserSuperiorsParams) (*GetUserSuperiorsOK, error)
	/*
	   GetUserTrustors lists the organizations that have authorized trusted the user
	*/
	GetUserTrustors(ctx context.Context, params *GetUserTrustorsParams) (*GetUserTrustorsOK, error)
	/*
	   GetUsers gets the list of available users
	*/
	GetUsers(ctx context.Context, params *GetUsersParams) (*GetUsersOK, error)
	/*
	   GetUsersDevelopmentActivities gets list of development activities
	   Either moduleId or userId is required. Results are filtered based on the applicable permissions.
	*/
	GetUsersDevelopmentActivities(ctx context.Context, params *GetUsersDevelopmentActivitiesParams) (*GetUsersDevelopmentActivitiesOK, error)
	/*
	   GetUsersDevelopmentActivitiesMe gets list of development activities for current user
	   Results are filtered based on the applicable permissions.
	*/
	GetUsersDevelopmentActivitiesMe(ctx context.Context, params *GetUsersDevelopmentActivitiesMeParams) (*GetUsersDevelopmentActivitiesMeOK, error)
	/*
	   GetUsersDevelopmentActivity gets a development activity
	   Permission not required if you are the attendee, creator or facilitator of the coaching appointment or you are the assigned user of the learning assignment.
	*/
	GetUsersDevelopmentActivity(ctx context.Context, params *GetUsersDevelopmentActivityParams) (*GetUsersDevelopmentActivityOK, error)
	/*
	   GetUsersMe gets current user details
	   This request is not valid when using the Client Credentials OAuth grant.
	*/
	GetUsersMe(ctx context.Context, params *GetUsersMeParams) (*GetUsersMeOK, error)
	/*
	   GetUsersSearch searches users using the q64 value returned from a previous search
	*/
	GetUsersSearch(ctx context.Context, params *GetUsersSearchParams) (*GetUsersSearchOK, error)
	/*
	   PatchUser updates user
	*/
	PatchUser(ctx context.Context, params *PatchUserParams) (*PatchUserOK, error)
	/*
	   PatchUserCallforwarding patches a user s call forwarding
	*/
	PatchUserCallforwarding(ctx context.Context, params *PatchUserCallforwardingParams) (*PatchUserCallforwardingOK, error)
	/*
	   PatchUserRoutinglanguage updates routing language proficiency or state
	*/
	PatchUserRoutinglanguage(ctx context.Context, params *PatchUserRoutinglanguageParams) (*PatchUserRoutinglanguageOK, error)
	/*
	   PatchUserRoutinglanguagesBulk adds bulk routing language to user max limit 50 languages
	*/
	PatchUserRoutinglanguagesBulk(ctx context.Context, params *PatchUserRoutinglanguagesBulkParams) (*PatchUserRoutinglanguagesBulkOK, error)
	/*
	   PatchUserRoutingskillsBulk bulks add routing skills to user
	*/
	PatchUserRoutingskillsBulk(ctx context.Context, params *PatchUserRoutingskillsBulkParams) (*PatchUserRoutingskillsBulkOK, error)
	/*
	   PatchUsersBulk updates bulk acd autoanswer on users
	*/
	PatchUsersBulk(ctx context.Context, params *PatchUsersBulkParams) (*PatchUsersBulkOK, error)
	/*
	   PostUserInvite sends an activation email to the user
	*/
	PostUserInvite(ctx context.Context, params *PostUserInviteParams) (*PostUserInviteNoContent, error)
	/*
	   PostUserPassword changes a users password
	*/
	PostUserPassword(ctx context.Context, params *PostUserPasswordParams) (*PostUserPasswordNoContent, error)
	/*
	   PostUserRoutinglanguages adds routing language to user
	*/
	PostUserRoutinglanguages(ctx context.Context, params *PostUserRoutinglanguagesParams) (*PostUserRoutinglanguagesOK, error)
	/*
	   PostUserRoutingskills adds routing skill to user
	*/
	PostUserRoutingskills(ctx context.Context, params *PostUserRoutingskillsParams) (*PostUserRoutingskillsOK, error)
	/*
	   PostUsers creates user
	*/
	PostUsers(ctx context.Context, params *PostUsersParams) (*PostUsersOK, error)
	/*
	   PostUsersDevelopmentActivitiesAggregatesQuery retrieves aggregated development activity data
	   Results are filtered based on the applicable permissions.
	*/
	PostUsersDevelopmentActivitiesAggregatesQuery(ctx context.Context, params *PostUsersDevelopmentActivitiesAggregatesQueryParams) (*PostUsersDevelopmentActivitiesAggregatesQueryOK, error)
	/*
	   PostUsersMePassword changes your password
	*/
	PostUsersMePassword(ctx context.Context, params *PostUsersMePasswordParams) (*PostUsersMePasswordNoContent, error)
	/*
	   PostUsersSearch searches users
	*/
	PostUsersSearch(ctx context.Context, params *PostUsersSearchParams) (*PostUsersSearchOK, error)
	/*
	   PutUserCallforwarding updates a user s call forwarding
	*/
	PutUserCallforwarding(ctx context.Context, params *PutUserCallforwardingParams) (*PutUserCallforwardingOK, error)
	/*
	   PutUserOutofoffice updates an out of office
	*/
	PutUserOutofoffice(ctx context.Context, params *PutUserOutofofficeParams) (*PutUserOutofofficeOK, error)
	/*
	   PutUserProfileskills updates profile skills for a user
	*/
	PutUserProfileskills(ctx context.Context, params *PutUserProfileskillsParams) (*PutUserProfileskillsOK, error)
	/*
	   PutUserRoutingskill updates routing skill proficiency or state
	*/
	PutUserRoutingskill(ctx context.Context, params *PutUserRoutingskillParams) (*PutUserRoutingskillOK, error)
	/*
	   PutUserRoutingskillsBulk replaces all routing skills assigned to a user
	*/
	PutUserRoutingskillsBulk(ctx context.Context, params *PutUserRoutingskillsBulkParams) (*PutUserRoutingskillsBulkOK, error)
	/*
	   PutUserRoutingstatus updates the routing status of a user
	*/
	PutUserRoutingstatus(ctx context.Context, params *PutUserRoutingstatusParams) (*PutUserRoutingstatusOK, error)
	/*
	   PutUserState updates user state information
	*/
	PutUserState(ctx context.Context, params *PutUserStateParams) (*PutUserStateOK, error)
	/*
	   PutUserStationAssociatedstationStationID sets associated station
	*/
	PutUserStationAssociatedstationStationID(ctx context.Context, params *PutUserStationAssociatedstationStationIDParams) (*PutUserStationAssociatedstationStationIDAccepted, error)
	/*
	   PutUserStationDefaultstationStationID sets default station
	*/
	PutUserStationDefaultstationStationID(ctx context.Context, params *PutUserStationDefaultstationStationIDParams) (*PutUserStationDefaultstationStationIDAccepted, error)
}

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteUser deletes user
*/
func (a *Client) DeleteUser(ctx context.Context, params *DeleteUserParams) (*DeleteUserOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUser",
		Method:             "DELETE",
		PathPattern:        "/api/v2/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserOK), nil

}

/*
DeleteUserRoutinglanguage removes routing language from user
*/
func (a *Client) DeleteUserRoutinglanguage(ctx context.Context, params *DeleteUserRoutinglanguageParams) (*DeleteUserRoutinglanguageNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserRoutinglanguage",
		Method:             "DELETE",
		PathPattern:        "/api/v2/users/{userId}/routinglanguages/{languageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserRoutinglanguageReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserRoutinglanguageNoContent), nil

}

/*
DeleteUserRoutingskill removes routing skill from user
*/
func (a *Client) DeleteUserRoutingskill(ctx context.Context, params *DeleteUserRoutingskillParams) (*DeleteUserRoutingskillOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserRoutingskill",
		Method:             "DELETE",
		PathPattern:        "/api/v2/users/{userId}/routingskills/{skillId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserRoutingskillReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserRoutingskillOK), nil

}

/*
DeleteUserStationAssociatedstation clears associated station
*/
func (a *Client) DeleteUserStationAssociatedstation(ctx context.Context, params *DeleteUserStationAssociatedstationParams) (*DeleteUserStationAssociatedstationAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserStationAssociatedstation",
		Method:             "DELETE",
		PathPattern:        "/api/v2/users/{userId}/station/associatedstation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserStationAssociatedstationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserStationAssociatedstationAccepted), nil

}

/*
DeleteUserStationDefaultstation clears default station
*/
func (a *Client) DeleteUserStationDefaultstation(ctx context.Context, params *DeleteUserStationDefaultstationParams) (*DeleteUserStationDefaultstationAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserStationDefaultstation",
		Method:             "DELETE",
		PathPattern:        "/api/v2/users/{userId}/station/defaultstation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserStationDefaultstationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserStationDefaultstationAccepted), nil

}

/*
GetFieldconfig fetches field config for an entity type
*/
func (a *Client) GetFieldconfig(ctx context.Context, params *GetFieldconfigParams) (*GetFieldconfigOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFieldconfig",
		Method:             "GET",
		PathPattern:        "/api/v2/fieldconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFieldconfigReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFieldconfigOK), nil

}

/*
GetProfilesUsers gets a user profile listing

This api is deprecated. User /api/v2/users
*/
func (a *Client) GetProfilesUsers(ctx context.Context, params *GetProfilesUsersParams) (*GetProfilesUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProfilesUsers",
		Method:             "GET",
		PathPattern:        "/api/v2/profiles/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProfilesUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProfilesUsersOK), nil

}

/*
GetUser gets user
*/
func (a *Client) GetUser(ctx context.Context, params *GetUserParams) (*GetUserOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUser",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserOK), nil

}

/*
GetUserAdjacents gets adjacents
*/
func (a *Client) GetUserAdjacents(ctx context.Context, params *GetUserAdjacentsParams) (*GetUserAdjacentsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserAdjacents",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/adjacents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserAdjacentsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserAdjacentsOK), nil

}

/*
GetUserCallforwarding gets a user s call forwarding
*/
func (a *Client) GetUserCallforwarding(ctx context.Context, params *GetUserCallforwardingParams) (*GetUserCallforwardingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserCallforwarding",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/callforwarding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserCallforwardingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserCallforwardingOK), nil

}

/*
GetUserDirectreports gets direct reports
*/
func (a *Client) GetUserDirectreports(ctx context.Context, params *GetUserDirectreportsParams) (*GetUserDirectreportsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserDirectreports",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/directreports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserDirectreportsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserDirectreportsOK), nil

}

/*
GetUserFavorites deprecateds will be revived with new contract
*/
func (a *Client) GetUserFavorites(ctx context.Context, params *GetUserFavoritesParams) (*GetUserFavoritesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserFavorites",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/favorites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserFavoritesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserFavoritesOK), nil

}

/*
GetUserOutofoffice gets a out of office
*/
func (a *Client) GetUserOutofoffice(ctx context.Context, params *GetUserOutofofficeParams) (*GetUserOutofofficeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserOutofoffice",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/outofoffice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserOutofofficeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserOutofofficeOK), nil

}

/*
GetUserProfile gets user profile

This api has been deprecated. Use api/v2/users instead
*/
func (a *Client) GetUserProfile(ctx context.Context, params *GetUserProfileParams) (*GetUserProfileOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserProfile",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserProfileReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserProfileOK), nil

}

/*
GetUserProfileskills lists profile skills for a user
*/
func (a *Client) GetUserProfileskills(ctx context.Context, params *GetUserProfileskillsParams) (*GetUserProfileskillsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserProfileskills",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/profileskills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserProfileskillsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserProfileskillsOK), nil

}

/*
GetUserRoutinglanguages lists routing language for user
*/
func (a *Client) GetUserRoutinglanguages(ctx context.Context, params *GetUserRoutinglanguagesParams) (*GetUserRoutinglanguagesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserRoutinglanguages",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/routinglanguages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserRoutinglanguagesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserRoutinglanguagesOK), nil

}

/*
GetUserRoutingskills lists routing skills for user
*/
func (a *Client) GetUserRoutingskills(ctx context.Context, params *GetUserRoutingskillsParams) (*GetUserRoutingskillsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserRoutingskills",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/routingskills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserRoutingskillsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserRoutingskillsOK), nil

}

/*
GetUserRoutingstatus fetches the routing status of a user
*/
func (a *Client) GetUserRoutingstatus(ctx context.Context, params *GetUserRoutingstatusParams) (*GetUserRoutingstatusOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserRoutingstatus",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/routingstatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserRoutingstatusReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserRoutingstatusOK), nil

}

/*
GetUserState gets user state information
*/
func (a *Client) GetUserState(ctx context.Context, params *GetUserStateParams) (*GetUserStateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserState",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserStateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserStateOK), nil

}

/*
GetUserStation gets station information for user
*/
func (a *Client) GetUserStation(ctx context.Context, params *GetUserStationParams) (*GetUserStationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserStation",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/station",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserStationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserStationOK), nil

}

/*
GetUserSuperiors gets superiors
*/
func (a *Client) GetUserSuperiors(ctx context.Context, params *GetUserSuperiorsParams) (*GetUserSuperiorsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserSuperiors",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/superiors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserSuperiorsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserSuperiorsOK), nil

}

/*
GetUserTrustors lists the organizations that have authorized trusted the user
*/
func (a *Client) GetUserTrustors(ctx context.Context, params *GetUserTrustorsParams) (*GetUserTrustorsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserTrustors",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/trustors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserTrustorsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserTrustorsOK), nil

}

/*
GetUsers gets the list of available users
*/
func (a *Client) GetUsers(ctx context.Context, params *GetUsersParams) (*GetUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsers",
		Method:             "GET",
		PathPattern:        "/api/v2/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersOK), nil

}

/*
GetUsersDevelopmentActivities gets list of development activities

Either moduleId or userId is required. Results are filtered based on the applicable permissions.
*/
func (a *Client) GetUsersDevelopmentActivities(ctx context.Context, params *GetUsersDevelopmentActivitiesParams) (*GetUsersDevelopmentActivitiesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersDevelopmentActivities",
		Method:             "GET",
		PathPattern:        "/api/v2/users/development/activities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersDevelopmentActivitiesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersDevelopmentActivitiesOK), nil

}

/*
GetUsersDevelopmentActivitiesMe gets list of development activities for current user

Results are filtered based on the applicable permissions.
*/
func (a *Client) GetUsersDevelopmentActivitiesMe(ctx context.Context, params *GetUsersDevelopmentActivitiesMeParams) (*GetUsersDevelopmentActivitiesMeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersDevelopmentActivitiesMe",
		Method:             "GET",
		PathPattern:        "/api/v2/users/development/activities/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersDevelopmentActivitiesMeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersDevelopmentActivitiesMeOK), nil

}

/*
GetUsersDevelopmentActivity gets a development activity

Permission not required if you are the attendee, creator or facilitator of the coaching appointment or you are the assigned user of the learning assignment.
*/
func (a *Client) GetUsersDevelopmentActivity(ctx context.Context, params *GetUsersDevelopmentActivityParams) (*GetUsersDevelopmentActivityOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersDevelopmentActivity",
		Method:             "GET",
		PathPattern:        "/api/v2/users/development/activities/{activityId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersDevelopmentActivityReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersDevelopmentActivityOK), nil

}

/*
GetUsersMe gets current user details

This request is not valid when using the Client Credentials OAuth grant.
*/
func (a *Client) GetUsersMe(ctx context.Context, params *GetUsersMeParams) (*GetUsersMeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersMe",
		Method:             "GET",
		PathPattern:        "/api/v2/users/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersMeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersMeOK), nil

}

/*
GetUsersSearch searches users using the q64 value returned from a previous search
*/
func (a *Client) GetUsersSearch(ctx context.Context, params *GetUsersSearchParams) (*GetUsersSearchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersSearch",
		Method:             "GET",
		PathPattern:        "/api/v2/users/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersSearchReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersSearchOK), nil

}

/*
PatchUser updates user
*/
func (a *Client) PatchUser(ctx context.Context, params *PatchUserParams) (*PatchUserOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUser",
		Method:             "PATCH",
		PathPattern:        "/api/v2/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUserOK), nil

}

/*
PatchUserCallforwarding patches a user s call forwarding
*/
func (a *Client) PatchUserCallforwarding(ctx context.Context, params *PatchUserCallforwardingParams) (*PatchUserCallforwardingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUserCallforwarding",
		Method:             "PATCH",
		PathPattern:        "/api/v2/users/{userId}/callforwarding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUserCallforwardingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUserCallforwardingOK), nil

}

/*
PatchUserRoutinglanguage updates routing language proficiency or state
*/
func (a *Client) PatchUserRoutinglanguage(ctx context.Context, params *PatchUserRoutinglanguageParams) (*PatchUserRoutinglanguageOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUserRoutinglanguage",
		Method:             "PATCH",
		PathPattern:        "/api/v2/users/{userId}/routinglanguages/{languageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUserRoutinglanguageReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUserRoutinglanguageOK), nil

}

/*
PatchUserRoutinglanguagesBulk adds bulk routing language to user max limit 50 languages
*/
func (a *Client) PatchUserRoutinglanguagesBulk(ctx context.Context, params *PatchUserRoutinglanguagesBulkParams) (*PatchUserRoutinglanguagesBulkOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUserRoutinglanguagesBulk",
		Method:             "PATCH",
		PathPattern:        "/api/v2/users/{userId}/routinglanguages/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUserRoutinglanguagesBulkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUserRoutinglanguagesBulkOK), nil

}

/*
PatchUserRoutingskillsBulk bulks add routing skills to user
*/
func (a *Client) PatchUserRoutingskillsBulk(ctx context.Context, params *PatchUserRoutingskillsBulkParams) (*PatchUserRoutingskillsBulkOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUserRoutingskillsBulk",
		Method:             "PATCH",
		PathPattern:        "/api/v2/users/{userId}/routingskills/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUserRoutingskillsBulkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUserRoutingskillsBulkOK), nil

}

/*
PatchUsersBulk updates bulk acd autoanswer on users
*/
func (a *Client) PatchUsersBulk(ctx context.Context, params *PatchUsersBulkParams) (*PatchUsersBulkOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUsersBulk",
		Method:             "PATCH",
		PathPattern:        "/api/v2/users/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUsersBulkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUsersBulkOK), nil

}

/*
PostUserInvite sends an activation email to the user
*/
func (a *Client) PostUserInvite(ctx context.Context, params *PostUserInviteParams) (*PostUserInviteNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUserInvite",
		Method:             "POST",
		PathPattern:        "/api/v2/users/{userId}/invite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUserInviteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUserInviteNoContent), nil

}

/*
PostUserPassword changes a users password
*/
func (a *Client) PostUserPassword(ctx context.Context, params *PostUserPasswordParams) (*PostUserPasswordNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUserPassword",
		Method:             "POST",
		PathPattern:        "/api/v2/users/{userId}/password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUserPasswordReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUserPasswordNoContent), nil

}

/*
PostUserRoutinglanguages adds routing language to user
*/
func (a *Client) PostUserRoutinglanguages(ctx context.Context, params *PostUserRoutinglanguagesParams) (*PostUserRoutinglanguagesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUserRoutinglanguages",
		Method:             "POST",
		PathPattern:        "/api/v2/users/{userId}/routinglanguages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUserRoutinglanguagesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUserRoutinglanguagesOK), nil

}

/*
PostUserRoutingskills adds routing skill to user
*/
func (a *Client) PostUserRoutingskills(ctx context.Context, params *PostUserRoutingskillsParams) (*PostUserRoutingskillsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUserRoutingskills",
		Method:             "POST",
		PathPattern:        "/api/v2/users/{userId}/routingskills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUserRoutingskillsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUserRoutingskillsOK), nil

}

/*
PostUsers creates user
*/
func (a *Client) PostUsers(ctx context.Context, params *PostUsersParams) (*PostUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUsers",
		Method:             "POST",
		PathPattern:        "/api/v2/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersOK), nil

}

/*
PostUsersDevelopmentActivitiesAggregatesQuery retrieves aggregated development activity data

Results are filtered based on the applicable permissions.
*/
func (a *Client) PostUsersDevelopmentActivitiesAggregatesQuery(ctx context.Context, params *PostUsersDevelopmentActivitiesAggregatesQueryParams) (*PostUsersDevelopmentActivitiesAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUsersDevelopmentActivitiesAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/users/development/activities/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersDevelopmentActivitiesAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersDevelopmentActivitiesAggregatesQueryOK), nil

}

/*
PostUsersMePassword changes your password
*/
func (a *Client) PostUsersMePassword(ctx context.Context, params *PostUsersMePasswordParams) (*PostUsersMePasswordNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUsersMePassword",
		Method:             "POST",
		PathPattern:        "/api/v2/users/me/password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersMePasswordReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersMePasswordNoContent), nil

}

/*
PostUsersSearch searches users
*/
func (a *Client) PostUsersSearch(ctx context.Context, params *PostUsersSearchParams) (*PostUsersSearchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUsersSearch",
		Method:             "POST",
		PathPattern:        "/api/v2/users/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersSearchReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersSearchOK), nil

}

/*
PutUserCallforwarding updates a user s call forwarding
*/
func (a *Client) PutUserCallforwarding(ctx context.Context, params *PutUserCallforwardingParams) (*PutUserCallforwardingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUserCallforwarding",
		Method:             "PUT",
		PathPattern:        "/api/v2/users/{userId}/callforwarding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserCallforwardingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUserCallforwardingOK), nil

}

/*
PutUserOutofoffice updates an out of office
*/
func (a *Client) PutUserOutofoffice(ctx context.Context, params *PutUserOutofofficeParams) (*PutUserOutofofficeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUserOutofoffice",
		Method:             "PUT",
		PathPattern:        "/api/v2/users/{userId}/outofoffice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserOutofofficeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUserOutofofficeOK), nil

}

/*
PutUserProfileskills updates profile skills for a user
*/
func (a *Client) PutUserProfileskills(ctx context.Context, params *PutUserProfileskillsParams) (*PutUserProfileskillsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUserProfileskills",
		Method:             "PUT",
		PathPattern:        "/api/v2/users/{userId}/profileskills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserProfileskillsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUserProfileskillsOK), nil

}

/*
PutUserRoutingskill updates routing skill proficiency or state
*/
func (a *Client) PutUserRoutingskill(ctx context.Context, params *PutUserRoutingskillParams) (*PutUserRoutingskillOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUserRoutingskill",
		Method:             "PUT",
		PathPattern:        "/api/v2/users/{userId}/routingskills/{skillId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserRoutingskillReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUserRoutingskillOK), nil

}

/*
PutUserRoutingskillsBulk replaces all routing skills assigned to a user
*/
func (a *Client) PutUserRoutingskillsBulk(ctx context.Context, params *PutUserRoutingskillsBulkParams) (*PutUserRoutingskillsBulkOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUserRoutingskillsBulk",
		Method:             "PUT",
		PathPattern:        "/api/v2/users/{userId}/routingskills/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserRoutingskillsBulkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUserRoutingskillsBulkOK), nil

}

/*
PutUserRoutingstatus updates the routing status of a user
*/
func (a *Client) PutUserRoutingstatus(ctx context.Context, params *PutUserRoutingstatusParams) (*PutUserRoutingstatusOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUserRoutingstatus",
		Method:             "PUT",
		PathPattern:        "/api/v2/users/{userId}/routingstatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserRoutingstatusReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUserRoutingstatusOK), nil

}

/*
PutUserState updates user state information
*/
func (a *Client) PutUserState(ctx context.Context, params *PutUserStateParams) (*PutUserStateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUserState",
		Method:             "PUT",
		PathPattern:        "/api/v2/users/{userId}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserStateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUserStateOK), nil

}

/*
PutUserStationAssociatedstationStationID sets associated station
*/
func (a *Client) PutUserStationAssociatedstationStationID(ctx context.Context, params *PutUserStationAssociatedstationStationIDParams) (*PutUserStationAssociatedstationStationIDAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUserStationAssociatedstationStationId",
		Method:             "PUT",
		PathPattern:        "/api/v2/users/{userId}/station/associatedstation/{stationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserStationAssociatedstationStationIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUserStationAssociatedstationStationIDAccepted), nil

}

/*
PutUserStationDefaultstationStationID sets default station
*/
func (a *Client) PutUserStationDefaultstationStationID(ctx context.Context, params *PutUserStationDefaultstationStationIDParams) (*PutUserStationDefaultstationStationIDAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUserStationDefaultstationStationId",
		Method:             "PUT",
		PathPattern:        "/api/v2/users/{userId}/station/defaultstation/{stationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserStationDefaultstationStationIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUserStationDefaultstationStationIDAccepted), nil

}

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutUserRoutingstatusReader is a Reader for the PutUserRoutingstatus structure.
type PutUserRoutingstatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutUserRoutingstatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutUserRoutingstatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutUserRoutingstatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutUserRoutingstatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutUserRoutingstatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutUserRoutingstatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutUserRoutingstatusRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutUserRoutingstatusUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutUserRoutingstatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutUserRoutingstatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutUserRoutingstatusServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutUserRoutingstatusGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutUserRoutingstatusOK creates a PutUserRoutingstatusOK with default headers values
func NewPutUserRoutingstatusOK() *PutUserRoutingstatusOK {
	return &PutUserRoutingstatusOK{}
}

/*PutUserRoutingstatusOK handles this case with default header values.

successful operation
*/
type PutUserRoutingstatusOK struct {
	Payload *models.RoutingStatus
}

func (o *PutUserRoutingstatusOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/routingstatus][%d] putUserRoutingstatusOK  %+v", 200, o.Payload)
}

func (o *PutUserRoutingstatusOK) GetPayload() *models.RoutingStatus {
	return o.Payload
}

func (o *PutUserRoutingstatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoutingStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserRoutingstatusBadRequest creates a PutUserRoutingstatusBadRequest with default headers values
func NewPutUserRoutingstatusBadRequest() *PutUserRoutingstatusBadRequest {
	return &PutUserRoutingstatusBadRequest{}
}

/*PutUserRoutingstatusBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutUserRoutingstatusBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutUserRoutingstatusBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/routingstatus][%d] putUserRoutingstatusBadRequest  %+v", 400, o.Payload)
}

func (o *PutUserRoutingstatusBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserRoutingstatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserRoutingstatusUnauthorized creates a PutUserRoutingstatusUnauthorized with default headers values
func NewPutUserRoutingstatusUnauthorized() *PutUserRoutingstatusUnauthorized {
	return &PutUserRoutingstatusUnauthorized{}
}

/*PutUserRoutingstatusUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutUserRoutingstatusUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutUserRoutingstatusUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/routingstatus][%d] putUserRoutingstatusUnauthorized  %+v", 401, o.Payload)
}

func (o *PutUserRoutingstatusUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserRoutingstatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserRoutingstatusForbidden creates a PutUserRoutingstatusForbidden with default headers values
func NewPutUserRoutingstatusForbidden() *PutUserRoutingstatusForbidden {
	return &PutUserRoutingstatusForbidden{}
}

/*PutUserRoutingstatusForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutUserRoutingstatusForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutUserRoutingstatusForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/routingstatus][%d] putUserRoutingstatusForbidden  %+v", 403, o.Payload)
}

func (o *PutUserRoutingstatusForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserRoutingstatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserRoutingstatusNotFound creates a PutUserRoutingstatusNotFound with default headers values
func NewPutUserRoutingstatusNotFound() *PutUserRoutingstatusNotFound {
	return &PutUserRoutingstatusNotFound{}
}

/*PutUserRoutingstatusNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutUserRoutingstatusNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutUserRoutingstatusNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/routingstatus][%d] putUserRoutingstatusNotFound  %+v", 404, o.Payload)
}

func (o *PutUserRoutingstatusNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserRoutingstatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserRoutingstatusRequestEntityTooLarge creates a PutUserRoutingstatusRequestEntityTooLarge with default headers values
func NewPutUserRoutingstatusRequestEntityTooLarge() *PutUserRoutingstatusRequestEntityTooLarge {
	return &PutUserRoutingstatusRequestEntityTooLarge{}
}

/*PutUserRoutingstatusRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PutUserRoutingstatusRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutUserRoutingstatusRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/routingstatus][%d] putUserRoutingstatusRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutUserRoutingstatusRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserRoutingstatusRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserRoutingstatusUnsupportedMediaType creates a PutUserRoutingstatusUnsupportedMediaType with default headers values
func NewPutUserRoutingstatusUnsupportedMediaType() *PutUserRoutingstatusUnsupportedMediaType {
	return &PutUserRoutingstatusUnsupportedMediaType{}
}

/*PutUserRoutingstatusUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutUserRoutingstatusUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutUserRoutingstatusUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/routingstatus][%d] putUserRoutingstatusUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutUserRoutingstatusUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserRoutingstatusUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserRoutingstatusTooManyRequests creates a PutUserRoutingstatusTooManyRequests with default headers values
func NewPutUserRoutingstatusTooManyRequests() *PutUserRoutingstatusTooManyRequests {
	return &PutUserRoutingstatusTooManyRequests{}
}

/*PutUserRoutingstatusTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PutUserRoutingstatusTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutUserRoutingstatusTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/routingstatus][%d] putUserRoutingstatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutUserRoutingstatusTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserRoutingstatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserRoutingstatusInternalServerError creates a PutUserRoutingstatusInternalServerError with default headers values
func NewPutUserRoutingstatusInternalServerError() *PutUserRoutingstatusInternalServerError {
	return &PutUserRoutingstatusInternalServerError{}
}

/*PutUserRoutingstatusInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutUserRoutingstatusInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutUserRoutingstatusInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/routingstatus][%d] putUserRoutingstatusInternalServerError  %+v", 500, o.Payload)
}

func (o *PutUserRoutingstatusInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserRoutingstatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserRoutingstatusServiceUnavailable creates a PutUserRoutingstatusServiceUnavailable with default headers values
func NewPutUserRoutingstatusServiceUnavailable() *PutUserRoutingstatusServiceUnavailable {
	return &PutUserRoutingstatusServiceUnavailable{}
}

/*PutUserRoutingstatusServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutUserRoutingstatusServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutUserRoutingstatusServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/routingstatus][%d] putUserRoutingstatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutUserRoutingstatusServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserRoutingstatusServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserRoutingstatusGatewayTimeout creates a PutUserRoutingstatusGatewayTimeout with default headers values
func NewPutUserRoutingstatusGatewayTimeout() *PutUserRoutingstatusGatewayTimeout {
	return &PutUserRoutingstatusGatewayTimeout{}
}

/*PutUserRoutingstatusGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutUserRoutingstatusGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutUserRoutingstatusGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/routingstatus][%d] putUserRoutingstatusGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutUserRoutingstatusGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserRoutingstatusGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

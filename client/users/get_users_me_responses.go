// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetUsersMeReader is a Reader for the GetUsersMe structure.
type GetUsersMeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUsersMeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUsersMeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUsersMeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetUsersMeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUsersMeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUsersMeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetUsersMeRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetUsersMeRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetUsersMeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetUsersMeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUsersMeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetUsersMeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetUsersMeGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUsersMeOK creates a GetUsersMeOK with default headers values
func NewGetUsersMeOK() *GetUsersMeOK {
	return &GetUsersMeOK{}
}

/*GetUsersMeOK handles this case with default header values.

successful operation
*/
type GetUsersMeOK struct {
	Payload *models.UserMe
}

func (o *GetUsersMeOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/me][%d] getUsersMeOK  %+v", 200, o.Payload)
}

func (o *GetUsersMeOK) GetPayload() *models.UserMe {
	return o.Payload
}

func (o *GetUsersMeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserMe)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersMeBadRequest creates a GetUsersMeBadRequest with default headers values
func NewGetUsersMeBadRequest() *GetUsersMeBadRequest {
	return &GetUsersMeBadRequest{}
}

/*GetUsersMeBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetUsersMeBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetUsersMeBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/me][%d] getUsersMeBadRequest  %+v", 400, o.Payload)
}

func (o *GetUsersMeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUsersMeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersMeUnauthorized creates a GetUsersMeUnauthorized with default headers values
func NewGetUsersMeUnauthorized() *GetUsersMeUnauthorized {
	return &GetUsersMeUnauthorized{}
}

/*GetUsersMeUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetUsersMeUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetUsersMeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/me][%d] getUsersMeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUsersMeUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUsersMeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersMeForbidden creates a GetUsersMeForbidden with default headers values
func NewGetUsersMeForbidden() *GetUsersMeForbidden {
	return &GetUsersMeForbidden{}
}

/*GetUsersMeForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetUsersMeForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetUsersMeForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/me][%d] getUsersMeForbidden  %+v", 403, o.Payload)
}

func (o *GetUsersMeForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUsersMeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersMeNotFound creates a GetUsersMeNotFound with default headers values
func NewGetUsersMeNotFound() *GetUsersMeNotFound {
	return &GetUsersMeNotFound{}
}

/*GetUsersMeNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetUsersMeNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetUsersMeNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/me][%d] getUsersMeNotFound  %+v", 404, o.Payload)
}

func (o *GetUsersMeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUsersMeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersMeRequestTimeout creates a GetUsersMeRequestTimeout with default headers values
func NewGetUsersMeRequestTimeout() *GetUsersMeRequestTimeout {
	return &GetUsersMeRequestTimeout{}
}

/*GetUsersMeRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetUsersMeRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetUsersMeRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/me][%d] getUsersMeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetUsersMeRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUsersMeRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersMeRequestEntityTooLarge creates a GetUsersMeRequestEntityTooLarge with default headers values
func NewGetUsersMeRequestEntityTooLarge() *GetUsersMeRequestEntityTooLarge {
	return &GetUsersMeRequestEntityTooLarge{}
}

/*GetUsersMeRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetUsersMeRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetUsersMeRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/me][%d] getUsersMeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetUsersMeRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUsersMeRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersMeUnsupportedMediaType creates a GetUsersMeUnsupportedMediaType with default headers values
func NewGetUsersMeUnsupportedMediaType() *GetUsersMeUnsupportedMediaType {
	return &GetUsersMeUnsupportedMediaType{}
}

/*GetUsersMeUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetUsersMeUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetUsersMeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/me][%d] getUsersMeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetUsersMeUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUsersMeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersMeTooManyRequests creates a GetUsersMeTooManyRequests with default headers values
func NewGetUsersMeTooManyRequests() *GetUsersMeTooManyRequests {
	return &GetUsersMeTooManyRequests{}
}

/*GetUsersMeTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetUsersMeTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetUsersMeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/me][%d] getUsersMeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetUsersMeTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUsersMeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersMeInternalServerError creates a GetUsersMeInternalServerError with default headers values
func NewGetUsersMeInternalServerError() *GetUsersMeInternalServerError {
	return &GetUsersMeInternalServerError{}
}

/*GetUsersMeInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetUsersMeInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetUsersMeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/me][%d] getUsersMeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUsersMeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUsersMeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersMeServiceUnavailable creates a GetUsersMeServiceUnavailable with default headers values
func NewGetUsersMeServiceUnavailable() *GetUsersMeServiceUnavailable {
	return &GetUsersMeServiceUnavailable{}
}

/*GetUsersMeServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetUsersMeServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetUsersMeServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/me][%d] getUsersMeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetUsersMeServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUsersMeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersMeGatewayTimeout creates a GetUsersMeGatewayTimeout with default headers values
func NewGetUsersMeGatewayTimeout() *GetUsersMeGatewayTimeout {
	return &GetUsersMeGatewayTimeout{}
}

/*GetUsersMeGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetUsersMeGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetUsersMeGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/me][%d] getUsersMeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetUsersMeGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUsersMeGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

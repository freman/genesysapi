// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchUserReader is a Reader for the PatchUser structure.
type PatchUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchUserRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchUserConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchUserRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchUserUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchUserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchUserServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchUserGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchUserOK creates a PatchUserOK with default headers values
func NewPatchUserOK() *PatchUserOK {
	return &PatchUserOK{}
}

/*PatchUserOK handles this case with default header values.

successful operation
*/
type PatchUserOK struct {
	Payload *models.User
}

func (o *PatchUserOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}][%d] patchUserOK  %+v", 200, o.Payload)
}

func (o *PatchUserOK) GetPayload() *models.User {
	return o.Payload
}

func (o *PatchUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserBadRequest creates a PatchUserBadRequest with default headers values
func NewPatchUserBadRequest() *PatchUserBadRequest {
	return &PatchUserBadRequest{}
}

/*PatchUserBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchUserBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchUserBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}][%d] patchUserBadRequest  %+v", 400, o.Payload)
}

func (o *PatchUserBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserUnauthorized creates a PatchUserUnauthorized with default headers values
func NewPatchUserUnauthorized() *PatchUserUnauthorized {
	return &PatchUserUnauthorized{}
}

/*PatchUserUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchUserUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchUserUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}][%d] patchUserUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchUserUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserForbidden creates a PatchUserForbidden with default headers values
func NewPatchUserForbidden() *PatchUserForbidden {
	return &PatchUserForbidden{}
}

/*PatchUserForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchUserForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchUserForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}][%d] patchUserForbidden  %+v", 403, o.Payload)
}

func (o *PatchUserForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserNotFound creates a PatchUserNotFound with default headers values
func NewPatchUserNotFound() *PatchUserNotFound {
	return &PatchUserNotFound{}
}

/*PatchUserNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchUserNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchUserNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}][%d] patchUserNotFound  %+v", 404, o.Payload)
}

func (o *PatchUserNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserRequestTimeout creates a PatchUserRequestTimeout with default headers values
func NewPatchUserRequestTimeout() *PatchUserRequestTimeout {
	return &PatchUserRequestTimeout{}
}

/*PatchUserRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchUserRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchUserRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}][%d] patchUserRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchUserRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserConflict creates a PatchUserConflict with default headers values
func NewPatchUserConflict() *PatchUserConflict {
	return &PatchUserConflict{}
}

/*PatchUserConflict handles this case with default header values.

Resource conflict - Unexpected version was provided
*/
type PatchUserConflict struct {
}

func (o *PatchUserConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}][%d] patchUserConflict ", 409)
}

func (o *PatchUserConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchUserRequestEntityTooLarge creates a PatchUserRequestEntityTooLarge with default headers values
func NewPatchUserRequestEntityTooLarge() *PatchUserRequestEntityTooLarge {
	return &PatchUserRequestEntityTooLarge{}
}

/*PatchUserRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PatchUserRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchUserRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}][%d] patchUserRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchUserRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserUnsupportedMediaType creates a PatchUserUnsupportedMediaType with default headers values
func NewPatchUserUnsupportedMediaType() *PatchUserUnsupportedMediaType {
	return &PatchUserUnsupportedMediaType{}
}

/*PatchUserUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchUserUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchUserUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}][%d] patchUserUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchUserUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserTooManyRequests creates a PatchUserTooManyRequests with default headers values
func NewPatchUserTooManyRequests() *PatchUserTooManyRequests {
	return &PatchUserTooManyRequests{}
}

/*PatchUserTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchUserTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchUserTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}][%d] patchUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchUserTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserInternalServerError creates a PatchUserInternalServerError with default headers values
func NewPatchUserInternalServerError() *PatchUserInternalServerError {
	return &PatchUserInternalServerError{}
}

/*PatchUserInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchUserInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchUserInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}][%d] patchUserInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchUserInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserServiceUnavailable creates a PatchUserServiceUnavailable with default headers values
func NewPatchUserServiceUnavailable() *PatchUserServiceUnavailable {
	return &PatchUserServiceUnavailable{}
}

/*PatchUserServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchUserServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchUserServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}][%d] patchUserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchUserServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserGatewayTimeout creates a PatchUserGatewayTimeout with default headers values
func NewPatchUserGatewayTimeout() *PatchUserGatewayTimeout {
	return &PatchUserGatewayTimeout{}
}

/*PatchUserGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchUserGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchUserGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}][%d] patchUserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchUserGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetUserRoutingstatusReader is a Reader for the GetUserRoutingstatus structure.
type GetUserRoutingstatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserRoutingstatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserRoutingstatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserRoutingstatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetUserRoutingstatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserRoutingstatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserRoutingstatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetUserRoutingstatusRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetUserRoutingstatusRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetUserRoutingstatusUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetUserRoutingstatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUserRoutingstatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetUserRoutingstatusServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetUserRoutingstatusGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUserRoutingstatusOK creates a GetUserRoutingstatusOK with default headers values
func NewGetUserRoutingstatusOK() *GetUserRoutingstatusOK {
	return &GetUserRoutingstatusOK{}
}

/*GetUserRoutingstatusOK handles this case with default header values.

successful operation
*/
type GetUserRoutingstatusOK struct {
	Payload *models.RoutingStatus
}

func (o *GetUserRoutingstatusOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/routingstatus][%d] getUserRoutingstatusOK  %+v", 200, o.Payload)
}

func (o *GetUserRoutingstatusOK) GetPayload() *models.RoutingStatus {
	return o.Payload
}

func (o *GetUserRoutingstatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoutingStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRoutingstatusBadRequest creates a GetUserRoutingstatusBadRequest with default headers values
func NewGetUserRoutingstatusBadRequest() *GetUserRoutingstatusBadRequest {
	return &GetUserRoutingstatusBadRequest{}
}

/*GetUserRoutingstatusBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetUserRoutingstatusBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetUserRoutingstatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/routingstatus][%d] getUserRoutingstatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserRoutingstatusBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserRoutingstatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRoutingstatusUnauthorized creates a GetUserRoutingstatusUnauthorized with default headers values
func NewGetUserRoutingstatusUnauthorized() *GetUserRoutingstatusUnauthorized {
	return &GetUserRoutingstatusUnauthorized{}
}

/*GetUserRoutingstatusUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetUserRoutingstatusUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetUserRoutingstatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/routingstatus][%d] getUserRoutingstatusUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserRoutingstatusUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserRoutingstatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRoutingstatusForbidden creates a GetUserRoutingstatusForbidden with default headers values
func NewGetUserRoutingstatusForbidden() *GetUserRoutingstatusForbidden {
	return &GetUserRoutingstatusForbidden{}
}

/*GetUserRoutingstatusForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetUserRoutingstatusForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetUserRoutingstatusForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/routingstatus][%d] getUserRoutingstatusForbidden  %+v", 403, o.Payload)
}

func (o *GetUserRoutingstatusForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserRoutingstatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRoutingstatusNotFound creates a GetUserRoutingstatusNotFound with default headers values
func NewGetUserRoutingstatusNotFound() *GetUserRoutingstatusNotFound {
	return &GetUserRoutingstatusNotFound{}
}

/*GetUserRoutingstatusNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetUserRoutingstatusNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetUserRoutingstatusNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/routingstatus][%d] getUserRoutingstatusNotFound  %+v", 404, o.Payload)
}

func (o *GetUserRoutingstatusNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserRoutingstatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRoutingstatusRequestTimeout creates a GetUserRoutingstatusRequestTimeout with default headers values
func NewGetUserRoutingstatusRequestTimeout() *GetUserRoutingstatusRequestTimeout {
	return &GetUserRoutingstatusRequestTimeout{}
}

/*GetUserRoutingstatusRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetUserRoutingstatusRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetUserRoutingstatusRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/routingstatus][%d] getUserRoutingstatusRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetUserRoutingstatusRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserRoutingstatusRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRoutingstatusRequestEntityTooLarge creates a GetUserRoutingstatusRequestEntityTooLarge with default headers values
func NewGetUserRoutingstatusRequestEntityTooLarge() *GetUserRoutingstatusRequestEntityTooLarge {
	return &GetUserRoutingstatusRequestEntityTooLarge{}
}

/*GetUserRoutingstatusRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetUserRoutingstatusRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetUserRoutingstatusRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/routingstatus][%d] getUserRoutingstatusRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetUserRoutingstatusRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserRoutingstatusRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRoutingstatusUnsupportedMediaType creates a GetUserRoutingstatusUnsupportedMediaType with default headers values
func NewGetUserRoutingstatusUnsupportedMediaType() *GetUserRoutingstatusUnsupportedMediaType {
	return &GetUserRoutingstatusUnsupportedMediaType{}
}

/*GetUserRoutingstatusUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetUserRoutingstatusUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetUserRoutingstatusUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/routingstatus][%d] getUserRoutingstatusUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetUserRoutingstatusUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserRoutingstatusUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRoutingstatusTooManyRequests creates a GetUserRoutingstatusTooManyRequests with default headers values
func NewGetUserRoutingstatusTooManyRequests() *GetUserRoutingstatusTooManyRequests {
	return &GetUserRoutingstatusTooManyRequests{}
}

/*GetUserRoutingstatusTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetUserRoutingstatusTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetUserRoutingstatusTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/routingstatus][%d] getUserRoutingstatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetUserRoutingstatusTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserRoutingstatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRoutingstatusInternalServerError creates a GetUserRoutingstatusInternalServerError with default headers values
func NewGetUserRoutingstatusInternalServerError() *GetUserRoutingstatusInternalServerError {
	return &GetUserRoutingstatusInternalServerError{}
}

/*GetUserRoutingstatusInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetUserRoutingstatusInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetUserRoutingstatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/routingstatus][%d] getUserRoutingstatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUserRoutingstatusInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserRoutingstatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRoutingstatusServiceUnavailable creates a GetUserRoutingstatusServiceUnavailable with default headers values
func NewGetUserRoutingstatusServiceUnavailable() *GetUserRoutingstatusServiceUnavailable {
	return &GetUserRoutingstatusServiceUnavailable{}
}

/*GetUserRoutingstatusServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetUserRoutingstatusServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetUserRoutingstatusServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/routingstatus][%d] getUserRoutingstatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetUserRoutingstatusServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserRoutingstatusServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRoutingstatusGatewayTimeout creates a GetUserRoutingstatusGatewayTimeout with default headers values
func NewGetUserRoutingstatusGatewayTimeout() *GetUserRoutingstatusGatewayTimeout {
	return &GetUserRoutingstatusGatewayTimeout{}
}

/*GetUserRoutingstatusGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetUserRoutingstatusGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetUserRoutingstatusGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/users/{userId}/routingstatus][%d] getUserRoutingstatusGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetUserRoutingstatusGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserRoutingstatusGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

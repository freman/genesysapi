// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetUserProfileParams creates a new GetUserProfileParams object
// with the default values initialized.
func NewGetUserProfileParams() *GetUserProfileParams {
	var ()
	return &GetUserProfileParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUserProfileParamsWithTimeout creates a new GetUserProfileParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUserProfileParamsWithTimeout(timeout time.Duration) *GetUserProfileParams {
	var ()
	return &GetUserProfileParams{

		timeout: timeout,
	}
}

// NewGetUserProfileParamsWithContext creates a new GetUserProfileParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUserProfileParamsWithContext(ctx context.Context) *GetUserProfileParams {
	var ()
	return &GetUserProfileParams{

		Context: ctx,
	}
}

// NewGetUserProfileParamsWithHTTPClient creates a new GetUserProfileParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUserProfileParamsWithHTTPClient(client *http.Client) *GetUserProfileParams {
	var ()
	return &GetUserProfileParams{
		HTTPClient: client,
	}
}

/*GetUserProfileParams contains all the parameters to send to the API endpoint
for the get user profile operation typically these are written to a http.Request
*/
type GetUserProfileParams struct {

	/*Expand
	  Which fields, if any, to expand

	*/
	Expand []string
	/*IntegrationPresenceSource
	  Gets an integration presence for a user instead of their default.

	*/
	IntegrationPresenceSource *string
	/*UserID
	  userId

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get user profile params
func (o *GetUserProfileParams) WithTimeout(timeout time.Duration) *GetUserProfileParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get user profile params
func (o *GetUserProfileParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get user profile params
func (o *GetUserProfileParams) WithContext(ctx context.Context) *GetUserProfileParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get user profile params
func (o *GetUserProfileParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get user profile params
func (o *GetUserProfileParams) WithHTTPClient(client *http.Client) *GetUserProfileParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get user profile params
func (o *GetUserProfileParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExpand adds the expand to the get user profile params
func (o *GetUserProfileParams) WithExpand(expand []string) *GetUserProfileParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get user profile params
func (o *GetUserProfileParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithIntegrationPresenceSource adds the integrationPresenceSource to the get user profile params
func (o *GetUserProfileParams) WithIntegrationPresenceSource(integrationPresenceSource *string) *GetUserProfileParams {
	o.SetIntegrationPresenceSource(integrationPresenceSource)
	return o
}

// SetIntegrationPresenceSource adds the integrationPresenceSource to the get user profile params
func (o *GetUserProfileParams) SetIntegrationPresenceSource(integrationPresenceSource *string) {
	o.IntegrationPresenceSource = integrationPresenceSource
}

// WithUserID adds the userID to the get user profile params
func (o *GetUserProfileParams) WithUserID(userID string) *GetUserProfileParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get user profile params
func (o *GetUserProfileParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserProfileParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesExpand := o.Expand

	joinedExpand := swag.JoinByFormat(valuesExpand, "multi")
	// query array param expand
	if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
		return err
	}

	if o.IntegrationPresenceSource != nil {

		// query param integrationPresenceSource
		var qrIntegrationPresenceSource string
		if o.IntegrationPresenceSource != nil {
			qrIntegrationPresenceSource = *o.IntegrationPresenceSource
		}
		qIntegrationPresenceSource := qrIntegrationPresenceSource
		if qIntegrationPresenceSource != "" {
			if err := r.SetQueryParam("integrationPresenceSource", qIntegrationPresenceSource); err != nil {
				return err
			}
		}

	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutUserStateReader is a Reader for the PutUserState structure.
type PutUserStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutUserStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutUserStateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutUserStateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutUserStateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutUserStateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutUserStateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutUserStateRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutUserStateRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutUserStateUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutUserStateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutUserStateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutUserStateServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutUserStateGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutUserStateOK creates a PutUserStateOK with default headers values
func NewPutUserStateOK() *PutUserStateOK {
	return &PutUserStateOK{}
}

/*PutUserStateOK handles this case with default header values.

successful operation
*/
type PutUserStateOK struct {
	Payload *models.UserState
}

func (o *PutUserStateOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/state][%d] putUserStateOK  %+v", 200, o.Payload)
}

func (o *PutUserStateOK) GetPayload() *models.UserState {
	return o.Payload
}

func (o *PutUserStateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserState)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserStateBadRequest creates a PutUserStateBadRequest with default headers values
func NewPutUserStateBadRequest() *PutUserStateBadRequest {
	return &PutUserStateBadRequest{}
}

/*PutUserStateBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutUserStateBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutUserStateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/state][%d] putUserStateBadRequest  %+v", 400, o.Payload)
}

func (o *PutUserStateBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserStateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserStateUnauthorized creates a PutUserStateUnauthorized with default headers values
func NewPutUserStateUnauthorized() *PutUserStateUnauthorized {
	return &PutUserStateUnauthorized{}
}

/*PutUserStateUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutUserStateUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutUserStateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/state][%d] putUserStateUnauthorized  %+v", 401, o.Payload)
}

func (o *PutUserStateUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserStateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserStateForbidden creates a PutUserStateForbidden with default headers values
func NewPutUserStateForbidden() *PutUserStateForbidden {
	return &PutUserStateForbidden{}
}

/*PutUserStateForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutUserStateForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutUserStateForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/state][%d] putUserStateForbidden  %+v", 403, o.Payload)
}

func (o *PutUserStateForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserStateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserStateNotFound creates a PutUserStateNotFound with default headers values
func NewPutUserStateNotFound() *PutUserStateNotFound {
	return &PutUserStateNotFound{}
}

/*PutUserStateNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutUserStateNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutUserStateNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/state][%d] putUserStateNotFound  %+v", 404, o.Payload)
}

func (o *PutUserStateNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserStateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserStateRequestTimeout creates a PutUserStateRequestTimeout with default headers values
func NewPutUserStateRequestTimeout() *PutUserStateRequestTimeout {
	return &PutUserStateRequestTimeout{}
}

/*PutUserStateRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutUserStateRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutUserStateRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/state][%d] putUserStateRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutUserStateRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserStateRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserStateRequestEntityTooLarge creates a PutUserStateRequestEntityTooLarge with default headers values
func NewPutUserStateRequestEntityTooLarge() *PutUserStateRequestEntityTooLarge {
	return &PutUserStateRequestEntityTooLarge{}
}

/*PutUserStateRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PutUserStateRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutUserStateRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/state][%d] putUserStateRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutUserStateRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserStateRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserStateUnsupportedMediaType creates a PutUserStateUnsupportedMediaType with default headers values
func NewPutUserStateUnsupportedMediaType() *PutUserStateUnsupportedMediaType {
	return &PutUserStateUnsupportedMediaType{}
}

/*PutUserStateUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutUserStateUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutUserStateUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/state][%d] putUserStateUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutUserStateUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserStateUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserStateTooManyRequests creates a PutUserStateTooManyRequests with default headers values
func NewPutUserStateTooManyRequests() *PutUserStateTooManyRequests {
	return &PutUserStateTooManyRequests{}
}

/*PutUserStateTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutUserStateTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutUserStateTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/state][%d] putUserStateTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutUserStateTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserStateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserStateInternalServerError creates a PutUserStateInternalServerError with default headers values
func NewPutUserStateInternalServerError() *PutUserStateInternalServerError {
	return &PutUserStateInternalServerError{}
}

/*PutUserStateInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutUserStateInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutUserStateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/state][%d] putUserStateInternalServerError  %+v", 500, o.Payload)
}

func (o *PutUserStateInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserStateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserStateServiceUnavailable creates a PutUserStateServiceUnavailable with default headers values
func NewPutUserStateServiceUnavailable() *PutUserStateServiceUnavailable {
	return &PutUserStateServiceUnavailable{}
}

/*PutUserStateServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutUserStateServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutUserStateServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/state][%d] putUserStateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutUserStateServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserStateServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserStateGatewayTimeout creates a PutUserStateGatewayTimeout with default headers values
func NewPutUserStateGatewayTimeout() *PutUserStateGatewayTimeout {
	return &PutUserStateGatewayTimeout{}
}

/*PutUserStateGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutUserStateGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutUserStateGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/state][%d] putUserStateGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutUserStateGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserStateGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostUsersReader is a Reader for the PostUsers structure.
type PostUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostUsersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostUsersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostUsersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostUsersRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostUsersConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostUsersRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostUsersUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostUsersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostUsersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostUsersServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostUsersGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostUsersOK creates a PostUsersOK with default headers values
func NewPostUsersOK() *PostUsersOK {
	return &PostUsersOK{}
}

/*
PostUsersOK describes a response with status code 200, with default header values.

successful operation
*/
type PostUsersOK struct {
	Payload *models.User
}

// IsSuccess returns true when this post users o k response has a 2xx status code
func (o *PostUsersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post users o k response has a 3xx status code
func (o *PostUsersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users o k response has a 4xx status code
func (o *PostUsersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post users o k response has a 5xx status code
func (o *PostUsersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post users o k response a status code equal to that given
func (o *PostUsersOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostUsersOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersOK  %+v", 200, o.Payload)
}

func (o *PostUsersOK) String() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersOK  %+v", 200, o.Payload)
}

func (o *PostUsersOK) GetPayload() *models.User {
	return o.Payload
}

func (o *PostUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersBadRequest creates a PostUsersBadRequest with default headers values
func NewPostUsersBadRequest() *PostUsersBadRequest {
	return &PostUsersBadRequest{}
}

/*
PostUsersBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostUsersBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post users bad request response has a 2xx status code
func (o *PostUsersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post users bad request response has a 3xx status code
func (o *PostUsersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users bad request response has a 4xx status code
func (o *PostUsersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post users bad request response has a 5xx status code
func (o *PostUsersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post users bad request response a status code equal to that given
func (o *PostUsersBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostUsersBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersBadRequest  %+v", 400, o.Payload)
}

func (o *PostUsersBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersBadRequest  %+v", 400, o.Payload)
}

func (o *PostUsersBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersUnauthorized creates a PostUsersUnauthorized with default headers values
func NewPostUsersUnauthorized() *PostUsersUnauthorized {
	return &PostUsersUnauthorized{}
}

/*
PostUsersUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostUsersUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post users unauthorized response has a 2xx status code
func (o *PostUsersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post users unauthorized response has a 3xx status code
func (o *PostUsersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users unauthorized response has a 4xx status code
func (o *PostUsersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post users unauthorized response has a 5xx status code
func (o *PostUsersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post users unauthorized response a status code equal to that given
func (o *PostUsersUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostUsersUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersUnauthorized  %+v", 401, o.Payload)
}

func (o *PostUsersUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersUnauthorized  %+v", 401, o.Payload)
}

func (o *PostUsersUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersForbidden creates a PostUsersForbidden with default headers values
func NewPostUsersForbidden() *PostUsersForbidden {
	return &PostUsersForbidden{}
}

/*
PostUsersForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostUsersForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post users forbidden response has a 2xx status code
func (o *PostUsersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post users forbidden response has a 3xx status code
func (o *PostUsersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users forbidden response has a 4xx status code
func (o *PostUsersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post users forbidden response has a 5xx status code
func (o *PostUsersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post users forbidden response a status code equal to that given
func (o *PostUsersForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostUsersForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersForbidden  %+v", 403, o.Payload)
}

func (o *PostUsersForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersForbidden  %+v", 403, o.Payload)
}

func (o *PostUsersForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersNotFound creates a PostUsersNotFound with default headers values
func NewPostUsersNotFound() *PostUsersNotFound {
	return &PostUsersNotFound{}
}

/*
PostUsersNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostUsersNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post users not found response has a 2xx status code
func (o *PostUsersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post users not found response has a 3xx status code
func (o *PostUsersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users not found response has a 4xx status code
func (o *PostUsersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post users not found response has a 5xx status code
func (o *PostUsersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post users not found response a status code equal to that given
func (o *PostUsersNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostUsersNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersNotFound  %+v", 404, o.Payload)
}

func (o *PostUsersNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersNotFound  %+v", 404, o.Payload)
}

func (o *PostUsersNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersRequestTimeout creates a PostUsersRequestTimeout with default headers values
func NewPostUsersRequestTimeout() *PostUsersRequestTimeout {
	return &PostUsersRequestTimeout{}
}

/*
PostUsersRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostUsersRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post users request timeout response has a 2xx status code
func (o *PostUsersRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post users request timeout response has a 3xx status code
func (o *PostUsersRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users request timeout response has a 4xx status code
func (o *PostUsersRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post users request timeout response has a 5xx status code
func (o *PostUsersRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post users request timeout response a status code equal to that given
func (o *PostUsersRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostUsersRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostUsersRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostUsersRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsersRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersConflict creates a PostUsersConflict with default headers values
func NewPostUsersConflict() *PostUsersConflict {
	return &PostUsersConflict{}
}

/*
PostUsersConflict describes a response with status code 409, with default header values.

Conflict
*/
type PostUsersConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post users conflict response has a 2xx status code
func (o *PostUsersConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post users conflict response has a 3xx status code
func (o *PostUsersConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users conflict response has a 4xx status code
func (o *PostUsersConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post users conflict response has a 5xx status code
func (o *PostUsersConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post users conflict response a status code equal to that given
func (o *PostUsersConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PostUsersConflict) Error() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersConflict  %+v", 409, o.Payload)
}

func (o *PostUsersConflict) String() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersConflict  %+v", 409, o.Payload)
}

func (o *PostUsersConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsersConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersRequestEntityTooLarge creates a PostUsersRequestEntityTooLarge with default headers values
func NewPostUsersRequestEntityTooLarge() *PostUsersRequestEntityTooLarge {
	return &PostUsersRequestEntityTooLarge{}
}

/*
PostUsersRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostUsersRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post users request entity too large response has a 2xx status code
func (o *PostUsersRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post users request entity too large response has a 3xx status code
func (o *PostUsersRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users request entity too large response has a 4xx status code
func (o *PostUsersRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post users request entity too large response has a 5xx status code
func (o *PostUsersRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post users request entity too large response a status code equal to that given
func (o *PostUsersRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostUsersRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostUsersRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostUsersRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsersRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersUnsupportedMediaType creates a PostUsersUnsupportedMediaType with default headers values
func NewPostUsersUnsupportedMediaType() *PostUsersUnsupportedMediaType {
	return &PostUsersUnsupportedMediaType{}
}

/*
PostUsersUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostUsersUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post users unsupported media type response has a 2xx status code
func (o *PostUsersUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post users unsupported media type response has a 3xx status code
func (o *PostUsersUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users unsupported media type response has a 4xx status code
func (o *PostUsersUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post users unsupported media type response has a 5xx status code
func (o *PostUsersUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post users unsupported media type response a status code equal to that given
func (o *PostUsersUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostUsersUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostUsersUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostUsersUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsersUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersTooManyRequests creates a PostUsersTooManyRequests with default headers values
func NewPostUsersTooManyRequests() *PostUsersTooManyRequests {
	return &PostUsersTooManyRequests{}
}

/*
PostUsersTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostUsersTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post users too many requests response has a 2xx status code
func (o *PostUsersTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post users too many requests response has a 3xx status code
func (o *PostUsersTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users too many requests response has a 4xx status code
func (o *PostUsersTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post users too many requests response has a 5xx status code
func (o *PostUsersTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post users too many requests response a status code equal to that given
func (o *PostUsersTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostUsersTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostUsersTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostUsersTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersInternalServerError creates a PostUsersInternalServerError with default headers values
func NewPostUsersInternalServerError() *PostUsersInternalServerError {
	return &PostUsersInternalServerError{}
}

/*
PostUsersInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostUsersInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post users internal server error response has a 2xx status code
func (o *PostUsersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post users internal server error response has a 3xx status code
func (o *PostUsersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users internal server error response has a 4xx status code
func (o *PostUsersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post users internal server error response has a 5xx status code
func (o *PostUsersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post users internal server error response a status code equal to that given
func (o *PostUsersInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostUsersInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUsersInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUsersInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersServiceUnavailable creates a PostUsersServiceUnavailable with default headers values
func NewPostUsersServiceUnavailable() *PostUsersServiceUnavailable {
	return &PostUsersServiceUnavailable{}
}

/*
PostUsersServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostUsersServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post users service unavailable response has a 2xx status code
func (o *PostUsersServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post users service unavailable response has a 3xx status code
func (o *PostUsersServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users service unavailable response has a 4xx status code
func (o *PostUsersServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post users service unavailable response has a 5xx status code
func (o *PostUsersServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post users service unavailable response a status code equal to that given
func (o *PostUsersServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostUsersServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostUsersServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostUsersServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsersServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersGatewayTimeout creates a PostUsersGatewayTimeout with default headers values
func NewPostUsersGatewayTimeout() *PostUsersGatewayTimeout {
	return &PostUsersGatewayTimeout{}
}

/*
PostUsersGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostUsersGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post users gateway timeout response has a 2xx status code
func (o *PostUsersGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post users gateway timeout response has a 3xx status code
func (o *PostUsersGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users gateway timeout response has a 4xx status code
func (o *PostUsersGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post users gateway timeout response has a 5xx status code
func (o *PostUsersGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post users gateway timeout response a status code equal to that given
func (o *PostUsersGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostUsersGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostUsersGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/users][%d] postUsersGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostUsersGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsersGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

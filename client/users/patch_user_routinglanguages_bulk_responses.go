// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchUserRoutinglanguagesBulkReader is a Reader for the PatchUserRoutinglanguagesBulk structure.
type PatchUserRoutinglanguagesBulkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchUserRoutinglanguagesBulkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchUserRoutinglanguagesBulkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchUserRoutinglanguagesBulkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchUserRoutinglanguagesBulkUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchUserRoutinglanguagesBulkForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchUserRoutinglanguagesBulkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchUserRoutinglanguagesBulkRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchUserRoutinglanguagesBulkRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchUserRoutinglanguagesBulkUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchUserRoutinglanguagesBulkTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchUserRoutinglanguagesBulkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchUserRoutinglanguagesBulkServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchUserRoutinglanguagesBulkGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchUserRoutinglanguagesBulkOK creates a PatchUserRoutinglanguagesBulkOK with default headers values
func NewPatchUserRoutinglanguagesBulkOK() *PatchUserRoutinglanguagesBulkOK {
	return &PatchUserRoutinglanguagesBulkOK{}
}

/*
PatchUserRoutinglanguagesBulkOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchUserRoutinglanguagesBulkOK struct {
	Payload *models.UserLanguageEntityListing
}

// IsSuccess returns true when this patch user routinglanguages bulk o k response has a 2xx status code
func (o *PatchUserRoutinglanguagesBulkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch user routinglanguages bulk o k response has a 3xx status code
func (o *PatchUserRoutinglanguagesBulkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user routinglanguages bulk o k response has a 4xx status code
func (o *PatchUserRoutinglanguagesBulkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch user routinglanguages bulk o k response has a 5xx status code
func (o *PatchUserRoutinglanguagesBulkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user routinglanguages bulk o k response a status code equal to that given
func (o *PatchUserRoutinglanguagesBulkOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchUserRoutinglanguagesBulkOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkOK  %+v", 200, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkOK  %+v", 200, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkOK) GetPayload() *models.UserLanguageEntityListing {
	return o.Payload
}

func (o *PatchUserRoutinglanguagesBulkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserLanguageEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserRoutinglanguagesBulkBadRequest creates a PatchUserRoutinglanguagesBulkBadRequest with default headers values
func NewPatchUserRoutinglanguagesBulkBadRequest() *PatchUserRoutinglanguagesBulkBadRequest {
	return &PatchUserRoutinglanguagesBulkBadRequest{}
}

/*
PatchUserRoutinglanguagesBulkBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchUserRoutinglanguagesBulkBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user routinglanguages bulk bad request response has a 2xx status code
func (o *PatchUserRoutinglanguagesBulkBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user routinglanguages bulk bad request response has a 3xx status code
func (o *PatchUserRoutinglanguagesBulkBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user routinglanguages bulk bad request response has a 4xx status code
func (o *PatchUserRoutinglanguagesBulkBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user routinglanguages bulk bad request response has a 5xx status code
func (o *PatchUserRoutinglanguagesBulkBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user routinglanguages bulk bad request response a status code equal to that given
func (o *PatchUserRoutinglanguagesBulkBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchUserRoutinglanguagesBulkBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkBadRequest  %+v", 400, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkBadRequest  %+v", 400, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserRoutinglanguagesBulkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserRoutinglanguagesBulkUnauthorized creates a PatchUserRoutinglanguagesBulkUnauthorized with default headers values
func NewPatchUserRoutinglanguagesBulkUnauthorized() *PatchUserRoutinglanguagesBulkUnauthorized {
	return &PatchUserRoutinglanguagesBulkUnauthorized{}
}

/*
PatchUserRoutinglanguagesBulkUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchUserRoutinglanguagesBulkUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user routinglanguages bulk unauthorized response has a 2xx status code
func (o *PatchUserRoutinglanguagesBulkUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user routinglanguages bulk unauthorized response has a 3xx status code
func (o *PatchUserRoutinglanguagesBulkUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user routinglanguages bulk unauthorized response has a 4xx status code
func (o *PatchUserRoutinglanguagesBulkUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user routinglanguages bulk unauthorized response has a 5xx status code
func (o *PatchUserRoutinglanguagesBulkUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user routinglanguages bulk unauthorized response a status code equal to that given
func (o *PatchUserRoutinglanguagesBulkUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchUserRoutinglanguagesBulkUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserRoutinglanguagesBulkUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserRoutinglanguagesBulkForbidden creates a PatchUserRoutinglanguagesBulkForbidden with default headers values
func NewPatchUserRoutinglanguagesBulkForbidden() *PatchUserRoutinglanguagesBulkForbidden {
	return &PatchUserRoutinglanguagesBulkForbidden{}
}

/*
PatchUserRoutinglanguagesBulkForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchUserRoutinglanguagesBulkForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user routinglanguages bulk forbidden response has a 2xx status code
func (o *PatchUserRoutinglanguagesBulkForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user routinglanguages bulk forbidden response has a 3xx status code
func (o *PatchUserRoutinglanguagesBulkForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user routinglanguages bulk forbidden response has a 4xx status code
func (o *PatchUserRoutinglanguagesBulkForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user routinglanguages bulk forbidden response has a 5xx status code
func (o *PatchUserRoutinglanguagesBulkForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user routinglanguages bulk forbidden response a status code equal to that given
func (o *PatchUserRoutinglanguagesBulkForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchUserRoutinglanguagesBulkForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkForbidden  %+v", 403, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkForbidden  %+v", 403, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserRoutinglanguagesBulkForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserRoutinglanguagesBulkNotFound creates a PatchUserRoutinglanguagesBulkNotFound with default headers values
func NewPatchUserRoutinglanguagesBulkNotFound() *PatchUserRoutinglanguagesBulkNotFound {
	return &PatchUserRoutinglanguagesBulkNotFound{}
}

/*
PatchUserRoutinglanguagesBulkNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchUserRoutinglanguagesBulkNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user routinglanguages bulk not found response has a 2xx status code
func (o *PatchUserRoutinglanguagesBulkNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user routinglanguages bulk not found response has a 3xx status code
func (o *PatchUserRoutinglanguagesBulkNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user routinglanguages bulk not found response has a 4xx status code
func (o *PatchUserRoutinglanguagesBulkNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user routinglanguages bulk not found response has a 5xx status code
func (o *PatchUserRoutinglanguagesBulkNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user routinglanguages bulk not found response a status code equal to that given
func (o *PatchUserRoutinglanguagesBulkNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchUserRoutinglanguagesBulkNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkNotFound  %+v", 404, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkNotFound  %+v", 404, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserRoutinglanguagesBulkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserRoutinglanguagesBulkRequestTimeout creates a PatchUserRoutinglanguagesBulkRequestTimeout with default headers values
func NewPatchUserRoutinglanguagesBulkRequestTimeout() *PatchUserRoutinglanguagesBulkRequestTimeout {
	return &PatchUserRoutinglanguagesBulkRequestTimeout{}
}

/*
PatchUserRoutinglanguagesBulkRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchUserRoutinglanguagesBulkRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user routinglanguages bulk request timeout response has a 2xx status code
func (o *PatchUserRoutinglanguagesBulkRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user routinglanguages bulk request timeout response has a 3xx status code
func (o *PatchUserRoutinglanguagesBulkRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user routinglanguages bulk request timeout response has a 4xx status code
func (o *PatchUserRoutinglanguagesBulkRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user routinglanguages bulk request timeout response has a 5xx status code
func (o *PatchUserRoutinglanguagesBulkRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user routinglanguages bulk request timeout response a status code equal to that given
func (o *PatchUserRoutinglanguagesBulkRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchUserRoutinglanguagesBulkRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserRoutinglanguagesBulkRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserRoutinglanguagesBulkRequestEntityTooLarge creates a PatchUserRoutinglanguagesBulkRequestEntityTooLarge with default headers values
func NewPatchUserRoutinglanguagesBulkRequestEntityTooLarge() *PatchUserRoutinglanguagesBulkRequestEntityTooLarge {
	return &PatchUserRoutinglanguagesBulkRequestEntityTooLarge{}
}

/*
PatchUserRoutinglanguagesBulkRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchUserRoutinglanguagesBulkRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user routinglanguages bulk request entity too large response has a 2xx status code
func (o *PatchUserRoutinglanguagesBulkRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user routinglanguages bulk request entity too large response has a 3xx status code
func (o *PatchUserRoutinglanguagesBulkRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user routinglanguages bulk request entity too large response has a 4xx status code
func (o *PatchUserRoutinglanguagesBulkRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user routinglanguages bulk request entity too large response has a 5xx status code
func (o *PatchUserRoutinglanguagesBulkRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user routinglanguages bulk request entity too large response a status code equal to that given
func (o *PatchUserRoutinglanguagesBulkRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchUserRoutinglanguagesBulkRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserRoutinglanguagesBulkRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserRoutinglanguagesBulkUnsupportedMediaType creates a PatchUserRoutinglanguagesBulkUnsupportedMediaType with default headers values
func NewPatchUserRoutinglanguagesBulkUnsupportedMediaType() *PatchUserRoutinglanguagesBulkUnsupportedMediaType {
	return &PatchUserRoutinglanguagesBulkUnsupportedMediaType{}
}

/*
PatchUserRoutinglanguagesBulkUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchUserRoutinglanguagesBulkUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user routinglanguages bulk unsupported media type response has a 2xx status code
func (o *PatchUserRoutinglanguagesBulkUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user routinglanguages bulk unsupported media type response has a 3xx status code
func (o *PatchUserRoutinglanguagesBulkUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user routinglanguages bulk unsupported media type response has a 4xx status code
func (o *PatchUserRoutinglanguagesBulkUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user routinglanguages bulk unsupported media type response has a 5xx status code
func (o *PatchUserRoutinglanguagesBulkUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user routinglanguages bulk unsupported media type response a status code equal to that given
func (o *PatchUserRoutinglanguagesBulkUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchUserRoutinglanguagesBulkUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserRoutinglanguagesBulkUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserRoutinglanguagesBulkTooManyRequests creates a PatchUserRoutinglanguagesBulkTooManyRequests with default headers values
func NewPatchUserRoutinglanguagesBulkTooManyRequests() *PatchUserRoutinglanguagesBulkTooManyRequests {
	return &PatchUserRoutinglanguagesBulkTooManyRequests{}
}

/*
PatchUserRoutinglanguagesBulkTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchUserRoutinglanguagesBulkTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user routinglanguages bulk too many requests response has a 2xx status code
func (o *PatchUserRoutinglanguagesBulkTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user routinglanguages bulk too many requests response has a 3xx status code
func (o *PatchUserRoutinglanguagesBulkTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user routinglanguages bulk too many requests response has a 4xx status code
func (o *PatchUserRoutinglanguagesBulkTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user routinglanguages bulk too many requests response has a 5xx status code
func (o *PatchUserRoutinglanguagesBulkTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user routinglanguages bulk too many requests response a status code equal to that given
func (o *PatchUserRoutinglanguagesBulkTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchUserRoutinglanguagesBulkTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserRoutinglanguagesBulkTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserRoutinglanguagesBulkInternalServerError creates a PatchUserRoutinglanguagesBulkInternalServerError with default headers values
func NewPatchUserRoutinglanguagesBulkInternalServerError() *PatchUserRoutinglanguagesBulkInternalServerError {
	return &PatchUserRoutinglanguagesBulkInternalServerError{}
}

/*
PatchUserRoutinglanguagesBulkInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchUserRoutinglanguagesBulkInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user routinglanguages bulk internal server error response has a 2xx status code
func (o *PatchUserRoutinglanguagesBulkInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user routinglanguages bulk internal server error response has a 3xx status code
func (o *PatchUserRoutinglanguagesBulkInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user routinglanguages bulk internal server error response has a 4xx status code
func (o *PatchUserRoutinglanguagesBulkInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch user routinglanguages bulk internal server error response has a 5xx status code
func (o *PatchUserRoutinglanguagesBulkInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch user routinglanguages bulk internal server error response a status code equal to that given
func (o *PatchUserRoutinglanguagesBulkInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchUserRoutinglanguagesBulkInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserRoutinglanguagesBulkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserRoutinglanguagesBulkServiceUnavailable creates a PatchUserRoutinglanguagesBulkServiceUnavailable with default headers values
func NewPatchUserRoutinglanguagesBulkServiceUnavailable() *PatchUserRoutinglanguagesBulkServiceUnavailable {
	return &PatchUserRoutinglanguagesBulkServiceUnavailable{}
}

/*
PatchUserRoutinglanguagesBulkServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchUserRoutinglanguagesBulkServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user routinglanguages bulk service unavailable response has a 2xx status code
func (o *PatchUserRoutinglanguagesBulkServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user routinglanguages bulk service unavailable response has a 3xx status code
func (o *PatchUserRoutinglanguagesBulkServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user routinglanguages bulk service unavailable response has a 4xx status code
func (o *PatchUserRoutinglanguagesBulkServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch user routinglanguages bulk service unavailable response has a 5xx status code
func (o *PatchUserRoutinglanguagesBulkServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch user routinglanguages bulk service unavailable response a status code equal to that given
func (o *PatchUserRoutinglanguagesBulkServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchUserRoutinglanguagesBulkServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserRoutinglanguagesBulkServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserRoutinglanguagesBulkGatewayTimeout creates a PatchUserRoutinglanguagesBulkGatewayTimeout with default headers values
func NewPatchUserRoutinglanguagesBulkGatewayTimeout() *PatchUserRoutinglanguagesBulkGatewayTimeout {
	return &PatchUserRoutinglanguagesBulkGatewayTimeout{}
}

/*
PatchUserRoutinglanguagesBulkGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchUserRoutinglanguagesBulkGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch user routinglanguages bulk gateway timeout response has a 2xx status code
func (o *PatchUserRoutinglanguagesBulkGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user routinglanguages bulk gateway timeout response has a 3xx status code
func (o *PatchUserRoutinglanguagesBulkGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user routinglanguages bulk gateway timeout response has a 4xx status code
func (o *PatchUserRoutinglanguagesBulkGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch user routinglanguages bulk gateway timeout response has a 5xx status code
func (o *PatchUserRoutinglanguagesBulkGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch user routinglanguages bulk gateway timeout response a status code equal to that given
func (o *PatchUserRoutinglanguagesBulkGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchUserRoutinglanguagesBulkGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{userId}/routinglanguages/bulk][%d] patchUserRoutinglanguagesBulkGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchUserRoutinglanguagesBulkGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchUserRoutinglanguagesBulkGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

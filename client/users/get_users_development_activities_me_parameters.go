// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetUsersDevelopmentActivitiesMeParams creates a new GetUsersDevelopmentActivitiesMeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetUsersDevelopmentActivitiesMeParams() *GetUsersDevelopmentActivitiesMeParams {
	return &GetUsersDevelopmentActivitiesMeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetUsersDevelopmentActivitiesMeParamsWithTimeout creates a new GetUsersDevelopmentActivitiesMeParams object
// with the ability to set a timeout on a request.
func NewGetUsersDevelopmentActivitiesMeParamsWithTimeout(timeout time.Duration) *GetUsersDevelopmentActivitiesMeParams {
	return &GetUsersDevelopmentActivitiesMeParams{
		timeout: timeout,
	}
}

// NewGetUsersDevelopmentActivitiesMeParamsWithContext creates a new GetUsersDevelopmentActivitiesMeParams object
// with the ability to set a context for a request.
func NewGetUsersDevelopmentActivitiesMeParamsWithContext(ctx context.Context) *GetUsersDevelopmentActivitiesMeParams {
	return &GetUsersDevelopmentActivitiesMeParams{
		Context: ctx,
	}
}

// NewGetUsersDevelopmentActivitiesMeParamsWithHTTPClient creates a new GetUsersDevelopmentActivitiesMeParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetUsersDevelopmentActivitiesMeParamsWithHTTPClient(client *http.Client) *GetUsersDevelopmentActivitiesMeParams {
	return &GetUsersDevelopmentActivitiesMeParams{
		HTTPClient: client,
	}
}

/*
GetUsersDevelopmentActivitiesMeParams contains all the parameters to send to the API endpoint

	for the get users development activities me operation.

	Typically these are written to a http.Request.
*/
type GetUsersDevelopmentActivitiesMeParams struct {

	/* CompletionInterval.

	   Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss

	   Format: interval
	*/
	CompletionInterval *string

	/* Interval.

	   Specifies the dateDue range to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss

	   Format: interval
	*/
	Interval *string

	/* ModuleID.

	   Specifies the ID of the learning module.
	*/
	ModuleID *string

	/* Overdue.

	   Specifies if non-overdue, overdue, or all activities are returned. If not specified, all activities are returned

	   Default: "Any"
	*/
	Overdue *string

	/* PageNumber.

	   Page number

	   Format: int32
	   Default: 1
	*/
	PageNumber *int32

	/* PageSize.

	   Page size

	   Format: int32
	   Default: 25
	*/
	PageSize *int32

	/* Pass.

	   Specifies if only the failed (pass is "False") or passed (pass is "True") activities are returned. If pass is "Any" or if the pass parameter is not supplied, all activities are returned

	   Default: "Any"
	*/
	Pass *string

	/* Relationship.

	   Specifies how the current user relation should be interpreted, and filters the activities returned to only the activities that have the specified relationship. If a value besides Attendee is specified, it will only return Coaching Appointments. If not specified, no filtering is applied.
	*/
	Relationship []string

	/* SortOrder.

	   Specifies result set sort order sorted by the date due; if not specified, default sort order is descending (Desc)

	   Default: "Desc"
	*/
	SortOrder *string

	/* Statuses.

	   Specifies the activity statuses to filter by
	*/
	Statuses []string

	/* Types.

	   Specifies the activity types.
	*/
	Types []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get users development activities me params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUsersDevelopmentActivitiesMeParams) WithDefaults() *GetUsersDevelopmentActivitiesMeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get users development activities me params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUsersDevelopmentActivitiesMeParams) SetDefaults() {
	var (
		overdueDefault = string("Any")

		pageNumberDefault = int32(1)

		pageSizeDefault = int32(25)

		passDefault = string("Any")

		sortOrderDefault = string("Desc")
	)

	val := GetUsersDevelopmentActivitiesMeParams{
		Overdue:    &overdueDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		Pass:       &passDefault,
		SortOrder:  &sortOrderDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) WithTimeout(timeout time.Duration) *GetUsersDevelopmentActivitiesMeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) WithContext(ctx context.Context) *GetUsersDevelopmentActivitiesMeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) WithHTTPClient(client *http.Client) *GetUsersDevelopmentActivitiesMeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCompletionInterval adds the completionInterval to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) WithCompletionInterval(completionInterval *string) *GetUsersDevelopmentActivitiesMeParams {
	o.SetCompletionInterval(completionInterval)
	return o
}

// SetCompletionInterval adds the completionInterval to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) SetCompletionInterval(completionInterval *string) {
	o.CompletionInterval = completionInterval
}

// WithInterval adds the interval to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) WithInterval(interval *string) *GetUsersDevelopmentActivitiesMeParams {
	o.SetInterval(interval)
	return o
}

// SetInterval adds the interval to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) SetInterval(interval *string) {
	o.Interval = interval
}

// WithModuleID adds the moduleID to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) WithModuleID(moduleID *string) *GetUsersDevelopmentActivitiesMeParams {
	o.SetModuleID(moduleID)
	return o
}

// SetModuleID adds the moduleId to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) SetModuleID(moduleID *string) {
	o.ModuleID = moduleID
}

// WithOverdue adds the overdue to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) WithOverdue(overdue *string) *GetUsersDevelopmentActivitiesMeParams {
	o.SetOverdue(overdue)
	return o
}

// SetOverdue adds the overdue to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) SetOverdue(overdue *string) {
	o.Overdue = overdue
}

// WithPageNumber adds the pageNumber to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) WithPageNumber(pageNumber *int32) *GetUsersDevelopmentActivitiesMeParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) WithPageSize(pageSize *int32) *GetUsersDevelopmentActivitiesMeParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPass adds the pass to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) WithPass(pass *string) *GetUsersDevelopmentActivitiesMeParams {
	o.SetPass(pass)
	return o
}

// SetPass adds the pass to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) SetPass(pass *string) {
	o.Pass = pass
}

// WithRelationship adds the relationship to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) WithRelationship(relationship []string) *GetUsersDevelopmentActivitiesMeParams {
	o.SetRelationship(relationship)
	return o
}

// SetRelationship adds the relationship to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) SetRelationship(relationship []string) {
	o.Relationship = relationship
}

// WithSortOrder adds the sortOrder to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) WithSortOrder(sortOrder *string) *GetUsersDevelopmentActivitiesMeParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithStatuses adds the statuses to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) WithStatuses(statuses []string) *GetUsersDevelopmentActivitiesMeParams {
	o.SetStatuses(statuses)
	return o
}

// SetStatuses adds the statuses to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) SetStatuses(statuses []string) {
	o.Statuses = statuses
}

// WithTypes adds the types to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) WithTypes(types []string) *GetUsersDevelopmentActivitiesMeParams {
	o.SetTypes(types)
	return o
}

// SetTypes adds the types to the get users development activities me params
func (o *GetUsersDevelopmentActivitiesMeParams) SetTypes(types []string) {
	o.Types = types
}

// WriteToRequest writes these params to a swagger request
func (o *GetUsersDevelopmentActivitiesMeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CompletionInterval != nil {

		// query param completionInterval
		var qrCompletionInterval string

		if o.CompletionInterval != nil {
			qrCompletionInterval = *o.CompletionInterval
		}
		qCompletionInterval := qrCompletionInterval
		if qCompletionInterval != "" {

			if err := r.SetQueryParam("completionInterval", qCompletionInterval); err != nil {
				return err
			}
		}
	}

	if o.Interval != nil {

		// query param interval
		var qrInterval string

		if o.Interval != nil {
			qrInterval = *o.Interval
		}
		qInterval := qrInterval
		if qInterval != "" {

			if err := r.SetQueryParam("interval", qInterval); err != nil {
				return err
			}
		}
	}

	if o.ModuleID != nil {

		// query param moduleId
		var qrModuleID string

		if o.ModuleID != nil {
			qrModuleID = *o.ModuleID
		}
		qModuleID := qrModuleID
		if qModuleID != "" {

			if err := r.SetQueryParam("moduleId", qModuleID); err != nil {
				return err
			}
		}
	}

	if o.Overdue != nil {

		// query param overdue
		var qrOverdue string

		if o.Overdue != nil {
			qrOverdue = *o.Overdue
		}
		qOverdue := qrOverdue
		if qOverdue != "" {

			if err := r.SetQueryParam("overdue", qOverdue); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.Pass != nil {

		// query param pass
		var qrPass string

		if o.Pass != nil {
			qrPass = *o.Pass
		}
		qPass := qrPass
		if qPass != "" {

			if err := r.SetQueryParam("pass", qPass); err != nil {
				return err
			}
		}
	}

	if o.Relationship != nil {

		// binding items for relationship
		joinedRelationship := o.bindParamRelationship(reg)

		// query array param relationship
		if err := r.SetQueryParam("relationship", joinedRelationship...); err != nil {
			return err
		}
	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string

		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {

			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}
	}

	if o.Statuses != nil {

		// binding items for statuses
		joinedStatuses := o.bindParamStatuses(reg)

		// query array param statuses
		if err := r.SetQueryParam("statuses", joinedStatuses...); err != nil {
			return err
		}
	}

	if o.Types != nil {

		// binding items for types
		joinedTypes := o.bindParamTypes(reg)

		// query array param types
		if err := r.SetQueryParam("types", joinedTypes...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetUsersDevelopmentActivitiesMe binds the parameter relationship
func (o *GetUsersDevelopmentActivitiesMeParams) bindParamRelationship(formats strfmt.Registry) []string {
	relationshipIR := o.Relationship

	var relationshipIC []string
	for _, relationshipIIR := range relationshipIR { // explode []string

		relationshipIIV := relationshipIIR // string as string
		relationshipIC = append(relationshipIC, relationshipIIV)
	}

	// items.CollectionFormat: "multi"
	relationshipIS := swag.JoinByFormat(relationshipIC, "multi")

	return relationshipIS
}

// bindParamGetUsersDevelopmentActivitiesMe binds the parameter statuses
func (o *GetUsersDevelopmentActivitiesMeParams) bindParamStatuses(formats strfmt.Registry) []string {
	statusesIR := o.Statuses

	var statusesIC []string
	for _, statusesIIR := range statusesIR { // explode []string

		statusesIIV := statusesIIR // string as string
		statusesIC = append(statusesIC, statusesIIV)
	}

	// items.CollectionFormat: "multi"
	statusesIS := swag.JoinByFormat(statusesIC, "multi")

	return statusesIS
}

// bindParamGetUsersDevelopmentActivitiesMe binds the parameter types
func (o *GetUsersDevelopmentActivitiesMeParams) bindParamTypes(formats strfmt.Registry) []string {
	typesIR := o.Types

	var typesIC []string
	for _, typesIIR := range typesIR { // explode []string

		typesIIV := typesIIR // string as string
		typesIC = append(typesIC, typesIIV)
	}

	// items.CollectionFormat: "multi"
	typesIS := swag.JoinByFormat(typesIC, "multi")

	return typesIS
}

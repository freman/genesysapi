// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutUserOutofofficeReader is a Reader for the PutUserOutofoffice structure.
type PutUserOutofofficeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutUserOutofofficeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutUserOutofofficeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutUserOutofofficeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutUserOutofofficeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutUserOutofofficeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutUserOutofofficeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutUserOutofofficeRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutUserOutofofficeRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutUserOutofofficeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutUserOutofofficeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutUserOutofofficeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutUserOutofofficeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutUserOutofofficeGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutUserOutofofficeOK creates a PutUserOutofofficeOK with default headers values
func NewPutUserOutofofficeOK() *PutUserOutofofficeOK {
	return &PutUserOutofofficeOK{}
}

/*
PutUserOutofofficeOK describes a response with status code 200, with default header values.

successful operation
*/
type PutUserOutofofficeOK struct {
	Payload *models.OutOfOffice
}

// IsSuccess returns true when this put user outofoffice o k response has a 2xx status code
func (o *PutUserOutofofficeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put user outofoffice o k response has a 3xx status code
func (o *PutUserOutofofficeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user outofoffice o k response has a 4xx status code
func (o *PutUserOutofofficeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put user outofoffice o k response has a 5xx status code
func (o *PutUserOutofofficeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put user outofoffice o k response a status code equal to that given
func (o *PutUserOutofofficeOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutUserOutofofficeOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeOK  %+v", 200, o.Payload)
}

func (o *PutUserOutofofficeOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeOK  %+v", 200, o.Payload)
}

func (o *PutUserOutofofficeOK) GetPayload() *models.OutOfOffice {
	return o.Payload
}

func (o *PutUserOutofofficeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OutOfOffice)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserOutofofficeBadRequest creates a PutUserOutofofficeBadRequest with default headers values
func NewPutUserOutofofficeBadRequest() *PutUserOutofofficeBadRequest {
	return &PutUserOutofofficeBadRequest{}
}

/*
PutUserOutofofficeBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutUserOutofofficeBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put user outofoffice bad request response has a 2xx status code
func (o *PutUserOutofofficeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user outofoffice bad request response has a 3xx status code
func (o *PutUserOutofofficeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user outofoffice bad request response has a 4xx status code
func (o *PutUserOutofofficeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user outofoffice bad request response has a 5xx status code
func (o *PutUserOutofofficeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put user outofoffice bad request response a status code equal to that given
func (o *PutUserOutofofficeBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutUserOutofofficeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeBadRequest  %+v", 400, o.Payload)
}

func (o *PutUserOutofofficeBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeBadRequest  %+v", 400, o.Payload)
}

func (o *PutUserOutofofficeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserOutofofficeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserOutofofficeUnauthorized creates a PutUserOutofofficeUnauthorized with default headers values
func NewPutUserOutofofficeUnauthorized() *PutUserOutofofficeUnauthorized {
	return &PutUserOutofofficeUnauthorized{}
}

/*
PutUserOutofofficeUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutUserOutofofficeUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put user outofoffice unauthorized response has a 2xx status code
func (o *PutUserOutofofficeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user outofoffice unauthorized response has a 3xx status code
func (o *PutUserOutofofficeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user outofoffice unauthorized response has a 4xx status code
func (o *PutUserOutofofficeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user outofoffice unauthorized response has a 5xx status code
func (o *PutUserOutofofficeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put user outofoffice unauthorized response a status code equal to that given
func (o *PutUserOutofofficeUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutUserOutofofficeUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeUnauthorized  %+v", 401, o.Payload)
}

func (o *PutUserOutofofficeUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeUnauthorized  %+v", 401, o.Payload)
}

func (o *PutUserOutofofficeUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserOutofofficeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserOutofofficeForbidden creates a PutUserOutofofficeForbidden with default headers values
func NewPutUserOutofofficeForbidden() *PutUserOutofofficeForbidden {
	return &PutUserOutofofficeForbidden{}
}

/*
PutUserOutofofficeForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutUserOutofofficeForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put user outofoffice forbidden response has a 2xx status code
func (o *PutUserOutofofficeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user outofoffice forbidden response has a 3xx status code
func (o *PutUserOutofofficeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user outofoffice forbidden response has a 4xx status code
func (o *PutUserOutofofficeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user outofoffice forbidden response has a 5xx status code
func (o *PutUserOutofofficeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put user outofoffice forbidden response a status code equal to that given
func (o *PutUserOutofofficeForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutUserOutofofficeForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeForbidden  %+v", 403, o.Payload)
}

func (o *PutUserOutofofficeForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeForbidden  %+v", 403, o.Payload)
}

func (o *PutUserOutofofficeForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserOutofofficeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserOutofofficeNotFound creates a PutUserOutofofficeNotFound with default headers values
func NewPutUserOutofofficeNotFound() *PutUserOutofofficeNotFound {
	return &PutUserOutofofficeNotFound{}
}

/*
PutUserOutofofficeNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutUserOutofofficeNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put user outofoffice not found response has a 2xx status code
func (o *PutUserOutofofficeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user outofoffice not found response has a 3xx status code
func (o *PutUserOutofofficeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user outofoffice not found response has a 4xx status code
func (o *PutUserOutofofficeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user outofoffice not found response has a 5xx status code
func (o *PutUserOutofofficeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put user outofoffice not found response a status code equal to that given
func (o *PutUserOutofofficeNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutUserOutofofficeNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeNotFound  %+v", 404, o.Payload)
}

func (o *PutUserOutofofficeNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeNotFound  %+v", 404, o.Payload)
}

func (o *PutUserOutofofficeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserOutofofficeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserOutofofficeRequestTimeout creates a PutUserOutofofficeRequestTimeout with default headers values
func NewPutUserOutofofficeRequestTimeout() *PutUserOutofofficeRequestTimeout {
	return &PutUserOutofofficeRequestTimeout{}
}

/*
PutUserOutofofficeRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutUserOutofofficeRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put user outofoffice request timeout response has a 2xx status code
func (o *PutUserOutofofficeRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user outofoffice request timeout response has a 3xx status code
func (o *PutUserOutofofficeRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user outofoffice request timeout response has a 4xx status code
func (o *PutUserOutofofficeRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user outofoffice request timeout response has a 5xx status code
func (o *PutUserOutofofficeRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put user outofoffice request timeout response a status code equal to that given
func (o *PutUserOutofofficeRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutUserOutofofficeRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutUserOutofofficeRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutUserOutofofficeRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserOutofofficeRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserOutofofficeRequestEntityTooLarge creates a PutUserOutofofficeRequestEntityTooLarge with default headers values
func NewPutUserOutofofficeRequestEntityTooLarge() *PutUserOutofofficeRequestEntityTooLarge {
	return &PutUserOutofofficeRequestEntityTooLarge{}
}

/*
PutUserOutofofficeRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutUserOutofofficeRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put user outofoffice request entity too large response has a 2xx status code
func (o *PutUserOutofofficeRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user outofoffice request entity too large response has a 3xx status code
func (o *PutUserOutofofficeRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user outofoffice request entity too large response has a 4xx status code
func (o *PutUserOutofofficeRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user outofoffice request entity too large response has a 5xx status code
func (o *PutUserOutofofficeRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put user outofoffice request entity too large response a status code equal to that given
func (o *PutUserOutofofficeRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutUserOutofofficeRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutUserOutofofficeRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutUserOutofofficeRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserOutofofficeRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserOutofofficeUnsupportedMediaType creates a PutUserOutofofficeUnsupportedMediaType with default headers values
func NewPutUserOutofofficeUnsupportedMediaType() *PutUserOutofofficeUnsupportedMediaType {
	return &PutUserOutofofficeUnsupportedMediaType{}
}

/*
PutUserOutofofficeUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutUserOutofofficeUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put user outofoffice unsupported media type response has a 2xx status code
func (o *PutUserOutofofficeUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user outofoffice unsupported media type response has a 3xx status code
func (o *PutUserOutofofficeUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user outofoffice unsupported media type response has a 4xx status code
func (o *PutUserOutofofficeUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user outofoffice unsupported media type response has a 5xx status code
func (o *PutUserOutofofficeUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put user outofoffice unsupported media type response a status code equal to that given
func (o *PutUserOutofofficeUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutUserOutofofficeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutUserOutofofficeUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutUserOutofofficeUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserOutofofficeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserOutofofficeTooManyRequests creates a PutUserOutofofficeTooManyRequests with default headers values
func NewPutUserOutofofficeTooManyRequests() *PutUserOutofofficeTooManyRequests {
	return &PutUserOutofofficeTooManyRequests{}
}

/*
PutUserOutofofficeTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutUserOutofofficeTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put user outofoffice too many requests response has a 2xx status code
func (o *PutUserOutofofficeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user outofoffice too many requests response has a 3xx status code
func (o *PutUserOutofofficeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user outofoffice too many requests response has a 4xx status code
func (o *PutUserOutofofficeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user outofoffice too many requests response has a 5xx status code
func (o *PutUserOutofofficeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put user outofoffice too many requests response a status code equal to that given
func (o *PutUserOutofofficeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutUserOutofofficeTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutUserOutofofficeTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutUserOutofofficeTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserOutofofficeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserOutofofficeInternalServerError creates a PutUserOutofofficeInternalServerError with default headers values
func NewPutUserOutofofficeInternalServerError() *PutUserOutofofficeInternalServerError {
	return &PutUserOutofofficeInternalServerError{}
}

/*
PutUserOutofofficeInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutUserOutofofficeInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put user outofoffice internal server error response has a 2xx status code
func (o *PutUserOutofofficeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user outofoffice internal server error response has a 3xx status code
func (o *PutUserOutofofficeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user outofoffice internal server error response has a 4xx status code
func (o *PutUserOutofofficeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put user outofoffice internal server error response has a 5xx status code
func (o *PutUserOutofofficeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put user outofoffice internal server error response a status code equal to that given
func (o *PutUserOutofofficeInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutUserOutofofficeInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeInternalServerError  %+v", 500, o.Payload)
}

func (o *PutUserOutofofficeInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeInternalServerError  %+v", 500, o.Payload)
}

func (o *PutUserOutofofficeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserOutofofficeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserOutofofficeServiceUnavailable creates a PutUserOutofofficeServiceUnavailable with default headers values
func NewPutUserOutofofficeServiceUnavailable() *PutUserOutofofficeServiceUnavailable {
	return &PutUserOutofofficeServiceUnavailable{}
}

/*
PutUserOutofofficeServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutUserOutofofficeServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put user outofoffice service unavailable response has a 2xx status code
func (o *PutUserOutofofficeServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user outofoffice service unavailable response has a 3xx status code
func (o *PutUserOutofofficeServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user outofoffice service unavailable response has a 4xx status code
func (o *PutUserOutofofficeServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put user outofoffice service unavailable response has a 5xx status code
func (o *PutUserOutofofficeServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put user outofoffice service unavailable response a status code equal to that given
func (o *PutUserOutofofficeServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutUserOutofofficeServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutUserOutofofficeServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutUserOutofofficeServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserOutofofficeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserOutofofficeGatewayTimeout creates a PutUserOutofofficeGatewayTimeout with default headers values
func NewPutUserOutofofficeGatewayTimeout() *PutUserOutofofficeGatewayTimeout {
	return &PutUserOutofofficeGatewayTimeout{}
}

/*
PutUserOutofofficeGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutUserOutofofficeGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put user outofoffice gateway timeout response has a 2xx status code
func (o *PutUserOutofofficeGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user outofoffice gateway timeout response has a 3xx status code
func (o *PutUserOutofofficeGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user outofoffice gateway timeout response has a 4xx status code
func (o *PutUserOutofofficeGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put user outofoffice gateway timeout response has a 5xx status code
func (o *PutUserOutofofficeGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put user outofoffice gateway timeout response a status code equal to that given
func (o *PutUserOutofofficeGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutUserOutofofficeGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutUserOutofofficeGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/users/{userId}/outofoffice][%d] putUserOutofofficeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutUserOutofofficeGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutUserOutofofficeGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

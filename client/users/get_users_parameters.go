// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetUsersParams creates a new GetUsersParams object
// with the default values initialized.
func NewGetUsersParams() *GetUsersParams {
	var (
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortOrderDefault  = string("ASC")
		stateDefault      = string("active")
	)
	return &GetUsersParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortOrder:  &sortOrderDefault,
		State:      &stateDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUsersParamsWithTimeout creates a new GetUsersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUsersParamsWithTimeout(timeout time.Duration) *GetUsersParams {
	var (
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortOrderDefault  = string("ASC")
		stateDefault      = string("active")
	)
	return &GetUsersParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortOrder:  &sortOrderDefault,
		State:      &stateDefault,

		timeout: timeout,
	}
}

// NewGetUsersParamsWithContext creates a new GetUsersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUsersParamsWithContext(ctx context.Context) *GetUsersParams {
	var (
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortOrderDefault  = string("ASC")
		stateDefault      = string("active")
	)
	return &GetUsersParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortOrder:  &sortOrderDefault,
		State:      &stateDefault,

		Context: ctx,
	}
}

// NewGetUsersParamsWithHTTPClient creates a new GetUsersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUsersParamsWithHTTPClient(client *http.Client) *GetUsersParams {
	var (
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortOrderDefault  = string("ASC")
		stateDefault      = string("active")
	)
	return &GetUsersParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortOrder:  &sortOrderDefault,
		State:      &stateDefault,
		HTTPClient: client,
	}
}

/*GetUsersParams contains all the parameters to send to the API endpoint
for the get users operation typically these are written to a http.Request
*/
type GetUsersParams struct {

	/*Expand
	  Which fields, if any, to expand

	*/
	Expand []string
	/*ID
	  A list of user IDs to fetch by bulk

	*/
	ID []string
	/*IntegrationPresenceSource
	  Gets an integration presence for users instead of their defaults. This parameter will only be used when presence is provided as an "expand". When using this parameter the maximum number of users that can be returned is 10.

	*/
	IntegrationPresenceSource *string
	/*JabberID
	  A list of jabberIds to fetch by bulk (cannot be used with the "id" parameter)

	*/
	JabberID []string
	/*PageNumber
	  Page number

	*/
	PageNumber *int32
	/*PageSize
	  Page size

	*/
	PageSize *int32
	/*SortOrder
	  Ascending or descending sort order

	*/
	SortOrder *string
	/*State
	  Only list users of this state

	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get users params
func (o *GetUsersParams) WithTimeout(timeout time.Duration) *GetUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get users params
func (o *GetUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get users params
func (o *GetUsersParams) WithContext(ctx context.Context) *GetUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get users params
func (o *GetUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get users params
func (o *GetUsersParams) WithHTTPClient(client *http.Client) *GetUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get users params
func (o *GetUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExpand adds the expand to the get users params
func (o *GetUsersParams) WithExpand(expand []string) *GetUsersParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get users params
func (o *GetUsersParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithID adds the id to the get users params
func (o *GetUsersParams) WithID(id []string) *GetUsersParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get users params
func (o *GetUsersParams) SetID(id []string) {
	o.ID = id
}

// WithIntegrationPresenceSource adds the integrationPresenceSource to the get users params
func (o *GetUsersParams) WithIntegrationPresenceSource(integrationPresenceSource *string) *GetUsersParams {
	o.SetIntegrationPresenceSource(integrationPresenceSource)
	return o
}

// SetIntegrationPresenceSource adds the integrationPresenceSource to the get users params
func (o *GetUsersParams) SetIntegrationPresenceSource(integrationPresenceSource *string) {
	o.IntegrationPresenceSource = integrationPresenceSource
}

// WithJabberID adds the jabberID to the get users params
func (o *GetUsersParams) WithJabberID(jabberID []string) *GetUsersParams {
	o.SetJabberID(jabberID)
	return o
}

// SetJabberID adds the jabberId to the get users params
func (o *GetUsersParams) SetJabberID(jabberID []string) {
	o.JabberID = jabberID
}

// WithPageNumber adds the pageNumber to the get users params
func (o *GetUsersParams) WithPageNumber(pageNumber *int32) *GetUsersParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get users params
func (o *GetUsersParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get users params
func (o *GetUsersParams) WithPageSize(pageSize *int32) *GetUsersParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get users params
func (o *GetUsersParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithSortOrder adds the sortOrder to the get users params
func (o *GetUsersParams) WithSortOrder(sortOrder *string) *GetUsersParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get users params
func (o *GetUsersParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithState adds the state to the get users params
func (o *GetUsersParams) WithState(state *string) *GetUsersParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get users params
func (o *GetUsersParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *GetUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesExpand := o.Expand

	joinedExpand := swag.JoinByFormat(valuesExpand, "multi")
	// query array param expand
	if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
		return err
	}

	valuesID := o.ID

	joinedID := swag.JoinByFormat(valuesID, "multi")
	// query array param id
	if err := r.SetQueryParam("id", joinedID...); err != nil {
		return err
	}

	if o.IntegrationPresenceSource != nil {

		// query param integrationPresenceSource
		var qrIntegrationPresenceSource string
		if o.IntegrationPresenceSource != nil {
			qrIntegrationPresenceSource = *o.IntegrationPresenceSource
		}
		qIntegrationPresenceSource := qrIntegrationPresenceSource
		if qIntegrationPresenceSource != "" {
			if err := r.SetQueryParam("integrationPresenceSource", qIntegrationPresenceSource); err != nil {
				return err
			}
		}

	}

	valuesJabberID := o.JabberID

	joinedJabberID := swag.JoinByFormat(valuesJabberID, "multi")
	// query array param jabberId
	if err := r.SetQueryParam("jabberId", joinedJabberID...); err != nil {
		return err
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string
		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {
			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetGamificationProfileMetricsParams creates a new GetGamificationProfileMetricsParams object
// with the default values initialized.
func NewGetGamificationProfileMetricsParams() *GetGamificationProfileMetricsParams {
	var ()
	return &GetGamificationProfileMetricsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetGamificationProfileMetricsParamsWithTimeout creates a new GetGamificationProfileMetricsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetGamificationProfileMetricsParamsWithTimeout(timeout time.Duration) *GetGamificationProfileMetricsParams {
	var ()
	return &GetGamificationProfileMetricsParams{

		timeout: timeout,
	}
}

// NewGetGamificationProfileMetricsParamsWithContext creates a new GetGamificationProfileMetricsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetGamificationProfileMetricsParamsWithContext(ctx context.Context) *GetGamificationProfileMetricsParams {
	var ()
	return &GetGamificationProfileMetricsParams{

		Context: ctx,
	}
}

// NewGetGamificationProfileMetricsParamsWithHTTPClient creates a new GetGamificationProfileMetricsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetGamificationProfileMetricsParamsWithHTTPClient(client *http.Client) *GetGamificationProfileMetricsParams {
	var ()
	return &GetGamificationProfileMetricsParams{
		HTTPClient: client,
	}
}

/*GetGamificationProfileMetricsParams contains all the parameters to send to the API endpoint
for the get gamification profile metrics operation typically these are written to a http.Request
*/
type GetGamificationProfileMetricsParams struct {

	/*Expand
	  Which fields, if any, to expand.

	*/
	Expand []string
	/*ProfileID
	  Performance Profile Id

	*/
	ProfileID string
	/*Workday
	  The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

	*/
	Workday *strfmt.Date

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get gamification profile metrics params
func (o *GetGamificationProfileMetricsParams) WithTimeout(timeout time.Duration) *GetGamificationProfileMetricsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get gamification profile metrics params
func (o *GetGamificationProfileMetricsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get gamification profile metrics params
func (o *GetGamificationProfileMetricsParams) WithContext(ctx context.Context) *GetGamificationProfileMetricsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get gamification profile metrics params
func (o *GetGamificationProfileMetricsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get gamification profile metrics params
func (o *GetGamificationProfileMetricsParams) WithHTTPClient(client *http.Client) *GetGamificationProfileMetricsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get gamification profile metrics params
func (o *GetGamificationProfileMetricsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExpand adds the expand to the get gamification profile metrics params
func (o *GetGamificationProfileMetricsParams) WithExpand(expand []string) *GetGamificationProfileMetricsParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get gamification profile metrics params
func (o *GetGamificationProfileMetricsParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithProfileID adds the profileID to the get gamification profile metrics params
func (o *GetGamificationProfileMetricsParams) WithProfileID(profileID string) *GetGamificationProfileMetricsParams {
	o.SetProfileID(profileID)
	return o
}

// SetProfileID adds the profileId to the get gamification profile metrics params
func (o *GetGamificationProfileMetricsParams) SetProfileID(profileID string) {
	o.ProfileID = profileID
}

// WithWorkday adds the workday to the get gamification profile metrics params
func (o *GetGamificationProfileMetricsParams) WithWorkday(workday *strfmt.Date) *GetGamificationProfileMetricsParams {
	o.SetWorkday(workday)
	return o
}

// SetWorkday adds the workday to the get gamification profile metrics params
func (o *GetGamificationProfileMetricsParams) SetWorkday(workday *strfmt.Date) {
	o.Workday = workday
}

// WriteToRequest writes these params to a swagger request
func (o *GetGamificationProfileMetricsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesExpand := o.Expand

	joinedExpand := swag.JoinByFormat(valuesExpand, "multi")
	// query array param expand
	if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
		return err
	}

	// path param profileId
	if err := r.SetPathParam("profileId", o.ProfileID); err != nil {
		return err
	}

	if o.Workday != nil {

		// query param workday
		var qrWorkday strfmt.Date
		if o.Workday != nil {
			qrWorkday = *o.Workday
		}
		qWorkday := qrWorkday.String()
		if qWorkday != "" {
			if err := r.SetQueryParam("workday", qWorkday); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

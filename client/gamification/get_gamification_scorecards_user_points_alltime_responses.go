// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetGamificationScorecardsUserPointsAlltimeReader is a Reader for the GetGamificationScorecardsUserPointsAlltime structure.
type GetGamificationScorecardsUserPointsAlltimeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGamificationScorecardsUserPointsAlltimeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGamificationScorecardsUserPointsAlltimeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGamificationScorecardsUserPointsAlltimeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetGamificationScorecardsUserPointsAlltimeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGamificationScorecardsUserPointsAlltimeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGamificationScorecardsUserPointsAlltimeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetGamificationScorecardsUserPointsAlltimeRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetGamificationScorecardsUserPointsAlltimeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGamificationScorecardsUserPointsAlltimeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetGamificationScorecardsUserPointsAlltimeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetGamificationScorecardsUserPointsAlltimeGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGamificationScorecardsUserPointsAlltimeOK creates a GetGamificationScorecardsUserPointsAlltimeOK with default headers values
func NewGetGamificationScorecardsUserPointsAlltimeOK() *GetGamificationScorecardsUserPointsAlltimeOK {
	return &GetGamificationScorecardsUserPointsAlltimeOK{}
}

/*
GetGamificationScorecardsUserPointsAlltimeOK describes a response with status code 200, with default header values.

successful operation
*/
type GetGamificationScorecardsUserPointsAlltimeOK struct {
	Payload *models.AllTimePoints
}

// IsSuccess returns true when this get gamification scorecards user points alltime o k response has a 2xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get gamification scorecards user points alltime o k response has a 3xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user points alltime o k response has a 4xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification scorecards user points alltime o k response has a 5xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user points alltime o k response a status code equal to that given
func (o *GetGamificationScorecardsUserPointsAlltimeOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetGamificationScorecardsUserPointsAlltimeOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeOK  %+v", 200, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeOK) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeOK  %+v", 200, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeOK) GetPayload() *models.AllTimePoints {
	return o.Payload
}

func (o *GetGamificationScorecardsUserPointsAlltimeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AllTimePoints)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserPointsAlltimeBadRequest creates a GetGamificationScorecardsUserPointsAlltimeBadRequest with default headers values
func NewGetGamificationScorecardsUserPointsAlltimeBadRequest() *GetGamificationScorecardsUserPointsAlltimeBadRequest {
	return &GetGamificationScorecardsUserPointsAlltimeBadRequest{}
}

/*
GetGamificationScorecardsUserPointsAlltimeBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetGamificationScorecardsUserPointsAlltimeBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user points alltime bad request response has a 2xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user points alltime bad request response has a 3xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user points alltime bad request response has a 4xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user points alltime bad request response has a 5xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user points alltime bad request response a status code equal to that given
func (o *GetGamificationScorecardsUserPointsAlltimeBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetGamificationScorecardsUserPointsAlltimeBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeBadRequest  %+v", 400, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeBadRequest  %+v", 400, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserPointsAlltimeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserPointsAlltimeUnauthorized creates a GetGamificationScorecardsUserPointsAlltimeUnauthorized with default headers values
func NewGetGamificationScorecardsUserPointsAlltimeUnauthorized() *GetGamificationScorecardsUserPointsAlltimeUnauthorized {
	return &GetGamificationScorecardsUserPointsAlltimeUnauthorized{}
}

/*
GetGamificationScorecardsUserPointsAlltimeUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetGamificationScorecardsUserPointsAlltimeUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user points alltime unauthorized response has a 2xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user points alltime unauthorized response has a 3xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user points alltime unauthorized response has a 4xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user points alltime unauthorized response has a 5xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user points alltime unauthorized response a status code equal to that given
func (o *GetGamificationScorecardsUserPointsAlltimeUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetGamificationScorecardsUserPointsAlltimeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserPointsAlltimeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserPointsAlltimeForbidden creates a GetGamificationScorecardsUserPointsAlltimeForbidden with default headers values
func NewGetGamificationScorecardsUserPointsAlltimeForbidden() *GetGamificationScorecardsUserPointsAlltimeForbidden {
	return &GetGamificationScorecardsUserPointsAlltimeForbidden{}
}

/*
GetGamificationScorecardsUserPointsAlltimeForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetGamificationScorecardsUserPointsAlltimeForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user points alltime forbidden response has a 2xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user points alltime forbidden response has a 3xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user points alltime forbidden response has a 4xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user points alltime forbidden response has a 5xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user points alltime forbidden response a status code equal to that given
func (o *GetGamificationScorecardsUserPointsAlltimeForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetGamificationScorecardsUserPointsAlltimeForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeForbidden  %+v", 403, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeForbidden  %+v", 403, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserPointsAlltimeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserPointsAlltimeNotFound creates a GetGamificationScorecardsUserPointsAlltimeNotFound with default headers values
func NewGetGamificationScorecardsUserPointsAlltimeNotFound() *GetGamificationScorecardsUserPointsAlltimeNotFound {
	return &GetGamificationScorecardsUserPointsAlltimeNotFound{}
}

/*
GetGamificationScorecardsUserPointsAlltimeNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetGamificationScorecardsUserPointsAlltimeNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user points alltime not found response has a 2xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user points alltime not found response has a 3xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user points alltime not found response has a 4xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user points alltime not found response has a 5xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user points alltime not found response a status code equal to that given
func (o *GetGamificationScorecardsUserPointsAlltimeNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetGamificationScorecardsUserPointsAlltimeNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeNotFound  %+v", 404, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeNotFound  %+v", 404, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserPointsAlltimeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserPointsAlltimeRequestTimeout creates a GetGamificationScorecardsUserPointsAlltimeRequestTimeout with default headers values
func NewGetGamificationScorecardsUserPointsAlltimeRequestTimeout() *GetGamificationScorecardsUserPointsAlltimeRequestTimeout {
	return &GetGamificationScorecardsUserPointsAlltimeRequestTimeout{}
}

/*
GetGamificationScorecardsUserPointsAlltimeRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetGamificationScorecardsUserPointsAlltimeRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user points alltime request timeout response has a 2xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user points alltime request timeout response has a 3xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user points alltime request timeout response has a 4xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user points alltime request timeout response has a 5xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user points alltime request timeout response a status code equal to that given
func (o *GetGamificationScorecardsUserPointsAlltimeRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetGamificationScorecardsUserPointsAlltimeRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserPointsAlltimeRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge creates a GetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge with default headers values
func NewGetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge() *GetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge {
	return &GetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge{}
}

/*
GetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user points alltime request entity too large response has a 2xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user points alltime request entity too large response has a 3xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user points alltime request entity too large response has a 4xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user points alltime request entity too large response has a 5xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user points alltime request entity too large response a status code equal to that given
func (o *GetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserPointsAlltimeRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType creates a GetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType with default headers values
func NewGetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType() *GetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType {
	return &GetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType{}
}

/*
GetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user points alltime unsupported media type response has a 2xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user points alltime unsupported media type response has a 3xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user points alltime unsupported media type response has a 4xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user points alltime unsupported media type response has a 5xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user points alltime unsupported media type response a status code equal to that given
func (o *GetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserPointsAlltimeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserPointsAlltimeTooManyRequests creates a GetGamificationScorecardsUserPointsAlltimeTooManyRequests with default headers values
func NewGetGamificationScorecardsUserPointsAlltimeTooManyRequests() *GetGamificationScorecardsUserPointsAlltimeTooManyRequests {
	return &GetGamificationScorecardsUserPointsAlltimeTooManyRequests{}
}

/*
GetGamificationScorecardsUserPointsAlltimeTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetGamificationScorecardsUserPointsAlltimeTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user points alltime too many requests response has a 2xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user points alltime too many requests response has a 3xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user points alltime too many requests response has a 4xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user points alltime too many requests response has a 5xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user points alltime too many requests response a status code equal to that given
func (o *GetGamificationScorecardsUserPointsAlltimeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetGamificationScorecardsUserPointsAlltimeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserPointsAlltimeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserPointsAlltimeInternalServerError creates a GetGamificationScorecardsUserPointsAlltimeInternalServerError with default headers values
func NewGetGamificationScorecardsUserPointsAlltimeInternalServerError() *GetGamificationScorecardsUserPointsAlltimeInternalServerError {
	return &GetGamificationScorecardsUserPointsAlltimeInternalServerError{}
}

/*
GetGamificationScorecardsUserPointsAlltimeInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetGamificationScorecardsUserPointsAlltimeInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user points alltime internal server error response has a 2xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user points alltime internal server error response has a 3xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user points alltime internal server error response has a 4xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification scorecards user points alltime internal server error response has a 5xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get gamification scorecards user points alltime internal server error response a status code equal to that given
func (o *GetGamificationScorecardsUserPointsAlltimeInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetGamificationScorecardsUserPointsAlltimeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserPointsAlltimeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserPointsAlltimeServiceUnavailable creates a GetGamificationScorecardsUserPointsAlltimeServiceUnavailable with default headers values
func NewGetGamificationScorecardsUserPointsAlltimeServiceUnavailable() *GetGamificationScorecardsUserPointsAlltimeServiceUnavailable {
	return &GetGamificationScorecardsUserPointsAlltimeServiceUnavailable{}
}

/*
GetGamificationScorecardsUserPointsAlltimeServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetGamificationScorecardsUserPointsAlltimeServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user points alltime service unavailable response has a 2xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user points alltime service unavailable response has a 3xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user points alltime service unavailable response has a 4xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification scorecards user points alltime service unavailable response has a 5xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get gamification scorecards user points alltime service unavailable response a status code equal to that given
func (o *GetGamificationScorecardsUserPointsAlltimeServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetGamificationScorecardsUserPointsAlltimeServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserPointsAlltimeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserPointsAlltimeGatewayTimeout creates a GetGamificationScorecardsUserPointsAlltimeGatewayTimeout with default headers values
func NewGetGamificationScorecardsUserPointsAlltimeGatewayTimeout() *GetGamificationScorecardsUserPointsAlltimeGatewayTimeout {
	return &GetGamificationScorecardsUserPointsAlltimeGatewayTimeout{}
}

/*
GetGamificationScorecardsUserPointsAlltimeGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetGamificationScorecardsUserPointsAlltimeGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user points alltime gateway timeout response has a 2xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user points alltime gateway timeout response has a 3xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user points alltime gateway timeout response has a 4xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification scorecards user points alltime gateway timeout response has a 5xx status code
func (o *GetGamificationScorecardsUserPointsAlltimeGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get gamification scorecards user points alltime gateway timeout response a status code equal to that given
func (o *GetGamificationScorecardsUserPointsAlltimeGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetGamificationScorecardsUserPointsAlltimeGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}/points/alltime][%d] getGamificationScorecardsUserPointsAlltimeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetGamificationScorecardsUserPointsAlltimeGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserPointsAlltimeGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

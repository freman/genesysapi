// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetGamificationMetricdefinitionsParams creates a new GetGamificationMetricdefinitionsParams object
// with the default values initialized.
func NewGetGamificationMetricdefinitionsParams() *GetGamificationMetricdefinitionsParams {

	return &GetGamificationMetricdefinitionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetGamificationMetricdefinitionsParamsWithTimeout creates a new GetGamificationMetricdefinitionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetGamificationMetricdefinitionsParamsWithTimeout(timeout time.Duration) *GetGamificationMetricdefinitionsParams {

	return &GetGamificationMetricdefinitionsParams{

		timeout: timeout,
	}
}

// NewGetGamificationMetricdefinitionsParamsWithContext creates a new GetGamificationMetricdefinitionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetGamificationMetricdefinitionsParamsWithContext(ctx context.Context) *GetGamificationMetricdefinitionsParams {

	return &GetGamificationMetricdefinitionsParams{

		Context: ctx,
	}
}

// NewGetGamificationMetricdefinitionsParamsWithHTTPClient creates a new GetGamificationMetricdefinitionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetGamificationMetricdefinitionsParamsWithHTTPClient(client *http.Client) *GetGamificationMetricdefinitionsParams {

	return &GetGamificationMetricdefinitionsParams{
		HTTPClient: client,
	}
}

/*GetGamificationMetricdefinitionsParams contains all the parameters to send to the API endpoint
for the get gamification metricdefinitions operation typically these are written to a http.Request
*/
type GetGamificationMetricdefinitionsParams struct {
	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get gamification metricdefinitions params
func (o *GetGamificationMetricdefinitionsParams) WithTimeout(timeout time.Duration) *GetGamificationMetricdefinitionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get gamification metricdefinitions params
func (o *GetGamificationMetricdefinitionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get gamification metricdefinitions params
func (o *GetGamificationMetricdefinitionsParams) WithContext(ctx context.Context) *GetGamificationMetricdefinitionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get gamification metricdefinitions params
func (o *GetGamificationMetricdefinitionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get gamification metricdefinitions params
func (o *GetGamificationMetricdefinitionsParams) WithHTTPClient(client *http.Client) *GetGamificationMetricdefinitionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get gamification metricdefinitions params
func (o *GetGamificationMetricdefinitionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WriteToRequest writes these params to a swagger request
func (o *GetGamificationMetricdefinitionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

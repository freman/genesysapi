// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetGamificationScorecardsProfileMetricUsersValuesTrendsParams creates a new GetGamificationScorecardsProfileMetricUsersValuesTrendsParams object
// with the default values initialized.
func NewGetGamificationScorecardsProfileMetricUsersValuesTrendsParams() *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &GetGamificationScorecardsProfileMetricUsersValuesTrendsParams{
		TimeZone: &timeZoneDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetGamificationScorecardsProfileMetricUsersValuesTrendsParamsWithTimeout creates a new GetGamificationScorecardsProfileMetricUsersValuesTrendsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetGamificationScorecardsProfileMetricUsersValuesTrendsParamsWithTimeout(timeout time.Duration) *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &GetGamificationScorecardsProfileMetricUsersValuesTrendsParams{
		TimeZone: &timeZoneDefault,

		timeout: timeout,
	}
}

// NewGetGamificationScorecardsProfileMetricUsersValuesTrendsParamsWithContext creates a new GetGamificationScorecardsProfileMetricUsersValuesTrendsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetGamificationScorecardsProfileMetricUsersValuesTrendsParamsWithContext(ctx context.Context) *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &GetGamificationScorecardsProfileMetricUsersValuesTrendsParams{
		TimeZone: &timeZoneDefault,

		Context: ctx,
	}
}

// NewGetGamificationScorecardsProfileMetricUsersValuesTrendsParamsWithHTTPClient creates a new GetGamificationScorecardsProfileMetricUsersValuesTrendsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetGamificationScorecardsProfileMetricUsersValuesTrendsParamsWithHTTPClient(client *http.Client) *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &GetGamificationScorecardsProfileMetricUsersValuesTrendsParams{
		TimeZone:   &timeZoneDefault,
		HTTPClient: client,
	}
}

/*GetGamificationScorecardsProfileMetricUsersValuesTrendsParams contains all the parameters to send to the API endpoint
for the get gamification scorecards profile metric users values trends operation typically these are written to a http.Request
*/
type GetGamificationScorecardsProfileMetricUsersValuesTrendsParams struct {

	/*EndWorkday
	  End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

	*/
	EndWorkday strfmt.Date
	/*FilterID
	  ID for the filter type. Only required when filterType is Division.

	*/
	FilterID *string
	/*FilterType
	  Filter type for the query request.

	*/
	FilterType string
	/*MetricID
	  metricId

	*/
	MetricID string
	/*ProfileID
	  performanceProfileId

	*/
	ProfileID string
	/*ReferenceWorkday
	  Reference workday for the trend. Used to determine the associated metric definition. If not set, then the value of endWorkday is used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

	*/
	ReferenceWorkday *strfmt.Date
	/*StartWorkday
	  Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

	*/
	StartWorkday strfmt.Date
	/*TimeZone
	  Timezone for the workday. Defaults to UTC

	*/
	TimeZone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) WithTimeout(timeout time.Duration) *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) WithContext(ctx context.Context) *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) WithHTTPClient(client *http.Client) *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndWorkday adds the endWorkday to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) WithEndWorkday(endWorkday strfmt.Date) *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams {
	o.SetEndWorkday(endWorkday)
	return o
}

// SetEndWorkday adds the endWorkday to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) SetEndWorkday(endWorkday strfmt.Date) {
	o.EndWorkday = endWorkday
}

// WithFilterID adds the filterID to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) WithFilterID(filterID *string) *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams {
	o.SetFilterID(filterID)
	return o
}

// SetFilterID adds the filterId to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) SetFilterID(filterID *string) {
	o.FilterID = filterID
}

// WithFilterType adds the filterType to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) WithFilterType(filterType string) *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams {
	o.SetFilterType(filterType)
	return o
}

// SetFilterType adds the filterType to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) SetFilterType(filterType string) {
	o.FilterType = filterType
}

// WithMetricID adds the metricID to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) WithMetricID(metricID string) *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams {
	o.SetMetricID(metricID)
	return o
}

// SetMetricID adds the metricId to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) SetMetricID(metricID string) {
	o.MetricID = metricID
}

// WithProfileID adds the profileID to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) WithProfileID(profileID string) *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams {
	o.SetProfileID(profileID)
	return o
}

// SetProfileID adds the profileId to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) SetProfileID(profileID string) {
	o.ProfileID = profileID
}

// WithReferenceWorkday adds the referenceWorkday to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) WithReferenceWorkday(referenceWorkday *strfmt.Date) *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams {
	o.SetReferenceWorkday(referenceWorkday)
	return o
}

// SetReferenceWorkday adds the referenceWorkday to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) SetReferenceWorkday(referenceWorkday *strfmt.Date) {
	o.ReferenceWorkday = referenceWorkday
}

// WithStartWorkday adds the startWorkday to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) WithStartWorkday(startWorkday strfmt.Date) *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams {
	o.SetStartWorkday(startWorkday)
	return o
}

// SetStartWorkday adds the startWorkday to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) SetStartWorkday(startWorkday strfmt.Date) {
	o.StartWorkday = startWorkday
}

// WithTimeZone adds the timeZone to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) WithTimeZone(timeZone *string) *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams {
	o.SetTimeZone(timeZone)
	return o
}

// SetTimeZone adds the timeZone to the get gamification scorecards profile metric users values trends params
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) SetTimeZone(timeZone *string) {
	o.TimeZone = timeZone
}

// WriteToRequest writes these params to a swagger request
func (o *GetGamificationScorecardsProfileMetricUsersValuesTrendsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param endWorkday
	qrEndWorkday := o.EndWorkday
	qEndWorkday := qrEndWorkday.String()
	if qEndWorkday != "" {
		if err := r.SetQueryParam("endWorkday", qEndWorkday); err != nil {
			return err
		}
	}

	if o.FilterID != nil {

		// query param filterId
		var qrFilterID string
		if o.FilterID != nil {
			qrFilterID = *o.FilterID
		}
		qFilterID := qrFilterID
		if qFilterID != "" {
			if err := r.SetQueryParam("filterId", qFilterID); err != nil {
				return err
			}
		}

	}

	// query param filterType
	qrFilterType := o.FilterType
	qFilterType := qrFilterType
	if qFilterType != "" {
		if err := r.SetQueryParam("filterType", qFilterType); err != nil {
			return err
		}
	}

	// path param metricId
	if err := r.SetPathParam("metricId", o.MetricID); err != nil {
		return err
	}

	// path param profileId
	if err := r.SetPathParam("profileId", o.ProfileID); err != nil {
		return err
	}

	if o.ReferenceWorkday != nil {

		// query param referenceWorkday
		var qrReferenceWorkday strfmt.Date
		if o.ReferenceWorkday != nil {
			qrReferenceWorkday = *o.ReferenceWorkday
		}
		qReferenceWorkday := qrReferenceWorkday.String()
		if qReferenceWorkday != "" {
			if err := r.SetQueryParam("referenceWorkday", qReferenceWorkday); err != nil {
				return err
			}
		}

	}

	// query param startWorkday
	qrStartWorkday := o.StartWorkday
	qStartWorkday := qrStartWorkday.String()
	if qStartWorkday != "" {
		if err := r.SetQueryParam("startWorkday", qStartWorkday); err != nil {
			return err
		}
	}

	if o.TimeZone != nil {

		// query param timeZone
		var qrTimeZone string
		if o.TimeZone != nil {
			qrTimeZone = *o.TimeZone
		}
		qTimeZone := qrTimeZone
		if qTimeZone != "" {
			if err := r.SetQueryParam("timeZone", qTimeZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/freman/genesysapi/models"
)

// NewPostGamificationProfilesParams creates a new PostGamificationProfilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostGamificationProfilesParams() *PostGamificationProfilesParams {
	return &PostGamificationProfilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostGamificationProfilesParamsWithTimeout creates a new PostGamificationProfilesParams object
// with the ability to set a timeout on a request.
func NewPostGamificationProfilesParamsWithTimeout(timeout time.Duration) *PostGamificationProfilesParams {
	return &PostGamificationProfilesParams{
		timeout: timeout,
	}
}

// NewPostGamificationProfilesParamsWithContext creates a new PostGamificationProfilesParams object
// with the ability to set a context for a request.
func NewPostGamificationProfilesParamsWithContext(ctx context.Context) *PostGamificationProfilesParams {
	return &PostGamificationProfilesParams{
		Context: ctx,
	}
}

// NewPostGamificationProfilesParamsWithHTTPClient creates a new PostGamificationProfilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostGamificationProfilesParamsWithHTTPClient(client *http.Client) *PostGamificationProfilesParams {
	return &PostGamificationProfilesParams{
		HTTPClient: client,
	}
}

/*
PostGamificationProfilesParams contains all the parameters to send to the API endpoint

	for the post gamification profiles operation.

	Typically these are written to a http.Request.
*/
type PostGamificationProfilesParams struct {

	/* Body.

	   performanceProfile
	*/
	Body *models.CreatePerformanceProfile

	/* CopyMetrics.

	   Flag to copy metrics. If set to false, there will be no metrics associated with the new profile. If set to true or is absent (the default behavior), all metrics from the default profile will be copied over into the new profile.

	   Default: true
	*/
	CopyMetrics *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post gamification profiles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostGamificationProfilesParams) WithDefaults() *PostGamificationProfilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post gamification profiles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostGamificationProfilesParams) SetDefaults() {
	var (
		copyMetricsDefault = bool(true)
	)

	val := PostGamificationProfilesParams{
		CopyMetrics: &copyMetricsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the post gamification profiles params
func (o *PostGamificationProfilesParams) WithTimeout(timeout time.Duration) *PostGamificationProfilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post gamification profiles params
func (o *PostGamificationProfilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post gamification profiles params
func (o *PostGamificationProfilesParams) WithContext(ctx context.Context) *PostGamificationProfilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post gamification profiles params
func (o *PostGamificationProfilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post gamification profiles params
func (o *PostGamificationProfilesParams) WithHTTPClient(client *http.Client) *PostGamificationProfilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post gamification profiles params
func (o *PostGamificationProfilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post gamification profiles params
func (o *PostGamificationProfilesParams) WithBody(body *models.CreatePerformanceProfile) *PostGamificationProfilesParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post gamification profiles params
func (o *PostGamificationProfilesParams) SetBody(body *models.CreatePerformanceProfile) {
	o.Body = body
}

// WithCopyMetrics adds the copyMetrics to the post gamification profiles params
func (o *PostGamificationProfilesParams) WithCopyMetrics(copyMetrics *bool) *PostGamificationProfilesParams {
	o.SetCopyMetrics(copyMetrics)
	return o
}

// SetCopyMetrics adds the copyMetrics to the post gamification profiles params
func (o *PostGamificationProfilesParams) SetCopyMetrics(copyMetrics *bool) {
	o.CopyMetrics = copyMetrics
}

// WriteToRequest writes these params to a swagger request
func (o *PostGamificationProfilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.CopyMetrics != nil {

		// query param copyMetrics
		var qrCopyMetrics bool

		if o.CopyMetrics != nil {
			qrCopyMetrics = *o.CopyMetrics
		}
		qCopyMetrics := swag.FormatBool(qrCopyMetrics)
		if qCopyMetrics != "" {

			if err := r.SetQueryParam("copyMetrics", qCopyMetrics); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

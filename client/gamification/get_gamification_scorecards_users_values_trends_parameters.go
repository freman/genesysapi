// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetGamificationScorecardsUsersValuesTrendsParams creates a new GetGamificationScorecardsUsersValuesTrendsParams object
// with the default values initialized.
func NewGetGamificationScorecardsUsersValuesTrendsParams() *GetGamificationScorecardsUsersValuesTrendsParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &GetGamificationScorecardsUsersValuesTrendsParams{
		TimeZone: &timeZoneDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetGamificationScorecardsUsersValuesTrendsParamsWithTimeout creates a new GetGamificationScorecardsUsersValuesTrendsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetGamificationScorecardsUsersValuesTrendsParamsWithTimeout(timeout time.Duration) *GetGamificationScorecardsUsersValuesTrendsParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &GetGamificationScorecardsUsersValuesTrendsParams{
		TimeZone: &timeZoneDefault,

		timeout: timeout,
	}
}

// NewGetGamificationScorecardsUsersValuesTrendsParamsWithContext creates a new GetGamificationScorecardsUsersValuesTrendsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetGamificationScorecardsUsersValuesTrendsParamsWithContext(ctx context.Context) *GetGamificationScorecardsUsersValuesTrendsParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &GetGamificationScorecardsUsersValuesTrendsParams{
		TimeZone: &timeZoneDefault,

		Context: ctx,
	}
}

// NewGetGamificationScorecardsUsersValuesTrendsParamsWithHTTPClient creates a new GetGamificationScorecardsUsersValuesTrendsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetGamificationScorecardsUsersValuesTrendsParamsWithHTTPClient(client *http.Client) *GetGamificationScorecardsUsersValuesTrendsParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &GetGamificationScorecardsUsersValuesTrendsParams{
		TimeZone:   &timeZoneDefault,
		HTTPClient: client,
	}
}

/*GetGamificationScorecardsUsersValuesTrendsParams contains all the parameters to send to the API endpoint
for the get gamification scorecards users values trends operation typically these are written to a http.Request
*/
type GetGamificationScorecardsUsersValuesTrendsParams struct {

	/*EndWorkday
	  End workday of querying workdays range. Workday is represented as an ISO-8601 string. For example: yyyy-MM-dd

	*/
	EndWorkday strfmt.Date
	/*FilterID
	  ID for the filter type.

	*/
	FilterID string
	/*FilterType
	  Filter type for the query request.

	*/
	FilterType string
	/*StartWorkday
	  Start workday of querying workdays range. Workday is represented as an ISO-8601 string. For example: yyyy-MM-dd

	*/
	StartWorkday strfmt.Date
	/*TimeZone
	  Timezone for the workday. Defaults to UTC

	*/
	TimeZone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) WithTimeout(timeout time.Duration) *GetGamificationScorecardsUsersValuesTrendsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) WithContext(ctx context.Context) *GetGamificationScorecardsUsersValuesTrendsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) WithHTTPClient(client *http.Client) *GetGamificationScorecardsUsersValuesTrendsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndWorkday adds the endWorkday to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) WithEndWorkday(endWorkday strfmt.Date) *GetGamificationScorecardsUsersValuesTrendsParams {
	o.SetEndWorkday(endWorkday)
	return o
}

// SetEndWorkday adds the endWorkday to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) SetEndWorkday(endWorkday strfmt.Date) {
	o.EndWorkday = endWorkday
}

// WithFilterID adds the filterID to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) WithFilterID(filterID string) *GetGamificationScorecardsUsersValuesTrendsParams {
	o.SetFilterID(filterID)
	return o
}

// SetFilterID adds the filterId to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) SetFilterID(filterID string) {
	o.FilterID = filterID
}

// WithFilterType adds the filterType to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) WithFilterType(filterType string) *GetGamificationScorecardsUsersValuesTrendsParams {
	o.SetFilterType(filterType)
	return o
}

// SetFilterType adds the filterType to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) SetFilterType(filterType string) {
	o.FilterType = filterType
}

// WithStartWorkday adds the startWorkday to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) WithStartWorkday(startWorkday strfmt.Date) *GetGamificationScorecardsUsersValuesTrendsParams {
	o.SetStartWorkday(startWorkday)
	return o
}

// SetStartWorkday adds the startWorkday to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) SetStartWorkday(startWorkday strfmt.Date) {
	o.StartWorkday = startWorkday
}

// WithTimeZone adds the timeZone to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) WithTimeZone(timeZone *string) *GetGamificationScorecardsUsersValuesTrendsParams {
	o.SetTimeZone(timeZone)
	return o
}

// SetTimeZone adds the timeZone to the get gamification scorecards users values trends params
func (o *GetGamificationScorecardsUsersValuesTrendsParams) SetTimeZone(timeZone *string) {
	o.TimeZone = timeZone
}

// WriteToRequest writes these params to a swagger request
func (o *GetGamificationScorecardsUsersValuesTrendsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param endWorkday
	qrEndWorkday := o.EndWorkday
	qEndWorkday := qrEndWorkday.String()
	if qEndWorkday != "" {
		if err := r.SetQueryParam("endWorkday", qEndWorkday); err != nil {
			return err
		}
	}

	// query param filterId
	qrFilterID := o.FilterID
	qFilterID := qrFilterID
	if qFilterID != "" {
		if err := r.SetQueryParam("filterId", qFilterID); err != nil {
			return err
		}
	}

	// query param filterType
	qrFilterType := o.FilterType
	qFilterType := qrFilterType
	if qFilterType != "" {
		if err := r.SetQueryParam("filterType", qFilterType); err != nil {
			return err
		}
	}

	// query param startWorkday
	qrStartWorkday := o.StartWorkday
	qStartWorkday := qrStartWorkday.String()
	if qStartWorkday != "" {
		if err := r.SetQueryParam("startWorkday", qStartWorkday); err != nil {
			return err
		}
	}

	if o.TimeZone != nil {

		// query param timeZone
		var qrTimeZone string
		if o.TimeZone != nil {
			qrTimeZone = *o.TimeZone
		}
		qTimeZone := qrTimeZone
		if qTimeZone != "" {
			if err := r.SetQueryParam("timeZone", qTimeZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetGamificationMetricsReader is a Reader for the GetGamificationMetrics structure.
type GetGamificationMetricsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGamificationMetricsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGamificationMetricsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGamificationMetricsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetGamificationMetricsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGamificationMetricsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGamificationMetricsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetGamificationMetricsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetGamificationMetricsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetGamificationMetricsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetGamificationMetricsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGamificationMetricsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetGamificationMetricsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetGamificationMetricsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGamificationMetricsOK creates a GetGamificationMetricsOK with default headers values
func NewGetGamificationMetricsOK() *GetGamificationMetricsOK {
	return &GetGamificationMetricsOK{}
}

/*GetGamificationMetricsOK handles this case with default header values.

successful operation
*/
type GetGamificationMetricsOK struct {
	Payload *models.GetMetricsResponse
}

func (o *GetGamificationMetricsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/metrics][%d] getGamificationMetricsOK  %+v", 200, o.Payload)
}

func (o *GetGamificationMetricsOK) GetPayload() *models.GetMetricsResponse {
	return o.Payload
}

func (o *GetGamificationMetricsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetMetricsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationMetricsBadRequest creates a GetGamificationMetricsBadRequest with default headers values
func NewGetGamificationMetricsBadRequest() *GetGamificationMetricsBadRequest {
	return &GetGamificationMetricsBadRequest{}
}

/*GetGamificationMetricsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetGamificationMetricsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetGamificationMetricsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/metrics][%d] getGamificationMetricsBadRequest  %+v", 400, o.Payload)
}

func (o *GetGamificationMetricsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationMetricsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationMetricsUnauthorized creates a GetGamificationMetricsUnauthorized with default headers values
func NewGetGamificationMetricsUnauthorized() *GetGamificationMetricsUnauthorized {
	return &GetGamificationMetricsUnauthorized{}
}

/*GetGamificationMetricsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetGamificationMetricsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetGamificationMetricsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/metrics][%d] getGamificationMetricsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGamificationMetricsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationMetricsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationMetricsForbidden creates a GetGamificationMetricsForbidden with default headers values
func NewGetGamificationMetricsForbidden() *GetGamificationMetricsForbidden {
	return &GetGamificationMetricsForbidden{}
}

/*GetGamificationMetricsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetGamificationMetricsForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetGamificationMetricsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/metrics][%d] getGamificationMetricsForbidden  %+v", 403, o.Payload)
}

func (o *GetGamificationMetricsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationMetricsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationMetricsNotFound creates a GetGamificationMetricsNotFound with default headers values
func NewGetGamificationMetricsNotFound() *GetGamificationMetricsNotFound {
	return &GetGamificationMetricsNotFound{}
}

/*GetGamificationMetricsNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetGamificationMetricsNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetGamificationMetricsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/metrics][%d] getGamificationMetricsNotFound  %+v", 404, o.Payload)
}

func (o *GetGamificationMetricsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationMetricsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationMetricsRequestTimeout creates a GetGamificationMetricsRequestTimeout with default headers values
func NewGetGamificationMetricsRequestTimeout() *GetGamificationMetricsRequestTimeout {
	return &GetGamificationMetricsRequestTimeout{}
}

/*GetGamificationMetricsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetGamificationMetricsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetGamificationMetricsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/metrics][%d] getGamificationMetricsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetGamificationMetricsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationMetricsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationMetricsRequestEntityTooLarge creates a GetGamificationMetricsRequestEntityTooLarge with default headers values
func NewGetGamificationMetricsRequestEntityTooLarge() *GetGamificationMetricsRequestEntityTooLarge {
	return &GetGamificationMetricsRequestEntityTooLarge{}
}

/*GetGamificationMetricsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetGamificationMetricsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetGamificationMetricsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/metrics][%d] getGamificationMetricsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetGamificationMetricsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationMetricsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationMetricsUnsupportedMediaType creates a GetGamificationMetricsUnsupportedMediaType with default headers values
func NewGetGamificationMetricsUnsupportedMediaType() *GetGamificationMetricsUnsupportedMediaType {
	return &GetGamificationMetricsUnsupportedMediaType{}
}

/*GetGamificationMetricsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetGamificationMetricsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetGamificationMetricsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/metrics][%d] getGamificationMetricsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetGamificationMetricsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationMetricsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationMetricsTooManyRequests creates a GetGamificationMetricsTooManyRequests with default headers values
func NewGetGamificationMetricsTooManyRequests() *GetGamificationMetricsTooManyRequests {
	return &GetGamificationMetricsTooManyRequests{}
}

/*GetGamificationMetricsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetGamificationMetricsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetGamificationMetricsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/metrics][%d] getGamificationMetricsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGamificationMetricsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationMetricsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationMetricsInternalServerError creates a GetGamificationMetricsInternalServerError with default headers values
func NewGetGamificationMetricsInternalServerError() *GetGamificationMetricsInternalServerError {
	return &GetGamificationMetricsInternalServerError{}
}

/*GetGamificationMetricsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetGamificationMetricsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetGamificationMetricsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/metrics][%d] getGamificationMetricsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGamificationMetricsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationMetricsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationMetricsServiceUnavailable creates a GetGamificationMetricsServiceUnavailable with default headers values
func NewGetGamificationMetricsServiceUnavailable() *GetGamificationMetricsServiceUnavailable {
	return &GetGamificationMetricsServiceUnavailable{}
}

/*GetGamificationMetricsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetGamificationMetricsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetGamificationMetricsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/metrics][%d] getGamificationMetricsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetGamificationMetricsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationMetricsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationMetricsGatewayTimeout creates a GetGamificationMetricsGatewayTimeout with default headers values
func NewGetGamificationMetricsGatewayTimeout() *GetGamificationMetricsGatewayTimeout {
	return &GetGamificationMetricsGatewayTimeout{}
}

/*GetGamificationMetricsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetGamificationMetricsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetGamificationMetricsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/metrics][%d] getGamificationMetricsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetGamificationMetricsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationMetricsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

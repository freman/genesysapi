// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetGamificationScorecardsValuesTrendsParams creates a new GetGamificationScorecardsValuesTrendsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetGamificationScorecardsValuesTrendsParams() *GetGamificationScorecardsValuesTrendsParams {
	return &GetGamificationScorecardsValuesTrendsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetGamificationScorecardsValuesTrendsParamsWithTimeout creates a new GetGamificationScorecardsValuesTrendsParams object
// with the ability to set a timeout on a request.
func NewGetGamificationScorecardsValuesTrendsParamsWithTimeout(timeout time.Duration) *GetGamificationScorecardsValuesTrendsParams {
	return &GetGamificationScorecardsValuesTrendsParams{
		timeout: timeout,
	}
}

// NewGetGamificationScorecardsValuesTrendsParamsWithContext creates a new GetGamificationScorecardsValuesTrendsParams object
// with the ability to set a context for a request.
func NewGetGamificationScorecardsValuesTrendsParamsWithContext(ctx context.Context) *GetGamificationScorecardsValuesTrendsParams {
	return &GetGamificationScorecardsValuesTrendsParams{
		Context: ctx,
	}
}

// NewGetGamificationScorecardsValuesTrendsParamsWithHTTPClient creates a new GetGamificationScorecardsValuesTrendsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetGamificationScorecardsValuesTrendsParamsWithHTTPClient(client *http.Client) *GetGamificationScorecardsValuesTrendsParams {
	return &GetGamificationScorecardsValuesTrendsParams{
		HTTPClient: client,
	}
}

/*
GetGamificationScorecardsValuesTrendsParams contains all the parameters to send to the API endpoint

	for the get gamification scorecards values trends operation.

	Typically these are written to a http.Request.
*/
type GetGamificationScorecardsValuesTrendsParams struct {

	/* EndWorkday.

	   End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

	   Format: date
	*/
	EndWorkday strfmt.Date

	/* FilterType.

	   Filter type for the query request. If not set, then the request is for the requesting user.
	*/
	FilterType *string

	/* ReferenceWorkday.

	   Reference workday for the trend. Used to determine the profile of the user as of this date. If not set, then the user's current profile will be used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

	   Format: date
	*/
	ReferenceWorkday *strfmt.Date

	/* StartWorkday.

	   Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

	   Format: date
	*/
	StartWorkday strfmt.Date

	/* TimeZone.

	   Timezone for the workday. Defaults to UTC

	   Default: "UTC"
	*/
	TimeZone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get gamification scorecards values trends params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGamificationScorecardsValuesTrendsParams) WithDefaults() *GetGamificationScorecardsValuesTrendsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get gamification scorecards values trends params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGamificationScorecardsValuesTrendsParams) SetDefaults() {
	var (
		timeZoneDefault = string("UTC")
	)

	val := GetGamificationScorecardsValuesTrendsParams{
		TimeZone: &timeZoneDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) WithTimeout(timeout time.Duration) *GetGamificationScorecardsValuesTrendsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) WithContext(ctx context.Context) *GetGamificationScorecardsValuesTrendsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) WithHTTPClient(client *http.Client) *GetGamificationScorecardsValuesTrendsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndWorkday adds the endWorkday to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) WithEndWorkday(endWorkday strfmt.Date) *GetGamificationScorecardsValuesTrendsParams {
	o.SetEndWorkday(endWorkday)
	return o
}

// SetEndWorkday adds the endWorkday to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) SetEndWorkday(endWorkday strfmt.Date) {
	o.EndWorkday = endWorkday
}

// WithFilterType adds the filterType to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) WithFilterType(filterType *string) *GetGamificationScorecardsValuesTrendsParams {
	o.SetFilterType(filterType)
	return o
}

// SetFilterType adds the filterType to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) SetFilterType(filterType *string) {
	o.FilterType = filterType
}

// WithReferenceWorkday adds the referenceWorkday to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) WithReferenceWorkday(referenceWorkday *strfmt.Date) *GetGamificationScorecardsValuesTrendsParams {
	o.SetReferenceWorkday(referenceWorkday)
	return o
}

// SetReferenceWorkday adds the referenceWorkday to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) SetReferenceWorkday(referenceWorkday *strfmt.Date) {
	o.ReferenceWorkday = referenceWorkday
}

// WithStartWorkday adds the startWorkday to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) WithStartWorkday(startWorkday strfmt.Date) *GetGamificationScorecardsValuesTrendsParams {
	o.SetStartWorkday(startWorkday)
	return o
}

// SetStartWorkday adds the startWorkday to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) SetStartWorkday(startWorkday strfmt.Date) {
	o.StartWorkday = startWorkday
}

// WithTimeZone adds the timeZone to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) WithTimeZone(timeZone *string) *GetGamificationScorecardsValuesTrendsParams {
	o.SetTimeZone(timeZone)
	return o
}

// SetTimeZone adds the timeZone to the get gamification scorecards values trends params
func (o *GetGamificationScorecardsValuesTrendsParams) SetTimeZone(timeZone *string) {
	o.TimeZone = timeZone
}

// WriteToRequest writes these params to a swagger request
func (o *GetGamificationScorecardsValuesTrendsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param endWorkday
	qrEndWorkday := o.EndWorkday
	qEndWorkday := qrEndWorkday.String()
	if qEndWorkday != "" {

		if err := r.SetQueryParam("endWorkday", qEndWorkday); err != nil {
			return err
		}
	}

	if o.FilterType != nil {

		// query param filterType
		var qrFilterType string

		if o.FilterType != nil {
			qrFilterType = *o.FilterType
		}
		qFilterType := qrFilterType
		if qFilterType != "" {

			if err := r.SetQueryParam("filterType", qFilterType); err != nil {
				return err
			}
		}
	}

	if o.ReferenceWorkday != nil {

		// query param referenceWorkday
		var qrReferenceWorkday strfmt.Date

		if o.ReferenceWorkday != nil {
			qrReferenceWorkday = *o.ReferenceWorkday
		}
		qReferenceWorkday := qrReferenceWorkday.String()
		if qReferenceWorkday != "" {

			if err := r.SetQueryParam("referenceWorkday", qReferenceWorkday); err != nil {
				return err
			}
		}
	}

	// query param startWorkday
	qrStartWorkday := o.StartWorkday
	qStartWorkday := qrStartWorkday.String()
	if qStartWorkday != "" {

		if err := r.SetQueryParam("startWorkday", qStartWorkday); err != nil {
			return err
		}
	}

	if o.TimeZone != nil {

		// query param timeZone
		var qrTimeZone string

		if o.TimeZone != nil {
			qrTimeZone = *o.TimeZone
		}
		qTimeZone := qrTimeZone
		if qTimeZone != "" {

			if err := r.SetQueryParam("timeZone", qTimeZone); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutGamificationProfileReader is a Reader for the PutGamificationProfile structure.
type PutGamificationProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutGamificationProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutGamificationProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutGamificationProfileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutGamificationProfileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutGamificationProfileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutGamificationProfileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutGamificationProfileRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutGamificationProfileRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutGamificationProfileUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutGamificationProfileTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutGamificationProfileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutGamificationProfileServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutGamificationProfileGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutGamificationProfileOK creates a PutGamificationProfileOK with default headers values
func NewPutGamificationProfileOK() *PutGamificationProfileOK {
	return &PutGamificationProfileOK{}
}

/*
PutGamificationProfileOK describes a response with status code 200, with default header values.

successful operation
*/
type PutGamificationProfileOK struct {
	Payload *models.PerformanceProfile
}

// IsSuccess returns true when this put gamification profile o k response has a 2xx status code
func (o *PutGamificationProfileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put gamification profile o k response has a 3xx status code
func (o *PutGamificationProfileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put gamification profile o k response has a 4xx status code
func (o *PutGamificationProfileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put gamification profile o k response has a 5xx status code
func (o *PutGamificationProfileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put gamification profile o k response a status code equal to that given
func (o *PutGamificationProfileOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutGamificationProfileOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileOK  %+v", 200, o.Payload)
}

func (o *PutGamificationProfileOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileOK  %+v", 200, o.Payload)
}

func (o *PutGamificationProfileOK) GetPayload() *models.PerformanceProfile {
	return o.Payload
}

func (o *PutGamificationProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PerformanceProfile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutGamificationProfileBadRequest creates a PutGamificationProfileBadRequest with default headers values
func NewPutGamificationProfileBadRequest() *PutGamificationProfileBadRequest {
	return &PutGamificationProfileBadRequest{}
}

/*
PutGamificationProfileBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutGamificationProfileBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put gamification profile bad request response has a 2xx status code
func (o *PutGamificationProfileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put gamification profile bad request response has a 3xx status code
func (o *PutGamificationProfileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put gamification profile bad request response has a 4xx status code
func (o *PutGamificationProfileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put gamification profile bad request response has a 5xx status code
func (o *PutGamificationProfileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put gamification profile bad request response a status code equal to that given
func (o *PutGamificationProfileBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutGamificationProfileBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileBadRequest  %+v", 400, o.Payload)
}

func (o *PutGamificationProfileBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileBadRequest  %+v", 400, o.Payload)
}

func (o *PutGamificationProfileBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutGamificationProfileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutGamificationProfileUnauthorized creates a PutGamificationProfileUnauthorized with default headers values
func NewPutGamificationProfileUnauthorized() *PutGamificationProfileUnauthorized {
	return &PutGamificationProfileUnauthorized{}
}

/*
PutGamificationProfileUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutGamificationProfileUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put gamification profile unauthorized response has a 2xx status code
func (o *PutGamificationProfileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put gamification profile unauthorized response has a 3xx status code
func (o *PutGamificationProfileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put gamification profile unauthorized response has a 4xx status code
func (o *PutGamificationProfileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put gamification profile unauthorized response has a 5xx status code
func (o *PutGamificationProfileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put gamification profile unauthorized response a status code equal to that given
func (o *PutGamificationProfileUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutGamificationProfileUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileUnauthorized  %+v", 401, o.Payload)
}

func (o *PutGamificationProfileUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileUnauthorized  %+v", 401, o.Payload)
}

func (o *PutGamificationProfileUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutGamificationProfileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutGamificationProfileForbidden creates a PutGamificationProfileForbidden with default headers values
func NewPutGamificationProfileForbidden() *PutGamificationProfileForbidden {
	return &PutGamificationProfileForbidden{}
}

/*
PutGamificationProfileForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutGamificationProfileForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put gamification profile forbidden response has a 2xx status code
func (o *PutGamificationProfileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put gamification profile forbidden response has a 3xx status code
func (o *PutGamificationProfileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put gamification profile forbidden response has a 4xx status code
func (o *PutGamificationProfileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put gamification profile forbidden response has a 5xx status code
func (o *PutGamificationProfileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put gamification profile forbidden response a status code equal to that given
func (o *PutGamificationProfileForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutGamificationProfileForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileForbidden  %+v", 403, o.Payload)
}

func (o *PutGamificationProfileForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileForbidden  %+v", 403, o.Payload)
}

func (o *PutGamificationProfileForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutGamificationProfileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutGamificationProfileNotFound creates a PutGamificationProfileNotFound with default headers values
func NewPutGamificationProfileNotFound() *PutGamificationProfileNotFound {
	return &PutGamificationProfileNotFound{}
}

/*
PutGamificationProfileNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutGamificationProfileNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put gamification profile not found response has a 2xx status code
func (o *PutGamificationProfileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put gamification profile not found response has a 3xx status code
func (o *PutGamificationProfileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put gamification profile not found response has a 4xx status code
func (o *PutGamificationProfileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put gamification profile not found response has a 5xx status code
func (o *PutGamificationProfileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put gamification profile not found response a status code equal to that given
func (o *PutGamificationProfileNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutGamificationProfileNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileNotFound  %+v", 404, o.Payload)
}

func (o *PutGamificationProfileNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileNotFound  %+v", 404, o.Payload)
}

func (o *PutGamificationProfileNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutGamificationProfileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutGamificationProfileRequestTimeout creates a PutGamificationProfileRequestTimeout with default headers values
func NewPutGamificationProfileRequestTimeout() *PutGamificationProfileRequestTimeout {
	return &PutGamificationProfileRequestTimeout{}
}

/*
PutGamificationProfileRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutGamificationProfileRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put gamification profile request timeout response has a 2xx status code
func (o *PutGamificationProfileRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put gamification profile request timeout response has a 3xx status code
func (o *PutGamificationProfileRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put gamification profile request timeout response has a 4xx status code
func (o *PutGamificationProfileRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put gamification profile request timeout response has a 5xx status code
func (o *PutGamificationProfileRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put gamification profile request timeout response a status code equal to that given
func (o *PutGamificationProfileRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutGamificationProfileRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutGamificationProfileRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutGamificationProfileRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutGamificationProfileRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutGamificationProfileRequestEntityTooLarge creates a PutGamificationProfileRequestEntityTooLarge with default headers values
func NewPutGamificationProfileRequestEntityTooLarge() *PutGamificationProfileRequestEntityTooLarge {
	return &PutGamificationProfileRequestEntityTooLarge{}
}

/*
PutGamificationProfileRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutGamificationProfileRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put gamification profile request entity too large response has a 2xx status code
func (o *PutGamificationProfileRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put gamification profile request entity too large response has a 3xx status code
func (o *PutGamificationProfileRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put gamification profile request entity too large response has a 4xx status code
func (o *PutGamificationProfileRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put gamification profile request entity too large response has a 5xx status code
func (o *PutGamificationProfileRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put gamification profile request entity too large response a status code equal to that given
func (o *PutGamificationProfileRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutGamificationProfileRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutGamificationProfileRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutGamificationProfileRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutGamificationProfileRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutGamificationProfileUnsupportedMediaType creates a PutGamificationProfileUnsupportedMediaType with default headers values
func NewPutGamificationProfileUnsupportedMediaType() *PutGamificationProfileUnsupportedMediaType {
	return &PutGamificationProfileUnsupportedMediaType{}
}

/*
PutGamificationProfileUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutGamificationProfileUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put gamification profile unsupported media type response has a 2xx status code
func (o *PutGamificationProfileUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put gamification profile unsupported media type response has a 3xx status code
func (o *PutGamificationProfileUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put gamification profile unsupported media type response has a 4xx status code
func (o *PutGamificationProfileUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put gamification profile unsupported media type response has a 5xx status code
func (o *PutGamificationProfileUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put gamification profile unsupported media type response a status code equal to that given
func (o *PutGamificationProfileUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutGamificationProfileUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutGamificationProfileUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutGamificationProfileUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutGamificationProfileUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutGamificationProfileTooManyRequests creates a PutGamificationProfileTooManyRequests with default headers values
func NewPutGamificationProfileTooManyRequests() *PutGamificationProfileTooManyRequests {
	return &PutGamificationProfileTooManyRequests{}
}

/*
PutGamificationProfileTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutGamificationProfileTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put gamification profile too many requests response has a 2xx status code
func (o *PutGamificationProfileTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put gamification profile too many requests response has a 3xx status code
func (o *PutGamificationProfileTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put gamification profile too many requests response has a 4xx status code
func (o *PutGamificationProfileTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put gamification profile too many requests response has a 5xx status code
func (o *PutGamificationProfileTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put gamification profile too many requests response a status code equal to that given
func (o *PutGamificationProfileTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutGamificationProfileTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutGamificationProfileTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutGamificationProfileTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutGamificationProfileTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutGamificationProfileInternalServerError creates a PutGamificationProfileInternalServerError with default headers values
func NewPutGamificationProfileInternalServerError() *PutGamificationProfileInternalServerError {
	return &PutGamificationProfileInternalServerError{}
}

/*
PutGamificationProfileInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutGamificationProfileInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put gamification profile internal server error response has a 2xx status code
func (o *PutGamificationProfileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put gamification profile internal server error response has a 3xx status code
func (o *PutGamificationProfileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put gamification profile internal server error response has a 4xx status code
func (o *PutGamificationProfileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put gamification profile internal server error response has a 5xx status code
func (o *PutGamificationProfileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put gamification profile internal server error response a status code equal to that given
func (o *PutGamificationProfileInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutGamificationProfileInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileInternalServerError  %+v", 500, o.Payload)
}

func (o *PutGamificationProfileInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileInternalServerError  %+v", 500, o.Payload)
}

func (o *PutGamificationProfileInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutGamificationProfileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutGamificationProfileServiceUnavailable creates a PutGamificationProfileServiceUnavailable with default headers values
func NewPutGamificationProfileServiceUnavailable() *PutGamificationProfileServiceUnavailable {
	return &PutGamificationProfileServiceUnavailable{}
}

/*
PutGamificationProfileServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutGamificationProfileServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put gamification profile service unavailable response has a 2xx status code
func (o *PutGamificationProfileServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put gamification profile service unavailable response has a 3xx status code
func (o *PutGamificationProfileServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put gamification profile service unavailable response has a 4xx status code
func (o *PutGamificationProfileServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put gamification profile service unavailable response has a 5xx status code
func (o *PutGamificationProfileServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put gamification profile service unavailable response a status code equal to that given
func (o *PutGamificationProfileServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutGamificationProfileServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutGamificationProfileServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutGamificationProfileServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutGamificationProfileServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutGamificationProfileGatewayTimeout creates a PutGamificationProfileGatewayTimeout with default headers values
func NewPutGamificationProfileGatewayTimeout() *PutGamificationProfileGatewayTimeout {
	return &PutGamificationProfileGatewayTimeout{}
}

/*
PutGamificationProfileGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutGamificationProfileGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put gamification profile gateway timeout response has a 2xx status code
func (o *PutGamificationProfileGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put gamification profile gateway timeout response has a 3xx status code
func (o *PutGamificationProfileGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put gamification profile gateway timeout response has a 4xx status code
func (o *PutGamificationProfileGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put gamification profile gateway timeout response has a 5xx status code
func (o *PutGamificationProfileGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put gamification profile gateway timeout response a status code equal to that given
func (o *PutGamificationProfileGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutGamificationProfileGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutGamificationProfileGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/gamification/profiles/{profileId}][%d] putGamificationProfileGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutGamificationProfileGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutGamificationProfileGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

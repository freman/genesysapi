// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetGamificationLeaderboardReader is a Reader for the GetGamificationLeaderboard structure.
type GetGamificationLeaderboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGamificationLeaderboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGamificationLeaderboardOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGamificationLeaderboardBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetGamificationLeaderboardUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGamificationLeaderboardForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGamificationLeaderboardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetGamificationLeaderboardRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetGamificationLeaderboardRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetGamificationLeaderboardUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetGamificationLeaderboardTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGamificationLeaderboardInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetGamificationLeaderboardServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetGamificationLeaderboardGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGamificationLeaderboardOK creates a GetGamificationLeaderboardOK with default headers values
func NewGetGamificationLeaderboardOK() *GetGamificationLeaderboardOK {
	return &GetGamificationLeaderboardOK{}
}

/*
GetGamificationLeaderboardOK describes a response with status code 200, with default header values.

successful operation
*/
type GetGamificationLeaderboardOK struct {
	Payload *models.Leaderboard
}

// IsSuccess returns true when this get gamification leaderboard o k response has a 2xx status code
func (o *GetGamificationLeaderboardOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get gamification leaderboard o k response has a 3xx status code
func (o *GetGamificationLeaderboardOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification leaderboard o k response has a 4xx status code
func (o *GetGamificationLeaderboardOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification leaderboard o k response has a 5xx status code
func (o *GetGamificationLeaderboardOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification leaderboard o k response a status code equal to that given
func (o *GetGamificationLeaderboardOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetGamificationLeaderboardOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardOK  %+v", 200, o.Payload)
}

func (o *GetGamificationLeaderboardOK) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardOK  %+v", 200, o.Payload)
}

func (o *GetGamificationLeaderboardOK) GetPayload() *models.Leaderboard {
	return o.Payload
}

func (o *GetGamificationLeaderboardOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Leaderboard)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationLeaderboardBadRequest creates a GetGamificationLeaderboardBadRequest with default headers values
func NewGetGamificationLeaderboardBadRequest() *GetGamificationLeaderboardBadRequest {
	return &GetGamificationLeaderboardBadRequest{}
}

/*
GetGamificationLeaderboardBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetGamificationLeaderboardBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification leaderboard bad request response has a 2xx status code
func (o *GetGamificationLeaderboardBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification leaderboard bad request response has a 3xx status code
func (o *GetGamificationLeaderboardBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification leaderboard bad request response has a 4xx status code
func (o *GetGamificationLeaderboardBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification leaderboard bad request response has a 5xx status code
func (o *GetGamificationLeaderboardBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification leaderboard bad request response a status code equal to that given
func (o *GetGamificationLeaderboardBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetGamificationLeaderboardBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardBadRequest  %+v", 400, o.Payload)
}

func (o *GetGamificationLeaderboardBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardBadRequest  %+v", 400, o.Payload)
}

func (o *GetGamificationLeaderboardBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationLeaderboardBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationLeaderboardUnauthorized creates a GetGamificationLeaderboardUnauthorized with default headers values
func NewGetGamificationLeaderboardUnauthorized() *GetGamificationLeaderboardUnauthorized {
	return &GetGamificationLeaderboardUnauthorized{}
}

/*
GetGamificationLeaderboardUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetGamificationLeaderboardUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification leaderboard unauthorized response has a 2xx status code
func (o *GetGamificationLeaderboardUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification leaderboard unauthorized response has a 3xx status code
func (o *GetGamificationLeaderboardUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification leaderboard unauthorized response has a 4xx status code
func (o *GetGamificationLeaderboardUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification leaderboard unauthorized response has a 5xx status code
func (o *GetGamificationLeaderboardUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification leaderboard unauthorized response a status code equal to that given
func (o *GetGamificationLeaderboardUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetGamificationLeaderboardUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGamificationLeaderboardUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGamificationLeaderboardUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationLeaderboardUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationLeaderboardForbidden creates a GetGamificationLeaderboardForbidden with default headers values
func NewGetGamificationLeaderboardForbidden() *GetGamificationLeaderboardForbidden {
	return &GetGamificationLeaderboardForbidden{}
}

/*
GetGamificationLeaderboardForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetGamificationLeaderboardForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification leaderboard forbidden response has a 2xx status code
func (o *GetGamificationLeaderboardForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification leaderboard forbidden response has a 3xx status code
func (o *GetGamificationLeaderboardForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification leaderboard forbidden response has a 4xx status code
func (o *GetGamificationLeaderboardForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification leaderboard forbidden response has a 5xx status code
func (o *GetGamificationLeaderboardForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification leaderboard forbidden response a status code equal to that given
func (o *GetGamificationLeaderboardForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetGamificationLeaderboardForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardForbidden  %+v", 403, o.Payload)
}

func (o *GetGamificationLeaderboardForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardForbidden  %+v", 403, o.Payload)
}

func (o *GetGamificationLeaderboardForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationLeaderboardForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationLeaderboardNotFound creates a GetGamificationLeaderboardNotFound with default headers values
func NewGetGamificationLeaderboardNotFound() *GetGamificationLeaderboardNotFound {
	return &GetGamificationLeaderboardNotFound{}
}

/*
GetGamificationLeaderboardNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetGamificationLeaderboardNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification leaderboard not found response has a 2xx status code
func (o *GetGamificationLeaderboardNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification leaderboard not found response has a 3xx status code
func (o *GetGamificationLeaderboardNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification leaderboard not found response has a 4xx status code
func (o *GetGamificationLeaderboardNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification leaderboard not found response has a 5xx status code
func (o *GetGamificationLeaderboardNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification leaderboard not found response a status code equal to that given
func (o *GetGamificationLeaderboardNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetGamificationLeaderboardNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardNotFound  %+v", 404, o.Payload)
}

func (o *GetGamificationLeaderboardNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardNotFound  %+v", 404, o.Payload)
}

func (o *GetGamificationLeaderboardNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationLeaderboardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationLeaderboardRequestTimeout creates a GetGamificationLeaderboardRequestTimeout with default headers values
func NewGetGamificationLeaderboardRequestTimeout() *GetGamificationLeaderboardRequestTimeout {
	return &GetGamificationLeaderboardRequestTimeout{}
}

/*
GetGamificationLeaderboardRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetGamificationLeaderboardRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification leaderboard request timeout response has a 2xx status code
func (o *GetGamificationLeaderboardRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification leaderboard request timeout response has a 3xx status code
func (o *GetGamificationLeaderboardRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification leaderboard request timeout response has a 4xx status code
func (o *GetGamificationLeaderboardRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification leaderboard request timeout response has a 5xx status code
func (o *GetGamificationLeaderboardRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification leaderboard request timeout response a status code equal to that given
func (o *GetGamificationLeaderboardRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetGamificationLeaderboardRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetGamificationLeaderboardRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetGamificationLeaderboardRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationLeaderboardRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationLeaderboardRequestEntityTooLarge creates a GetGamificationLeaderboardRequestEntityTooLarge with default headers values
func NewGetGamificationLeaderboardRequestEntityTooLarge() *GetGamificationLeaderboardRequestEntityTooLarge {
	return &GetGamificationLeaderboardRequestEntityTooLarge{}
}

/*
GetGamificationLeaderboardRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetGamificationLeaderboardRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification leaderboard request entity too large response has a 2xx status code
func (o *GetGamificationLeaderboardRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification leaderboard request entity too large response has a 3xx status code
func (o *GetGamificationLeaderboardRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification leaderboard request entity too large response has a 4xx status code
func (o *GetGamificationLeaderboardRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification leaderboard request entity too large response has a 5xx status code
func (o *GetGamificationLeaderboardRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification leaderboard request entity too large response a status code equal to that given
func (o *GetGamificationLeaderboardRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetGamificationLeaderboardRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetGamificationLeaderboardRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetGamificationLeaderboardRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationLeaderboardRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationLeaderboardUnsupportedMediaType creates a GetGamificationLeaderboardUnsupportedMediaType with default headers values
func NewGetGamificationLeaderboardUnsupportedMediaType() *GetGamificationLeaderboardUnsupportedMediaType {
	return &GetGamificationLeaderboardUnsupportedMediaType{}
}

/*
GetGamificationLeaderboardUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetGamificationLeaderboardUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification leaderboard unsupported media type response has a 2xx status code
func (o *GetGamificationLeaderboardUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification leaderboard unsupported media type response has a 3xx status code
func (o *GetGamificationLeaderboardUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification leaderboard unsupported media type response has a 4xx status code
func (o *GetGamificationLeaderboardUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification leaderboard unsupported media type response has a 5xx status code
func (o *GetGamificationLeaderboardUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification leaderboard unsupported media type response a status code equal to that given
func (o *GetGamificationLeaderboardUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetGamificationLeaderboardUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetGamificationLeaderboardUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetGamificationLeaderboardUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationLeaderboardUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationLeaderboardTooManyRequests creates a GetGamificationLeaderboardTooManyRequests with default headers values
func NewGetGamificationLeaderboardTooManyRequests() *GetGamificationLeaderboardTooManyRequests {
	return &GetGamificationLeaderboardTooManyRequests{}
}

/*
GetGamificationLeaderboardTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetGamificationLeaderboardTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification leaderboard too many requests response has a 2xx status code
func (o *GetGamificationLeaderboardTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification leaderboard too many requests response has a 3xx status code
func (o *GetGamificationLeaderboardTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification leaderboard too many requests response has a 4xx status code
func (o *GetGamificationLeaderboardTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification leaderboard too many requests response has a 5xx status code
func (o *GetGamificationLeaderboardTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification leaderboard too many requests response a status code equal to that given
func (o *GetGamificationLeaderboardTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetGamificationLeaderboardTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGamificationLeaderboardTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGamificationLeaderboardTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationLeaderboardTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationLeaderboardInternalServerError creates a GetGamificationLeaderboardInternalServerError with default headers values
func NewGetGamificationLeaderboardInternalServerError() *GetGamificationLeaderboardInternalServerError {
	return &GetGamificationLeaderboardInternalServerError{}
}

/*
GetGamificationLeaderboardInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetGamificationLeaderboardInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification leaderboard internal server error response has a 2xx status code
func (o *GetGamificationLeaderboardInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification leaderboard internal server error response has a 3xx status code
func (o *GetGamificationLeaderboardInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification leaderboard internal server error response has a 4xx status code
func (o *GetGamificationLeaderboardInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification leaderboard internal server error response has a 5xx status code
func (o *GetGamificationLeaderboardInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get gamification leaderboard internal server error response a status code equal to that given
func (o *GetGamificationLeaderboardInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetGamificationLeaderboardInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGamificationLeaderboardInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGamificationLeaderboardInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationLeaderboardInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationLeaderboardServiceUnavailable creates a GetGamificationLeaderboardServiceUnavailable with default headers values
func NewGetGamificationLeaderboardServiceUnavailable() *GetGamificationLeaderboardServiceUnavailable {
	return &GetGamificationLeaderboardServiceUnavailable{}
}

/*
GetGamificationLeaderboardServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetGamificationLeaderboardServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification leaderboard service unavailable response has a 2xx status code
func (o *GetGamificationLeaderboardServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification leaderboard service unavailable response has a 3xx status code
func (o *GetGamificationLeaderboardServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification leaderboard service unavailable response has a 4xx status code
func (o *GetGamificationLeaderboardServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification leaderboard service unavailable response has a 5xx status code
func (o *GetGamificationLeaderboardServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get gamification leaderboard service unavailable response a status code equal to that given
func (o *GetGamificationLeaderboardServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetGamificationLeaderboardServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetGamificationLeaderboardServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetGamificationLeaderboardServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationLeaderboardServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationLeaderboardGatewayTimeout creates a GetGamificationLeaderboardGatewayTimeout with default headers values
func NewGetGamificationLeaderboardGatewayTimeout() *GetGamificationLeaderboardGatewayTimeout {
	return &GetGamificationLeaderboardGatewayTimeout{}
}

/*
GetGamificationLeaderboardGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetGamificationLeaderboardGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification leaderboard gateway timeout response has a 2xx status code
func (o *GetGamificationLeaderboardGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification leaderboard gateway timeout response has a 3xx status code
func (o *GetGamificationLeaderboardGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification leaderboard gateway timeout response has a 4xx status code
func (o *GetGamificationLeaderboardGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification leaderboard gateway timeout response has a 5xx status code
func (o *GetGamificationLeaderboardGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get gamification leaderboard gateway timeout response a status code equal to that given
func (o *GetGamificationLeaderboardGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetGamificationLeaderboardGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetGamificationLeaderboardGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/leaderboard][%d] getGamificationLeaderboardGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetGamificationLeaderboardGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationLeaderboardGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

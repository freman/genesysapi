// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetGamificationScorecardsUserParams creates a new GetGamificationScorecardsUserParams object
// with the default values initialized.
func NewGetGamificationScorecardsUserParams() *GetGamificationScorecardsUserParams {
	var ()
	return &GetGamificationScorecardsUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetGamificationScorecardsUserParamsWithTimeout creates a new GetGamificationScorecardsUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetGamificationScorecardsUserParamsWithTimeout(timeout time.Duration) *GetGamificationScorecardsUserParams {
	var ()
	return &GetGamificationScorecardsUserParams{

		timeout: timeout,
	}
}

// NewGetGamificationScorecardsUserParamsWithContext creates a new GetGamificationScorecardsUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetGamificationScorecardsUserParamsWithContext(ctx context.Context) *GetGamificationScorecardsUserParams {
	var ()
	return &GetGamificationScorecardsUserParams{

		Context: ctx,
	}
}

// NewGetGamificationScorecardsUserParamsWithHTTPClient creates a new GetGamificationScorecardsUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetGamificationScorecardsUserParamsWithHTTPClient(client *http.Client) *GetGamificationScorecardsUserParams {
	var ()
	return &GetGamificationScorecardsUserParams{
		HTTPClient: client,
	}
}

/*GetGamificationScorecardsUserParams contains all the parameters to send to the API endpoint
for the get gamification scorecards user operation typically these are written to a http.Request
*/
type GetGamificationScorecardsUserParams struct {

	/*Expand
	  Which fields, if any, to expand.

	*/
	Expand []string
	/*UserID*/
	UserID string
	/*Workday
	  Target querying workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

	*/
	Workday strfmt.Date

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get gamification scorecards user params
func (o *GetGamificationScorecardsUserParams) WithTimeout(timeout time.Duration) *GetGamificationScorecardsUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get gamification scorecards user params
func (o *GetGamificationScorecardsUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get gamification scorecards user params
func (o *GetGamificationScorecardsUserParams) WithContext(ctx context.Context) *GetGamificationScorecardsUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get gamification scorecards user params
func (o *GetGamificationScorecardsUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get gamification scorecards user params
func (o *GetGamificationScorecardsUserParams) WithHTTPClient(client *http.Client) *GetGamificationScorecardsUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get gamification scorecards user params
func (o *GetGamificationScorecardsUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExpand adds the expand to the get gamification scorecards user params
func (o *GetGamificationScorecardsUserParams) WithExpand(expand []string) *GetGamificationScorecardsUserParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get gamification scorecards user params
func (o *GetGamificationScorecardsUserParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithUserID adds the userID to the get gamification scorecards user params
func (o *GetGamificationScorecardsUserParams) WithUserID(userID string) *GetGamificationScorecardsUserParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get gamification scorecards user params
func (o *GetGamificationScorecardsUserParams) SetUserID(userID string) {
	o.UserID = userID
}

// WithWorkday adds the workday to the get gamification scorecards user params
func (o *GetGamificationScorecardsUserParams) WithWorkday(workday strfmt.Date) *GetGamificationScorecardsUserParams {
	o.SetWorkday(workday)
	return o
}

// SetWorkday adds the workday to the get gamification scorecards user params
func (o *GetGamificationScorecardsUserParams) SetWorkday(workday strfmt.Date) {
	o.Workday = workday
}

// WriteToRequest writes these params to a swagger request
func (o *GetGamificationScorecardsUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesExpand := o.Expand

	joinedExpand := swag.JoinByFormat(valuesExpand, "multi")
	// query array param expand
	if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
		return err
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	// query param workday
	qrWorkday := o.Workday
	qWorkday := qrWorkday.String()
	if qWorkday != "" {
		if err := r.SetQueryParam("workday", qWorkday); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

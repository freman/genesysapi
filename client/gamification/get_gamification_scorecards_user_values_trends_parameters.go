// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetGamificationScorecardsUserValuesTrendsParams creates a new GetGamificationScorecardsUserValuesTrendsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetGamificationScorecardsUserValuesTrendsParams() *GetGamificationScorecardsUserValuesTrendsParams {
	return &GetGamificationScorecardsUserValuesTrendsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetGamificationScorecardsUserValuesTrendsParamsWithTimeout creates a new GetGamificationScorecardsUserValuesTrendsParams object
// with the ability to set a timeout on a request.
func NewGetGamificationScorecardsUserValuesTrendsParamsWithTimeout(timeout time.Duration) *GetGamificationScorecardsUserValuesTrendsParams {
	return &GetGamificationScorecardsUserValuesTrendsParams{
		timeout: timeout,
	}
}

// NewGetGamificationScorecardsUserValuesTrendsParamsWithContext creates a new GetGamificationScorecardsUserValuesTrendsParams object
// with the ability to set a context for a request.
func NewGetGamificationScorecardsUserValuesTrendsParamsWithContext(ctx context.Context) *GetGamificationScorecardsUserValuesTrendsParams {
	return &GetGamificationScorecardsUserValuesTrendsParams{
		Context: ctx,
	}
}

// NewGetGamificationScorecardsUserValuesTrendsParamsWithHTTPClient creates a new GetGamificationScorecardsUserValuesTrendsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetGamificationScorecardsUserValuesTrendsParamsWithHTTPClient(client *http.Client) *GetGamificationScorecardsUserValuesTrendsParams {
	return &GetGamificationScorecardsUserValuesTrendsParams{
		HTTPClient: client,
	}
}

/*
GetGamificationScorecardsUserValuesTrendsParams contains all the parameters to send to the API endpoint

	for the get gamification scorecards user values trends operation.

	Typically these are written to a http.Request.
*/
type GetGamificationScorecardsUserValuesTrendsParams struct {

	/* EndWorkday.

	   End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

	   Format: date
	*/
	EndWorkday strfmt.Date

	/* StartWorkday.

	   Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

	   Format: date
	*/
	StartWorkday strfmt.Date

	/* TimeZone.

	   Timezone for the workday. Defaults to UTC

	   Default: "UTC"
	*/
	TimeZone *string

	// UserID.
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get gamification scorecards user values trends params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGamificationScorecardsUserValuesTrendsParams) WithDefaults() *GetGamificationScorecardsUserValuesTrendsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get gamification scorecards user values trends params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGamificationScorecardsUserValuesTrendsParams) SetDefaults() {
	var (
		timeZoneDefault = string("UTC")
	)

	val := GetGamificationScorecardsUserValuesTrendsParams{
		TimeZone: &timeZoneDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get gamification scorecards user values trends params
func (o *GetGamificationScorecardsUserValuesTrendsParams) WithTimeout(timeout time.Duration) *GetGamificationScorecardsUserValuesTrendsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get gamification scorecards user values trends params
func (o *GetGamificationScorecardsUserValuesTrendsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get gamification scorecards user values trends params
func (o *GetGamificationScorecardsUserValuesTrendsParams) WithContext(ctx context.Context) *GetGamificationScorecardsUserValuesTrendsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get gamification scorecards user values trends params
func (o *GetGamificationScorecardsUserValuesTrendsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get gamification scorecards user values trends params
func (o *GetGamificationScorecardsUserValuesTrendsParams) WithHTTPClient(client *http.Client) *GetGamificationScorecardsUserValuesTrendsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get gamification scorecards user values trends params
func (o *GetGamificationScorecardsUserValuesTrendsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndWorkday adds the endWorkday to the get gamification scorecards user values trends params
func (o *GetGamificationScorecardsUserValuesTrendsParams) WithEndWorkday(endWorkday strfmt.Date) *GetGamificationScorecardsUserValuesTrendsParams {
	o.SetEndWorkday(endWorkday)
	return o
}

// SetEndWorkday adds the endWorkday to the get gamification scorecards user values trends params
func (o *GetGamificationScorecardsUserValuesTrendsParams) SetEndWorkday(endWorkday strfmt.Date) {
	o.EndWorkday = endWorkday
}

// WithStartWorkday adds the startWorkday to the get gamification scorecards user values trends params
func (o *GetGamificationScorecardsUserValuesTrendsParams) WithStartWorkday(startWorkday strfmt.Date) *GetGamificationScorecardsUserValuesTrendsParams {
	o.SetStartWorkday(startWorkday)
	return o
}

// SetStartWorkday adds the startWorkday to the get gamification scorecards user values trends params
func (o *GetGamificationScorecardsUserValuesTrendsParams) SetStartWorkday(startWorkday strfmt.Date) {
	o.StartWorkday = startWorkday
}

// WithTimeZone adds the timeZone to the get gamification scorecards user values trends params
func (o *GetGamificationScorecardsUserValuesTrendsParams) WithTimeZone(timeZone *string) *GetGamificationScorecardsUserValuesTrendsParams {
	o.SetTimeZone(timeZone)
	return o
}

// SetTimeZone adds the timeZone to the get gamification scorecards user values trends params
func (o *GetGamificationScorecardsUserValuesTrendsParams) SetTimeZone(timeZone *string) {
	o.TimeZone = timeZone
}

// WithUserID adds the userID to the get gamification scorecards user values trends params
func (o *GetGamificationScorecardsUserValuesTrendsParams) WithUserID(userID string) *GetGamificationScorecardsUserValuesTrendsParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get gamification scorecards user values trends params
func (o *GetGamificationScorecardsUserValuesTrendsParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetGamificationScorecardsUserValuesTrendsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param endWorkday
	qrEndWorkday := o.EndWorkday
	qEndWorkday := qrEndWorkday.String()
	if qEndWorkday != "" {

		if err := r.SetQueryParam("endWorkday", qEndWorkday); err != nil {
			return err
		}
	}

	// query param startWorkday
	qrStartWorkday := o.StartWorkday
	qStartWorkday := qrStartWorkday.String()
	if qStartWorkday != "" {

		if err := r.SetQueryParam("startWorkday", qStartWorkday); err != nil {
			return err
		}
	}

	if o.TimeZone != nil {

		// query param timeZone
		var qrTimeZone string

		if o.TimeZone != nil {
			qrTimeZone = *o.TimeZone
		}
		qTimeZone := qrTimeZone
		if qTimeZone != "" {

			if err := r.SetQueryParam("timeZone", qTimeZone); err != nil {
				return err
			}
		}
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

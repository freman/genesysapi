// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetGamificationMetricParams creates a new GetGamificationMetricParams object
// with the default values initialized.
func NewGetGamificationMetricParams() *GetGamificationMetricParams {
	var ()
	return &GetGamificationMetricParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetGamificationMetricParamsWithTimeout creates a new GetGamificationMetricParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetGamificationMetricParamsWithTimeout(timeout time.Duration) *GetGamificationMetricParams {
	var ()
	return &GetGamificationMetricParams{

		timeout: timeout,
	}
}

// NewGetGamificationMetricParamsWithContext creates a new GetGamificationMetricParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetGamificationMetricParamsWithContext(ctx context.Context) *GetGamificationMetricParams {
	var ()
	return &GetGamificationMetricParams{

		Context: ctx,
	}
}

// NewGetGamificationMetricParamsWithHTTPClient creates a new GetGamificationMetricParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetGamificationMetricParamsWithHTTPClient(client *http.Client) *GetGamificationMetricParams {
	var ()
	return &GetGamificationMetricParams{
		HTTPClient: client,
	}
}

/*GetGamificationMetricParams contains all the parameters to send to the API endpoint
for the get gamification metric operation typically these are written to a http.Request
*/
type GetGamificationMetricParams struct {

	/*MetricID
	  metric Id

	*/
	MetricID string
	/*PerformanceProfileID
	  The profile id of the metrics you are trying to retrieve. The DEFAULT profile is used if nothing is given.

	*/
	PerformanceProfileID *string
	/*Workday
	  The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

	*/
	Workday *strfmt.Date

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get gamification metric params
func (o *GetGamificationMetricParams) WithTimeout(timeout time.Duration) *GetGamificationMetricParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get gamification metric params
func (o *GetGamificationMetricParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get gamification metric params
func (o *GetGamificationMetricParams) WithContext(ctx context.Context) *GetGamificationMetricParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get gamification metric params
func (o *GetGamificationMetricParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get gamification metric params
func (o *GetGamificationMetricParams) WithHTTPClient(client *http.Client) *GetGamificationMetricParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get gamification metric params
func (o *GetGamificationMetricParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMetricID adds the metricID to the get gamification metric params
func (o *GetGamificationMetricParams) WithMetricID(metricID string) *GetGamificationMetricParams {
	o.SetMetricID(metricID)
	return o
}

// SetMetricID adds the metricId to the get gamification metric params
func (o *GetGamificationMetricParams) SetMetricID(metricID string) {
	o.MetricID = metricID
}

// WithPerformanceProfileID adds the performanceProfileID to the get gamification metric params
func (o *GetGamificationMetricParams) WithPerformanceProfileID(performanceProfileID *string) *GetGamificationMetricParams {
	o.SetPerformanceProfileID(performanceProfileID)
	return o
}

// SetPerformanceProfileID adds the performanceProfileId to the get gamification metric params
func (o *GetGamificationMetricParams) SetPerformanceProfileID(performanceProfileID *string) {
	o.PerformanceProfileID = performanceProfileID
}

// WithWorkday adds the workday to the get gamification metric params
func (o *GetGamificationMetricParams) WithWorkday(workday *strfmt.Date) *GetGamificationMetricParams {
	o.SetWorkday(workday)
	return o
}

// SetWorkday adds the workday to the get gamification metric params
func (o *GetGamificationMetricParams) SetWorkday(workday *strfmt.Date) {
	o.Workday = workday
}

// WriteToRequest writes these params to a swagger request
func (o *GetGamificationMetricParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param metricId
	if err := r.SetPathParam("metricId", o.MetricID); err != nil {
		return err
	}

	if o.PerformanceProfileID != nil {

		// query param performanceProfileId
		var qrPerformanceProfileID string
		if o.PerformanceProfileID != nil {
			qrPerformanceProfileID = *o.PerformanceProfileID
		}
		qPerformanceProfileID := qrPerformanceProfileID
		if qPerformanceProfileID != "" {
			if err := r.SetQueryParam("performanceProfileId", qPerformanceProfileID); err != nil {
				return err
			}
		}

	}

	if o.Workday != nil {

		// query param workday
		var qrWorkday strfmt.Date
		if o.Workday != nil {
			qrWorkday = *o.Workday
		}
		qWorkday := qrWorkday.String()
		if qWorkday != "" {
			if err := r.SetQueryParam("workday", qWorkday); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

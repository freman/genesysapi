// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetGamificationLeaderboardAllBestpointsParams creates a new GetGamificationLeaderboardAllBestpointsParams object
// with the default values initialized.
func NewGetGamificationLeaderboardAllBestpointsParams() *GetGamificationLeaderboardAllBestpointsParams {
	var ()
	return &GetGamificationLeaderboardAllBestpointsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetGamificationLeaderboardAllBestpointsParamsWithTimeout creates a new GetGamificationLeaderboardAllBestpointsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetGamificationLeaderboardAllBestpointsParamsWithTimeout(timeout time.Duration) *GetGamificationLeaderboardAllBestpointsParams {
	var ()
	return &GetGamificationLeaderboardAllBestpointsParams{

		timeout: timeout,
	}
}

// NewGetGamificationLeaderboardAllBestpointsParamsWithContext creates a new GetGamificationLeaderboardAllBestpointsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetGamificationLeaderboardAllBestpointsParamsWithContext(ctx context.Context) *GetGamificationLeaderboardAllBestpointsParams {
	var ()
	return &GetGamificationLeaderboardAllBestpointsParams{

		Context: ctx,
	}
}

// NewGetGamificationLeaderboardAllBestpointsParamsWithHTTPClient creates a new GetGamificationLeaderboardAllBestpointsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetGamificationLeaderboardAllBestpointsParamsWithHTTPClient(client *http.Client) *GetGamificationLeaderboardAllBestpointsParams {
	var ()
	return &GetGamificationLeaderboardAllBestpointsParams{
		HTTPClient: client,
	}
}

/*GetGamificationLeaderboardAllBestpointsParams contains all the parameters to send to the API endpoint
for the get gamification leaderboard all bestpoints operation typically these are written to a http.Request
*/
type GetGamificationLeaderboardAllBestpointsParams struct {

	/*FilterID
	  ID for the filter type. For example, division Id

	*/
	FilterID string
	/*FilterType
	  Filter type for the query request.

	*/
	FilterType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get gamification leaderboard all bestpoints params
func (o *GetGamificationLeaderboardAllBestpointsParams) WithTimeout(timeout time.Duration) *GetGamificationLeaderboardAllBestpointsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get gamification leaderboard all bestpoints params
func (o *GetGamificationLeaderboardAllBestpointsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get gamification leaderboard all bestpoints params
func (o *GetGamificationLeaderboardAllBestpointsParams) WithContext(ctx context.Context) *GetGamificationLeaderboardAllBestpointsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get gamification leaderboard all bestpoints params
func (o *GetGamificationLeaderboardAllBestpointsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get gamification leaderboard all bestpoints params
func (o *GetGamificationLeaderboardAllBestpointsParams) WithHTTPClient(client *http.Client) *GetGamificationLeaderboardAllBestpointsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get gamification leaderboard all bestpoints params
func (o *GetGamificationLeaderboardAllBestpointsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterID adds the filterID to the get gamification leaderboard all bestpoints params
func (o *GetGamificationLeaderboardAllBestpointsParams) WithFilterID(filterID string) *GetGamificationLeaderboardAllBestpointsParams {
	o.SetFilterID(filterID)
	return o
}

// SetFilterID adds the filterId to the get gamification leaderboard all bestpoints params
func (o *GetGamificationLeaderboardAllBestpointsParams) SetFilterID(filterID string) {
	o.FilterID = filterID
}

// WithFilterType adds the filterType to the get gamification leaderboard all bestpoints params
func (o *GetGamificationLeaderboardAllBestpointsParams) WithFilterType(filterType string) *GetGamificationLeaderboardAllBestpointsParams {
	o.SetFilterType(filterType)
	return o
}

// SetFilterType adds the filterType to the get gamification leaderboard all bestpoints params
func (o *GetGamificationLeaderboardAllBestpointsParams) SetFilterType(filterType string) {
	o.FilterType = filterType
}

// WriteToRequest writes these params to a swagger request
func (o *GetGamificationLeaderboardAllBestpointsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param filterId
	qrFilterID := o.FilterID
	qFilterID := qrFilterID
	if qFilterID != "" {
		if err := r.SetQueryParam("filterId", qFilterID); err != nil {
			return err
		}
	}

	// query param filterType
	qrFilterType := o.FilterType
	qFilterType := qrFilterType
	if qFilterType != "" {
		if err := r.SetQueryParam("filterType", qFilterType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

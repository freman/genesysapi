// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the gamification client
type API interface {
	/*
	   GetGamificationLeaderboard leaderboards of the requesting user s division or performance profile
	*/
	GetGamificationLeaderboard(ctx context.Context, params *GetGamificationLeaderboardParams) (*GetGamificationLeaderboardOK, error)
	/*
	   GetGamificationLeaderboardAll leaderboards by filter type
	*/
	GetGamificationLeaderboardAll(ctx context.Context, params *GetGamificationLeaderboardAllParams) (*GetGamificationLeaderboardAllOK, error)
	/*
	   GetGamificationLeaderboardAllBestpoints bests points by division or performance profile
	*/
	GetGamificationLeaderboardAllBestpoints(ctx context.Context, params *GetGamificationLeaderboardAllBestpointsParams) (*GetGamificationLeaderboardAllBestpointsOK, error)
	/*
	   GetGamificationLeaderboardBestpoints bests points of the requesting user s current performance profile or division
	*/
	GetGamificationLeaderboardBestpoints(ctx context.Context, params *GetGamificationLeaderboardBestpointsParams) (*GetGamificationLeaderboardBestpointsOK, error)
	/*
	   GetGamificationMetric gamifieds metric by id
	*/
	GetGamificationMetric(ctx context.Context, params *GetGamificationMetricParams) (*GetGamificationMetricOK, error)
	/*
	   GetGamificationMetricdefinition metrics definition by id
	*/
	GetGamificationMetricdefinition(ctx context.Context, params *GetGamificationMetricdefinitionParams) (*GetGamificationMetricdefinitionOK, error)
	/*
	   GetGamificationMetricdefinitions alls metric definitions
	   Retrieves the metric definitions and their corresponding default objectives used to create a gamified metric
	*/
	GetGamificationMetricdefinitions(ctx context.Context, params *GetGamificationMetricdefinitionsParams) (*GetGamificationMetricdefinitionsOK, error)
	/*
	   GetGamificationMetrics alls gamified metrics for a given profile
	*/
	GetGamificationMetrics(ctx context.Context, params *GetGamificationMetricsParams) (*GetGamificationMetricsOK, error)
	/*
	   GetGamificationProfile performances profile by id
	*/
	GetGamificationProfile(ctx context.Context, params *GetGamificationProfileParams) (*GetGamificationProfileOK, error)
	/*
	   GetGamificationProfileMembers members of a given performance profile
	*/
	GetGamificationProfileMembers(ctx context.Context, params *GetGamificationProfileMembersParams) (*GetGamificationProfileMembersOK, error)
	/*
	   GetGamificationProfileMetric performances profile gamified metric by id
	*/
	GetGamificationProfileMetric(ctx context.Context, params *GetGamificationProfileMetricParams) (*GetGamificationProfileMetricOK, error)
	/*
	   GetGamificationProfileMetrics alls gamified metrics for a given performance profile
	*/
	GetGamificationProfileMetrics(ctx context.Context, params *GetGamificationProfileMetricsParams) (*GetGamificationProfileMetricsOK, error)
	/*
	   GetGamificationProfileMetricsObjectivedetails alls metrics for a given performance profile with objective details such as order and max points
	*/
	GetGamificationProfileMetricsObjectivedetails(ctx context.Context, params *GetGamificationProfileMetricsObjectivedetailsParams) (*GetGamificationProfileMetricsObjectivedetailsOK, error)
	/*
	   GetGamificationProfiles alls performance profiles
	*/
	GetGamificationProfiles(ctx context.Context, params *GetGamificationProfilesParams) (*GetGamificationProfilesOK, error)
	/*
	   GetGamificationProfilesUser performances profile of a user
	*/
	GetGamificationProfilesUser(ctx context.Context, params *GetGamificationProfilesUserParams) (*GetGamificationProfilesUserOK, error)
	/*
	   GetGamificationProfilesUsersMe performances profile of the requesting user
	*/
	GetGamificationProfilesUsersMe(ctx context.Context, params *GetGamificationProfilesUsersMeParams) (*GetGamificationProfilesUsersMeOK, error)
	/*
	   GetGamificationScorecards workdays performance metrics of the requesting user
	*/
	GetGamificationScorecards(ctx context.Context, params *GetGamificationScorecardsParams) (*GetGamificationScorecardsOK, error)
	/*
	   GetGamificationScorecardsAttendance attendances status metrics of the requesting user
	*/
	GetGamificationScorecardsAttendance(ctx context.Context, params *GetGamificationScorecardsAttendanceParams) (*GetGamificationScorecardsAttendanceOK, error)
	/*
	   GetGamificationScorecardsBestpoints bests points of the requesting user
	*/
	GetGamificationScorecardsBestpoints(ctx context.Context, params *GetGamificationScorecardsBestpointsParams) (*GetGamificationScorecardsBestpointsOK, error)
	/*
	   GetGamificationScorecardsPointsAlltime alls time points of the requesting user
	*/
	GetGamificationScorecardsPointsAlltime(ctx context.Context, params *GetGamificationScorecardsPointsAlltimeParams) (*GetGamificationScorecardsPointsAlltimeOK, error)
	/*
	   GetGamificationScorecardsPointsAverage averages points of the requesting user s division or performance profile
	*/
	GetGamificationScorecardsPointsAverage(ctx context.Context, params *GetGamificationScorecardsPointsAverageParams) (*GetGamificationScorecardsPointsAverageOK, error)
	/*
	   GetGamificationScorecardsPointsTrends points trends of the requesting user
	*/
	GetGamificationScorecardsPointsTrends(ctx context.Context, params *GetGamificationScorecardsPointsTrendsParams) (*GetGamificationScorecardsPointsTrendsOK, error)
	/*
	   GetGamificationScorecardsUser workdays performance metrics for a user
	*/
	GetGamificationScorecardsUser(ctx context.Context, params *GetGamificationScorecardsUserParams) (*GetGamificationScorecardsUserOK, error)
	/*
	   GetGamificationScorecardsUserAttendance attendances status metrics for a user
	*/
	GetGamificationScorecardsUserAttendance(ctx context.Context, params *GetGamificationScorecardsUserAttendanceParams) (*GetGamificationScorecardsUserAttendanceOK, error)
	/*
	   GetGamificationScorecardsUserBestpoints bests points of a user
	*/
	GetGamificationScorecardsUserBestpoints(ctx context.Context, params *GetGamificationScorecardsUserBestpointsParams) (*GetGamificationScorecardsUserBestpointsOK, error)
	/*
	   GetGamificationScorecardsUserPointsAlltime alls time points for a user
	*/
	GetGamificationScorecardsUserPointsAlltime(ctx context.Context, params *GetGamificationScorecardsUserPointsAlltimeParams) (*GetGamificationScorecardsUserPointsAlltimeOK, error)
	/*
	   GetGamificationScorecardsUserPointsTrends points trend for a user
	*/
	GetGamificationScorecardsUserPointsTrends(ctx context.Context, params *GetGamificationScorecardsUserPointsTrendsParams) (*GetGamificationScorecardsUserPointsTrendsOK, error)
	/*
	   GetGamificationScorecardsUserValuesTrends values trends of a user
	*/
	GetGamificationScorecardsUserValuesTrends(ctx context.Context, params *GetGamificationScorecardsUserValuesTrendsParams) (*GetGamificationScorecardsUserValuesTrendsOK, error)
	/*
	   GetGamificationScorecardsUsersPointsAverage workdays average points by target group
	*/
	GetGamificationScorecardsUsersPointsAverage(ctx context.Context, params *GetGamificationScorecardsUsersPointsAverageParams) (*GetGamificationScorecardsUsersPointsAverageOK, error)
	/*
	   GetGamificationScorecardsUsersValuesAverage workdays average values by target group
	*/
	GetGamificationScorecardsUsersValuesAverage(ctx context.Context, params *GetGamificationScorecardsUsersValuesAverageParams) (*GetGamificationScorecardsUsersValuesAverageOK, error)
	/*
	   GetGamificationScorecardsUsersValuesTrends values trend by target group
	*/
	GetGamificationScorecardsUsersValuesTrends(ctx context.Context, params *GetGamificationScorecardsUsersValuesTrendsParams) (*GetGamificationScorecardsUsersValuesTrendsOK, error)
	/*
	   GetGamificationScorecardsValuesAverage averages values of the requesting user s division or performance profile
	*/
	GetGamificationScorecardsValuesAverage(ctx context.Context, params *GetGamificationScorecardsValuesAverageParams) (*GetGamificationScorecardsValuesAverageOK, error)
	/*
	   GetGamificationScorecardsValuesTrends values trends of the requesting user or group
	*/
	GetGamificationScorecardsValuesTrends(ctx context.Context, params *GetGamificationScorecardsValuesTrendsParams) (*GetGamificationScorecardsValuesTrendsOK, error)
	/*
	   GetGamificationStatus gamifications activation status
	*/
	GetGamificationStatus(ctx context.Context, params *GetGamificationStatusParams) (*GetGamificationStatusOK, error)
	/*
	   GetGamificationTemplate objectives template by id
	*/
	GetGamificationTemplate(ctx context.Context, params *GetGamificationTemplateParams) (*GetGamificationTemplateOK, error)
	/*
	   GetGamificationTemplates alls objective templates
	*/
	GetGamificationTemplates(ctx context.Context, params *GetGamificationTemplatesParams) (*GetGamificationTemplatesOK, error)
	/*
	   PostGamificationMetrics creates a gamified metric with a given metric definition and metric objective
	*/
	PostGamificationMetrics(ctx context.Context, params *PostGamificationMetricsParams) (*PostGamificationMetricsCreated, error)
	/*
	   PostGamificationProfileActivate activates a performance profile
	*/
	PostGamificationProfileActivate(ctx context.Context, params *PostGamificationProfileActivateParams) (*PostGamificationProfileActivateOK, error)
	/*
	   PostGamificationProfileDeactivate deactivates a performance profile
	*/
	PostGamificationProfileDeactivate(ctx context.Context, params *PostGamificationProfileDeactivateParams) (*PostGamificationProfileDeactivateOK, error)
	/*
	   PostGamificationProfileMembers assigns members to a given performance profile
	*/
	PostGamificationProfileMembers(ctx context.Context, params *PostGamificationProfileMembersParams) (*PostGamificationProfileMembersOK, error)
	/*
	   PostGamificationProfileMembersValidate validates member assignment
	*/
	PostGamificationProfileMembersValidate(ctx context.Context, params *PostGamificationProfileMembersValidateParams) (*PostGamificationProfileMembersValidateOK, error)
	/*
	   PostGamificationProfileMetricLink creates a linked metric
	*/
	PostGamificationProfileMetricLink(ctx context.Context, params *PostGamificationProfileMetricLinkParams) (*PostGamificationProfileMetricLinkCreated, error)
	/*
	   PostGamificationProfileMetrics creates a gamified metric with a given metric definition and metric objective under in a performance profile
	*/
	PostGamificationProfileMetrics(ctx context.Context, params *PostGamificationProfileMetricsParams) (*PostGamificationProfileMetricsCreated, error)
	/*
	   PostGamificationProfiles creates a new custom performance profile
	*/
	PostGamificationProfiles(ctx context.Context, params *PostGamificationProfilesParams) (*PostGamificationProfilesCreated, error)
	/*
	   PutGamificationMetric updates a metric
	*/
	PutGamificationMetric(ctx context.Context, params *PutGamificationMetricParams) (*PutGamificationMetricOK, error)
	/*
	   PutGamificationProfile updates a performance profile
	*/
	PutGamificationProfile(ctx context.Context, params *PutGamificationProfileParams) (*PutGamificationProfileOK, error)
	/*
	   PutGamificationProfileMetric updates a metric in performance profile
	*/
	PutGamificationProfileMetric(ctx context.Context, params *PutGamificationProfileMetricParams) (*PutGamificationProfileMetricOK, error)
	/*
	   PutGamificationStatus updates gamification activation status
	*/
	PutGamificationStatus(ctx context.Context, params *PutGamificationStatusParams) (*PutGamificationStatusOK, error)
}

// New creates a new gamification API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for gamification API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetGamificationLeaderboard leaderboards of the requesting user s division or performance profile
*/
func (a *Client) GetGamificationLeaderboard(ctx context.Context, params *GetGamificationLeaderboardParams) (*GetGamificationLeaderboardOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationLeaderboard",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/leaderboard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationLeaderboardReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationLeaderboardOK), nil

}

/*
GetGamificationLeaderboardAll leaderboards by filter type
*/
func (a *Client) GetGamificationLeaderboardAll(ctx context.Context, params *GetGamificationLeaderboardAllParams) (*GetGamificationLeaderboardAllOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationLeaderboardAll",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/leaderboard/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationLeaderboardAllReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationLeaderboardAllOK), nil

}

/*
GetGamificationLeaderboardAllBestpoints bests points by division or performance profile
*/
func (a *Client) GetGamificationLeaderboardAllBestpoints(ctx context.Context, params *GetGamificationLeaderboardAllBestpointsParams) (*GetGamificationLeaderboardAllBestpointsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationLeaderboardAllBestpoints",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/leaderboard/all/bestpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationLeaderboardAllBestpointsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationLeaderboardAllBestpointsOK), nil

}

/*
GetGamificationLeaderboardBestpoints bests points of the requesting user s current performance profile or division
*/
func (a *Client) GetGamificationLeaderboardBestpoints(ctx context.Context, params *GetGamificationLeaderboardBestpointsParams) (*GetGamificationLeaderboardBestpointsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationLeaderboardBestpoints",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/leaderboard/bestpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationLeaderboardBestpointsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationLeaderboardBestpointsOK), nil

}

/*
GetGamificationMetric gamifieds metric by id
*/
func (a *Client) GetGamificationMetric(ctx context.Context, params *GetGamificationMetricParams) (*GetGamificationMetricOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationMetric",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/metrics/{metricId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationMetricReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationMetricOK), nil

}

/*
GetGamificationMetricdefinition metrics definition by id
*/
func (a *Client) GetGamificationMetricdefinition(ctx context.Context, params *GetGamificationMetricdefinitionParams) (*GetGamificationMetricdefinitionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationMetricdefinition",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/metricdefinitions/{metricDefinitionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationMetricdefinitionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationMetricdefinitionOK), nil

}

/*
GetGamificationMetricdefinitions alls metric definitions

Retrieves the metric definitions and their corresponding default objectives used to create a gamified metric
*/
func (a *Client) GetGamificationMetricdefinitions(ctx context.Context, params *GetGamificationMetricdefinitionsParams) (*GetGamificationMetricdefinitionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationMetricdefinitions",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/metricdefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationMetricdefinitionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationMetricdefinitionsOK), nil

}

/*
GetGamificationMetrics alls gamified metrics for a given profile
*/
func (a *Client) GetGamificationMetrics(ctx context.Context, params *GetGamificationMetricsParams) (*GetGamificationMetricsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationMetrics",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationMetricsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationMetricsOK), nil

}

/*
GetGamificationProfile performances profile by id
*/
func (a *Client) GetGamificationProfile(ctx context.Context, params *GetGamificationProfileParams) (*GetGamificationProfileOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationProfile",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/profiles/{profileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationProfileReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationProfileOK), nil

}

/*
GetGamificationProfileMembers members of a given performance profile
*/
func (a *Client) GetGamificationProfileMembers(ctx context.Context, params *GetGamificationProfileMembersParams) (*GetGamificationProfileMembersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationProfileMembers",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/profiles/{performanceProfileId}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationProfileMembersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationProfileMembersOK), nil

}

/*
GetGamificationProfileMetric performances profile gamified metric by id
*/
func (a *Client) GetGamificationProfileMetric(ctx context.Context, params *GetGamificationProfileMetricParams) (*GetGamificationProfileMetricOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationProfileMetric",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/profiles/{profileId}/metrics/{metricId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationProfileMetricReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationProfileMetricOK), nil

}

/*
GetGamificationProfileMetrics alls gamified metrics for a given performance profile
*/
func (a *Client) GetGamificationProfileMetrics(ctx context.Context, params *GetGamificationProfileMetricsParams) (*GetGamificationProfileMetricsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationProfileMetrics",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/profiles/{profileId}/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationProfileMetricsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationProfileMetricsOK), nil

}

/*
GetGamificationProfileMetricsObjectivedetails alls metrics for a given performance profile with objective details such as order and max points
*/
func (a *Client) GetGamificationProfileMetricsObjectivedetails(ctx context.Context, params *GetGamificationProfileMetricsObjectivedetailsParams) (*GetGamificationProfileMetricsObjectivedetailsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationProfileMetricsObjectivedetails",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/profiles/{profileId}/metrics/objectivedetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationProfileMetricsObjectivedetailsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationProfileMetricsObjectivedetailsOK), nil

}

/*
GetGamificationProfiles alls performance profiles
*/
func (a *Client) GetGamificationProfiles(ctx context.Context, params *GetGamificationProfilesParams) (*GetGamificationProfilesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationProfiles",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationProfilesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationProfilesOK), nil

}

/*
GetGamificationProfilesUser performances profile of a user
*/
func (a *Client) GetGamificationProfilesUser(ctx context.Context, params *GetGamificationProfilesUserParams) (*GetGamificationProfilesUserOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationProfilesUser",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/profiles/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationProfilesUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationProfilesUserOK), nil

}

/*
GetGamificationProfilesUsersMe performances profile of the requesting user
*/
func (a *Client) GetGamificationProfilesUsersMe(ctx context.Context, params *GetGamificationProfilesUsersMeParams) (*GetGamificationProfilesUsersMeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationProfilesUsersMe",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/profiles/users/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationProfilesUsersMeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationProfilesUsersMeOK), nil

}

/*
GetGamificationScorecards workdays performance metrics of the requesting user
*/
func (a *Client) GetGamificationScorecards(ctx context.Context, params *GetGamificationScorecardsParams) (*GetGamificationScorecardsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecards",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsOK), nil

}

/*
GetGamificationScorecardsAttendance attendances status metrics of the requesting user
*/
func (a *Client) GetGamificationScorecardsAttendance(ctx context.Context, params *GetGamificationScorecardsAttendanceParams) (*GetGamificationScorecardsAttendanceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsAttendance",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/attendance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsAttendanceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsAttendanceOK), nil

}

/*
GetGamificationScorecardsBestpoints bests points of the requesting user
*/
func (a *Client) GetGamificationScorecardsBestpoints(ctx context.Context, params *GetGamificationScorecardsBestpointsParams) (*GetGamificationScorecardsBestpointsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsBestpoints",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/bestpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsBestpointsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsBestpointsOK), nil

}

/*
GetGamificationScorecardsPointsAlltime alls time points of the requesting user
*/
func (a *Client) GetGamificationScorecardsPointsAlltime(ctx context.Context, params *GetGamificationScorecardsPointsAlltimeParams) (*GetGamificationScorecardsPointsAlltimeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsPointsAlltime",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/points/alltime",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsPointsAlltimeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsPointsAlltimeOK), nil

}

/*
GetGamificationScorecardsPointsAverage averages points of the requesting user s division or performance profile
*/
func (a *Client) GetGamificationScorecardsPointsAverage(ctx context.Context, params *GetGamificationScorecardsPointsAverageParams) (*GetGamificationScorecardsPointsAverageOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsPointsAverage",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/points/average",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsPointsAverageReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsPointsAverageOK), nil

}

/*
GetGamificationScorecardsPointsTrends points trends of the requesting user
*/
func (a *Client) GetGamificationScorecardsPointsTrends(ctx context.Context, params *GetGamificationScorecardsPointsTrendsParams) (*GetGamificationScorecardsPointsTrendsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsPointsTrends",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/points/trends",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsPointsTrendsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsPointsTrendsOK), nil

}

/*
GetGamificationScorecardsUser workdays performance metrics for a user
*/
func (a *Client) GetGamificationScorecardsUser(ctx context.Context, params *GetGamificationScorecardsUserParams) (*GetGamificationScorecardsUserOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsUser",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsUserOK), nil

}

/*
GetGamificationScorecardsUserAttendance attendances status metrics for a user
*/
func (a *Client) GetGamificationScorecardsUserAttendance(ctx context.Context, params *GetGamificationScorecardsUserAttendanceParams) (*GetGamificationScorecardsUserAttendanceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsUserAttendance",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/users/{userId}/attendance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsUserAttendanceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsUserAttendanceOK), nil

}

/*
GetGamificationScorecardsUserBestpoints bests points of a user
*/
func (a *Client) GetGamificationScorecardsUserBestpoints(ctx context.Context, params *GetGamificationScorecardsUserBestpointsParams) (*GetGamificationScorecardsUserBestpointsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsUserBestpoints",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/users/{userId}/bestpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsUserBestpointsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsUserBestpointsOK), nil

}

/*
GetGamificationScorecardsUserPointsAlltime alls time points for a user
*/
func (a *Client) GetGamificationScorecardsUserPointsAlltime(ctx context.Context, params *GetGamificationScorecardsUserPointsAlltimeParams) (*GetGamificationScorecardsUserPointsAlltimeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsUserPointsAlltime",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/users/{userId}/points/alltime",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsUserPointsAlltimeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsUserPointsAlltimeOK), nil

}

/*
GetGamificationScorecardsUserPointsTrends points trend for a user
*/
func (a *Client) GetGamificationScorecardsUserPointsTrends(ctx context.Context, params *GetGamificationScorecardsUserPointsTrendsParams) (*GetGamificationScorecardsUserPointsTrendsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsUserPointsTrends",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/users/{userId}/points/trends",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsUserPointsTrendsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsUserPointsTrendsOK), nil

}

/*
GetGamificationScorecardsUserValuesTrends values trends of a user
*/
func (a *Client) GetGamificationScorecardsUserValuesTrends(ctx context.Context, params *GetGamificationScorecardsUserValuesTrendsParams) (*GetGamificationScorecardsUserValuesTrendsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsUserValuesTrends",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/users/{userId}/values/trends",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsUserValuesTrendsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsUserValuesTrendsOK), nil

}

/*
GetGamificationScorecardsUsersPointsAverage workdays average points by target group
*/
func (a *Client) GetGamificationScorecardsUsersPointsAverage(ctx context.Context, params *GetGamificationScorecardsUsersPointsAverageParams) (*GetGamificationScorecardsUsersPointsAverageOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsUsersPointsAverage",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/users/points/average",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsUsersPointsAverageReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsUsersPointsAverageOK), nil

}

/*
GetGamificationScorecardsUsersValuesAverage workdays average values by target group
*/
func (a *Client) GetGamificationScorecardsUsersValuesAverage(ctx context.Context, params *GetGamificationScorecardsUsersValuesAverageParams) (*GetGamificationScorecardsUsersValuesAverageOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsUsersValuesAverage",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/users/values/average",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsUsersValuesAverageReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsUsersValuesAverageOK), nil

}

/*
GetGamificationScorecardsUsersValuesTrends values trend by target group
*/
func (a *Client) GetGamificationScorecardsUsersValuesTrends(ctx context.Context, params *GetGamificationScorecardsUsersValuesTrendsParams) (*GetGamificationScorecardsUsersValuesTrendsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsUsersValuesTrends",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/users/values/trends",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsUsersValuesTrendsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsUsersValuesTrendsOK), nil

}

/*
GetGamificationScorecardsValuesAverage averages values of the requesting user s division or performance profile
*/
func (a *Client) GetGamificationScorecardsValuesAverage(ctx context.Context, params *GetGamificationScorecardsValuesAverageParams) (*GetGamificationScorecardsValuesAverageOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsValuesAverage",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/values/average",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsValuesAverageReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsValuesAverageOK), nil

}

/*
GetGamificationScorecardsValuesTrends values trends of the requesting user or group
*/
func (a *Client) GetGamificationScorecardsValuesTrends(ctx context.Context, params *GetGamificationScorecardsValuesTrendsParams) (*GetGamificationScorecardsValuesTrendsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationScorecardsValuesTrends",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/scorecards/values/trends",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationScorecardsValuesTrendsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationScorecardsValuesTrendsOK), nil

}

/*
GetGamificationStatus gamifications activation status
*/
func (a *Client) GetGamificationStatus(ctx context.Context, params *GetGamificationStatusParams) (*GetGamificationStatusOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationStatus",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationStatusReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationStatusOK), nil

}

/*
GetGamificationTemplate objectives template by id
*/
func (a *Client) GetGamificationTemplate(ctx context.Context, params *GetGamificationTemplateParams) (*GetGamificationTemplateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationTemplate",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/templates/{templateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationTemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationTemplateOK), nil

}

/*
GetGamificationTemplates alls objective templates
*/
func (a *Client) GetGamificationTemplates(ctx context.Context, params *GetGamificationTemplatesParams) (*GetGamificationTemplatesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGamificationTemplates",
		Method:             "GET",
		PathPattern:        "/api/v2/gamification/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGamificationTemplatesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGamificationTemplatesOK), nil

}

/*
PostGamificationMetrics creates a gamified metric with a given metric definition and metric objective
*/
func (a *Client) PostGamificationMetrics(ctx context.Context, params *PostGamificationMetricsParams) (*PostGamificationMetricsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postGamificationMetrics",
		Method:             "POST",
		PathPattern:        "/api/v2/gamification/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGamificationMetricsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostGamificationMetricsCreated), nil

}

/*
PostGamificationProfileActivate activates a performance profile
*/
func (a *Client) PostGamificationProfileActivate(ctx context.Context, params *PostGamificationProfileActivateParams) (*PostGamificationProfileActivateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postGamificationProfileActivate",
		Method:             "POST",
		PathPattern:        "/api/v2/gamification/profiles/{profileId}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGamificationProfileActivateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostGamificationProfileActivateOK), nil

}

/*
PostGamificationProfileDeactivate deactivates a performance profile
*/
func (a *Client) PostGamificationProfileDeactivate(ctx context.Context, params *PostGamificationProfileDeactivateParams) (*PostGamificationProfileDeactivateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postGamificationProfileDeactivate",
		Method:             "POST",
		PathPattern:        "/api/v2/gamification/profiles/{profileId}/deactivate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGamificationProfileDeactivateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostGamificationProfileDeactivateOK), nil

}

/*
PostGamificationProfileMembers assigns members to a given performance profile
*/
func (a *Client) PostGamificationProfileMembers(ctx context.Context, params *PostGamificationProfileMembersParams) (*PostGamificationProfileMembersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postGamificationProfileMembers",
		Method:             "POST",
		PathPattern:        "/api/v2/gamification/profiles/{performanceProfileId}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGamificationProfileMembersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostGamificationProfileMembersOK), nil

}

/*
PostGamificationProfileMembersValidate validates member assignment
*/
func (a *Client) PostGamificationProfileMembersValidate(ctx context.Context, params *PostGamificationProfileMembersValidateParams) (*PostGamificationProfileMembersValidateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postGamificationProfileMembersValidate",
		Method:             "POST",
		PathPattern:        "/api/v2/gamification/profiles/{performanceProfileId}/members/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGamificationProfileMembersValidateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostGamificationProfileMembersValidateOK), nil

}

/*
PostGamificationProfileMetricLink creates a linked metric
*/
func (a *Client) PostGamificationProfileMetricLink(ctx context.Context, params *PostGamificationProfileMetricLinkParams) (*PostGamificationProfileMetricLinkCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postGamificationProfileMetricLink",
		Method:             "POST",
		PathPattern:        "/api/v2/gamification/profiles/{sourceProfileId}/metrics/{sourceMetricId}/link",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGamificationProfileMetricLinkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostGamificationProfileMetricLinkCreated), nil

}

/*
PostGamificationProfileMetrics creates a gamified metric with a given metric definition and metric objective under in a performance profile
*/
func (a *Client) PostGamificationProfileMetrics(ctx context.Context, params *PostGamificationProfileMetricsParams) (*PostGamificationProfileMetricsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postGamificationProfileMetrics",
		Method:             "POST",
		PathPattern:        "/api/v2/gamification/profiles/{profileId}/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGamificationProfileMetricsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostGamificationProfileMetricsCreated), nil

}

/*
PostGamificationProfiles creates a new custom performance profile
*/
func (a *Client) PostGamificationProfiles(ctx context.Context, params *PostGamificationProfilesParams) (*PostGamificationProfilesCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postGamificationProfiles",
		Method:             "POST",
		PathPattern:        "/api/v2/gamification/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGamificationProfilesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostGamificationProfilesCreated), nil

}

/*
PutGamificationMetric updates a metric
*/
func (a *Client) PutGamificationMetric(ctx context.Context, params *PutGamificationMetricParams) (*PutGamificationMetricOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putGamificationMetric",
		Method:             "PUT",
		PathPattern:        "/api/v2/gamification/metrics/{metricId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutGamificationMetricReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutGamificationMetricOK), nil

}

/*
PutGamificationProfile updates a performance profile
*/
func (a *Client) PutGamificationProfile(ctx context.Context, params *PutGamificationProfileParams) (*PutGamificationProfileOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putGamificationProfile",
		Method:             "PUT",
		PathPattern:        "/api/v2/gamification/profiles/{profileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutGamificationProfileReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutGamificationProfileOK), nil

}

/*
PutGamificationProfileMetric updates a metric in performance profile
*/
func (a *Client) PutGamificationProfileMetric(ctx context.Context, params *PutGamificationProfileMetricParams) (*PutGamificationProfileMetricOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putGamificationProfileMetric",
		Method:             "PUT",
		PathPattern:        "/api/v2/gamification/profiles/{profileId}/metrics/{metricId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutGamificationProfileMetricReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutGamificationProfileMetricOK), nil

}

/*
PutGamificationStatus updates gamification activation status
*/
func (a *Client) PutGamificationStatus(ctx context.Context, params *PutGamificationStatusParams) (*PutGamificationStatusOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putGamificationStatus",
		Method:             "PUT",
		PathPattern:        "/api/v2/gamification/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutGamificationStatusReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutGamificationStatusOK), nil

}

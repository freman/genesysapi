// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetGamificationProfileMetricParams creates a new GetGamificationProfileMetricParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetGamificationProfileMetricParams() *GetGamificationProfileMetricParams {
	return &GetGamificationProfileMetricParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetGamificationProfileMetricParamsWithTimeout creates a new GetGamificationProfileMetricParams object
// with the ability to set a timeout on a request.
func NewGetGamificationProfileMetricParamsWithTimeout(timeout time.Duration) *GetGamificationProfileMetricParams {
	return &GetGamificationProfileMetricParams{
		timeout: timeout,
	}
}

// NewGetGamificationProfileMetricParamsWithContext creates a new GetGamificationProfileMetricParams object
// with the ability to set a context for a request.
func NewGetGamificationProfileMetricParamsWithContext(ctx context.Context) *GetGamificationProfileMetricParams {
	return &GetGamificationProfileMetricParams{
		Context: ctx,
	}
}

// NewGetGamificationProfileMetricParamsWithHTTPClient creates a new GetGamificationProfileMetricParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetGamificationProfileMetricParamsWithHTTPClient(client *http.Client) *GetGamificationProfileMetricParams {
	return &GetGamificationProfileMetricParams{
		HTTPClient: client,
	}
}

/*
GetGamificationProfileMetricParams contains all the parameters to send to the API endpoint

	for the get gamification profile metric operation.

	Typically these are written to a http.Request.
*/
type GetGamificationProfileMetricParams struct {

	/* MetricID.

	   Metric Id
	*/
	MetricID string

	/* ProfileID.

	   Performance Profile Id
	*/
	ProfileID string

	/* Workday.

	   The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

	   Format: date
	*/
	Workday *strfmt.Date

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get gamification profile metric params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGamificationProfileMetricParams) WithDefaults() *GetGamificationProfileMetricParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get gamification profile metric params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGamificationProfileMetricParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get gamification profile metric params
func (o *GetGamificationProfileMetricParams) WithTimeout(timeout time.Duration) *GetGamificationProfileMetricParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get gamification profile metric params
func (o *GetGamificationProfileMetricParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get gamification profile metric params
func (o *GetGamificationProfileMetricParams) WithContext(ctx context.Context) *GetGamificationProfileMetricParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get gamification profile metric params
func (o *GetGamificationProfileMetricParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get gamification profile metric params
func (o *GetGamificationProfileMetricParams) WithHTTPClient(client *http.Client) *GetGamificationProfileMetricParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get gamification profile metric params
func (o *GetGamificationProfileMetricParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMetricID adds the metricID to the get gamification profile metric params
func (o *GetGamificationProfileMetricParams) WithMetricID(metricID string) *GetGamificationProfileMetricParams {
	o.SetMetricID(metricID)
	return o
}

// SetMetricID adds the metricId to the get gamification profile metric params
func (o *GetGamificationProfileMetricParams) SetMetricID(metricID string) {
	o.MetricID = metricID
}

// WithProfileID adds the profileID to the get gamification profile metric params
func (o *GetGamificationProfileMetricParams) WithProfileID(profileID string) *GetGamificationProfileMetricParams {
	o.SetProfileID(profileID)
	return o
}

// SetProfileID adds the profileId to the get gamification profile metric params
func (o *GetGamificationProfileMetricParams) SetProfileID(profileID string) {
	o.ProfileID = profileID
}

// WithWorkday adds the workday to the get gamification profile metric params
func (o *GetGamificationProfileMetricParams) WithWorkday(workday *strfmt.Date) *GetGamificationProfileMetricParams {
	o.SetWorkday(workday)
	return o
}

// SetWorkday adds the workday to the get gamification profile metric params
func (o *GetGamificationProfileMetricParams) SetWorkday(workday *strfmt.Date) {
	o.Workday = workday
}

// WriteToRequest writes these params to a swagger request
func (o *GetGamificationProfileMetricParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param metricId
	if err := r.SetPathParam("metricId", o.MetricID); err != nil {
		return err
	}

	// path param profileId
	if err := r.SetPathParam("profileId", o.ProfileID); err != nil {
		return err
	}

	if o.Workday != nil {

		// query param workday
		var qrWorkday strfmt.Date

		if o.Workday != nil {
			qrWorkday = *o.Workday
		}
		qWorkday := qrWorkday.String()
		if qWorkday != "" {

			if err := r.SetQueryParam("workday", qWorkday); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

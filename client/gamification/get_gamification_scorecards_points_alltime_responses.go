// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetGamificationScorecardsPointsAlltimeReader is a Reader for the GetGamificationScorecardsPointsAlltime structure.
type GetGamificationScorecardsPointsAlltimeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGamificationScorecardsPointsAlltimeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGamificationScorecardsPointsAlltimeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGamificationScorecardsPointsAlltimeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetGamificationScorecardsPointsAlltimeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGamificationScorecardsPointsAlltimeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGamificationScorecardsPointsAlltimeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetGamificationScorecardsPointsAlltimeRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetGamificationScorecardsPointsAlltimeRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetGamificationScorecardsPointsAlltimeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetGamificationScorecardsPointsAlltimeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGamificationScorecardsPointsAlltimeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetGamificationScorecardsPointsAlltimeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetGamificationScorecardsPointsAlltimeGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGamificationScorecardsPointsAlltimeOK creates a GetGamificationScorecardsPointsAlltimeOK with default headers values
func NewGetGamificationScorecardsPointsAlltimeOK() *GetGamificationScorecardsPointsAlltimeOK {
	return &GetGamificationScorecardsPointsAlltimeOK{}
}

/*
GetGamificationScorecardsPointsAlltimeOK describes a response with status code 200, with default header values.

successful operation
*/
type GetGamificationScorecardsPointsAlltimeOK struct {
	Payload *models.AllTimePoints
}

// IsSuccess returns true when this get gamification scorecards points alltime o k response has a 2xx status code
func (o *GetGamificationScorecardsPointsAlltimeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get gamification scorecards points alltime o k response has a 3xx status code
func (o *GetGamificationScorecardsPointsAlltimeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards points alltime o k response has a 4xx status code
func (o *GetGamificationScorecardsPointsAlltimeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification scorecards points alltime o k response has a 5xx status code
func (o *GetGamificationScorecardsPointsAlltimeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards points alltime o k response a status code equal to that given
func (o *GetGamificationScorecardsPointsAlltimeOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetGamificationScorecardsPointsAlltimeOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeOK  %+v", 200, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeOK) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeOK  %+v", 200, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeOK) GetPayload() *models.AllTimePoints {
	return o.Payload
}

func (o *GetGamificationScorecardsPointsAlltimeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AllTimePoints)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsPointsAlltimeBadRequest creates a GetGamificationScorecardsPointsAlltimeBadRequest with default headers values
func NewGetGamificationScorecardsPointsAlltimeBadRequest() *GetGamificationScorecardsPointsAlltimeBadRequest {
	return &GetGamificationScorecardsPointsAlltimeBadRequest{}
}

/*
GetGamificationScorecardsPointsAlltimeBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetGamificationScorecardsPointsAlltimeBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards points alltime bad request response has a 2xx status code
func (o *GetGamificationScorecardsPointsAlltimeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards points alltime bad request response has a 3xx status code
func (o *GetGamificationScorecardsPointsAlltimeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards points alltime bad request response has a 4xx status code
func (o *GetGamificationScorecardsPointsAlltimeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards points alltime bad request response has a 5xx status code
func (o *GetGamificationScorecardsPointsAlltimeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards points alltime bad request response a status code equal to that given
func (o *GetGamificationScorecardsPointsAlltimeBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetGamificationScorecardsPointsAlltimeBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeBadRequest  %+v", 400, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeBadRequest  %+v", 400, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsPointsAlltimeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsPointsAlltimeUnauthorized creates a GetGamificationScorecardsPointsAlltimeUnauthorized with default headers values
func NewGetGamificationScorecardsPointsAlltimeUnauthorized() *GetGamificationScorecardsPointsAlltimeUnauthorized {
	return &GetGamificationScorecardsPointsAlltimeUnauthorized{}
}

/*
GetGamificationScorecardsPointsAlltimeUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetGamificationScorecardsPointsAlltimeUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards points alltime unauthorized response has a 2xx status code
func (o *GetGamificationScorecardsPointsAlltimeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards points alltime unauthorized response has a 3xx status code
func (o *GetGamificationScorecardsPointsAlltimeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards points alltime unauthorized response has a 4xx status code
func (o *GetGamificationScorecardsPointsAlltimeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards points alltime unauthorized response has a 5xx status code
func (o *GetGamificationScorecardsPointsAlltimeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards points alltime unauthorized response a status code equal to that given
func (o *GetGamificationScorecardsPointsAlltimeUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetGamificationScorecardsPointsAlltimeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsPointsAlltimeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsPointsAlltimeForbidden creates a GetGamificationScorecardsPointsAlltimeForbidden with default headers values
func NewGetGamificationScorecardsPointsAlltimeForbidden() *GetGamificationScorecardsPointsAlltimeForbidden {
	return &GetGamificationScorecardsPointsAlltimeForbidden{}
}

/*
GetGamificationScorecardsPointsAlltimeForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetGamificationScorecardsPointsAlltimeForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards points alltime forbidden response has a 2xx status code
func (o *GetGamificationScorecardsPointsAlltimeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards points alltime forbidden response has a 3xx status code
func (o *GetGamificationScorecardsPointsAlltimeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards points alltime forbidden response has a 4xx status code
func (o *GetGamificationScorecardsPointsAlltimeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards points alltime forbidden response has a 5xx status code
func (o *GetGamificationScorecardsPointsAlltimeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards points alltime forbidden response a status code equal to that given
func (o *GetGamificationScorecardsPointsAlltimeForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetGamificationScorecardsPointsAlltimeForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeForbidden  %+v", 403, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeForbidden  %+v", 403, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsPointsAlltimeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsPointsAlltimeNotFound creates a GetGamificationScorecardsPointsAlltimeNotFound with default headers values
func NewGetGamificationScorecardsPointsAlltimeNotFound() *GetGamificationScorecardsPointsAlltimeNotFound {
	return &GetGamificationScorecardsPointsAlltimeNotFound{}
}

/*
GetGamificationScorecardsPointsAlltimeNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetGamificationScorecardsPointsAlltimeNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards points alltime not found response has a 2xx status code
func (o *GetGamificationScorecardsPointsAlltimeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards points alltime not found response has a 3xx status code
func (o *GetGamificationScorecardsPointsAlltimeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards points alltime not found response has a 4xx status code
func (o *GetGamificationScorecardsPointsAlltimeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards points alltime not found response has a 5xx status code
func (o *GetGamificationScorecardsPointsAlltimeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards points alltime not found response a status code equal to that given
func (o *GetGamificationScorecardsPointsAlltimeNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetGamificationScorecardsPointsAlltimeNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeNotFound  %+v", 404, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeNotFound  %+v", 404, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsPointsAlltimeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsPointsAlltimeRequestTimeout creates a GetGamificationScorecardsPointsAlltimeRequestTimeout with default headers values
func NewGetGamificationScorecardsPointsAlltimeRequestTimeout() *GetGamificationScorecardsPointsAlltimeRequestTimeout {
	return &GetGamificationScorecardsPointsAlltimeRequestTimeout{}
}

/*
GetGamificationScorecardsPointsAlltimeRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetGamificationScorecardsPointsAlltimeRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards points alltime request timeout response has a 2xx status code
func (o *GetGamificationScorecardsPointsAlltimeRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards points alltime request timeout response has a 3xx status code
func (o *GetGamificationScorecardsPointsAlltimeRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards points alltime request timeout response has a 4xx status code
func (o *GetGamificationScorecardsPointsAlltimeRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards points alltime request timeout response has a 5xx status code
func (o *GetGamificationScorecardsPointsAlltimeRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards points alltime request timeout response a status code equal to that given
func (o *GetGamificationScorecardsPointsAlltimeRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetGamificationScorecardsPointsAlltimeRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsPointsAlltimeRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsPointsAlltimeRequestEntityTooLarge creates a GetGamificationScorecardsPointsAlltimeRequestEntityTooLarge with default headers values
func NewGetGamificationScorecardsPointsAlltimeRequestEntityTooLarge() *GetGamificationScorecardsPointsAlltimeRequestEntityTooLarge {
	return &GetGamificationScorecardsPointsAlltimeRequestEntityTooLarge{}
}

/*
GetGamificationScorecardsPointsAlltimeRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetGamificationScorecardsPointsAlltimeRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards points alltime request entity too large response has a 2xx status code
func (o *GetGamificationScorecardsPointsAlltimeRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards points alltime request entity too large response has a 3xx status code
func (o *GetGamificationScorecardsPointsAlltimeRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards points alltime request entity too large response has a 4xx status code
func (o *GetGamificationScorecardsPointsAlltimeRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards points alltime request entity too large response has a 5xx status code
func (o *GetGamificationScorecardsPointsAlltimeRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards points alltime request entity too large response a status code equal to that given
func (o *GetGamificationScorecardsPointsAlltimeRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetGamificationScorecardsPointsAlltimeRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsPointsAlltimeRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsPointsAlltimeUnsupportedMediaType creates a GetGamificationScorecardsPointsAlltimeUnsupportedMediaType with default headers values
func NewGetGamificationScorecardsPointsAlltimeUnsupportedMediaType() *GetGamificationScorecardsPointsAlltimeUnsupportedMediaType {
	return &GetGamificationScorecardsPointsAlltimeUnsupportedMediaType{}
}

/*
GetGamificationScorecardsPointsAlltimeUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetGamificationScorecardsPointsAlltimeUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards points alltime unsupported media type response has a 2xx status code
func (o *GetGamificationScorecardsPointsAlltimeUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards points alltime unsupported media type response has a 3xx status code
func (o *GetGamificationScorecardsPointsAlltimeUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards points alltime unsupported media type response has a 4xx status code
func (o *GetGamificationScorecardsPointsAlltimeUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards points alltime unsupported media type response has a 5xx status code
func (o *GetGamificationScorecardsPointsAlltimeUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards points alltime unsupported media type response a status code equal to that given
func (o *GetGamificationScorecardsPointsAlltimeUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetGamificationScorecardsPointsAlltimeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsPointsAlltimeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsPointsAlltimeTooManyRequests creates a GetGamificationScorecardsPointsAlltimeTooManyRequests with default headers values
func NewGetGamificationScorecardsPointsAlltimeTooManyRequests() *GetGamificationScorecardsPointsAlltimeTooManyRequests {
	return &GetGamificationScorecardsPointsAlltimeTooManyRequests{}
}

/*
GetGamificationScorecardsPointsAlltimeTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetGamificationScorecardsPointsAlltimeTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards points alltime too many requests response has a 2xx status code
func (o *GetGamificationScorecardsPointsAlltimeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards points alltime too many requests response has a 3xx status code
func (o *GetGamificationScorecardsPointsAlltimeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards points alltime too many requests response has a 4xx status code
func (o *GetGamificationScorecardsPointsAlltimeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards points alltime too many requests response has a 5xx status code
func (o *GetGamificationScorecardsPointsAlltimeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards points alltime too many requests response a status code equal to that given
func (o *GetGamificationScorecardsPointsAlltimeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetGamificationScorecardsPointsAlltimeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsPointsAlltimeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsPointsAlltimeInternalServerError creates a GetGamificationScorecardsPointsAlltimeInternalServerError with default headers values
func NewGetGamificationScorecardsPointsAlltimeInternalServerError() *GetGamificationScorecardsPointsAlltimeInternalServerError {
	return &GetGamificationScorecardsPointsAlltimeInternalServerError{}
}

/*
GetGamificationScorecardsPointsAlltimeInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetGamificationScorecardsPointsAlltimeInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards points alltime internal server error response has a 2xx status code
func (o *GetGamificationScorecardsPointsAlltimeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards points alltime internal server error response has a 3xx status code
func (o *GetGamificationScorecardsPointsAlltimeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards points alltime internal server error response has a 4xx status code
func (o *GetGamificationScorecardsPointsAlltimeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification scorecards points alltime internal server error response has a 5xx status code
func (o *GetGamificationScorecardsPointsAlltimeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get gamification scorecards points alltime internal server error response a status code equal to that given
func (o *GetGamificationScorecardsPointsAlltimeInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetGamificationScorecardsPointsAlltimeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsPointsAlltimeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsPointsAlltimeServiceUnavailable creates a GetGamificationScorecardsPointsAlltimeServiceUnavailable with default headers values
func NewGetGamificationScorecardsPointsAlltimeServiceUnavailable() *GetGamificationScorecardsPointsAlltimeServiceUnavailable {
	return &GetGamificationScorecardsPointsAlltimeServiceUnavailable{}
}

/*
GetGamificationScorecardsPointsAlltimeServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetGamificationScorecardsPointsAlltimeServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards points alltime service unavailable response has a 2xx status code
func (o *GetGamificationScorecardsPointsAlltimeServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards points alltime service unavailable response has a 3xx status code
func (o *GetGamificationScorecardsPointsAlltimeServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards points alltime service unavailable response has a 4xx status code
func (o *GetGamificationScorecardsPointsAlltimeServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification scorecards points alltime service unavailable response has a 5xx status code
func (o *GetGamificationScorecardsPointsAlltimeServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get gamification scorecards points alltime service unavailable response a status code equal to that given
func (o *GetGamificationScorecardsPointsAlltimeServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetGamificationScorecardsPointsAlltimeServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsPointsAlltimeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsPointsAlltimeGatewayTimeout creates a GetGamificationScorecardsPointsAlltimeGatewayTimeout with default headers values
func NewGetGamificationScorecardsPointsAlltimeGatewayTimeout() *GetGamificationScorecardsPointsAlltimeGatewayTimeout {
	return &GetGamificationScorecardsPointsAlltimeGatewayTimeout{}
}

/*
GetGamificationScorecardsPointsAlltimeGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetGamificationScorecardsPointsAlltimeGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards points alltime gateway timeout response has a 2xx status code
func (o *GetGamificationScorecardsPointsAlltimeGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards points alltime gateway timeout response has a 3xx status code
func (o *GetGamificationScorecardsPointsAlltimeGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards points alltime gateway timeout response has a 4xx status code
func (o *GetGamificationScorecardsPointsAlltimeGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification scorecards points alltime gateway timeout response has a 5xx status code
func (o *GetGamificationScorecardsPointsAlltimeGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get gamification scorecards points alltime gateway timeout response a status code equal to that given
func (o *GetGamificationScorecardsPointsAlltimeGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetGamificationScorecardsPointsAlltimeGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/points/alltime][%d] getGamificationScorecardsPointsAlltimeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetGamificationScorecardsPointsAlltimeGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsPointsAlltimeGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

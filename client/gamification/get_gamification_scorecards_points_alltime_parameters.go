// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetGamificationScorecardsPointsAlltimeParams creates a new GetGamificationScorecardsPointsAlltimeParams object
// with the default values initialized.
func NewGetGamificationScorecardsPointsAlltimeParams() *GetGamificationScorecardsPointsAlltimeParams {
	var ()
	return &GetGamificationScorecardsPointsAlltimeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetGamificationScorecardsPointsAlltimeParamsWithTimeout creates a new GetGamificationScorecardsPointsAlltimeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetGamificationScorecardsPointsAlltimeParamsWithTimeout(timeout time.Duration) *GetGamificationScorecardsPointsAlltimeParams {
	var ()
	return &GetGamificationScorecardsPointsAlltimeParams{

		timeout: timeout,
	}
}

// NewGetGamificationScorecardsPointsAlltimeParamsWithContext creates a new GetGamificationScorecardsPointsAlltimeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetGamificationScorecardsPointsAlltimeParamsWithContext(ctx context.Context) *GetGamificationScorecardsPointsAlltimeParams {
	var ()
	return &GetGamificationScorecardsPointsAlltimeParams{

		Context: ctx,
	}
}

// NewGetGamificationScorecardsPointsAlltimeParamsWithHTTPClient creates a new GetGamificationScorecardsPointsAlltimeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetGamificationScorecardsPointsAlltimeParamsWithHTTPClient(client *http.Client) *GetGamificationScorecardsPointsAlltimeParams {
	var ()
	return &GetGamificationScorecardsPointsAlltimeParams{
		HTTPClient: client,
	}
}

/*GetGamificationScorecardsPointsAlltimeParams contains all the parameters to send to the API endpoint
for the get gamification scorecards points alltime operation typically these are written to a http.Request
*/
type GetGamificationScorecardsPointsAlltimeParams struct {

	/*EndWorkday
	  End workday of querying workdays range. Workday is represented as an ISO-8601 string. For example: yyyy-MM-dd

	*/
	EndWorkday strfmt.Date

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get gamification scorecards points alltime params
func (o *GetGamificationScorecardsPointsAlltimeParams) WithTimeout(timeout time.Duration) *GetGamificationScorecardsPointsAlltimeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get gamification scorecards points alltime params
func (o *GetGamificationScorecardsPointsAlltimeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get gamification scorecards points alltime params
func (o *GetGamificationScorecardsPointsAlltimeParams) WithContext(ctx context.Context) *GetGamificationScorecardsPointsAlltimeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get gamification scorecards points alltime params
func (o *GetGamificationScorecardsPointsAlltimeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get gamification scorecards points alltime params
func (o *GetGamificationScorecardsPointsAlltimeParams) WithHTTPClient(client *http.Client) *GetGamificationScorecardsPointsAlltimeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get gamification scorecards points alltime params
func (o *GetGamificationScorecardsPointsAlltimeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndWorkday adds the endWorkday to the get gamification scorecards points alltime params
func (o *GetGamificationScorecardsPointsAlltimeParams) WithEndWorkday(endWorkday strfmt.Date) *GetGamificationScorecardsPointsAlltimeParams {
	o.SetEndWorkday(endWorkday)
	return o
}

// SetEndWorkday adds the endWorkday to the get gamification scorecards points alltime params
func (o *GetGamificationScorecardsPointsAlltimeParams) SetEndWorkday(endWorkday strfmt.Date) {
	o.EndWorkday = endWorkday
}

// WriteToRequest writes these params to a swagger request
func (o *GetGamificationScorecardsPointsAlltimeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param endWorkday
	qrEndWorkday := o.EndWorkday
	qEndWorkday := qrEndWorkday.String()
	if qEndWorkday != "" {
		if err := r.SetQueryParam("endWorkday", qEndWorkday); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package gamification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetGamificationScorecardsUserReader is a Reader for the GetGamificationScorecardsUser structure.
type GetGamificationScorecardsUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGamificationScorecardsUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGamificationScorecardsUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGamificationScorecardsUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetGamificationScorecardsUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGamificationScorecardsUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGamificationScorecardsUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetGamificationScorecardsUserRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetGamificationScorecardsUserRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetGamificationScorecardsUserUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetGamificationScorecardsUserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGamificationScorecardsUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetGamificationScorecardsUserServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetGamificationScorecardsUserGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGamificationScorecardsUserOK creates a GetGamificationScorecardsUserOK with default headers values
func NewGetGamificationScorecardsUserOK() *GetGamificationScorecardsUserOK {
	return &GetGamificationScorecardsUserOK{}
}

/*
GetGamificationScorecardsUserOK describes a response with status code 200, with default header values.

successful operation
*/
type GetGamificationScorecardsUserOK struct {
	Payload *models.WorkdayMetricListing
}

// IsSuccess returns true when this get gamification scorecards user o k response has a 2xx status code
func (o *GetGamificationScorecardsUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get gamification scorecards user o k response has a 3xx status code
func (o *GetGamificationScorecardsUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user o k response has a 4xx status code
func (o *GetGamificationScorecardsUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification scorecards user o k response has a 5xx status code
func (o *GetGamificationScorecardsUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user o k response a status code equal to that given
func (o *GetGamificationScorecardsUserOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetGamificationScorecardsUserOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserOK  %+v", 200, o.Payload)
}

func (o *GetGamificationScorecardsUserOK) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserOK  %+v", 200, o.Payload)
}

func (o *GetGamificationScorecardsUserOK) GetPayload() *models.WorkdayMetricListing {
	return o.Payload
}

func (o *GetGamificationScorecardsUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WorkdayMetricListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserBadRequest creates a GetGamificationScorecardsUserBadRequest with default headers values
func NewGetGamificationScorecardsUserBadRequest() *GetGamificationScorecardsUserBadRequest {
	return &GetGamificationScorecardsUserBadRequest{}
}

/*
GetGamificationScorecardsUserBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetGamificationScorecardsUserBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user bad request response has a 2xx status code
func (o *GetGamificationScorecardsUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user bad request response has a 3xx status code
func (o *GetGamificationScorecardsUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user bad request response has a 4xx status code
func (o *GetGamificationScorecardsUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user bad request response has a 5xx status code
func (o *GetGamificationScorecardsUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user bad request response a status code equal to that given
func (o *GetGamificationScorecardsUserBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetGamificationScorecardsUserBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserBadRequest  %+v", 400, o.Payload)
}

func (o *GetGamificationScorecardsUserBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserBadRequest  %+v", 400, o.Payload)
}

func (o *GetGamificationScorecardsUserBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserUnauthorized creates a GetGamificationScorecardsUserUnauthorized with default headers values
func NewGetGamificationScorecardsUserUnauthorized() *GetGamificationScorecardsUserUnauthorized {
	return &GetGamificationScorecardsUserUnauthorized{}
}

/*
GetGamificationScorecardsUserUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetGamificationScorecardsUserUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user unauthorized response has a 2xx status code
func (o *GetGamificationScorecardsUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user unauthorized response has a 3xx status code
func (o *GetGamificationScorecardsUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user unauthorized response has a 4xx status code
func (o *GetGamificationScorecardsUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user unauthorized response has a 5xx status code
func (o *GetGamificationScorecardsUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user unauthorized response a status code equal to that given
func (o *GetGamificationScorecardsUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetGamificationScorecardsUserUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGamificationScorecardsUserUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGamificationScorecardsUserUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserForbidden creates a GetGamificationScorecardsUserForbidden with default headers values
func NewGetGamificationScorecardsUserForbidden() *GetGamificationScorecardsUserForbidden {
	return &GetGamificationScorecardsUserForbidden{}
}

/*
GetGamificationScorecardsUserForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetGamificationScorecardsUserForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user forbidden response has a 2xx status code
func (o *GetGamificationScorecardsUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user forbidden response has a 3xx status code
func (o *GetGamificationScorecardsUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user forbidden response has a 4xx status code
func (o *GetGamificationScorecardsUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user forbidden response has a 5xx status code
func (o *GetGamificationScorecardsUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user forbidden response a status code equal to that given
func (o *GetGamificationScorecardsUserForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetGamificationScorecardsUserForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserForbidden  %+v", 403, o.Payload)
}

func (o *GetGamificationScorecardsUserForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserForbidden  %+v", 403, o.Payload)
}

func (o *GetGamificationScorecardsUserForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserNotFound creates a GetGamificationScorecardsUserNotFound with default headers values
func NewGetGamificationScorecardsUserNotFound() *GetGamificationScorecardsUserNotFound {
	return &GetGamificationScorecardsUserNotFound{}
}

/*
GetGamificationScorecardsUserNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetGamificationScorecardsUserNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user not found response has a 2xx status code
func (o *GetGamificationScorecardsUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user not found response has a 3xx status code
func (o *GetGamificationScorecardsUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user not found response has a 4xx status code
func (o *GetGamificationScorecardsUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user not found response has a 5xx status code
func (o *GetGamificationScorecardsUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user not found response a status code equal to that given
func (o *GetGamificationScorecardsUserNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetGamificationScorecardsUserNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserNotFound  %+v", 404, o.Payload)
}

func (o *GetGamificationScorecardsUserNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserNotFound  %+v", 404, o.Payload)
}

func (o *GetGamificationScorecardsUserNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserRequestTimeout creates a GetGamificationScorecardsUserRequestTimeout with default headers values
func NewGetGamificationScorecardsUserRequestTimeout() *GetGamificationScorecardsUserRequestTimeout {
	return &GetGamificationScorecardsUserRequestTimeout{}
}

/*
GetGamificationScorecardsUserRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetGamificationScorecardsUserRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user request timeout response has a 2xx status code
func (o *GetGamificationScorecardsUserRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user request timeout response has a 3xx status code
func (o *GetGamificationScorecardsUserRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user request timeout response has a 4xx status code
func (o *GetGamificationScorecardsUserRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user request timeout response has a 5xx status code
func (o *GetGamificationScorecardsUserRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user request timeout response a status code equal to that given
func (o *GetGamificationScorecardsUserRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetGamificationScorecardsUserRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetGamificationScorecardsUserRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetGamificationScorecardsUserRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserRequestEntityTooLarge creates a GetGamificationScorecardsUserRequestEntityTooLarge with default headers values
func NewGetGamificationScorecardsUserRequestEntityTooLarge() *GetGamificationScorecardsUserRequestEntityTooLarge {
	return &GetGamificationScorecardsUserRequestEntityTooLarge{}
}

/*
GetGamificationScorecardsUserRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetGamificationScorecardsUserRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user request entity too large response has a 2xx status code
func (o *GetGamificationScorecardsUserRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user request entity too large response has a 3xx status code
func (o *GetGamificationScorecardsUserRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user request entity too large response has a 4xx status code
func (o *GetGamificationScorecardsUserRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user request entity too large response has a 5xx status code
func (o *GetGamificationScorecardsUserRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user request entity too large response a status code equal to that given
func (o *GetGamificationScorecardsUserRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetGamificationScorecardsUserRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetGamificationScorecardsUserRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetGamificationScorecardsUserRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserUnsupportedMediaType creates a GetGamificationScorecardsUserUnsupportedMediaType with default headers values
func NewGetGamificationScorecardsUserUnsupportedMediaType() *GetGamificationScorecardsUserUnsupportedMediaType {
	return &GetGamificationScorecardsUserUnsupportedMediaType{}
}

/*
GetGamificationScorecardsUserUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetGamificationScorecardsUserUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user unsupported media type response has a 2xx status code
func (o *GetGamificationScorecardsUserUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user unsupported media type response has a 3xx status code
func (o *GetGamificationScorecardsUserUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user unsupported media type response has a 4xx status code
func (o *GetGamificationScorecardsUserUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user unsupported media type response has a 5xx status code
func (o *GetGamificationScorecardsUserUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user unsupported media type response a status code equal to that given
func (o *GetGamificationScorecardsUserUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetGamificationScorecardsUserUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetGamificationScorecardsUserUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetGamificationScorecardsUserUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserTooManyRequests creates a GetGamificationScorecardsUserTooManyRequests with default headers values
func NewGetGamificationScorecardsUserTooManyRequests() *GetGamificationScorecardsUserTooManyRequests {
	return &GetGamificationScorecardsUserTooManyRequests{}
}

/*
GetGamificationScorecardsUserTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetGamificationScorecardsUserTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user too many requests response has a 2xx status code
func (o *GetGamificationScorecardsUserTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user too many requests response has a 3xx status code
func (o *GetGamificationScorecardsUserTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user too many requests response has a 4xx status code
func (o *GetGamificationScorecardsUserTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gamification scorecards user too many requests response has a 5xx status code
func (o *GetGamificationScorecardsUserTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get gamification scorecards user too many requests response a status code equal to that given
func (o *GetGamificationScorecardsUserTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetGamificationScorecardsUserTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGamificationScorecardsUserTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGamificationScorecardsUserTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserInternalServerError creates a GetGamificationScorecardsUserInternalServerError with default headers values
func NewGetGamificationScorecardsUserInternalServerError() *GetGamificationScorecardsUserInternalServerError {
	return &GetGamificationScorecardsUserInternalServerError{}
}

/*
GetGamificationScorecardsUserInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetGamificationScorecardsUserInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user internal server error response has a 2xx status code
func (o *GetGamificationScorecardsUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user internal server error response has a 3xx status code
func (o *GetGamificationScorecardsUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user internal server error response has a 4xx status code
func (o *GetGamificationScorecardsUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification scorecards user internal server error response has a 5xx status code
func (o *GetGamificationScorecardsUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get gamification scorecards user internal server error response a status code equal to that given
func (o *GetGamificationScorecardsUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetGamificationScorecardsUserInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGamificationScorecardsUserInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGamificationScorecardsUserInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserServiceUnavailable creates a GetGamificationScorecardsUserServiceUnavailable with default headers values
func NewGetGamificationScorecardsUserServiceUnavailable() *GetGamificationScorecardsUserServiceUnavailable {
	return &GetGamificationScorecardsUserServiceUnavailable{}
}

/*
GetGamificationScorecardsUserServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetGamificationScorecardsUserServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user service unavailable response has a 2xx status code
func (o *GetGamificationScorecardsUserServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user service unavailable response has a 3xx status code
func (o *GetGamificationScorecardsUserServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user service unavailable response has a 4xx status code
func (o *GetGamificationScorecardsUserServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification scorecards user service unavailable response has a 5xx status code
func (o *GetGamificationScorecardsUserServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get gamification scorecards user service unavailable response a status code equal to that given
func (o *GetGamificationScorecardsUserServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetGamificationScorecardsUserServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetGamificationScorecardsUserServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetGamificationScorecardsUserServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGamificationScorecardsUserGatewayTimeout creates a GetGamificationScorecardsUserGatewayTimeout with default headers values
func NewGetGamificationScorecardsUserGatewayTimeout() *GetGamificationScorecardsUserGatewayTimeout {
	return &GetGamificationScorecardsUserGatewayTimeout{}
}

/*
GetGamificationScorecardsUserGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetGamificationScorecardsUserGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gamification scorecards user gateway timeout response has a 2xx status code
func (o *GetGamificationScorecardsUserGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gamification scorecards user gateway timeout response has a 3xx status code
func (o *GetGamificationScorecardsUserGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gamification scorecards user gateway timeout response has a 4xx status code
func (o *GetGamificationScorecardsUserGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gamification scorecards user gateway timeout response has a 5xx status code
func (o *GetGamificationScorecardsUserGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get gamification scorecards user gateway timeout response a status code equal to that given
func (o *GetGamificationScorecardsUserGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetGamificationScorecardsUserGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetGamificationScorecardsUserGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/gamification/scorecards/users/{userId}][%d] getGamificationScorecardsUserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetGamificationScorecardsUserGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGamificationScorecardsUserGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

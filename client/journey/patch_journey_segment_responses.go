// Code generated by go-swagger; DO NOT EDIT.

package journey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchJourneySegmentReader is a Reader for the PatchJourneySegment structure.
type PatchJourneySegmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchJourneySegmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchJourneySegmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchJourneySegmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchJourneySegmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchJourneySegmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchJourneySegmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchJourneySegmentRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchJourneySegmentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchJourneySegmentRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchJourneySegmentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchJourneySegmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchJourneySegmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchJourneySegmentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchJourneySegmentGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchJourneySegmentOK creates a PatchJourneySegmentOK with default headers values
func NewPatchJourneySegmentOK() *PatchJourneySegmentOK {
	return &PatchJourneySegmentOK{}
}

/*
PatchJourneySegmentOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchJourneySegmentOK struct {
	Payload *models.JourneySegment
}

// IsSuccess returns true when this patch journey segment o k response has a 2xx status code
func (o *PatchJourneySegmentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch journey segment o k response has a 3xx status code
func (o *PatchJourneySegmentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey segment o k response has a 4xx status code
func (o *PatchJourneySegmentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch journey segment o k response has a 5xx status code
func (o *PatchJourneySegmentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey segment o k response a status code equal to that given
func (o *PatchJourneySegmentOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchJourneySegmentOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentOK  %+v", 200, o.Payload)
}

func (o *PatchJourneySegmentOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentOK  %+v", 200, o.Payload)
}

func (o *PatchJourneySegmentOK) GetPayload() *models.JourneySegment {
	return o.Payload
}

func (o *PatchJourneySegmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JourneySegment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneySegmentBadRequest creates a PatchJourneySegmentBadRequest with default headers values
func NewPatchJourneySegmentBadRequest() *PatchJourneySegmentBadRequest {
	return &PatchJourneySegmentBadRequest{}
}

/*
PatchJourneySegmentBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchJourneySegmentBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey segment bad request response has a 2xx status code
func (o *PatchJourneySegmentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey segment bad request response has a 3xx status code
func (o *PatchJourneySegmentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey segment bad request response has a 4xx status code
func (o *PatchJourneySegmentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey segment bad request response has a 5xx status code
func (o *PatchJourneySegmentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey segment bad request response a status code equal to that given
func (o *PatchJourneySegmentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchJourneySegmentBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentBadRequest  %+v", 400, o.Payload)
}

func (o *PatchJourneySegmentBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentBadRequest  %+v", 400, o.Payload)
}

func (o *PatchJourneySegmentBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneySegmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneySegmentUnauthorized creates a PatchJourneySegmentUnauthorized with default headers values
func NewPatchJourneySegmentUnauthorized() *PatchJourneySegmentUnauthorized {
	return &PatchJourneySegmentUnauthorized{}
}

/*
PatchJourneySegmentUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchJourneySegmentUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey segment unauthorized response has a 2xx status code
func (o *PatchJourneySegmentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey segment unauthorized response has a 3xx status code
func (o *PatchJourneySegmentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey segment unauthorized response has a 4xx status code
func (o *PatchJourneySegmentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey segment unauthorized response has a 5xx status code
func (o *PatchJourneySegmentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey segment unauthorized response a status code equal to that given
func (o *PatchJourneySegmentUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchJourneySegmentUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchJourneySegmentUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchJourneySegmentUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneySegmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneySegmentForbidden creates a PatchJourneySegmentForbidden with default headers values
func NewPatchJourneySegmentForbidden() *PatchJourneySegmentForbidden {
	return &PatchJourneySegmentForbidden{}
}

/*
PatchJourneySegmentForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchJourneySegmentForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey segment forbidden response has a 2xx status code
func (o *PatchJourneySegmentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey segment forbidden response has a 3xx status code
func (o *PatchJourneySegmentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey segment forbidden response has a 4xx status code
func (o *PatchJourneySegmentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey segment forbidden response has a 5xx status code
func (o *PatchJourneySegmentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey segment forbidden response a status code equal to that given
func (o *PatchJourneySegmentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchJourneySegmentForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentForbidden  %+v", 403, o.Payload)
}

func (o *PatchJourneySegmentForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentForbidden  %+v", 403, o.Payload)
}

func (o *PatchJourneySegmentForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneySegmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneySegmentNotFound creates a PatchJourneySegmentNotFound with default headers values
func NewPatchJourneySegmentNotFound() *PatchJourneySegmentNotFound {
	return &PatchJourneySegmentNotFound{}
}

/*
PatchJourneySegmentNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchJourneySegmentNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey segment not found response has a 2xx status code
func (o *PatchJourneySegmentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey segment not found response has a 3xx status code
func (o *PatchJourneySegmentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey segment not found response has a 4xx status code
func (o *PatchJourneySegmentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey segment not found response has a 5xx status code
func (o *PatchJourneySegmentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey segment not found response a status code equal to that given
func (o *PatchJourneySegmentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchJourneySegmentNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentNotFound  %+v", 404, o.Payload)
}

func (o *PatchJourneySegmentNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentNotFound  %+v", 404, o.Payload)
}

func (o *PatchJourneySegmentNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneySegmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneySegmentRequestTimeout creates a PatchJourneySegmentRequestTimeout with default headers values
func NewPatchJourneySegmentRequestTimeout() *PatchJourneySegmentRequestTimeout {
	return &PatchJourneySegmentRequestTimeout{}
}

/*
PatchJourneySegmentRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchJourneySegmentRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey segment request timeout response has a 2xx status code
func (o *PatchJourneySegmentRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey segment request timeout response has a 3xx status code
func (o *PatchJourneySegmentRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey segment request timeout response has a 4xx status code
func (o *PatchJourneySegmentRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey segment request timeout response has a 5xx status code
func (o *PatchJourneySegmentRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey segment request timeout response a status code equal to that given
func (o *PatchJourneySegmentRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchJourneySegmentRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchJourneySegmentRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchJourneySegmentRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneySegmentRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneySegmentConflict creates a PatchJourneySegmentConflict with default headers values
func NewPatchJourneySegmentConflict() *PatchJourneySegmentConflict {
	return &PatchJourneySegmentConflict{}
}

/*
PatchJourneySegmentConflict describes a response with status code 409, with default header values.

Conflict
*/
type PatchJourneySegmentConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey segment conflict response has a 2xx status code
func (o *PatchJourneySegmentConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey segment conflict response has a 3xx status code
func (o *PatchJourneySegmentConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey segment conflict response has a 4xx status code
func (o *PatchJourneySegmentConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey segment conflict response has a 5xx status code
func (o *PatchJourneySegmentConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey segment conflict response a status code equal to that given
func (o *PatchJourneySegmentConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PatchJourneySegmentConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentConflict  %+v", 409, o.Payload)
}

func (o *PatchJourneySegmentConflict) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentConflict  %+v", 409, o.Payload)
}

func (o *PatchJourneySegmentConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneySegmentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneySegmentRequestEntityTooLarge creates a PatchJourneySegmentRequestEntityTooLarge with default headers values
func NewPatchJourneySegmentRequestEntityTooLarge() *PatchJourneySegmentRequestEntityTooLarge {
	return &PatchJourneySegmentRequestEntityTooLarge{}
}

/*
PatchJourneySegmentRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchJourneySegmentRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey segment request entity too large response has a 2xx status code
func (o *PatchJourneySegmentRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey segment request entity too large response has a 3xx status code
func (o *PatchJourneySegmentRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey segment request entity too large response has a 4xx status code
func (o *PatchJourneySegmentRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey segment request entity too large response has a 5xx status code
func (o *PatchJourneySegmentRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey segment request entity too large response a status code equal to that given
func (o *PatchJourneySegmentRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchJourneySegmentRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchJourneySegmentRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchJourneySegmentRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneySegmentRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneySegmentUnsupportedMediaType creates a PatchJourneySegmentUnsupportedMediaType with default headers values
func NewPatchJourneySegmentUnsupportedMediaType() *PatchJourneySegmentUnsupportedMediaType {
	return &PatchJourneySegmentUnsupportedMediaType{}
}

/*
PatchJourneySegmentUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchJourneySegmentUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey segment unsupported media type response has a 2xx status code
func (o *PatchJourneySegmentUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey segment unsupported media type response has a 3xx status code
func (o *PatchJourneySegmentUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey segment unsupported media type response has a 4xx status code
func (o *PatchJourneySegmentUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey segment unsupported media type response has a 5xx status code
func (o *PatchJourneySegmentUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey segment unsupported media type response a status code equal to that given
func (o *PatchJourneySegmentUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchJourneySegmentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchJourneySegmentUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchJourneySegmentUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneySegmentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneySegmentTooManyRequests creates a PatchJourneySegmentTooManyRequests with default headers values
func NewPatchJourneySegmentTooManyRequests() *PatchJourneySegmentTooManyRequests {
	return &PatchJourneySegmentTooManyRequests{}
}

/*
PatchJourneySegmentTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchJourneySegmentTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey segment too many requests response has a 2xx status code
func (o *PatchJourneySegmentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey segment too many requests response has a 3xx status code
func (o *PatchJourneySegmentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey segment too many requests response has a 4xx status code
func (o *PatchJourneySegmentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey segment too many requests response has a 5xx status code
func (o *PatchJourneySegmentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey segment too many requests response a status code equal to that given
func (o *PatchJourneySegmentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchJourneySegmentTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchJourneySegmentTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchJourneySegmentTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneySegmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneySegmentInternalServerError creates a PatchJourneySegmentInternalServerError with default headers values
func NewPatchJourneySegmentInternalServerError() *PatchJourneySegmentInternalServerError {
	return &PatchJourneySegmentInternalServerError{}
}

/*
PatchJourneySegmentInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchJourneySegmentInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey segment internal server error response has a 2xx status code
func (o *PatchJourneySegmentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey segment internal server error response has a 3xx status code
func (o *PatchJourneySegmentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey segment internal server error response has a 4xx status code
func (o *PatchJourneySegmentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch journey segment internal server error response has a 5xx status code
func (o *PatchJourneySegmentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch journey segment internal server error response a status code equal to that given
func (o *PatchJourneySegmentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchJourneySegmentInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchJourneySegmentInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchJourneySegmentInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneySegmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneySegmentServiceUnavailable creates a PatchJourneySegmentServiceUnavailable with default headers values
func NewPatchJourneySegmentServiceUnavailable() *PatchJourneySegmentServiceUnavailable {
	return &PatchJourneySegmentServiceUnavailable{}
}

/*
PatchJourneySegmentServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchJourneySegmentServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey segment service unavailable response has a 2xx status code
func (o *PatchJourneySegmentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey segment service unavailable response has a 3xx status code
func (o *PatchJourneySegmentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey segment service unavailable response has a 4xx status code
func (o *PatchJourneySegmentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch journey segment service unavailable response has a 5xx status code
func (o *PatchJourneySegmentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch journey segment service unavailable response a status code equal to that given
func (o *PatchJourneySegmentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchJourneySegmentServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchJourneySegmentServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchJourneySegmentServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneySegmentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneySegmentGatewayTimeout creates a PatchJourneySegmentGatewayTimeout with default headers values
func NewPatchJourneySegmentGatewayTimeout() *PatchJourneySegmentGatewayTimeout {
	return &PatchJourneySegmentGatewayTimeout{}
}

/*
PatchJourneySegmentGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchJourneySegmentGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey segment gateway timeout response has a 2xx status code
func (o *PatchJourneySegmentGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey segment gateway timeout response has a 3xx status code
func (o *PatchJourneySegmentGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey segment gateway timeout response has a 4xx status code
func (o *PatchJourneySegmentGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch journey segment gateway timeout response has a 5xx status code
func (o *PatchJourneySegmentGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch journey segment gateway timeout response a status code equal to that given
func (o *PatchJourneySegmentGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchJourneySegmentGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchJourneySegmentGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/segments/{segmentId}][%d] patchJourneySegmentGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchJourneySegmentGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneySegmentGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package journey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostJourneyActionmapsReader is a Reader for the PostJourneyActionmaps structure.
type PostJourneyActionmapsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostJourneyActionmapsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostJourneyActionmapsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewPostJourneyActionmapsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostJourneyActionmapsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostJourneyActionmapsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostJourneyActionmapsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostJourneyActionmapsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostJourneyActionmapsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostJourneyActionmapsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostJourneyActionmapsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostJourneyActionmapsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostJourneyActionmapsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostJourneyActionmapsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostJourneyActionmapsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostJourneyActionmapsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostJourneyActionmapsOK creates a PostJourneyActionmapsOK with default headers values
func NewPostJourneyActionmapsOK() *PostJourneyActionmapsOK {
	return &PostJourneyActionmapsOK{}
}

/*PostJourneyActionmapsOK handles this case with default header values.

successful operation
*/
type PostJourneyActionmapsOK struct {
	Payload *models.ActionMap
}

func (o *PostJourneyActionmapsOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/journey/actionmaps][%d] postJourneyActionmapsOK  %+v", 200, o.Payload)
}

func (o *PostJourneyActionmapsOK) GetPayload() *models.ActionMap {
	return o.Payload
}

func (o *PostJourneyActionmapsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ActionMap)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJourneyActionmapsCreated creates a PostJourneyActionmapsCreated with default headers values
func NewPostJourneyActionmapsCreated() *PostJourneyActionmapsCreated {
	return &PostJourneyActionmapsCreated{}
}

/*PostJourneyActionmapsCreated handles this case with default header values.

Action map created.
*/
type PostJourneyActionmapsCreated struct {
	Payload *models.ActionMap
}

func (o *PostJourneyActionmapsCreated) Error() string {
	return fmt.Sprintf("[POST /api/v2/journey/actionmaps][%d] postJourneyActionmapsCreated  %+v", 201, o.Payload)
}

func (o *PostJourneyActionmapsCreated) GetPayload() *models.ActionMap {
	return o.Payload
}

func (o *PostJourneyActionmapsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ActionMap)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJourneyActionmapsBadRequest creates a PostJourneyActionmapsBadRequest with default headers values
func NewPostJourneyActionmapsBadRequest() *PostJourneyActionmapsBadRequest {
	return &PostJourneyActionmapsBadRequest{}
}

/*PostJourneyActionmapsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostJourneyActionmapsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostJourneyActionmapsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/journey/actionmaps][%d] postJourneyActionmapsBadRequest  %+v", 400, o.Payload)
}

func (o *PostJourneyActionmapsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostJourneyActionmapsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJourneyActionmapsUnauthorized creates a PostJourneyActionmapsUnauthorized with default headers values
func NewPostJourneyActionmapsUnauthorized() *PostJourneyActionmapsUnauthorized {
	return &PostJourneyActionmapsUnauthorized{}
}

/*PostJourneyActionmapsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostJourneyActionmapsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostJourneyActionmapsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/journey/actionmaps][%d] postJourneyActionmapsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostJourneyActionmapsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostJourneyActionmapsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJourneyActionmapsForbidden creates a PostJourneyActionmapsForbidden with default headers values
func NewPostJourneyActionmapsForbidden() *PostJourneyActionmapsForbidden {
	return &PostJourneyActionmapsForbidden{}
}

/*PostJourneyActionmapsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostJourneyActionmapsForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostJourneyActionmapsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/journey/actionmaps][%d] postJourneyActionmapsForbidden  %+v", 403, o.Payload)
}

func (o *PostJourneyActionmapsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostJourneyActionmapsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJourneyActionmapsNotFound creates a PostJourneyActionmapsNotFound with default headers values
func NewPostJourneyActionmapsNotFound() *PostJourneyActionmapsNotFound {
	return &PostJourneyActionmapsNotFound{}
}

/*PostJourneyActionmapsNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostJourneyActionmapsNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostJourneyActionmapsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/journey/actionmaps][%d] postJourneyActionmapsNotFound  %+v", 404, o.Payload)
}

func (o *PostJourneyActionmapsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostJourneyActionmapsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJourneyActionmapsRequestTimeout creates a PostJourneyActionmapsRequestTimeout with default headers values
func NewPostJourneyActionmapsRequestTimeout() *PostJourneyActionmapsRequestTimeout {
	return &PostJourneyActionmapsRequestTimeout{}
}

/*PostJourneyActionmapsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostJourneyActionmapsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostJourneyActionmapsRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/journey/actionmaps][%d] postJourneyActionmapsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostJourneyActionmapsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostJourneyActionmapsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJourneyActionmapsConflict creates a PostJourneyActionmapsConflict with default headers values
func NewPostJourneyActionmapsConflict() *PostJourneyActionmapsConflict {
	return &PostJourneyActionmapsConflict{}
}

/*PostJourneyActionmapsConflict handles this case with default header values.

Conflict
*/
type PostJourneyActionmapsConflict struct {
	Payload *models.ErrorBody
}

func (o *PostJourneyActionmapsConflict) Error() string {
	return fmt.Sprintf("[POST /api/v2/journey/actionmaps][%d] postJourneyActionmapsConflict  %+v", 409, o.Payload)
}

func (o *PostJourneyActionmapsConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostJourneyActionmapsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJourneyActionmapsRequestEntityTooLarge creates a PostJourneyActionmapsRequestEntityTooLarge with default headers values
func NewPostJourneyActionmapsRequestEntityTooLarge() *PostJourneyActionmapsRequestEntityTooLarge {
	return &PostJourneyActionmapsRequestEntityTooLarge{}
}

/*PostJourneyActionmapsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostJourneyActionmapsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostJourneyActionmapsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/journey/actionmaps][%d] postJourneyActionmapsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostJourneyActionmapsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostJourneyActionmapsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJourneyActionmapsUnsupportedMediaType creates a PostJourneyActionmapsUnsupportedMediaType with default headers values
func NewPostJourneyActionmapsUnsupportedMediaType() *PostJourneyActionmapsUnsupportedMediaType {
	return &PostJourneyActionmapsUnsupportedMediaType{}
}

/*PostJourneyActionmapsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostJourneyActionmapsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostJourneyActionmapsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/journey/actionmaps][%d] postJourneyActionmapsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostJourneyActionmapsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostJourneyActionmapsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJourneyActionmapsTooManyRequests creates a PostJourneyActionmapsTooManyRequests with default headers values
func NewPostJourneyActionmapsTooManyRequests() *PostJourneyActionmapsTooManyRequests {
	return &PostJourneyActionmapsTooManyRequests{}
}

/*PostJourneyActionmapsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostJourneyActionmapsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostJourneyActionmapsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/journey/actionmaps][%d] postJourneyActionmapsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostJourneyActionmapsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostJourneyActionmapsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJourneyActionmapsInternalServerError creates a PostJourneyActionmapsInternalServerError with default headers values
func NewPostJourneyActionmapsInternalServerError() *PostJourneyActionmapsInternalServerError {
	return &PostJourneyActionmapsInternalServerError{}
}

/*PostJourneyActionmapsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostJourneyActionmapsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostJourneyActionmapsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/journey/actionmaps][%d] postJourneyActionmapsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostJourneyActionmapsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostJourneyActionmapsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJourneyActionmapsServiceUnavailable creates a PostJourneyActionmapsServiceUnavailable with default headers values
func NewPostJourneyActionmapsServiceUnavailable() *PostJourneyActionmapsServiceUnavailable {
	return &PostJourneyActionmapsServiceUnavailable{}
}

/*PostJourneyActionmapsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostJourneyActionmapsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostJourneyActionmapsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/journey/actionmaps][%d] postJourneyActionmapsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostJourneyActionmapsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostJourneyActionmapsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJourneyActionmapsGatewayTimeout creates a PostJourneyActionmapsGatewayTimeout with default headers values
func NewPostJourneyActionmapsGatewayTimeout() *PostJourneyActionmapsGatewayTimeout {
	return &PostJourneyActionmapsGatewayTimeout{}
}

/*PostJourneyActionmapsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostJourneyActionmapsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostJourneyActionmapsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/journey/actionmaps][%d] postJourneyActionmapsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostJourneyActionmapsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostJourneyActionmapsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

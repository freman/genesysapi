// Code generated by go-swagger; DO NOT EDIT.

package journey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetJourneyActionmapsParams creates a new GetJourneyActionmapsParams object
// with the default values initialized.
func NewGetJourneyActionmapsParams() *GetJourneyActionmapsParams {
	var (
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
	)
	return &GetJourneyActionmapsParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetJourneyActionmapsParamsWithTimeout creates a new GetJourneyActionmapsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetJourneyActionmapsParamsWithTimeout(timeout time.Duration) *GetJourneyActionmapsParams {
	var (
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
	)
	return &GetJourneyActionmapsParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		timeout: timeout,
	}
}

// NewGetJourneyActionmapsParamsWithContext creates a new GetJourneyActionmapsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetJourneyActionmapsParamsWithContext(ctx context.Context) *GetJourneyActionmapsParams {
	var (
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
	)
	return &GetJourneyActionmapsParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		Context: ctx,
	}
}

// NewGetJourneyActionmapsParamsWithHTTPClient creates a new GetJourneyActionmapsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetJourneyActionmapsParamsWithHTTPClient(client *http.Client) *GetJourneyActionmapsParams {
	var (
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
	)
	return &GetJourneyActionmapsParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		HTTPClient: client,
	}
}

/*GetJourneyActionmapsParams contains all the parameters to send to the API endpoint
for the get journey actionmaps operation typically these are written to a http.Request
*/
type GetJourneyActionmapsParams struct {

	/*ActionMapIds
	  IDs of action maps to return. Use of this parameter is not compatible with pagination, filtering or sorting. A maximum of 100 action maps are allowed per request.

	*/
	ActionMapIds []string
	/*FilterField
	  Field to filter by (e.g. filterField=weight or filterField=action.actionTemplate.id). Requires 'filterField' to also be set.

	*/
	FilterField *string
	/*FilterValue
	  Value to filter by. Requires 'filterValue' to also be set.

	*/
	FilterValue *string
	/*PageNumber
	  Page number

	*/
	PageNumber *int32
	/*PageSize
	  Page size

	*/
	PageSize *int32
	/*SortBy
	  Field(s) to sort by. Prefix with '-' for descending (e.g. sortBy=displayName,-createdDate).

	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) WithTimeout(timeout time.Duration) *GetJourneyActionmapsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) WithContext(ctx context.Context) *GetJourneyActionmapsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) WithHTTPClient(client *http.Client) *GetJourneyActionmapsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActionMapIds adds the actionMapIds to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) WithActionMapIds(actionMapIds []string) *GetJourneyActionmapsParams {
	o.SetActionMapIds(actionMapIds)
	return o
}

// SetActionMapIds adds the actionMapIds to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) SetActionMapIds(actionMapIds []string) {
	o.ActionMapIds = actionMapIds
}

// WithFilterField adds the filterField to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) WithFilterField(filterField *string) *GetJourneyActionmapsParams {
	o.SetFilterField(filterField)
	return o
}

// SetFilterField adds the filterField to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) SetFilterField(filterField *string) {
	o.FilterField = filterField
}

// WithFilterValue adds the filterValue to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) WithFilterValue(filterValue *string) *GetJourneyActionmapsParams {
	o.SetFilterValue(filterValue)
	return o
}

// SetFilterValue adds the filterValue to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) SetFilterValue(filterValue *string) {
	o.FilterValue = filterValue
}

// WithPageNumber adds the pageNumber to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) WithPageNumber(pageNumber *int32) *GetJourneyActionmapsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) WithPageSize(pageSize *int32) *GetJourneyActionmapsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithSortBy adds the sortBy to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) WithSortBy(sortBy *string) *GetJourneyActionmapsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get journey actionmaps params
func (o *GetJourneyActionmapsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *GetJourneyActionmapsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesActionMapIds := o.ActionMapIds

	joinedActionMapIds := swag.JoinByFormat(valuesActionMapIds, "multi")
	// query array param actionMapIds
	if err := r.SetQueryParam("actionMapIds", joinedActionMapIds...); err != nil {
		return err
	}

	if o.FilterField != nil {

		// query param filterField
		var qrFilterField string
		if o.FilterField != nil {
			qrFilterField = *o.FilterField
		}
		qFilterField := qrFilterField
		if qFilterField != "" {
			if err := r.SetQueryParam("filterField", qFilterField); err != nil {
				return err
			}
		}

	}

	if o.FilterValue != nil {

		// query param filterValue
		var qrFilterValue string
		if o.FilterValue != nil {
			qrFilterValue = *o.FilterValue
		}
		qFilterValue := qrFilterValue
		if qFilterValue != "" {
			if err := r.SetQueryParam("filterValue", qFilterValue); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

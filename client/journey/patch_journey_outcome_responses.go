// Code generated by go-swagger; DO NOT EDIT.

package journey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchJourneyOutcomeReader is a Reader for the PatchJourneyOutcome structure.
type PatchJourneyOutcomeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchJourneyOutcomeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchJourneyOutcomeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchJourneyOutcomeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchJourneyOutcomeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchJourneyOutcomeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchJourneyOutcomeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchJourneyOutcomeRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchJourneyOutcomeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchJourneyOutcomeRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchJourneyOutcomeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchJourneyOutcomeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchJourneyOutcomeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchJourneyOutcomeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchJourneyOutcomeGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchJourneyOutcomeOK creates a PatchJourneyOutcomeOK with default headers values
func NewPatchJourneyOutcomeOK() *PatchJourneyOutcomeOK {
	return &PatchJourneyOutcomeOK{}
}

/*
PatchJourneyOutcomeOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchJourneyOutcomeOK struct {
	Payload *models.Outcome
}

// IsSuccess returns true when this patch journey outcome o k response has a 2xx status code
func (o *PatchJourneyOutcomeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch journey outcome o k response has a 3xx status code
func (o *PatchJourneyOutcomeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey outcome o k response has a 4xx status code
func (o *PatchJourneyOutcomeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch journey outcome o k response has a 5xx status code
func (o *PatchJourneyOutcomeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey outcome o k response a status code equal to that given
func (o *PatchJourneyOutcomeOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchJourneyOutcomeOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeOK  %+v", 200, o.Payload)
}

func (o *PatchJourneyOutcomeOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeOK  %+v", 200, o.Payload)
}

func (o *PatchJourneyOutcomeOK) GetPayload() *models.Outcome {
	return o.Payload
}

func (o *PatchJourneyOutcomeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Outcome)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneyOutcomeBadRequest creates a PatchJourneyOutcomeBadRequest with default headers values
func NewPatchJourneyOutcomeBadRequest() *PatchJourneyOutcomeBadRequest {
	return &PatchJourneyOutcomeBadRequest{}
}

/*
PatchJourneyOutcomeBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchJourneyOutcomeBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey outcome bad request response has a 2xx status code
func (o *PatchJourneyOutcomeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey outcome bad request response has a 3xx status code
func (o *PatchJourneyOutcomeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey outcome bad request response has a 4xx status code
func (o *PatchJourneyOutcomeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey outcome bad request response has a 5xx status code
func (o *PatchJourneyOutcomeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey outcome bad request response a status code equal to that given
func (o *PatchJourneyOutcomeBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchJourneyOutcomeBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeBadRequest  %+v", 400, o.Payload)
}

func (o *PatchJourneyOutcomeBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeBadRequest  %+v", 400, o.Payload)
}

func (o *PatchJourneyOutcomeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneyOutcomeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneyOutcomeUnauthorized creates a PatchJourneyOutcomeUnauthorized with default headers values
func NewPatchJourneyOutcomeUnauthorized() *PatchJourneyOutcomeUnauthorized {
	return &PatchJourneyOutcomeUnauthorized{}
}

/*
PatchJourneyOutcomeUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchJourneyOutcomeUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey outcome unauthorized response has a 2xx status code
func (o *PatchJourneyOutcomeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey outcome unauthorized response has a 3xx status code
func (o *PatchJourneyOutcomeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey outcome unauthorized response has a 4xx status code
func (o *PatchJourneyOutcomeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey outcome unauthorized response has a 5xx status code
func (o *PatchJourneyOutcomeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey outcome unauthorized response a status code equal to that given
func (o *PatchJourneyOutcomeUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchJourneyOutcomeUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchJourneyOutcomeUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchJourneyOutcomeUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneyOutcomeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneyOutcomeForbidden creates a PatchJourneyOutcomeForbidden with default headers values
func NewPatchJourneyOutcomeForbidden() *PatchJourneyOutcomeForbidden {
	return &PatchJourneyOutcomeForbidden{}
}

/*
PatchJourneyOutcomeForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchJourneyOutcomeForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey outcome forbidden response has a 2xx status code
func (o *PatchJourneyOutcomeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey outcome forbidden response has a 3xx status code
func (o *PatchJourneyOutcomeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey outcome forbidden response has a 4xx status code
func (o *PatchJourneyOutcomeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey outcome forbidden response has a 5xx status code
func (o *PatchJourneyOutcomeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey outcome forbidden response a status code equal to that given
func (o *PatchJourneyOutcomeForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchJourneyOutcomeForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeForbidden  %+v", 403, o.Payload)
}

func (o *PatchJourneyOutcomeForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeForbidden  %+v", 403, o.Payload)
}

func (o *PatchJourneyOutcomeForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneyOutcomeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneyOutcomeNotFound creates a PatchJourneyOutcomeNotFound with default headers values
func NewPatchJourneyOutcomeNotFound() *PatchJourneyOutcomeNotFound {
	return &PatchJourneyOutcomeNotFound{}
}

/*
PatchJourneyOutcomeNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchJourneyOutcomeNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey outcome not found response has a 2xx status code
func (o *PatchJourneyOutcomeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey outcome not found response has a 3xx status code
func (o *PatchJourneyOutcomeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey outcome not found response has a 4xx status code
func (o *PatchJourneyOutcomeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey outcome not found response has a 5xx status code
func (o *PatchJourneyOutcomeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey outcome not found response a status code equal to that given
func (o *PatchJourneyOutcomeNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchJourneyOutcomeNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeNotFound  %+v", 404, o.Payload)
}

func (o *PatchJourneyOutcomeNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeNotFound  %+v", 404, o.Payload)
}

func (o *PatchJourneyOutcomeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneyOutcomeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneyOutcomeRequestTimeout creates a PatchJourneyOutcomeRequestTimeout with default headers values
func NewPatchJourneyOutcomeRequestTimeout() *PatchJourneyOutcomeRequestTimeout {
	return &PatchJourneyOutcomeRequestTimeout{}
}

/*
PatchJourneyOutcomeRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchJourneyOutcomeRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey outcome request timeout response has a 2xx status code
func (o *PatchJourneyOutcomeRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey outcome request timeout response has a 3xx status code
func (o *PatchJourneyOutcomeRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey outcome request timeout response has a 4xx status code
func (o *PatchJourneyOutcomeRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey outcome request timeout response has a 5xx status code
func (o *PatchJourneyOutcomeRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey outcome request timeout response a status code equal to that given
func (o *PatchJourneyOutcomeRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchJourneyOutcomeRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchJourneyOutcomeRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchJourneyOutcomeRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneyOutcomeRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneyOutcomeConflict creates a PatchJourneyOutcomeConflict with default headers values
func NewPatchJourneyOutcomeConflict() *PatchJourneyOutcomeConflict {
	return &PatchJourneyOutcomeConflict{}
}

/*
PatchJourneyOutcomeConflict describes a response with status code 409, with default header values.

Conflict
*/
type PatchJourneyOutcomeConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey outcome conflict response has a 2xx status code
func (o *PatchJourneyOutcomeConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey outcome conflict response has a 3xx status code
func (o *PatchJourneyOutcomeConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey outcome conflict response has a 4xx status code
func (o *PatchJourneyOutcomeConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey outcome conflict response has a 5xx status code
func (o *PatchJourneyOutcomeConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey outcome conflict response a status code equal to that given
func (o *PatchJourneyOutcomeConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PatchJourneyOutcomeConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeConflict  %+v", 409, o.Payload)
}

func (o *PatchJourneyOutcomeConflict) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeConflict  %+v", 409, o.Payload)
}

func (o *PatchJourneyOutcomeConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneyOutcomeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneyOutcomeRequestEntityTooLarge creates a PatchJourneyOutcomeRequestEntityTooLarge with default headers values
func NewPatchJourneyOutcomeRequestEntityTooLarge() *PatchJourneyOutcomeRequestEntityTooLarge {
	return &PatchJourneyOutcomeRequestEntityTooLarge{}
}

/*
PatchJourneyOutcomeRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchJourneyOutcomeRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey outcome request entity too large response has a 2xx status code
func (o *PatchJourneyOutcomeRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey outcome request entity too large response has a 3xx status code
func (o *PatchJourneyOutcomeRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey outcome request entity too large response has a 4xx status code
func (o *PatchJourneyOutcomeRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey outcome request entity too large response has a 5xx status code
func (o *PatchJourneyOutcomeRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey outcome request entity too large response a status code equal to that given
func (o *PatchJourneyOutcomeRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchJourneyOutcomeRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchJourneyOutcomeRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchJourneyOutcomeRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneyOutcomeRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneyOutcomeUnsupportedMediaType creates a PatchJourneyOutcomeUnsupportedMediaType with default headers values
func NewPatchJourneyOutcomeUnsupportedMediaType() *PatchJourneyOutcomeUnsupportedMediaType {
	return &PatchJourneyOutcomeUnsupportedMediaType{}
}

/*
PatchJourneyOutcomeUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchJourneyOutcomeUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey outcome unsupported media type response has a 2xx status code
func (o *PatchJourneyOutcomeUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey outcome unsupported media type response has a 3xx status code
func (o *PatchJourneyOutcomeUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey outcome unsupported media type response has a 4xx status code
func (o *PatchJourneyOutcomeUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey outcome unsupported media type response has a 5xx status code
func (o *PatchJourneyOutcomeUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey outcome unsupported media type response a status code equal to that given
func (o *PatchJourneyOutcomeUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchJourneyOutcomeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchJourneyOutcomeUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchJourneyOutcomeUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneyOutcomeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneyOutcomeTooManyRequests creates a PatchJourneyOutcomeTooManyRequests with default headers values
func NewPatchJourneyOutcomeTooManyRequests() *PatchJourneyOutcomeTooManyRequests {
	return &PatchJourneyOutcomeTooManyRequests{}
}

/*
PatchJourneyOutcomeTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchJourneyOutcomeTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey outcome too many requests response has a 2xx status code
func (o *PatchJourneyOutcomeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey outcome too many requests response has a 3xx status code
func (o *PatchJourneyOutcomeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey outcome too many requests response has a 4xx status code
func (o *PatchJourneyOutcomeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch journey outcome too many requests response has a 5xx status code
func (o *PatchJourneyOutcomeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch journey outcome too many requests response a status code equal to that given
func (o *PatchJourneyOutcomeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchJourneyOutcomeTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchJourneyOutcomeTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchJourneyOutcomeTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneyOutcomeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneyOutcomeInternalServerError creates a PatchJourneyOutcomeInternalServerError with default headers values
func NewPatchJourneyOutcomeInternalServerError() *PatchJourneyOutcomeInternalServerError {
	return &PatchJourneyOutcomeInternalServerError{}
}

/*
PatchJourneyOutcomeInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchJourneyOutcomeInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey outcome internal server error response has a 2xx status code
func (o *PatchJourneyOutcomeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey outcome internal server error response has a 3xx status code
func (o *PatchJourneyOutcomeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey outcome internal server error response has a 4xx status code
func (o *PatchJourneyOutcomeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch journey outcome internal server error response has a 5xx status code
func (o *PatchJourneyOutcomeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch journey outcome internal server error response a status code equal to that given
func (o *PatchJourneyOutcomeInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchJourneyOutcomeInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchJourneyOutcomeInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchJourneyOutcomeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneyOutcomeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneyOutcomeServiceUnavailable creates a PatchJourneyOutcomeServiceUnavailable with default headers values
func NewPatchJourneyOutcomeServiceUnavailable() *PatchJourneyOutcomeServiceUnavailable {
	return &PatchJourneyOutcomeServiceUnavailable{}
}

/*
PatchJourneyOutcomeServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchJourneyOutcomeServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey outcome service unavailable response has a 2xx status code
func (o *PatchJourneyOutcomeServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey outcome service unavailable response has a 3xx status code
func (o *PatchJourneyOutcomeServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey outcome service unavailable response has a 4xx status code
func (o *PatchJourneyOutcomeServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch journey outcome service unavailable response has a 5xx status code
func (o *PatchJourneyOutcomeServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch journey outcome service unavailable response a status code equal to that given
func (o *PatchJourneyOutcomeServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchJourneyOutcomeServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchJourneyOutcomeServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchJourneyOutcomeServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneyOutcomeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchJourneyOutcomeGatewayTimeout creates a PatchJourneyOutcomeGatewayTimeout with default headers values
func NewPatchJourneyOutcomeGatewayTimeout() *PatchJourneyOutcomeGatewayTimeout {
	return &PatchJourneyOutcomeGatewayTimeout{}
}

/*
PatchJourneyOutcomeGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchJourneyOutcomeGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch journey outcome gateway timeout response has a 2xx status code
func (o *PatchJourneyOutcomeGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch journey outcome gateway timeout response has a 3xx status code
func (o *PatchJourneyOutcomeGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch journey outcome gateway timeout response has a 4xx status code
func (o *PatchJourneyOutcomeGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch journey outcome gateway timeout response has a 5xx status code
func (o *PatchJourneyOutcomeGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch journey outcome gateway timeout response a status code equal to that given
func (o *PatchJourneyOutcomeGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchJourneyOutcomeGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchJourneyOutcomeGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/journey/outcomes/{outcomeId}][%d] patchJourneyOutcomeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchJourneyOutcomeGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchJourneyOutcomeGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

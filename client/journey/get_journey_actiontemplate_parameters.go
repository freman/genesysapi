// Code generated by go-swagger; DO NOT EDIT.

package journey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetJourneyActiontemplateParams creates a new GetJourneyActiontemplateParams object
// with the default values initialized.
func NewGetJourneyActiontemplateParams() *GetJourneyActiontemplateParams {
	var ()
	return &GetJourneyActiontemplateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetJourneyActiontemplateParamsWithTimeout creates a new GetJourneyActiontemplateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetJourneyActiontemplateParamsWithTimeout(timeout time.Duration) *GetJourneyActiontemplateParams {
	var ()
	return &GetJourneyActiontemplateParams{

		timeout: timeout,
	}
}

// NewGetJourneyActiontemplateParamsWithContext creates a new GetJourneyActiontemplateParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetJourneyActiontemplateParamsWithContext(ctx context.Context) *GetJourneyActiontemplateParams {
	var ()
	return &GetJourneyActiontemplateParams{

		Context: ctx,
	}
}

// NewGetJourneyActiontemplateParamsWithHTTPClient creates a new GetJourneyActiontemplateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetJourneyActiontemplateParamsWithHTTPClient(client *http.Client) *GetJourneyActiontemplateParams {
	var ()
	return &GetJourneyActiontemplateParams{
		HTTPClient: client,
	}
}

/*GetJourneyActiontemplateParams contains all the parameters to send to the API endpoint
for the get journey actiontemplate operation typically these are written to a http.Request
*/
type GetJourneyActiontemplateParams struct {

	/*ActionTemplateID
	  ID of the action template.

	*/
	ActionTemplateID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get journey actiontemplate params
func (o *GetJourneyActiontemplateParams) WithTimeout(timeout time.Duration) *GetJourneyActiontemplateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get journey actiontemplate params
func (o *GetJourneyActiontemplateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get journey actiontemplate params
func (o *GetJourneyActiontemplateParams) WithContext(ctx context.Context) *GetJourneyActiontemplateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get journey actiontemplate params
func (o *GetJourneyActiontemplateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get journey actiontemplate params
func (o *GetJourneyActiontemplateParams) WithHTTPClient(client *http.Client) *GetJourneyActiontemplateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get journey actiontemplate params
func (o *GetJourneyActiontemplateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActionTemplateID adds the actionTemplateID to the get journey actiontemplate params
func (o *GetJourneyActiontemplateParams) WithActionTemplateID(actionTemplateID string) *GetJourneyActiontemplateParams {
	o.SetActionTemplateID(actionTemplateID)
	return o
}

// SetActionTemplateID adds the actionTemplateId to the get journey actiontemplate params
func (o *GetJourneyActiontemplateParams) SetActionTemplateID(actionTemplateID string) {
	o.ActionTemplateID = actionTemplateID
}

// WriteToRequest writes these params to a swagger request
func (o *GetJourneyActiontemplateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param actionTemplateId
	if err := r.SetPathParam("actionTemplateId", o.ActionTemplateID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

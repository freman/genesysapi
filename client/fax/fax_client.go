// Code generated by go-swagger; DO NOT EDIT.

package fax

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the fax client
type API interface {
	/*
	   DeleteFaxDocument deletes a fax document
	*/
	DeleteFaxDocument(ctx context.Context, params *DeleteFaxDocumentParams) (*DeleteFaxDocumentAccepted, error)
	/*
	   GetFaxDocument gets a document
	*/
	GetFaxDocument(ctx context.Context, params *GetFaxDocumentParams) (*GetFaxDocumentOK, error)
	/*
	   GetFaxDocumentContent downloads a fax document
	*/
	GetFaxDocumentContent(ctx context.Context, params *GetFaxDocumentContentParams) (*GetFaxDocumentContentOK, error)
	/*
	   GetFaxDocuments gets a list of fax documents
	*/
	GetFaxDocuments(ctx context.Context, params *GetFaxDocumentsParams) (*GetFaxDocumentsOK, error)
	/*
	   GetFaxSummary gets fax summary
	*/
	GetFaxSummary(ctx context.Context, params *GetFaxSummaryParams) (*GetFaxSummaryOK, error)
	/*
	   PutFaxDocument updates a fax document
	*/
	PutFaxDocument(ctx context.Context, params *PutFaxDocumentParams) (*PutFaxDocumentOK, error)
}

// New creates a new fax API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for fax API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteFaxDocument deletes a fax document
*/
func (a *Client) DeleteFaxDocument(ctx context.Context, params *DeleteFaxDocumentParams) (*DeleteFaxDocumentAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFaxDocument",
		Method:             "DELETE",
		PathPattern:        "/api/v2/fax/documents/{documentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFaxDocumentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFaxDocumentAccepted), nil

}

/*
GetFaxDocument gets a document
*/
func (a *Client) GetFaxDocument(ctx context.Context, params *GetFaxDocumentParams) (*GetFaxDocumentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFaxDocument",
		Method:             "GET",
		PathPattern:        "/api/v2/fax/documents/{documentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFaxDocumentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFaxDocumentOK), nil

}

/*
GetFaxDocumentContent downloads a fax document
*/
func (a *Client) GetFaxDocumentContent(ctx context.Context, params *GetFaxDocumentContentParams) (*GetFaxDocumentContentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFaxDocumentContent",
		Method:             "GET",
		PathPattern:        "/api/v2/fax/documents/{documentId}/content",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFaxDocumentContentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFaxDocumentContentOK), nil

}

/*
GetFaxDocuments gets a list of fax documents
*/
func (a *Client) GetFaxDocuments(ctx context.Context, params *GetFaxDocumentsParams) (*GetFaxDocumentsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFaxDocuments",
		Method:             "GET",
		PathPattern:        "/api/v2/fax/documents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFaxDocumentsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFaxDocumentsOK), nil

}

/*
GetFaxSummary gets fax summary
*/
func (a *Client) GetFaxSummary(ctx context.Context, params *GetFaxSummaryParams) (*GetFaxSummaryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFaxSummary",
		Method:             "GET",
		PathPattern:        "/api/v2/fax/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFaxSummaryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFaxSummaryOK), nil

}

/*
PutFaxDocument updates a fax document
*/
func (a *Client) PutFaxDocument(ctx context.Context, params *PutFaxDocumentParams) (*PutFaxDocumentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putFaxDocument",
		Method:             "PUT",
		PathPattern:        "/api/v2/fax/documents/{documentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutFaxDocumentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutFaxDocumentOK), nil

}

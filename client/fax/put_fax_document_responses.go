// Code generated by go-swagger; DO NOT EDIT.

package fax

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutFaxDocumentReader is a Reader for the PutFaxDocument structure.
type PutFaxDocumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutFaxDocumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutFaxDocumentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutFaxDocumentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutFaxDocumentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutFaxDocumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutFaxDocumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutFaxDocumentRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutFaxDocumentRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutFaxDocumentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutFaxDocumentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutFaxDocumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutFaxDocumentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutFaxDocumentGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutFaxDocumentOK creates a PutFaxDocumentOK with default headers values
func NewPutFaxDocumentOK() *PutFaxDocumentOK {
	return &PutFaxDocumentOK{}
}

/*PutFaxDocumentOK handles this case with default header values.

successful operation
*/
type PutFaxDocumentOK struct {
	Payload *models.FaxDocument
}

func (o *PutFaxDocumentOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/fax/documents/{documentId}][%d] putFaxDocumentOK  %+v", 200, o.Payload)
}

func (o *PutFaxDocumentOK) GetPayload() *models.FaxDocument {
	return o.Payload
}

func (o *PutFaxDocumentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FaxDocument)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFaxDocumentBadRequest creates a PutFaxDocumentBadRequest with default headers values
func NewPutFaxDocumentBadRequest() *PutFaxDocumentBadRequest {
	return &PutFaxDocumentBadRequest{}
}

/*PutFaxDocumentBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutFaxDocumentBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutFaxDocumentBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/fax/documents/{documentId}][%d] putFaxDocumentBadRequest  %+v", 400, o.Payload)
}

func (o *PutFaxDocumentBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFaxDocumentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFaxDocumentUnauthorized creates a PutFaxDocumentUnauthorized with default headers values
func NewPutFaxDocumentUnauthorized() *PutFaxDocumentUnauthorized {
	return &PutFaxDocumentUnauthorized{}
}

/*PutFaxDocumentUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutFaxDocumentUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutFaxDocumentUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/fax/documents/{documentId}][%d] putFaxDocumentUnauthorized  %+v", 401, o.Payload)
}

func (o *PutFaxDocumentUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFaxDocumentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFaxDocumentForbidden creates a PutFaxDocumentForbidden with default headers values
func NewPutFaxDocumentForbidden() *PutFaxDocumentForbidden {
	return &PutFaxDocumentForbidden{}
}

/*PutFaxDocumentForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutFaxDocumentForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutFaxDocumentForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/fax/documents/{documentId}][%d] putFaxDocumentForbidden  %+v", 403, o.Payload)
}

func (o *PutFaxDocumentForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFaxDocumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFaxDocumentNotFound creates a PutFaxDocumentNotFound with default headers values
func NewPutFaxDocumentNotFound() *PutFaxDocumentNotFound {
	return &PutFaxDocumentNotFound{}
}

/*PutFaxDocumentNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutFaxDocumentNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutFaxDocumentNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/fax/documents/{documentId}][%d] putFaxDocumentNotFound  %+v", 404, o.Payload)
}

func (o *PutFaxDocumentNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFaxDocumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFaxDocumentRequestTimeout creates a PutFaxDocumentRequestTimeout with default headers values
func NewPutFaxDocumentRequestTimeout() *PutFaxDocumentRequestTimeout {
	return &PutFaxDocumentRequestTimeout{}
}

/*PutFaxDocumentRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutFaxDocumentRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutFaxDocumentRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/fax/documents/{documentId}][%d] putFaxDocumentRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutFaxDocumentRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFaxDocumentRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFaxDocumentRequestEntityTooLarge creates a PutFaxDocumentRequestEntityTooLarge with default headers values
func NewPutFaxDocumentRequestEntityTooLarge() *PutFaxDocumentRequestEntityTooLarge {
	return &PutFaxDocumentRequestEntityTooLarge{}
}

/*PutFaxDocumentRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutFaxDocumentRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutFaxDocumentRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/fax/documents/{documentId}][%d] putFaxDocumentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutFaxDocumentRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFaxDocumentRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFaxDocumentUnsupportedMediaType creates a PutFaxDocumentUnsupportedMediaType with default headers values
func NewPutFaxDocumentUnsupportedMediaType() *PutFaxDocumentUnsupportedMediaType {
	return &PutFaxDocumentUnsupportedMediaType{}
}

/*PutFaxDocumentUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutFaxDocumentUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutFaxDocumentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/fax/documents/{documentId}][%d] putFaxDocumentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutFaxDocumentUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFaxDocumentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFaxDocumentTooManyRequests creates a PutFaxDocumentTooManyRequests with default headers values
func NewPutFaxDocumentTooManyRequests() *PutFaxDocumentTooManyRequests {
	return &PutFaxDocumentTooManyRequests{}
}

/*PutFaxDocumentTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutFaxDocumentTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutFaxDocumentTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/fax/documents/{documentId}][%d] putFaxDocumentTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutFaxDocumentTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFaxDocumentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFaxDocumentInternalServerError creates a PutFaxDocumentInternalServerError with default headers values
func NewPutFaxDocumentInternalServerError() *PutFaxDocumentInternalServerError {
	return &PutFaxDocumentInternalServerError{}
}

/*PutFaxDocumentInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutFaxDocumentInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutFaxDocumentInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/fax/documents/{documentId}][%d] putFaxDocumentInternalServerError  %+v", 500, o.Payload)
}

func (o *PutFaxDocumentInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFaxDocumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFaxDocumentServiceUnavailable creates a PutFaxDocumentServiceUnavailable with default headers values
func NewPutFaxDocumentServiceUnavailable() *PutFaxDocumentServiceUnavailable {
	return &PutFaxDocumentServiceUnavailable{}
}

/*PutFaxDocumentServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutFaxDocumentServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutFaxDocumentServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/fax/documents/{documentId}][%d] putFaxDocumentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutFaxDocumentServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFaxDocumentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutFaxDocumentGatewayTimeout creates a PutFaxDocumentGatewayTimeout with default headers values
func NewPutFaxDocumentGatewayTimeout() *PutFaxDocumentGatewayTimeout {
	return &PutFaxDocumentGatewayTimeout{}
}

/*PutFaxDocumentGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutFaxDocumentGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutFaxDocumentGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/fax/documents/{documentId}][%d] putFaxDocumentGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutFaxDocumentGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutFaxDocumentGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

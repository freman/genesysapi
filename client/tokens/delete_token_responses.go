// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteTokenReader is a Reader for the DeleteToken structure.
type DeleteTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteTokenNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteTokenRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteTokenRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteTokenUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteTokenTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteTokenServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteTokenGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteTokenNoContent creates a DeleteTokenNoContent with default headers values
func NewDeleteTokenNoContent() *DeleteTokenNoContent {
	return &DeleteTokenNoContent{}
}

/*
DeleteTokenNoContent describes a response with status code 204, with default header values.

Operation was successful.
*/
type DeleteTokenNoContent struct {
}

// IsSuccess returns true when this delete token no content response has a 2xx status code
func (o *DeleteTokenNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete token no content response has a 3xx status code
func (o *DeleteTokenNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token no content response has a 4xx status code
func (o *DeleteTokenNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete token no content response has a 5xx status code
func (o *DeleteTokenNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete token no content response a status code equal to that given
func (o *DeleteTokenNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeleteTokenNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenNoContent ", 204)
}

func (o *DeleteTokenNoContent) String() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenNoContent ", 204)
}

func (o *DeleteTokenNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTokenBadRequest creates a DeleteTokenBadRequest with default headers values
func NewDeleteTokenBadRequest() *DeleteTokenBadRequest {
	return &DeleteTokenBadRequest{}
}

/*
DeleteTokenBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteTokenBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete token bad request response has a 2xx status code
func (o *DeleteTokenBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete token bad request response has a 3xx status code
func (o *DeleteTokenBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token bad request response has a 4xx status code
func (o *DeleteTokenBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete token bad request response has a 5xx status code
func (o *DeleteTokenBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete token bad request response a status code equal to that given
func (o *DeleteTokenBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteTokenBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteTokenBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteTokenBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTokenUnauthorized creates a DeleteTokenUnauthorized with default headers values
func NewDeleteTokenUnauthorized() *DeleteTokenUnauthorized {
	return &DeleteTokenUnauthorized{}
}

/*
DeleteTokenUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteTokenUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete token unauthorized response has a 2xx status code
func (o *DeleteTokenUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete token unauthorized response has a 3xx status code
func (o *DeleteTokenUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token unauthorized response has a 4xx status code
func (o *DeleteTokenUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete token unauthorized response has a 5xx status code
func (o *DeleteTokenUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete token unauthorized response a status code equal to that given
func (o *DeleteTokenUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteTokenUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteTokenUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteTokenUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTokenForbidden creates a DeleteTokenForbidden with default headers values
func NewDeleteTokenForbidden() *DeleteTokenForbidden {
	return &DeleteTokenForbidden{}
}

/*
DeleteTokenForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type DeleteTokenForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete token forbidden response has a 2xx status code
func (o *DeleteTokenForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete token forbidden response has a 3xx status code
func (o *DeleteTokenForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token forbidden response has a 4xx status code
func (o *DeleteTokenForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete token forbidden response has a 5xx status code
func (o *DeleteTokenForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete token forbidden response a status code equal to that given
func (o *DeleteTokenForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteTokenForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenForbidden  %+v", 403, o.Payload)
}

func (o *DeleteTokenForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenForbidden  %+v", 403, o.Payload)
}

func (o *DeleteTokenForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTokenNotFound creates a DeleteTokenNotFound with default headers values
func NewDeleteTokenNotFound() *DeleteTokenNotFound {
	return &DeleteTokenNotFound{}
}

/*
DeleteTokenNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type DeleteTokenNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete token not found response has a 2xx status code
func (o *DeleteTokenNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete token not found response has a 3xx status code
func (o *DeleteTokenNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token not found response has a 4xx status code
func (o *DeleteTokenNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete token not found response has a 5xx status code
func (o *DeleteTokenNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete token not found response a status code equal to that given
func (o *DeleteTokenNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteTokenNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenNotFound  %+v", 404, o.Payload)
}

func (o *DeleteTokenNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenNotFound  %+v", 404, o.Payload)
}

func (o *DeleteTokenNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTokenRequestTimeout creates a DeleteTokenRequestTimeout with default headers values
func NewDeleteTokenRequestTimeout() *DeleteTokenRequestTimeout {
	return &DeleteTokenRequestTimeout{}
}

/*
DeleteTokenRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteTokenRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete token request timeout response has a 2xx status code
func (o *DeleteTokenRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete token request timeout response has a 3xx status code
func (o *DeleteTokenRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token request timeout response has a 4xx status code
func (o *DeleteTokenRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete token request timeout response has a 5xx status code
func (o *DeleteTokenRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this delete token request timeout response a status code equal to that given
func (o *DeleteTokenRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *DeleteTokenRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteTokenRequestTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteTokenRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTokenRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTokenRequestEntityTooLarge creates a DeleteTokenRequestEntityTooLarge with default headers values
func NewDeleteTokenRequestEntityTooLarge() *DeleteTokenRequestEntityTooLarge {
	return &DeleteTokenRequestEntityTooLarge{}
}

/*
DeleteTokenRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type DeleteTokenRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete token request entity too large response has a 2xx status code
func (o *DeleteTokenRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete token request entity too large response has a 3xx status code
func (o *DeleteTokenRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token request entity too large response has a 4xx status code
func (o *DeleteTokenRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete token request entity too large response has a 5xx status code
func (o *DeleteTokenRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this delete token request entity too large response a status code equal to that given
func (o *DeleteTokenRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *DeleteTokenRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteTokenRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteTokenRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTokenRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTokenUnsupportedMediaType creates a DeleteTokenUnsupportedMediaType with default headers values
func NewDeleteTokenUnsupportedMediaType() *DeleteTokenUnsupportedMediaType {
	return &DeleteTokenUnsupportedMediaType{}
}

/*
DeleteTokenUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteTokenUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete token unsupported media type response has a 2xx status code
func (o *DeleteTokenUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete token unsupported media type response has a 3xx status code
func (o *DeleteTokenUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token unsupported media type response has a 4xx status code
func (o *DeleteTokenUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete token unsupported media type response has a 5xx status code
func (o *DeleteTokenUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this delete token unsupported media type response a status code equal to that given
func (o *DeleteTokenUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *DeleteTokenUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteTokenUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteTokenUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTokenUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTokenTooManyRequests creates a DeleteTokenTooManyRequests with default headers values
func NewDeleteTokenTooManyRequests() *DeleteTokenTooManyRequests {
	return &DeleteTokenTooManyRequests{}
}

/*
DeleteTokenTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteTokenTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete token too many requests response has a 2xx status code
func (o *DeleteTokenTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete token too many requests response has a 3xx status code
func (o *DeleteTokenTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token too many requests response has a 4xx status code
func (o *DeleteTokenTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete token too many requests response has a 5xx status code
func (o *DeleteTokenTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete token too many requests response a status code equal to that given
func (o *DeleteTokenTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeleteTokenTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteTokenTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteTokenTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTokenTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTokenInternalServerError creates a DeleteTokenInternalServerError with default headers values
func NewDeleteTokenInternalServerError() *DeleteTokenInternalServerError {
	return &DeleteTokenInternalServerError{}
}

/*
DeleteTokenInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteTokenInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete token internal server error response has a 2xx status code
func (o *DeleteTokenInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete token internal server error response has a 3xx status code
func (o *DeleteTokenInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token internal server error response has a 4xx status code
func (o *DeleteTokenInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete token internal server error response has a 5xx status code
func (o *DeleteTokenInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete token internal server error response a status code equal to that given
func (o *DeleteTokenInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteTokenInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteTokenInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteTokenInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTokenServiceUnavailable creates a DeleteTokenServiceUnavailable with default headers values
func NewDeleteTokenServiceUnavailable() *DeleteTokenServiceUnavailable {
	return &DeleteTokenServiceUnavailable{}
}

/*
DeleteTokenServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteTokenServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete token service unavailable response has a 2xx status code
func (o *DeleteTokenServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete token service unavailable response has a 3xx status code
func (o *DeleteTokenServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token service unavailable response has a 4xx status code
func (o *DeleteTokenServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete token service unavailable response has a 5xx status code
func (o *DeleteTokenServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete token service unavailable response a status code equal to that given
func (o *DeleteTokenServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeleteTokenServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteTokenServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteTokenServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTokenServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTokenGatewayTimeout creates a DeleteTokenGatewayTimeout with default headers values
func NewDeleteTokenGatewayTimeout() *DeleteTokenGatewayTimeout {
	return &DeleteTokenGatewayTimeout{}
}

/*
DeleteTokenGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type DeleteTokenGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete token gateway timeout response has a 2xx status code
func (o *DeleteTokenGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete token gateway timeout response has a 3xx status code
func (o *DeleteTokenGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token gateway timeout response has a 4xx status code
func (o *DeleteTokenGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete token gateway timeout response has a 5xx status code
func (o *DeleteTokenGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this delete token gateway timeout response a status code equal to that given
func (o *DeleteTokenGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *DeleteTokenGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteTokenGatewayTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/tokens/{userId}][%d] deleteTokenGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteTokenGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTokenGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

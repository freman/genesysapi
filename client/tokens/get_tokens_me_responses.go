// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetTokensMeReader is a Reader for the GetTokensMe structure.
type GetTokensMeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTokensMeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTokensMeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTokensMeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTokensMeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTokensMeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTokensMeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetTokensMeRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetTokensMeRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetTokensMeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetTokensMeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTokensMeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetTokensMeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetTokensMeGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTokensMeOK creates a GetTokensMeOK with default headers values
func NewGetTokensMeOK() *GetTokensMeOK {
	return &GetTokensMeOK{}
}

/*GetTokensMeOK handles this case with default header values.

successful operation
*/
type GetTokensMeOK struct {
	Payload *models.TokenInfo
}

func (o *GetTokensMeOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/tokens/me][%d] getTokensMeOK  %+v", 200, o.Payload)
}

func (o *GetTokensMeOK) GetPayload() *models.TokenInfo {
	return o.Payload
}

func (o *GetTokensMeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokenInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTokensMeBadRequest creates a GetTokensMeBadRequest with default headers values
func NewGetTokensMeBadRequest() *GetTokensMeBadRequest {
	return &GetTokensMeBadRequest{}
}

/*GetTokensMeBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetTokensMeBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetTokensMeBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/tokens/me][%d] getTokensMeBadRequest  %+v", 400, o.Payload)
}

func (o *GetTokensMeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTokensMeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTokensMeUnauthorized creates a GetTokensMeUnauthorized with default headers values
func NewGetTokensMeUnauthorized() *GetTokensMeUnauthorized {
	return &GetTokensMeUnauthorized{}
}

/*GetTokensMeUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetTokensMeUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetTokensMeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/tokens/me][%d] getTokensMeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTokensMeUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTokensMeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTokensMeForbidden creates a GetTokensMeForbidden with default headers values
func NewGetTokensMeForbidden() *GetTokensMeForbidden {
	return &GetTokensMeForbidden{}
}

/*GetTokensMeForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetTokensMeForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetTokensMeForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/tokens/me][%d] getTokensMeForbidden  %+v", 403, o.Payload)
}

func (o *GetTokensMeForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTokensMeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTokensMeNotFound creates a GetTokensMeNotFound with default headers values
func NewGetTokensMeNotFound() *GetTokensMeNotFound {
	return &GetTokensMeNotFound{}
}

/*GetTokensMeNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetTokensMeNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetTokensMeNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/tokens/me][%d] getTokensMeNotFound  %+v", 404, o.Payload)
}

func (o *GetTokensMeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTokensMeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTokensMeRequestTimeout creates a GetTokensMeRequestTimeout with default headers values
func NewGetTokensMeRequestTimeout() *GetTokensMeRequestTimeout {
	return &GetTokensMeRequestTimeout{}
}

/*GetTokensMeRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetTokensMeRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetTokensMeRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/tokens/me][%d] getTokensMeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetTokensMeRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTokensMeRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTokensMeRequestEntityTooLarge creates a GetTokensMeRequestEntityTooLarge with default headers values
func NewGetTokensMeRequestEntityTooLarge() *GetTokensMeRequestEntityTooLarge {
	return &GetTokensMeRequestEntityTooLarge{}
}

/*GetTokensMeRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetTokensMeRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetTokensMeRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/tokens/me][%d] getTokensMeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetTokensMeRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTokensMeRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTokensMeUnsupportedMediaType creates a GetTokensMeUnsupportedMediaType with default headers values
func NewGetTokensMeUnsupportedMediaType() *GetTokensMeUnsupportedMediaType {
	return &GetTokensMeUnsupportedMediaType{}
}

/*GetTokensMeUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetTokensMeUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetTokensMeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/tokens/me][%d] getTokensMeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetTokensMeUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTokensMeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTokensMeTooManyRequests creates a GetTokensMeTooManyRequests with default headers values
func NewGetTokensMeTooManyRequests() *GetTokensMeTooManyRequests {
	return &GetTokensMeTooManyRequests{}
}

/*GetTokensMeTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetTokensMeTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetTokensMeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/tokens/me][%d] getTokensMeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTokensMeTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTokensMeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTokensMeInternalServerError creates a GetTokensMeInternalServerError with default headers values
func NewGetTokensMeInternalServerError() *GetTokensMeInternalServerError {
	return &GetTokensMeInternalServerError{}
}

/*GetTokensMeInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetTokensMeInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetTokensMeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/tokens/me][%d] getTokensMeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTokensMeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTokensMeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTokensMeServiceUnavailable creates a GetTokensMeServiceUnavailable with default headers values
func NewGetTokensMeServiceUnavailable() *GetTokensMeServiceUnavailable {
	return &GetTokensMeServiceUnavailable{}
}

/*GetTokensMeServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetTokensMeServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetTokensMeServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/tokens/me][%d] getTokensMeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetTokensMeServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTokensMeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTokensMeGatewayTimeout creates a GetTokensMeGatewayTimeout with default headers values
func NewGetTokensMeGatewayTimeout() *GetTokensMeGatewayTimeout {
	return &GetTokensMeGatewayTimeout{}
}

/*GetTokensMeGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetTokensMeGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetTokensMeGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/tokens/me][%d] getTokensMeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetTokensMeGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTokensMeGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

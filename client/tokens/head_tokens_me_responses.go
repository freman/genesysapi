// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// HeadTokensMeReader is a Reader for the HeadTokensMe structure.
type HeadTokensMeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HeadTokensMeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewHeadTokensMeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewHeadTokensMeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHeadTokensMeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHeadTokensMeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewHeadTokensMeRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewHeadTokensMeRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewHeadTokensMeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewHeadTokensMeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewHeadTokensMeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewHeadTokensMeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewHeadTokensMeGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewHeadTokensMeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewHeadTokensMeBadRequest creates a HeadTokensMeBadRequest with default headers values
func NewHeadTokensMeBadRequest() *HeadTokensMeBadRequest {
	return &HeadTokensMeBadRequest{}
}

/*HeadTokensMeBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type HeadTokensMeBadRequest struct {
	Payload *models.ErrorBody
}

func (o *HeadTokensMeBadRequest) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/tokens/me][%d] headTokensMeBadRequest  %+v", 400, o.Payload)
}

func (o *HeadTokensMeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadTokensMeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadTokensMeUnauthorized creates a HeadTokensMeUnauthorized with default headers values
func NewHeadTokensMeUnauthorized() *HeadTokensMeUnauthorized {
	return &HeadTokensMeUnauthorized{}
}

/*HeadTokensMeUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type HeadTokensMeUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *HeadTokensMeUnauthorized) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/tokens/me][%d] headTokensMeUnauthorized  %+v", 401, o.Payload)
}

func (o *HeadTokensMeUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadTokensMeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadTokensMeForbidden creates a HeadTokensMeForbidden with default headers values
func NewHeadTokensMeForbidden() *HeadTokensMeForbidden {
	return &HeadTokensMeForbidden{}
}

/*HeadTokensMeForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type HeadTokensMeForbidden struct {
	Payload *models.ErrorBody
}

func (o *HeadTokensMeForbidden) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/tokens/me][%d] headTokensMeForbidden  %+v", 403, o.Payload)
}

func (o *HeadTokensMeForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadTokensMeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadTokensMeNotFound creates a HeadTokensMeNotFound with default headers values
func NewHeadTokensMeNotFound() *HeadTokensMeNotFound {
	return &HeadTokensMeNotFound{}
}

/*HeadTokensMeNotFound handles this case with default header values.

The requested resource was not found.
*/
type HeadTokensMeNotFound struct {
	Payload *models.ErrorBody
}

func (o *HeadTokensMeNotFound) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/tokens/me][%d] headTokensMeNotFound  %+v", 404, o.Payload)
}

func (o *HeadTokensMeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadTokensMeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadTokensMeRequestTimeout creates a HeadTokensMeRequestTimeout with default headers values
func NewHeadTokensMeRequestTimeout() *HeadTokensMeRequestTimeout {
	return &HeadTokensMeRequestTimeout{}
}

/*HeadTokensMeRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type HeadTokensMeRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *HeadTokensMeRequestTimeout) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/tokens/me][%d] headTokensMeRequestTimeout  %+v", 408, o.Payload)
}

func (o *HeadTokensMeRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadTokensMeRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadTokensMeRequestEntityTooLarge creates a HeadTokensMeRequestEntityTooLarge with default headers values
func NewHeadTokensMeRequestEntityTooLarge() *HeadTokensMeRequestEntityTooLarge {
	return &HeadTokensMeRequestEntityTooLarge{}
}

/*HeadTokensMeRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type HeadTokensMeRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *HeadTokensMeRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/tokens/me][%d] headTokensMeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *HeadTokensMeRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadTokensMeRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadTokensMeUnsupportedMediaType creates a HeadTokensMeUnsupportedMediaType with default headers values
func NewHeadTokensMeUnsupportedMediaType() *HeadTokensMeUnsupportedMediaType {
	return &HeadTokensMeUnsupportedMediaType{}
}

/*HeadTokensMeUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type HeadTokensMeUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *HeadTokensMeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/tokens/me][%d] headTokensMeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *HeadTokensMeUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadTokensMeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadTokensMeTooManyRequests creates a HeadTokensMeTooManyRequests with default headers values
func NewHeadTokensMeTooManyRequests() *HeadTokensMeTooManyRequests {
	return &HeadTokensMeTooManyRequests{}
}

/*HeadTokensMeTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type HeadTokensMeTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *HeadTokensMeTooManyRequests) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/tokens/me][%d] headTokensMeTooManyRequests  %+v", 429, o.Payload)
}

func (o *HeadTokensMeTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadTokensMeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadTokensMeInternalServerError creates a HeadTokensMeInternalServerError with default headers values
func NewHeadTokensMeInternalServerError() *HeadTokensMeInternalServerError {
	return &HeadTokensMeInternalServerError{}
}

/*HeadTokensMeInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type HeadTokensMeInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *HeadTokensMeInternalServerError) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/tokens/me][%d] headTokensMeInternalServerError  %+v", 500, o.Payload)
}

func (o *HeadTokensMeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadTokensMeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadTokensMeServiceUnavailable creates a HeadTokensMeServiceUnavailable with default headers values
func NewHeadTokensMeServiceUnavailable() *HeadTokensMeServiceUnavailable {
	return &HeadTokensMeServiceUnavailable{}
}

/*HeadTokensMeServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type HeadTokensMeServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *HeadTokensMeServiceUnavailable) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/tokens/me][%d] headTokensMeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *HeadTokensMeServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadTokensMeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadTokensMeGatewayTimeout creates a HeadTokensMeGatewayTimeout with default headers values
func NewHeadTokensMeGatewayTimeout() *HeadTokensMeGatewayTimeout {
	return &HeadTokensMeGatewayTimeout{}
}

/*HeadTokensMeGatewayTimeout handles this case with default header values.

The request timed out.
*/
type HeadTokensMeGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *HeadTokensMeGatewayTimeout) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/tokens/me][%d] headTokensMeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *HeadTokensMeGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadTokensMeGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadTokensMeDefault creates a HeadTokensMeDefault with default headers values
func NewHeadTokensMeDefault(code int) *HeadTokensMeDefault {
	return &HeadTokensMeDefault{
		_statusCode: code,
	}
}

/*HeadTokensMeDefault handles this case with default header values.

successful operation
*/
type HeadTokensMeDefault struct {
	_statusCode int
}

// Code gets the status code for the head tokens me default response
func (o *HeadTokensMeDefault) Code() int {
	return o._statusCode
}

func (o *HeadTokensMeDefault) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/tokens/me][%d] headTokensMe default ", o._statusCode)
}

func (o *HeadTokensMeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

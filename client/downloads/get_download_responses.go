// Code generated by go-swagger; DO NOT EDIT.

package downloads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetDownloadReader is a Reader for the GetDownload structure.
type GetDownloadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDownloadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDownloadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDownloadBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDownloadUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDownloadForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDownloadNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetDownloadRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetDownloadRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetDownloadUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetDownloadTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDownloadInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetDownloadServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetDownloadGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDownloadOK creates a GetDownloadOK with default headers values
func NewGetDownloadOK() *GetDownloadOK {
	return &GetDownloadOK{}
}

/*
GetDownloadOK describes a response with status code 200, with default header values.

successful operation
*/
type GetDownloadOK struct {
	Payload *models.URLResponse
}

// IsSuccess returns true when this get download o k response has a 2xx status code
func (o *GetDownloadOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get download o k response has a 3xx status code
func (o *GetDownloadOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get download o k response has a 4xx status code
func (o *GetDownloadOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get download o k response has a 5xx status code
func (o *GetDownloadOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get download o k response a status code equal to that given
func (o *GetDownloadOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetDownloadOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadOK  %+v", 200, o.Payload)
}

func (o *GetDownloadOK) String() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadOK  %+v", 200, o.Payload)
}

func (o *GetDownloadOK) GetPayload() *models.URLResponse {
	return o.Payload
}

func (o *GetDownloadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.URLResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDownloadBadRequest creates a GetDownloadBadRequest with default headers values
func NewGetDownloadBadRequest() *GetDownloadBadRequest {
	return &GetDownloadBadRequest{}
}

/*
GetDownloadBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetDownloadBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get download bad request response has a 2xx status code
func (o *GetDownloadBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get download bad request response has a 3xx status code
func (o *GetDownloadBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get download bad request response has a 4xx status code
func (o *GetDownloadBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get download bad request response has a 5xx status code
func (o *GetDownloadBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get download bad request response a status code equal to that given
func (o *GetDownloadBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetDownloadBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadBadRequest  %+v", 400, o.Payload)
}

func (o *GetDownloadBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadBadRequest  %+v", 400, o.Payload)
}

func (o *GetDownloadBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDownloadBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDownloadUnauthorized creates a GetDownloadUnauthorized with default headers values
func NewGetDownloadUnauthorized() *GetDownloadUnauthorized {
	return &GetDownloadUnauthorized{}
}

/*
GetDownloadUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetDownloadUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get download unauthorized response has a 2xx status code
func (o *GetDownloadUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get download unauthorized response has a 3xx status code
func (o *GetDownloadUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get download unauthorized response has a 4xx status code
func (o *GetDownloadUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get download unauthorized response has a 5xx status code
func (o *GetDownloadUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get download unauthorized response a status code equal to that given
func (o *GetDownloadUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetDownloadUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDownloadUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDownloadUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDownloadUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDownloadForbidden creates a GetDownloadForbidden with default headers values
func NewGetDownloadForbidden() *GetDownloadForbidden {
	return &GetDownloadForbidden{}
}

/*
GetDownloadForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetDownloadForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get download forbidden response has a 2xx status code
func (o *GetDownloadForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get download forbidden response has a 3xx status code
func (o *GetDownloadForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get download forbidden response has a 4xx status code
func (o *GetDownloadForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get download forbidden response has a 5xx status code
func (o *GetDownloadForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get download forbidden response a status code equal to that given
func (o *GetDownloadForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetDownloadForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadForbidden  %+v", 403, o.Payload)
}

func (o *GetDownloadForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadForbidden  %+v", 403, o.Payload)
}

func (o *GetDownloadForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDownloadForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDownloadNotFound creates a GetDownloadNotFound with default headers values
func NewGetDownloadNotFound() *GetDownloadNotFound {
	return &GetDownloadNotFound{}
}

/*
GetDownloadNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetDownloadNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get download not found response has a 2xx status code
func (o *GetDownloadNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get download not found response has a 3xx status code
func (o *GetDownloadNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get download not found response has a 4xx status code
func (o *GetDownloadNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get download not found response has a 5xx status code
func (o *GetDownloadNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get download not found response a status code equal to that given
func (o *GetDownloadNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetDownloadNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadNotFound  %+v", 404, o.Payload)
}

func (o *GetDownloadNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadNotFound  %+v", 404, o.Payload)
}

func (o *GetDownloadNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDownloadNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDownloadRequestTimeout creates a GetDownloadRequestTimeout with default headers values
func NewGetDownloadRequestTimeout() *GetDownloadRequestTimeout {
	return &GetDownloadRequestTimeout{}
}

/*
GetDownloadRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetDownloadRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get download request timeout response has a 2xx status code
func (o *GetDownloadRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get download request timeout response has a 3xx status code
func (o *GetDownloadRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get download request timeout response has a 4xx status code
func (o *GetDownloadRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get download request timeout response has a 5xx status code
func (o *GetDownloadRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get download request timeout response a status code equal to that given
func (o *GetDownloadRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetDownloadRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetDownloadRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetDownloadRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDownloadRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDownloadRequestEntityTooLarge creates a GetDownloadRequestEntityTooLarge with default headers values
func NewGetDownloadRequestEntityTooLarge() *GetDownloadRequestEntityTooLarge {
	return &GetDownloadRequestEntityTooLarge{}
}

/*
GetDownloadRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetDownloadRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get download request entity too large response has a 2xx status code
func (o *GetDownloadRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get download request entity too large response has a 3xx status code
func (o *GetDownloadRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get download request entity too large response has a 4xx status code
func (o *GetDownloadRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get download request entity too large response has a 5xx status code
func (o *GetDownloadRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get download request entity too large response a status code equal to that given
func (o *GetDownloadRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetDownloadRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetDownloadRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetDownloadRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDownloadRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDownloadUnsupportedMediaType creates a GetDownloadUnsupportedMediaType with default headers values
func NewGetDownloadUnsupportedMediaType() *GetDownloadUnsupportedMediaType {
	return &GetDownloadUnsupportedMediaType{}
}

/*
GetDownloadUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetDownloadUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get download unsupported media type response has a 2xx status code
func (o *GetDownloadUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get download unsupported media type response has a 3xx status code
func (o *GetDownloadUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get download unsupported media type response has a 4xx status code
func (o *GetDownloadUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get download unsupported media type response has a 5xx status code
func (o *GetDownloadUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get download unsupported media type response a status code equal to that given
func (o *GetDownloadUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetDownloadUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetDownloadUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetDownloadUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDownloadUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDownloadTooManyRequests creates a GetDownloadTooManyRequests with default headers values
func NewGetDownloadTooManyRequests() *GetDownloadTooManyRequests {
	return &GetDownloadTooManyRequests{}
}

/*
GetDownloadTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetDownloadTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get download too many requests response has a 2xx status code
func (o *GetDownloadTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get download too many requests response has a 3xx status code
func (o *GetDownloadTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get download too many requests response has a 4xx status code
func (o *GetDownloadTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get download too many requests response has a 5xx status code
func (o *GetDownloadTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get download too many requests response a status code equal to that given
func (o *GetDownloadTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetDownloadTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetDownloadTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetDownloadTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDownloadTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDownloadInternalServerError creates a GetDownloadInternalServerError with default headers values
func NewGetDownloadInternalServerError() *GetDownloadInternalServerError {
	return &GetDownloadInternalServerError{}
}

/*
GetDownloadInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetDownloadInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get download internal server error response has a 2xx status code
func (o *GetDownloadInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get download internal server error response has a 3xx status code
func (o *GetDownloadInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get download internal server error response has a 4xx status code
func (o *GetDownloadInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get download internal server error response has a 5xx status code
func (o *GetDownloadInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get download internal server error response a status code equal to that given
func (o *GetDownloadInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetDownloadInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDownloadInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDownloadInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDownloadInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDownloadServiceUnavailable creates a GetDownloadServiceUnavailable with default headers values
func NewGetDownloadServiceUnavailable() *GetDownloadServiceUnavailable {
	return &GetDownloadServiceUnavailable{}
}

/*
GetDownloadServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetDownloadServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get download service unavailable response has a 2xx status code
func (o *GetDownloadServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get download service unavailable response has a 3xx status code
func (o *GetDownloadServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get download service unavailable response has a 4xx status code
func (o *GetDownloadServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get download service unavailable response has a 5xx status code
func (o *GetDownloadServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get download service unavailable response a status code equal to that given
func (o *GetDownloadServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetDownloadServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetDownloadServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetDownloadServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDownloadServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDownloadGatewayTimeout creates a GetDownloadGatewayTimeout with default headers values
func NewGetDownloadGatewayTimeout() *GetDownloadGatewayTimeout {
	return &GetDownloadGatewayTimeout{}
}

/*
GetDownloadGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetDownloadGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get download gateway timeout response has a 2xx status code
func (o *GetDownloadGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get download gateway timeout response has a 3xx status code
func (o *GetDownloadGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get download gateway timeout response has a 4xx status code
func (o *GetDownloadGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get download gateway timeout response has a 5xx status code
func (o *GetDownloadGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get download gateway timeout response a status code equal to that given
func (o *GetDownloadGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetDownloadGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetDownloadGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/downloads/{downloadId}][%d] getDownloadGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetDownloadGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDownloadGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

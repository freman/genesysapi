// Code generated by go-swagger; DO NOT EDIT.

package downloads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDownloadParams creates a new GetDownloadParams object
// with the default values initialized.
func NewGetDownloadParams() *GetDownloadParams {
	var (
		issueRedirectDefault  = bool(true)
		redirectToAuthDefault = bool(true)
	)
	return &GetDownloadParams{
		IssueRedirect:  &issueRedirectDefault,
		RedirectToAuth: &redirectToAuthDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDownloadParamsWithTimeout creates a new GetDownloadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDownloadParamsWithTimeout(timeout time.Duration) *GetDownloadParams {
	var (
		issueRedirectDefault  = bool(true)
		redirectToAuthDefault = bool(true)
	)
	return &GetDownloadParams{
		IssueRedirect:  &issueRedirectDefault,
		RedirectToAuth: &redirectToAuthDefault,

		timeout: timeout,
	}
}

// NewGetDownloadParamsWithContext creates a new GetDownloadParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDownloadParamsWithContext(ctx context.Context) *GetDownloadParams {
	var (
		issueRedirectDefault  = bool(true)
		redirectToAuthDefault = bool(true)
	)
	return &GetDownloadParams{
		IssueRedirect:  &issueRedirectDefault,
		RedirectToAuth: &redirectToAuthDefault,

		Context: ctx,
	}
}

// NewGetDownloadParamsWithHTTPClient creates a new GetDownloadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDownloadParamsWithHTTPClient(client *http.Client) *GetDownloadParams {
	var (
		issueRedirectDefault  = bool(true)
		redirectToAuthDefault = bool(true)
	)
	return &GetDownloadParams{
		IssueRedirect:  &issueRedirectDefault,
		RedirectToAuth: &redirectToAuthDefault,
		HTTPClient:     client,
	}
}

/*GetDownloadParams contains all the parameters to send to the API endpoint
for the get download operation typically these are written to a http.Request
*/
type GetDownloadParams struct {

	/*ContentDisposition*/
	ContentDisposition *string
	/*DownloadID
	  Download ID

	*/
	DownloadID string
	/*IssueRedirect*/
	IssueRedirect *bool
	/*RedirectToAuth*/
	RedirectToAuth *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get download params
func (o *GetDownloadParams) WithTimeout(timeout time.Duration) *GetDownloadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get download params
func (o *GetDownloadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get download params
func (o *GetDownloadParams) WithContext(ctx context.Context) *GetDownloadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get download params
func (o *GetDownloadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get download params
func (o *GetDownloadParams) WithHTTPClient(client *http.Client) *GetDownloadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get download params
func (o *GetDownloadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentDisposition adds the contentDisposition to the get download params
func (o *GetDownloadParams) WithContentDisposition(contentDisposition *string) *GetDownloadParams {
	o.SetContentDisposition(contentDisposition)
	return o
}

// SetContentDisposition adds the contentDisposition to the get download params
func (o *GetDownloadParams) SetContentDisposition(contentDisposition *string) {
	o.ContentDisposition = contentDisposition
}

// WithDownloadID adds the downloadID to the get download params
func (o *GetDownloadParams) WithDownloadID(downloadID string) *GetDownloadParams {
	o.SetDownloadID(downloadID)
	return o
}

// SetDownloadID adds the downloadId to the get download params
func (o *GetDownloadParams) SetDownloadID(downloadID string) {
	o.DownloadID = downloadID
}

// WithIssueRedirect adds the issueRedirect to the get download params
func (o *GetDownloadParams) WithIssueRedirect(issueRedirect *bool) *GetDownloadParams {
	o.SetIssueRedirect(issueRedirect)
	return o
}

// SetIssueRedirect adds the issueRedirect to the get download params
func (o *GetDownloadParams) SetIssueRedirect(issueRedirect *bool) {
	o.IssueRedirect = issueRedirect
}

// WithRedirectToAuth adds the redirectToAuth to the get download params
func (o *GetDownloadParams) WithRedirectToAuth(redirectToAuth *bool) *GetDownloadParams {
	o.SetRedirectToAuth(redirectToAuth)
	return o
}

// SetRedirectToAuth adds the redirectToAuth to the get download params
func (o *GetDownloadParams) SetRedirectToAuth(redirectToAuth *bool) {
	o.RedirectToAuth = redirectToAuth
}

// WriteToRequest writes these params to a swagger request
func (o *GetDownloadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContentDisposition != nil {

		// query param contentDisposition
		var qrContentDisposition string
		if o.ContentDisposition != nil {
			qrContentDisposition = *o.ContentDisposition
		}
		qContentDisposition := qrContentDisposition
		if qContentDisposition != "" {
			if err := r.SetQueryParam("contentDisposition", qContentDisposition); err != nil {
				return err
			}
		}

	}

	// path param downloadId
	if err := r.SetPathParam("downloadId", o.DownloadID); err != nil {
		return err
	}

	if o.IssueRedirect != nil {

		// query param issueRedirect
		var qrIssueRedirect bool
		if o.IssueRedirect != nil {
			qrIssueRedirect = *o.IssueRedirect
		}
		qIssueRedirect := swag.FormatBool(qrIssueRedirect)
		if qIssueRedirect != "" {
			if err := r.SetQueryParam("issueRedirect", qIssueRedirect); err != nil {
				return err
			}
		}

	}

	if o.RedirectToAuth != nil {

		// query param redirectToAuth
		var qrRedirectToAuth bool
		if o.RedirectToAuth != nil {
			qrRedirectToAuth = *o.RedirectToAuth
		}
		qRedirectToAuth := swag.FormatBool(qrRedirectToAuth)
		if qRedirectToAuth != "" {
			if err := r.SetQueryParam("redirectToAuth", qRedirectToAuth); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

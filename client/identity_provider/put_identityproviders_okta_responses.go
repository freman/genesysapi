// Code generated by go-swagger; DO NOT EDIT.

package identity_provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutIdentityprovidersOktaReader is a Reader for the PutIdentityprovidersOkta structure.
type PutIdentityprovidersOktaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutIdentityprovidersOktaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutIdentityprovidersOktaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutIdentityprovidersOktaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutIdentityprovidersOktaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutIdentityprovidersOktaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutIdentityprovidersOktaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutIdentityprovidersOktaRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutIdentityprovidersOktaRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutIdentityprovidersOktaUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutIdentityprovidersOktaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutIdentityprovidersOktaInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutIdentityprovidersOktaServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutIdentityprovidersOktaGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutIdentityprovidersOktaOK creates a PutIdentityprovidersOktaOK with default headers values
func NewPutIdentityprovidersOktaOK() *PutIdentityprovidersOktaOK {
	return &PutIdentityprovidersOktaOK{}
}

/*PutIdentityprovidersOktaOK handles this case with default header values.

successful operation
*/
type PutIdentityprovidersOktaOK struct {
	Payload *models.OAuthProvider
}

func (o *PutIdentityprovidersOktaOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/identityproviders/okta][%d] putIdentityprovidersOktaOK  %+v", 200, o.Payload)
}

func (o *PutIdentityprovidersOktaOK) GetPayload() *models.OAuthProvider {
	return o.Payload
}

func (o *PutIdentityprovidersOktaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OAuthProvider)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIdentityprovidersOktaBadRequest creates a PutIdentityprovidersOktaBadRequest with default headers values
func NewPutIdentityprovidersOktaBadRequest() *PutIdentityprovidersOktaBadRequest {
	return &PutIdentityprovidersOktaBadRequest{}
}

/*PutIdentityprovidersOktaBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutIdentityprovidersOktaBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutIdentityprovidersOktaBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/identityproviders/okta][%d] putIdentityprovidersOktaBadRequest  %+v", 400, o.Payload)
}

func (o *PutIdentityprovidersOktaBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutIdentityprovidersOktaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIdentityprovidersOktaUnauthorized creates a PutIdentityprovidersOktaUnauthorized with default headers values
func NewPutIdentityprovidersOktaUnauthorized() *PutIdentityprovidersOktaUnauthorized {
	return &PutIdentityprovidersOktaUnauthorized{}
}

/*PutIdentityprovidersOktaUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutIdentityprovidersOktaUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutIdentityprovidersOktaUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/identityproviders/okta][%d] putIdentityprovidersOktaUnauthorized  %+v", 401, o.Payload)
}

func (o *PutIdentityprovidersOktaUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutIdentityprovidersOktaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIdentityprovidersOktaForbidden creates a PutIdentityprovidersOktaForbidden with default headers values
func NewPutIdentityprovidersOktaForbidden() *PutIdentityprovidersOktaForbidden {
	return &PutIdentityprovidersOktaForbidden{}
}

/*PutIdentityprovidersOktaForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutIdentityprovidersOktaForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutIdentityprovidersOktaForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/identityproviders/okta][%d] putIdentityprovidersOktaForbidden  %+v", 403, o.Payload)
}

func (o *PutIdentityprovidersOktaForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutIdentityprovidersOktaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIdentityprovidersOktaNotFound creates a PutIdentityprovidersOktaNotFound with default headers values
func NewPutIdentityprovidersOktaNotFound() *PutIdentityprovidersOktaNotFound {
	return &PutIdentityprovidersOktaNotFound{}
}

/*PutIdentityprovidersOktaNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutIdentityprovidersOktaNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutIdentityprovidersOktaNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/identityproviders/okta][%d] putIdentityprovidersOktaNotFound  %+v", 404, o.Payload)
}

func (o *PutIdentityprovidersOktaNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutIdentityprovidersOktaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIdentityprovidersOktaRequestTimeout creates a PutIdentityprovidersOktaRequestTimeout with default headers values
func NewPutIdentityprovidersOktaRequestTimeout() *PutIdentityprovidersOktaRequestTimeout {
	return &PutIdentityprovidersOktaRequestTimeout{}
}

/*PutIdentityprovidersOktaRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutIdentityprovidersOktaRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutIdentityprovidersOktaRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/identityproviders/okta][%d] putIdentityprovidersOktaRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutIdentityprovidersOktaRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutIdentityprovidersOktaRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIdentityprovidersOktaRequestEntityTooLarge creates a PutIdentityprovidersOktaRequestEntityTooLarge with default headers values
func NewPutIdentityprovidersOktaRequestEntityTooLarge() *PutIdentityprovidersOktaRequestEntityTooLarge {
	return &PutIdentityprovidersOktaRequestEntityTooLarge{}
}

/*PutIdentityprovidersOktaRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PutIdentityprovidersOktaRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutIdentityprovidersOktaRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/identityproviders/okta][%d] putIdentityprovidersOktaRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutIdentityprovidersOktaRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutIdentityprovidersOktaRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIdentityprovidersOktaUnsupportedMediaType creates a PutIdentityprovidersOktaUnsupportedMediaType with default headers values
func NewPutIdentityprovidersOktaUnsupportedMediaType() *PutIdentityprovidersOktaUnsupportedMediaType {
	return &PutIdentityprovidersOktaUnsupportedMediaType{}
}

/*PutIdentityprovidersOktaUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutIdentityprovidersOktaUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutIdentityprovidersOktaUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/identityproviders/okta][%d] putIdentityprovidersOktaUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutIdentityprovidersOktaUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutIdentityprovidersOktaUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIdentityprovidersOktaTooManyRequests creates a PutIdentityprovidersOktaTooManyRequests with default headers values
func NewPutIdentityprovidersOktaTooManyRequests() *PutIdentityprovidersOktaTooManyRequests {
	return &PutIdentityprovidersOktaTooManyRequests{}
}

/*PutIdentityprovidersOktaTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutIdentityprovidersOktaTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutIdentityprovidersOktaTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/identityproviders/okta][%d] putIdentityprovidersOktaTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutIdentityprovidersOktaTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutIdentityprovidersOktaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIdentityprovidersOktaInternalServerError creates a PutIdentityprovidersOktaInternalServerError with default headers values
func NewPutIdentityprovidersOktaInternalServerError() *PutIdentityprovidersOktaInternalServerError {
	return &PutIdentityprovidersOktaInternalServerError{}
}

/*PutIdentityprovidersOktaInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutIdentityprovidersOktaInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutIdentityprovidersOktaInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/identityproviders/okta][%d] putIdentityprovidersOktaInternalServerError  %+v", 500, o.Payload)
}

func (o *PutIdentityprovidersOktaInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutIdentityprovidersOktaInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIdentityprovidersOktaServiceUnavailable creates a PutIdentityprovidersOktaServiceUnavailable with default headers values
func NewPutIdentityprovidersOktaServiceUnavailable() *PutIdentityprovidersOktaServiceUnavailable {
	return &PutIdentityprovidersOktaServiceUnavailable{}
}

/*PutIdentityprovidersOktaServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutIdentityprovidersOktaServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutIdentityprovidersOktaServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/identityproviders/okta][%d] putIdentityprovidersOktaServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutIdentityprovidersOktaServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutIdentityprovidersOktaServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIdentityprovidersOktaGatewayTimeout creates a PutIdentityprovidersOktaGatewayTimeout with default headers values
func NewPutIdentityprovidersOktaGatewayTimeout() *PutIdentityprovidersOktaGatewayTimeout {
	return &PutIdentityprovidersOktaGatewayTimeout{}
}

/*PutIdentityprovidersOktaGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutIdentityprovidersOktaGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutIdentityprovidersOktaGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/identityproviders/okta][%d] putIdentityprovidersOktaGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutIdentityprovidersOktaGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutIdentityprovidersOktaGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

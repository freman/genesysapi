// Code generated by go-swagger; DO NOT EDIT.

package identity_provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the identity provider client
type API interface {
	/*
	   DeleteIdentityprovidersAdfs deletes a d f s identity provider
	*/
	DeleteIdentityprovidersAdfs(ctx context.Context, params *DeleteIdentityprovidersAdfsParams) (*DeleteIdentityprovidersAdfsOK, error)
	/*
	   DeleteIdentityprovidersCic deletes customer interaction center c i c identity provider
	*/
	DeleteIdentityprovidersCic(ctx context.Context, params *DeleteIdentityprovidersCicParams) (*DeleteIdentityprovidersCicOK, error)
	/*
	   DeleteIdentityprovidersGeneric deletes generic s a m l identity provider
	*/
	DeleteIdentityprovidersGeneric(ctx context.Context, params *DeleteIdentityprovidersGenericParams) (*DeleteIdentityprovidersGenericOK, error)
	/*
	   DeleteIdentityprovidersGsuite deletes g suite identity provider
	*/
	DeleteIdentityprovidersGsuite(ctx context.Context, params *DeleteIdentityprovidersGsuiteParams) (*DeleteIdentityprovidersGsuiteOK, error)
	/*
	   DeleteIdentityprovidersIdentitynow deletes identity now provider
	*/
	DeleteIdentityprovidersIdentitynow(ctx context.Context, params *DeleteIdentityprovidersIdentitynowParams) (*DeleteIdentityprovidersIdentitynowOK, error)
	/*
	   DeleteIdentityprovidersOkta deletes okta identity provider
	*/
	DeleteIdentityprovidersOkta(ctx context.Context, params *DeleteIdentityprovidersOktaParams) (*DeleteIdentityprovidersOktaOK, error)
	/*
	   DeleteIdentityprovidersOnelogin deletes one login identity provider
	*/
	DeleteIdentityprovidersOnelogin(ctx context.Context, params *DeleteIdentityprovidersOneloginParams) (*DeleteIdentityprovidersOneloginOK, error)
	/*
	   DeleteIdentityprovidersPing deletes ping identity provider
	*/
	DeleteIdentityprovidersPing(ctx context.Context, params *DeleteIdentityprovidersPingParams) (*DeleteIdentityprovidersPingOK, error)
	/*
	   DeleteIdentityprovidersPurecloud deletes pure cloud identity provider
	*/
	DeleteIdentityprovidersPurecloud(ctx context.Context, params *DeleteIdentityprovidersPurecloudParams) (*DeleteIdentityprovidersPurecloudOK, error)
	/*
	   DeleteIdentityprovidersPureengage deletes pure engage identity provider
	*/
	DeleteIdentityprovidersPureengage(ctx context.Context, params *DeleteIdentityprovidersPureengageParams) (*DeleteIdentityprovidersPureengageOK, error)
	/*
	   DeleteIdentityprovidersSalesforce deletes salesforce identity provider
	*/
	DeleteIdentityprovidersSalesforce(ctx context.Context, params *DeleteIdentityprovidersSalesforceParams) (*DeleteIdentityprovidersSalesforceOK, error)
	/*
	   GetIdentityproviders thes list of identity providers
	*/
	GetIdentityproviders(ctx context.Context, params *GetIdentityprovidersParams) (*GetIdentityprovidersOK, error)
	/*
	   GetIdentityprovidersAdfs gets a d f s identity provider
	*/
	GetIdentityprovidersAdfs(ctx context.Context, params *GetIdentityprovidersAdfsParams) (*GetIdentityprovidersAdfsOK, error)
	/*
	   GetIdentityprovidersCic gets customer interaction center c i c identity provider
	*/
	GetIdentityprovidersCic(ctx context.Context, params *GetIdentityprovidersCicParams) (*GetIdentityprovidersCicOK, error)
	/*
	   GetIdentityprovidersGeneric gets generic s a m l identity provider
	*/
	GetIdentityprovidersGeneric(ctx context.Context, params *GetIdentityprovidersGenericParams) (*GetIdentityprovidersGenericOK, error)
	/*
	   GetIdentityprovidersGsuite gets g suite identity provider
	*/
	GetIdentityprovidersGsuite(ctx context.Context, params *GetIdentityprovidersGsuiteParams) (*GetIdentityprovidersGsuiteOK, error)
	/*
	   GetIdentityprovidersIdentitynow gets identity now provider
	*/
	GetIdentityprovidersIdentitynow(ctx context.Context, params *GetIdentityprovidersIdentitynowParams) (*GetIdentityprovidersIdentitynowOK, error)
	/*
	   GetIdentityprovidersOkta gets okta identity provider
	*/
	GetIdentityprovidersOkta(ctx context.Context, params *GetIdentityprovidersOktaParams) (*GetIdentityprovidersOktaOK, error)
	/*
	   GetIdentityprovidersOnelogin gets one login identity provider
	*/
	GetIdentityprovidersOnelogin(ctx context.Context, params *GetIdentityprovidersOneloginParams) (*GetIdentityprovidersOneloginOK, error)
	/*
	   GetIdentityprovidersPing gets ping identity provider
	*/
	GetIdentityprovidersPing(ctx context.Context, params *GetIdentityprovidersPingParams) (*GetIdentityprovidersPingOK, error)
	/*
	   GetIdentityprovidersPurecloud gets pure cloud identity provider
	*/
	GetIdentityprovidersPurecloud(ctx context.Context, params *GetIdentityprovidersPurecloudParams) (*GetIdentityprovidersPurecloudOK, error)
	/*
	   GetIdentityprovidersPureengage gets pure engage identity provider
	*/
	GetIdentityprovidersPureengage(ctx context.Context, params *GetIdentityprovidersPureengageParams) (*GetIdentityprovidersPureengageOK, error)
	/*
	   GetIdentityprovidersSalesforce gets salesforce identity provider
	*/
	GetIdentityprovidersSalesforce(ctx context.Context, params *GetIdentityprovidersSalesforceParams) (*GetIdentityprovidersSalesforceOK, error)
	/*
	   PutIdentityprovidersAdfs updates create a d f s identity provider
	*/
	PutIdentityprovidersAdfs(ctx context.Context, params *PutIdentityprovidersAdfsParams) (*PutIdentityprovidersAdfsOK, error)
	/*
	   PutIdentityprovidersCic updates create customer interaction center c i c identity provider
	*/
	PutIdentityprovidersCic(ctx context.Context, params *PutIdentityprovidersCicParams) (*PutIdentityprovidersCicOK, error)
	/*
	   PutIdentityprovidersGeneric updates create generic s a m l identity provider
	*/
	PutIdentityprovidersGeneric(ctx context.Context, params *PutIdentityprovidersGenericParams) (*PutIdentityprovidersGenericOK, error)
	/*
	   PutIdentityprovidersGsuite updates create g suite identity provider
	*/
	PutIdentityprovidersGsuite(ctx context.Context, params *PutIdentityprovidersGsuiteParams) (*PutIdentityprovidersGsuiteOK, error)
	/*
	   PutIdentityprovidersIdentitynow updates create identity now provider
	*/
	PutIdentityprovidersIdentitynow(ctx context.Context, params *PutIdentityprovidersIdentitynowParams) (*PutIdentityprovidersIdentitynowOK, error)
	/*
	   PutIdentityprovidersOkta updates create okta identity provider
	*/
	PutIdentityprovidersOkta(ctx context.Context, params *PutIdentityprovidersOktaParams) (*PutIdentityprovidersOktaOK, error)
	/*
	   PutIdentityprovidersOnelogin updates create one login identity provider
	*/
	PutIdentityprovidersOnelogin(ctx context.Context, params *PutIdentityprovidersOneloginParams) (*PutIdentityprovidersOneloginOK, error)
	/*
	   PutIdentityprovidersPing updates create ping identity provider
	*/
	PutIdentityprovidersPing(ctx context.Context, params *PutIdentityprovidersPingParams) (*PutIdentityprovidersPingOK, error)
	/*
	   PutIdentityprovidersPurecloud updates create pure cloud identity provider
	*/
	PutIdentityprovidersPurecloud(ctx context.Context, params *PutIdentityprovidersPurecloudParams) (*PutIdentityprovidersPurecloudOK, error)
	/*
	   PutIdentityprovidersPureengage updates create pure engage identity provider
	*/
	PutIdentityprovidersPureengage(ctx context.Context, params *PutIdentityprovidersPureengageParams) (*PutIdentityprovidersPureengageOK, error)
	/*
	   PutIdentityprovidersSalesforce updates create salesforce identity provider
	*/
	PutIdentityprovidersSalesforce(ctx context.Context, params *PutIdentityprovidersSalesforceParams) (*PutIdentityprovidersSalesforceOK, error)
}

// New creates a new identity provider API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for identity provider API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteIdentityprovidersAdfs deletes a d f s identity provider
*/
func (a *Client) DeleteIdentityprovidersAdfs(ctx context.Context, params *DeleteIdentityprovidersAdfsParams) (*DeleteIdentityprovidersAdfsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIdentityprovidersAdfs",
		Method:             "DELETE",
		PathPattern:        "/api/v2/identityproviders/adfs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIdentityprovidersAdfsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIdentityprovidersAdfsOK), nil

}

/*
DeleteIdentityprovidersCic deletes customer interaction center c i c identity provider
*/
func (a *Client) DeleteIdentityprovidersCic(ctx context.Context, params *DeleteIdentityprovidersCicParams) (*DeleteIdentityprovidersCicOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIdentityprovidersCic",
		Method:             "DELETE",
		PathPattern:        "/api/v2/identityproviders/cic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIdentityprovidersCicReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIdentityprovidersCicOK), nil

}

/*
DeleteIdentityprovidersGeneric deletes generic s a m l identity provider
*/
func (a *Client) DeleteIdentityprovidersGeneric(ctx context.Context, params *DeleteIdentityprovidersGenericParams) (*DeleteIdentityprovidersGenericOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIdentityprovidersGeneric",
		Method:             "DELETE",
		PathPattern:        "/api/v2/identityproviders/generic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIdentityprovidersGenericReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIdentityprovidersGenericOK), nil

}

/*
DeleteIdentityprovidersGsuite deletes g suite identity provider
*/
func (a *Client) DeleteIdentityprovidersGsuite(ctx context.Context, params *DeleteIdentityprovidersGsuiteParams) (*DeleteIdentityprovidersGsuiteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIdentityprovidersGsuite",
		Method:             "DELETE",
		PathPattern:        "/api/v2/identityproviders/gsuite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIdentityprovidersGsuiteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIdentityprovidersGsuiteOK), nil

}

/*
DeleteIdentityprovidersIdentitynow deletes identity now provider
*/
func (a *Client) DeleteIdentityprovidersIdentitynow(ctx context.Context, params *DeleteIdentityprovidersIdentitynowParams) (*DeleteIdentityprovidersIdentitynowOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIdentityprovidersIdentitynow",
		Method:             "DELETE",
		PathPattern:        "/api/v2/identityproviders/identitynow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIdentityprovidersIdentitynowReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIdentityprovidersIdentitynowOK), nil

}

/*
DeleteIdentityprovidersOkta deletes okta identity provider
*/
func (a *Client) DeleteIdentityprovidersOkta(ctx context.Context, params *DeleteIdentityprovidersOktaParams) (*DeleteIdentityprovidersOktaOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIdentityprovidersOkta",
		Method:             "DELETE",
		PathPattern:        "/api/v2/identityproviders/okta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIdentityprovidersOktaReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIdentityprovidersOktaOK), nil

}

/*
DeleteIdentityprovidersOnelogin deletes one login identity provider
*/
func (a *Client) DeleteIdentityprovidersOnelogin(ctx context.Context, params *DeleteIdentityprovidersOneloginParams) (*DeleteIdentityprovidersOneloginOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIdentityprovidersOnelogin",
		Method:             "DELETE",
		PathPattern:        "/api/v2/identityproviders/onelogin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIdentityprovidersOneloginReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIdentityprovidersOneloginOK), nil

}

/*
DeleteIdentityprovidersPing deletes ping identity provider
*/
func (a *Client) DeleteIdentityprovidersPing(ctx context.Context, params *DeleteIdentityprovidersPingParams) (*DeleteIdentityprovidersPingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIdentityprovidersPing",
		Method:             "DELETE",
		PathPattern:        "/api/v2/identityproviders/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIdentityprovidersPingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIdentityprovidersPingOK), nil

}

/*
DeleteIdentityprovidersPurecloud deletes pure cloud identity provider
*/
func (a *Client) DeleteIdentityprovidersPurecloud(ctx context.Context, params *DeleteIdentityprovidersPurecloudParams) (*DeleteIdentityprovidersPurecloudOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIdentityprovidersPurecloud",
		Method:             "DELETE",
		PathPattern:        "/api/v2/identityproviders/purecloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIdentityprovidersPurecloudReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIdentityprovidersPurecloudOK), nil

}

/*
DeleteIdentityprovidersPureengage deletes pure engage identity provider
*/
func (a *Client) DeleteIdentityprovidersPureengage(ctx context.Context, params *DeleteIdentityprovidersPureengageParams) (*DeleteIdentityprovidersPureengageOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIdentityprovidersPureengage",
		Method:             "DELETE",
		PathPattern:        "/api/v2/identityproviders/pureengage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIdentityprovidersPureengageReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIdentityprovidersPureengageOK), nil

}

/*
DeleteIdentityprovidersSalesforce deletes salesforce identity provider
*/
func (a *Client) DeleteIdentityprovidersSalesforce(ctx context.Context, params *DeleteIdentityprovidersSalesforceParams) (*DeleteIdentityprovidersSalesforceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIdentityprovidersSalesforce",
		Method:             "DELETE",
		PathPattern:        "/api/v2/identityproviders/salesforce",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIdentityprovidersSalesforceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIdentityprovidersSalesforceOK), nil

}

/*
GetIdentityproviders thes list of identity providers
*/
func (a *Client) GetIdentityproviders(ctx context.Context, params *GetIdentityprovidersParams) (*GetIdentityprovidersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdentityproviders",
		Method:             "GET",
		PathPattern:        "/api/v2/identityproviders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdentityprovidersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIdentityprovidersOK), nil

}

/*
GetIdentityprovidersAdfs gets a d f s identity provider
*/
func (a *Client) GetIdentityprovidersAdfs(ctx context.Context, params *GetIdentityprovidersAdfsParams) (*GetIdentityprovidersAdfsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdentityprovidersAdfs",
		Method:             "GET",
		PathPattern:        "/api/v2/identityproviders/adfs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdentityprovidersAdfsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIdentityprovidersAdfsOK), nil

}

/*
GetIdentityprovidersCic gets customer interaction center c i c identity provider
*/
func (a *Client) GetIdentityprovidersCic(ctx context.Context, params *GetIdentityprovidersCicParams) (*GetIdentityprovidersCicOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdentityprovidersCic",
		Method:             "GET",
		PathPattern:        "/api/v2/identityproviders/cic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdentityprovidersCicReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIdentityprovidersCicOK), nil

}

/*
GetIdentityprovidersGeneric gets generic s a m l identity provider
*/
func (a *Client) GetIdentityprovidersGeneric(ctx context.Context, params *GetIdentityprovidersGenericParams) (*GetIdentityprovidersGenericOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdentityprovidersGeneric",
		Method:             "GET",
		PathPattern:        "/api/v2/identityproviders/generic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdentityprovidersGenericReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIdentityprovidersGenericOK), nil

}

/*
GetIdentityprovidersGsuite gets g suite identity provider
*/
func (a *Client) GetIdentityprovidersGsuite(ctx context.Context, params *GetIdentityprovidersGsuiteParams) (*GetIdentityprovidersGsuiteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdentityprovidersGsuite",
		Method:             "GET",
		PathPattern:        "/api/v2/identityproviders/gsuite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdentityprovidersGsuiteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIdentityprovidersGsuiteOK), nil

}

/*
GetIdentityprovidersIdentitynow gets identity now provider
*/
func (a *Client) GetIdentityprovidersIdentitynow(ctx context.Context, params *GetIdentityprovidersIdentitynowParams) (*GetIdentityprovidersIdentitynowOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdentityprovidersIdentitynow",
		Method:             "GET",
		PathPattern:        "/api/v2/identityproviders/identitynow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdentityprovidersIdentitynowReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIdentityprovidersIdentitynowOK), nil

}

/*
GetIdentityprovidersOkta gets okta identity provider
*/
func (a *Client) GetIdentityprovidersOkta(ctx context.Context, params *GetIdentityprovidersOktaParams) (*GetIdentityprovidersOktaOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdentityprovidersOkta",
		Method:             "GET",
		PathPattern:        "/api/v2/identityproviders/okta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdentityprovidersOktaReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIdentityprovidersOktaOK), nil

}

/*
GetIdentityprovidersOnelogin gets one login identity provider
*/
func (a *Client) GetIdentityprovidersOnelogin(ctx context.Context, params *GetIdentityprovidersOneloginParams) (*GetIdentityprovidersOneloginOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdentityprovidersOnelogin",
		Method:             "GET",
		PathPattern:        "/api/v2/identityproviders/onelogin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdentityprovidersOneloginReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIdentityprovidersOneloginOK), nil

}

/*
GetIdentityprovidersPing gets ping identity provider
*/
func (a *Client) GetIdentityprovidersPing(ctx context.Context, params *GetIdentityprovidersPingParams) (*GetIdentityprovidersPingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdentityprovidersPing",
		Method:             "GET",
		PathPattern:        "/api/v2/identityproviders/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdentityprovidersPingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIdentityprovidersPingOK), nil

}

/*
GetIdentityprovidersPurecloud gets pure cloud identity provider
*/
func (a *Client) GetIdentityprovidersPurecloud(ctx context.Context, params *GetIdentityprovidersPurecloudParams) (*GetIdentityprovidersPurecloudOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdentityprovidersPurecloud",
		Method:             "GET",
		PathPattern:        "/api/v2/identityproviders/purecloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdentityprovidersPurecloudReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIdentityprovidersPurecloudOK), nil

}

/*
GetIdentityprovidersPureengage gets pure engage identity provider
*/
func (a *Client) GetIdentityprovidersPureengage(ctx context.Context, params *GetIdentityprovidersPureengageParams) (*GetIdentityprovidersPureengageOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdentityprovidersPureengage",
		Method:             "GET",
		PathPattern:        "/api/v2/identityproviders/pureengage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdentityprovidersPureengageReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIdentityprovidersPureengageOK), nil

}

/*
GetIdentityprovidersSalesforce gets salesforce identity provider
*/
func (a *Client) GetIdentityprovidersSalesforce(ctx context.Context, params *GetIdentityprovidersSalesforceParams) (*GetIdentityprovidersSalesforceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdentityprovidersSalesforce",
		Method:             "GET",
		PathPattern:        "/api/v2/identityproviders/salesforce",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdentityprovidersSalesforceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIdentityprovidersSalesforceOK), nil

}

/*
PutIdentityprovidersAdfs updates create a d f s identity provider
*/
func (a *Client) PutIdentityprovidersAdfs(ctx context.Context, params *PutIdentityprovidersAdfsParams) (*PutIdentityprovidersAdfsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIdentityprovidersAdfs",
		Method:             "PUT",
		PathPattern:        "/api/v2/identityproviders/adfs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIdentityprovidersAdfsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIdentityprovidersAdfsOK), nil

}

/*
PutIdentityprovidersCic updates create customer interaction center c i c identity provider
*/
func (a *Client) PutIdentityprovidersCic(ctx context.Context, params *PutIdentityprovidersCicParams) (*PutIdentityprovidersCicOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIdentityprovidersCic",
		Method:             "PUT",
		PathPattern:        "/api/v2/identityproviders/cic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIdentityprovidersCicReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIdentityprovidersCicOK), nil

}

/*
PutIdentityprovidersGeneric updates create generic s a m l identity provider
*/
func (a *Client) PutIdentityprovidersGeneric(ctx context.Context, params *PutIdentityprovidersGenericParams) (*PutIdentityprovidersGenericOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIdentityprovidersGeneric",
		Method:             "PUT",
		PathPattern:        "/api/v2/identityproviders/generic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIdentityprovidersGenericReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIdentityprovidersGenericOK), nil

}

/*
PutIdentityprovidersGsuite updates create g suite identity provider
*/
func (a *Client) PutIdentityprovidersGsuite(ctx context.Context, params *PutIdentityprovidersGsuiteParams) (*PutIdentityprovidersGsuiteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIdentityprovidersGsuite",
		Method:             "PUT",
		PathPattern:        "/api/v2/identityproviders/gsuite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIdentityprovidersGsuiteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIdentityprovidersGsuiteOK), nil

}

/*
PutIdentityprovidersIdentitynow updates create identity now provider
*/
func (a *Client) PutIdentityprovidersIdentitynow(ctx context.Context, params *PutIdentityprovidersIdentitynowParams) (*PutIdentityprovidersIdentitynowOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIdentityprovidersIdentitynow",
		Method:             "PUT",
		PathPattern:        "/api/v2/identityproviders/identitynow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIdentityprovidersIdentitynowReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIdentityprovidersIdentitynowOK), nil

}

/*
PutIdentityprovidersOkta updates create okta identity provider
*/
func (a *Client) PutIdentityprovidersOkta(ctx context.Context, params *PutIdentityprovidersOktaParams) (*PutIdentityprovidersOktaOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIdentityprovidersOkta",
		Method:             "PUT",
		PathPattern:        "/api/v2/identityproviders/okta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIdentityprovidersOktaReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIdentityprovidersOktaOK), nil

}

/*
PutIdentityprovidersOnelogin updates create one login identity provider
*/
func (a *Client) PutIdentityprovidersOnelogin(ctx context.Context, params *PutIdentityprovidersOneloginParams) (*PutIdentityprovidersOneloginOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIdentityprovidersOnelogin",
		Method:             "PUT",
		PathPattern:        "/api/v2/identityproviders/onelogin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIdentityprovidersOneloginReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIdentityprovidersOneloginOK), nil

}

/*
PutIdentityprovidersPing updates create ping identity provider
*/
func (a *Client) PutIdentityprovidersPing(ctx context.Context, params *PutIdentityprovidersPingParams) (*PutIdentityprovidersPingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIdentityprovidersPing",
		Method:             "PUT",
		PathPattern:        "/api/v2/identityproviders/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIdentityprovidersPingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIdentityprovidersPingOK), nil

}

/*
PutIdentityprovidersPurecloud updates create pure cloud identity provider
*/
func (a *Client) PutIdentityprovidersPurecloud(ctx context.Context, params *PutIdentityprovidersPurecloudParams) (*PutIdentityprovidersPurecloudOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIdentityprovidersPurecloud",
		Method:             "PUT",
		PathPattern:        "/api/v2/identityproviders/purecloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIdentityprovidersPurecloudReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIdentityprovidersPurecloudOK), nil

}

/*
PutIdentityprovidersPureengage updates create pure engage identity provider
*/
func (a *Client) PutIdentityprovidersPureengage(ctx context.Context, params *PutIdentityprovidersPureengageParams) (*PutIdentityprovidersPureengageOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIdentityprovidersPureengage",
		Method:             "PUT",
		PathPattern:        "/api/v2/identityproviders/pureengage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIdentityprovidersPureengageReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIdentityprovidersPureengageOK), nil

}

/*
PutIdentityprovidersSalesforce updates create salesforce identity provider
*/
func (a *Client) PutIdentityprovidersSalesforce(ctx context.Context, params *PutIdentityprovidersSalesforceParams) (*PutIdentityprovidersSalesforceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIdentityprovidersSalesforce",
		Method:             "PUT",
		PathPattern:        "/api/v2/identityproviders/salesforce",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIdentityprovidersSalesforceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIdentityprovidersSalesforceOK), nil

}

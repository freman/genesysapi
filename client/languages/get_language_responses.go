// Code generated by go-swagger; DO NOT EDIT.

package languages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetLanguageReader is a Reader for the GetLanguage structure.
type GetLanguageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLanguageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLanguageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLanguageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLanguageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLanguageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLanguageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetLanguageRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetLanguageRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetLanguageUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetLanguageTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLanguageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetLanguageServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetLanguageGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLanguageOK creates a GetLanguageOK with default headers values
func NewGetLanguageOK() *GetLanguageOK {
	return &GetLanguageOK{}
}

/*
GetLanguageOK describes a response with status code 200, with default header values.

successful operation
*/
type GetLanguageOK struct {
	Payload *models.Language
}

// IsSuccess returns true when this get language o k response has a 2xx status code
func (o *GetLanguageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get language o k response has a 3xx status code
func (o *GetLanguageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get language o k response has a 4xx status code
func (o *GetLanguageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get language o k response has a 5xx status code
func (o *GetLanguageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get language o k response a status code equal to that given
func (o *GetLanguageOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetLanguageOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageOK  %+v", 200, o.Payload)
}

func (o *GetLanguageOK) String() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageOK  %+v", 200, o.Payload)
}

func (o *GetLanguageOK) GetPayload() *models.Language {
	return o.Payload
}

func (o *GetLanguageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Language)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageBadRequest creates a GetLanguageBadRequest with default headers values
func NewGetLanguageBadRequest() *GetLanguageBadRequest {
	return &GetLanguageBadRequest{}
}

/*
GetLanguageBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetLanguageBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get language bad request response has a 2xx status code
func (o *GetLanguageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get language bad request response has a 3xx status code
func (o *GetLanguageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get language bad request response has a 4xx status code
func (o *GetLanguageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get language bad request response has a 5xx status code
func (o *GetLanguageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get language bad request response a status code equal to that given
func (o *GetLanguageBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetLanguageBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageBadRequest  %+v", 400, o.Payload)
}

func (o *GetLanguageBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageBadRequest  %+v", 400, o.Payload)
}

func (o *GetLanguageBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageUnauthorized creates a GetLanguageUnauthorized with default headers values
func NewGetLanguageUnauthorized() *GetLanguageUnauthorized {
	return &GetLanguageUnauthorized{}
}

/*
GetLanguageUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetLanguageUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get language unauthorized response has a 2xx status code
func (o *GetLanguageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get language unauthorized response has a 3xx status code
func (o *GetLanguageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get language unauthorized response has a 4xx status code
func (o *GetLanguageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get language unauthorized response has a 5xx status code
func (o *GetLanguageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get language unauthorized response a status code equal to that given
func (o *GetLanguageUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetLanguageUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLanguageUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLanguageUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageForbidden creates a GetLanguageForbidden with default headers values
func NewGetLanguageForbidden() *GetLanguageForbidden {
	return &GetLanguageForbidden{}
}

/*
GetLanguageForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetLanguageForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get language forbidden response has a 2xx status code
func (o *GetLanguageForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get language forbidden response has a 3xx status code
func (o *GetLanguageForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get language forbidden response has a 4xx status code
func (o *GetLanguageForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get language forbidden response has a 5xx status code
func (o *GetLanguageForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get language forbidden response a status code equal to that given
func (o *GetLanguageForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetLanguageForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageForbidden  %+v", 403, o.Payload)
}

func (o *GetLanguageForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageForbidden  %+v", 403, o.Payload)
}

func (o *GetLanguageForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageNotFound creates a GetLanguageNotFound with default headers values
func NewGetLanguageNotFound() *GetLanguageNotFound {
	return &GetLanguageNotFound{}
}

/*
GetLanguageNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetLanguageNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get language not found response has a 2xx status code
func (o *GetLanguageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get language not found response has a 3xx status code
func (o *GetLanguageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get language not found response has a 4xx status code
func (o *GetLanguageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get language not found response has a 5xx status code
func (o *GetLanguageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get language not found response a status code equal to that given
func (o *GetLanguageNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetLanguageNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageNotFound  %+v", 404, o.Payload)
}

func (o *GetLanguageNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageNotFound  %+v", 404, o.Payload)
}

func (o *GetLanguageNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageRequestTimeout creates a GetLanguageRequestTimeout with default headers values
func NewGetLanguageRequestTimeout() *GetLanguageRequestTimeout {
	return &GetLanguageRequestTimeout{}
}

/*
GetLanguageRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetLanguageRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get language request timeout response has a 2xx status code
func (o *GetLanguageRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get language request timeout response has a 3xx status code
func (o *GetLanguageRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get language request timeout response has a 4xx status code
func (o *GetLanguageRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get language request timeout response has a 5xx status code
func (o *GetLanguageRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get language request timeout response a status code equal to that given
func (o *GetLanguageRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetLanguageRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetLanguageRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetLanguageRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageRequestEntityTooLarge creates a GetLanguageRequestEntityTooLarge with default headers values
func NewGetLanguageRequestEntityTooLarge() *GetLanguageRequestEntityTooLarge {
	return &GetLanguageRequestEntityTooLarge{}
}

/*
GetLanguageRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetLanguageRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get language request entity too large response has a 2xx status code
func (o *GetLanguageRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get language request entity too large response has a 3xx status code
func (o *GetLanguageRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get language request entity too large response has a 4xx status code
func (o *GetLanguageRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get language request entity too large response has a 5xx status code
func (o *GetLanguageRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get language request entity too large response a status code equal to that given
func (o *GetLanguageRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetLanguageRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetLanguageRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetLanguageRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageUnsupportedMediaType creates a GetLanguageUnsupportedMediaType with default headers values
func NewGetLanguageUnsupportedMediaType() *GetLanguageUnsupportedMediaType {
	return &GetLanguageUnsupportedMediaType{}
}

/*
GetLanguageUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetLanguageUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get language unsupported media type response has a 2xx status code
func (o *GetLanguageUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get language unsupported media type response has a 3xx status code
func (o *GetLanguageUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get language unsupported media type response has a 4xx status code
func (o *GetLanguageUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get language unsupported media type response has a 5xx status code
func (o *GetLanguageUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get language unsupported media type response a status code equal to that given
func (o *GetLanguageUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetLanguageUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetLanguageUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetLanguageUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageTooManyRequests creates a GetLanguageTooManyRequests with default headers values
func NewGetLanguageTooManyRequests() *GetLanguageTooManyRequests {
	return &GetLanguageTooManyRequests{}
}

/*
GetLanguageTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetLanguageTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get language too many requests response has a 2xx status code
func (o *GetLanguageTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get language too many requests response has a 3xx status code
func (o *GetLanguageTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get language too many requests response has a 4xx status code
func (o *GetLanguageTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get language too many requests response has a 5xx status code
func (o *GetLanguageTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get language too many requests response a status code equal to that given
func (o *GetLanguageTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetLanguageTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetLanguageTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetLanguageTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageInternalServerError creates a GetLanguageInternalServerError with default headers values
func NewGetLanguageInternalServerError() *GetLanguageInternalServerError {
	return &GetLanguageInternalServerError{}
}

/*
GetLanguageInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetLanguageInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get language internal server error response has a 2xx status code
func (o *GetLanguageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get language internal server error response has a 3xx status code
func (o *GetLanguageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get language internal server error response has a 4xx status code
func (o *GetLanguageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get language internal server error response has a 5xx status code
func (o *GetLanguageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get language internal server error response a status code equal to that given
func (o *GetLanguageInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetLanguageInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLanguageInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLanguageInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageServiceUnavailable creates a GetLanguageServiceUnavailable with default headers values
func NewGetLanguageServiceUnavailable() *GetLanguageServiceUnavailable {
	return &GetLanguageServiceUnavailable{}
}

/*
GetLanguageServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetLanguageServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get language service unavailable response has a 2xx status code
func (o *GetLanguageServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get language service unavailable response has a 3xx status code
func (o *GetLanguageServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get language service unavailable response has a 4xx status code
func (o *GetLanguageServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get language service unavailable response has a 5xx status code
func (o *GetLanguageServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get language service unavailable response a status code equal to that given
func (o *GetLanguageServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetLanguageServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetLanguageServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetLanguageServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageGatewayTimeout creates a GetLanguageGatewayTimeout with default headers values
func NewGetLanguageGatewayTimeout() *GetLanguageGatewayTimeout {
	return &GetLanguageGatewayTimeout{}
}

/*
GetLanguageGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetLanguageGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get language gateway timeout response has a 2xx status code
func (o *GetLanguageGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get language gateway timeout response has a 3xx status code
func (o *GetLanguageGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get language gateway timeout response has a 4xx status code
func (o *GetLanguageGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get language gateway timeout response has a 5xx status code
func (o *GetLanguageGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get language gateway timeout response a status code equal to that given
func (o *GetLanguageGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetLanguageGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetLanguageGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/languages/{languageId}][%d] getLanguageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetLanguageGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

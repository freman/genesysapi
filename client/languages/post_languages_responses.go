// Code generated by go-swagger; DO NOT EDIT.

package languages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostLanguagesReader is a Reader for the PostLanguages structure.
type PostLanguagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLanguagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostLanguagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostLanguagesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostLanguagesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostLanguagesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostLanguagesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostLanguagesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostLanguagesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostLanguagesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostLanguagesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostLanguagesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostLanguagesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostLanguagesOK creates a PostLanguagesOK with default headers values
func NewPostLanguagesOK() *PostLanguagesOK {
	return &PostLanguagesOK{}
}

/*PostLanguagesOK handles this case with default header values.

successful operation
*/
type PostLanguagesOK struct {
	Payload *models.Language
}

func (o *PostLanguagesOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/languages][%d] postLanguagesOK  %+v", 200, o.Payload)
}

func (o *PostLanguagesOK) GetPayload() *models.Language {
	return o.Payload
}

func (o *PostLanguagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Language)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguagesBadRequest creates a PostLanguagesBadRequest with default headers values
func NewPostLanguagesBadRequest() *PostLanguagesBadRequest {
	return &PostLanguagesBadRequest{}
}

/*PostLanguagesBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostLanguagesBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostLanguagesBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/languages][%d] postLanguagesBadRequest  %+v", 400, o.Payload)
}

func (o *PostLanguagesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguagesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguagesUnauthorized creates a PostLanguagesUnauthorized with default headers values
func NewPostLanguagesUnauthorized() *PostLanguagesUnauthorized {
	return &PostLanguagesUnauthorized{}
}

/*PostLanguagesUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostLanguagesUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostLanguagesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/languages][%d] postLanguagesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostLanguagesUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguagesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguagesForbidden creates a PostLanguagesForbidden with default headers values
func NewPostLanguagesForbidden() *PostLanguagesForbidden {
	return &PostLanguagesForbidden{}
}

/*PostLanguagesForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostLanguagesForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostLanguagesForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/languages][%d] postLanguagesForbidden  %+v", 403, o.Payload)
}

func (o *PostLanguagesForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguagesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguagesNotFound creates a PostLanguagesNotFound with default headers values
func NewPostLanguagesNotFound() *PostLanguagesNotFound {
	return &PostLanguagesNotFound{}
}

/*PostLanguagesNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostLanguagesNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostLanguagesNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/languages][%d] postLanguagesNotFound  %+v", 404, o.Payload)
}

func (o *PostLanguagesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguagesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguagesRequestEntityTooLarge creates a PostLanguagesRequestEntityTooLarge with default headers values
func NewPostLanguagesRequestEntityTooLarge() *PostLanguagesRequestEntityTooLarge {
	return &PostLanguagesRequestEntityTooLarge{}
}

/*PostLanguagesRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PostLanguagesRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostLanguagesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/languages][%d] postLanguagesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostLanguagesRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguagesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguagesUnsupportedMediaType creates a PostLanguagesUnsupportedMediaType with default headers values
func NewPostLanguagesUnsupportedMediaType() *PostLanguagesUnsupportedMediaType {
	return &PostLanguagesUnsupportedMediaType{}
}

/*PostLanguagesUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostLanguagesUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostLanguagesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/languages][%d] postLanguagesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostLanguagesUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguagesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguagesTooManyRequests creates a PostLanguagesTooManyRequests with default headers values
func NewPostLanguagesTooManyRequests() *PostLanguagesTooManyRequests {
	return &PostLanguagesTooManyRequests{}
}

/*PostLanguagesTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PostLanguagesTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostLanguagesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/languages][%d] postLanguagesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostLanguagesTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguagesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguagesInternalServerError creates a PostLanguagesInternalServerError with default headers values
func NewPostLanguagesInternalServerError() *PostLanguagesInternalServerError {
	return &PostLanguagesInternalServerError{}
}

/*PostLanguagesInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostLanguagesInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostLanguagesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/languages][%d] postLanguagesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostLanguagesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguagesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguagesServiceUnavailable creates a PostLanguagesServiceUnavailable with default headers values
func NewPostLanguagesServiceUnavailable() *PostLanguagesServiceUnavailable {
	return &PostLanguagesServiceUnavailable{}
}

/*PostLanguagesServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostLanguagesServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostLanguagesServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/languages][%d] postLanguagesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostLanguagesServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguagesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguagesGatewayTimeout creates a PostLanguagesGatewayTimeout with default headers values
func NewPostLanguagesGatewayTimeout() *PostLanguagesGatewayTimeout {
	return &PostLanguagesGatewayTimeout{}
}

/*PostLanguagesGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostLanguagesGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostLanguagesGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/languages][%d] postLanguagesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostLanguagesGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguagesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package languages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRoutingLanguageReader is a Reader for the GetRoutingLanguage structure.
type GetRoutingLanguageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoutingLanguageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoutingLanguageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRoutingLanguageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRoutingLanguageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRoutingLanguageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRoutingLanguageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRoutingLanguageRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRoutingLanguageUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRoutingLanguageTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRoutingLanguageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRoutingLanguageServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRoutingLanguageGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRoutingLanguageOK creates a GetRoutingLanguageOK with default headers values
func NewGetRoutingLanguageOK() *GetRoutingLanguageOK {
	return &GetRoutingLanguageOK{}
}

/*GetRoutingLanguageOK handles this case with default header values.

successful operation
*/
type GetRoutingLanguageOK struct {
	Payload *models.Language
}

func (o *GetRoutingLanguageOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageOK  %+v", 200, o.Payload)
}

func (o *GetRoutingLanguageOK) GetPayload() *models.Language {
	return o.Payload
}

func (o *GetRoutingLanguageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Language)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageBadRequest creates a GetRoutingLanguageBadRequest with default headers values
func NewGetRoutingLanguageBadRequest() *GetRoutingLanguageBadRequest {
	return &GetRoutingLanguageBadRequest{}
}

/*GetRoutingLanguageBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRoutingLanguageBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingLanguageBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingLanguageBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageUnauthorized creates a GetRoutingLanguageUnauthorized with default headers values
func NewGetRoutingLanguageUnauthorized() *GetRoutingLanguageUnauthorized {
	return &GetRoutingLanguageUnauthorized{}
}

/*GetRoutingLanguageUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRoutingLanguageUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingLanguageUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingLanguageUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageForbidden creates a GetRoutingLanguageForbidden with default headers values
func NewGetRoutingLanguageForbidden() *GetRoutingLanguageForbidden {
	return &GetRoutingLanguageForbidden{}
}

/*GetRoutingLanguageForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetRoutingLanguageForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingLanguageForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingLanguageForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageNotFound creates a GetRoutingLanguageNotFound with default headers values
func NewGetRoutingLanguageNotFound() *GetRoutingLanguageNotFound {
	return &GetRoutingLanguageNotFound{}
}

/*GetRoutingLanguageNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetRoutingLanguageNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingLanguageNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingLanguageNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageRequestEntityTooLarge creates a GetRoutingLanguageRequestEntityTooLarge with default headers values
func NewGetRoutingLanguageRequestEntityTooLarge() *GetRoutingLanguageRequestEntityTooLarge {
	return &GetRoutingLanguageRequestEntityTooLarge{}
}

/*GetRoutingLanguageRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetRoutingLanguageRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingLanguageRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingLanguageRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageUnsupportedMediaType creates a GetRoutingLanguageUnsupportedMediaType with default headers values
func NewGetRoutingLanguageUnsupportedMediaType() *GetRoutingLanguageUnsupportedMediaType {
	return &GetRoutingLanguageUnsupportedMediaType{}
}

/*GetRoutingLanguageUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRoutingLanguageUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingLanguageUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingLanguageUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageTooManyRequests creates a GetRoutingLanguageTooManyRequests with default headers values
func NewGetRoutingLanguageTooManyRequests() *GetRoutingLanguageTooManyRequests {
	return &GetRoutingLanguageTooManyRequests{}
}

/*GetRoutingLanguageTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type GetRoutingLanguageTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingLanguageTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingLanguageTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageInternalServerError creates a GetRoutingLanguageInternalServerError with default headers values
func NewGetRoutingLanguageInternalServerError() *GetRoutingLanguageInternalServerError {
	return &GetRoutingLanguageInternalServerError{}
}

/*GetRoutingLanguageInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRoutingLanguageInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingLanguageInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingLanguageInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageServiceUnavailable creates a GetRoutingLanguageServiceUnavailable with default headers values
func NewGetRoutingLanguageServiceUnavailable() *GetRoutingLanguageServiceUnavailable {
	return &GetRoutingLanguageServiceUnavailable{}
}

/*GetRoutingLanguageServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRoutingLanguageServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingLanguageServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingLanguageServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageGatewayTimeout creates a GetRoutingLanguageGatewayTimeout with default headers values
func NewGetRoutingLanguageGatewayTimeout() *GetRoutingLanguageGatewayTimeout {
	return &GetRoutingLanguageGatewayTimeout{}
}

/*GetRoutingLanguageGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetRoutingLanguageGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingLanguageGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingLanguageGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

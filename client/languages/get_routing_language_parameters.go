// Code generated by go-swagger; DO NOT EDIT.

package languages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRoutingLanguageParams creates a new GetRoutingLanguageParams object
// with the default values initialized.
func NewGetRoutingLanguageParams() *GetRoutingLanguageParams {
	var ()
	return &GetRoutingLanguageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRoutingLanguageParamsWithTimeout creates a new GetRoutingLanguageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRoutingLanguageParamsWithTimeout(timeout time.Duration) *GetRoutingLanguageParams {
	var ()
	return &GetRoutingLanguageParams{

		timeout: timeout,
	}
}

// NewGetRoutingLanguageParamsWithContext creates a new GetRoutingLanguageParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRoutingLanguageParamsWithContext(ctx context.Context) *GetRoutingLanguageParams {
	var ()
	return &GetRoutingLanguageParams{

		Context: ctx,
	}
}

// NewGetRoutingLanguageParamsWithHTTPClient creates a new GetRoutingLanguageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRoutingLanguageParamsWithHTTPClient(client *http.Client) *GetRoutingLanguageParams {
	var ()
	return &GetRoutingLanguageParams{
		HTTPClient: client,
	}
}

/*GetRoutingLanguageParams contains all the parameters to send to the API endpoint
for the get routing language operation typically these are written to a http.Request
*/
type GetRoutingLanguageParams struct {

	/*LanguageID
	  Language ID

	*/
	LanguageID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get routing language params
func (o *GetRoutingLanguageParams) WithTimeout(timeout time.Duration) *GetRoutingLanguageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get routing language params
func (o *GetRoutingLanguageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get routing language params
func (o *GetRoutingLanguageParams) WithContext(ctx context.Context) *GetRoutingLanguageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get routing language params
func (o *GetRoutingLanguageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get routing language params
func (o *GetRoutingLanguageParams) WithHTTPClient(client *http.Client) *GetRoutingLanguageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get routing language params
func (o *GetRoutingLanguageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLanguageID adds the languageID to the get routing language params
func (o *GetRoutingLanguageParams) WithLanguageID(languageID string) *GetRoutingLanguageParams {
	o.SetLanguageID(languageID)
	return o
}

// SetLanguageID adds the languageId to the get routing language params
func (o *GetRoutingLanguageParams) SetLanguageID(languageID string) {
	o.LanguageID = languageID
}

// WriteToRequest writes these params to a swagger request
func (o *GetRoutingLanguageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param languageId
	if err := r.SetPathParam("languageId", o.LanguageID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

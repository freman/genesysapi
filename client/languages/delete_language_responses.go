// Code generated by go-swagger; DO NOT EDIT.

package languages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteLanguageReader is a Reader for the DeleteLanguage structure.
type DeleteLanguageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteLanguageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewDeleteLanguageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteLanguageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteLanguageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteLanguageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteLanguageRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteLanguageRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteLanguageUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteLanguageTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteLanguageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteLanguageServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteLanguageGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteLanguageDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteLanguageBadRequest creates a DeleteLanguageBadRequest with default headers values
func NewDeleteLanguageBadRequest() *DeleteLanguageBadRequest {
	return &DeleteLanguageBadRequest{}
}

/*
DeleteLanguageBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteLanguageBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete language bad request response has a 2xx status code
func (o *DeleteLanguageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete language bad request response has a 3xx status code
func (o *DeleteLanguageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete language bad request response has a 4xx status code
func (o *DeleteLanguageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete language bad request response has a 5xx status code
func (o *DeleteLanguageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete language bad request response a status code equal to that given
func (o *DeleteLanguageBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteLanguageBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLanguageBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLanguageBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteLanguageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLanguageUnauthorized creates a DeleteLanguageUnauthorized with default headers values
func NewDeleteLanguageUnauthorized() *DeleteLanguageUnauthorized {
	return &DeleteLanguageUnauthorized{}
}

/*
DeleteLanguageUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteLanguageUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete language unauthorized response has a 2xx status code
func (o *DeleteLanguageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete language unauthorized response has a 3xx status code
func (o *DeleteLanguageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete language unauthorized response has a 4xx status code
func (o *DeleteLanguageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete language unauthorized response has a 5xx status code
func (o *DeleteLanguageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete language unauthorized response a status code equal to that given
func (o *DeleteLanguageUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteLanguageUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteLanguageUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteLanguageUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteLanguageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLanguageForbidden creates a DeleteLanguageForbidden with default headers values
func NewDeleteLanguageForbidden() *DeleteLanguageForbidden {
	return &DeleteLanguageForbidden{}
}

/*
DeleteLanguageForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type DeleteLanguageForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete language forbidden response has a 2xx status code
func (o *DeleteLanguageForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete language forbidden response has a 3xx status code
func (o *DeleteLanguageForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete language forbidden response has a 4xx status code
func (o *DeleteLanguageForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete language forbidden response has a 5xx status code
func (o *DeleteLanguageForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete language forbidden response a status code equal to that given
func (o *DeleteLanguageForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteLanguageForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageForbidden  %+v", 403, o.Payload)
}

func (o *DeleteLanguageForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageForbidden  %+v", 403, o.Payload)
}

func (o *DeleteLanguageForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteLanguageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLanguageNotFound creates a DeleteLanguageNotFound with default headers values
func NewDeleteLanguageNotFound() *DeleteLanguageNotFound {
	return &DeleteLanguageNotFound{}
}

/*
DeleteLanguageNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type DeleteLanguageNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete language not found response has a 2xx status code
func (o *DeleteLanguageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete language not found response has a 3xx status code
func (o *DeleteLanguageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete language not found response has a 4xx status code
func (o *DeleteLanguageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete language not found response has a 5xx status code
func (o *DeleteLanguageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete language not found response a status code equal to that given
func (o *DeleteLanguageNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteLanguageNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLanguageNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLanguageNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteLanguageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLanguageRequestTimeout creates a DeleteLanguageRequestTimeout with default headers values
func NewDeleteLanguageRequestTimeout() *DeleteLanguageRequestTimeout {
	return &DeleteLanguageRequestTimeout{}
}

/*
DeleteLanguageRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteLanguageRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete language request timeout response has a 2xx status code
func (o *DeleteLanguageRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete language request timeout response has a 3xx status code
func (o *DeleteLanguageRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete language request timeout response has a 4xx status code
func (o *DeleteLanguageRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete language request timeout response has a 5xx status code
func (o *DeleteLanguageRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this delete language request timeout response a status code equal to that given
func (o *DeleteLanguageRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *DeleteLanguageRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteLanguageRequestTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteLanguageRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteLanguageRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLanguageRequestEntityTooLarge creates a DeleteLanguageRequestEntityTooLarge with default headers values
func NewDeleteLanguageRequestEntityTooLarge() *DeleteLanguageRequestEntityTooLarge {
	return &DeleteLanguageRequestEntityTooLarge{}
}

/*
DeleteLanguageRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type DeleteLanguageRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete language request entity too large response has a 2xx status code
func (o *DeleteLanguageRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete language request entity too large response has a 3xx status code
func (o *DeleteLanguageRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete language request entity too large response has a 4xx status code
func (o *DeleteLanguageRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete language request entity too large response has a 5xx status code
func (o *DeleteLanguageRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this delete language request entity too large response a status code equal to that given
func (o *DeleteLanguageRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *DeleteLanguageRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteLanguageRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteLanguageRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteLanguageRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLanguageUnsupportedMediaType creates a DeleteLanguageUnsupportedMediaType with default headers values
func NewDeleteLanguageUnsupportedMediaType() *DeleteLanguageUnsupportedMediaType {
	return &DeleteLanguageUnsupportedMediaType{}
}

/*
DeleteLanguageUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteLanguageUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete language unsupported media type response has a 2xx status code
func (o *DeleteLanguageUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete language unsupported media type response has a 3xx status code
func (o *DeleteLanguageUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete language unsupported media type response has a 4xx status code
func (o *DeleteLanguageUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete language unsupported media type response has a 5xx status code
func (o *DeleteLanguageUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this delete language unsupported media type response a status code equal to that given
func (o *DeleteLanguageUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *DeleteLanguageUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteLanguageUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteLanguageUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteLanguageUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLanguageTooManyRequests creates a DeleteLanguageTooManyRequests with default headers values
func NewDeleteLanguageTooManyRequests() *DeleteLanguageTooManyRequests {
	return &DeleteLanguageTooManyRequests{}
}

/*
DeleteLanguageTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteLanguageTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete language too many requests response has a 2xx status code
func (o *DeleteLanguageTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete language too many requests response has a 3xx status code
func (o *DeleteLanguageTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete language too many requests response has a 4xx status code
func (o *DeleteLanguageTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete language too many requests response has a 5xx status code
func (o *DeleteLanguageTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete language too many requests response a status code equal to that given
func (o *DeleteLanguageTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeleteLanguageTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteLanguageTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteLanguageTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteLanguageTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLanguageInternalServerError creates a DeleteLanguageInternalServerError with default headers values
func NewDeleteLanguageInternalServerError() *DeleteLanguageInternalServerError {
	return &DeleteLanguageInternalServerError{}
}

/*
DeleteLanguageInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteLanguageInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete language internal server error response has a 2xx status code
func (o *DeleteLanguageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete language internal server error response has a 3xx status code
func (o *DeleteLanguageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete language internal server error response has a 4xx status code
func (o *DeleteLanguageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete language internal server error response has a 5xx status code
func (o *DeleteLanguageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete language internal server error response a status code equal to that given
func (o *DeleteLanguageInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteLanguageInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteLanguageInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteLanguageInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteLanguageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLanguageServiceUnavailable creates a DeleteLanguageServiceUnavailable with default headers values
func NewDeleteLanguageServiceUnavailable() *DeleteLanguageServiceUnavailable {
	return &DeleteLanguageServiceUnavailable{}
}

/*
DeleteLanguageServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteLanguageServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete language service unavailable response has a 2xx status code
func (o *DeleteLanguageServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete language service unavailable response has a 3xx status code
func (o *DeleteLanguageServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete language service unavailable response has a 4xx status code
func (o *DeleteLanguageServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete language service unavailable response has a 5xx status code
func (o *DeleteLanguageServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete language service unavailable response a status code equal to that given
func (o *DeleteLanguageServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeleteLanguageServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteLanguageServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteLanguageServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteLanguageServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLanguageGatewayTimeout creates a DeleteLanguageGatewayTimeout with default headers values
func NewDeleteLanguageGatewayTimeout() *DeleteLanguageGatewayTimeout {
	return &DeleteLanguageGatewayTimeout{}
}

/*
DeleteLanguageGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type DeleteLanguageGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete language gateway timeout response has a 2xx status code
func (o *DeleteLanguageGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete language gateway timeout response has a 3xx status code
func (o *DeleteLanguageGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete language gateway timeout response has a 4xx status code
func (o *DeleteLanguageGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete language gateway timeout response has a 5xx status code
func (o *DeleteLanguageGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this delete language gateway timeout response a status code equal to that given
func (o *DeleteLanguageGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *DeleteLanguageGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteLanguageGatewayTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteLanguageGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteLanguageGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLanguageDefault creates a DeleteLanguageDefault with default headers values
func NewDeleteLanguageDefault(code int) *DeleteLanguageDefault {
	return &DeleteLanguageDefault{
		_statusCode: code,
	}
}

/*
DeleteLanguageDefault describes a response with status code -1, with default header values.

successful operation
*/
type DeleteLanguageDefault struct {
	_statusCode int
}

// Code gets the status code for the delete language default response
func (o *DeleteLanguageDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this delete language default response has a 2xx status code
func (o *DeleteLanguageDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete language default response has a 3xx status code
func (o *DeleteLanguageDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete language default response has a 4xx status code
func (o *DeleteLanguageDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete language default response has a 5xx status code
func (o *DeleteLanguageDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete language default response a status code equal to that given
func (o *DeleteLanguageDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *DeleteLanguageDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguage default ", o._statusCode)
}

func (o *DeleteLanguageDefault) String() string {
	return fmt.Sprintf("[DELETE /api/v2/languages/{languageId}][%d] deleteLanguage default ", o._statusCode)
}

func (o *DeleteLanguageDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package content_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetContentmanagementSharedSharedIDReader is a Reader for the GetContentmanagementSharedSharedID structure.
type GetContentmanagementSharedSharedIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetContentmanagementSharedSharedIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetContentmanagementSharedSharedIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewGetContentmanagementSharedSharedIDAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 307:
		result := NewGetContentmanagementSharedSharedIDTemporaryRedirect()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewGetContentmanagementSharedSharedIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetContentmanagementSharedSharedIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetContentmanagementSharedSharedIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetContentmanagementSharedSharedIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetContentmanagementSharedSharedIDRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetContentmanagementSharedSharedIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetContentmanagementSharedSharedIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetContentmanagementSharedSharedIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetContentmanagementSharedSharedIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetContentmanagementSharedSharedIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetContentmanagementSharedSharedIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetContentmanagementSharedSharedIDOK creates a GetContentmanagementSharedSharedIDOK with default headers values
func NewGetContentmanagementSharedSharedIDOK() *GetContentmanagementSharedSharedIDOK {
	return &GetContentmanagementSharedSharedIDOK{}
}

/*GetContentmanagementSharedSharedIDOK handles this case with default header values.

Download location is returned in header, if redirect is set to false and disposition is not set to none. If disposition is none, location header will not be populated, DownloadUri and ViewUri will be populated.
*/
type GetContentmanagementSharedSharedIDOK struct {
	Payload *models.SharedResponse
}

func (o *GetContentmanagementSharedSharedIDOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/shared/{sharedId}][%d] getContentmanagementSharedSharedIdOK  %+v", 200, o.Payload)
}

func (o *GetContentmanagementSharedSharedIDOK) GetPayload() *models.SharedResponse {
	return o.Payload
}

func (o *GetContentmanagementSharedSharedIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SharedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementSharedSharedIDAccepted creates a GetContentmanagementSharedSharedIDAccepted with default headers values
func NewGetContentmanagementSharedSharedIDAccepted() *GetContentmanagementSharedSharedIDAccepted {
	return &GetContentmanagementSharedSharedIDAccepted{}
}

/*GetContentmanagementSharedSharedIDAccepted handles this case with default header values.

Accepted - Preparing file for download - try again soon.
*/
type GetContentmanagementSharedSharedIDAccepted struct {
}

func (o *GetContentmanagementSharedSharedIDAccepted) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/shared/{sharedId}][%d] getContentmanagementSharedSharedIdAccepted ", 202)
}

func (o *GetContentmanagementSharedSharedIDAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetContentmanagementSharedSharedIDTemporaryRedirect creates a GetContentmanagementSharedSharedIDTemporaryRedirect with default headers values
func NewGetContentmanagementSharedSharedIDTemporaryRedirect() *GetContentmanagementSharedSharedIDTemporaryRedirect {
	return &GetContentmanagementSharedSharedIDTemporaryRedirect{}
}

/*GetContentmanagementSharedSharedIDTemporaryRedirect handles this case with default header values.

Redirected to download location, if redirect is set to true
*/
type GetContentmanagementSharedSharedIDTemporaryRedirect struct {
}

func (o *GetContentmanagementSharedSharedIDTemporaryRedirect) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/shared/{sharedId}][%d] getContentmanagementSharedSharedIdTemporaryRedirect ", 307)
}

func (o *GetContentmanagementSharedSharedIDTemporaryRedirect) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetContentmanagementSharedSharedIDBadRequest creates a GetContentmanagementSharedSharedIDBadRequest with default headers values
func NewGetContentmanagementSharedSharedIDBadRequest() *GetContentmanagementSharedSharedIDBadRequest {
	return &GetContentmanagementSharedSharedIDBadRequest{}
}

/*GetContentmanagementSharedSharedIDBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetContentmanagementSharedSharedIDBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementSharedSharedIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/shared/{sharedId}][%d] getContentmanagementSharedSharedIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetContentmanagementSharedSharedIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementSharedSharedIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementSharedSharedIDUnauthorized creates a GetContentmanagementSharedSharedIDUnauthorized with default headers values
func NewGetContentmanagementSharedSharedIDUnauthorized() *GetContentmanagementSharedSharedIDUnauthorized {
	return &GetContentmanagementSharedSharedIDUnauthorized{}
}

/*GetContentmanagementSharedSharedIDUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetContentmanagementSharedSharedIDUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementSharedSharedIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/shared/{sharedId}][%d] getContentmanagementSharedSharedIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetContentmanagementSharedSharedIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementSharedSharedIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementSharedSharedIDForbidden creates a GetContentmanagementSharedSharedIDForbidden with default headers values
func NewGetContentmanagementSharedSharedIDForbidden() *GetContentmanagementSharedSharedIDForbidden {
	return &GetContentmanagementSharedSharedIDForbidden{}
}

/*GetContentmanagementSharedSharedIDForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetContentmanagementSharedSharedIDForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementSharedSharedIDForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/shared/{sharedId}][%d] getContentmanagementSharedSharedIdForbidden  %+v", 403, o.Payload)
}

func (o *GetContentmanagementSharedSharedIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementSharedSharedIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementSharedSharedIDNotFound creates a GetContentmanagementSharedSharedIDNotFound with default headers values
func NewGetContentmanagementSharedSharedIDNotFound() *GetContentmanagementSharedSharedIDNotFound {
	return &GetContentmanagementSharedSharedIDNotFound{}
}

/*GetContentmanagementSharedSharedIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetContentmanagementSharedSharedIDNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementSharedSharedIDNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/shared/{sharedId}][%d] getContentmanagementSharedSharedIdNotFound  %+v", 404, o.Payload)
}

func (o *GetContentmanagementSharedSharedIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementSharedSharedIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementSharedSharedIDRequestTimeout creates a GetContentmanagementSharedSharedIDRequestTimeout with default headers values
func NewGetContentmanagementSharedSharedIDRequestTimeout() *GetContentmanagementSharedSharedIDRequestTimeout {
	return &GetContentmanagementSharedSharedIDRequestTimeout{}
}

/*GetContentmanagementSharedSharedIDRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetContentmanagementSharedSharedIDRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementSharedSharedIDRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/shared/{sharedId}][%d] getContentmanagementSharedSharedIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetContentmanagementSharedSharedIDRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementSharedSharedIDRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementSharedSharedIDRequestEntityTooLarge creates a GetContentmanagementSharedSharedIDRequestEntityTooLarge with default headers values
func NewGetContentmanagementSharedSharedIDRequestEntityTooLarge() *GetContentmanagementSharedSharedIDRequestEntityTooLarge {
	return &GetContentmanagementSharedSharedIDRequestEntityTooLarge{}
}

/*GetContentmanagementSharedSharedIDRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetContentmanagementSharedSharedIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementSharedSharedIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/shared/{sharedId}][%d] getContentmanagementSharedSharedIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetContentmanagementSharedSharedIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementSharedSharedIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementSharedSharedIDUnsupportedMediaType creates a GetContentmanagementSharedSharedIDUnsupportedMediaType with default headers values
func NewGetContentmanagementSharedSharedIDUnsupportedMediaType() *GetContentmanagementSharedSharedIDUnsupportedMediaType {
	return &GetContentmanagementSharedSharedIDUnsupportedMediaType{}
}

/*GetContentmanagementSharedSharedIDUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetContentmanagementSharedSharedIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementSharedSharedIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/shared/{sharedId}][%d] getContentmanagementSharedSharedIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetContentmanagementSharedSharedIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementSharedSharedIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementSharedSharedIDTooManyRequests creates a GetContentmanagementSharedSharedIDTooManyRequests with default headers values
func NewGetContentmanagementSharedSharedIDTooManyRequests() *GetContentmanagementSharedSharedIDTooManyRequests {
	return &GetContentmanagementSharedSharedIDTooManyRequests{}
}

/*GetContentmanagementSharedSharedIDTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetContentmanagementSharedSharedIDTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementSharedSharedIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/shared/{sharedId}][%d] getContentmanagementSharedSharedIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetContentmanagementSharedSharedIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementSharedSharedIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementSharedSharedIDInternalServerError creates a GetContentmanagementSharedSharedIDInternalServerError with default headers values
func NewGetContentmanagementSharedSharedIDInternalServerError() *GetContentmanagementSharedSharedIDInternalServerError {
	return &GetContentmanagementSharedSharedIDInternalServerError{}
}

/*GetContentmanagementSharedSharedIDInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetContentmanagementSharedSharedIDInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementSharedSharedIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/shared/{sharedId}][%d] getContentmanagementSharedSharedIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetContentmanagementSharedSharedIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementSharedSharedIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementSharedSharedIDServiceUnavailable creates a GetContentmanagementSharedSharedIDServiceUnavailable with default headers values
func NewGetContentmanagementSharedSharedIDServiceUnavailable() *GetContentmanagementSharedSharedIDServiceUnavailable {
	return &GetContentmanagementSharedSharedIDServiceUnavailable{}
}

/*GetContentmanagementSharedSharedIDServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetContentmanagementSharedSharedIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementSharedSharedIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/shared/{sharedId}][%d] getContentmanagementSharedSharedIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetContentmanagementSharedSharedIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementSharedSharedIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementSharedSharedIDGatewayTimeout creates a GetContentmanagementSharedSharedIDGatewayTimeout with default headers values
func NewGetContentmanagementSharedSharedIDGatewayTimeout() *GetContentmanagementSharedSharedIDGatewayTimeout {
	return &GetContentmanagementSharedSharedIDGatewayTimeout{}
}

/*GetContentmanagementSharedSharedIDGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetContentmanagementSharedSharedIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementSharedSharedIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/shared/{sharedId}][%d] getContentmanagementSharedSharedIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetContentmanagementSharedSharedIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementSharedSharedIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

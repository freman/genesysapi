// Code generated by go-swagger; DO NOT EDIT.

package content_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the content management client
type API interface {
	/*
	   DeleteContentmanagementDocument deletes a document
	*/
	DeleteContentmanagementDocument(ctx context.Context, params *DeleteContentmanagementDocumentParams) (*DeleteContentmanagementDocumentAccepted, error)
	/*
	   DeleteContentmanagementShare deletes an existing share
	   This revokes sharing rights specified in the share record
	*/
	DeleteContentmanagementShare(ctx context.Context, params *DeleteContentmanagementShareParams) error
	/*
	   DeleteContentmanagementStatusStatusID cancels the command for this status
	*/
	DeleteContentmanagementStatusStatusID(ctx context.Context, params *DeleteContentmanagementStatusStatusIDParams) error
	/*
	   DeleteContentmanagementWorkspace deletes a workspace
	*/
	DeleteContentmanagementWorkspace(ctx context.Context, params *DeleteContentmanagementWorkspaceParams) (*DeleteContentmanagementWorkspaceAccepted, error)
	/*
	   DeleteContentmanagementWorkspaceMember deletes a member from a workspace
	*/
	DeleteContentmanagementWorkspaceMember(ctx context.Context, params *DeleteContentmanagementWorkspaceMemberParams) error
	/*
	   DeleteContentmanagementWorkspaceTagvalue deletes workspace tag
	   Delete a tag from a workspace. Will remove this tag from all documents.
	*/
	DeleteContentmanagementWorkspaceTagvalue(ctx context.Context, params *DeleteContentmanagementWorkspaceTagvalueParams) error
	/*
	   GetContentmanagementDocument gets a document
	*/
	GetContentmanagementDocument(ctx context.Context, params *GetContentmanagementDocumentParams) (*GetContentmanagementDocumentOK, error)
	/*
	   GetContentmanagementDocumentAudits gets a list of audits for a document
	*/
	GetContentmanagementDocumentAudits(ctx context.Context, params *GetContentmanagementDocumentAuditsParams) (*GetContentmanagementDocumentAuditsOK, error)
	/*
	   GetContentmanagementDocumentContent downloads a document
	*/
	GetContentmanagementDocumentContent(ctx context.Context, params *GetContentmanagementDocumentContentParams) (*GetContentmanagementDocumentContentOK, *GetContentmanagementDocumentContentAccepted, error)
	/*
	   GetContentmanagementDocuments gets a list of documents
	*/
	GetContentmanagementDocuments(ctx context.Context, params *GetContentmanagementDocumentsParams) (*GetContentmanagementDocumentsOK, error)
	/*
	   GetContentmanagementQuery queries content
	*/
	GetContentmanagementQuery(ctx context.Context, params *GetContentmanagementQueryParams) (*GetContentmanagementQueryOK, error)
	/*
	   GetContentmanagementSecurityprofile gets a security profile
	*/
	GetContentmanagementSecurityprofile(ctx context.Context, params *GetContentmanagementSecurityprofileParams) (*GetContentmanagementSecurityprofileOK, error)
	/*
	   GetContentmanagementSecurityprofiles gets a list of security profiles
	*/
	GetContentmanagementSecurityprofiles(ctx context.Context, params *GetContentmanagementSecurityprofilesParams) (*GetContentmanagementSecurityprofilesOK, error)
	/*
	   GetContentmanagementShare retrieves details about an existing share
	*/
	GetContentmanagementShare(ctx context.Context, params *GetContentmanagementShareParams) (*GetContentmanagementShareOK, error)
	/*
	   GetContentmanagementSharedSharedID gets shared documents securely download a shared document
	   This method requires the download sharing URI obtained in the get document response (downloadSharingUri). Documents may be shared between users in the same workspace. Documents may also be shared between any user by creating a content management share.
	*/
	GetContentmanagementSharedSharedID(ctx context.Context, params *GetContentmanagementSharedSharedIDParams) (*GetContentmanagementSharedSharedIDOK, *GetContentmanagementSharedSharedIDAccepted, error)
	/*
	   GetContentmanagementShares gets a list of shares you must specify at least one filter e g entity Id
	   Failing to specify a filter will return 400.
	*/
	GetContentmanagementShares(ctx context.Context, params *GetContentmanagementSharesParams) (*GetContentmanagementSharesOK, error)
	/*
	   GetContentmanagementStatus gets a list of statuses for pending operations
	*/
	GetContentmanagementStatus(ctx context.Context, params *GetContentmanagementStatusParams) (*GetContentmanagementStatusOK, error)
	/*
	   GetContentmanagementStatusStatusID gets a status
	*/
	GetContentmanagementStatusStatusID(ctx context.Context, params *GetContentmanagementStatusStatusIDParams) (*GetContentmanagementStatusStatusIDOK, error)
	/*
	   GetContentmanagementUsage gets usage details
	*/
	GetContentmanagementUsage(ctx context.Context, params *GetContentmanagementUsageParams) (*GetContentmanagementUsageOK, error)
	/*
	   GetContentmanagementWorkspace gets a workspace
	*/
	GetContentmanagementWorkspace(ctx context.Context, params *GetContentmanagementWorkspaceParams) (*GetContentmanagementWorkspaceOK, error)
	/*
	   GetContentmanagementWorkspaceDocuments gets a list of documents
	*/
	GetContentmanagementWorkspaceDocuments(ctx context.Context, params *GetContentmanagementWorkspaceDocumentsParams) (*GetContentmanagementWorkspaceDocumentsOK, error)
	/*
	   GetContentmanagementWorkspaceMember gets a workspace member
	*/
	GetContentmanagementWorkspaceMember(ctx context.Context, params *GetContentmanagementWorkspaceMemberParams) (*GetContentmanagementWorkspaceMemberOK, error)
	/*
	   GetContentmanagementWorkspaceMembers gets a list workspace members
	*/
	GetContentmanagementWorkspaceMembers(ctx context.Context, params *GetContentmanagementWorkspaceMembersParams) (*GetContentmanagementWorkspaceMembersOK, error)
	/*
	   GetContentmanagementWorkspaceTagvalue gets a workspace tag
	*/
	GetContentmanagementWorkspaceTagvalue(ctx context.Context, params *GetContentmanagementWorkspaceTagvalueParams) (*GetContentmanagementWorkspaceTagvalueOK, error)
	/*
	   GetContentmanagementWorkspaceTagvalues gets a list of workspace tags
	*/
	GetContentmanagementWorkspaceTagvalues(ctx context.Context, params *GetContentmanagementWorkspaceTagvaluesParams) (*GetContentmanagementWorkspaceTagvaluesOK, error)
	/*
	   GetContentmanagementWorkspaces gets a list of workspaces
	   Specifying 'content' access will return all workspaces the user has document access to, while 'admin' access will return all group workspaces the user has administrative rights to.
	*/
	GetContentmanagementWorkspaces(ctx context.Context, params *GetContentmanagementWorkspacesParams) (*GetContentmanagementWorkspacesOK, error)
	/*
	   PostContentmanagementAuditquery queries audits
	*/
	PostContentmanagementAuditquery(ctx context.Context, params *PostContentmanagementAuditqueryParams) (*PostContentmanagementAuditqueryOK, error)
	/*
	   PostContentmanagementDocument updates a document
	*/
	PostContentmanagementDocument(ctx context.Context, params *PostContentmanagementDocumentParams) (*PostContentmanagementDocumentOK, error)
	/*
	   PostContentmanagementDocumentContent replaces the contents of a document
	*/
	PostContentmanagementDocumentContent(ctx context.Context, params *PostContentmanagementDocumentContentParams) (*PostContentmanagementDocumentContentAccepted, error)
	/*
	   PostContentmanagementDocuments adds a document
	*/
	PostContentmanagementDocuments(ctx context.Context, params *PostContentmanagementDocumentsParams) (*PostContentmanagementDocumentsOK, error)
	/*
	   PostContentmanagementQuery queries content
	*/
	PostContentmanagementQuery(ctx context.Context, params *PostContentmanagementQueryParams) (*PostContentmanagementQueryOK, error)
	/*
	   PostContentmanagementShares creates a new share or updates an existing share if the entity has already been shared
	*/
	PostContentmanagementShares(ctx context.Context, params *PostContentmanagementSharesParams) (*PostContentmanagementSharesOK, error)
	/*
	   PostContentmanagementWorkspaceTagvalues creates a workspace tag
	*/
	PostContentmanagementWorkspaceTagvalues(ctx context.Context, params *PostContentmanagementWorkspaceTagvaluesParams) (*PostContentmanagementWorkspaceTagvaluesOK, error)
	/*
	   PostContentmanagementWorkspaceTagvaluesQuery performs a prefix query on tags in the workspace
	*/
	PostContentmanagementWorkspaceTagvaluesQuery(ctx context.Context, params *PostContentmanagementWorkspaceTagvaluesQueryParams) (*PostContentmanagementWorkspaceTagvaluesQueryOK, error)
	/*
	   PostContentmanagementWorkspaces creates a group workspace
	*/
	PostContentmanagementWorkspaces(ctx context.Context, params *PostContentmanagementWorkspacesParams) (*PostContentmanagementWorkspacesOK, error)
	/*
	   PutContentmanagementWorkspace updates a workspace
	*/
	PutContentmanagementWorkspace(ctx context.Context, params *PutContentmanagementWorkspaceParams) (*PutContentmanagementWorkspaceOK, error)
	/*
	   PutContentmanagementWorkspaceMember adds a member to a workspace
	*/
	PutContentmanagementWorkspaceMember(ctx context.Context, params *PutContentmanagementWorkspaceMemberParams) (*PutContentmanagementWorkspaceMemberOK, error)
	/*
	   PutContentmanagementWorkspaceTagvalue updates a workspace tag will update all documents with the new tag value
	*/
	PutContentmanagementWorkspaceTagvalue(ctx context.Context, params *PutContentmanagementWorkspaceTagvalueParams) (*PutContentmanagementWorkspaceTagvalueOK, *PutContentmanagementWorkspaceTagvalueAccepted, error)
}

// New creates a new content management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for content management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteContentmanagementDocument deletes a document
*/
func (a *Client) DeleteContentmanagementDocument(ctx context.Context, params *DeleteContentmanagementDocumentParams) (*DeleteContentmanagementDocumentAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteContentmanagementDocument",
		Method:             "DELETE",
		PathPattern:        "/api/v2/contentmanagement/documents/{documentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteContentmanagementDocumentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteContentmanagementDocumentAccepted), nil

}

/*
DeleteContentmanagementShare deletes an existing share

This revokes sharing rights specified in the share record
*/
func (a *Client) DeleteContentmanagementShare(ctx context.Context, params *DeleteContentmanagementShareParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteContentmanagementShare",
		Method:             "DELETE",
		PathPattern:        "/api/v2/contentmanagement/shares/{shareId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteContentmanagementShareReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteContentmanagementStatusStatusID cancels the command for this status
*/
func (a *Client) DeleteContentmanagementStatusStatusID(ctx context.Context, params *DeleteContentmanagementStatusStatusIDParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteContentmanagementStatusStatusId",
		Method:             "DELETE",
		PathPattern:        "/api/v2/contentmanagement/status/{statusId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteContentmanagementStatusStatusIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteContentmanagementWorkspace deletes a workspace
*/
func (a *Client) DeleteContentmanagementWorkspace(ctx context.Context, params *DeleteContentmanagementWorkspaceParams) (*DeleteContentmanagementWorkspaceAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteContentmanagementWorkspace",
		Method:             "DELETE",
		PathPattern:        "/api/v2/contentmanagement/workspaces/{workspaceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteContentmanagementWorkspaceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteContentmanagementWorkspaceAccepted), nil

}

/*
DeleteContentmanagementWorkspaceMember deletes a member from a workspace
*/
func (a *Client) DeleteContentmanagementWorkspaceMember(ctx context.Context, params *DeleteContentmanagementWorkspaceMemberParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteContentmanagementWorkspaceMember",
		Method:             "DELETE",
		PathPattern:        "/api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteContentmanagementWorkspaceMemberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteContentmanagementWorkspaceTagvalue deletes workspace tag

Delete a tag from a workspace. Will remove this tag from all documents.
*/
func (a *Client) DeleteContentmanagementWorkspaceTagvalue(ctx context.Context, params *DeleteContentmanagementWorkspaceTagvalueParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteContentmanagementWorkspaceTagvalue",
		Method:             "DELETE",
		PathPattern:        "/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteContentmanagementWorkspaceTagvalueReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetContentmanagementDocument gets a document
*/
func (a *Client) GetContentmanagementDocument(ctx context.Context, params *GetContentmanagementDocumentParams) (*GetContentmanagementDocumentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementDocument",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/documents/{documentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementDocumentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementDocumentOK), nil

}

/*
GetContentmanagementDocumentAudits gets a list of audits for a document
*/
func (a *Client) GetContentmanagementDocumentAudits(ctx context.Context, params *GetContentmanagementDocumentAuditsParams) (*GetContentmanagementDocumentAuditsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementDocumentAudits",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/documents/{documentId}/audits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementDocumentAuditsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementDocumentAuditsOK), nil

}

/*
GetContentmanagementDocumentContent downloads a document
*/
func (a *Client) GetContentmanagementDocumentContent(ctx context.Context, params *GetContentmanagementDocumentContentParams) (*GetContentmanagementDocumentContentOK, *GetContentmanagementDocumentContentAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementDocumentContent",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/documents/{documentId}/content",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementDocumentContentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetContentmanagementDocumentContentOK:
		return value, nil, nil
	case *GetContentmanagementDocumentContentAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetContentmanagementDocuments gets a list of documents
*/
func (a *Client) GetContentmanagementDocuments(ctx context.Context, params *GetContentmanagementDocumentsParams) (*GetContentmanagementDocumentsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementDocuments",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/documents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementDocumentsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementDocumentsOK), nil

}

/*
GetContentmanagementQuery queries content
*/
func (a *Client) GetContentmanagementQuery(ctx context.Context, params *GetContentmanagementQueryParams) (*GetContentmanagementQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementQuery",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementQueryOK), nil

}

/*
GetContentmanagementSecurityprofile gets a security profile
*/
func (a *Client) GetContentmanagementSecurityprofile(ctx context.Context, params *GetContentmanagementSecurityprofileParams) (*GetContentmanagementSecurityprofileOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementSecurityprofile",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/securityprofiles/{securityProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementSecurityprofileReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementSecurityprofileOK), nil

}

/*
GetContentmanagementSecurityprofiles gets a list of security profiles
*/
func (a *Client) GetContentmanagementSecurityprofiles(ctx context.Context, params *GetContentmanagementSecurityprofilesParams) (*GetContentmanagementSecurityprofilesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementSecurityprofiles",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/securityprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementSecurityprofilesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementSecurityprofilesOK), nil

}

/*
GetContentmanagementShare retrieves details about an existing share
*/
func (a *Client) GetContentmanagementShare(ctx context.Context, params *GetContentmanagementShareParams) (*GetContentmanagementShareOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementShare",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/shares/{shareId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementShareReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementShareOK), nil

}

/*
GetContentmanagementSharedSharedID gets shared documents securely download a shared document

This method requires the download sharing URI obtained in the get document response (downloadSharingUri). Documents may be shared between users in the same workspace. Documents may also be shared between any user by creating a content management share.
*/
func (a *Client) GetContentmanagementSharedSharedID(ctx context.Context, params *GetContentmanagementSharedSharedIDParams) (*GetContentmanagementSharedSharedIDOK, *GetContentmanagementSharedSharedIDAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementSharedSharedId",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/shared/{sharedId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementSharedSharedIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetContentmanagementSharedSharedIDOK:
		return value, nil, nil
	case *GetContentmanagementSharedSharedIDAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetContentmanagementShares gets a list of shares you must specify at least one filter e g entity Id

Failing to specify a filter will return 400.
*/
func (a *Client) GetContentmanagementShares(ctx context.Context, params *GetContentmanagementSharesParams) (*GetContentmanagementSharesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementShares",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/shares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementSharesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementSharesOK), nil

}

/*
GetContentmanagementStatus gets a list of statuses for pending operations
*/
func (a *Client) GetContentmanagementStatus(ctx context.Context, params *GetContentmanagementStatusParams) (*GetContentmanagementStatusOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementStatus",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementStatusReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementStatusOK), nil

}

/*
GetContentmanagementStatusStatusID gets a status
*/
func (a *Client) GetContentmanagementStatusStatusID(ctx context.Context, params *GetContentmanagementStatusStatusIDParams) (*GetContentmanagementStatusStatusIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementStatusStatusId",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/status/{statusId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementStatusStatusIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementStatusStatusIDOK), nil

}

/*
GetContentmanagementUsage gets usage details
*/
func (a *Client) GetContentmanagementUsage(ctx context.Context, params *GetContentmanagementUsageParams) (*GetContentmanagementUsageOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementUsage",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementUsageReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementUsageOK), nil

}

/*
GetContentmanagementWorkspace gets a workspace
*/
func (a *Client) GetContentmanagementWorkspace(ctx context.Context, params *GetContentmanagementWorkspaceParams) (*GetContentmanagementWorkspaceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementWorkspace",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/workspaces/{workspaceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementWorkspaceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementWorkspaceOK), nil

}

/*
GetContentmanagementWorkspaceDocuments gets a list of documents
*/
func (a *Client) GetContentmanagementWorkspaceDocuments(ctx context.Context, params *GetContentmanagementWorkspaceDocumentsParams) (*GetContentmanagementWorkspaceDocumentsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementWorkspaceDocuments",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/workspaces/{workspaceId}/documents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementWorkspaceDocumentsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementWorkspaceDocumentsOK), nil

}

/*
GetContentmanagementWorkspaceMember gets a workspace member
*/
func (a *Client) GetContentmanagementWorkspaceMember(ctx context.Context, params *GetContentmanagementWorkspaceMemberParams) (*GetContentmanagementWorkspaceMemberOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementWorkspaceMember",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementWorkspaceMemberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementWorkspaceMemberOK), nil

}

/*
GetContentmanagementWorkspaceMembers gets a list workspace members
*/
func (a *Client) GetContentmanagementWorkspaceMembers(ctx context.Context, params *GetContentmanagementWorkspaceMembersParams) (*GetContentmanagementWorkspaceMembersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementWorkspaceMembers",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/workspaces/{workspaceId}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementWorkspaceMembersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementWorkspaceMembersOK), nil

}

/*
GetContentmanagementWorkspaceTagvalue gets a workspace tag
*/
func (a *Client) GetContentmanagementWorkspaceTagvalue(ctx context.Context, params *GetContentmanagementWorkspaceTagvalueParams) (*GetContentmanagementWorkspaceTagvalueOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementWorkspaceTagvalue",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementWorkspaceTagvalueReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementWorkspaceTagvalueOK), nil

}

/*
GetContentmanagementWorkspaceTagvalues gets a list of workspace tags
*/
func (a *Client) GetContentmanagementWorkspaceTagvalues(ctx context.Context, params *GetContentmanagementWorkspaceTagvaluesParams) (*GetContentmanagementWorkspaceTagvaluesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementWorkspaceTagvalues",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementWorkspaceTagvaluesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementWorkspaceTagvaluesOK), nil

}

/*
GetContentmanagementWorkspaces gets a list of workspaces

Specifying 'content' access will return all workspaces the user has document access to, while 'admin' access will return all group workspaces the user has administrative rights to.
*/
func (a *Client) GetContentmanagementWorkspaces(ctx context.Context, params *GetContentmanagementWorkspacesParams) (*GetContentmanagementWorkspacesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentmanagementWorkspaces",
		Method:             "GET",
		PathPattern:        "/api/v2/contentmanagement/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentmanagementWorkspacesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContentmanagementWorkspacesOK), nil

}

/*
PostContentmanagementAuditquery queries audits
*/
func (a *Client) PostContentmanagementAuditquery(ctx context.Context, params *PostContentmanagementAuditqueryParams) (*PostContentmanagementAuditqueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postContentmanagementAuditquery",
		Method:             "POST",
		PathPattern:        "/api/v2/contentmanagement/auditquery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostContentmanagementAuditqueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContentmanagementAuditqueryOK), nil

}

/*
PostContentmanagementDocument updates a document
*/
func (a *Client) PostContentmanagementDocument(ctx context.Context, params *PostContentmanagementDocumentParams) (*PostContentmanagementDocumentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postContentmanagementDocument",
		Method:             "POST",
		PathPattern:        "/api/v2/contentmanagement/documents/{documentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostContentmanagementDocumentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContentmanagementDocumentOK), nil

}

/*
PostContentmanagementDocumentContent replaces the contents of a document
*/
func (a *Client) PostContentmanagementDocumentContent(ctx context.Context, params *PostContentmanagementDocumentContentParams) (*PostContentmanagementDocumentContentAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postContentmanagementDocumentContent",
		Method:             "POST",
		PathPattern:        "/api/v2/contentmanagement/documents/{documentId}/content",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostContentmanagementDocumentContentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContentmanagementDocumentContentAccepted), nil

}

/*
PostContentmanagementDocuments adds a document
*/
func (a *Client) PostContentmanagementDocuments(ctx context.Context, params *PostContentmanagementDocumentsParams) (*PostContentmanagementDocumentsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postContentmanagementDocuments",
		Method:             "POST",
		PathPattern:        "/api/v2/contentmanagement/documents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostContentmanagementDocumentsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContentmanagementDocumentsOK), nil

}

/*
PostContentmanagementQuery queries content
*/
func (a *Client) PostContentmanagementQuery(ctx context.Context, params *PostContentmanagementQueryParams) (*PostContentmanagementQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postContentmanagementQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/contentmanagement/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostContentmanagementQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContentmanagementQueryOK), nil

}

/*
PostContentmanagementShares creates a new share or updates an existing share if the entity has already been shared
*/
func (a *Client) PostContentmanagementShares(ctx context.Context, params *PostContentmanagementSharesParams) (*PostContentmanagementSharesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postContentmanagementShares",
		Method:             "POST",
		PathPattern:        "/api/v2/contentmanagement/shares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostContentmanagementSharesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContentmanagementSharesOK), nil

}

/*
PostContentmanagementWorkspaceTagvalues creates a workspace tag
*/
func (a *Client) PostContentmanagementWorkspaceTagvalues(ctx context.Context, params *PostContentmanagementWorkspaceTagvaluesParams) (*PostContentmanagementWorkspaceTagvaluesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postContentmanagementWorkspaceTagvalues",
		Method:             "POST",
		PathPattern:        "/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostContentmanagementWorkspaceTagvaluesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContentmanagementWorkspaceTagvaluesOK), nil

}

/*
PostContentmanagementWorkspaceTagvaluesQuery performs a prefix query on tags in the workspace
*/
func (a *Client) PostContentmanagementWorkspaceTagvaluesQuery(ctx context.Context, params *PostContentmanagementWorkspaceTagvaluesQueryParams) (*PostContentmanagementWorkspaceTagvaluesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postContentmanagementWorkspaceTagvaluesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostContentmanagementWorkspaceTagvaluesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContentmanagementWorkspaceTagvaluesQueryOK), nil

}

/*
PostContentmanagementWorkspaces creates a group workspace
*/
func (a *Client) PostContentmanagementWorkspaces(ctx context.Context, params *PostContentmanagementWorkspacesParams) (*PostContentmanagementWorkspacesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postContentmanagementWorkspaces",
		Method:             "POST",
		PathPattern:        "/api/v2/contentmanagement/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostContentmanagementWorkspacesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContentmanagementWorkspacesOK), nil

}

/*
PutContentmanagementWorkspace updates a workspace
*/
func (a *Client) PutContentmanagementWorkspace(ctx context.Context, params *PutContentmanagementWorkspaceParams) (*PutContentmanagementWorkspaceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putContentmanagementWorkspace",
		Method:             "PUT",
		PathPattern:        "/api/v2/contentmanagement/workspaces/{workspaceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutContentmanagementWorkspaceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutContentmanagementWorkspaceOK), nil

}

/*
PutContentmanagementWorkspaceMember adds a member to a workspace
*/
func (a *Client) PutContentmanagementWorkspaceMember(ctx context.Context, params *PutContentmanagementWorkspaceMemberParams) (*PutContentmanagementWorkspaceMemberOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putContentmanagementWorkspaceMember",
		Method:             "PUT",
		PathPattern:        "/api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutContentmanagementWorkspaceMemberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutContentmanagementWorkspaceMemberOK), nil

}

/*
PutContentmanagementWorkspaceTagvalue updates a workspace tag will update all documents with the new tag value
*/
func (a *Client) PutContentmanagementWorkspaceTagvalue(ctx context.Context, params *PutContentmanagementWorkspaceTagvalueParams) (*PutContentmanagementWorkspaceTagvalueOK, *PutContentmanagementWorkspaceTagvalueAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putContentmanagementWorkspaceTagvalue",
		Method:             "PUT",
		PathPattern:        "/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutContentmanagementWorkspaceTagvalueReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PutContentmanagementWorkspaceTagvalueOK:
		return value, nil, nil
	case *PutContentmanagementWorkspaceTagvalueAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// Code generated by go-swagger; DO NOT EDIT.

package content_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetContentmanagementDocumentAuditsParams creates a new GetContentmanagementDocumentAuditsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetContentmanagementDocumentAuditsParams() *GetContentmanagementDocumentAuditsParams {
	return &GetContentmanagementDocumentAuditsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetContentmanagementDocumentAuditsParamsWithTimeout creates a new GetContentmanagementDocumentAuditsParams object
// with the ability to set a timeout on a request.
func NewGetContentmanagementDocumentAuditsParamsWithTimeout(timeout time.Duration) *GetContentmanagementDocumentAuditsParams {
	return &GetContentmanagementDocumentAuditsParams{
		timeout: timeout,
	}
}

// NewGetContentmanagementDocumentAuditsParamsWithContext creates a new GetContentmanagementDocumentAuditsParams object
// with the ability to set a context for a request.
func NewGetContentmanagementDocumentAuditsParamsWithContext(ctx context.Context) *GetContentmanagementDocumentAuditsParams {
	return &GetContentmanagementDocumentAuditsParams{
		Context: ctx,
	}
}

// NewGetContentmanagementDocumentAuditsParamsWithHTTPClient creates a new GetContentmanagementDocumentAuditsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetContentmanagementDocumentAuditsParamsWithHTTPClient(client *http.Client) *GetContentmanagementDocumentAuditsParams {
	return &GetContentmanagementDocumentAuditsParams{
		HTTPClient: client,
	}
}

/*
GetContentmanagementDocumentAuditsParams contains all the parameters to send to the API endpoint

	for the get contentmanagement document audits operation.

	Typically these are written to a http.Request.
*/
type GetContentmanagementDocumentAuditsParams struct {

	/* DocumentID.

	   Document ID
	*/
	DocumentID string

	/* Level.

	   level

	   Default: "USER"
	*/
	Level *string

	/* PageNumber.

	   Page number

	   Format: int32
	   Default: 1
	*/
	PageNumber *int32

	/* PageSize.

	   Page size

	   Format: int32
	   Default: 25
	*/
	PageSize *int32

	/* SortBy.

	   Sort by
	*/
	SortBy *string

	/* SortOrder.

	   Sort order

	   Default: "ascending"
	*/
	SortOrder *string

	/* TransactionFilter.

	   Transaction filter
	*/
	TransactionFilter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get contentmanagement document audits params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetContentmanagementDocumentAuditsParams) WithDefaults() *GetContentmanagementDocumentAuditsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get contentmanagement document audits params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetContentmanagementDocumentAuditsParams) SetDefaults() {
	var (
		levelDefault = string("USER")

		pageNumberDefault = int32(1)

		pageSizeDefault = int32(25)

		sortOrderDefault = string("ascending")
	)

	val := GetContentmanagementDocumentAuditsParams{
		Level:      &levelDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortOrder:  &sortOrderDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) WithTimeout(timeout time.Duration) *GetContentmanagementDocumentAuditsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) WithContext(ctx context.Context) *GetContentmanagementDocumentAuditsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) WithHTTPClient(client *http.Client) *GetContentmanagementDocumentAuditsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDocumentID adds the documentID to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) WithDocumentID(documentID string) *GetContentmanagementDocumentAuditsParams {
	o.SetDocumentID(documentID)
	return o
}

// SetDocumentID adds the documentId to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) SetDocumentID(documentID string) {
	o.DocumentID = documentID
}

// WithLevel adds the level to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) WithLevel(level *string) *GetContentmanagementDocumentAuditsParams {
	o.SetLevel(level)
	return o
}

// SetLevel adds the level to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) SetLevel(level *string) {
	o.Level = level
}

// WithPageNumber adds the pageNumber to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) WithPageNumber(pageNumber *int32) *GetContentmanagementDocumentAuditsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) WithPageSize(pageSize *int32) *GetContentmanagementDocumentAuditsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithSortBy adds the sortBy to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) WithSortBy(sortBy *string) *GetContentmanagementDocumentAuditsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortOrder adds the sortOrder to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) WithSortOrder(sortOrder *string) *GetContentmanagementDocumentAuditsParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithTransactionFilter adds the transactionFilter to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) WithTransactionFilter(transactionFilter *string) *GetContentmanagementDocumentAuditsParams {
	o.SetTransactionFilter(transactionFilter)
	return o
}

// SetTransactionFilter adds the transactionFilter to the get contentmanagement document audits params
func (o *GetContentmanagementDocumentAuditsParams) SetTransactionFilter(transactionFilter *string) {
	o.TransactionFilter = transactionFilter
}

// WriteToRequest writes these params to a swagger request
func (o *GetContentmanagementDocumentAuditsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param documentId
	if err := r.SetPathParam("documentId", o.DocumentID); err != nil {
		return err
	}

	if o.Level != nil {

		// query param level
		var qrLevel string

		if o.Level != nil {
			qrLevel = *o.Level
		}
		qLevel := qrLevel
		if qLevel != "" {

			if err := r.SetQueryParam("level", qLevel); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}
	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string

		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {

			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}
	}

	if o.TransactionFilter != nil {

		// query param transactionFilter
		var qrTransactionFilter string

		if o.TransactionFilter != nil {
			qrTransactionFilter = *o.TransactionFilter
		}
		qTransactionFilter := qrTransactionFilter
		if qTransactionFilter != "" {

			if err := r.SetQueryParam("transactionFilter", qTransactionFilter); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

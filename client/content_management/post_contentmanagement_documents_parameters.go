// Code generated by go-swagger; DO NOT EDIT.

package content_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/freman/genesysapi/models"
)

// NewPostContentmanagementDocumentsParams creates a new PostContentmanagementDocumentsParams object
// with the default values initialized.
func NewPostContentmanagementDocumentsParams() *PostContentmanagementDocumentsParams {
	var ()
	return &PostContentmanagementDocumentsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostContentmanagementDocumentsParamsWithTimeout creates a new PostContentmanagementDocumentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostContentmanagementDocumentsParamsWithTimeout(timeout time.Duration) *PostContentmanagementDocumentsParams {
	var ()
	return &PostContentmanagementDocumentsParams{

		timeout: timeout,
	}
}

// NewPostContentmanagementDocumentsParamsWithContext creates a new PostContentmanagementDocumentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostContentmanagementDocumentsParamsWithContext(ctx context.Context) *PostContentmanagementDocumentsParams {
	var ()
	return &PostContentmanagementDocumentsParams{

		Context: ctx,
	}
}

// NewPostContentmanagementDocumentsParamsWithHTTPClient creates a new PostContentmanagementDocumentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostContentmanagementDocumentsParamsWithHTTPClient(client *http.Client) *PostContentmanagementDocumentsParams {
	var ()
	return &PostContentmanagementDocumentsParams{
		HTTPClient: client,
	}
}

/*PostContentmanagementDocumentsParams contains all the parameters to send to the API endpoint
for the post contentmanagement documents operation typically these are written to a http.Request
*/
type PostContentmanagementDocumentsParams struct {

	/*Body
	  Document

	*/
	Body *models.DocumentUpload
	/*CopySource
	  Copy a document within a workspace or to a new workspace. Provide a document ID as the copy source.

	*/
	CopySource *string
	/*MoveSource
	  Move a document to a new workspace. Provide a document ID as the move source.

	*/
	MoveSource *string
	/*Override
	  Override any lock on the source document

	*/
	Override *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post contentmanagement documents params
func (o *PostContentmanagementDocumentsParams) WithTimeout(timeout time.Duration) *PostContentmanagementDocumentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post contentmanagement documents params
func (o *PostContentmanagementDocumentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post contentmanagement documents params
func (o *PostContentmanagementDocumentsParams) WithContext(ctx context.Context) *PostContentmanagementDocumentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post contentmanagement documents params
func (o *PostContentmanagementDocumentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post contentmanagement documents params
func (o *PostContentmanagementDocumentsParams) WithHTTPClient(client *http.Client) *PostContentmanagementDocumentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post contentmanagement documents params
func (o *PostContentmanagementDocumentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post contentmanagement documents params
func (o *PostContentmanagementDocumentsParams) WithBody(body *models.DocumentUpload) *PostContentmanagementDocumentsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post contentmanagement documents params
func (o *PostContentmanagementDocumentsParams) SetBody(body *models.DocumentUpload) {
	o.Body = body
}

// WithCopySource adds the copySource to the post contentmanagement documents params
func (o *PostContentmanagementDocumentsParams) WithCopySource(copySource *string) *PostContentmanagementDocumentsParams {
	o.SetCopySource(copySource)
	return o
}

// SetCopySource adds the copySource to the post contentmanagement documents params
func (o *PostContentmanagementDocumentsParams) SetCopySource(copySource *string) {
	o.CopySource = copySource
}

// WithMoveSource adds the moveSource to the post contentmanagement documents params
func (o *PostContentmanagementDocumentsParams) WithMoveSource(moveSource *string) *PostContentmanagementDocumentsParams {
	o.SetMoveSource(moveSource)
	return o
}

// SetMoveSource adds the moveSource to the post contentmanagement documents params
func (o *PostContentmanagementDocumentsParams) SetMoveSource(moveSource *string) {
	o.MoveSource = moveSource
}

// WithOverride adds the override to the post contentmanagement documents params
func (o *PostContentmanagementDocumentsParams) WithOverride(override *bool) *PostContentmanagementDocumentsParams {
	o.SetOverride(override)
	return o
}

// SetOverride adds the override to the post contentmanagement documents params
func (o *PostContentmanagementDocumentsParams) SetOverride(override *bool) {
	o.Override = override
}

// WriteToRequest writes these params to a swagger request
func (o *PostContentmanagementDocumentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.CopySource != nil {

		// query param copySource
		var qrCopySource string
		if o.CopySource != nil {
			qrCopySource = *o.CopySource
		}
		qCopySource := qrCopySource
		if qCopySource != "" {
			if err := r.SetQueryParam("copySource", qCopySource); err != nil {
				return err
			}
		}

	}

	if o.MoveSource != nil {

		// query param moveSource
		var qrMoveSource string
		if o.MoveSource != nil {
			qrMoveSource = *o.MoveSource
		}
		qMoveSource := qrMoveSource
		if qMoveSource != "" {
			if err := r.SetQueryParam("moveSource", qMoveSource); err != nil {
				return err
			}
		}

	}

	if o.Override != nil {

		// query param override
		var qrOverride bool
		if o.Override != nil {
			qrOverride = *o.Override
		}
		qOverride := swag.FormatBool(qrOverride)
		if qOverride != "" {
			if err := r.SetQueryParam("override", qOverride); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

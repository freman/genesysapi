// Code generated by go-swagger; DO NOT EDIT.

package content_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetContentmanagementDocumentAuditsReader is a Reader for the GetContentmanagementDocumentAudits structure.
type GetContentmanagementDocumentAuditsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetContentmanagementDocumentAuditsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetContentmanagementDocumentAuditsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetContentmanagementDocumentAuditsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetContentmanagementDocumentAuditsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetContentmanagementDocumentAuditsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetContentmanagementDocumentAuditsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetContentmanagementDocumentAuditsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetContentmanagementDocumentAuditsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetContentmanagementDocumentAuditsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetContentmanagementDocumentAuditsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetContentmanagementDocumentAuditsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetContentmanagementDocumentAuditsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetContentmanagementDocumentAuditsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetContentmanagementDocumentAuditsOK creates a GetContentmanagementDocumentAuditsOK with default headers values
func NewGetContentmanagementDocumentAuditsOK() *GetContentmanagementDocumentAuditsOK {
	return &GetContentmanagementDocumentAuditsOK{}
}

/*GetContentmanagementDocumentAuditsOK handles this case with default header values.

successful operation
*/
type GetContentmanagementDocumentAuditsOK struct {
	Payload *models.DocumentAuditEntityListing
}

func (o *GetContentmanagementDocumentAuditsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/documents/{documentId}/audits][%d] getContentmanagementDocumentAuditsOK  %+v", 200, o.Payload)
}

func (o *GetContentmanagementDocumentAuditsOK) GetPayload() *models.DocumentAuditEntityListing {
	return o.Payload
}

func (o *GetContentmanagementDocumentAuditsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DocumentAuditEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementDocumentAuditsBadRequest creates a GetContentmanagementDocumentAuditsBadRequest with default headers values
func NewGetContentmanagementDocumentAuditsBadRequest() *GetContentmanagementDocumentAuditsBadRequest {
	return &GetContentmanagementDocumentAuditsBadRequest{}
}

/*GetContentmanagementDocumentAuditsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetContentmanagementDocumentAuditsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementDocumentAuditsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/documents/{documentId}/audits][%d] getContentmanagementDocumentAuditsBadRequest  %+v", 400, o.Payload)
}

func (o *GetContentmanagementDocumentAuditsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementDocumentAuditsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementDocumentAuditsUnauthorized creates a GetContentmanagementDocumentAuditsUnauthorized with default headers values
func NewGetContentmanagementDocumentAuditsUnauthorized() *GetContentmanagementDocumentAuditsUnauthorized {
	return &GetContentmanagementDocumentAuditsUnauthorized{}
}

/*GetContentmanagementDocumentAuditsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetContentmanagementDocumentAuditsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementDocumentAuditsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/documents/{documentId}/audits][%d] getContentmanagementDocumentAuditsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetContentmanagementDocumentAuditsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementDocumentAuditsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementDocumentAuditsForbidden creates a GetContentmanagementDocumentAuditsForbidden with default headers values
func NewGetContentmanagementDocumentAuditsForbidden() *GetContentmanagementDocumentAuditsForbidden {
	return &GetContentmanagementDocumentAuditsForbidden{}
}

/*GetContentmanagementDocumentAuditsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetContentmanagementDocumentAuditsForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementDocumentAuditsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/documents/{documentId}/audits][%d] getContentmanagementDocumentAuditsForbidden  %+v", 403, o.Payload)
}

func (o *GetContentmanagementDocumentAuditsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementDocumentAuditsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementDocumentAuditsNotFound creates a GetContentmanagementDocumentAuditsNotFound with default headers values
func NewGetContentmanagementDocumentAuditsNotFound() *GetContentmanagementDocumentAuditsNotFound {
	return &GetContentmanagementDocumentAuditsNotFound{}
}

/*GetContentmanagementDocumentAuditsNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetContentmanagementDocumentAuditsNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementDocumentAuditsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/documents/{documentId}/audits][%d] getContentmanagementDocumentAuditsNotFound  %+v", 404, o.Payload)
}

func (o *GetContentmanagementDocumentAuditsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementDocumentAuditsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementDocumentAuditsRequestTimeout creates a GetContentmanagementDocumentAuditsRequestTimeout with default headers values
func NewGetContentmanagementDocumentAuditsRequestTimeout() *GetContentmanagementDocumentAuditsRequestTimeout {
	return &GetContentmanagementDocumentAuditsRequestTimeout{}
}

/*GetContentmanagementDocumentAuditsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetContentmanagementDocumentAuditsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementDocumentAuditsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/documents/{documentId}/audits][%d] getContentmanagementDocumentAuditsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetContentmanagementDocumentAuditsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementDocumentAuditsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementDocumentAuditsRequestEntityTooLarge creates a GetContentmanagementDocumentAuditsRequestEntityTooLarge with default headers values
func NewGetContentmanagementDocumentAuditsRequestEntityTooLarge() *GetContentmanagementDocumentAuditsRequestEntityTooLarge {
	return &GetContentmanagementDocumentAuditsRequestEntityTooLarge{}
}

/*GetContentmanagementDocumentAuditsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetContentmanagementDocumentAuditsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementDocumentAuditsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/documents/{documentId}/audits][%d] getContentmanagementDocumentAuditsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetContentmanagementDocumentAuditsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementDocumentAuditsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementDocumentAuditsUnsupportedMediaType creates a GetContentmanagementDocumentAuditsUnsupportedMediaType with default headers values
func NewGetContentmanagementDocumentAuditsUnsupportedMediaType() *GetContentmanagementDocumentAuditsUnsupportedMediaType {
	return &GetContentmanagementDocumentAuditsUnsupportedMediaType{}
}

/*GetContentmanagementDocumentAuditsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetContentmanagementDocumentAuditsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementDocumentAuditsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/documents/{documentId}/audits][%d] getContentmanagementDocumentAuditsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetContentmanagementDocumentAuditsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementDocumentAuditsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementDocumentAuditsTooManyRequests creates a GetContentmanagementDocumentAuditsTooManyRequests with default headers values
func NewGetContentmanagementDocumentAuditsTooManyRequests() *GetContentmanagementDocumentAuditsTooManyRequests {
	return &GetContentmanagementDocumentAuditsTooManyRequests{}
}

/*GetContentmanagementDocumentAuditsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetContentmanagementDocumentAuditsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementDocumentAuditsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/documents/{documentId}/audits][%d] getContentmanagementDocumentAuditsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetContentmanagementDocumentAuditsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementDocumentAuditsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementDocumentAuditsInternalServerError creates a GetContentmanagementDocumentAuditsInternalServerError with default headers values
func NewGetContentmanagementDocumentAuditsInternalServerError() *GetContentmanagementDocumentAuditsInternalServerError {
	return &GetContentmanagementDocumentAuditsInternalServerError{}
}

/*GetContentmanagementDocumentAuditsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetContentmanagementDocumentAuditsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementDocumentAuditsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/documents/{documentId}/audits][%d] getContentmanagementDocumentAuditsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetContentmanagementDocumentAuditsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementDocumentAuditsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementDocumentAuditsServiceUnavailable creates a GetContentmanagementDocumentAuditsServiceUnavailable with default headers values
func NewGetContentmanagementDocumentAuditsServiceUnavailable() *GetContentmanagementDocumentAuditsServiceUnavailable {
	return &GetContentmanagementDocumentAuditsServiceUnavailable{}
}

/*GetContentmanagementDocumentAuditsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetContentmanagementDocumentAuditsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementDocumentAuditsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/documents/{documentId}/audits][%d] getContentmanagementDocumentAuditsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetContentmanagementDocumentAuditsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementDocumentAuditsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementDocumentAuditsGatewayTimeout creates a GetContentmanagementDocumentAuditsGatewayTimeout with default headers values
func NewGetContentmanagementDocumentAuditsGatewayTimeout() *GetContentmanagementDocumentAuditsGatewayTimeout {
	return &GetContentmanagementDocumentAuditsGatewayTimeout{}
}

/*GetContentmanagementDocumentAuditsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetContentmanagementDocumentAuditsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetContentmanagementDocumentAuditsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/documents/{documentId}/audits][%d] getContentmanagementDocumentAuditsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetContentmanagementDocumentAuditsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementDocumentAuditsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package content_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/freman/genesysapi/models"
)

// NewPostContentmanagementDocumentParams creates a new PostContentmanagementDocumentParams object
// with the default values initialized.
func NewPostContentmanagementDocumentParams() *PostContentmanagementDocumentParams {
	var ()
	return &PostContentmanagementDocumentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostContentmanagementDocumentParamsWithTimeout creates a new PostContentmanagementDocumentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostContentmanagementDocumentParamsWithTimeout(timeout time.Duration) *PostContentmanagementDocumentParams {
	var ()
	return &PostContentmanagementDocumentParams{

		timeout: timeout,
	}
}

// NewPostContentmanagementDocumentParamsWithContext creates a new PostContentmanagementDocumentParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostContentmanagementDocumentParamsWithContext(ctx context.Context) *PostContentmanagementDocumentParams {
	var ()
	return &PostContentmanagementDocumentParams{

		Context: ctx,
	}
}

// NewPostContentmanagementDocumentParamsWithHTTPClient creates a new PostContentmanagementDocumentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostContentmanagementDocumentParamsWithHTTPClient(client *http.Client) *PostContentmanagementDocumentParams {
	var ()
	return &PostContentmanagementDocumentParams{
		HTTPClient: client,
	}
}

/*PostContentmanagementDocumentParams contains all the parameters to send to the API endpoint
for the post contentmanagement document operation typically these are written to a http.Request
*/
type PostContentmanagementDocumentParams struct {

	/*Body
	  Document

	*/
	Body *models.DocumentUpdate
	/*DocumentID
	  Document ID

	*/
	DocumentID string
	/*Expand
	  Expand some document fields

	*/
	Expand *string
	/*Override
	  Override any lock on the document

	*/
	Override *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post contentmanagement document params
func (o *PostContentmanagementDocumentParams) WithTimeout(timeout time.Duration) *PostContentmanagementDocumentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post contentmanagement document params
func (o *PostContentmanagementDocumentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post contentmanagement document params
func (o *PostContentmanagementDocumentParams) WithContext(ctx context.Context) *PostContentmanagementDocumentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post contentmanagement document params
func (o *PostContentmanagementDocumentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post contentmanagement document params
func (o *PostContentmanagementDocumentParams) WithHTTPClient(client *http.Client) *PostContentmanagementDocumentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post contentmanagement document params
func (o *PostContentmanagementDocumentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post contentmanagement document params
func (o *PostContentmanagementDocumentParams) WithBody(body *models.DocumentUpdate) *PostContentmanagementDocumentParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post contentmanagement document params
func (o *PostContentmanagementDocumentParams) SetBody(body *models.DocumentUpdate) {
	o.Body = body
}

// WithDocumentID adds the documentID to the post contentmanagement document params
func (o *PostContentmanagementDocumentParams) WithDocumentID(documentID string) *PostContentmanagementDocumentParams {
	o.SetDocumentID(documentID)
	return o
}

// SetDocumentID adds the documentId to the post contentmanagement document params
func (o *PostContentmanagementDocumentParams) SetDocumentID(documentID string) {
	o.DocumentID = documentID
}

// WithExpand adds the expand to the post contentmanagement document params
func (o *PostContentmanagementDocumentParams) WithExpand(expand *string) *PostContentmanagementDocumentParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the post contentmanagement document params
func (o *PostContentmanagementDocumentParams) SetExpand(expand *string) {
	o.Expand = expand
}

// WithOverride adds the override to the post contentmanagement document params
func (o *PostContentmanagementDocumentParams) WithOverride(override *bool) *PostContentmanagementDocumentParams {
	o.SetOverride(override)
	return o
}

// SetOverride adds the override to the post contentmanagement document params
func (o *PostContentmanagementDocumentParams) SetOverride(override *bool) {
	o.Override = override
}

// WriteToRequest writes these params to a swagger request
func (o *PostContentmanagementDocumentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param documentId
	if err := r.SetPathParam("documentId", o.DocumentID); err != nil {
		return err
	}

	if o.Expand != nil {

		// query param expand
		var qrExpand string
		if o.Expand != nil {
			qrExpand = *o.Expand
		}
		qExpand := qrExpand
		if qExpand != "" {
			if err := r.SetQueryParam("expand", qExpand); err != nil {
				return err
			}
		}

	}

	if o.Override != nil {

		// query param override
		var qrOverride bool
		if o.Override != nil {
			qrOverride = *o.Override
		}
		qOverride := swag.FormatBool(qrOverride)
		if qOverride != "" {
			if err := r.SetQueryParam("override", qOverride); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

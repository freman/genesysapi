// Code generated by go-swagger; DO NOT EDIT.

package content_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetContentmanagementUsageReader is a Reader for the GetContentmanagementUsage structure.
type GetContentmanagementUsageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetContentmanagementUsageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetContentmanagementUsageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetContentmanagementUsageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetContentmanagementUsageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetContentmanagementUsageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetContentmanagementUsageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetContentmanagementUsageRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetContentmanagementUsageRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetContentmanagementUsageUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetContentmanagementUsageTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetContentmanagementUsageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetContentmanagementUsageServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetContentmanagementUsageGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetContentmanagementUsageOK creates a GetContentmanagementUsageOK with default headers values
func NewGetContentmanagementUsageOK() *GetContentmanagementUsageOK {
	return &GetContentmanagementUsageOK{}
}

/*
GetContentmanagementUsageOK describes a response with status code 200, with default header values.

successful operation
*/
type GetContentmanagementUsageOK struct {
	Payload *models.Usage
}

// IsSuccess returns true when this get contentmanagement usage o k response has a 2xx status code
func (o *GetContentmanagementUsageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get contentmanagement usage o k response has a 3xx status code
func (o *GetContentmanagementUsageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contentmanagement usage o k response has a 4xx status code
func (o *GetContentmanagementUsageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get contentmanagement usage o k response has a 5xx status code
func (o *GetContentmanagementUsageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get contentmanagement usage o k response a status code equal to that given
func (o *GetContentmanagementUsageOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetContentmanagementUsageOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageOK  %+v", 200, o.Payload)
}

func (o *GetContentmanagementUsageOK) String() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageOK  %+v", 200, o.Payload)
}

func (o *GetContentmanagementUsageOK) GetPayload() *models.Usage {
	return o.Payload
}

func (o *GetContentmanagementUsageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Usage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementUsageBadRequest creates a GetContentmanagementUsageBadRequest with default headers values
func NewGetContentmanagementUsageBadRequest() *GetContentmanagementUsageBadRequest {
	return &GetContentmanagementUsageBadRequest{}
}

/*
GetContentmanagementUsageBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetContentmanagementUsageBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get contentmanagement usage bad request response has a 2xx status code
func (o *GetContentmanagementUsageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contentmanagement usage bad request response has a 3xx status code
func (o *GetContentmanagementUsageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contentmanagement usage bad request response has a 4xx status code
func (o *GetContentmanagementUsageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get contentmanagement usage bad request response has a 5xx status code
func (o *GetContentmanagementUsageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get contentmanagement usage bad request response a status code equal to that given
func (o *GetContentmanagementUsageBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetContentmanagementUsageBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageBadRequest  %+v", 400, o.Payload)
}

func (o *GetContentmanagementUsageBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageBadRequest  %+v", 400, o.Payload)
}

func (o *GetContentmanagementUsageBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementUsageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementUsageUnauthorized creates a GetContentmanagementUsageUnauthorized with default headers values
func NewGetContentmanagementUsageUnauthorized() *GetContentmanagementUsageUnauthorized {
	return &GetContentmanagementUsageUnauthorized{}
}

/*
GetContentmanagementUsageUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetContentmanagementUsageUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get contentmanagement usage unauthorized response has a 2xx status code
func (o *GetContentmanagementUsageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contentmanagement usage unauthorized response has a 3xx status code
func (o *GetContentmanagementUsageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contentmanagement usage unauthorized response has a 4xx status code
func (o *GetContentmanagementUsageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get contentmanagement usage unauthorized response has a 5xx status code
func (o *GetContentmanagementUsageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get contentmanagement usage unauthorized response a status code equal to that given
func (o *GetContentmanagementUsageUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetContentmanagementUsageUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageUnauthorized  %+v", 401, o.Payload)
}

func (o *GetContentmanagementUsageUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageUnauthorized  %+v", 401, o.Payload)
}

func (o *GetContentmanagementUsageUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementUsageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementUsageForbidden creates a GetContentmanagementUsageForbidden with default headers values
func NewGetContentmanagementUsageForbidden() *GetContentmanagementUsageForbidden {
	return &GetContentmanagementUsageForbidden{}
}

/*
GetContentmanagementUsageForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetContentmanagementUsageForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get contentmanagement usage forbidden response has a 2xx status code
func (o *GetContentmanagementUsageForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contentmanagement usage forbidden response has a 3xx status code
func (o *GetContentmanagementUsageForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contentmanagement usage forbidden response has a 4xx status code
func (o *GetContentmanagementUsageForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get contentmanagement usage forbidden response has a 5xx status code
func (o *GetContentmanagementUsageForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get contentmanagement usage forbidden response a status code equal to that given
func (o *GetContentmanagementUsageForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetContentmanagementUsageForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageForbidden  %+v", 403, o.Payload)
}

func (o *GetContentmanagementUsageForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageForbidden  %+v", 403, o.Payload)
}

func (o *GetContentmanagementUsageForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementUsageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementUsageNotFound creates a GetContentmanagementUsageNotFound with default headers values
func NewGetContentmanagementUsageNotFound() *GetContentmanagementUsageNotFound {
	return &GetContentmanagementUsageNotFound{}
}

/*
GetContentmanagementUsageNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetContentmanagementUsageNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get contentmanagement usage not found response has a 2xx status code
func (o *GetContentmanagementUsageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contentmanagement usage not found response has a 3xx status code
func (o *GetContentmanagementUsageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contentmanagement usage not found response has a 4xx status code
func (o *GetContentmanagementUsageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get contentmanagement usage not found response has a 5xx status code
func (o *GetContentmanagementUsageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get contentmanagement usage not found response a status code equal to that given
func (o *GetContentmanagementUsageNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetContentmanagementUsageNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageNotFound  %+v", 404, o.Payload)
}

func (o *GetContentmanagementUsageNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageNotFound  %+v", 404, o.Payload)
}

func (o *GetContentmanagementUsageNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementUsageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementUsageRequestTimeout creates a GetContentmanagementUsageRequestTimeout with default headers values
func NewGetContentmanagementUsageRequestTimeout() *GetContentmanagementUsageRequestTimeout {
	return &GetContentmanagementUsageRequestTimeout{}
}

/*
GetContentmanagementUsageRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetContentmanagementUsageRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get contentmanagement usage request timeout response has a 2xx status code
func (o *GetContentmanagementUsageRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contentmanagement usage request timeout response has a 3xx status code
func (o *GetContentmanagementUsageRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contentmanagement usage request timeout response has a 4xx status code
func (o *GetContentmanagementUsageRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get contentmanagement usage request timeout response has a 5xx status code
func (o *GetContentmanagementUsageRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get contentmanagement usage request timeout response a status code equal to that given
func (o *GetContentmanagementUsageRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetContentmanagementUsageRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetContentmanagementUsageRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetContentmanagementUsageRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementUsageRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementUsageRequestEntityTooLarge creates a GetContentmanagementUsageRequestEntityTooLarge with default headers values
func NewGetContentmanagementUsageRequestEntityTooLarge() *GetContentmanagementUsageRequestEntityTooLarge {
	return &GetContentmanagementUsageRequestEntityTooLarge{}
}

/*
GetContentmanagementUsageRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetContentmanagementUsageRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get contentmanagement usage request entity too large response has a 2xx status code
func (o *GetContentmanagementUsageRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contentmanagement usage request entity too large response has a 3xx status code
func (o *GetContentmanagementUsageRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contentmanagement usage request entity too large response has a 4xx status code
func (o *GetContentmanagementUsageRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get contentmanagement usage request entity too large response has a 5xx status code
func (o *GetContentmanagementUsageRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get contentmanagement usage request entity too large response a status code equal to that given
func (o *GetContentmanagementUsageRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetContentmanagementUsageRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetContentmanagementUsageRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetContentmanagementUsageRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementUsageRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementUsageUnsupportedMediaType creates a GetContentmanagementUsageUnsupportedMediaType with default headers values
func NewGetContentmanagementUsageUnsupportedMediaType() *GetContentmanagementUsageUnsupportedMediaType {
	return &GetContentmanagementUsageUnsupportedMediaType{}
}

/*
GetContentmanagementUsageUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetContentmanagementUsageUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get contentmanagement usage unsupported media type response has a 2xx status code
func (o *GetContentmanagementUsageUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contentmanagement usage unsupported media type response has a 3xx status code
func (o *GetContentmanagementUsageUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contentmanagement usage unsupported media type response has a 4xx status code
func (o *GetContentmanagementUsageUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get contentmanagement usage unsupported media type response has a 5xx status code
func (o *GetContentmanagementUsageUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get contentmanagement usage unsupported media type response a status code equal to that given
func (o *GetContentmanagementUsageUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetContentmanagementUsageUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetContentmanagementUsageUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetContentmanagementUsageUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementUsageUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementUsageTooManyRequests creates a GetContentmanagementUsageTooManyRequests with default headers values
func NewGetContentmanagementUsageTooManyRequests() *GetContentmanagementUsageTooManyRequests {
	return &GetContentmanagementUsageTooManyRequests{}
}

/*
GetContentmanagementUsageTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetContentmanagementUsageTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get contentmanagement usage too many requests response has a 2xx status code
func (o *GetContentmanagementUsageTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contentmanagement usage too many requests response has a 3xx status code
func (o *GetContentmanagementUsageTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contentmanagement usage too many requests response has a 4xx status code
func (o *GetContentmanagementUsageTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get contentmanagement usage too many requests response has a 5xx status code
func (o *GetContentmanagementUsageTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get contentmanagement usage too many requests response a status code equal to that given
func (o *GetContentmanagementUsageTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetContentmanagementUsageTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetContentmanagementUsageTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetContentmanagementUsageTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementUsageTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementUsageInternalServerError creates a GetContentmanagementUsageInternalServerError with default headers values
func NewGetContentmanagementUsageInternalServerError() *GetContentmanagementUsageInternalServerError {
	return &GetContentmanagementUsageInternalServerError{}
}

/*
GetContentmanagementUsageInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetContentmanagementUsageInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get contentmanagement usage internal server error response has a 2xx status code
func (o *GetContentmanagementUsageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contentmanagement usage internal server error response has a 3xx status code
func (o *GetContentmanagementUsageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contentmanagement usage internal server error response has a 4xx status code
func (o *GetContentmanagementUsageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get contentmanagement usage internal server error response has a 5xx status code
func (o *GetContentmanagementUsageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get contentmanagement usage internal server error response a status code equal to that given
func (o *GetContentmanagementUsageInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetContentmanagementUsageInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetContentmanagementUsageInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetContentmanagementUsageInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementUsageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementUsageServiceUnavailable creates a GetContentmanagementUsageServiceUnavailable with default headers values
func NewGetContentmanagementUsageServiceUnavailable() *GetContentmanagementUsageServiceUnavailable {
	return &GetContentmanagementUsageServiceUnavailable{}
}

/*
GetContentmanagementUsageServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetContentmanagementUsageServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get contentmanagement usage service unavailable response has a 2xx status code
func (o *GetContentmanagementUsageServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contentmanagement usage service unavailable response has a 3xx status code
func (o *GetContentmanagementUsageServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contentmanagement usage service unavailable response has a 4xx status code
func (o *GetContentmanagementUsageServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get contentmanagement usage service unavailable response has a 5xx status code
func (o *GetContentmanagementUsageServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get contentmanagement usage service unavailable response a status code equal to that given
func (o *GetContentmanagementUsageServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetContentmanagementUsageServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetContentmanagementUsageServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetContentmanagementUsageServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementUsageServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentmanagementUsageGatewayTimeout creates a GetContentmanagementUsageGatewayTimeout with default headers values
func NewGetContentmanagementUsageGatewayTimeout() *GetContentmanagementUsageGatewayTimeout {
	return &GetContentmanagementUsageGatewayTimeout{}
}

/*
GetContentmanagementUsageGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetContentmanagementUsageGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get contentmanagement usage gateway timeout response has a 2xx status code
func (o *GetContentmanagementUsageGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contentmanagement usage gateway timeout response has a 3xx status code
func (o *GetContentmanagementUsageGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contentmanagement usage gateway timeout response has a 4xx status code
func (o *GetContentmanagementUsageGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get contentmanagement usage gateway timeout response has a 5xx status code
func (o *GetContentmanagementUsageGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get contentmanagement usage gateway timeout response a status code equal to that given
func (o *GetContentmanagementUsageGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetContentmanagementUsageGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetContentmanagementUsageGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/contentmanagement/usage][%d] getContentmanagementUsageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetContentmanagementUsageGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetContentmanagementUsageGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

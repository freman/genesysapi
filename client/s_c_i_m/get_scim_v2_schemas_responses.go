// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetScimV2SchemasReader is a Reader for the GetScimV2Schemas structure.
type GetScimV2SchemasReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScimV2SchemasReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScimV2SchemasOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetScimV2SchemasBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetScimV2SchemasUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScimV2SchemasForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScimV2SchemasNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetScimV2SchemasRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetScimV2SchemasRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetScimV2SchemasUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScimV2SchemasTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScimV2SchemasInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetScimV2SchemasServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetScimV2SchemasGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScimV2SchemasOK creates a GetScimV2SchemasOK with default headers values
func NewGetScimV2SchemasOK() *GetScimV2SchemasOK {
	return &GetScimV2SchemasOK{}
}

/*GetScimV2SchemasOK handles this case with default header values.

successful operation
*/
type GetScimV2SchemasOK struct {
	Payload *models.ScimV2SchemaListResponse
}

func (o *GetScimV2SchemasOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas][%d] getScimV2SchemasOK  %+v", 200, o.Payload)
}

func (o *GetScimV2SchemasOK) GetPayload() *models.ScimV2SchemaListResponse {
	return o.Payload
}

func (o *GetScimV2SchemasOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimV2SchemaListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemasBadRequest creates a GetScimV2SchemasBadRequest with default headers values
func NewGetScimV2SchemasBadRequest() *GetScimV2SchemasBadRequest {
	return &GetScimV2SchemasBadRequest{}
}

/*GetScimV2SchemasBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetScimV2SchemasBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2SchemasBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas][%d] getScimV2SchemasBadRequest  %+v", 400, o.Payload)
}

func (o *GetScimV2SchemasBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemasBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemasUnauthorized creates a GetScimV2SchemasUnauthorized with default headers values
func NewGetScimV2SchemasUnauthorized() *GetScimV2SchemasUnauthorized {
	return &GetScimV2SchemasUnauthorized{}
}

/*GetScimV2SchemasUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetScimV2SchemasUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2SchemasUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas][%d] getScimV2SchemasUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScimV2SchemasUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemasUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemasForbidden creates a GetScimV2SchemasForbidden with default headers values
func NewGetScimV2SchemasForbidden() *GetScimV2SchemasForbidden {
	return &GetScimV2SchemasForbidden{}
}

/*GetScimV2SchemasForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetScimV2SchemasForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2SchemasForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas][%d] getScimV2SchemasForbidden  %+v", 403, o.Payload)
}

func (o *GetScimV2SchemasForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemasForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemasNotFound creates a GetScimV2SchemasNotFound with default headers values
func NewGetScimV2SchemasNotFound() *GetScimV2SchemasNotFound {
	return &GetScimV2SchemasNotFound{}
}

/*GetScimV2SchemasNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetScimV2SchemasNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2SchemasNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas][%d] getScimV2SchemasNotFound  %+v", 404, o.Payload)
}

func (o *GetScimV2SchemasNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemasNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemasRequestTimeout creates a GetScimV2SchemasRequestTimeout with default headers values
func NewGetScimV2SchemasRequestTimeout() *GetScimV2SchemasRequestTimeout {
	return &GetScimV2SchemasRequestTimeout{}
}

/*GetScimV2SchemasRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetScimV2SchemasRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2SchemasRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas][%d] getScimV2SchemasRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScimV2SchemasRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemasRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemasRequestEntityTooLarge creates a GetScimV2SchemasRequestEntityTooLarge with default headers values
func NewGetScimV2SchemasRequestEntityTooLarge() *GetScimV2SchemasRequestEntityTooLarge {
	return &GetScimV2SchemasRequestEntityTooLarge{}
}

/*GetScimV2SchemasRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetScimV2SchemasRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2SchemasRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas][%d] getScimV2SchemasRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScimV2SchemasRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemasRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemasUnsupportedMediaType creates a GetScimV2SchemasUnsupportedMediaType with default headers values
func NewGetScimV2SchemasUnsupportedMediaType() *GetScimV2SchemasUnsupportedMediaType {
	return &GetScimV2SchemasUnsupportedMediaType{}
}

/*GetScimV2SchemasUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetScimV2SchemasUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2SchemasUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas][%d] getScimV2SchemasUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScimV2SchemasUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemasUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemasTooManyRequests creates a GetScimV2SchemasTooManyRequests with default headers values
func NewGetScimV2SchemasTooManyRequests() *GetScimV2SchemasTooManyRequests {
	return &GetScimV2SchemasTooManyRequests{}
}

/*GetScimV2SchemasTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetScimV2SchemasTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2SchemasTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas][%d] getScimV2SchemasTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScimV2SchemasTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemasTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemasInternalServerError creates a GetScimV2SchemasInternalServerError with default headers values
func NewGetScimV2SchemasInternalServerError() *GetScimV2SchemasInternalServerError {
	return &GetScimV2SchemasInternalServerError{}
}

/*GetScimV2SchemasInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetScimV2SchemasInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2SchemasInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas][%d] getScimV2SchemasInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScimV2SchemasInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemasInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemasServiceUnavailable creates a GetScimV2SchemasServiceUnavailable with default headers values
func NewGetScimV2SchemasServiceUnavailable() *GetScimV2SchemasServiceUnavailable {
	return &GetScimV2SchemasServiceUnavailable{}
}

/*GetScimV2SchemasServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetScimV2SchemasServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2SchemasServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas][%d] getScimV2SchemasServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScimV2SchemasServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemasServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemasGatewayTimeout creates a GetScimV2SchemasGatewayTimeout with default headers values
func NewGetScimV2SchemasGatewayTimeout() *GetScimV2SchemasGatewayTimeout {
	return &GetScimV2SchemasGatewayTimeout{}
}

/*GetScimV2SchemasGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetScimV2SchemasGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2SchemasGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas][%d] getScimV2SchemasGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScimV2SchemasGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemasGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetScimUsersReader is a Reader for the GetScimUsers structure.
type GetScimUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScimUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScimUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetScimUsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetScimUsersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScimUsersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScimUsersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetScimUsersRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetScimUsersRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetScimUsersUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScimUsersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScimUsersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetScimUsersServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetScimUsersGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScimUsersOK creates a GetScimUsersOK with default headers values
func NewGetScimUsersOK() *GetScimUsersOK {
	return &GetScimUsersOK{}
}

/*GetScimUsersOK handles this case with default header values.

successful operation
*/
type GetScimUsersOK struct {
	Payload *models.ScimUserListResponse
}

func (o *GetScimUsersOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users][%d] getScimUsersOK  %+v", 200, o.Payload)
}

func (o *GetScimUsersOK) GetPayload() *models.ScimUserListResponse {
	return o.Payload
}

func (o *GetScimUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimUserListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUsersBadRequest creates a GetScimUsersBadRequest with default headers values
func NewGetScimUsersBadRequest() *GetScimUsersBadRequest {
	return &GetScimUsersBadRequest{}
}

/*GetScimUsersBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetScimUsersBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetScimUsersBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users][%d] getScimUsersBadRequest  %+v", 400, o.Payload)
}

func (o *GetScimUsersBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUsersUnauthorized creates a GetScimUsersUnauthorized with default headers values
func NewGetScimUsersUnauthorized() *GetScimUsersUnauthorized {
	return &GetScimUsersUnauthorized{}
}

/*GetScimUsersUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetScimUsersUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetScimUsersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users][%d] getScimUsersUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScimUsersUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUsersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUsersForbidden creates a GetScimUsersForbidden with default headers values
func NewGetScimUsersForbidden() *GetScimUsersForbidden {
	return &GetScimUsersForbidden{}
}

/*GetScimUsersForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetScimUsersForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetScimUsersForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users][%d] getScimUsersForbidden  %+v", 403, o.Payload)
}

func (o *GetScimUsersForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUsersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUsersNotFound creates a GetScimUsersNotFound with default headers values
func NewGetScimUsersNotFound() *GetScimUsersNotFound {
	return &GetScimUsersNotFound{}
}

/*GetScimUsersNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetScimUsersNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetScimUsersNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users][%d] getScimUsersNotFound  %+v", 404, o.Payload)
}

func (o *GetScimUsersNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUsersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUsersRequestTimeout creates a GetScimUsersRequestTimeout with default headers values
func NewGetScimUsersRequestTimeout() *GetScimUsersRequestTimeout {
	return &GetScimUsersRequestTimeout{}
}

/*GetScimUsersRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetScimUsersRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScimUsersRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users][%d] getScimUsersRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScimUsersRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUsersRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUsersRequestEntityTooLarge creates a GetScimUsersRequestEntityTooLarge with default headers values
func NewGetScimUsersRequestEntityTooLarge() *GetScimUsersRequestEntityTooLarge {
	return &GetScimUsersRequestEntityTooLarge{}
}

/*GetScimUsersRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetScimUsersRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetScimUsersRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users][%d] getScimUsersRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScimUsersRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUsersRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUsersUnsupportedMediaType creates a GetScimUsersUnsupportedMediaType with default headers values
func NewGetScimUsersUnsupportedMediaType() *GetScimUsersUnsupportedMediaType {
	return &GetScimUsersUnsupportedMediaType{}
}

/*GetScimUsersUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetScimUsersUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetScimUsersUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users][%d] getScimUsersUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScimUsersUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUsersUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUsersTooManyRequests creates a GetScimUsersTooManyRequests with default headers values
func NewGetScimUsersTooManyRequests() *GetScimUsersTooManyRequests {
	return &GetScimUsersTooManyRequests{}
}

/*GetScimUsersTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetScimUsersTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetScimUsersTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users][%d] getScimUsersTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScimUsersTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUsersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUsersInternalServerError creates a GetScimUsersInternalServerError with default headers values
func NewGetScimUsersInternalServerError() *GetScimUsersInternalServerError {
	return &GetScimUsersInternalServerError{}
}

/*GetScimUsersInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetScimUsersInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetScimUsersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users][%d] getScimUsersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScimUsersInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUsersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUsersServiceUnavailable creates a GetScimUsersServiceUnavailable with default headers values
func NewGetScimUsersServiceUnavailable() *GetScimUsersServiceUnavailable {
	return &GetScimUsersServiceUnavailable{}
}

/*GetScimUsersServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetScimUsersServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetScimUsersServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users][%d] getScimUsersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScimUsersServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUsersServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUsersGatewayTimeout creates a GetScimUsersGatewayTimeout with default headers values
func NewGetScimUsersGatewayTimeout() *GetScimUsersGatewayTimeout {
	return &GetScimUsersGatewayTimeout{}
}

/*GetScimUsersGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetScimUsersGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScimUsersGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users][%d] getScimUsersGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScimUsersGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUsersGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

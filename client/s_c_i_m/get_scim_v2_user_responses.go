// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetScimV2UserReader is a Reader for the GetScimV2User structure.
type GetScimV2UserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScimV2UserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScimV2UserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewGetScimV2UserNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewGetScimV2UserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetScimV2UserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScimV2UserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScimV2UserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetScimV2UserRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetScimV2UserConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetScimV2UserRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetScimV2UserUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScimV2UserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScimV2UserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetScimV2UserServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetScimV2UserGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScimV2UserOK creates a GetScimV2UserOK with default headers values
func NewGetScimV2UserOK() *GetScimV2UserOK {
	return &GetScimV2UserOK{}
}

/*GetScimV2UserOK handles this case with default header values.

successful operation
*/
type GetScimV2UserOK struct {
	Payload *models.ScimV2User
}

func (o *GetScimV2UserOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users/{userId}][%d] getScimV2UserOK  %+v", 200, o.Payload)
}

func (o *GetScimV2UserOK) GetPayload() *models.ScimV2User {
	return o.Payload
}

func (o *GetScimV2UserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimV2User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UserNotModified creates a GetScimV2UserNotModified with default headers values
func NewGetScimV2UserNotModified() *GetScimV2UserNotModified {
	return &GetScimV2UserNotModified{}
}

/*GetScimV2UserNotModified handles this case with default header values.

If-Non-Match header matches current version. No content returned.
*/
type GetScimV2UserNotModified struct {
}

func (o *GetScimV2UserNotModified) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users/{userId}][%d] getScimV2UserNotModified ", 304)
}

func (o *GetScimV2UserNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetScimV2UserBadRequest creates a GetScimV2UserBadRequest with default headers values
func NewGetScimV2UserBadRequest() *GetScimV2UserBadRequest {
	return &GetScimV2UserBadRequest{}
}

/*GetScimV2UserBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetScimV2UserBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UserBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users/{userId}][%d] getScimV2UserBadRequest  %+v", 400, o.Payload)
}

func (o *GetScimV2UserBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UserUnauthorized creates a GetScimV2UserUnauthorized with default headers values
func NewGetScimV2UserUnauthorized() *GetScimV2UserUnauthorized {
	return &GetScimV2UserUnauthorized{}
}

/*GetScimV2UserUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetScimV2UserUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UserUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users/{userId}][%d] getScimV2UserUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScimV2UserUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UserForbidden creates a GetScimV2UserForbidden with default headers values
func NewGetScimV2UserForbidden() *GetScimV2UserForbidden {
	return &GetScimV2UserForbidden{}
}

/*GetScimV2UserForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetScimV2UserForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UserForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users/{userId}][%d] getScimV2UserForbidden  %+v", 403, o.Payload)
}

func (o *GetScimV2UserForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UserNotFound creates a GetScimV2UserNotFound with default headers values
func NewGetScimV2UserNotFound() *GetScimV2UserNotFound {
	return &GetScimV2UserNotFound{}
}

/*GetScimV2UserNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetScimV2UserNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UserNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users/{userId}][%d] getScimV2UserNotFound  %+v", 404, o.Payload)
}

func (o *GetScimV2UserNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UserRequestTimeout creates a GetScimV2UserRequestTimeout with default headers values
func NewGetScimV2UserRequestTimeout() *GetScimV2UserRequestTimeout {
	return &GetScimV2UserRequestTimeout{}
}

/*GetScimV2UserRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetScimV2UserRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UserRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users/{userId}][%d] getScimV2UserRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScimV2UserRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UserRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UserConflict creates a GetScimV2UserConflict with default headers values
func NewGetScimV2UserConflict() *GetScimV2UserConflict {
	return &GetScimV2UserConflict{}
}

/*GetScimV2UserConflict handles this case with default header values.

Conflict
*/
type GetScimV2UserConflict struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UserConflict) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users/{userId}][%d] getScimV2UserConflict  %+v", 409, o.Payload)
}

func (o *GetScimV2UserConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UserConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UserRequestEntityTooLarge creates a GetScimV2UserRequestEntityTooLarge with default headers values
func NewGetScimV2UserRequestEntityTooLarge() *GetScimV2UserRequestEntityTooLarge {
	return &GetScimV2UserRequestEntityTooLarge{}
}

/*GetScimV2UserRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetScimV2UserRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UserRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users/{userId}][%d] getScimV2UserRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScimV2UserRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UserRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UserUnsupportedMediaType creates a GetScimV2UserUnsupportedMediaType with default headers values
func NewGetScimV2UserUnsupportedMediaType() *GetScimV2UserUnsupportedMediaType {
	return &GetScimV2UserUnsupportedMediaType{}
}

/*GetScimV2UserUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetScimV2UserUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UserUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users/{userId}][%d] getScimV2UserUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScimV2UserUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UserUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UserTooManyRequests creates a GetScimV2UserTooManyRequests with default headers values
func NewGetScimV2UserTooManyRequests() *GetScimV2UserTooManyRequests {
	return &GetScimV2UserTooManyRequests{}
}

/*GetScimV2UserTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetScimV2UserTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UserTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users/{userId}][%d] getScimV2UserTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScimV2UserTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UserInternalServerError creates a GetScimV2UserInternalServerError with default headers values
func NewGetScimV2UserInternalServerError() *GetScimV2UserInternalServerError {
	return &GetScimV2UserInternalServerError{}
}

/*GetScimV2UserInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetScimV2UserInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UserInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users/{userId}][%d] getScimV2UserInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScimV2UserInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UserServiceUnavailable creates a GetScimV2UserServiceUnavailable with default headers values
func NewGetScimV2UserServiceUnavailable() *GetScimV2UserServiceUnavailable {
	return &GetScimV2UserServiceUnavailable{}
}

/*GetScimV2UserServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetScimV2UserServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UserServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users/{userId}][%d] getScimV2UserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScimV2UserServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UserServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UserGatewayTimeout creates a GetScimV2UserGatewayTimeout with default headers values
func NewGetScimV2UserGatewayTimeout() *GetScimV2UserGatewayTimeout {
	return &GetScimV2UserGatewayTimeout{}
}

/*GetScimV2UserGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetScimV2UserGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UserGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users/{userId}][%d] getScimV2UserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScimV2UserGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UserGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetScimV2UsersReader is a Reader for the GetScimV2Users structure.
type GetScimV2UsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScimV2UsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScimV2UsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetScimV2UsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetScimV2UsersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScimV2UsersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScimV2UsersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetScimV2UsersRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetScimV2UsersRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetScimV2UsersUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScimV2UsersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScimV2UsersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetScimV2UsersServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetScimV2UsersGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScimV2UsersOK creates a GetScimV2UsersOK with default headers values
func NewGetScimV2UsersOK() *GetScimV2UsersOK {
	return &GetScimV2UsersOK{}
}

/*GetScimV2UsersOK handles this case with default header values.

successful operation
*/
type GetScimV2UsersOK struct {
	Payload *models.ScimUserListResponse
}

func (o *GetScimV2UsersOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users][%d] getScimV2UsersOK  %+v", 200, o.Payload)
}

func (o *GetScimV2UsersOK) GetPayload() *models.ScimUserListResponse {
	return o.Payload
}

func (o *GetScimV2UsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimUserListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UsersBadRequest creates a GetScimV2UsersBadRequest with default headers values
func NewGetScimV2UsersBadRequest() *GetScimV2UsersBadRequest {
	return &GetScimV2UsersBadRequest{}
}

/*GetScimV2UsersBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetScimV2UsersBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UsersBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users][%d] getScimV2UsersBadRequest  %+v", 400, o.Payload)
}

func (o *GetScimV2UsersBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UsersUnauthorized creates a GetScimV2UsersUnauthorized with default headers values
func NewGetScimV2UsersUnauthorized() *GetScimV2UsersUnauthorized {
	return &GetScimV2UsersUnauthorized{}
}

/*GetScimV2UsersUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetScimV2UsersUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UsersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users][%d] getScimV2UsersUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScimV2UsersUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UsersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UsersForbidden creates a GetScimV2UsersForbidden with default headers values
func NewGetScimV2UsersForbidden() *GetScimV2UsersForbidden {
	return &GetScimV2UsersForbidden{}
}

/*GetScimV2UsersForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetScimV2UsersForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UsersForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users][%d] getScimV2UsersForbidden  %+v", 403, o.Payload)
}

func (o *GetScimV2UsersForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UsersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UsersNotFound creates a GetScimV2UsersNotFound with default headers values
func NewGetScimV2UsersNotFound() *GetScimV2UsersNotFound {
	return &GetScimV2UsersNotFound{}
}

/*GetScimV2UsersNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetScimV2UsersNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UsersNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users][%d] getScimV2UsersNotFound  %+v", 404, o.Payload)
}

func (o *GetScimV2UsersNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UsersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UsersRequestTimeout creates a GetScimV2UsersRequestTimeout with default headers values
func NewGetScimV2UsersRequestTimeout() *GetScimV2UsersRequestTimeout {
	return &GetScimV2UsersRequestTimeout{}
}

/*GetScimV2UsersRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetScimV2UsersRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UsersRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users][%d] getScimV2UsersRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScimV2UsersRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UsersRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UsersRequestEntityTooLarge creates a GetScimV2UsersRequestEntityTooLarge with default headers values
func NewGetScimV2UsersRequestEntityTooLarge() *GetScimV2UsersRequestEntityTooLarge {
	return &GetScimV2UsersRequestEntityTooLarge{}
}

/*GetScimV2UsersRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetScimV2UsersRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UsersRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users][%d] getScimV2UsersRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScimV2UsersRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UsersRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UsersUnsupportedMediaType creates a GetScimV2UsersUnsupportedMediaType with default headers values
func NewGetScimV2UsersUnsupportedMediaType() *GetScimV2UsersUnsupportedMediaType {
	return &GetScimV2UsersUnsupportedMediaType{}
}

/*GetScimV2UsersUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetScimV2UsersUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UsersUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users][%d] getScimV2UsersUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScimV2UsersUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UsersUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UsersTooManyRequests creates a GetScimV2UsersTooManyRequests with default headers values
func NewGetScimV2UsersTooManyRequests() *GetScimV2UsersTooManyRequests {
	return &GetScimV2UsersTooManyRequests{}
}

/*GetScimV2UsersTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetScimV2UsersTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UsersTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users][%d] getScimV2UsersTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScimV2UsersTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UsersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UsersInternalServerError creates a GetScimV2UsersInternalServerError with default headers values
func NewGetScimV2UsersInternalServerError() *GetScimV2UsersInternalServerError {
	return &GetScimV2UsersInternalServerError{}
}

/*GetScimV2UsersInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetScimV2UsersInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UsersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users][%d] getScimV2UsersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScimV2UsersInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UsersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UsersServiceUnavailable creates a GetScimV2UsersServiceUnavailable with default headers values
func NewGetScimV2UsersServiceUnavailable() *GetScimV2UsersServiceUnavailable {
	return &GetScimV2UsersServiceUnavailable{}
}

/*GetScimV2UsersServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetScimV2UsersServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UsersServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users][%d] getScimV2UsersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScimV2UsersServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UsersServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2UsersGatewayTimeout creates a GetScimV2UsersGatewayTimeout with default headers values
func NewGetScimV2UsersGatewayTimeout() *GetScimV2UsersGatewayTimeout {
	return &GetScimV2UsersGatewayTimeout{}
}

/*GetScimV2UsersGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetScimV2UsersGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2UsersGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/users][%d] getScimV2UsersGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScimV2UsersGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2UsersGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

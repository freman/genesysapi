// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchScimGroupReader is a Reader for the PatchScimGroup structure.
type PatchScimGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchScimGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchScimGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchScimGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchScimGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchScimGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchScimGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchScimGroupRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchScimGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchScimGroupRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchScimGroupUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchScimGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchScimGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchScimGroupServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchScimGroupGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchScimGroupOK creates a PatchScimGroupOK with default headers values
func NewPatchScimGroupOK() *PatchScimGroupOK {
	return &PatchScimGroupOK{}
}

/*
PatchScimGroupOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchScimGroupOK struct {
	Payload *models.ScimV2Group
}

// IsSuccess returns true when this patch scim group o k response has a 2xx status code
func (o *PatchScimGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch scim group o k response has a 3xx status code
func (o *PatchScimGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch scim group o k response has a 4xx status code
func (o *PatchScimGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch scim group o k response has a 5xx status code
func (o *PatchScimGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch scim group o k response a status code equal to that given
func (o *PatchScimGroupOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchScimGroupOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupOK  %+v", 200, o.Payload)
}

func (o *PatchScimGroupOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupOK  %+v", 200, o.Payload)
}

func (o *PatchScimGroupOK) GetPayload() *models.ScimV2Group {
	return o.Payload
}

func (o *PatchScimGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimV2Group)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimGroupBadRequest creates a PatchScimGroupBadRequest with default headers values
func NewPatchScimGroupBadRequest() *PatchScimGroupBadRequest {
	return &PatchScimGroupBadRequest{}
}

/*
PatchScimGroupBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchScimGroupBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch scim group bad request response has a 2xx status code
func (o *PatchScimGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch scim group bad request response has a 3xx status code
func (o *PatchScimGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch scim group bad request response has a 4xx status code
func (o *PatchScimGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch scim group bad request response has a 5xx status code
func (o *PatchScimGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch scim group bad request response a status code equal to that given
func (o *PatchScimGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchScimGroupBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupBadRequest  %+v", 400, o.Payload)
}

func (o *PatchScimGroupBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupBadRequest  %+v", 400, o.Payload)
}

func (o *PatchScimGroupBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimGroupUnauthorized creates a PatchScimGroupUnauthorized with default headers values
func NewPatchScimGroupUnauthorized() *PatchScimGroupUnauthorized {
	return &PatchScimGroupUnauthorized{}
}

/*
PatchScimGroupUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchScimGroupUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch scim group unauthorized response has a 2xx status code
func (o *PatchScimGroupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch scim group unauthorized response has a 3xx status code
func (o *PatchScimGroupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch scim group unauthorized response has a 4xx status code
func (o *PatchScimGroupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch scim group unauthorized response has a 5xx status code
func (o *PatchScimGroupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch scim group unauthorized response a status code equal to that given
func (o *PatchScimGroupUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchScimGroupUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchScimGroupUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchScimGroupUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimGroupForbidden creates a PatchScimGroupForbidden with default headers values
func NewPatchScimGroupForbidden() *PatchScimGroupForbidden {
	return &PatchScimGroupForbidden{}
}

/*
PatchScimGroupForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchScimGroupForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch scim group forbidden response has a 2xx status code
func (o *PatchScimGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch scim group forbidden response has a 3xx status code
func (o *PatchScimGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch scim group forbidden response has a 4xx status code
func (o *PatchScimGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch scim group forbidden response has a 5xx status code
func (o *PatchScimGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch scim group forbidden response a status code equal to that given
func (o *PatchScimGroupForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchScimGroupForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupForbidden  %+v", 403, o.Payload)
}

func (o *PatchScimGroupForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupForbidden  %+v", 403, o.Payload)
}

func (o *PatchScimGroupForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimGroupNotFound creates a PatchScimGroupNotFound with default headers values
func NewPatchScimGroupNotFound() *PatchScimGroupNotFound {
	return &PatchScimGroupNotFound{}
}

/*
PatchScimGroupNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchScimGroupNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch scim group not found response has a 2xx status code
func (o *PatchScimGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch scim group not found response has a 3xx status code
func (o *PatchScimGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch scim group not found response has a 4xx status code
func (o *PatchScimGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch scim group not found response has a 5xx status code
func (o *PatchScimGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch scim group not found response a status code equal to that given
func (o *PatchScimGroupNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchScimGroupNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupNotFound  %+v", 404, o.Payload)
}

func (o *PatchScimGroupNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupNotFound  %+v", 404, o.Payload)
}

func (o *PatchScimGroupNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimGroupRequestTimeout creates a PatchScimGroupRequestTimeout with default headers values
func NewPatchScimGroupRequestTimeout() *PatchScimGroupRequestTimeout {
	return &PatchScimGroupRequestTimeout{}
}

/*
PatchScimGroupRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchScimGroupRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch scim group request timeout response has a 2xx status code
func (o *PatchScimGroupRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch scim group request timeout response has a 3xx status code
func (o *PatchScimGroupRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch scim group request timeout response has a 4xx status code
func (o *PatchScimGroupRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch scim group request timeout response has a 5xx status code
func (o *PatchScimGroupRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch scim group request timeout response a status code equal to that given
func (o *PatchScimGroupRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchScimGroupRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchScimGroupRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchScimGroupRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimGroupRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimGroupConflict creates a PatchScimGroupConflict with default headers values
func NewPatchScimGroupConflict() *PatchScimGroupConflict {
	return &PatchScimGroupConflict{}
}

/*
PatchScimGroupConflict describes a response with status code 409, with default header values.

Version does not match current version.
*/
type PatchScimGroupConflict struct {
	Payload *models.ScimError
}

// IsSuccess returns true when this patch scim group conflict response has a 2xx status code
func (o *PatchScimGroupConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch scim group conflict response has a 3xx status code
func (o *PatchScimGroupConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch scim group conflict response has a 4xx status code
func (o *PatchScimGroupConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch scim group conflict response has a 5xx status code
func (o *PatchScimGroupConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this patch scim group conflict response a status code equal to that given
func (o *PatchScimGroupConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PatchScimGroupConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupConflict  %+v", 409, o.Payload)
}

func (o *PatchScimGroupConflict) String() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupConflict  %+v", 409, o.Payload)
}

func (o *PatchScimGroupConflict) GetPayload() *models.ScimError {
	return o.Payload
}

func (o *PatchScimGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimGroupRequestEntityTooLarge creates a PatchScimGroupRequestEntityTooLarge with default headers values
func NewPatchScimGroupRequestEntityTooLarge() *PatchScimGroupRequestEntityTooLarge {
	return &PatchScimGroupRequestEntityTooLarge{}
}

/*
PatchScimGroupRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchScimGroupRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch scim group request entity too large response has a 2xx status code
func (o *PatchScimGroupRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch scim group request entity too large response has a 3xx status code
func (o *PatchScimGroupRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch scim group request entity too large response has a 4xx status code
func (o *PatchScimGroupRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch scim group request entity too large response has a 5xx status code
func (o *PatchScimGroupRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch scim group request entity too large response a status code equal to that given
func (o *PatchScimGroupRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchScimGroupRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchScimGroupRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchScimGroupRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimGroupRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimGroupUnsupportedMediaType creates a PatchScimGroupUnsupportedMediaType with default headers values
func NewPatchScimGroupUnsupportedMediaType() *PatchScimGroupUnsupportedMediaType {
	return &PatchScimGroupUnsupportedMediaType{}
}

/*
PatchScimGroupUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchScimGroupUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch scim group unsupported media type response has a 2xx status code
func (o *PatchScimGroupUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch scim group unsupported media type response has a 3xx status code
func (o *PatchScimGroupUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch scim group unsupported media type response has a 4xx status code
func (o *PatchScimGroupUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch scim group unsupported media type response has a 5xx status code
func (o *PatchScimGroupUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch scim group unsupported media type response a status code equal to that given
func (o *PatchScimGroupUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchScimGroupUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchScimGroupUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchScimGroupUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimGroupUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimGroupTooManyRequests creates a PatchScimGroupTooManyRequests with default headers values
func NewPatchScimGroupTooManyRequests() *PatchScimGroupTooManyRequests {
	return &PatchScimGroupTooManyRequests{}
}

/*
PatchScimGroupTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchScimGroupTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch scim group too many requests response has a 2xx status code
func (o *PatchScimGroupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch scim group too many requests response has a 3xx status code
func (o *PatchScimGroupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch scim group too many requests response has a 4xx status code
func (o *PatchScimGroupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch scim group too many requests response has a 5xx status code
func (o *PatchScimGroupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch scim group too many requests response a status code equal to that given
func (o *PatchScimGroupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchScimGroupTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchScimGroupTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchScimGroupTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimGroupInternalServerError creates a PatchScimGroupInternalServerError with default headers values
func NewPatchScimGroupInternalServerError() *PatchScimGroupInternalServerError {
	return &PatchScimGroupInternalServerError{}
}

/*
PatchScimGroupInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchScimGroupInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch scim group internal server error response has a 2xx status code
func (o *PatchScimGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch scim group internal server error response has a 3xx status code
func (o *PatchScimGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch scim group internal server error response has a 4xx status code
func (o *PatchScimGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch scim group internal server error response has a 5xx status code
func (o *PatchScimGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch scim group internal server error response a status code equal to that given
func (o *PatchScimGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchScimGroupInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchScimGroupInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchScimGroupInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimGroupServiceUnavailable creates a PatchScimGroupServiceUnavailable with default headers values
func NewPatchScimGroupServiceUnavailable() *PatchScimGroupServiceUnavailable {
	return &PatchScimGroupServiceUnavailable{}
}

/*
PatchScimGroupServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchScimGroupServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch scim group service unavailable response has a 2xx status code
func (o *PatchScimGroupServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch scim group service unavailable response has a 3xx status code
func (o *PatchScimGroupServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch scim group service unavailable response has a 4xx status code
func (o *PatchScimGroupServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch scim group service unavailable response has a 5xx status code
func (o *PatchScimGroupServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch scim group service unavailable response a status code equal to that given
func (o *PatchScimGroupServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchScimGroupServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchScimGroupServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchScimGroupServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimGroupServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimGroupGatewayTimeout creates a PatchScimGroupGatewayTimeout with default headers values
func NewPatchScimGroupGatewayTimeout() *PatchScimGroupGatewayTimeout {
	return &PatchScimGroupGatewayTimeout{}
}

/*
PatchScimGroupGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchScimGroupGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch scim group gateway timeout response has a 2xx status code
func (o *PatchScimGroupGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch scim group gateway timeout response has a 3xx status code
func (o *PatchScimGroupGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch scim group gateway timeout response has a 4xx status code
func (o *PatchScimGroupGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch scim group gateway timeout response has a 5xx status code
func (o *PatchScimGroupGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch scim group gateway timeout response a status code equal to that given
func (o *PatchScimGroupGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchScimGroupGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchScimGroupGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/groups/{groupId}][%d] patchScimGroupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchScimGroupGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimGroupGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteScimUserParams creates a new DeleteScimUserParams object
// with the default values initialized.
func NewDeleteScimUserParams() *DeleteScimUserParams {
	var ()
	return &DeleteScimUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteScimUserParamsWithTimeout creates a new DeleteScimUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteScimUserParamsWithTimeout(timeout time.Duration) *DeleteScimUserParams {
	var ()
	return &DeleteScimUserParams{

		timeout: timeout,
	}
}

// NewDeleteScimUserParamsWithContext creates a new DeleteScimUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteScimUserParamsWithContext(ctx context.Context) *DeleteScimUserParams {
	var ()
	return &DeleteScimUserParams{

		Context: ctx,
	}
}

// NewDeleteScimUserParamsWithHTTPClient creates a new DeleteScimUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteScimUserParamsWithHTTPClient(client *http.Client) *DeleteScimUserParams {
	var ()
	return &DeleteScimUserParams{
		HTTPClient: client,
	}
}

/*DeleteScimUserParams contains all the parameters to send to the API endpoint
for the delete scim user operation typically these are written to a http.Request
*/
type DeleteScimUserParams struct {

	/*IfMatch
	  The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: "42". If the ETag is different from the version on the server, returns 400 with a "scimType" of "invalidVers".

	*/
	IfMatch *string
	/*UserID
	  The ID of a user. Returned with GET /api/v2/scim/users.

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete scim user params
func (o *DeleteScimUserParams) WithTimeout(timeout time.Duration) *DeleteScimUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete scim user params
func (o *DeleteScimUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete scim user params
func (o *DeleteScimUserParams) WithContext(ctx context.Context) *DeleteScimUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete scim user params
func (o *DeleteScimUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete scim user params
func (o *DeleteScimUserParams) WithHTTPClient(client *http.Client) *DeleteScimUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete scim user params
func (o *DeleteScimUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfMatch adds the ifMatch to the delete scim user params
func (o *DeleteScimUserParams) WithIfMatch(ifMatch *string) *DeleteScimUserParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the delete scim user params
func (o *DeleteScimUserParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithUserID adds the userID to the delete scim user params
func (o *DeleteScimUserParams) WithUserID(userID string) *DeleteScimUserParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the delete scim user params
func (o *DeleteScimUserParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteScimUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfMatch != nil {

		// header param If-Match
		if err := r.SetHeaderParam("If-Match", *o.IfMatch); err != nil {
			return err
		}

	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

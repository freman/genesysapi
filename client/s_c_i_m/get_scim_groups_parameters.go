// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetScimGroupsParams creates a new GetScimGroupsParams object
// with the default values initialized.
func NewGetScimGroupsParams() *GetScimGroupsParams {
	var (
		countDefault      = int32(25)
		startIndexDefault = int32(1)
	)
	return &GetScimGroupsParams{
		Count:      &countDefault,
		StartIndex: &startIndexDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetScimGroupsParamsWithTimeout creates a new GetScimGroupsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetScimGroupsParamsWithTimeout(timeout time.Duration) *GetScimGroupsParams {
	var (
		countDefault      = int32(25)
		startIndexDefault = int32(1)
	)
	return &GetScimGroupsParams{
		Count:      &countDefault,
		StartIndex: &startIndexDefault,

		timeout: timeout,
	}
}

// NewGetScimGroupsParamsWithContext creates a new GetScimGroupsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetScimGroupsParamsWithContext(ctx context.Context) *GetScimGroupsParams {
	var (
		countDefault      = int32(25)
		startIndexDefault = int32(1)
	)
	return &GetScimGroupsParams{
		Count:      &countDefault,
		StartIndex: &startIndexDefault,

		Context: ctx,
	}
}

// NewGetScimGroupsParamsWithHTTPClient creates a new GetScimGroupsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetScimGroupsParamsWithHTTPClient(client *http.Client) *GetScimGroupsParams {
	var (
		countDefault      = int32(25)
		startIndexDefault = int32(1)
	)
	return &GetScimGroupsParams{
		Count:      &countDefault,
		StartIndex: &startIndexDefault,
		HTTPClient: client,
	}
}

/*GetScimGroupsParams contains all the parameters to send to the API endpoint
for the get scim groups operation typically these are written to a http.Request
*/
type GetScimGroupsParams struct {

	/*Attributes
	  Indicates which attributes to include. Returns these attributes and the 'id', 'active', and 'meta attributes . Use "attributes" to avoid expensive secondary calls for the default attributes.

	*/
	Attributes []string
	/*Count
	  The requested number of items per page. A value of 0 returns "totalResults".

	*/
	Count *int32
	/*ExcludedAttributes
	  Indicates which attributes to exclude. Returns the default attributes minus "excludedAttributes". Use "excludedAttributes" to avoid expensive secondary calls for the default attributes. The'id', 'active', and 'meta'  attributes will always be present in the output.

	*/
	ExcludedAttributes []string
	/*Filter
	  Filters results.

	*/
	Filter *string
	/*StartIndex
	  The 1-based index of the first query result.

	*/
	StartIndex *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get scim groups params
func (o *GetScimGroupsParams) WithTimeout(timeout time.Duration) *GetScimGroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get scim groups params
func (o *GetScimGroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get scim groups params
func (o *GetScimGroupsParams) WithContext(ctx context.Context) *GetScimGroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get scim groups params
func (o *GetScimGroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get scim groups params
func (o *GetScimGroupsParams) WithHTTPClient(client *http.Client) *GetScimGroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get scim groups params
func (o *GetScimGroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttributes adds the attributes to the get scim groups params
func (o *GetScimGroupsParams) WithAttributes(attributes []string) *GetScimGroupsParams {
	o.SetAttributes(attributes)
	return o
}

// SetAttributes adds the attributes to the get scim groups params
func (o *GetScimGroupsParams) SetAttributes(attributes []string) {
	o.Attributes = attributes
}

// WithCount adds the count to the get scim groups params
func (o *GetScimGroupsParams) WithCount(count *int32) *GetScimGroupsParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get scim groups params
func (o *GetScimGroupsParams) SetCount(count *int32) {
	o.Count = count
}

// WithExcludedAttributes adds the excludedAttributes to the get scim groups params
func (o *GetScimGroupsParams) WithExcludedAttributes(excludedAttributes []string) *GetScimGroupsParams {
	o.SetExcludedAttributes(excludedAttributes)
	return o
}

// SetExcludedAttributes adds the excludedAttributes to the get scim groups params
func (o *GetScimGroupsParams) SetExcludedAttributes(excludedAttributes []string) {
	o.ExcludedAttributes = excludedAttributes
}

// WithFilter adds the filter to the get scim groups params
func (o *GetScimGroupsParams) WithFilter(filter *string) *GetScimGroupsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get scim groups params
func (o *GetScimGroupsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithStartIndex adds the startIndex to the get scim groups params
func (o *GetScimGroupsParams) WithStartIndex(startIndex *int32) *GetScimGroupsParams {
	o.SetStartIndex(startIndex)
	return o
}

// SetStartIndex adds the startIndex to the get scim groups params
func (o *GetScimGroupsParams) SetStartIndex(startIndex *int32) {
	o.StartIndex = startIndex
}

// WriteToRequest writes these params to a swagger request
func (o *GetScimGroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesAttributes := o.Attributes

	joinedAttributes := swag.JoinByFormat(valuesAttributes, "multi")
	// query array param attributes
	if err := r.SetQueryParam("attributes", joinedAttributes...); err != nil {
		return err
	}

	if o.Count != nil {

		// query param count
		var qrCount int32
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	valuesExcludedAttributes := o.ExcludedAttributes

	joinedExcludedAttributes := swag.JoinByFormat(valuesExcludedAttributes, "multi")
	// query array param excludedAttributes
	if err := r.SetQueryParam("excludedAttributes", joinedExcludedAttributes...); err != nil {
		return err
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	if o.StartIndex != nil {

		// query param startIndex
		var qrStartIndex int32
		if o.StartIndex != nil {
			qrStartIndex = *o.StartIndex
		}
		qStartIndex := swag.FormatInt32(qrStartIndex)
		if qStartIndex != "" {
			if err := r.SetQueryParam("startIndex", qStartIndex); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

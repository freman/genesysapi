// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteScimGroupReader is a Reader for the DeleteScimGroup structure.
type DeleteScimGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteScimGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteScimGroupNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteScimGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteScimGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteScimGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteScimGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteScimGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteScimGroupRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteScimGroupUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteScimGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteScimGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteScimGroupServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteScimGroupGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteScimGroupNoContent creates a DeleteScimGroupNoContent with default headers values
func NewDeleteScimGroupNoContent() *DeleteScimGroupNoContent {
	return &DeleteScimGroupNoContent{}
}

/*DeleteScimGroupNoContent handles this case with default header values.

Group deleted with no content returned.
*/
type DeleteScimGroupNoContent struct {
}

func (o *DeleteScimGroupNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/groups/{groupId}][%d] deleteScimGroupNoContent ", 204)
}

func (o *DeleteScimGroupNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteScimGroupBadRequest creates a DeleteScimGroupBadRequest with default headers values
func NewDeleteScimGroupBadRequest() *DeleteScimGroupBadRequest {
	return &DeleteScimGroupBadRequest{}
}

/*DeleteScimGroupBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteScimGroupBadRequest struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimGroupBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/groups/{groupId}][%d] deleteScimGroupBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteScimGroupBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimGroupUnauthorized creates a DeleteScimGroupUnauthorized with default headers values
func NewDeleteScimGroupUnauthorized() *DeleteScimGroupUnauthorized {
	return &DeleteScimGroupUnauthorized{}
}

/*DeleteScimGroupUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteScimGroupUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimGroupUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/groups/{groupId}][%d] deleteScimGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteScimGroupUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimGroupForbidden creates a DeleteScimGroupForbidden with default headers values
func NewDeleteScimGroupForbidden() *DeleteScimGroupForbidden {
	return &DeleteScimGroupForbidden{}
}

/*DeleteScimGroupForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type DeleteScimGroupForbidden struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimGroupForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/groups/{groupId}][%d] deleteScimGroupForbidden  %+v", 403, o.Payload)
}

func (o *DeleteScimGroupForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimGroupNotFound creates a DeleteScimGroupNotFound with default headers values
func NewDeleteScimGroupNotFound() *DeleteScimGroupNotFound {
	return &DeleteScimGroupNotFound{}
}

/*DeleteScimGroupNotFound handles this case with default header values.

The requested resource was not found.
*/
type DeleteScimGroupNotFound struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimGroupNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/groups/{groupId}][%d] deleteScimGroupNotFound  %+v", 404, o.Payload)
}

func (o *DeleteScimGroupNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimGroupConflict creates a DeleteScimGroupConflict with default headers values
func NewDeleteScimGroupConflict() *DeleteScimGroupConflict {
	return &DeleteScimGroupConflict{}
}

/*DeleteScimGroupConflict handles this case with default header values.

Version does not match current version.
*/
type DeleteScimGroupConflict struct {
	Payload *models.ScimError
}

func (o *DeleteScimGroupConflict) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/groups/{groupId}][%d] deleteScimGroupConflict  %+v", 409, o.Payload)
}

func (o *DeleteScimGroupConflict) GetPayload() *models.ScimError {
	return o.Payload
}

func (o *DeleteScimGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimGroupRequestEntityTooLarge creates a DeleteScimGroupRequestEntityTooLarge with default headers values
func NewDeleteScimGroupRequestEntityTooLarge() *DeleteScimGroupRequestEntityTooLarge {
	return &DeleteScimGroupRequestEntityTooLarge{}
}

/*DeleteScimGroupRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type DeleteScimGroupRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimGroupRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/groups/{groupId}][%d] deleteScimGroupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteScimGroupRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimGroupRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimGroupUnsupportedMediaType creates a DeleteScimGroupUnsupportedMediaType with default headers values
func NewDeleteScimGroupUnsupportedMediaType() *DeleteScimGroupUnsupportedMediaType {
	return &DeleteScimGroupUnsupportedMediaType{}
}

/*DeleteScimGroupUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteScimGroupUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimGroupUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/groups/{groupId}][%d] deleteScimGroupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteScimGroupUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimGroupUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimGroupTooManyRequests creates a DeleteScimGroupTooManyRequests with default headers values
func NewDeleteScimGroupTooManyRequests() *DeleteScimGroupTooManyRequests {
	return &DeleteScimGroupTooManyRequests{}
}

/*DeleteScimGroupTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type DeleteScimGroupTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimGroupTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/groups/{groupId}][%d] deleteScimGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteScimGroupTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimGroupInternalServerError creates a DeleteScimGroupInternalServerError with default headers values
func NewDeleteScimGroupInternalServerError() *DeleteScimGroupInternalServerError {
	return &DeleteScimGroupInternalServerError{}
}

/*DeleteScimGroupInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteScimGroupInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimGroupInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/groups/{groupId}][%d] deleteScimGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteScimGroupInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimGroupServiceUnavailable creates a DeleteScimGroupServiceUnavailable with default headers values
func NewDeleteScimGroupServiceUnavailable() *DeleteScimGroupServiceUnavailable {
	return &DeleteScimGroupServiceUnavailable{}
}

/*DeleteScimGroupServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteScimGroupServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimGroupServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/groups/{groupId}][%d] deleteScimGroupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteScimGroupServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimGroupServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimGroupGatewayTimeout creates a DeleteScimGroupGatewayTimeout with default headers values
func NewDeleteScimGroupGatewayTimeout() *DeleteScimGroupGatewayTimeout {
	return &DeleteScimGroupGatewayTimeout{}
}

/*DeleteScimGroupGatewayTimeout handles this case with default header values.

The request timed out.
*/
type DeleteScimGroupGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimGroupGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/groups/{groupId}][%d] deleteScimGroupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteScimGroupGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimGroupGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

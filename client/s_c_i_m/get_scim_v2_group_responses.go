// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetScimV2GroupReader is a Reader for the GetScimV2Group structure.
type GetScimV2GroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScimV2GroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScimV2GroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewGetScimV2GroupNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewGetScimV2GroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetScimV2GroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScimV2GroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScimV2GroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetScimV2GroupRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetScimV2GroupUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScimV2GroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScimV2GroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetScimV2GroupServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetScimV2GroupGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScimV2GroupOK creates a GetScimV2GroupOK with default headers values
func NewGetScimV2GroupOK() *GetScimV2GroupOK {
	return &GetScimV2GroupOK{}
}

/*GetScimV2GroupOK handles this case with default header values.

successful operation
*/
type GetScimV2GroupOK struct {
	Payload *models.ScimV2Group
}

func (o *GetScimV2GroupOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/groups/{groupId}][%d] getScimV2GroupOK  %+v", 200, o.Payload)
}

func (o *GetScimV2GroupOK) GetPayload() *models.ScimV2Group {
	return o.Payload
}

func (o *GetScimV2GroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimV2Group)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2GroupNotModified creates a GetScimV2GroupNotModified with default headers values
func NewGetScimV2GroupNotModified() *GetScimV2GroupNotModified {
	return &GetScimV2GroupNotModified{}
}

/*GetScimV2GroupNotModified handles this case with default header values.

If-Non-Match header matches current version. No content returned.
*/
type GetScimV2GroupNotModified struct {
}

func (o *GetScimV2GroupNotModified) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/groups/{groupId}][%d] getScimV2GroupNotModified ", 304)
}

func (o *GetScimV2GroupNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetScimV2GroupBadRequest creates a GetScimV2GroupBadRequest with default headers values
func NewGetScimV2GroupBadRequest() *GetScimV2GroupBadRequest {
	return &GetScimV2GroupBadRequest{}
}

/*GetScimV2GroupBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetScimV2GroupBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2GroupBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/groups/{groupId}][%d] getScimV2GroupBadRequest  %+v", 400, o.Payload)
}

func (o *GetScimV2GroupBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2GroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2GroupUnauthorized creates a GetScimV2GroupUnauthorized with default headers values
func NewGetScimV2GroupUnauthorized() *GetScimV2GroupUnauthorized {
	return &GetScimV2GroupUnauthorized{}
}

/*GetScimV2GroupUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetScimV2GroupUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2GroupUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/groups/{groupId}][%d] getScimV2GroupUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScimV2GroupUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2GroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2GroupForbidden creates a GetScimV2GroupForbidden with default headers values
func NewGetScimV2GroupForbidden() *GetScimV2GroupForbidden {
	return &GetScimV2GroupForbidden{}
}

/*GetScimV2GroupForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetScimV2GroupForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2GroupForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/groups/{groupId}][%d] getScimV2GroupForbidden  %+v", 403, o.Payload)
}

func (o *GetScimV2GroupForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2GroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2GroupNotFound creates a GetScimV2GroupNotFound with default headers values
func NewGetScimV2GroupNotFound() *GetScimV2GroupNotFound {
	return &GetScimV2GroupNotFound{}
}

/*GetScimV2GroupNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetScimV2GroupNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2GroupNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/groups/{groupId}][%d] getScimV2GroupNotFound  %+v", 404, o.Payload)
}

func (o *GetScimV2GroupNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2GroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2GroupRequestEntityTooLarge creates a GetScimV2GroupRequestEntityTooLarge with default headers values
func NewGetScimV2GroupRequestEntityTooLarge() *GetScimV2GroupRequestEntityTooLarge {
	return &GetScimV2GroupRequestEntityTooLarge{}
}

/*GetScimV2GroupRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetScimV2GroupRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2GroupRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/groups/{groupId}][%d] getScimV2GroupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScimV2GroupRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2GroupRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2GroupUnsupportedMediaType creates a GetScimV2GroupUnsupportedMediaType with default headers values
func NewGetScimV2GroupUnsupportedMediaType() *GetScimV2GroupUnsupportedMediaType {
	return &GetScimV2GroupUnsupportedMediaType{}
}

/*GetScimV2GroupUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetScimV2GroupUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2GroupUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/groups/{groupId}][%d] getScimV2GroupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScimV2GroupUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2GroupUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2GroupTooManyRequests creates a GetScimV2GroupTooManyRequests with default headers values
func NewGetScimV2GroupTooManyRequests() *GetScimV2GroupTooManyRequests {
	return &GetScimV2GroupTooManyRequests{}
}

/*GetScimV2GroupTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type GetScimV2GroupTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2GroupTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/groups/{groupId}][%d] getScimV2GroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScimV2GroupTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2GroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2GroupInternalServerError creates a GetScimV2GroupInternalServerError with default headers values
func NewGetScimV2GroupInternalServerError() *GetScimV2GroupInternalServerError {
	return &GetScimV2GroupInternalServerError{}
}

/*GetScimV2GroupInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetScimV2GroupInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2GroupInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/groups/{groupId}][%d] getScimV2GroupInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScimV2GroupInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2GroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2GroupServiceUnavailable creates a GetScimV2GroupServiceUnavailable with default headers values
func NewGetScimV2GroupServiceUnavailable() *GetScimV2GroupServiceUnavailable {
	return &GetScimV2GroupServiceUnavailable{}
}

/*GetScimV2GroupServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetScimV2GroupServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2GroupServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/groups/{groupId}][%d] getScimV2GroupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScimV2GroupServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2GroupServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2GroupGatewayTimeout creates a GetScimV2GroupGatewayTimeout with default headers values
func NewGetScimV2GroupGatewayTimeout() *GetScimV2GroupGatewayTimeout {
	return &GetScimV2GroupGatewayTimeout{}
}

/*GetScimV2GroupGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetScimV2GroupGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScimV2GroupGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/groups/{groupId}][%d] getScimV2GroupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScimV2GroupGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2GroupGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

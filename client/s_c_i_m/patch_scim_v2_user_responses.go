// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchScimV2UserReader is a Reader for the PatchScimV2User structure.
type PatchScimV2UserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchScimV2UserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchScimV2UserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchScimV2UserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchScimV2UserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchScimV2UserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchScimV2UserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchScimV2UserRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchScimV2UserConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchScimV2UserRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchScimV2UserUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchScimV2UserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchScimV2UserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchScimV2UserServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchScimV2UserGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchScimV2UserOK creates a PatchScimV2UserOK with default headers values
func NewPatchScimV2UserOK() *PatchScimV2UserOK {
	return &PatchScimV2UserOK{}
}

/*PatchScimV2UserOK handles this case with default header values.

successful operation
*/
type PatchScimV2UserOK struct {
	Payload *models.ScimV2User
}

func (o *PatchScimV2UserOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/users/{userId}][%d] patchScimV2UserOK  %+v", 200, o.Payload)
}

func (o *PatchScimV2UserOK) GetPayload() *models.ScimV2User {
	return o.Payload
}

func (o *PatchScimV2UserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimV2User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2UserBadRequest creates a PatchScimV2UserBadRequest with default headers values
func NewPatchScimV2UserBadRequest() *PatchScimV2UserBadRequest {
	return &PatchScimV2UserBadRequest{}
}

/*PatchScimV2UserBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchScimV2UserBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2UserBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/users/{userId}][%d] patchScimV2UserBadRequest  %+v", 400, o.Payload)
}

func (o *PatchScimV2UserBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2UserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2UserUnauthorized creates a PatchScimV2UserUnauthorized with default headers values
func NewPatchScimV2UserUnauthorized() *PatchScimV2UserUnauthorized {
	return &PatchScimV2UserUnauthorized{}
}

/*PatchScimV2UserUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchScimV2UserUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2UserUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/users/{userId}][%d] patchScimV2UserUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchScimV2UserUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2UserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2UserForbidden creates a PatchScimV2UserForbidden with default headers values
func NewPatchScimV2UserForbidden() *PatchScimV2UserForbidden {
	return &PatchScimV2UserForbidden{}
}

/*PatchScimV2UserForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchScimV2UserForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2UserForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/users/{userId}][%d] patchScimV2UserForbidden  %+v", 403, o.Payload)
}

func (o *PatchScimV2UserForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2UserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2UserNotFound creates a PatchScimV2UserNotFound with default headers values
func NewPatchScimV2UserNotFound() *PatchScimV2UserNotFound {
	return &PatchScimV2UserNotFound{}
}

/*PatchScimV2UserNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchScimV2UserNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2UserNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/users/{userId}][%d] patchScimV2UserNotFound  %+v", 404, o.Payload)
}

func (o *PatchScimV2UserNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2UserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2UserRequestTimeout creates a PatchScimV2UserRequestTimeout with default headers values
func NewPatchScimV2UserRequestTimeout() *PatchScimV2UserRequestTimeout {
	return &PatchScimV2UserRequestTimeout{}
}

/*PatchScimV2UserRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchScimV2UserRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2UserRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/users/{userId}][%d] patchScimV2UserRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchScimV2UserRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2UserRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2UserConflict creates a PatchScimV2UserConflict with default headers values
func NewPatchScimV2UserConflict() *PatchScimV2UserConflict {
	return &PatchScimV2UserConflict{}
}

/*PatchScimV2UserConflict handles this case with default header values.

Version does not match current version.
*/
type PatchScimV2UserConflict struct {
	Payload *models.ScimError
}

func (o *PatchScimV2UserConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/users/{userId}][%d] patchScimV2UserConflict  %+v", 409, o.Payload)
}

func (o *PatchScimV2UserConflict) GetPayload() *models.ScimError {
	return o.Payload
}

func (o *PatchScimV2UserConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2UserRequestEntityTooLarge creates a PatchScimV2UserRequestEntityTooLarge with default headers values
func NewPatchScimV2UserRequestEntityTooLarge() *PatchScimV2UserRequestEntityTooLarge {
	return &PatchScimV2UserRequestEntityTooLarge{}
}

/*PatchScimV2UserRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PatchScimV2UserRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2UserRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/users/{userId}][%d] patchScimV2UserRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchScimV2UserRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2UserRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2UserUnsupportedMediaType creates a PatchScimV2UserUnsupportedMediaType with default headers values
func NewPatchScimV2UserUnsupportedMediaType() *PatchScimV2UserUnsupportedMediaType {
	return &PatchScimV2UserUnsupportedMediaType{}
}

/*PatchScimV2UserUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchScimV2UserUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2UserUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/users/{userId}][%d] patchScimV2UserUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchScimV2UserUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2UserUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2UserTooManyRequests creates a PatchScimV2UserTooManyRequests with default headers values
func NewPatchScimV2UserTooManyRequests() *PatchScimV2UserTooManyRequests {
	return &PatchScimV2UserTooManyRequests{}
}

/*PatchScimV2UserTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchScimV2UserTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2UserTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/users/{userId}][%d] patchScimV2UserTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchScimV2UserTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2UserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2UserInternalServerError creates a PatchScimV2UserInternalServerError with default headers values
func NewPatchScimV2UserInternalServerError() *PatchScimV2UserInternalServerError {
	return &PatchScimV2UserInternalServerError{}
}

/*PatchScimV2UserInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchScimV2UserInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2UserInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/users/{userId}][%d] patchScimV2UserInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchScimV2UserInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2UserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2UserServiceUnavailable creates a PatchScimV2UserServiceUnavailable with default headers values
func NewPatchScimV2UserServiceUnavailable() *PatchScimV2UserServiceUnavailable {
	return &PatchScimV2UserServiceUnavailable{}
}

/*PatchScimV2UserServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchScimV2UserServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2UserServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/users/{userId}][%d] patchScimV2UserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchScimV2UserServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2UserServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2UserGatewayTimeout creates a PatchScimV2UserGatewayTimeout with default headers values
func NewPatchScimV2UserGatewayTimeout() *PatchScimV2UserGatewayTimeout {
	return &PatchScimV2UserGatewayTimeout{}
}

/*PatchScimV2UserGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchScimV2UserGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2UserGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/users/{userId}][%d] patchScimV2UserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchScimV2UserGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2UserGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostScimGroupsReader is a Reader for the PostScimGroups structure.
type PostScimGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostScimGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostScimGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostScimGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostScimGroupsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostScimGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostScimGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostScimGroupsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostScimGroupsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostScimGroupsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostScimGroupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostScimGroupsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostScimGroupsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostScimGroupsOK creates a PostScimGroupsOK with default headers values
func NewPostScimGroupsOK() *PostScimGroupsOK {
	return &PostScimGroupsOK{}
}

/*PostScimGroupsOK handles this case with default header values.

successful operation
*/
type PostScimGroupsOK struct {
	Payload *models.ScimV2Group
}

func (o *PostScimGroupsOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/groups][%d] postScimGroupsOK  %+v", 200, o.Payload)
}

func (o *PostScimGroupsOK) GetPayload() *models.ScimV2Group {
	return o.Payload
}

func (o *PostScimGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimV2Group)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimGroupsBadRequest creates a PostScimGroupsBadRequest with default headers values
func NewPostScimGroupsBadRequest() *PostScimGroupsBadRequest {
	return &PostScimGroupsBadRequest{}
}

/*PostScimGroupsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostScimGroupsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostScimGroupsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/groups][%d] postScimGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *PostScimGroupsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimGroupsUnauthorized creates a PostScimGroupsUnauthorized with default headers values
func NewPostScimGroupsUnauthorized() *PostScimGroupsUnauthorized {
	return &PostScimGroupsUnauthorized{}
}

/*PostScimGroupsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostScimGroupsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostScimGroupsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/groups][%d] postScimGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostScimGroupsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimGroupsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimGroupsForbidden creates a PostScimGroupsForbidden with default headers values
func NewPostScimGroupsForbidden() *PostScimGroupsForbidden {
	return &PostScimGroupsForbidden{}
}

/*PostScimGroupsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostScimGroupsForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostScimGroupsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/groups][%d] postScimGroupsForbidden  %+v", 403, o.Payload)
}

func (o *PostScimGroupsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimGroupsNotFound creates a PostScimGroupsNotFound with default headers values
func NewPostScimGroupsNotFound() *PostScimGroupsNotFound {
	return &PostScimGroupsNotFound{}
}

/*PostScimGroupsNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostScimGroupsNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostScimGroupsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/groups][%d] postScimGroupsNotFound  %+v", 404, o.Payload)
}

func (o *PostScimGroupsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimGroupsRequestEntityTooLarge creates a PostScimGroupsRequestEntityTooLarge with default headers values
func NewPostScimGroupsRequestEntityTooLarge() *PostScimGroupsRequestEntityTooLarge {
	return &PostScimGroupsRequestEntityTooLarge{}
}

/*PostScimGroupsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PostScimGroupsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostScimGroupsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/groups][%d] postScimGroupsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostScimGroupsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimGroupsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimGroupsUnsupportedMediaType creates a PostScimGroupsUnsupportedMediaType with default headers values
func NewPostScimGroupsUnsupportedMediaType() *PostScimGroupsUnsupportedMediaType {
	return &PostScimGroupsUnsupportedMediaType{}
}

/*PostScimGroupsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostScimGroupsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostScimGroupsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/groups][%d] postScimGroupsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostScimGroupsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimGroupsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimGroupsTooManyRequests creates a PostScimGroupsTooManyRequests with default headers values
func NewPostScimGroupsTooManyRequests() *PostScimGroupsTooManyRequests {
	return &PostScimGroupsTooManyRequests{}
}

/*PostScimGroupsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PostScimGroupsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostScimGroupsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/groups][%d] postScimGroupsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostScimGroupsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimGroupsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimGroupsInternalServerError creates a PostScimGroupsInternalServerError with default headers values
func NewPostScimGroupsInternalServerError() *PostScimGroupsInternalServerError {
	return &PostScimGroupsInternalServerError{}
}

/*PostScimGroupsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostScimGroupsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostScimGroupsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/groups][%d] postScimGroupsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostScimGroupsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimGroupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimGroupsServiceUnavailable creates a PostScimGroupsServiceUnavailable with default headers values
func NewPostScimGroupsServiceUnavailable() *PostScimGroupsServiceUnavailable {
	return &PostScimGroupsServiceUnavailable{}
}

/*PostScimGroupsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostScimGroupsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostScimGroupsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/groups][%d] postScimGroupsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostScimGroupsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimGroupsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimGroupsGatewayTimeout creates a PostScimGroupsGatewayTimeout with default headers values
func NewPostScimGroupsGatewayTimeout() *PostScimGroupsGatewayTimeout {
	return &PostScimGroupsGatewayTimeout{}
}

/*PostScimGroupsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostScimGroupsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostScimGroupsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/groups][%d] postScimGroupsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostScimGroupsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimGroupsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

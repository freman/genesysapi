// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetScimSchemasReader is a Reader for the GetScimSchemas structure.
type GetScimSchemasReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScimSchemasReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScimSchemasOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetScimSchemasBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetScimSchemasUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScimSchemasForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScimSchemasNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetScimSchemasRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetScimSchemasRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetScimSchemasUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScimSchemasTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScimSchemasInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetScimSchemasServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetScimSchemasGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScimSchemasOK creates a GetScimSchemasOK with default headers values
func NewGetScimSchemasOK() *GetScimSchemasOK {
	return &GetScimSchemasOK{}
}

/*GetScimSchemasOK handles this case with default header values.

successful operation
*/
type GetScimSchemasOK struct {
	Payload *models.ScimV2SchemaListResponse
}

func (o *GetScimSchemasOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/schemas][%d] getScimSchemasOK  %+v", 200, o.Payload)
}

func (o *GetScimSchemasOK) GetPayload() *models.ScimV2SchemaListResponse {
	return o.Payload
}

func (o *GetScimSchemasOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimV2SchemaListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimSchemasBadRequest creates a GetScimSchemasBadRequest with default headers values
func NewGetScimSchemasBadRequest() *GetScimSchemasBadRequest {
	return &GetScimSchemasBadRequest{}
}

/*GetScimSchemasBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetScimSchemasBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetScimSchemasBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/schemas][%d] getScimSchemasBadRequest  %+v", 400, o.Payload)
}

func (o *GetScimSchemasBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimSchemasBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimSchemasUnauthorized creates a GetScimSchemasUnauthorized with default headers values
func NewGetScimSchemasUnauthorized() *GetScimSchemasUnauthorized {
	return &GetScimSchemasUnauthorized{}
}

/*GetScimSchemasUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetScimSchemasUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetScimSchemasUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/schemas][%d] getScimSchemasUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScimSchemasUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimSchemasUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimSchemasForbidden creates a GetScimSchemasForbidden with default headers values
func NewGetScimSchemasForbidden() *GetScimSchemasForbidden {
	return &GetScimSchemasForbidden{}
}

/*GetScimSchemasForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetScimSchemasForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetScimSchemasForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/schemas][%d] getScimSchemasForbidden  %+v", 403, o.Payload)
}

func (o *GetScimSchemasForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimSchemasForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimSchemasNotFound creates a GetScimSchemasNotFound with default headers values
func NewGetScimSchemasNotFound() *GetScimSchemasNotFound {
	return &GetScimSchemasNotFound{}
}

/*GetScimSchemasNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetScimSchemasNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetScimSchemasNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/schemas][%d] getScimSchemasNotFound  %+v", 404, o.Payload)
}

func (o *GetScimSchemasNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimSchemasNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimSchemasRequestTimeout creates a GetScimSchemasRequestTimeout with default headers values
func NewGetScimSchemasRequestTimeout() *GetScimSchemasRequestTimeout {
	return &GetScimSchemasRequestTimeout{}
}

/*GetScimSchemasRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetScimSchemasRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScimSchemasRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/schemas][%d] getScimSchemasRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScimSchemasRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimSchemasRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimSchemasRequestEntityTooLarge creates a GetScimSchemasRequestEntityTooLarge with default headers values
func NewGetScimSchemasRequestEntityTooLarge() *GetScimSchemasRequestEntityTooLarge {
	return &GetScimSchemasRequestEntityTooLarge{}
}

/*GetScimSchemasRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetScimSchemasRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetScimSchemasRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/schemas][%d] getScimSchemasRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScimSchemasRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimSchemasRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimSchemasUnsupportedMediaType creates a GetScimSchemasUnsupportedMediaType with default headers values
func NewGetScimSchemasUnsupportedMediaType() *GetScimSchemasUnsupportedMediaType {
	return &GetScimSchemasUnsupportedMediaType{}
}

/*GetScimSchemasUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetScimSchemasUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetScimSchemasUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/schemas][%d] getScimSchemasUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScimSchemasUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimSchemasUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimSchemasTooManyRequests creates a GetScimSchemasTooManyRequests with default headers values
func NewGetScimSchemasTooManyRequests() *GetScimSchemasTooManyRequests {
	return &GetScimSchemasTooManyRequests{}
}

/*GetScimSchemasTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetScimSchemasTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetScimSchemasTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/schemas][%d] getScimSchemasTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScimSchemasTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimSchemasTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimSchemasInternalServerError creates a GetScimSchemasInternalServerError with default headers values
func NewGetScimSchemasInternalServerError() *GetScimSchemasInternalServerError {
	return &GetScimSchemasInternalServerError{}
}

/*GetScimSchemasInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetScimSchemasInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetScimSchemasInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/schemas][%d] getScimSchemasInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScimSchemasInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimSchemasInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimSchemasServiceUnavailable creates a GetScimSchemasServiceUnavailable with default headers values
func NewGetScimSchemasServiceUnavailable() *GetScimSchemasServiceUnavailable {
	return &GetScimSchemasServiceUnavailable{}
}

/*GetScimSchemasServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetScimSchemasServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetScimSchemasServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/schemas][%d] getScimSchemasServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScimSchemasServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimSchemasServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimSchemasGatewayTimeout creates a GetScimSchemasGatewayTimeout with default headers values
func NewGetScimSchemasGatewayTimeout() *GetScimSchemasGatewayTimeout {
	return &GetScimSchemasGatewayTimeout{}
}

/*GetScimSchemasGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetScimSchemasGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScimSchemasGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/schemas][%d] getScimSchemasGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScimSchemasGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimSchemasGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

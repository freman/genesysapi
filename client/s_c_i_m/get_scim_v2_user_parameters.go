// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetScimV2UserParams creates a new GetScimV2UserParams object
// with the default values initialized.
func NewGetScimV2UserParams() *GetScimV2UserParams {
	var ()
	return &GetScimV2UserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetScimV2UserParamsWithTimeout creates a new GetScimV2UserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetScimV2UserParamsWithTimeout(timeout time.Duration) *GetScimV2UserParams {
	var ()
	return &GetScimV2UserParams{

		timeout: timeout,
	}
}

// NewGetScimV2UserParamsWithContext creates a new GetScimV2UserParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetScimV2UserParamsWithContext(ctx context.Context) *GetScimV2UserParams {
	var ()
	return &GetScimV2UserParams{

		Context: ctx,
	}
}

// NewGetScimV2UserParamsWithHTTPClient creates a new GetScimV2UserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetScimV2UserParamsWithHTTPClient(client *http.Client) *GetScimV2UserParams {
	var ()
	return &GetScimV2UserParams{
		HTTPClient: client,
	}
}

/*GetScimV2UserParams contains all the parameters to send to the API endpoint
for the get scim v2 user operation typically these are written to a http.Request
*/
type GetScimV2UserParams struct {

	/*IfNoneMatch
	  The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: "42". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.

	*/
	IfNoneMatch *string
	/*Attributes
	  Indicates which attributes to include. Returns these attributes and the "id", "userName", "active", and "meta" attributes. Use "attributes" to avoid expensive secondary calls for the default attributes.

	*/
	Attributes []string
	/*ExcludedAttributes
	  Indicates which attributes to exclude. Returns the default attributes minus "excludedAttributes". Always returns the "id", "userName", "active", and "meta" attributes. Use "excludedAttributes" to avoid expensive secondary calls for the default attributes.

	*/
	ExcludedAttributes []string
	/*UserID
	  The ID of a user. Returned with GET /api/v2/scim/v2/users.

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get scim v2 user params
func (o *GetScimV2UserParams) WithTimeout(timeout time.Duration) *GetScimV2UserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get scim v2 user params
func (o *GetScimV2UserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get scim v2 user params
func (o *GetScimV2UserParams) WithContext(ctx context.Context) *GetScimV2UserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get scim v2 user params
func (o *GetScimV2UserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get scim v2 user params
func (o *GetScimV2UserParams) WithHTTPClient(client *http.Client) *GetScimV2UserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get scim v2 user params
func (o *GetScimV2UserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfNoneMatch adds the ifNoneMatch to the get scim v2 user params
func (o *GetScimV2UserParams) WithIfNoneMatch(ifNoneMatch *string) *GetScimV2UserParams {
	o.SetIfNoneMatch(ifNoneMatch)
	return o
}

// SetIfNoneMatch adds the ifNoneMatch to the get scim v2 user params
func (o *GetScimV2UserParams) SetIfNoneMatch(ifNoneMatch *string) {
	o.IfNoneMatch = ifNoneMatch
}

// WithAttributes adds the attributes to the get scim v2 user params
func (o *GetScimV2UserParams) WithAttributes(attributes []string) *GetScimV2UserParams {
	o.SetAttributes(attributes)
	return o
}

// SetAttributes adds the attributes to the get scim v2 user params
func (o *GetScimV2UserParams) SetAttributes(attributes []string) {
	o.Attributes = attributes
}

// WithExcludedAttributes adds the excludedAttributes to the get scim v2 user params
func (o *GetScimV2UserParams) WithExcludedAttributes(excludedAttributes []string) *GetScimV2UserParams {
	o.SetExcludedAttributes(excludedAttributes)
	return o
}

// SetExcludedAttributes adds the excludedAttributes to the get scim v2 user params
func (o *GetScimV2UserParams) SetExcludedAttributes(excludedAttributes []string) {
	o.ExcludedAttributes = excludedAttributes
}

// WithUserID adds the userID to the get scim v2 user params
func (o *GetScimV2UserParams) WithUserID(userID string) *GetScimV2UserParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get scim v2 user params
func (o *GetScimV2UserParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetScimV2UserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfNoneMatch != nil {

		// header param If-None-Match
		if err := r.SetHeaderParam("If-None-Match", *o.IfNoneMatch); err != nil {
			return err
		}

	}

	valuesAttributes := o.Attributes

	joinedAttributes := swag.JoinByFormat(valuesAttributes, "multi")
	// query array param attributes
	if err := r.SetQueryParam("attributes", joinedAttributes...); err != nil {
		return err
	}

	valuesExcludedAttributes := o.ExcludedAttributes

	joinedExcludedAttributes := swag.JoinByFormat(valuesExcludedAttributes, "multi")
	// query array param excludedAttributes
	if err := r.SetQueryParam("excludedAttributes", joinedExcludedAttributes...); err != nil {
		return err
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

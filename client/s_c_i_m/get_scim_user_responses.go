// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetScimUserReader is a Reader for the GetScimUser structure.
type GetScimUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScimUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScimUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewGetScimUserNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewGetScimUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetScimUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScimUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScimUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetScimUserRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetScimUserRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetScimUserUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScimUserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScimUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetScimUserServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetScimUserGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScimUserOK creates a GetScimUserOK with default headers values
func NewGetScimUserOK() *GetScimUserOK {
	return &GetScimUserOK{}
}

/*GetScimUserOK handles this case with default header values.

successful operation
*/
type GetScimUserOK struct {
	Payload *models.ScimV2User
}

func (o *GetScimUserOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users/{userId}][%d] getScimUserOK  %+v", 200, o.Payload)
}

func (o *GetScimUserOK) GetPayload() *models.ScimV2User {
	return o.Payload
}

func (o *GetScimUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimV2User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUserNotModified creates a GetScimUserNotModified with default headers values
func NewGetScimUserNotModified() *GetScimUserNotModified {
	return &GetScimUserNotModified{}
}

/*GetScimUserNotModified handles this case with default header values.

If-Non-Match header matches current version. No content returned.
*/
type GetScimUserNotModified struct {
}

func (o *GetScimUserNotModified) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users/{userId}][%d] getScimUserNotModified ", 304)
}

func (o *GetScimUserNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetScimUserBadRequest creates a GetScimUserBadRequest with default headers values
func NewGetScimUserBadRequest() *GetScimUserBadRequest {
	return &GetScimUserBadRequest{}
}

/*GetScimUserBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetScimUserBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetScimUserBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users/{userId}][%d] getScimUserBadRequest  %+v", 400, o.Payload)
}

func (o *GetScimUserBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUserUnauthorized creates a GetScimUserUnauthorized with default headers values
func NewGetScimUserUnauthorized() *GetScimUserUnauthorized {
	return &GetScimUserUnauthorized{}
}

/*GetScimUserUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetScimUserUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetScimUserUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users/{userId}][%d] getScimUserUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScimUserUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUserForbidden creates a GetScimUserForbidden with default headers values
func NewGetScimUserForbidden() *GetScimUserForbidden {
	return &GetScimUserForbidden{}
}

/*GetScimUserForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetScimUserForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetScimUserForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users/{userId}][%d] getScimUserForbidden  %+v", 403, o.Payload)
}

func (o *GetScimUserForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUserNotFound creates a GetScimUserNotFound with default headers values
func NewGetScimUserNotFound() *GetScimUserNotFound {
	return &GetScimUserNotFound{}
}

/*GetScimUserNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetScimUserNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetScimUserNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users/{userId}][%d] getScimUserNotFound  %+v", 404, o.Payload)
}

func (o *GetScimUserNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUserRequestTimeout creates a GetScimUserRequestTimeout with default headers values
func NewGetScimUserRequestTimeout() *GetScimUserRequestTimeout {
	return &GetScimUserRequestTimeout{}
}

/*GetScimUserRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetScimUserRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScimUserRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users/{userId}][%d] getScimUserRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScimUserRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUserRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUserRequestEntityTooLarge creates a GetScimUserRequestEntityTooLarge with default headers values
func NewGetScimUserRequestEntityTooLarge() *GetScimUserRequestEntityTooLarge {
	return &GetScimUserRequestEntityTooLarge{}
}

/*GetScimUserRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetScimUserRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetScimUserRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users/{userId}][%d] getScimUserRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScimUserRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUserRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUserUnsupportedMediaType creates a GetScimUserUnsupportedMediaType with default headers values
func NewGetScimUserUnsupportedMediaType() *GetScimUserUnsupportedMediaType {
	return &GetScimUserUnsupportedMediaType{}
}

/*GetScimUserUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetScimUserUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetScimUserUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users/{userId}][%d] getScimUserUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScimUserUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUserUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUserTooManyRequests creates a GetScimUserTooManyRequests with default headers values
func NewGetScimUserTooManyRequests() *GetScimUserTooManyRequests {
	return &GetScimUserTooManyRequests{}
}

/*GetScimUserTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetScimUserTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetScimUserTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users/{userId}][%d] getScimUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScimUserTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUserInternalServerError creates a GetScimUserInternalServerError with default headers values
func NewGetScimUserInternalServerError() *GetScimUserInternalServerError {
	return &GetScimUserInternalServerError{}
}

/*GetScimUserInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetScimUserInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetScimUserInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users/{userId}][%d] getScimUserInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScimUserInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUserServiceUnavailable creates a GetScimUserServiceUnavailable with default headers values
func NewGetScimUserServiceUnavailable() *GetScimUserServiceUnavailable {
	return &GetScimUserServiceUnavailable{}
}

/*GetScimUserServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetScimUserServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetScimUserServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users/{userId}][%d] getScimUserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScimUserServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUserServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimUserGatewayTimeout creates a GetScimUserGatewayTimeout with default headers values
func NewGetScimUserGatewayTimeout() *GetScimUserGatewayTimeout {
	return &GetScimUserGatewayTimeout{}
}

/*GetScimUserGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetScimUserGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScimUserGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/users/{userId}][%d] getScimUserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScimUserGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimUserGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

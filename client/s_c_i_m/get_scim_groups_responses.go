// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetScimGroupsReader is a Reader for the GetScimGroups structure.
type GetScimGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScimGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScimGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetScimGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetScimGroupsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScimGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScimGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetScimGroupsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetScimGroupsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetScimGroupsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScimGroupsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScimGroupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetScimGroupsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetScimGroupsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScimGroupsOK creates a GetScimGroupsOK with default headers values
func NewGetScimGroupsOK() *GetScimGroupsOK {
	return &GetScimGroupsOK{}
}

/*GetScimGroupsOK handles this case with default header values.

successful operation
*/
type GetScimGroupsOK struct {
	Payload *models.ScimGroupListResponse
}

func (o *GetScimGroupsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/groups][%d] getScimGroupsOK  %+v", 200, o.Payload)
}

func (o *GetScimGroupsOK) GetPayload() *models.ScimGroupListResponse {
	return o.Payload
}

func (o *GetScimGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimGroupListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimGroupsBadRequest creates a GetScimGroupsBadRequest with default headers values
func NewGetScimGroupsBadRequest() *GetScimGroupsBadRequest {
	return &GetScimGroupsBadRequest{}
}

/*GetScimGroupsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetScimGroupsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetScimGroupsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/groups][%d] getScimGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *GetScimGroupsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimGroupsUnauthorized creates a GetScimGroupsUnauthorized with default headers values
func NewGetScimGroupsUnauthorized() *GetScimGroupsUnauthorized {
	return &GetScimGroupsUnauthorized{}
}

/*GetScimGroupsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetScimGroupsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetScimGroupsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/groups][%d] getScimGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScimGroupsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimGroupsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimGroupsForbidden creates a GetScimGroupsForbidden with default headers values
func NewGetScimGroupsForbidden() *GetScimGroupsForbidden {
	return &GetScimGroupsForbidden{}
}

/*GetScimGroupsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetScimGroupsForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetScimGroupsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/groups][%d] getScimGroupsForbidden  %+v", 403, o.Payload)
}

func (o *GetScimGroupsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimGroupsNotFound creates a GetScimGroupsNotFound with default headers values
func NewGetScimGroupsNotFound() *GetScimGroupsNotFound {
	return &GetScimGroupsNotFound{}
}

/*GetScimGroupsNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetScimGroupsNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetScimGroupsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/groups][%d] getScimGroupsNotFound  %+v", 404, o.Payload)
}

func (o *GetScimGroupsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimGroupsRequestTimeout creates a GetScimGroupsRequestTimeout with default headers values
func NewGetScimGroupsRequestTimeout() *GetScimGroupsRequestTimeout {
	return &GetScimGroupsRequestTimeout{}
}

/*GetScimGroupsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetScimGroupsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScimGroupsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/groups][%d] getScimGroupsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScimGroupsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimGroupsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimGroupsRequestEntityTooLarge creates a GetScimGroupsRequestEntityTooLarge with default headers values
func NewGetScimGroupsRequestEntityTooLarge() *GetScimGroupsRequestEntityTooLarge {
	return &GetScimGroupsRequestEntityTooLarge{}
}

/*GetScimGroupsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetScimGroupsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetScimGroupsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/groups][%d] getScimGroupsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScimGroupsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimGroupsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimGroupsUnsupportedMediaType creates a GetScimGroupsUnsupportedMediaType with default headers values
func NewGetScimGroupsUnsupportedMediaType() *GetScimGroupsUnsupportedMediaType {
	return &GetScimGroupsUnsupportedMediaType{}
}

/*GetScimGroupsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetScimGroupsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetScimGroupsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/groups][%d] getScimGroupsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScimGroupsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimGroupsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimGroupsTooManyRequests creates a GetScimGroupsTooManyRequests with default headers values
func NewGetScimGroupsTooManyRequests() *GetScimGroupsTooManyRequests {
	return &GetScimGroupsTooManyRequests{}
}

/*GetScimGroupsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetScimGroupsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetScimGroupsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/groups][%d] getScimGroupsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScimGroupsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimGroupsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimGroupsInternalServerError creates a GetScimGroupsInternalServerError with default headers values
func NewGetScimGroupsInternalServerError() *GetScimGroupsInternalServerError {
	return &GetScimGroupsInternalServerError{}
}

/*GetScimGroupsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetScimGroupsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetScimGroupsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/groups][%d] getScimGroupsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScimGroupsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimGroupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimGroupsServiceUnavailable creates a GetScimGroupsServiceUnavailable with default headers values
func NewGetScimGroupsServiceUnavailable() *GetScimGroupsServiceUnavailable {
	return &GetScimGroupsServiceUnavailable{}
}

/*GetScimGroupsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetScimGroupsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetScimGroupsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/groups][%d] getScimGroupsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScimGroupsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimGroupsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimGroupsGatewayTimeout creates a GetScimGroupsGatewayTimeout with default headers values
func NewGetScimGroupsGatewayTimeout() *GetScimGroupsGatewayTimeout {
	return &GetScimGroupsGatewayTimeout{}
}

/*GetScimGroupsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetScimGroupsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetScimGroupsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/groups][%d] getScimGroupsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScimGroupsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimGroupsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

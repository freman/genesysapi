// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteScimUserReader is a Reader for the DeleteScimUser structure.
type DeleteScimUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteScimUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteScimUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteScimUserNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteScimUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteScimUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteScimUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteScimUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteScimUserRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteScimUserConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteScimUserRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteScimUserUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteScimUserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteScimUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteScimUserServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteScimUserGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteScimUserOK creates a DeleteScimUserOK with default headers values
func NewDeleteScimUserOK() *DeleteScimUserOK {
	return &DeleteScimUserOK{}
}

/*DeleteScimUserOK handles this case with default header values.

successful operation
*/
type DeleteScimUserOK struct {
	Payload models.Empty
}

func (o *DeleteScimUserOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/users/{userId}][%d] deleteScimUserOK  %+v", 200, o.Payload)
}

func (o *DeleteScimUserOK) GetPayload() models.Empty {
	return o.Payload
}

func (o *DeleteScimUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimUserNoContent creates a DeleteScimUserNoContent with default headers values
func NewDeleteScimUserNoContent() *DeleteScimUserNoContent {
	return &DeleteScimUserNoContent{}
}

/*DeleteScimUserNoContent handles this case with default header values.

User Deleted with no content returned.
*/
type DeleteScimUserNoContent struct {
}

func (o *DeleteScimUserNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/users/{userId}][%d] deleteScimUserNoContent ", 204)
}

func (o *DeleteScimUserNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteScimUserBadRequest creates a DeleteScimUserBadRequest with default headers values
func NewDeleteScimUserBadRequest() *DeleteScimUserBadRequest {
	return &DeleteScimUserBadRequest{}
}

/*DeleteScimUserBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteScimUserBadRequest struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimUserBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/users/{userId}][%d] deleteScimUserBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteScimUserBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimUserUnauthorized creates a DeleteScimUserUnauthorized with default headers values
func NewDeleteScimUserUnauthorized() *DeleteScimUserUnauthorized {
	return &DeleteScimUserUnauthorized{}
}

/*DeleteScimUserUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteScimUserUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimUserUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/users/{userId}][%d] deleteScimUserUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteScimUserUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimUserForbidden creates a DeleteScimUserForbidden with default headers values
func NewDeleteScimUserForbidden() *DeleteScimUserForbidden {
	return &DeleteScimUserForbidden{}
}

/*DeleteScimUserForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type DeleteScimUserForbidden struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimUserForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/users/{userId}][%d] deleteScimUserForbidden  %+v", 403, o.Payload)
}

func (o *DeleteScimUserForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimUserNotFound creates a DeleteScimUserNotFound with default headers values
func NewDeleteScimUserNotFound() *DeleteScimUserNotFound {
	return &DeleteScimUserNotFound{}
}

/*DeleteScimUserNotFound handles this case with default header values.

The requested resource was not found.
*/
type DeleteScimUserNotFound struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimUserNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/users/{userId}][%d] deleteScimUserNotFound  %+v", 404, o.Payload)
}

func (o *DeleteScimUserNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimUserRequestTimeout creates a DeleteScimUserRequestTimeout with default headers values
func NewDeleteScimUserRequestTimeout() *DeleteScimUserRequestTimeout {
	return &DeleteScimUserRequestTimeout{}
}

/*DeleteScimUserRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteScimUserRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimUserRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/users/{userId}][%d] deleteScimUserRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteScimUserRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimUserRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimUserConflict creates a DeleteScimUserConflict with default headers values
func NewDeleteScimUserConflict() *DeleteScimUserConflict {
	return &DeleteScimUserConflict{}
}

/*DeleteScimUserConflict handles this case with default header values.

Version does not match current version.
*/
type DeleteScimUserConflict struct {
	Payload *models.ScimError
}

func (o *DeleteScimUserConflict) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/users/{userId}][%d] deleteScimUserConflict  %+v", 409, o.Payload)
}

func (o *DeleteScimUserConflict) GetPayload() *models.ScimError {
	return o.Payload
}

func (o *DeleteScimUserConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimUserRequestEntityTooLarge creates a DeleteScimUserRequestEntityTooLarge with default headers values
func NewDeleteScimUserRequestEntityTooLarge() *DeleteScimUserRequestEntityTooLarge {
	return &DeleteScimUserRequestEntityTooLarge{}
}

/*DeleteScimUserRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type DeleteScimUserRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimUserRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/users/{userId}][%d] deleteScimUserRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteScimUserRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimUserRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimUserUnsupportedMediaType creates a DeleteScimUserUnsupportedMediaType with default headers values
func NewDeleteScimUserUnsupportedMediaType() *DeleteScimUserUnsupportedMediaType {
	return &DeleteScimUserUnsupportedMediaType{}
}

/*DeleteScimUserUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteScimUserUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimUserUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/users/{userId}][%d] deleteScimUserUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteScimUserUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimUserUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimUserTooManyRequests creates a DeleteScimUserTooManyRequests with default headers values
func NewDeleteScimUserTooManyRequests() *DeleteScimUserTooManyRequests {
	return &DeleteScimUserTooManyRequests{}
}

/*DeleteScimUserTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteScimUserTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimUserTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/users/{userId}][%d] deleteScimUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteScimUserTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimUserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimUserInternalServerError creates a DeleteScimUserInternalServerError with default headers values
func NewDeleteScimUserInternalServerError() *DeleteScimUserInternalServerError {
	return &DeleteScimUserInternalServerError{}
}

/*DeleteScimUserInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteScimUserInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimUserInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/users/{userId}][%d] deleteScimUserInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteScimUserInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimUserServiceUnavailable creates a DeleteScimUserServiceUnavailable with default headers values
func NewDeleteScimUserServiceUnavailable() *DeleteScimUserServiceUnavailable {
	return &DeleteScimUserServiceUnavailable{}
}

/*DeleteScimUserServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteScimUserServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimUserServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/users/{userId}][%d] deleteScimUserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteScimUserServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimUserServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScimUserGatewayTimeout creates a DeleteScimUserGatewayTimeout with default headers values
func NewDeleteScimUserGatewayTimeout() *DeleteScimUserGatewayTimeout {
	return &DeleteScimUserGatewayTimeout{}
}

/*DeleteScimUserGatewayTimeout handles this case with default header values.

The request timed out.
*/
type DeleteScimUserGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *DeleteScimUserGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/scim/users/{userId}][%d] deleteScimUserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteScimUserGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteScimUserGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetScimV2ResourcetypeParams creates a new GetScimV2ResourcetypeParams object
// with the default values initialized.
func NewGetScimV2ResourcetypeParams() *GetScimV2ResourcetypeParams {
	var ()
	return &GetScimV2ResourcetypeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetScimV2ResourcetypeParamsWithTimeout creates a new GetScimV2ResourcetypeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetScimV2ResourcetypeParamsWithTimeout(timeout time.Duration) *GetScimV2ResourcetypeParams {
	var ()
	return &GetScimV2ResourcetypeParams{

		timeout: timeout,
	}
}

// NewGetScimV2ResourcetypeParamsWithContext creates a new GetScimV2ResourcetypeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetScimV2ResourcetypeParamsWithContext(ctx context.Context) *GetScimV2ResourcetypeParams {
	var ()
	return &GetScimV2ResourcetypeParams{

		Context: ctx,
	}
}

// NewGetScimV2ResourcetypeParamsWithHTTPClient creates a new GetScimV2ResourcetypeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetScimV2ResourcetypeParamsWithHTTPClient(client *http.Client) *GetScimV2ResourcetypeParams {
	var ()
	return &GetScimV2ResourcetypeParams{
		HTTPClient: client,
	}
}

/*GetScimV2ResourcetypeParams contains all the parameters to send to the API endpoint
for the get scim v2 resourcetype operation typically these are written to a http.Request
*/
type GetScimV2ResourcetypeParams struct {

	/*ResourceType
	  The type of resource. Returned with GET /api/v2/scim/v2/resourcetypes.

	*/
	ResourceType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get scim v2 resourcetype params
func (o *GetScimV2ResourcetypeParams) WithTimeout(timeout time.Duration) *GetScimV2ResourcetypeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get scim v2 resourcetype params
func (o *GetScimV2ResourcetypeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get scim v2 resourcetype params
func (o *GetScimV2ResourcetypeParams) WithContext(ctx context.Context) *GetScimV2ResourcetypeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get scim v2 resourcetype params
func (o *GetScimV2ResourcetypeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get scim v2 resourcetype params
func (o *GetScimV2ResourcetypeParams) WithHTTPClient(client *http.Client) *GetScimV2ResourcetypeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get scim v2 resourcetype params
func (o *GetScimV2ResourcetypeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithResourceType adds the resourceType to the get scim v2 resourcetype params
func (o *GetScimV2ResourcetypeParams) WithResourceType(resourceType string) *GetScimV2ResourcetypeParams {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the get scim v2 resourcetype params
func (o *GetScimV2ResourcetypeParams) SetResourceType(resourceType string) {
	o.ResourceType = resourceType
}

// WriteToRequest writes these params to a swagger request
func (o *GetScimV2ResourcetypeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param resourceType
	if err := r.SetPathParam("resourceType", o.ResourceType); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

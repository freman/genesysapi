// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutScimV2UserReader is a Reader for the PutScimV2User structure.
type PutScimV2UserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutScimV2UserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutScimV2UserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutScimV2UserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutScimV2UserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutScimV2UserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutScimV2UserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutScimV2UserRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutScimV2UserConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutScimV2UserRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutScimV2UserUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutScimV2UserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutScimV2UserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutScimV2UserServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutScimV2UserGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutScimV2UserOK creates a PutScimV2UserOK with default headers values
func NewPutScimV2UserOK() *PutScimV2UserOK {
	return &PutScimV2UserOK{}
}

/*
PutScimV2UserOK describes a response with status code 200, with default header values.

successful operation
*/
type PutScimV2UserOK struct {
	Payload *models.ScimV2User
}

// IsSuccess returns true when this put scim v2 user o k response has a 2xx status code
func (o *PutScimV2UserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put scim v2 user o k response has a 3xx status code
func (o *PutScimV2UserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put scim v2 user o k response has a 4xx status code
func (o *PutScimV2UserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put scim v2 user o k response has a 5xx status code
func (o *PutScimV2UserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put scim v2 user o k response a status code equal to that given
func (o *PutScimV2UserOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutScimV2UserOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserOK  %+v", 200, o.Payload)
}

func (o *PutScimV2UserOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserOK  %+v", 200, o.Payload)
}

func (o *PutScimV2UserOK) GetPayload() *models.ScimV2User {
	return o.Payload
}

func (o *PutScimV2UserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimV2User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2UserBadRequest creates a PutScimV2UserBadRequest with default headers values
func NewPutScimV2UserBadRequest() *PutScimV2UserBadRequest {
	return &PutScimV2UserBadRequest{}
}

/*
PutScimV2UserBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutScimV2UserBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put scim v2 user bad request response has a 2xx status code
func (o *PutScimV2UserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put scim v2 user bad request response has a 3xx status code
func (o *PutScimV2UserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put scim v2 user bad request response has a 4xx status code
func (o *PutScimV2UserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put scim v2 user bad request response has a 5xx status code
func (o *PutScimV2UserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put scim v2 user bad request response a status code equal to that given
func (o *PutScimV2UserBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutScimV2UserBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserBadRequest  %+v", 400, o.Payload)
}

func (o *PutScimV2UserBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserBadRequest  %+v", 400, o.Payload)
}

func (o *PutScimV2UserBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2UserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2UserUnauthorized creates a PutScimV2UserUnauthorized with default headers values
func NewPutScimV2UserUnauthorized() *PutScimV2UserUnauthorized {
	return &PutScimV2UserUnauthorized{}
}

/*
PutScimV2UserUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutScimV2UserUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put scim v2 user unauthorized response has a 2xx status code
func (o *PutScimV2UserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put scim v2 user unauthorized response has a 3xx status code
func (o *PutScimV2UserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put scim v2 user unauthorized response has a 4xx status code
func (o *PutScimV2UserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put scim v2 user unauthorized response has a 5xx status code
func (o *PutScimV2UserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put scim v2 user unauthorized response a status code equal to that given
func (o *PutScimV2UserUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutScimV2UserUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserUnauthorized  %+v", 401, o.Payload)
}

func (o *PutScimV2UserUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserUnauthorized  %+v", 401, o.Payload)
}

func (o *PutScimV2UserUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2UserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2UserForbidden creates a PutScimV2UserForbidden with default headers values
func NewPutScimV2UserForbidden() *PutScimV2UserForbidden {
	return &PutScimV2UserForbidden{}
}

/*
PutScimV2UserForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutScimV2UserForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put scim v2 user forbidden response has a 2xx status code
func (o *PutScimV2UserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put scim v2 user forbidden response has a 3xx status code
func (o *PutScimV2UserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put scim v2 user forbidden response has a 4xx status code
func (o *PutScimV2UserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put scim v2 user forbidden response has a 5xx status code
func (o *PutScimV2UserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put scim v2 user forbidden response a status code equal to that given
func (o *PutScimV2UserForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutScimV2UserForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserForbidden  %+v", 403, o.Payload)
}

func (o *PutScimV2UserForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserForbidden  %+v", 403, o.Payload)
}

func (o *PutScimV2UserForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2UserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2UserNotFound creates a PutScimV2UserNotFound with default headers values
func NewPutScimV2UserNotFound() *PutScimV2UserNotFound {
	return &PutScimV2UserNotFound{}
}

/*
PutScimV2UserNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutScimV2UserNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put scim v2 user not found response has a 2xx status code
func (o *PutScimV2UserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put scim v2 user not found response has a 3xx status code
func (o *PutScimV2UserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put scim v2 user not found response has a 4xx status code
func (o *PutScimV2UserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put scim v2 user not found response has a 5xx status code
func (o *PutScimV2UserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put scim v2 user not found response a status code equal to that given
func (o *PutScimV2UserNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutScimV2UserNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserNotFound  %+v", 404, o.Payload)
}

func (o *PutScimV2UserNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserNotFound  %+v", 404, o.Payload)
}

func (o *PutScimV2UserNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2UserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2UserRequestTimeout creates a PutScimV2UserRequestTimeout with default headers values
func NewPutScimV2UserRequestTimeout() *PutScimV2UserRequestTimeout {
	return &PutScimV2UserRequestTimeout{}
}

/*
PutScimV2UserRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutScimV2UserRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put scim v2 user request timeout response has a 2xx status code
func (o *PutScimV2UserRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put scim v2 user request timeout response has a 3xx status code
func (o *PutScimV2UserRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put scim v2 user request timeout response has a 4xx status code
func (o *PutScimV2UserRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put scim v2 user request timeout response has a 5xx status code
func (o *PutScimV2UserRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put scim v2 user request timeout response a status code equal to that given
func (o *PutScimV2UserRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutScimV2UserRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutScimV2UserRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutScimV2UserRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2UserRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2UserConflict creates a PutScimV2UserConflict with default headers values
func NewPutScimV2UserConflict() *PutScimV2UserConflict {
	return &PutScimV2UserConflict{}
}

/*
PutScimV2UserConflict describes a response with status code 409, with default header values.

Version does not match current version.
*/
type PutScimV2UserConflict struct {
	Payload *models.ScimError
}

// IsSuccess returns true when this put scim v2 user conflict response has a 2xx status code
func (o *PutScimV2UserConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put scim v2 user conflict response has a 3xx status code
func (o *PutScimV2UserConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put scim v2 user conflict response has a 4xx status code
func (o *PutScimV2UserConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this put scim v2 user conflict response has a 5xx status code
func (o *PutScimV2UserConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this put scim v2 user conflict response a status code equal to that given
func (o *PutScimV2UserConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PutScimV2UserConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserConflict  %+v", 409, o.Payload)
}

func (o *PutScimV2UserConflict) String() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserConflict  %+v", 409, o.Payload)
}

func (o *PutScimV2UserConflict) GetPayload() *models.ScimError {
	return o.Payload
}

func (o *PutScimV2UserConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2UserRequestEntityTooLarge creates a PutScimV2UserRequestEntityTooLarge with default headers values
func NewPutScimV2UserRequestEntityTooLarge() *PutScimV2UserRequestEntityTooLarge {
	return &PutScimV2UserRequestEntityTooLarge{}
}

/*
PutScimV2UserRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutScimV2UserRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put scim v2 user request entity too large response has a 2xx status code
func (o *PutScimV2UserRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put scim v2 user request entity too large response has a 3xx status code
func (o *PutScimV2UserRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put scim v2 user request entity too large response has a 4xx status code
func (o *PutScimV2UserRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put scim v2 user request entity too large response has a 5xx status code
func (o *PutScimV2UserRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put scim v2 user request entity too large response a status code equal to that given
func (o *PutScimV2UserRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutScimV2UserRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutScimV2UserRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutScimV2UserRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2UserRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2UserUnsupportedMediaType creates a PutScimV2UserUnsupportedMediaType with default headers values
func NewPutScimV2UserUnsupportedMediaType() *PutScimV2UserUnsupportedMediaType {
	return &PutScimV2UserUnsupportedMediaType{}
}

/*
PutScimV2UserUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutScimV2UserUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put scim v2 user unsupported media type response has a 2xx status code
func (o *PutScimV2UserUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put scim v2 user unsupported media type response has a 3xx status code
func (o *PutScimV2UserUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put scim v2 user unsupported media type response has a 4xx status code
func (o *PutScimV2UserUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put scim v2 user unsupported media type response has a 5xx status code
func (o *PutScimV2UserUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put scim v2 user unsupported media type response a status code equal to that given
func (o *PutScimV2UserUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutScimV2UserUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutScimV2UserUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutScimV2UserUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2UserUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2UserTooManyRequests creates a PutScimV2UserTooManyRequests with default headers values
func NewPutScimV2UserTooManyRequests() *PutScimV2UserTooManyRequests {
	return &PutScimV2UserTooManyRequests{}
}

/*
PutScimV2UserTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutScimV2UserTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put scim v2 user too many requests response has a 2xx status code
func (o *PutScimV2UserTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put scim v2 user too many requests response has a 3xx status code
func (o *PutScimV2UserTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put scim v2 user too many requests response has a 4xx status code
func (o *PutScimV2UserTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put scim v2 user too many requests response has a 5xx status code
func (o *PutScimV2UserTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put scim v2 user too many requests response a status code equal to that given
func (o *PutScimV2UserTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutScimV2UserTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutScimV2UserTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutScimV2UserTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2UserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2UserInternalServerError creates a PutScimV2UserInternalServerError with default headers values
func NewPutScimV2UserInternalServerError() *PutScimV2UserInternalServerError {
	return &PutScimV2UserInternalServerError{}
}

/*
PutScimV2UserInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutScimV2UserInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put scim v2 user internal server error response has a 2xx status code
func (o *PutScimV2UserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put scim v2 user internal server error response has a 3xx status code
func (o *PutScimV2UserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put scim v2 user internal server error response has a 4xx status code
func (o *PutScimV2UserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put scim v2 user internal server error response has a 5xx status code
func (o *PutScimV2UserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put scim v2 user internal server error response a status code equal to that given
func (o *PutScimV2UserInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutScimV2UserInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserInternalServerError  %+v", 500, o.Payload)
}

func (o *PutScimV2UserInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserInternalServerError  %+v", 500, o.Payload)
}

func (o *PutScimV2UserInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2UserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2UserServiceUnavailable creates a PutScimV2UserServiceUnavailable with default headers values
func NewPutScimV2UserServiceUnavailable() *PutScimV2UserServiceUnavailable {
	return &PutScimV2UserServiceUnavailable{}
}

/*
PutScimV2UserServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutScimV2UserServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put scim v2 user service unavailable response has a 2xx status code
func (o *PutScimV2UserServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put scim v2 user service unavailable response has a 3xx status code
func (o *PutScimV2UserServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put scim v2 user service unavailable response has a 4xx status code
func (o *PutScimV2UserServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put scim v2 user service unavailable response has a 5xx status code
func (o *PutScimV2UserServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put scim v2 user service unavailable response a status code equal to that given
func (o *PutScimV2UserServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutScimV2UserServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutScimV2UserServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutScimV2UserServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2UserServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2UserGatewayTimeout creates a PutScimV2UserGatewayTimeout with default headers values
func NewPutScimV2UserGatewayTimeout() *PutScimV2UserGatewayTimeout {
	return &PutScimV2UserGatewayTimeout{}
}

/*
PutScimV2UserGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutScimV2UserGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put scim v2 user gateway timeout response has a 2xx status code
func (o *PutScimV2UserGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put scim v2 user gateway timeout response has a 3xx status code
func (o *PutScimV2UserGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put scim v2 user gateway timeout response has a 4xx status code
func (o *PutScimV2UserGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put scim v2 user gateway timeout response has a 5xx status code
func (o *PutScimV2UserGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put scim v2 user gateway timeout response a status code equal to that given
func (o *PutScimV2UserGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutScimV2UserGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutScimV2UserGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/users/{userId}][%d] putScimV2UserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutScimV2UserGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2UserGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

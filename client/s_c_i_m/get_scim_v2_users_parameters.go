// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetScimV2UsersParams creates a new GetScimV2UsersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetScimV2UsersParams() *GetScimV2UsersParams {
	return &GetScimV2UsersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetScimV2UsersParamsWithTimeout creates a new GetScimV2UsersParams object
// with the ability to set a timeout on a request.
func NewGetScimV2UsersParamsWithTimeout(timeout time.Duration) *GetScimV2UsersParams {
	return &GetScimV2UsersParams{
		timeout: timeout,
	}
}

// NewGetScimV2UsersParamsWithContext creates a new GetScimV2UsersParams object
// with the ability to set a context for a request.
func NewGetScimV2UsersParamsWithContext(ctx context.Context) *GetScimV2UsersParams {
	return &GetScimV2UsersParams{
		Context: ctx,
	}
}

// NewGetScimV2UsersParamsWithHTTPClient creates a new GetScimV2UsersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetScimV2UsersParamsWithHTTPClient(client *http.Client) *GetScimV2UsersParams {
	return &GetScimV2UsersParams{
		HTTPClient: client,
	}
}

/*
GetScimV2UsersParams contains all the parameters to send to the API endpoint

	for the get scim v2 users operation.

	Typically these are written to a http.Request.
*/
type GetScimV2UsersParams struct {

	/* Attributes.

	   Indicates which attributes to include. Returns these attributes and the "id", "userName", "active", and "meta" attributes. Use "attributes" to avoid expensive secondary calls for the default attributes.
	*/
	Attributes []string

	/* Count.

	   The requested number of items per page. A value of 0 returns "totalResults". A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the "excludedAttributes" or "attributes" query parameters to exclude or only include secondary lookup values such as "externalId",  "roles", "urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages", or "urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills".

	   Format: int32
	   Default: 25
	*/
	Count *int32

	/* ExcludedAttributes.

	   Indicates which attributes to exclude. Returns the default attributes minus "excludedAttributes". Always returns the "id", "userName", "active", and "meta" attributes. Use "excludedAttributes" to avoid expensive secondary calls for the default attributes.
	*/
	ExcludedAttributes []string

	/* Filter.

	   Filters results. If nothing is specified, returns all active users. Examples of valid values: "id eq 857449b0-d9e7-4cd0-acbf-a6adfb9ef1e9", "userName eq search@sample.org", "manager eq 16e10e2f-1136-43fe-bb84-eac073168a49", "email eq search@sample.org", "division eq divisionName", "externalId eq 167844", "active eq false", "employeeNumber eq 9876543210".
	*/
	Filter *string

	/* StartIndex.

	   The 1-based index of the first query result.

	   Format: int32
	   Default: 1
	*/
	StartIndex *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get scim v2 users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetScimV2UsersParams) WithDefaults() *GetScimV2UsersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get scim v2 users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetScimV2UsersParams) SetDefaults() {
	var (
		countDefault = int32(25)

		startIndexDefault = int32(1)
	)

	val := GetScimV2UsersParams{
		Count:      &countDefault,
		StartIndex: &startIndexDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get scim v2 users params
func (o *GetScimV2UsersParams) WithTimeout(timeout time.Duration) *GetScimV2UsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get scim v2 users params
func (o *GetScimV2UsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get scim v2 users params
func (o *GetScimV2UsersParams) WithContext(ctx context.Context) *GetScimV2UsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get scim v2 users params
func (o *GetScimV2UsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get scim v2 users params
func (o *GetScimV2UsersParams) WithHTTPClient(client *http.Client) *GetScimV2UsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get scim v2 users params
func (o *GetScimV2UsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttributes adds the attributes to the get scim v2 users params
func (o *GetScimV2UsersParams) WithAttributes(attributes []string) *GetScimV2UsersParams {
	o.SetAttributes(attributes)
	return o
}

// SetAttributes adds the attributes to the get scim v2 users params
func (o *GetScimV2UsersParams) SetAttributes(attributes []string) {
	o.Attributes = attributes
}

// WithCount adds the count to the get scim v2 users params
func (o *GetScimV2UsersParams) WithCount(count *int32) *GetScimV2UsersParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get scim v2 users params
func (o *GetScimV2UsersParams) SetCount(count *int32) {
	o.Count = count
}

// WithExcludedAttributes adds the excludedAttributes to the get scim v2 users params
func (o *GetScimV2UsersParams) WithExcludedAttributes(excludedAttributes []string) *GetScimV2UsersParams {
	o.SetExcludedAttributes(excludedAttributes)
	return o
}

// SetExcludedAttributes adds the excludedAttributes to the get scim v2 users params
func (o *GetScimV2UsersParams) SetExcludedAttributes(excludedAttributes []string) {
	o.ExcludedAttributes = excludedAttributes
}

// WithFilter adds the filter to the get scim v2 users params
func (o *GetScimV2UsersParams) WithFilter(filter *string) *GetScimV2UsersParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get scim v2 users params
func (o *GetScimV2UsersParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithStartIndex adds the startIndex to the get scim v2 users params
func (o *GetScimV2UsersParams) WithStartIndex(startIndex *int32) *GetScimV2UsersParams {
	o.SetStartIndex(startIndex)
	return o
}

// SetStartIndex adds the startIndex to the get scim v2 users params
func (o *GetScimV2UsersParams) SetStartIndex(startIndex *int32) {
	o.StartIndex = startIndex
}

// WriteToRequest writes these params to a swagger request
func (o *GetScimV2UsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Attributes != nil {

		// binding items for attributes
		joinedAttributes := o.bindParamAttributes(reg)

		// query array param attributes
		if err := r.SetQueryParam("attributes", joinedAttributes...); err != nil {
			return err
		}
	}

	if o.Count != nil {

		// query param count
		var qrCount int32

		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {

			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}
	}

	if o.ExcludedAttributes != nil {

		// binding items for excludedAttributes
		joinedExcludedAttributes := o.bindParamExcludedAttributes(reg)

		// query array param excludedAttributes
		if err := r.SetQueryParam("excludedAttributes", joinedExcludedAttributes...); err != nil {
			return err
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.StartIndex != nil {

		// query param startIndex
		var qrStartIndex int32

		if o.StartIndex != nil {
			qrStartIndex = *o.StartIndex
		}
		qStartIndex := swag.FormatInt32(qrStartIndex)
		if qStartIndex != "" {

			if err := r.SetQueryParam("startIndex", qStartIndex); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetScimV2Users binds the parameter attributes
func (o *GetScimV2UsersParams) bindParamAttributes(formats strfmt.Registry) []string {
	attributesIR := o.Attributes

	var attributesIC []string
	for _, attributesIIR := range attributesIR { // explode []string

		attributesIIV := attributesIIR // string as string
		attributesIC = append(attributesIC, attributesIIV)
	}

	// items.CollectionFormat: "multi"
	attributesIS := swag.JoinByFormat(attributesIC, "multi")

	return attributesIS
}

// bindParamGetScimV2Users binds the parameter excludedAttributes
func (o *GetScimV2UsersParams) bindParamExcludedAttributes(formats strfmt.Registry) []string {
	excludedAttributesIR := o.ExcludedAttributes

	var excludedAttributesIC []string
	for _, excludedAttributesIIR := range excludedAttributesIR { // explode []string

		excludedAttributesIIV := excludedAttributesIIR // string as string
		excludedAttributesIC = append(excludedAttributesIC, excludedAttributesIIV)
	}

	// items.CollectionFormat: "multi"
	excludedAttributesIS := swag.JoinByFormat(excludedAttributesIC, "multi")

	return excludedAttributesIS
}

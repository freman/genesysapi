// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchScimV2GroupReader is a Reader for the PatchScimV2Group structure.
type PatchScimV2GroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchScimV2GroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchScimV2GroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchScimV2GroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchScimV2GroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchScimV2GroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchScimV2GroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchScimV2GroupRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchScimV2GroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchScimV2GroupRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchScimV2GroupUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchScimV2GroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchScimV2GroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchScimV2GroupServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchScimV2GroupGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchScimV2GroupOK creates a PatchScimV2GroupOK with default headers values
func NewPatchScimV2GroupOK() *PatchScimV2GroupOK {
	return &PatchScimV2GroupOK{}
}

/*PatchScimV2GroupOK handles this case with default header values.

successful operation
*/
type PatchScimV2GroupOK struct {
	Payload *models.ScimV2Group
}

func (o *PatchScimV2GroupOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/groups/{groupId}][%d] patchScimV2GroupOK  %+v", 200, o.Payload)
}

func (o *PatchScimV2GroupOK) GetPayload() *models.ScimV2Group {
	return o.Payload
}

func (o *PatchScimV2GroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimV2Group)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2GroupBadRequest creates a PatchScimV2GroupBadRequest with default headers values
func NewPatchScimV2GroupBadRequest() *PatchScimV2GroupBadRequest {
	return &PatchScimV2GroupBadRequest{}
}

/*PatchScimV2GroupBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchScimV2GroupBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2GroupBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/groups/{groupId}][%d] patchScimV2GroupBadRequest  %+v", 400, o.Payload)
}

func (o *PatchScimV2GroupBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2GroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2GroupUnauthorized creates a PatchScimV2GroupUnauthorized with default headers values
func NewPatchScimV2GroupUnauthorized() *PatchScimV2GroupUnauthorized {
	return &PatchScimV2GroupUnauthorized{}
}

/*PatchScimV2GroupUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchScimV2GroupUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2GroupUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/groups/{groupId}][%d] patchScimV2GroupUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchScimV2GroupUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2GroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2GroupForbidden creates a PatchScimV2GroupForbidden with default headers values
func NewPatchScimV2GroupForbidden() *PatchScimV2GroupForbidden {
	return &PatchScimV2GroupForbidden{}
}

/*PatchScimV2GroupForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchScimV2GroupForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2GroupForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/groups/{groupId}][%d] patchScimV2GroupForbidden  %+v", 403, o.Payload)
}

func (o *PatchScimV2GroupForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2GroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2GroupNotFound creates a PatchScimV2GroupNotFound with default headers values
func NewPatchScimV2GroupNotFound() *PatchScimV2GroupNotFound {
	return &PatchScimV2GroupNotFound{}
}

/*PatchScimV2GroupNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchScimV2GroupNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2GroupNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/groups/{groupId}][%d] patchScimV2GroupNotFound  %+v", 404, o.Payload)
}

func (o *PatchScimV2GroupNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2GroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2GroupRequestTimeout creates a PatchScimV2GroupRequestTimeout with default headers values
func NewPatchScimV2GroupRequestTimeout() *PatchScimV2GroupRequestTimeout {
	return &PatchScimV2GroupRequestTimeout{}
}

/*PatchScimV2GroupRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchScimV2GroupRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2GroupRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/groups/{groupId}][%d] patchScimV2GroupRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchScimV2GroupRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2GroupRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2GroupConflict creates a PatchScimV2GroupConflict with default headers values
func NewPatchScimV2GroupConflict() *PatchScimV2GroupConflict {
	return &PatchScimV2GroupConflict{}
}

/*PatchScimV2GroupConflict handles this case with default header values.

Version does not match current version.
*/
type PatchScimV2GroupConflict struct {
	Payload *models.ScimError
}

func (o *PatchScimV2GroupConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/groups/{groupId}][%d] patchScimV2GroupConflict  %+v", 409, o.Payload)
}

func (o *PatchScimV2GroupConflict) GetPayload() *models.ScimError {
	return o.Payload
}

func (o *PatchScimV2GroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2GroupRequestEntityTooLarge creates a PatchScimV2GroupRequestEntityTooLarge with default headers values
func NewPatchScimV2GroupRequestEntityTooLarge() *PatchScimV2GroupRequestEntityTooLarge {
	return &PatchScimV2GroupRequestEntityTooLarge{}
}

/*PatchScimV2GroupRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PatchScimV2GroupRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2GroupRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/groups/{groupId}][%d] patchScimV2GroupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchScimV2GroupRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2GroupRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2GroupUnsupportedMediaType creates a PatchScimV2GroupUnsupportedMediaType with default headers values
func NewPatchScimV2GroupUnsupportedMediaType() *PatchScimV2GroupUnsupportedMediaType {
	return &PatchScimV2GroupUnsupportedMediaType{}
}

/*PatchScimV2GroupUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchScimV2GroupUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2GroupUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/groups/{groupId}][%d] patchScimV2GroupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchScimV2GroupUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2GroupUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2GroupTooManyRequests creates a PatchScimV2GroupTooManyRequests with default headers values
func NewPatchScimV2GroupTooManyRequests() *PatchScimV2GroupTooManyRequests {
	return &PatchScimV2GroupTooManyRequests{}
}

/*PatchScimV2GroupTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchScimV2GroupTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2GroupTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/groups/{groupId}][%d] patchScimV2GroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchScimV2GroupTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2GroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2GroupInternalServerError creates a PatchScimV2GroupInternalServerError with default headers values
func NewPatchScimV2GroupInternalServerError() *PatchScimV2GroupInternalServerError {
	return &PatchScimV2GroupInternalServerError{}
}

/*PatchScimV2GroupInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchScimV2GroupInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2GroupInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/groups/{groupId}][%d] patchScimV2GroupInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchScimV2GroupInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2GroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2GroupServiceUnavailable creates a PatchScimV2GroupServiceUnavailable with default headers values
func NewPatchScimV2GroupServiceUnavailable() *PatchScimV2GroupServiceUnavailable {
	return &PatchScimV2GroupServiceUnavailable{}
}

/*PatchScimV2GroupServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchScimV2GroupServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2GroupServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/groups/{groupId}][%d] patchScimV2GroupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchScimV2GroupServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2GroupServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimV2GroupGatewayTimeout creates a PatchScimV2GroupGatewayTimeout with default headers values
func NewPatchScimV2GroupGatewayTimeout() *PatchScimV2GroupGatewayTimeout {
	return &PatchScimV2GroupGatewayTimeout{}
}

/*PatchScimV2GroupGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchScimV2GroupGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchScimV2GroupGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/v2/groups/{groupId}][%d] patchScimV2GroupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchScimV2GroupGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimV2GroupGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

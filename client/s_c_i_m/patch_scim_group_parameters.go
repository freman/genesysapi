// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// NewPatchScimGroupParams creates a new PatchScimGroupParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchScimGroupParams() *PatchScimGroupParams {
	return &PatchScimGroupParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchScimGroupParamsWithTimeout creates a new PatchScimGroupParams object
// with the ability to set a timeout on a request.
func NewPatchScimGroupParamsWithTimeout(timeout time.Duration) *PatchScimGroupParams {
	return &PatchScimGroupParams{
		timeout: timeout,
	}
}

// NewPatchScimGroupParamsWithContext creates a new PatchScimGroupParams object
// with the ability to set a context for a request.
func NewPatchScimGroupParamsWithContext(ctx context.Context) *PatchScimGroupParams {
	return &PatchScimGroupParams{
		Context: ctx,
	}
}

// NewPatchScimGroupParamsWithHTTPClient creates a new PatchScimGroupParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchScimGroupParamsWithHTTPClient(client *http.Client) *PatchScimGroupParams {
	return &PatchScimGroupParams{
		HTTPClient: client,
	}
}

/*
PatchScimGroupParams contains all the parameters to send to the API endpoint

	for the patch scim group operation.

	Typically these are written to a http.Request.
*/
type PatchScimGroupParams struct {

	/* IfMatch.

	   The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: "42". If the ETag is different from the version on the server, returns 400 with a "scimType" of "invalidVers".
	*/
	IfMatch *string

	/* Body.

	   The information used to modify a group.
	*/
	Body *models.ScimV2PatchRequest

	/* GroupID.

	   The ID of a group. Returned with GET /api/v2/scim/groups.
	*/
	GroupID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch scim group params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchScimGroupParams) WithDefaults() *PatchScimGroupParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch scim group params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchScimGroupParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the patch scim group params
func (o *PatchScimGroupParams) WithTimeout(timeout time.Duration) *PatchScimGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch scim group params
func (o *PatchScimGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch scim group params
func (o *PatchScimGroupParams) WithContext(ctx context.Context) *PatchScimGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch scim group params
func (o *PatchScimGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch scim group params
func (o *PatchScimGroupParams) WithHTTPClient(client *http.Client) *PatchScimGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch scim group params
func (o *PatchScimGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfMatch adds the ifMatch to the patch scim group params
func (o *PatchScimGroupParams) WithIfMatch(ifMatch *string) *PatchScimGroupParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the patch scim group params
func (o *PatchScimGroupParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithBody adds the body to the patch scim group params
func (o *PatchScimGroupParams) WithBody(body *models.ScimV2PatchRequest) *PatchScimGroupParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch scim group params
func (o *PatchScimGroupParams) SetBody(body *models.ScimV2PatchRequest) {
	o.Body = body
}

// WithGroupID adds the groupID to the patch scim group params
func (o *PatchScimGroupParams) WithGroupID(groupID string) *PatchScimGroupParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the patch scim group params
func (o *PatchScimGroupParams) SetGroupID(groupID string) {
	o.GroupID = groupID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchScimGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfMatch != nil {

		// header param If-Match
		if err := r.SetHeaderParam("If-Match", *o.IfMatch); err != nil {
			return err
		}
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param groupId
	if err := r.SetPathParam("groupId", o.GroupID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

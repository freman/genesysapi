// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// NewPatchScimV2UserParams creates a new PatchScimV2UserParams object
// with the default values initialized.
func NewPatchScimV2UserParams() *PatchScimV2UserParams {
	var ()
	return &PatchScimV2UserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchScimV2UserParamsWithTimeout creates a new PatchScimV2UserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchScimV2UserParamsWithTimeout(timeout time.Duration) *PatchScimV2UserParams {
	var ()
	return &PatchScimV2UserParams{

		timeout: timeout,
	}
}

// NewPatchScimV2UserParamsWithContext creates a new PatchScimV2UserParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchScimV2UserParamsWithContext(ctx context.Context) *PatchScimV2UserParams {
	var ()
	return &PatchScimV2UserParams{

		Context: ctx,
	}
}

// NewPatchScimV2UserParamsWithHTTPClient creates a new PatchScimV2UserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchScimV2UserParamsWithHTTPClient(client *http.Client) *PatchScimV2UserParams {
	var ()
	return &PatchScimV2UserParams{
		HTTPClient: client,
	}
}

/*PatchScimV2UserParams contains all the parameters to send to the API endpoint
for the patch scim v2 user operation typically these are written to a http.Request
*/
type PatchScimV2UserParams struct {

	/*IfMatch
	  The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: "42". If the ETag is different from the version on the server, returns 400 with a "scimType" of "invalidVers".

	*/
	IfMatch *string
	/*Body
	  The information used to modify a user.

	*/
	Body *models.ScimV2PatchRequest
	/*UserID
	  The ID of a user. Returned with GET /api/v2/scim/v2/users.

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch scim v2 user params
func (o *PatchScimV2UserParams) WithTimeout(timeout time.Duration) *PatchScimV2UserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch scim v2 user params
func (o *PatchScimV2UserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch scim v2 user params
func (o *PatchScimV2UserParams) WithContext(ctx context.Context) *PatchScimV2UserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch scim v2 user params
func (o *PatchScimV2UserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch scim v2 user params
func (o *PatchScimV2UserParams) WithHTTPClient(client *http.Client) *PatchScimV2UserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch scim v2 user params
func (o *PatchScimV2UserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfMatch adds the ifMatch to the patch scim v2 user params
func (o *PatchScimV2UserParams) WithIfMatch(ifMatch *string) *PatchScimV2UserParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the patch scim v2 user params
func (o *PatchScimV2UserParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithBody adds the body to the patch scim v2 user params
func (o *PatchScimV2UserParams) WithBody(body *models.ScimV2PatchRequest) *PatchScimV2UserParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch scim v2 user params
func (o *PatchScimV2UserParams) SetBody(body *models.ScimV2PatchRequest) {
	o.Body = body
}

// WithUserID adds the userID to the patch scim v2 user params
func (o *PatchScimV2UserParams) WithUserID(userID string) *PatchScimV2UserParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the patch scim v2 user params
func (o *PatchScimV2UserParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchScimV2UserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfMatch != nil {

		// header param If-Match
		if err := r.SetHeaderParam("If-Match", *o.IfMatch); err != nil {
			return err
		}

	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostScimUsersReader is a Reader for the PostScimUsers structure.
type PostScimUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostScimUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostScimUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewPostScimUsersCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostScimUsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostScimUsersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostScimUsersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostScimUsersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostScimUsersRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostScimUsersConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostScimUsersRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostScimUsersUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostScimUsersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostScimUsersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostScimUsersServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostScimUsersGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostScimUsersOK creates a PostScimUsersOK with default headers values
func NewPostScimUsersOK() *PostScimUsersOK {
	return &PostScimUsersOK{}
}

/*PostScimUsersOK handles this case with default header values.

successful operation
*/
type PostScimUsersOK struct {
	Payload *models.ScimV2User
}

func (o *PostScimUsersOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/users][%d] postScimUsersOK  %+v", 200, o.Payload)
}

func (o *PostScimUsersOK) GetPayload() *models.ScimV2User {
	return o.Payload
}

func (o *PostScimUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimV2User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimUsersCreated creates a PostScimUsersCreated with default headers values
func NewPostScimUsersCreated() *PostScimUsersCreated {
	return &PostScimUsersCreated{}
}

/*PostScimUsersCreated handles this case with default header values.

User Created.
*/
type PostScimUsersCreated struct {
	Payload *models.ScimV2User
}

func (o *PostScimUsersCreated) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/users][%d] postScimUsersCreated  %+v", 201, o.Payload)
}

func (o *PostScimUsersCreated) GetPayload() *models.ScimV2User {
	return o.Payload
}

func (o *PostScimUsersCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimV2User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimUsersBadRequest creates a PostScimUsersBadRequest with default headers values
func NewPostScimUsersBadRequest() *PostScimUsersBadRequest {
	return &PostScimUsersBadRequest{}
}

/*PostScimUsersBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostScimUsersBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostScimUsersBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/users][%d] postScimUsersBadRequest  %+v", 400, o.Payload)
}

func (o *PostScimUsersBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimUsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimUsersUnauthorized creates a PostScimUsersUnauthorized with default headers values
func NewPostScimUsersUnauthorized() *PostScimUsersUnauthorized {
	return &PostScimUsersUnauthorized{}
}

/*PostScimUsersUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostScimUsersUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostScimUsersUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/users][%d] postScimUsersUnauthorized  %+v", 401, o.Payload)
}

func (o *PostScimUsersUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimUsersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimUsersForbidden creates a PostScimUsersForbidden with default headers values
func NewPostScimUsersForbidden() *PostScimUsersForbidden {
	return &PostScimUsersForbidden{}
}

/*PostScimUsersForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostScimUsersForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostScimUsersForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/users][%d] postScimUsersForbidden  %+v", 403, o.Payload)
}

func (o *PostScimUsersForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimUsersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimUsersNotFound creates a PostScimUsersNotFound with default headers values
func NewPostScimUsersNotFound() *PostScimUsersNotFound {
	return &PostScimUsersNotFound{}
}

/*PostScimUsersNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostScimUsersNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostScimUsersNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/users][%d] postScimUsersNotFound  %+v", 404, o.Payload)
}

func (o *PostScimUsersNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimUsersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimUsersRequestTimeout creates a PostScimUsersRequestTimeout with default headers values
func NewPostScimUsersRequestTimeout() *PostScimUsersRequestTimeout {
	return &PostScimUsersRequestTimeout{}
}

/*PostScimUsersRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostScimUsersRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostScimUsersRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/users][%d] postScimUsersRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostScimUsersRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimUsersRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimUsersConflict creates a PostScimUsersConflict with default headers values
func NewPostScimUsersConflict() *PostScimUsersConflict {
	return &PostScimUsersConflict{}
}

/*PostScimUsersConflict handles this case with default header values.

User name already in use by non-deleted user.
*/
type PostScimUsersConflict struct {
	Payload *models.ScimError
}

func (o *PostScimUsersConflict) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/users][%d] postScimUsersConflict  %+v", 409, o.Payload)
}

func (o *PostScimUsersConflict) GetPayload() *models.ScimError {
	return o.Payload
}

func (o *PostScimUsersConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimUsersRequestEntityTooLarge creates a PostScimUsersRequestEntityTooLarge with default headers values
func NewPostScimUsersRequestEntityTooLarge() *PostScimUsersRequestEntityTooLarge {
	return &PostScimUsersRequestEntityTooLarge{}
}

/*PostScimUsersRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PostScimUsersRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostScimUsersRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/users][%d] postScimUsersRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostScimUsersRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimUsersRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimUsersUnsupportedMediaType creates a PostScimUsersUnsupportedMediaType with default headers values
func NewPostScimUsersUnsupportedMediaType() *PostScimUsersUnsupportedMediaType {
	return &PostScimUsersUnsupportedMediaType{}
}

/*PostScimUsersUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostScimUsersUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostScimUsersUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/users][%d] postScimUsersUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostScimUsersUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimUsersUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimUsersTooManyRequests creates a PostScimUsersTooManyRequests with default headers values
func NewPostScimUsersTooManyRequests() *PostScimUsersTooManyRequests {
	return &PostScimUsersTooManyRequests{}
}

/*PostScimUsersTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostScimUsersTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostScimUsersTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/users][%d] postScimUsersTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostScimUsersTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimUsersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimUsersInternalServerError creates a PostScimUsersInternalServerError with default headers values
func NewPostScimUsersInternalServerError() *PostScimUsersInternalServerError {
	return &PostScimUsersInternalServerError{}
}

/*PostScimUsersInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostScimUsersInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostScimUsersInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/users][%d] postScimUsersInternalServerError  %+v", 500, o.Payload)
}

func (o *PostScimUsersInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimUsersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimUsersServiceUnavailable creates a PostScimUsersServiceUnavailable with default headers values
func NewPostScimUsersServiceUnavailable() *PostScimUsersServiceUnavailable {
	return &PostScimUsersServiceUnavailable{}
}

/*PostScimUsersServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostScimUsersServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostScimUsersServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/users][%d] postScimUsersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostScimUsersServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimUsersServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScimUsersGatewayTimeout creates a PostScimUsersGatewayTimeout with default headers values
func NewPostScimUsersGatewayTimeout() *PostScimUsersGatewayTimeout {
	return &PostScimUsersGatewayTimeout{}
}

/*PostScimUsersGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostScimUsersGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostScimUsersGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/scim/users][%d] postScimUsersGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostScimUsersGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostScimUsersGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutScimV2GroupReader is a Reader for the PutScimV2Group structure.
type PutScimV2GroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutScimV2GroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutScimV2GroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutScimV2GroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutScimV2GroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutScimV2GroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutScimV2GroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutScimV2GroupRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutScimV2GroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutScimV2GroupRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutScimV2GroupUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutScimV2GroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutScimV2GroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutScimV2GroupServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutScimV2GroupGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutScimV2GroupOK creates a PutScimV2GroupOK with default headers values
func NewPutScimV2GroupOK() *PutScimV2GroupOK {
	return &PutScimV2GroupOK{}
}

/*PutScimV2GroupOK handles this case with default header values.

successful operation
*/
type PutScimV2GroupOK struct {
	Payload *models.ScimV2Group
}

func (o *PutScimV2GroupOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/groups/{groupId}][%d] putScimV2GroupOK  %+v", 200, o.Payload)
}

func (o *PutScimV2GroupOK) GetPayload() *models.ScimV2Group {
	return o.Payload
}

func (o *PutScimV2GroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimV2Group)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2GroupBadRequest creates a PutScimV2GroupBadRequest with default headers values
func NewPutScimV2GroupBadRequest() *PutScimV2GroupBadRequest {
	return &PutScimV2GroupBadRequest{}
}

/*PutScimV2GroupBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutScimV2GroupBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutScimV2GroupBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/groups/{groupId}][%d] putScimV2GroupBadRequest  %+v", 400, o.Payload)
}

func (o *PutScimV2GroupBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2GroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2GroupUnauthorized creates a PutScimV2GroupUnauthorized with default headers values
func NewPutScimV2GroupUnauthorized() *PutScimV2GroupUnauthorized {
	return &PutScimV2GroupUnauthorized{}
}

/*PutScimV2GroupUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutScimV2GroupUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutScimV2GroupUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/groups/{groupId}][%d] putScimV2GroupUnauthorized  %+v", 401, o.Payload)
}

func (o *PutScimV2GroupUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2GroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2GroupForbidden creates a PutScimV2GroupForbidden with default headers values
func NewPutScimV2GroupForbidden() *PutScimV2GroupForbidden {
	return &PutScimV2GroupForbidden{}
}

/*PutScimV2GroupForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutScimV2GroupForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutScimV2GroupForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/groups/{groupId}][%d] putScimV2GroupForbidden  %+v", 403, o.Payload)
}

func (o *PutScimV2GroupForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2GroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2GroupNotFound creates a PutScimV2GroupNotFound with default headers values
func NewPutScimV2GroupNotFound() *PutScimV2GroupNotFound {
	return &PutScimV2GroupNotFound{}
}

/*PutScimV2GroupNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutScimV2GroupNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutScimV2GroupNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/groups/{groupId}][%d] putScimV2GroupNotFound  %+v", 404, o.Payload)
}

func (o *PutScimV2GroupNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2GroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2GroupRequestTimeout creates a PutScimV2GroupRequestTimeout with default headers values
func NewPutScimV2GroupRequestTimeout() *PutScimV2GroupRequestTimeout {
	return &PutScimV2GroupRequestTimeout{}
}

/*PutScimV2GroupRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutScimV2GroupRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutScimV2GroupRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/groups/{groupId}][%d] putScimV2GroupRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutScimV2GroupRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2GroupRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2GroupConflict creates a PutScimV2GroupConflict with default headers values
func NewPutScimV2GroupConflict() *PutScimV2GroupConflict {
	return &PutScimV2GroupConflict{}
}

/*PutScimV2GroupConflict handles this case with default header values.

Version does not match current version.
*/
type PutScimV2GroupConflict struct {
	Payload *models.ScimError
}

func (o *PutScimV2GroupConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/groups/{groupId}][%d] putScimV2GroupConflict  %+v", 409, o.Payload)
}

func (o *PutScimV2GroupConflict) GetPayload() *models.ScimError {
	return o.Payload
}

func (o *PutScimV2GroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2GroupRequestEntityTooLarge creates a PutScimV2GroupRequestEntityTooLarge with default headers values
func NewPutScimV2GroupRequestEntityTooLarge() *PutScimV2GroupRequestEntityTooLarge {
	return &PutScimV2GroupRequestEntityTooLarge{}
}

/*PutScimV2GroupRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutScimV2GroupRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutScimV2GroupRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/groups/{groupId}][%d] putScimV2GroupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutScimV2GroupRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2GroupRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2GroupUnsupportedMediaType creates a PutScimV2GroupUnsupportedMediaType with default headers values
func NewPutScimV2GroupUnsupportedMediaType() *PutScimV2GroupUnsupportedMediaType {
	return &PutScimV2GroupUnsupportedMediaType{}
}

/*PutScimV2GroupUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutScimV2GroupUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutScimV2GroupUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/groups/{groupId}][%d] putScimV2GroupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutScimV2GroupUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2GroupUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2GroupTooManyRequests creates a PutScimV2GroupTooManyRequests with default headers values
func NewPutScimV2GroupTooManyRequests() *PutScimV2GroupTooManyRequests {
	return &PutScimV2GroupTooManyRequests{}
}

/*PutScimV2GroupTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutScimV2GroupTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutScimV2GroupTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/groups/{groupId}][%d] putScimV2GroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutScimV2GroupTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2GroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2GroupInternalServerError creates a PutScimV2GroupInternalServerError with default headers values
func NewPutScimV2GroupInternalServerError() *PutScimV2GroupInternalServerError {
	return &PutScimV2GroupInternalServerError{}
}

/*PutScimV2GroupInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutScimV2GroupInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutScimV2GroupInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/groups/{groupId}][%d] putScimV2GroupInternalServerError  %+v", 500, o.Payload)
}

func (o *PutScimV2GroupInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2GroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2GroupServiceUnavailable creates a PutScimV2GroupServiceUnavailable with default headers values
func NewPutScimV2GroupServiceUnavailable() *PutScimV2GroupServiceUnavailable {
	return &PutScimV2GroupServiceUnavailable{}
}

/*PutScimV2GroupServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutScimV2GroupServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutScimV2GroupServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/groups/{groupId}][%d] putScimV2GroupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutScimV2GroupServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2GroupServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutScimV2GroupGatewayTimeout creates a PutScimV2GroupGatewayTimeout with default headers values
func NewPutScimV2GroupGatewayTimeout() *PutScimV2GroupGatewayTimeout {
	return &PutScimV2GroupGatewayTimeout{}
}

/*PutScimV2GroupGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutScimV2GroupGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutScimV2GroupGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/scim/v2/groups/{groupId}][%d] putScimV2GroupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutScimV2GroupGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutScimV2GroupGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

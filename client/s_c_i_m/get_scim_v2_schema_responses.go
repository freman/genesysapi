// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetScimV2SchemaReader is a Reader for the GetScimV2Schema structure.
type GetScimV2SchemaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScimV2SchemaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScimV2SchemaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetScimV2SchemaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetScimV2SchemaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScimV2SchemaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScimV2SchemaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetScimV2SchemaRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetScimV2SchemaRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetScimV2SchemaUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScimV2SchemaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScimV2SchemaInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetScimV2SchemaServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetScimV2SchemaGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScimV2SchemaOK creates a GetScimV2SchemaOK with default headers values
func NewGetScimV2SchemaOK() *GetScimV2SchemaOK {
	return &GetScimV2SchemaOK{}
}

/*
GetScimV2SchemaOK describes a response with status code 200, with default header values.

successful operation
*/
type GetScimV2SchemaOK struct {
	Payload *models.ScimV2SchemaDefinition
}

// IsSuccess returns true when this get scim v2 schema o k response has a 2xx status code
func (o *GetScimV2SchemaOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get scim v2 schema o k response has a 3xx status code
func (o *GetScimV2SchemaOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scim v2 schema o k response has a 4xx status code
func (o *GetScimV2SchemaOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get scim v2 schema o k response has a 5xx status code
func (o *GetScimV2SchemaOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get scim v2 schema o k response a status code equal to that given
func (o *GetScimV2SchemaOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetScimV2SchemaOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaOK  %+v", 200, o.Payload)
}

func (o *GetScimV2SchemaOK) String() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaOK  %+v", 200, o.Payload)
}

func (o *GetScimV2SchemaOK) GetPayload() *models.ScimV2SchemaDefinition {
	return o.Payload
}

func (o *GetScimV2SchemaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimV2SchemaDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemaBadRequest creates a GetScimV2SchemaBadRequest with default headers values
func NewGetScimV2SchemaBadRequest() *GetScimV2SchemaBadRequest {
	return &GetScimV2SchemaBadRequest{}
}

/*
GetScimV2SchemaBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetScimV2SchemaBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scim v2 schema bad request response has a 2xx status code
func (o *GetScimV2SchemaBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scim v2 schema bad request response has a 3xx status code
func (o *GetScimV2SchemaBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scim v2 schema bad request response has a 4xx status code
func (o *GetScimV2SchemaBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scim v2 schema bad request response has a 5xx status code
func (o *GetScimV2SchemaBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get scim v2 schema bad request response a status code equal to that given
func (o *GetScimV2SchemaBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetScimV2SchemaBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaBadRequest  %+v", 400, o.Payload)
}

func (o *GetScimV2SchemaBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaBadRequest  %+v", 400, o.Payload)
}

func (o *GetScimV2SchemaBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemaUnauthorized creates a GetScimV2SchemaUnauthorized with default headers values
func NewGetScimV2SchemaUnauthorized() *GetScimV2SchemaUnauthorized {
	return &GetScimV2SchemaUnauthorized{}
}

/*
GetScimV2SchemaUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetScimV2SchemaUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scim v2 schema unauthorized response has a 2xx status code
func (o *GetScimV2SchemaUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scim v2 schema unauthorized response has a 3xx status code
func (o *GetScimV2SchemaUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scim v2 schema unauthorized response has a 4xx status code
func (o *GetScimV2SchemaUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scim v2 schema unauthorized response has a 5xx status code
func (o *GetScimV2SchemaUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get scim v2 schema unauthorized response a status code equal to that given
func (o *GetScimV2SchemaUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetScimV2SchemaUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScimV2SchemaUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScimV2SchemaUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemaForbidden creates a GetScimV2SchemaForbidden with default headers values
func NewGetScimV2SchemaForbidden() *GetScimV2SchemaForbidden {
	return &GetScimV2SchemaForbidden{}
}

/*
GetScimV2SchemaForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetScimV2SchemaForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scim v2 schema forbidden response has a 2xx status code
func (o *GetScimV2SchemaForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scim v2 schema forbidden response has a 3xx status code
func (o *GetScimV2SchemaForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scim v2 schema forbidden response has a 4xx status code
func (o *GetScimV2SchemaForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scim v2 schema forbidden response has a 5xx status code
func (o *GetScimV2SchemaForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get scim v2 schema forbidden response a status code equal to that given
func (o *GetScimV2SchemaForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetScimV2SchemaForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaForbidden  %+v", 403, o.Payload)
}

func (o *GetScimV2SchemaForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaForbidden  %+v", 403, o.Payload)
}

func (o *GetScimV2SchemaForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemaNotFound creates a GetScimV2SchemaNotFound with default headers values
func NewGetScimV2SchemaNotFound() *GetScimV2SchemaNotFound {
	return &GetScimV2SchemaNotFound{}
}

/*
GetScimV2SchemaNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetScimV2SchemaNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scim v2 schema not found response has a 2xx status code
func (o *GetScimV2SchemaNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scim v2 schema not found response has a 3xx status code
func (o *GetScimV2SchemaNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scim v2 schema not found response has a 4xx status code
func (o *GetScimV2SchemaNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scim v2 schema not found response has a 5xx status code
func (o *GetScimV2SchemaNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get scim v2 schema not found response a status code equal to that given
func (o *GetScimV2SchemaNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetScimV2SchemaNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaNotFound  %+v", 404, o.Payload)
}

func (o *GetScimV2SchemaNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaNotFound  %+v", 404, o.Payload)
}

func (o *GetScimV2SchemaNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemaRequestTimeout creates a GetScimV2SchemaRequestTimeout with default headers values
func NewGetScimV2SchemaRequestTimeout() *GetScimV2SchemaRequestTimeout {
	return &GetScimV2SchemaRequestTimeout{}
}

/*
GetScimV2SchemaRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetScimV2SchemaRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scim v2 schema request timeout response has a 2xx status code
func (o *GetScimV2SchemaRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scim v2 schema request timeout response has a 3xx status code
func (o *GetScimV2SchemaRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scim v2 schema request timeout response has a 4xx status code
func (o *GetScimV2SchemaRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scim v2 schema request timeout response has a 5xx status code
func (o *GetScimV2SchemaRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get scim v2 schema request timeout response a status code equal to that given
func (o *GetScimV2SchemaRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetScimV2SchemaRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScimV2SchemaRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetScimV2SchemaRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemaRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemaRequestEntityTooLarge creates a GetScimV2SchemaRequestEntityTooLarge with default headers values
func NewGetScimV2SchemaRequestEntityTooLarge() *GetScimV2SchemaRequestEntityTooLarge {
	return &GetScimV2SchemaRequestEntityTooLarge{}
}

/*
GetScimV2SchemaRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetScimV2SchemaRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scim v2 schema request entity too large response has a 2xx status code
func (o *GetScimV2SchemaRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scim v2 schema request entity too large response has a 3xx status code
func (o *GetScimV2SchemaRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scim v2 schema request entity too large response has a 4xx status code
func (o *GetScimV2SchemaRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scim v2 schema request entity too large response has a 5xx status code
func (o *GetScimV2SchemaRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get scim v2 schema request entity too large response a status code equal to that given
func (o *GetScimV2SchemaRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetScimV2SchemaRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScimV2SchemaRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetScimV2SchemaRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemaRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemaUnsupportedMediaType creates a GetScimV2SchemaUnsupportedMediaType with default headers values
func NewGetScimV2SchemaUnsupportedMediaType() *GetScimV2SchemaUnsupportedMediaType {
	return &GetScimV2SchemaUnsupportedMediaType{}
}

/*
GetScimV2SchemaUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetScimV2SchemaUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scim v2 schema unsupported media type response has a 2xx status code
func (o *GetScimV2SchemaUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scim v2 schema unsupported media type response has a 3xx status code
func (o *GetScimV2SchemaUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scim v2 schema unsupported media type response has a 4xx status code
func (o *GetScimV2SchemaUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scim v2 schema unsupported media type response has a 5xx status code
func (o *GetScimV2SchemaUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get scim v2 schema unsupported media type response a status code equal to that given
func (o *GetScimV2SchemaUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetScimV2SchemaUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScimV2SchemaUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetScimV2SchemaUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemaUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemaTooManyRequests creates a GetScimV2SchemaTooManyRequests with default headers values
func NewGetScimV2SchemaTooManyRequests() *GetScimV2SchemaTooManyRequests {
	return &GetScimV2SchemaTooManyRequests{}
}

/*
GetScimV2SchemaTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetScimV2SchemaTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scim v2 schema too many requests response has a 2xx status code
func (o *GetScimV2SchemaTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scim v2 schema too many requests response has a 3xx status code
func (o *GetScimV2SchemaTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scim v2 schema too many requests response has a 4xx status code
func (o *GetScimV2SchemaTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scim v2 schema too many requests response has a 5xx status code
func (o *GetScimV2SchemaTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get scim v2 schema too many requests response a status code equal to that given
func (o *GetScimV2SchemaTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetScimV2SchemaTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScimV2SchemaTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScimV2SchemaTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemaInternalServerError creates a GetScimV2SchemaInternalServerError with default headers values
func NewGetScimV2SchemaInternalServerError() *GetScimV2SchemaInternalServerError {
	return &GetScimV2SchemaInternalServerError{}
}

/*
GetScimV2SchemaInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetScimV2SchemaInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scim v2 schema internal server error response has a 2xx status code
func (o *GetScimV2SchemaInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scim v2 schema internal server error response has a 3xx status code
func (o *GetScimV2SchemaInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scim v2 schema internal server error response has a 4xx status code
func (o *GetScimV2SchemaInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get scim v2 schema internal server error response has a 5xx status code
func (o *GetScimV2SchemaInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get scim v2 schema internal server error response a status code equal to that given
func (o *GetScimV2SchemaInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetScimV2SchemaInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScimV2SchemaInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScimV2SchemaInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemaInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemaServiceUnavailable creates a GetScimV2SchemaServiceUnavailable with default headers values
func NewGetScimV2SchemaServiceUnavailable() *GetScimV2SchemaServiceUnavailable {
	return &GetScimV2SchemaServiceUnavailable{}
}

/*
GetScimV2SchemaServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetScimV2SchemaServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scim v2 schema service unavailable response has a 2xx status code
func (o *GetScimV2SchemaServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scim v2 schema service unavailable response has a 3xx status code
func (o *GetScimV2SchemaServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scim v2 schema service unavailable response has a 4xx status code
func (o *GetScimV2SchemaServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get scim v2 schema service unavailable response has a 5xx status code
func (o *GetScimV2SchemaServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get scim v2 schema service unavailable response a status code equal to that given
func (o *GetScimV2SchemaServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetScimV2SchemaServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScimV2SchemaServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetScimV2SchemaServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemaServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScimV2SchemaGatewayTimeout creates a GetScimV2SchemaGatewayTimeout with default headers values
func NewGetScimV2SchemaGatewayTimeout() *GetScimV2SchemaGatewayTimeout {
	return &GetScimV2SchemaGatewayTimeout{}
}

/*
GetScimV2SchemaGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetScimV2SchemaGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get scim v2 schema gateway timeout response has a 2xx status code
func (o *GetScimV2SchemaGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scim v2 schema gateway timeout response has a 3xx status code
func (o *GetScimV2SchemaGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scim v2 schema gateway timeout response has a 4xx status code
func (o *GetScimV2SchemaGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get scim v2 schema gateway timeout response has a 5xx status code
func (o *GetScimV2SchemaGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get scim v2 schema gateway timeout response a status code equal to that given
func (o *GetScimV2SchemaGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetScimV2SchemaGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScimV2SchemaGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/scim/v2/schemas/{schemaId}][%d] getScimV2SchemaGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetScimV2SchemaGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetScimV2SchemaGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

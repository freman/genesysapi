// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetScimV2SchemaParams creates a new GetScimV2SchemaParams object
// with the default values initialized.
func NewGetScimV2SchemaParams() *GetScimV2SchemaParams {
	var ()
	return &GetScimV2SchemaParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetScimV2SchemaParamsWithTimeout creates a new GetScimV2SchemaParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetScimV2SchemaParamsWithTimeout(timeout time.Duration) *GetScimV2SchemaParams {
	var ()
	return &GetScimV2SchemaParams{

		timeout: timeout,
	}
}

// NewGetScimV2SchemaParamsWithContext creates a new GetScimV2SchemaParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetScimV2SchemaParamsWithContext(ctx context.Context) *GetScimV2SchemaParams {
	var ()
	return &GetScimV2SchemaParams{

		Context: ctx,
	}
}

// NewGetScimV2SchemaParamsWithHTTPClient creates a new GetScimV2SchemaParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetScimV2SchemaParamsWithHTTPClient(client *http.Client) *GetScimV2SchemaParams {
	var ()
	return &GetScimV2SchemaParams{
		HTTPClient: client,
	}
}

/*GetScimV2SchemaParams contains all the parameters to send to the API endpoint
for the get scim v2 schema operation typically these are written to a http.Request
*/
type GetScimV2SchemaParams struct {

	/*SchemaID
	  The ID of a schema.

	*/
	SchemaID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get scim v2 schema params
func (o *GetScimV2SchemaParams) WithTimeout(timeout time.Duration) *GetScimV2SchemaParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get scim v2 schema params
func (o *GetScimV2SchemaParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get scim v2 schema params
func (o *GetScimV2SchemaParams) WithContext(ctx context.Context) *GetScimV2SchemaParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get scim v2 schema params
func (o *GetScimV2SchemaParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get scim v2 schema params
func (o *GetScimV2SchemaParams) WithHTTPClient(client *http.Client) *GetScimV2SchemaParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get scim v2 schema params
func (o *GetScimV2SchemaParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSchemaID adds the schemaID to the get scim v2 schema params
func (o *GetScimV2SchemaParams) WithSchemaID(schemaID string) *GetScimV2SchemaParams {
	o.SetSchemaID(schemaID)
	return o
}

// SetSchemaID adds the schemaId to the get scim v2 schema params
func (o *GetScimV2SchemaParams) SetSchemaID(schemaID string) {
	o.SchemaID = schemaID
}

// WriteToRequest writes these params to a swagger request
func (o *GetScimV2SchemaParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param schemaId
	if err := r.SetPathParam("schemaId", o.SchemaID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

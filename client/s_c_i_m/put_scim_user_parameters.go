// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// NewPutScimUserParams creates a new PutScimUserParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPutScimUserParams() *PutScimUserParams {
	return &PutScimUserParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPutScimUserParamsWithTimeout creates a new PutScimUserParams object
// with the ability to set a timeout on a request.
func NewPutScimUserParamsWithTimeout(timeout time.Duration) *PutScimUserParams {
	return &PutScimUserParams{
		timeout: timeout,
	}
}

// NewPutScimUserParamsWithContext creates a new PutScimUserParams object
// with the ability to set a context for a request.
func NewPutScimUserParamsWithContext(ctx context.Context) *PutScimUserParams {
	return &PutScimUserParams{
		Context: ctx,
	}
}

// NewPutScimUserParamsWithHTTPClient creates a new PutScimUserParams object
// with the ability to set a custom HTTPClient for a request.
func NewPutScimUserParamsWithHTTPClient(client *http.Client) *PutScimUserParams {
	return &PutScimUserParams{
		HTTPClient: client,
	}
}

/*
PutScimUserParams contains all the parameters to send to the API endpoint

	for the put scim user operation.

	Typically these are written to a http.Request.
*/
type PutScimUserParams struct {

	/* IfMatch.

	   The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: "42". If the ETag is different from the version on the server, returns 400 with a "scimType" of "invalidVers".
	*/
	IfMatch *string

	/* Body.

	   The information used to replace a user.
	*/
	Body *models.ScimV2User

	/* UserID.

	   The ID of a user. Returned with GET /api/v2/scim/users.
	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the put scim user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutScimUserParams) WithDefaults() *PutScimUserParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the put scim user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutScimUserParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the put scim user params
func (o *PutScimUserParams) WithTimeout(timeout time.Duration) *PutScimUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put scim user params
func (o *PutScimUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put scim user params
func (o *PutScimUserParams) WithContext(ctx context.Context) *PutScimUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put scim user params
func (o *PutScimUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put scim user params
func (o *PutScimUserParams) WithHTTPClient(client *http.Client) *PutScimUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put scim user params
func (o *PutScimUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfMatch adds the ifMatch to the put scim user params
func (o *PutScimUserParams) WithIfMatch(ifMatch *string) *PutScimUserParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the put scim user params
func (o *PutScimUserParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithBody adds the body to the put scim user params
func (o *PutScimUserParams) WithBody(body *models.ScimV2User) *PutScimUserParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the put scim user params
func (o *PutScimUserParams) SetBody(body *models.ScimV2User) {
	o.Body = body
}

// WithUserID adds the userID to the put scim user params
func (o *PutScimUserParams) WithUserID(userID string) *PutScimUserParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the put scim user params
func (o *PutScimUserParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *PutScimUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfMatch != nil {

		// header param If-Match
		if err := r.SetHeaderParam("If-Match", *o.IfMatch); err != nil {
			return err
		}
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

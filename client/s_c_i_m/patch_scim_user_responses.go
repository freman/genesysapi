// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchScimUserReader is a Reader for the PatchScimUser structure.
type PatchScimUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchScimUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchScimUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchScimUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchScimUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchScimUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchScimUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchScimUserRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchScimUserConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchScimUserRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchScimUserUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchScimUserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchScimUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchScimUserServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchScimUserGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchScimUserOK creates a PatchScimUserOK with default headers values
func NewPatchScimUserOK() *PatchScimUserOK {
	return &PatchScimUserOK{}
}

/*PatchScimUserOK handles this case with default header values.

successful operation
*/
type PatchScimUserOK struct {
	Payload *models.ScimV2User
}

func (o *PatchScimUserOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/users/{userId}][%d] patchScimUserOK  %+v", 200, o.Payload)
}

func (o *PatchScimUserOK) GetPayload() *models.ScimV2User {
	return o.Payload
}

func (o *PatchScimUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimV2User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimUserBadRequest creates a PatchScimUserBadRequest with default headers values
func NewPatchScimUserBadRequest() *PatchScimUserBadRequest {
	return &PatchScimUserBadRequest{}
}

/*PatchScimUserBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchScimUserBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchScimUserBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/users/{userId}][%d] patchScimUserBadRequest  %+v", 400, o.Payload)
}

func (o *PatchScimUserBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimUserUnauthorized creates a PatchScimUserUnauthorized with default headers values
func NewPatchScimUserUnauthorized() *PatchScimUserUnauthorized {
	return &PatchScimUserUnauthorized{}
}

/*PatchScimUserUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchScimUserUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchScimUserUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/users/{userId}][%d] patchScimUserUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchScimUserUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimUserForbidden creates a PatchScimUserForbidden with default headers values
func NewPatchScimUserForbidden() *PatchScimUserForbidden {
	return &PatchScimUserForbidden{}
}

/*PatchScimUserForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchScimUserForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchScimUserForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/users/{userId}][%d] patchScimUserForbidden  %+v", 403, o.Payload)
}

func (o *PatchScimUserForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimUserNotFound creates a PatchScimUserNotFound with default headers values
func NewPatchScimUserNotFound() *PatchScimUserNotFound {
	return &PatchScimUserNotFound{}
}

/*PatchScimUserNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchScimUserNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchScimUserNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/users/{userId}][%d] patchScimUserNotFound  %+v", 404, o.Payload)
}

func (o *PatchScimUserNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimUserRequestTimeout creates a PatchScimUserRequestTimeout with default headers values
func NewPatchScimUserRequestTimeout() *PatchScimUserRequestTimeout {
	return &PatchScimUserRequestTimeout{}
}

/*PatchScimUserRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchScimUserRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchScimUserRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/users/{userId}][%d] patchScimUserRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchScimUserRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimUserRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimUserConflict creates a PatchScimUserConflict with default headers values
func NewPatchScimUserConflict() *PatchScimUserConflict {
	return &PatchScimUserConflict{}
}

/*PatchScimUserConflict handles this case with default header values.

Version does not match current version.
*/
type PatchScimUserConflict struct {
	Payload *models.ScimError
}

func (o *PatchScimUserConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/users/{userId}][%d] patchScimUserConflict  %+v", 409, o.Payload)
}

func (o *PatchScimUserConflict) GetPayload() *models.ScimError {
	return o.Payload
}

func (o *PatchScimUserConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScimError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimUserRequestEntityTooLarge creates a PatchScimUserRequestEntityTooLarge with default headers values
func NewPatchScimUserRequestEntityTooLarge() *PatchScimUserRequestEntityTooLarge {
	return &PatchScimUserRequestEntityTooLarge{}
}

/*PatchScimUserRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PatchScimUserRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchScimUserRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/users/{userId}][%d] patchScimUserRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchScimUserRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimUserRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimUserUnsupportedMediaType creates a PatchScimUserUnsupportedMediaType with default headers values
func NewPatchScimUserUnsupportedMediaType() *PatchScimUserUnsupportedMediaType {
	return &PatchScimUserUnsupportedMediaType{}
}

/*PatchScimUserUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchScimUserUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchScimUserUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/users/{userId}][%d] patchScimUserUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchScimUserUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimUserUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimUserTooManyRequests creates a PatchScimUserTooManyRequests with default headers values
func NewPatchScimUserTooManyRequests() *PatchScimUserTooManyRequests {
	return &PatchScimUserTooManyRequests{}
}

/*PatchScimUserTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchScimUserTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchScimUserTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/users/{userId}][%d] patchScimUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchScimUserTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimUserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimUserInternalServerError creates a PatchScimUserInternalServerError with default headers values
func NewPatchScimUserInternalServerError() *PatchScimUserInternalServerError {
	return &PatchScimUserInternalServerError{}
}

/*PatchScimUserInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchScimUserInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchScimUserInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/users/{userId}][%d] patchScimUserInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchScimUserInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimUserServiceUnavailable creates a PatchScimUserServiceUnavailable with default headers values
func NewPatchScimUserServiceUnavailable() *PatchScimUserServiceUnavailable {
	return &PatchScimUserServiceUnavailable{}
}

/*PatchScimUserServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchScimUserServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchScimUserServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/users/{userId}][%d] patchScimUserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchScimUserServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimUserServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScimUserGatewayTimeout creates a PatchScimUserGatewayTimeout with default headers values
func NewPatchScimUserGatewayTimeout() *PatchScimUserGatewayTimeout {
	return &PatchScimUserGatewayTimeout{}
}

/*PatchScimUserGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchScimUserGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchScimUserGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/scim/users/{userId}][%d] patchScimUserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchScimUserGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchScimUserGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package general_data_protection_regulation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetGdprSubjectsReader is a Reader for the GetGdprSubjects structure.
type GetGdprSubjectsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGdprSubjectsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGdprSubjectsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGdprSubjectsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetGdprSubjectsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGdprSubjectsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGdprSubjectsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetGdprSubjectsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetGdprSubjectsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetGdprSubjectsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetGdprSubjectsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGdprSubjectsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetGdprSubjectsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetGdprSubjectsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGdprSubjectsOK creates a GetGdprSubjectsOK with default headers values
func NewGetGdprSubjectsOK() *GetGdprSubjectsOK {
	return &GetGdprSubjectsOK{}
}

/*GetGdprSubjectsOK handles this case with default header values.

successful operation
*/
type GetGdprSubjectsOK struct {
	Payload *models.GDPRSubjectEntityListing
}

func (o *GetGdprSubjectsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/subjects][%d] getGdprSubjectsOK  %+v", 200, o.Payload)
}

func (o *GetGdprSubjectsOK) GetPayload() *models.GDPRSubjectEntityListing {
	return o.Payload
}

func (o *GetGdprSubjectsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GDPRSubjectEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprSubjectsBadRequest creates a GetGdprSubjectsBadRequest with default headers values
func NewGetGdprSubjectsBadRequest() *GetGdprSubjectsBadRequest {
	return &GetGdprSubjectsBadRequest{}
}

/*GetGdprSubjectsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetGdprSubjectsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetGdprSubjectsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/subjects][%d] getGdprSubjectsBadRequest  %+v", 400, o.Payload)
}

func (o *GetGdprSubjectsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprSubjectsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprSubjectsUnauthorized creates a GetGdprSubjectsUnauthorized with default headers values
func NewGetGdprSubjectsUnauthorized() *GetGdprSubjectsUnauthorized {
	return &GetGdprSubjectsUnauthorized{}
}

/*GetGdprSubjectsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetGdprSubjectsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetGdprSubjectsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/subjects][%d] getGdprSubjectsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGdprSubjectsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprSubjectsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprSubjectsForbidden creates a GetGdprSubjectsForbidden with default headers values
func NewGetGdprSubjectsForbidden() *GetGdprSubjectsForbidden {
	return &GetGdprSubjectsForbidden{}
}

/*GetGdprSubjectsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetGdprSubjectsForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetGdprSubjectsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/subjects][%d] getGdprSubjectsForbidden  %+v", 403, o.Payload)
}

func (o *GetGdprSubjectsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprSubjectsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprSubjectsNotFound creates a GetGdprSubjectsNotFound with default headers values
func NewGetGdprSubjectsNotFound() *GetGdprSubjectsNotFound {
	return &GetGdprSubjectsNotFound{}
}

/*GetGdprSubjectsNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetGdprSubjectsNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetGdprSubjectsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/subjects][%d] getGdprSubjectsNotFound  %+v", 404, o.Payload)
}

func (o *GetGdprSubjectsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprSubjectsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprSubjectsRequestTimeout creates a GetGdprSubjectsRequestTimeout with default headers values
func NewGetGdprSubjectsRequestTimeout() *GetGdprSubjectsRequestTimeout {
	return &GetGdprSubjectsRequestTimeout{}
}

/*GetGdprSubjectsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetGdprSubjectsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetGdprSubjectsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/subjects][%d] getGdprSubjectsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetGdprSubjectsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprSubjectsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprSubjectsRequestEntityTooLarge creates a GetGdprSubjectsRequestEntityTooLarge with default headers values
func NewGetGdprSubjectsRequestEntityTooLarge() *GetGdprSubjectsRequestEntityTooLarge {
	return &GetGdprSubjectsRequestEntityTooLarge{}
}

/*GetGdprSubjectsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetGdprSubjectsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetGdprSubjectsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/subjects][%d] getGdprSubjectsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetGdprSubjectsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprSubjectsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprSubjectsUnsupportedMediaType creates a GetGdprSubjectsUnsupportedMediaType with default headers values
func NewGetGdprSubjectsUnsupportedMediaType() *GetGdprSubjectsUnsupportedMediaType {
	return &GetGdprSubjectsUnsupportedMediaType{}
}

/*GetGdprSubjectsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetGdprSubjectsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetGdprSubjectsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/subjects][%d] getGdprSubjectsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetGdprSubjectsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprSubjectsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprSubjectsTooManyRequests creates a GetGdprSubjectsTooManyRequests with default headers values
func NewGetGdprSubjectsTooManyRequests() *GetGdprSubjectsTooManyRequests {
	return &GetGdprSubjectsTooManyRequests{}
}

/*GetGdprSubjectsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetGdprSubjectsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetGdprSubjectsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/subjects][%d] getGdprSubjectsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGdprSubjectsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprSubjectsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprSubjectsInternalServerError creates a GetGdprSubjectsInternalServerError with default headers values
func NewGetGdprSubjectsInternalServerError() *GetGdprSubjectsInternalServerError {
	return &GetGdprSubjectsInternalServerError{}
}

/*GetGdprSubjectsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetGdprSubjectsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetGdprSubjectsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/subjects][%d] getGdprSubjectsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGdprSubjectsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprSubjectsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprSubjectsServiceUnavailable creates a GetGdprSubjectsServiceUnavailable with default headers values
func NewGetGdprSubjectsServiceUnavailable() *GetGdprSubjectsServiceUnavailable {
	return &GetGdprSubjectsServiceUnavailable{}
}

/*GetGdprSubjectsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetGdprSubjectsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetGdprSubjectsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/subjects][%d] getGdprSubjectsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetGdprSubjectsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprSubjectsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprSubjectsGatewayTimeout creates a GetGdprSubjectsGatewayTimeout with default headers values
func NewGetGdprSubjectsGatewayTimeout() *GetGdprSubjectsGatewayTimeout {
	return &GetGdprSubjectsGatewayTimeout{}
}

/*GetGdprSubjectsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetGdprSubjectsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetGdprSubjectsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/subjects][%d] getGdprSubjectsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetGdprSubjectsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprSubjectsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

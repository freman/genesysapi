// Code generated by go-swagger; DO NOT EDIT.

package general_data_protection_regulation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetGdprRequestReader is a Reader for the GetGdprRequest structure.
type GetGdprRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGdprRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGdprRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGdprRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetGdprRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGdprRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGdprRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetGdprRequestRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetGdprRequestRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetGdprRequestUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetGdprRequestTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGdprRequestInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetGdprRequestServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetGdprRequestGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGdprRequestOK creates a GetGdprRequestOK with default headers values
func NewGetGdprRequestOK() *GetGdprRequestOK {
	return &GetGdprRequestOK{}
}

/*
GetGdprRequestOK describes a response with status code 200, with default header values.

successful operation
*/
type GetGdprRequestOK struct {
	Payload *models.GDPRRequest
}

// IsSuccess returns true when this get gdpr request o k response has a 2xx status code
func (o *GetGdprRequestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get gdpr request o k response has a 3xx status code
func (o *GetGdprRequestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr request o k response has a 4xx status code
func (o *GetGdprRequestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gdpr request o k response has a 5xx status code
func (o *GetGdprRequestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr request o k response a status code equal to that given
func (o *GetGdprRequestOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetGdprRequestOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestOK  %+v", 200, o.Payload)
}

func (o *GetGdprRequestOK) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestOK  %+v", 200, o.Payload)
}

func (o *GetGdprRequestOK) GetPayload() *models.GDPRRequest {
	return o.Payload
}

func (o *GetGdprRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GDPRRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestBadRequest creates a GetGdprRequestBadRequest with default headers values
func NewGetGdprRequestBadRequest() *GetGdprRequestBadRequest {
	return &GetGdprRequestBadRequest{}
}

/*
GetGdprRequestBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetGdprRequestBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr request bad request response has a 2xx status code
func (o *GetGdprRequestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr request bad request response has a 3xx status code
func (o *GetGdprRequestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr request bad request response has a 4xx status code
func (o *GetGdprRequestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr request bad request response has a 5xx status code
func (o *GetGdprRequestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr request bad request response a status code equal to that given
func (o *GetGdprRequestBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetGdprRequestBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestBadRequest  %+v", 400, o.Payload)
}

func (o *GetGdprRequestBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestBadRequest  %+v", 400, o.Payload)
}

func (o *GetGdprRequestBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestUnauthorized creates a GetGdprRequestUnauthorized with default headers values
func NewGetGdprRequestUnauthorized() *GetGdprRequestUnauthorized {
	return &GetGdprRequestUnauthorized{}
}

/*
GetGdprRequestUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetGdprRequestUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr request unauthorized response has a 2xx status code
func (o *GetGdprRequestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr request unauthorized response has a 3xx status code
func (o *GetGdprRequestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr request unauthorized response has a 4xx status code
func (o *GetGdprRequestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr request unauthorized response has a 5xx status code
func (o *GetGdprRequestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr request unauthorized response a status code equal to that given
func (o *GetGdprRequestUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetGdprRequestUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGdprRequestUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGdprRequestUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestForbidden creates a GetGdprRequestForbidden with default headers values
func NewGetGdprRequestForbidden() *GetGdprRequestForbidden {
	return &GetGdprRequestForbidden{}
}

/*
GetGdprRequestForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetGdprRequestForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr request forbidden response has a 2xx status code
func (o *GetGdprRequestForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr request forbidden response has a 3xx status code
func (o *GetGdprRequestForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr request forbidden response has a 4xx status code
func (o *GetGdprRequestForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr request forbidden response has a 5xx status code
func (o *GetGdprRequestForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr request forbidden response a status code equal to that given
func (o *GetGdprRequestForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetGdprRequestForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestForbidden  %+v", 403, o.Payload)
}

func (o *GetGdprRequestForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestForbidden  %+v", 403, o.Payload)
}

func (o *GetGdprRequestForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestNotFound creates a GetGdprRequestNotFound with default headers values
func NewGetGdprRequestNotFound() *GetGdprRequestNotFound {
	return &GetGdprRequestNotFound{}
}

/*
GetGdprRequestNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetGdprRequestNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr request not found response has a 2xx status code
func (o *GetGdprRequestNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr request not found response has a 3xx status code
func (o *GetGdprRequestNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr request not found response has a 4xx status code
func (o *GetGdprRequestNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr request not found response has a 5xx status code
func (o *GetGdprRequestNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr request not found response a status code equal to that given
func (o *GetGdprRequestNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetGdprRequestNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestNotFound  %+v", 404, o.Payload)
}

func (o *GetGdprRequestNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestNotFound  %+v", 404, o.Payload)
}

func (o *GetGdprRequestNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestRequestTimeout creates a GetGdprRequestRequestTimeout with default headers values
func NewGetGdprRequestRequestTimeout() *GetGdprRequestRequestTimeout {
	return &GetGdprRequestRequestTimeout{}
}

/*
GetGdprRequestRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetGdprRequestRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr request request timeout response has a 2xx status code
func (o *GetGdprRequestRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr request request timeout response has a 3xx status code
func (o *GetGdprRequestRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr request request timeout response has a 4xx status code
func (o *GetGdprRequestRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr request request timeout response has a 5xx status code
func (o *GetGdprRequestRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr request request timeout response a status code equal to that given
func (o *GetGdprRequestRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetGdprRequestRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetGdprRequestRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetGdprRequestRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestRequestEntityTooLarge creates a GetGdprRequestRequestEntityTooLarge with default headers values
func NewGetGdprRequestRequestEntityTooLarge() *GetGdprRequestRequestEntityTooLarge {
	return &GetGdprRequestRequestEntityTooLarge{}
}

/*
GetGdprRequestRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetGdprRequestRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr request request entity too large response has a 2xx status code
func (o *GetGdprRequestRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr request request entity too large response has a 3xx status code
func (o *GetGdprRequestRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr request request entity too large response has a 4xx status code
func (o *GetGdprRequestRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr request request entity too large response has a 5xx status code
func (o *GetGdprRequestRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr request request entity too large response a status code equal to that given
func (o *GetGdprRequestRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetGdprRequestRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetGdprRequestRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetGdprRequestRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestUnsupportedMediaType creates a GetGdprRequestUnsupportedMediaType with default headers values
func NewGetGdprRequestUnsupportedMediaType() *GetGdprRequestUnsupportedMediaType {
	return &GetGdprRequestUnsupportedMediaType{}
}

/*
GetGdprRequestUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetGdprRequestUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr request unsupported media type response has a 2xx status code
func (o *GetGdprRequestUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr request unsupported media type response has a 3xx status code
func (o *GetGdprRequestUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr request unsupported media type response has a 4xx status code
func (o *GetGdprRequestUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr request unsupported media type response has a 5xx status code
func (o *GetGdprRequestUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr request unsupported media type response a status code equal to that given
func (o *GetGdprRequestUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetGdprRequestUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetGdprRequestUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetGdprRequestUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestTooManyRequests creates a GetGdprRequestTooManyRequests with default headers values
func NewGetGdprRequestTooManyRequests() *GetGdprRequestTooManyRequests {
	return &GetGdprRequestTooManyRequests{}
}

/*
GetGdprRequestTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetGdprRequestTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr request too many requests response has a 2xx status code
func (o *GetGdprRequestTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr request too many requests response has a 3xx status code
func (o *GetGdprRequestTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr request too many requests response has a 4xx status code
func (o *GetGdprRequestTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr request too many requests response has a 5xx status code
func (o *GetGdprRequestTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr request too many requests response a status code equal to that given
func (o *GetGdprRequestTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetGdprRequestTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGdprRequestTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGdprRequestTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestInternalServerError creates a GetGdprRequestInternalServerError with default headers values
func NewGetGdprRequestInternalServerError() *GetGdprRequestInternalServerError {
	return &GetGdprRequestInternalServerError{}
}

/*
GetGdprRequestInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetGdprRequestInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr request internal server error response has a 2xx status code
func (o *GetGdprRequestInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr request internal server error response has a 3xx status code
func (o *GetGdprRequestInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr request internal server error response has a 4xx status code
func (o *GetGdprRequestInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gdpr request internal server error response has a 5xx status code
func (o *GetGdprRequestInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get gdpr request internal server error response a status code equal to that given
func (o *GetGdprRequestInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetGdprRequestInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGdprRequestInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGdprRequestInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestServiceUnavailable creates a GetGdprRequestServiceUnavailable with default headers values
func NewGetGdprRequestServiceUnavailable() *GetGdprRequestServiceUnavailable {
	return &GetGdprRequestServiceUnavailable{}
}

/*
GetGdprRequestServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetGdprRequestServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr request service unavailable response has a 2xx status code
func (o *GetGdprRequestServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr request service unavailable response has a 3xx status code
func (o *GetGdprRequestServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr request service unavailable response has a 4xx status code
func (o *GetGdprRequestServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gdpr request service unavailable response has a 5xx status code
func (o *GetGdprRequestServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get gdpr request service unavailable response a status code equal to that given
func (o *GetGdprRequestServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetGdprRequestServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetGdprRequestServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetGdprRequestServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestGatewayTimeout creates a GetGdprRequestGatewayTimeout with default headers values
func NewGetGdprRequestGatewayTimeout() *GetGdprRequestGatewayTimeout {
	return &GetGdprRequestGatewayTimeout{}
}

/*
GetGdprRequestGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetGdprRequestGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr request gateway timeout response has a 2xx status code
func (o *GetGdprRequestGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr request gateway timeout response has a 3xx status code
func (o *GetGdprRequestGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr request gateway timeout response has a 4xx status code
func (o *GetGdprRequestGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gdpr request gateway timeout response has a 5xx status code
func (o *GetGdprRequestGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get gdpr request gateway timeout response a status code equal to that given
func (o *GetGdprRequestGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetGdprRequestGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetGdprRequestGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests/{requestId}][%d] getGdprRequestGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetGdprRequestGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

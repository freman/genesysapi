// Code generated by go-swagger; DO NOT EDIT.

package general_data_protection_regulation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the general data protection regulation client
type API interface {
	/*
	   GetGdprRequest gets an existing g d p r request
	*/
	GetGdprRequest(ctx context.Context, params *GetGdprRequestParams) (*GetGdprRequestOK, error)
	/*
	   GetGdprRequests gets all g d p r requests
	*/
	GetGdprRequests(ctx context.Context, params *GetGdprRequestsParams) (*GetGdprRequestsOK, error)
	/*
	   GetGdprSubjects gets g d p r subjects
	*/
	GetGdprSubjects(ctx context.Context, params *GetGdprSubjectsParams) (*GetGdprSubjectsOK, error)
	/*
	   PostGdprRequests submits a new g d p r request
	*/
	PostGdprRequests(ctx context.Context, params *PostGdprRequestsParams) (*PostGdprRequestsOK, *PostGdprRequestsAccepted, error)
}

// New creates a new general data protection regulation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for general data protection regulation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetGdprRequest gets an existing g d p r request
*/
func (a *Client) GetGdprRequest(ctx context.Context, params *GetGdprRequestParams) (*GetGdprRequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGdprRequest",
		Method:             "GET",
		PathPattern:        "/api/v2/gdpr/requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGdprRequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGdprRequestOK), nil

}

/*
GetGdprRequests gets all g d p r requests
*/
func (a *Client) GetGdprRequests(ctx context.Context, params *GetGdprRequestsParams) (*GetGdprRequestsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGdprRequests",
		Method:             "GET",
		PathPattern:        "/api/v2/gdpr/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGdprRequestsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGdprRequestsOK), nil

}

/*
GetGdprSubjects gets g d p r subjects
*/
func (a *Client) GetGdprSubjects(ctx context.Context, params *GetGdprSubjectsParams) (*GetGdprSubjectsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGdprSubjects",
		Method:             "GET",
		PathPattern:        "/api/v2/gdpr/subjects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGdprSubjectsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGdprSubjectsOK), nil

}

/*
PostGdprRequests submits a new g d p r request
*/
func (a *Client) PostGdprRequests(ctx context.Context, params *PostGdprRequestsParams) (*PostGdprRequestsOK, *PostGdprRequestsAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postGdprRequests",
		Method:             "POST",
		PathPattern:        "/api/v2/gdpr/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGdprRequestsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostGdprRequestsOK:
		return value, nil, nil
	case *PostGdprRequestsAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

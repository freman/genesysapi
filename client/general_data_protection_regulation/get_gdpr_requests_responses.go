// Code generated by go-swagger; DO NOT EDIT.

package general_data_protection_regulation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetGdprRequestsReader is a Reader for the GetGdprRequests structure.
type GetGdprRequestsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGdprRequestsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGdprRequestsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGdprRequestsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetGdprRequestsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGdprRequestsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGdprRequestsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetGdprRequestsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetGdprRequestsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetGdprRequestsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetGdprRequestsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGdprRequestsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetGdprRequestsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetGdprRequestsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGdprRequestsOK creates a GetGdprRequestsOK with default headers values
func NewGetGdprRequestsOK() *GetGdprRequestsOK {
	return &GetGdprRequestsOK{}
}

/*
GetGdprRequestsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetGdprRequestsOK struct {
	Payload *models.GDPRRequestEntityListing
}

// IsSuccess returns true when this get gdpr requests o k response has a 2xx status code
func (o *GetGdprRequestsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get gdpr requests o k response has a 3xx status code
func (o *GetGdprRequestsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr requests o k response has a 4xx status code
func (o *GetGdprRequestsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gdpr requests o k response has a 5xx status code
func (o *GetGdprRequestsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr requests o k response a status code equal to that given
func (o *GetGdprRequestsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetGdprRequestsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsOK  %+v", 200, o.Payload)
}

func (o *GetGdprRequestsOK) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsOK  %+v", 200, o.Payload)
}

func (o *GetGdprRequestsOK) GetPayload() *models.GDPRRequestEntityListing {
	return o.Payload
}

func (o *GetGdprRequestsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GDPRRequestEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestsBadRequest creates a GetGdprRequestsBadRequest with default headers values
func NewGetGdprRequestsBadRequest() *GetGdprRequestsBadRequest {
	return &GetGdprRequestsBadRequest{}
}

/*
GetGdprRequestsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetGdprRequestsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr requests bad request response has a 2xx status code
func (o *GetGdprRequestsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr requests bad request response has a 3xx status code
func (o *GetGdprRequestsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr requests bad request response has a 4xx status code
func (o *GetGdprRequestsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr requests bad request response has a 5xx status code
func (o *GetGdprRequestsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr requests bad request response a status code equal to that given
func (o *GetGdprRequestsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetGdprRequestsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsBadRequest  %+v", 400, o.Payload)
}

func (o *GetGdprRequestsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsBadRequest  %+v", 400, o.Payload)
}

func (o *GetGdprRequestsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestsUnauthorized creates a GetGdprRequestsUnauthorized with default headers values
func NewGetGdprRequestsUnauthorized() *GetGdprRequestsUnauthorized {
	return &GetGdprRequestsUnauthorized{}
}

/*
GetGdprRequestsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetGdprRequestsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr requests unauthorized response has a 2xx status code
func (o *GetGdprRequestsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr requests unauthorized response has a 3xx status code
func (o *GetGdprRequestsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr requests unauthorized response has a 4xx status code
func (o *GetGdprRequestsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr requests unauthorized response has a 5xx status code
func (o *GetGdprRequestsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr requests unauthorized response a status code equal to that given
func (o *GetGdprRequestsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetGdprRequestsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGdprRequestsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGdprRequestsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestsForbidden creates a GetGdprRequestsForbidden with default headers values
func NewGetGdprRequestsForbidden() *GetGdprRequestsForbidden {
	return &GetGdprRequestsForbidden{}
}

/*
GetGdprRequestsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetGdprRequestsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr requests forbidden response has a 2xx status code
func (o *GetGdprRequestsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr requests forbidden response has a 3xx status code
func (o *GetGdprRequestsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr requests forbidden response has a 4xx status code
func (o *GetGdprRequestsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr requests forbidden response has a 5xx status code
func (o *GetGdprRequestsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr requests forbidden response a status code equal to that given
func (o *GetGdprRequestsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetGdprRequestsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsForbidden  %+v", 403, o.Payload)
}

func (o *GetGdprRequestsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsForbidden  %+v", 403, o.Payload)
}

func (o *GetGdprRequestsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestsNotFound creates a GetGdprRequestsNotFound with default headers values
func NewGetGdprRequestsNotFound() *GetGdprRequestsNotFound {
	return &GetGdprRequestsNotFound{}
}

/*
GetGdprRequestsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetGdprRequestsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr requests not found response has a 2xx status code
func (o *GetGdprRequestsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr requests not found response has a 3xx status code
func (o *GetGdprRequestsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr requests not found response has a 4xx status code
func (o *GetGdprRequestsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr requests not found response has a 5xx status code
func (o *GetGdprRequestsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr requests not found response a status code equal to that given
func (o *GetGdprRequestsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetGdprRequestsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsNotFound  %+v", 404, o.Payload)
}

func (o *GetGdprRequestsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsNotFound  %+v", 404, o.Payload)
}

func (o *GetGdprRequestsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestsRequestTimeout creates a GetGdprRequestsRequestTimeout with default headers values
func NewGetGdprRequestsRequestTimeout() *GetGdprRequestsRequestTimeout {
	return &GetGdprRequestsRequestTimeout{}
}

/*
GetGdprRequestsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetGdprRequestsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr requests request timeout response has a 2xx status code
func (o *GetGdprRequestsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr requests request timeout response has a 3xx status code
func (o *GetGdprRequestsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr requests request timeout response has a 4xx status code
func (o *GetGdprRequestsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr requests request timeout response has a 5xx status code
func (o *GetGdprRequestsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr requests request timeout response a status code equal to that given
func (o *GetGdprRequestsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetGdprRequestsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetGdprRequestsRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetGdprRequestsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestsRequestEntityTooLarge creates a GetGdprRequestsRequestEntityTooLarge with default headers values
func NewGetGdprRequestsRequestEntityTooLarge() *GetGdprRequestsRequestEntityTooLarge {
	return &GetGdprRequestsRequestEntityTooLarge{}
}

/*
GetGdprRequestsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetGdprRequestsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr requests request entity too large response has a 2xx status code
func (o *GetGdprRequestsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr requests request entity too large response has a 3xx status code
func (o *GetGdprRequestsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr requests request entity too large response has a 4xx status code
func (o *GetGdprRequestsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr requests request entity too large response has a 5xx status code
func (o *GetGdprRequestsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr requests request entity too large response a status code equal to that given
func (o *GetGdprRequestsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetGdprRequestsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetGdprRequestsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetGdprRequestsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestsUnsupportedMediaType creates a GetGdprRequestsUnsupportedMediaType with default headers values
func NewGetGdprRequestsUnsupportedMediaType() *GetGdprRequestsUnsupportedMediaType {
	return &GetGdprRequestsUnsupportedMediaType{}
}

/*
GetGdprRequestsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetGdprRequestsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr requests unsupported media type response has a 2xx status code
func (o *GetGdprRequestsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr requests unsupported media type response has a 3xx status code
func (o *GetGdprRequestsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr requests unsupported media type response has a 4xx status code
func (o *GetGdprRequestsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr requests unsupported media type response has a 5xx status code
func (o *GetGdprRequestsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr requests unsupported media type response a status code equal to that given
func (o *GetGdprRequestsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetGdprRequestsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetGdprRequestsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetGdprRequestsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestsTooManyRequests creates a GetGdprRequestsTooManyRequests with default headers values
func NewGetGdprRequestsTooManyRequests() *GetGdprRequestsTooManyRequests {
	return &GetGdprRequestsTooManyRequests{}
}

/*
GetGdprRequestsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetGdprRequestsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr requests too many requests response has a 2xx status code
func (o *GetGdprRequestsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr requests too many requests response has a 3xx status code
func (o *GetGdprRequestsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr requests too many requests response has a 4xx status code
func (o *GetGdprRequestsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gdpr requests too many requests response has a 5xx status code
func (o *GetGdprRequestsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get gdpr requests too many requests response a status code equal to that given
func (o *GetGdprRequestsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetGdprRequestsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGdprRequestsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGdprRequestsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestsInternalServerError creates a GetGdprRequestsInternalServerError with default headers values
func NewGetGdprRequestsInternalServerError() *GetGdprRequestsInternalServerError {
	return &GetGdprRequestsInternalServerError{}
}

/*
GetGdprRequestsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetGdprRequestsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr requests internal server error response has a 2xx status code
func (o *GetGdprRequestsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr requests internal server error response has a 3xx status code
func (o *GetGdprRequestsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr requests internal server error response has a 4xx status code
func (o *GetGdprRequestsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gdpr requests internal server error response has a 5xx status code
func (o *GetGdprRequestsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get gdpr requests internal server error response a status code equal to that given
func (o *GetGdprRequestsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetGdprRequestsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGdprRequestsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGdprRequestsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestsServiceUnavailable creates a GetGdprRequestsServiceUnavailable with default headers values
func NewGetGdprRequestsServiceUnavailable() *GetGdprRequestsServiceUnavailable {
	return &GetGdprRequestsServiceUnavailable{}
}

/*
GetGdprRequestsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetGdprRequestsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr requests service unavailable response has a 2xx status code
func (o *GetGdprRequestsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr requests service unavailable response has a 3xx status code
func (o *GetGdprRequestsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr requests service unavailable response has a 4xx status code
func (o *GetGdprRequestsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gdpr requests service unavailable response has a 5xx status code
func (o *GetGdprRequestsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get gdpr requests service unavailable response a status code equal to that given
func (o *GetGdprRequestsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetGdprRequestsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetGdprRequestsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetGdprRequestsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGdprRequestsGatewayTimeout creates a GetGdprRequestsGatewayTimeout with default headers values
func NewGetGdprRequestsGatewayTimeout() *GetGdprRequestsGatewayTimeout {
	return &GetGdprRequestsGatewayTimeout{}
}

/*
GetGdprRequestsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetGdprRequestsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get gdpr requests gateway timeout response has a 2xx status code
func (o *GetGdprRequestsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gdpr requests gateway timeout response has a 3xx status code
func (o *GetGdprRequestsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gdpr requests gateway timeout response has a 4xx status code
func (o *GetGdprRequestsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gdpr requests gateway timeout response has a 5xx status code
func (o *GetGdprRequestsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get gdpr requests gateway timeout response a status code equal to that given
func (o *GetGdprRequestsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetGdprRequestsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetGdprRequestsGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/gdpr/requests][%d] getGdprRequestsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetGdprRequestsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGdprRequestsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package workforce_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetWorkforcemanagementAdherenceParams creates a new GetWorkforcemanagementAdherenceParams object
// with the default values initialized.
func NewGetWorkforcemanagementAdherenceParams() *GetWorkforcemanagementAdherenceParams {
	var ()
	return &GetWorkforcemanagementAdherenceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetWorkforcemanagementAdherenceParamsWithTimeout creates a new GetWorkforcemanagementAdherenceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetWorkforcemanagementAdherenceParamsWithTimeout(timeout time.Duration) *GetWorkforcemanagementAdherenceParams {
	var ()
	return &GetWorkforcemanagementAdherenceParams{

		timeout: timeout,
	}
}

// NewGetWorkforcemanagementAdherenceParamsWithContext creates a new GetWorkforcemanagementAdherenceParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetWorkforcemanagementAdherenceParamsWithContext(ctx context.Context) *GetWorkforcemanagementAdherenceParams {
	var ()
	return &GetWorkforcemanagementAdherenceParams{

		Context: ctx,
	}
}

// NewGetWorkforcemanagementAdherenceParamsWithHTTPClient creates a new GetWorkforcemanagementAdherenceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetWorkforcemanagementAdherenceParamsWithHTTPClient(client *http.Client) *GetWorkforcemanagementAdherenceParams {
	var ()
	return &GetWorkforcemanagementAdherenceParams{
		HTTPClient: client,
	}
}

/*GetWorkforcemanagementAdherenceParams contains all the parameters to send to the API endpoint
for the get workforcemanagement adherence operation typically these are written to a http.Request
*/
type GetWorkforcemanagementAdherenceParams struct {

	/*UserID
	  User Id(s) for which to fetch current schedule adherence information.  Min 1, Max of 100 userIds per request

	*/
	UserID []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get workforcemanagement adherence params
func (o *GetWorkforcemanagementAdherenceParams) WithTimeout(timeout time.Duration) *GetWorkforcemanagementAdherenceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get workforcemanagement adherence params
func (o *GetWorkforcemanagementAdherenceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get workforcemanagement adherence params
func (o *GetWorkforcemanagementAdherenceParams) WithContext(ctx context.Context) *GetWorkforcemanagementAdherenceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get workforcemanagement adherence params
func (o *GetWorkforcemanagementAdherenceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get workforcemanagement adherence params
func (o *GetWorkforcemanagementAdherenceParams) WithHTTPClient(client *http.Client) *GetWorkforcemanagementAdherenceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get workforcemanagement adherence params
func (o *GetWorkforcemanagementAdherenceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUserID adds the userID to the get workforcemanagement adherence params
func (o *GetWorkforcemanagementAdherenceParams) WithUserID(userID []string) *GetWorkforcemanagementAdherenceParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get workforcemanagement adherence params
func (o *GetWorkforcemanagementAdherenceParams) SetUserID(userID []string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetWorkforcemanagementAdherenceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesUserID := o.UserID

	joinedUserID := swag.JoinByFormat(valuesUserID, "multi")
	// query array param userId
	if err := r.SetQueryParam("userId", joinedUserID...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

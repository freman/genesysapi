// Code generated by go-swagger; DO NOT EDIT.

package workforce_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetWorkforcemanagementManagementunitAdherenceParams creates a new GetWorkforcemanagementManagementunitAdherenceParams object
// with the default values initialized.
func NewGetWorkforcemanagementManagementunitAdherenceParams() *GetWorkforcemanagementManagementunitAdherenceParams {
	var ()
	return &GetWorkforcemanagementManagementunitAdherenceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetWorkforcemanagementManagementunitAdherenceParamsWithTimeout creates a new GetWorkforcemanagementManagementunitAdherenceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetWorkforcemanagementManagementunitAdherenceParamsWithTimeout(timeout time.Duration) *GetWorkforcemanagementManagementunitAdherenceParams {
	var ()
	return &GetWorkforcemanagementManagementunitAdherenceParams{

		timeout: timeout,
	}
}

// NewGetWorkforcemanagementManagementunitAdherenceParamsWithContext creates a new GetWorkforcemanagementManagementunitAdherenceParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetWorkforcemanagementManagementunitAdherenceParamsWithContext(ctx context.Context) *GetWorkforcemanagementManagementunitAdherenceParams {
	var ()
	return &GetWorkforcemanagementManagementunitAdherenceParams{

		Context: ctx,
	}
}

// NewGetWorkforcemanagementManagementunitAdherenceParamsWithHTTPClient creates a new GetWorkforcemanagementManagementunitAdherenceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetWorkforcemanagementManagementunitAdherenceParamsWithHTTPClient(client *http.Client) *GetWorkforcemanagementManagementunitAdherenceParams {
	var ()
	return &GetWorkforcemanagementManagementunitAdherenceParams{
		HTTPClient: client,
	}
}

/*GetWorkforcemanagementManagementunitAdherenceParams contains all the parameters to send to the API endpoint
for the get workforcemanagement managementunit adherence operation typically these are written to a http.Request
*/
type GetWorkforcemanagementManagementunitAdherenceParams struct {

	/*ForceDownloadService
	  Force the result of this operation to be sent via download service.  For testing/app development purposes

	*/
	ForceDownloadService *bool
	/*ManagementUnitID
	  The management unit ID of the management unit.

	*/
	ManagementUnitID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get workforcemanagement managementunit adherence params
func (o *GetWorkforcemanagementManagementunitAdherenceParams) WithTimeout(timeout time.Duration) *GetWorkforcemanagementManagementunitAdherenceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get workforcemanagement managementunit adherence params
func (o *GetWorkforcemanagementManagementunitAdherenceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get workforcemanagement managementunit adherence params
func (o *GetWorkforcemanagementManagementunitAdherenceParams) WithContext(ctx context.Context) *GetWorkforcemanagementManagementunitAdherenceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get workforcemanagement managementunit adherence params
func (o *GetWorkforcemanagementManagementunitAdherenceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get workforcemanagement managementunit adherence params
func (o *GetWorkforcemanagementManagementunitAdherenceParams) WithHTTPClient(client *http.Client) *GetWorkforcemanagementManagementunitAdherenceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get workforcemanagement managementunit adherence params
func (o *GetWorkforcemanagementManagementunitAdherenceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForceDownloadService adds the forceDownloadService to the get workforcemanagement managementunit adherence params
func (o *GetWorkforcemanagementManagementunitAdherenceParams) WithForceDownloadService(forceDownloadService *bool) *GetWorkforcemanagementManagementunitAdherenceParams {
	o.SetForceDownloadService(forceDownloadService)
	return o
}

// SetForceDownloadService adds the forceDownloadService to the get workforcemanagement managementunit adherence params
func (o *GetWorkforcemanagementManagementunitAdherenceParams) SetForceDownloadService(forceDownloadService *bool) {
	o.ForceDownloadService = forceDownloadService
}

// WithManagementUnitID adds the managementUnitID to the get workforcemanagement managementunit adherence params
func (o *GetWorkforcemanagementManagementunitAdherenceParams) WithManagementUnitID(managementUnitID string) *GetWorkforcemanagementManagementunitAdherenceParams {
	o.SetManagementUnitID(managementUnitID)
	return o
}

// SetManagementUnitID adds the managementUnitId to the get workforcemanagement managementunit adherence params
func (o *GetWorkforcemanagementManagementunitAdherenceParams) SetManagementUnitID(managementUnitID string) {
	o.ManagementUnitID = managementUnitID
}

// WriteToRequest writes these params to a swagger request
func (o *GetWorkforcemanagementManagementunitAdherenceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ForceDownloadService != nil {

		// query param forceDownloadService
		var qrForceDownloadService bool
		if o.ForceDownloadService != nil {
			qrForceDownloadService = *o.ForceDownloadService
		}
		qForceDownloadService := swag.FormatBool(qrForceDownloadService)
		if qForceDownloadService != "" {
			if err := r.SetQueryParam("forceDownloadService", qForceDownloadService); err != nil {
				return err
			}
		}

	}

	// path param managementUnitId
	if err := r.SetPathParam("managementUnitId", o.ManagementUnitID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package workforce_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the workforce management client
type API interface {
	/*
	   DeleteWorkforcemanagementBusinessunit deletes business unit
	   A business unit cannot be deleted if it contains one or more management units
	*/
	DeleteWorkforcemanagementBusinessunit(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitParams) (*DeleteWorkforcemanagementBusinessunitNoContent, error)
	/*
	   DeleteWorkforcemanagementBusinessunitActivitycode deletes an activity code
	*/
	DeleteWorkforcemanagementBusinessunitActivitycode(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitActivitycodeParams) (*DeleteWorkforcemanagementBusinessunitActivitycodeNoContent, error)
	/*
	   DeleteWorkforcemanagementBusinessunitPlanninggroup deletes the planning group
	*/
	DeleteWorkforcemanagementBusinessunitPlanninggroup(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitPlanninggroupParams) (*DeleteWorkforcemanagementBusinessunitPlanninggroupNoContent, error)
	/*
	   DeleteWorkforcemanagementBusinessunitSchedulingRun cancels a scheduling run
	*/
	DeleteWorkforcemanagementBusinessunitSchedulingRun(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitSchedulingRunParams) (*DeleteWorkforcemanagementBusinessunitSchedulingRunNoContent, error)
	/*
	   DeleteWorkforcemanagementBusinessunitServicegoaltemplate deletes a service goal template
	*/
	DeleteWorkforcemanagementBusinessunitServicegoaltemplate(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitServicegoaltemplateParams) (*DeleteWorkforcemanagementBusinessunitServicegoaltemplateNoContent, error)
	/*
	   DeleteWorkforcemanagementBusinessunitWeekSchedule deletes a schedule
	*/
	DeleteWorkforcemanagementBusinessunitWeekSchedule(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitWeekScheduleParams) (*DeleteWorkforcemanagementBusinessunitWeekScheduleOK, *DeleteWorkforcemanagementBusinessunitWeekScheduleAccepted, error)
	/*
	   DeleteWorkforcemanagementBusinessunitWeekShorttermforecast deletes a short term forecast
	   Must not be tied to any schedules
	*/
	DeleteWorkforcemanagementBusinessunitWeekShorttermforecast(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitWeekShorttermforecastParams) (*DeleteWorkforcemanagementBusinessunitWeekShorttermforecastNoContent, error)
	/*
	   DeleteWorkforcemanagementCalendarURLIcs disables generated calendar link for the current user
	*/
	DeleteWorkforcemanagementCalendarURLIcs(ctx context.Context, params *DeleteWorkforcemanagementCalendarURLIcsParams) (*DeleteWorkforcemanagementCalendarURLIcsNoContent, error)
	/*
	   DeleteWorkforcemanagementManagementunit deletes management unit
	*/
	DeleteWorkforcemanagementManagementunit(ctx context.Context, params *DeleteWorkforcemanagementManagementunitParams) (*DeleteWorkforcemanagementManagementunitNoContent, error)
	/*
	   DeleteWorkforcemanagementManagementunitWorkplan deletes a work plan
	*/
	DeleteWorkforcemanagementManagementunitWorkplan(ctx context.Context, params *DeleteWorkforcemanagementManagementunitWorkplanParams) (*DeleteWorkforcemanagementManagementunitWorkplanNoContent, error)
	/*
	   DeleteWorkforcemanagementManagementunitWorkplanrotation deletes a work plan rotation
	*/
	DeleteWorkforcemanagementManagementunitWorkplanrotation(ctx context.Context, params *DeleteWorkforcemanagementManagementunitWorkplanrotationParams) (*DeleteWorkforcemanagementManagementunitWorkplanrotationNoContent, error)
	/*
	   GetWorkforcemanagementAdherence gets a list of user schedule adherence records for the requested users
	*/
	GetWorkforcemanagementAdherence(ctx context.Context, params *GetWorkforcemanagementAdherenceParams) (*GetWorkforcemanagementAdherenceOK, error)
	/*
	   GetWorkforcemanagementAdhocmodelingjob gets status of the modeling job
	*/
	GetWorkforcemanagementAdhocmodelingjob(ctx context.Context, params *GetWorkforcemanagementAdhocmodelingjobParams) (*GetWorkforcemanagementAdhocmodelingjobOK, error)
	/*
	   GetWorkforcemanagementAgentManagementunit gets the management unit to which the agent belongs
	*/
	GetWorkforcemanagementAgentManagementunit(ctx context.Context, params *GetWorkforcemanagementAgentManagementunitParams) (*GetWorkforcemanagementAgentManagementunitOK, error)
	/*
	   GetWorkforcemanagementAgentsMeManagementunit gets the management unit to which the currently logged in agent belongs
	*/
	GetWorkforcemanagementAgentsMeManagementunit(ctx context.Context, params *GetWorkforcemanagementAgentsMeManagementunitParams) (*GetWorkforcemanagementAgentsMeManagementunitOK, error)
	/*
	   GetWorkforcemanagementBusinessunit gets business unit
	   Expanding "settings" will retrieve all settings.  All other expands will retrieve only the requested settings field(s).
	*/
	GetWorkforcemanagementBusinessunit(ctx context.Context, params *GetWorkforcemanagementBusinessunitParams) (*GetWorkforcemanagementBusinessunitOK, error)
	/*
	   GetWorkforcemanagementBusinessunitActivitycode gets an activity code
	*/
	GetWorkforcemanagementBusinessunitActivitycode(ctx context.Context, params *GetWorkforcemanagementBusinessunitActivitycodeParams) (*GetWorkforcemanagementBusinessunitActivitycodeOK, error)
	/*
	   GetWorkforcemanagementBusinessunitActivitycodes gets activity codes
	*/
	GetWorkforcemanagementBusinessunitActivitycodes(ctx context.Context, params *GetWorkforcemanagementBusinessunitActivitycodesParams) (*GetWorkforcemanagementBusinessunitActivitycodesOK, error)
	/*
	   GetWorkforcemanagementBusinessunitIntradayPlanninggroups gets intraday planning groups for the given date
	*/
	GetWorkforcemanagementBusinessunitIntradayPlanninggroups(ctx context.Context, params *GetWorkforcemanagementBusinessunitIntradayPlanninggroupsParams) (*GetWorkforcemanagementBusinessunitIntradayPlanninggroupsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitManagementunits gets all authorized management units in the business unit
	*/
	GetWorkforcemanagementBusinessunitManagementunits(ctx context.Context, params *GetWorkforcemanagementBusinessunitManagementunitsParams) (*GetWorkforcemanagementBusinessunitManagementunitsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitPlanninggroup gets a planning group
	*/
	GetWorkforcemanagementBusinessunitPlanninggroup(ctx context.Context, params *GetWorkforcemanagementBusinessunitPlanninggroupParams) (*GetWorkforcemanagementBusinessunitPlanninggroupOK, error)
	/*
	   GetWorkforcemanagementBusinessunitPlanninggroups gets list of planning groups
	*/
	GetWorkforcemanagementBusinessunitPlanninggroups(ctx context.Context, params *GetWorkforcemanagementBusinessunitPlanninggroupsParams) (*GetWorkforcemanagementBusinessunitPlanninggroupsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitSchedulingRun gets a scheduling run
	*/
	GetWorkforcemanagementBusinessunitSchedulingRun(ctx context.Context, params *GetWorkforcemanagementBusinessunitSchedulingRunParams) (*GetWorkforcemanagementBusinessunitSchedulingRunOK, error)
	/*
	   GetWorkforcemanagementBusinessunitSchedulingRunResult gets the result of a rescheduling operation
	*/
	GetWorkforcemanagementBusinessunitSchedulingRunResult(ctx context.Context, params *GetWorkforcemanagementBusinessunitSchedulingRunResultParams) (*GetWorkforcemanagementBusinessunitSchedulingRunResultOK, error)
	/*
	   GetWorkforcemanagementBusinessunitSchedulingRuns gets the list of scheduling runs
	*/
	GetWorkforcemanagementBusinessunitSchedulingRuns(ctx context.Context, params *GetWorkforcemanagementBusinessunitSchedulingRunsParams) (*GetWorkforcemanagementBusinessunitSchedulingRunsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitServicegoaltemplate gets a service goal template
	*/
	GetWorkforcemanagementBusinessunitServicegoaltemplate(ctx context.Context, params *GetWorkforcemanagementBusinessunitServicegoaltemplateParams) (*GetWorkforcemanagementBusinessunitServicegoaltemplateOK, error)
	/*
	   GetWorkforcemanagementBusinessunitServicegoaltemplates gets list of service goal templates
	*/
	GetWorkforcemanagementBusinessunitServicegoaltemplates(ctx context.Context, params *GetWorkforcemanagementBusinessunitServicegoaltemplatesParams) (*GetWorkforcemanagementBusinessunitServicegoaltemplatesOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekSchedule gets the metadata for the schedule describing which management units and agents are in the schedule schedule data can then be loaded with the query route
	*/
	GetWorkforcemanagementBusinessunitWeekSchedule(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleParams) (*GetWorkforcemanagementBusinessunitWeekScheduleOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekScheduleGenerationresults gets the generation results for a generated schedule
	*/
	GetWorkforcemanagementBusinessunitWeekScheduleGenerationresults(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleGenerationresultsParams) (*GetWorkforcemanagementBusinessunitWeekScheduleGenerationresultsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast gets the headcount forecast by planning group for the schedule
	*/
	GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastParams) (*GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgent loads agent s schedule history
	*/
	GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgent(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgentParams) (*GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgentOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekSchedules gets the list of week schedules for the specified week
	   Use "recent" (without quotes) for the `weekId` path parameter to fetch all forecasts for +/- 26 weeks from the current date. Response will include any schedule which spans the specified week
	*/
	GetWorkforcemanagementBusinessunitWeekSchedules(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekSchedulesParams) (*GetWorkforcemanagementBusinessunitWeekSchedulesOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekShorttermforecast gets a short term forecast
	*/
	GetWorkforcemanagementBusinessunitWeekShorttermforecast(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekShorttermforecastData gets the result of a short term forecast calculation
	   Includes modifications unless you pass the doNotApplyModifications query parameter
	*/
	GetWorkforcemanagementBusinessunitWeekShorttermforecastData(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastDataParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastDataOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults gets the forecast generation results
	*/
	GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata gets the result of a long term forecast calculation
	   Includes modifications unless you pass the doNotApplyModifications query parameter
	*/
	GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdataParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdataOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups gets the forecast planning group snapshot
	*/
	GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekShorttermforecasts gets short term forecasts
	   Use "recent" (without quotes) for the `weekDateId` path parameter to fetch all forecasts for +/- 26 weeks from the current date. Response will include any forecast which spans the specified week
	*/
	GetWorkforcemanagementBusinessunitWeekShorttermforecasts(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastsParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastsOK, error)
	/*
	   GetWorkforcemanagementBusinessunits gets business units
	*/
	GetWorkforcemanagementBusinessunits(ctx context.Context, params *GetWorkforcemanagementBusinessunitsParams) (*GetWorkforcemanagementBusinessunitsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitsDivisionviews gets business units across divisions
	*/
	GetWorkforcemanagementBusinessunitsDivisionviews(ctx context.Context, params *GetWorkforcemanagementBusinessunitsDivisionviewsParams) (*GetWorkforcemanagementBusinessunitsDivisionviewsOK, error)
	/*
	   GetWorkforcemanagementCalendarDataIcs gets ics formatted calendar based on shareable link
	*/
	GetWorkforcemanagementCalendarDataIcs(ctx context.Context, params *GetWorkforcemanagementCalendarDataIcsParams) (*GetWorkforcemanagementCalendarDataIcsOK, error)
	/*
	   GetWorkforcemanagementCalendarURLIcs gets existing calendar link for the current user
	*/
	GetWorkforcemanagementCalendarURLIcs(ctx context.Context, params *GetWorkforcemanagementCalendarURLIcsParams) (*GetWorkforcemanagementCalendarURLIcsOK, error)
	/*
	   GetWorkforcemanagementHistoricaldataDeletejob retrieves delete job status for historical data imports of the organization
	*/
	GetWorkforcemanagementHistoricaldataDeletejob(ctx context.Context, params *GetWorkforcemanagementHistoricaldataDeletejobParams) (*GetWorkforcemanagementHistoricaldataDeletejobOK, error)
	/*
	   GetWorkforcemanagementHistoricaldataImportstatus retrieves status of the historical data imports of the organization
	*/
	GetWorkforcemanagementHistoricaldataImportstatus(ctx context.Context, params *GetWorkforcemanagementHistoricaldataImportstatusParams) (*GetWorkforcemanagementHistoricaldataImportstatusOK, error)
	/*
	   GetWorkforcemanagementManagementunit gets management unit
	   settings.shortTermForecasting is deprecated and now lives on the business unit
	*/
	GetWorkforcemanagementManagementunit(ctx context.Context, params *GetWorkforcemanagementManagementunitParams) (*GetWorkforcemanagementManagementunitOK, error)
	/*
	   GetWorkforcemanagementManagementunitActivitycodes gets activity codes
	*/
	GetWorkforcemanagementManagementunitActivitycodes(ctx context.Context, params *GetWorkforcemanagementManagementunitActivitycodesParams) (*GetWorkforcemanagementManagementunitActivitycodesOK, error)
	/*
	   GetWorkforcemanagementManagementunitAdherence gets a list of user schedule adherence records for the requested management unit
	*/
	GetWorkforcemanagementManagementunitAdherence(ctx context.Context, params *GetWorkforcemanagementManagementunitAdherenceParams) (*GetWorkforcemanagementManagementunitAdherenceOK, error)
	/*
	   GetWorkforcemanagementManagementunitAgent gets data for agent in the management unit
	*/
	GetWorkforcemanagementManagementunitAgent(ctx context.Context, params *GetWorkforcemanagementManagementunitAgentParams) (*GetWorkforcemanagementManagementunitAgentOK, error)
	/*
	   GetWorkforcemanagementManagementunitAgentShifttrades gets all the shift trades for a given agent
	*/
	GetWorkforcemanagementManagementunitAgentShifttrades(ctx context.Context, params *GetWorkforcemanagementManagementunitAgentShifttradesParams) (*GetWorkforcemanagementManagementunitAgentShifttradesOK, error)
	/*
	   GetWorkforcemanagementManagementunitShifttradesMatched gets a summary of all shift trades in the matched state
	*/
	GetWorkforcemanagementManagementunitShifttradesMatched(ctx context.Context, params *GetWorkforcemanagementManagementunitShifttradesMatchedParams) (*GetWorkforcemanagementManagementunitShifttradesMatchedOK, error)
	/*
	   GetWorkforcemanagementManagementunitShifttradesUsers gets list of users available for whom you can send direct shift trade requests
	*/
	GetWorkforcemanagementManagementunitShifttradesUsers(ctx context.Context, params *GetWorkforcemanagementManagementunitShifttradesUsersParams) (*GetWorkforcemanagementManagementunitShifttradesUsersOK, error)
	/*
	   GetWorkforcemanagementManagementunitUserTimeoffrequest gets a time off request
	*/
	GetWorkforcemanagementManagementunitUserTimeoffrequest(ctx context.Context, params *GetWorkforcemanagementManagementunitUserTimeoffrequestParams) (*GetWorkforcemanagementManagementunitUserTimeoffrequestOK, error)
	/*
	   GetWorkforcemanagementManagementunitUserTimeoffrequests gets a list of time off requests for a given user
	*/
	GetWorkforcemanagementManagementunitUserTimeoffrequests(ctx context.Context, params *GetWorkforcemanagementManagementunitUserTimeoffrequestsParams) (*GetWorkforcemanagementManagementunitUserTimeoffrequestsOK, error)
	/*
	   GetWorkforcemanagementManagementunitUsers gets users in the management unit
	*/
	GetWorkforcemanagementManagementunitUsers(ctx context.Context, params *GetWorkforcemanagementManagementunitUsersParams) (*GetWorkforcemanagementManagementunitUsersOK, error)
	/*
	   GetWorkforcemanagementManagementunitWeekSchedule deprecateds use the equivalent business unit resource instead get a week schedule
	*/
	GetWorkforcemanagementManagementunitWeekSchedule(ctx context.Context, params *GetWorkforcemanagementManagementunitWeekScheduleParams) (*GetWorkforcemanagementManagementunitWeekScheduleOK, error)
	/*
	   GetWorkforcemanagementManagementunitWeekSchedules deprecateds use the equivalent business unit resource instead get the list of schedules in a week in management unit
	*/
	GetWorkforcemanagementManagementunitWeekSchedules(ctx context.Context, params *GetWorkforcemanagementManagementunitWeekSchedulesParams) (*GetWorkforcemanagementManagementunitWeekSchedulesOK, error)
	/*
	   GetWorkforcemanagementManagementunitWeekShifttrades gets all the shift trades for a given week
	*/
	GetWorkforcemanagementManagementunitWeekShifttrades(ctx context.Context, params *GetWorkforcemanagementManagementunitWeekShifttradesParams) (*GetWorkforcemanagementManagementunitWeekShifttradesOK, error)
	/*
	   GetWorkforcemanagementManagementunitWorkplan gets a work plan
	*/
	GetWorkforcemanagementManagementunitWorkplan(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplanParams) (*GetWorkforcemanagementManagementunitWorkplanOK, error)
	/*
	   GetWorkforcemanagementManagementunitWorkplanrotation gets a work plan rotation
	*/
	GetWorkforcemanagementManagementunitWorkplanrotation(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplanrotationParams) (*GetWorkforcemanagementManagementunitWorkplanrotationOK, error)
	/*
	   GetWorkforcemanagementManagementunitWorkplanrotations gets work plan rotations
	*/
	GetWorkforcemanagementManagementunitWorkplanrotations(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplanrotationsParams) (*GetWorkforcemanagementManagementunitWorkplanrotationsOK, error)
	/*
	   GetWorkforcemanagementManagementunitWorkplans gets work plans
	   "expand=details" is deprecated
	*/
	GetWorkforcemanagementManagementunitWorkplans(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplansParams) (*GetWorkforcemanagementManagementunitWorkplansOK, error)
	/*
	   GetWorkforcemanagementManagementunits gets management units
	*/
	GetWorkforcemanagementManagementunits(ctx context.Context, params *GetWorkforcemanagementManagementunitsParams) (*GetWorkforcemanagementManagementunitsOK, error)
	/*
	   GetWorkforcemanagementManagementunitsDivisionviews gets management units across divisions
	*/
	GetWorkforcemanagementManagementunitsDivisionviews(ctx context.Context, params *GetWorkforcemanagementManagementunitsDivisionviewsParams) (*GetWorkforcemanagementManagementunitsDivisionviewsOK, error)
	/*
	   GetWorkforcemanagementNotifications gets a list of notifications for the current user
	*/
	GetWorkforcemanagementNotifications(ctx context.Context, params *GetWorkforcemanagementNotificationsParams) (*GetWorkforcemanagementNotificationsOK, error)
	/*
	   GetWorkforcemanagementSchedulingjob gets status of the scheduling job
	*/
	GetWorkforcemanagementSchedulingjob(ctx context.Context, params *GetWorkforcemanagementSchedulingjobParams) (*GetWorkforcemanagementSchedulingjobOK, error)
	/*
	   GetWorkforcemanagementShifttrades gets all of my shift trades
	*/
	GetWorkforcemanagementShifttrades(ctx context.Context, params *GetWorkforcemanagementShifttradesParams) (*GetWorkforcemanagementShifttradesOK, error)
	/*
	   GetWorkforcemanagementTimeoffrequest gets a time off request for the current user
	*/
	GetWorkforcemanagementTimeoffrequest(ctx context.Context, params *GetWorkforcemanagementTimeoffrequestParams) (*GetWorkforcemanagementTimeoffrequestOK, error)
	/*
	   GetWorkforcemanagementTimeoffrequests gets a list of time off requests for the current user
	*/
	GetWorkforcemanagementTimeoffrequests(ctx context.Context, params *GetWorkforcemanagementTimeoffrequestsParams) (*GetWorkforcemanagementTimeoffrequestsOK, error)
	/*
	   PatchWorkforcemanagementBusinessunit updates business unit
	*/
	PatchWorkforcemanagementBusinessunit(ctx context.Context, params *PatchWorkforcemanagementBusinessunitParams) (*PatchWorkforcemanagementBusinessunitOK, error)
	/*
	   PatchWorkforcemanagementBusinessunitActivitycode updates an activity code
	*/
	PatchWorkforcemanagementBusinessunitActivitycode(ctx context.Context, params *PatchWorkforcemanagementBusinessunitActivitycodeParams) (*PatchWorkforcemanagementBusinessunitActivitycodeOK, error)
	/*
	   PatchWorkforcemanagementBusinessunitPlanninggroup updates the planning group
	*/
	PatchWorkforcemanagementBusinessunitPlanninggroup(ctx context.Context, params *PatchWorkforcemanagementBusinessunitPlanninggroupParams) (*PatchWorkforcemanagementBusinessunitPlanninggroupOK, error)
	/*
	   PatchWorkforcemanagementBusinessunitSchedulingRun marks a schedule run as applied
	*/
	PatchWorkforcemanagementBusinessunitSchedulingRun(ctx context.Context, params *PatchWorkforcemanagementBusinessunitSchedulingRunParams) (*PatchWorkforcemanagementBusinessunitSchedulingRunNoContent, error)
	/*
	   PatchWorkforcemanagementBusinessunitServicegoaltemplate updates a service goal template
	*/
	PatchWorkforcemanagementBusinessunitServicegoaltemplate(ctx context.Context, params *PatchWorkforcemanagementBusinessunitServicegoaltemplateParams) (*PatchWorkforcemanagementBusinessunitServicegoaltemplateOK, error)
	/*
	   PatchWorkforcemanagementManagementunit updates the requested management unit
	*/
	PatchWorkforcemanagementManagementunit(ctx context.Context, params *PatchWorkforcemanagementManagementunitParams) (*PatchWorkforcemanagementManagementunitOK, error)
	/*
	   PatchWorkforcemanagementManagementunitUserTimeoffrequest updates a time off request
	*/
	PatchWorkforcemanagementManagementunitUserTimeoffrequest(ctx context.Context, params *PatchWorkforcemanagementManagementunitUserTimeoffrequestParams) (*PatchWorkforcemanagementManagementunitUserTimeoffrequestOK, error)
	/*
	   PatchWorkforcemanagementManagementunitWeekShifttrade updates a shift trade this route can only be called by the initiating agent
	*/
	PatchWorkforcemanagementManagementunitWeekShifttrade(ctx context.Context, params *PatchWorkforcemanagementManagementunitWeekShifttradeParams) (*PatchWorkforcemanagementManagementunitWeekShifttradeOK, error)
	/*
	   PatchWorkforcemanagementManagementunitWorkplan updates a work plan
	*/
	PatchWorkforcemanagementManagementunitWorkplan(ctx context.Context, params *PatchWorkforcemanagementManagementunitWorkplanParams) (*PatchWorkforcemanagementManagementunitWorkplanOK, error)
	/*
	   PatchWorkforcemanagementManagementunitWorkplanrotation updates a work plan rotation
	*/
	PatchWorkforcemanagementManagementunitWorkplanrotation(ctx context.Context, params *PatchWorkforcemanagementManagementunitWorkplanrotationParams) (*PatchWorkforcemanagementManagementunitWorkplanrotationOK, error)
	/*
	   PatchWorkforcemanagementTimeoffrequest updates a time off request for the current user
	*/
	PatchWorkforcemanagementTimeoffrequest(ctx context.Context, params *PatchWorkforcemanagementTimeoffrequestParams) (*PatchWorkforcemanagementTimeoffrequestOK, error)
	/*
	   PostWorkforcemanagementAdherenceHistorical requests a historical adherence report for users across management units
	*/
	PostWorkforcemanagementAdherenceHistorical(ctx context.Context, params *PostWorkforcemanagementAdherenceHistoricalParams) (*PostWorkforcemanagementAdherenceHistoricalAccepted, error)
	/*
	   PostWorkforcemanagementAgentschedulesMine gets published schedule for the current user
	*/
	PostWorkforcemanagementAgentschedulesMine(ctx context.Context, params *PostWorkforcemanagementAgentschedulesMineParams) (*PostWorkforcemanagementAgentschedulesMineOK, error)
	/*
	   PostWorkforcemanagementBusinessunitActivitycodes creates a new activity code
	*/
	PostWorkforcemanagementBusinessunitActivitycodes(ctx context.Context, params *PostWorkforcemanagementBusinessunitActivitycodesParams) (*PostWorkforcemanagementBusinessunitActivitycodesOK, error)
	/*
	   PostWorkforcemanagementBusinessunitAgentschedulesSearch searches published schedules
	*/
	PostWorkforcemanagementBusinessunitAgentschedulesSearch(ctx context.Context, params *PostWorkforcemanagementBusinessunitAgentschedulesSearchParams) (*PostWorkforcemanagementBusinessunitAgentschedulesSearchOK, error)
	/*
	   PostWorkforcemanagementBusinessunitIntraday gets intraday data for the given date for the requested planning group ids
	*/
	PostWorkforcemanagementBusinessunitIntraday(ctx context.Context, params *PostWorkforcemanagementBusinessunitIntradayParams) (*PostWorkforcemanagementBusinessunitIntradayOK, error)
	/*
	   PostWorkforcemanagementBusinessunitPlanninggroups adds a new planning group
	*/
	PostWorkforcemanagementBusinessunitPlanninggroups(ctx context.Context, params *PostWorkforcemanagementBusinessunitPlanninggroupsParams) (*PostWorkforcemanagementBusinessunitPlanninggroupsOK, *PostWorkforcemanagementBusinessunitPlanninggroupsCreated, error)
	/*
	   PostWorkforcemanagementBusinessunitServicegoaltemplates adds a new service goal template
	*/
	PostWorkforcemanagementBusinessunitServicegoaltemplates(ctx context.Context, params *PostWorkforcemanagementBusinessunitServicegoaltemplatesParams) (*PostWorkforcemanagementBusinessunitServicegoaltemplatesOK, *PostWorkforcemanagementBusinessunitServicegoaltemplatesCreated, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery loads agent schedule data from the schedule used in combination with the metadata route
	*/
	PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryParams) (*PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryOK, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekScheduleCopy copies a schedule
	*/
	PostWorkforcemanagementBusinessunitWeekScheduleCopy(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleCopyParams) (*PostWorkforcemanagementBusinessunitWeekScheduleCopyOK, *PostWorkforcemanagementBusinessunitWeekScheduleCopyCreated, *PostWorkforcemanagementBusinessunitWeekScheduleCopyAccepted, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekScheduleReschedule starts a rescheduling run
	*/
	PostWorkforcemanagementBusinessunitWeekScheduleReschedule(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleRescheduleParams) (*PostWorkforcemanagementBusinessunitWeekScheduleRescheduleOK, *PostWorkforcemanagementBusinessunitWeekScheduleRescheduleAccepted, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekSchedules creates a blank schedule
	*/
	PostWorkforcemanagementBusinessunitWeekSchedules(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekSchedulesParams) (*PostWorkforcemanagementBusinessunitWeekSchedulesOK, *PostWorkforcemanagementBusinessunitWeekSchedulesCreated, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekSchedulesGenerate generates a schedule
	*/
	PostWorkforcemanagementBusinessunitWeekSchedulesGenerate(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekSchedulesGenerateParams) (*PostWorkforcemanagementBusinessunitWeekSchedulesGenerateOK, *PostWorkforcemanagementBusinessunitWeekSchedulesGenerateAccepted, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekShorttermforecastCopy copies a short term forecast
	*/
	PostWorkforcemanagementBusinessunitWeekShorttermforecastCopy(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyParams) (*PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyOK, *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyCreated, *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyAccepted, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate generates a short term forecast
	*/
	PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateParams) (*PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateOK, *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateCreated, *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateAccepted, error)
	/*
	   PostWorkforcemanagementBusinessunits adds a new business unit
	   It may take a minute or two for a new business unit to be available for api operations
	*/
	PostWorkforcemanagementBusinessunits(ctx context.Context, params *PostWorkforcemanagementBusinessunitsParams) (*PostWorkforcemanagementBusinessunitsOK, *PostWorkforcemanagementBusinessunitsCreated, error)
	/*
	   PostWorkforcemanagementCalendarURLIcs creates a newly generated calendar link for the current user if the current user has previously generated one the generated link will be returned
	*/
	PostWorkforcemanagementCalendarURLIcs(ctx context.Context, params *PostWorkforcemanagementCalendarURLIcsParams) (*PostWorkforcemanagementCalendarURLIcsOK, *PostWorkforcemanagementCalendarURLIcsCreated, error)
	/*
	   PostWorkforcemanagementHistoricaldataDeletejob deletes the entries of the historical data imports in the organization
	*/
	PostWorkforcemanagementHistoricaldataDeletejob(ctx context.Context, params *PostWorkforcemanagementHistoricaldataDeletejobParams) (*PostWorkforcemanagementHistoricaldataDeletejobAccepted, error)
	/*
	   PostWorkforcemanagementHistoricaldataValidate triggers validation process for historical import
	*/
	PostWorkforcemanagementHistoricaldataValidate(ctx context.Context, params *PostWorkforcemanagementHistoricaldataValidateParams) (*PostWorkforcemanagementHistoricaldataValidateAccepted, error)
	/*
	   PostWorkforcemanagementManagementunitAgentschedulesSearch queries published schedules for given given time range for set of users
	*/
	PostWorkforcemanagementManagementunitAgentschedulesSearch(ctx context.Context, params *PostWorkforcemanagementManagementunitAgentschedulesSearchParams) (*PostWorkforcemanagementManagementunitAgentschedulesSearchOK, error)
	/*
	   PostWorkforcemanagementManagementunitHistoricaladherencequery requests a historical adherence report
	   The maximum supported range for historical adherence queries is 31 days, or 7 days with includeExceptions = true
	*/
	PostWorkforcemanagementManagementunitHistoricaladherencequery(ctx context.Context, params *PostWorkforcemanagementManagementunitHistoricaladherencequeryParams) (*PostWorkforcemanagementManagementunitHistoricaladherencequeryAccepted, error)
	/*
	   PostWorkforcemanagementManagementunitMove moves the requested management unit to a new business unit
	   Returns status 200 if the management unit is already in the requested business unit
	*/
	PostWorkforcemanagementManagementunitMove(ctx context.Context, params *PostWorkforcemanagementManagementunitMoveParams) (*PostWorkforcemanagementManagementunitMoveOK, *PostWorkforcemanagementManagementunitMoveAccepted, error)
	/*
	   PostWorkforcemanagementManagementunitSchedulesSearch queries published schedules for given given time range for set of users
	*/
	PostWorkforcemanagementManagementunitSchedulesSearch(ctx context.Context, params *PostWorkforcemanagementManagementunitSchedulesSearchParams) (*PostWorkforcemanagementManagementunitSchedulesSearchOK, error)
	/*
	   PostWorkforcemanagementManagementunitTimeoffrequests creates a new time off request
	*/
	PostWorkforcemanagementManagementunitTimeoffrequests(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeoffrequestsParams) (*PostWorkforcemanagementManagementunitTimeoffrequestsOK, error)
	/*
	   PostWorkforcemanagementManagementunitTimeoffrequestsQuery fetches time off requests matching the conditions specified in the request body
	   Request body requires one of the following: User ID is specified, statuses == [Pending] or date range to be specified and less than or equal to 33 days.  All other fields are filters
	*/
	PostWorkforcemanagementManagementunitTimeoffrequestsQuery(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeoffrequestsQueryParams) (*PostWorkforcemanagementManagementunitTimeoffrequestsQueryOK, error)
	/*
	   PostWorkforcemanagementManagementunitWeekShifttradeMatch matches a shift trade this route can only be called by the receiving agent
	*/
	PostWorkforcemanagementManagementunitWeekShifttradeMatch(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradeMatchParams) (*PostWorkforcemanagementManagementunitWeekShifttradeMatchOK, error)
	/*
	   PostWorkforcemanagementManagementunitWeekShifttrades adds a shift trade
	*/
	PostWorkforcemanagementManagementunitWeekShifttrades(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradesParams) (*PostWorkforcemanagementManagementunitWeekShifttradesOK, error)
	/*
	   PostWorkforcemanagementManagementunitWeekShifttradesSearch searches for potential shift trade matches for the current agent
	*/
	PostWorkforcemanagementManagementunitWeekShifttradesSearch(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradesSearchParams) (*PostWorkforcemanagementManagementunitWeekShifttradesSearchOK, error)
	/*
	   PostWorkforcemanagementManagementunitWeekShifttradesStateBulk updates the state of a batch of shift trades
	   Admin functionality is not supported with "mine".
	*/
	PostWorkforcemanagementManagementunitWeekShifttradesStateBulk(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradesStateBulkParams) (*PostWorkforcemanagementManagementunitWeekShifttradesStateBulkOK, *PostWorkforcemanagementManagementunitWeekShifttradesStateBulkAccepted, error)
	/*
	   PostWorkforcemanagementManagementunitWorkplanCopy creates a copy of work plan
	*/
	PostWorkforcemanagementManagementunitWorkplanCopy(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanCopyParams) (*PostWorkforcemanagementManagementunitWorkplanCopyOK, error)
	/*
	   PostWorkforcemanagementManagementunitWorkplanValidate validates work plan
	*/
	PostWorkforcemanagementManagementunitWorkplanValidate(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanValidateParams) (*PostWorkforcemanagementManagementunitWorkplanValidateOK, error)
	/*
	   PostWorkforcemanagementManagementunitWorkplanrotationCopy creates a copy of work plan rotation
	*/
	PostWorkforcemanagementManagementunitWorkplanrotationCopy(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanrotationCopyParams) (*PostWorkforcemanagementManagementunitWorkplanrotationCopyOK, error)
	/*
	   PostWorkforcemanagementManagementunitWorkplanrotations creates a new work plan rotation
	*/
	PostWorkforcemanagementManagementunitWorkplanrotations(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanrotationsParams) (*PostWorkforcemanagementManagementunitWorkplanrotationsOK, *PostWorkforcemanagementManagementunitWorkplanrotationsCreated, error)
	/*
	   PostWorkforcemanagementManagementunitWorkplans creates a new work plan
	*/
	PostWorkforcemanagementManagementunitWorkplans(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplansParams) (*PostWorkforcemanagementManagementunitWorkplansOK, error)
	/*
	   PostWorkforcemanagementManagementunits adds a management unit
	   It may take a minute or two for a new management unit to be available for api operations
	*/
	PostWorkforcemanagementManagementunits(ctx context.Context, params *PostWorkforcemanagementManagementunitsParams) (*PostWorkforcemanagementManagementunitsOK, *PostWorkforcemanagementManagementunitsCreated, error)
	/*
	   PostWorkforcemanagementNotificationsUpdate marks a list of notifications as read or unread
	*/
	PostWorkforcemanagementNotificationsUpdate(ctx context.Context, params *PostWorkforcemanagementNotificationsUpdateParams) (*PostWorkforcemanagementNotificationsUpdateOK, error)
	/*
	   PostWorkforcemanagementSchedules gets published schedule for the current user
	*/
	PostWorkforcemanagementSchedules(ctx context.Context, params *PostWorkforcemanagementSchedulesParams) (*PostWorkforcemanagementSchedulesOK, error)
	/*
	   PostWorkforcemanagementTimeoffrequests creates a time off request for the current user
	*/
	PostWorkforcemanagementTimeoffrequests(ctx context.Context, params *PostWorkforcemanagementTimeoffrequestsParams) (*PostWorkforcemanagementTimeoffrequestsOK, error)
}

// New creates a new workforce management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for workforce management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteWorkforcemanagementBusinessunit deletes business unit

A business unit cannot be deleted if it contains one or more management units
*/
func (a *Client) DeleteWorkforcemanagementBusinessunit(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitParams) (*DeleteWorkforcemanagementBusinessunitNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementBusinessunit",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementBusinessunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementBusinessunitNoContent), nil

}

/*
DeleteWorkforcemanagementBusinessunitActivitycode deletes an activity code
*/
func (a *Client) DeleteWorkforcemanagementBusinessunitActivitycode(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitActivitycodeParams) (*DeleteWorkforcemanagementBusinessunitActivitycodeNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementBusinessunitActivitycode",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementBusinessunitActivitycodeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementBusinessunitActivitycodeNoContent), nil

}

/*
DeleteWorkforcemanagementBusinessunitPlanninggroup deletes the planning group
*/
func (a *Client) DeleteWorkforcemanagementBusinessunitPlanninggroup(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitPlanninggroupParams) (*DeleteWorkforcemanagementBusinessunitPlanninggroupNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementBusinessunitPlanninggroup",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementBusinessunitPlanninggroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementBusinessunitPlanninggroupNoContent), nil

}

/*
DeleteWorkforcemanagementBusinessunitSchedulingRun cancels a scheduling run
*/
func (a *Client) DeleteWorkforcemanagementBusinessunitSchedulingRun(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitSchedulingRunParams) (*DeleteWorkforcemanagementBusinessunitSchedulingRunNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementBusinessunitSchedulingRun",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementBusinessunitSchedulingRunReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementBusinessunitSchedulingRunNoContent), nil

}

/*
DeleteWorkforcemanagementBusinessunitServicegoaltemplate deletes a service goal template
*/
func (a *Client) DeleteWorkforcemanagementBusinessunitServicegoaltemplate(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitServicegoaltemplateParams) (*DeleteWorkforcemanagementBusinessunitServicegoaltemplateNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementBusinessunitServicegoaltemplate",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementBusinessunitServicegoaltemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementBusinessunitServicegoaltemplateNoContent), nil

}

/*
DeleteWorkforcemanagementBusinessunitWeekSchedule deletes a schedule
*/
func (a *Client) DeleteWorkforcemanagementBusinessunitWeekSchedule(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitWeekScheduleParams) (*DeleteWorkforcemanagementBusinessunitWeekScheduleOK, *DeleteWorkforcemanagementBusinessunitWeekScheduleAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementBusinessunitWeekSchedule",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementBusinessunitWeekScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteWorkforcemanagementBusinessunitWeekScheduleOK:
		return value, nil, nil
	case *DeleteWorkforcemanagementBusinessunitWeekScheduleAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteWorkforcemanagementBusinessunitWeekShorttermforecast deletes a short term forecast

Must not be tied to any schedules
*/
func (a *Client) DeleteWorkforcemanagementBusinessunitWeekShorttermforecast(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitWeekShorttermforecastParams) (*DeleteWorkforcemanagementBusinessunitWeekShorttermforecastNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementBusinessunitWeekShorttermforecast",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementBusinessunitWeekShorttermforecastReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementBusinessunitWeekShorttermforecastNoContent), nil

}

/*
DeleteWorkforcemanagementCalendarURLIcs disables generated calendar link for the current user
*/
func (a *Client) DeleteWorkforcemanagementCalendarURLIcs(ctx context.Context, params *DeleteWorkforcemanagementCalendarURLIcsParams) (*DeleteWorkforcemanagementCalendarURLIcsNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementCalendarUrlIcs",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/calendar/url/ics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementCalendarURLIcsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementCalendarURLIcsNoContent), nil

}

/*
DeleteWorkforcemanagementManagementunit deletes management unit
*/
func (a *Client) DeleteWorkforcemanagementManagementunit(ctx context.Context, params *DeleteWorkforcemanagementManagementunitParams) (*DeleteWorkforcemanagementManagementunitNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementManagementunit",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementManagementunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementManagementunitNoContent), nil

}

/*
DeleteWorkforcemanagementManagementunitWorkplan deletes a work plan
*/
func (a *Client) DeleteWorkforcemanagementManagementunitWorkplan(ctx context.Context, params *DeleteWorkforcemanagementManagementunitWorkplanParams) (*DeleteWorkforcemanagementManagementunitWorkplanNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementManagementunitWorkplan",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementManagementunitWorkplanReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementManagementunitWorkplanNoContent), nil

}

/*
DeleteWorkforcemanagementManagementunitWorkplanrotation deletes a work plan rotation
*/
func (a *Client) DeleteWorkforcemanagementManagementunitWorkplanrotation(ctx context.Context, params *DeleteWorkforcemanagementManagementunitWorkplanrotationParams) (*DeleteWorkforcemanagementManagementunitWorkplanrotationNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementManagementunitWorkplanrotation",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementManagementunitWorkplanrotationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementManagementunitWorkplanrotationNoContent), nil

}

/*
GetWorkforcemanagementAdherence gets a list of user schedule adherence records for the requested users
*/
func (a *Client) GetWorkforcemanagementAdherence(ctx context.Context, params *GetWorkforcemanagementAdherenceParams) (*GetWorkforcemanagementAdherenceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementAdherence",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/adherence",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementAdherenceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementAdherenceOK), nil

}

/*
GetWorkforcemanagementAdhocmodelingjob gets status of the modeling job
*/
func (a *Client) GetWorkforcemanagementAdhocmodelingjob(ctx context.Context, params *GetWorkforcemanagementAdhocmodelingjobParams) (*GetWorkforcemanagementAdhocmodelingjobOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementAdhocmodelingjob",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/adhocmodelingjobs/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementAdhocmodelingjobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementAdhocmodelingjobOK), nil

}

/*
GetWorkforcemanagementAgentManagementunit gets the management unit to which the agent belongs
*/
func (a *Client) GetWorkforcemanagementAgentManagementunit(ctx context.Context, params *GetWorkforcemanagementAgentManagementunitParams) (*GetWorkforcemanagementAgentManagementunitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementAgentManagementunit",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/agents/{agentId}/managementunit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementAgentManagementunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementAgentManagementunitOK), nil

}

/*
GetWorkforcemanagementAgentsMeManagementunit gets the management unit to which the currently logged in agent belongs
*/
func (a *Client) GetWorkforcemanagementAgentsMeManagementunit(ctx context.Context, params *GetWorkforcemanagementAgentsMeManagementunitParams) (*GetWorkforcemanagementAgentsMeManagementunitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementAgentsMeManagementunit",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/agents/me/managementunit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementAgentsMeManagementunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementAgentsMeManagementunitOK), nil

}

/*
GetWorkforcemanagementBusinessunit gets business unit

Expanding "settings" will retrieve all settings.  All other expands will retrieve only the requested settings field(s).
*/
func (a *Client) GetWorkforcemanagementBusinessunit(ctx context.Context, params *GetWorkforcemanagementBusinessunitParams) (*GetWorkforcemanagementBusinessunitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunit",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitOK), nil

}

/*
GetWorkforcemanagementBusinessunitActivitycode gets an activity code
*/
func (a *Client) GetWorkforcemanagementBusinessunitActivitycode(ctx context.Context, params *GetWorkforcemanagementBusinessunitActivitycodeParams) (*GetWorkforcemanagementBusinessunitActivitycodeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitActivitycode",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitActivitycodeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitActivitycodeOK), nil

}

/*
GetWorkforcemanagementBusinessunitActivitycodes gets activity codes
*/
func (a *Client) GetWorkforcemanagementBusinessunitActivitycodes(ctx context.Context, params *GetWorkforcemanagementBusinessunitActivitycodesParams) (*GetWorkforcemanagementBusinessunitActivitycodesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitActivitycodes",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitActivitycodesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitActivitycodesOK), nil

}

/*
GetWorkforcemanagementBusinessunitIntradayPlanninggroups gets intraday planning groups for the given date
*/
func (a *Client) GetWorkforcemanagementBusinessunitIntradayPlanninggroups(ctx context.Context, params *GetWorkforcemanagementBusinessunitIntradayPlanninggroupsParams) (*GetWorkforcemanagementBusinessunitIntradayPlanninggroupsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitIntradayPlanninggroups",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday/planninggroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitIntradayPlanninggroupsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitIntradayPlanninggroupsOK), nil

}

/*
GetWorkforcemanagementBusinessunitManagementunits gets all authorized management units in the business unit
*/
func (a *Client) GetWorkforcemanagementBusinessunitManagementunits(ctx context.Context, params *GetWorkforcemanagementBusinessunitManagementunitsParams) (*GetWorkforcemanagementBusinessunitManagementunitsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitManagementunits",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/managementunits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitManagementunitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitManagementunitsOK), nil

}

/*
GetWorkforcemanagementBusinessunitPlanninggroup gets a planning group
*/
func (a *Client) GetWorkforcemanagementBusinessunitPlanninggroup(ctx context.Context, params *GetWorkforcemanagementBusinessunitPlanninggroupParams) (*GetWorkforcemanagementBusinessunitPlanninggroupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitPlanninggroup",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitPlanninggroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitPlanninggroupOK), nil

}

/*
GetWorkforcemanagementBusinessunitPlanninggroups gets list of planning groups
*/
func (a *Client) GetWorkforcemanagementBusinessunitPlanninggroups(ctx context.Context, params *GetWorkforcemanagementBusinessunitPlanninggroupsParams) (*GetWorkforcemanagementBusinessunitPlanninggroupsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitPlanninggroups",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitPlanninggroupsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitPlanninggroupsOK), nil

}

/*
GetWorkforcemanagementBusinessunitSchedulingRun gets a scheduling run
*/
func (a *Client) GetWorkforcemanagementBusinessunitSchedulingRun(ctx context.Context, params *GetWorkforcemanagementBusinessunitSchedulingRunParams) (*GetWorkforcemanagementBusinessunitSchedulingRunOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitSchedulingRun",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitSchedulingRunReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitSchedulingRunOK), nil

}

/*
GetWorkforcemanagementBusinessunitSchedulingRunResult gets the result of a rescheduling operation
*/
func (a *Client) GetWorkforcemanagementBusinessunitSchedulingRunResult(ctx context.Context, params *GetWorkforcemanagementBusinessunitSchedulingRunResultParams) (*GetWorkforcemanagementBusinessunitSchedulingRunResultOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitSchedulingRunResult",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}/result",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitSchedulingRunResultReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitSchedulingRunResultOK), nil

}

/*
GetWorkforcemanagementBusinessunitSchedulingRuns gets the list of scheduling runs
*/
func (a *Client) GetWorkforcemanagementBusinessunitSchedulingRuns(ctx context.Context, params *GetWorkforcemanagementBusinessunitSchedulingRunsParams) (*GetWorkforcemanagementBusinessunitSchedulingRunsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitSchedulingRuns",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitSchedulingRunsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitSchedulingRunsOK), nil

}

/*
GetWorkforcemanagementBusinessunitServicegoaltemplate gets a service goal template
*/
func (a *Client) GetWorkforcemanagementBusinessunitServicegoaltemplate(ctx context.Context, params *GetWorkforcemanagementBusinessunitServicegoaltemplateParams) (*GetWorkforcemanagementBusinessunitServicegoaltemplateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitServicegoaltemplate",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitServicegoaltemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitServicegoaltemplateOK), nil

}

/*
GetWorkforcemanagementBusinessunitServicegoaltemplates gets list of service goal templates
*/
func (a *Client) GetWorkforcemanagementBusinessunitServicegoaltemplates(ctx context.Context, params *GetWorkforcemanagementBusinessunitServicegoaltemplatesParams) (*GetWorkforcemanagementBusinessunitServicegoaltemplatesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitServicegoaltemplates",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitServicegoaltemplatesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitServicegoaltemplatesOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekSchedule gets the metadata for the schedule describing which management units and agents are in the schedule schedule data can then be loaded with the query route
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekSchedule(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleParams) (*GetWorkforcemanagementBusinessunitWeekScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekSchedule",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekScheduleOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekScheduleGenerationresults gets the generation results for a generated schedule
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekScheduleGenerationresults(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleGenerationresultsParams) (*GetWorkforcemanagementBusinessunitWeekScheduleGenerationresultsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekScheduleGenerationresults",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/generationresults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekScheduleGenerationresultsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekScheduleGenerationresultsOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast gets the headcount forecast by planning group for the schedule
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastParams) (*GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/headcountforecast",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgent loads agent s schedule history
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgent(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgentParams) (*GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/history/agents/{agentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgentOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekSchedules gets the list of week schedules for the specified week

Use "recent" (without quotes) for the `weekId` path parameter to fetch all forecasts for +/- 26 weeks from the current date. Response will include any schedule which spans the specified week
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekSchedules(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekSchedulesParams) (*GetWorkforcemanagementBusinessunitWeekSchedulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekSchedules",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekSchedulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekSchedulesOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekShorttermforecast gets a short term forecast
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekShorttermforecast(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekShorttermforecast",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekShorttermforecastReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekShorttermforecastOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekShorttermforecastData gets the result of a short term forecast calculation

Includes modifications unless you pass the doNotApplyModifications query parameter
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekShorttermforecastData(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastDataParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastDataOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekShorttermforecastData",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekShorttermforecastDataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekShorttermforecastDataOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults gets the forecast generation results
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/generationresults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata gets the result of a long term forecast calculation

Includes modifications unless you pass the doNotApplyModifications query parameter
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdataParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdataOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/longtermforecastdata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdataOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups gets the forecast planning group snapshot
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/planninggroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekShorttermforecasts gets short term forecasts

Use "recent" (without quotes) for the `weekDateId` path parameter to fetch all forecasts for +/- 26 weeks from the current date. Response will include any forecast which spans the specified week
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekShorttermforecasts(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastsParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekShorttermforecasts",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekShorttermforecastsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekShorttermforecastsOK), nil

}

/*
GetWorkforcemanagementBusinessunits gets business units
*/
func (a *Client) GetWorkforcemanagementBusinessunits(ctx context.Context, params *GetWorkforcemanagementBusinessunitsParams) (*GetWorkforcemanagementBusinessunitsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunits",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitsOK), nil

}

/*
GetWorkforcemanagementBusinessunitsDivisionviews gets business units across divisions
*/
func (a *Client) GetWorkforcemanagementBusinessunitsDivisionviews(ctx context.Context, params *GetWorkforcemanagementBusinessunitsDivisionviewsParams) (*GetWorkforcemanagementBusinessunitsDivisionviewsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitsDivisionviews",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/divisionviews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitsDivisionviewsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitsDivisionviewsOK), nil

}

/*
GetWorkforcemanagementCalendarDataIcs gets ics formatted calendar based on shareable link
*/
func (a *Client) GetWorkforcemanagementCalendarDataIcs(ctx context.Context, params *GetWorkforcemanagementCalendarDataIcsParams) (*GetWorkforcemanagementCalendarDataIcsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementCalendarDataIcs",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/calendar/data/ics",
		ProducesMediaTypes: []string{"text/calendar"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementCalendarDataIcsReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementCalendarDataIcsOK), nil

}

/*
GetWorkforcemanagementCalendarURLIcs gets existing calendar link for the current user
*/
func (a *Client) GetWorkforcemanagementCalendarURLIcs(ctx context.Context, params *GetWorkforcemanagementCalendarURLIcsParams) (*GetWorkforcemanagementCalendarURLIcsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementCalendarUrlIcs",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/calendar/url/ics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementCalendarURLIcsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementCalendarURLIcsOK), nil

}

/*
GetWorkforcemanagementHistoricaldataDeletejob retrieves delete job status for historical data imports of the organization
*/
func (a *Client) GetWorkforcemanagementHistoricaldataDeletejob(ctx context.Context, params *GetWorkforcemanagementHistoricaldataDeletejobParams) (*GetWorkforcemanagementHistoricaldataDeletejobOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementHistoricaldataDeletejob",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/historicaldata/deletejob",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementHistoricaldataDeletejobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementHistoricaldataDeletejobOK), nil

}

/*
GetWorkforcemanagementHistoricaldataImportstatus retrieves status of the historical data imports of the organization
*/
func (a *Client) GetWorkforcemanagementHistoricaldataImportstatus(ctx context.Context, params *GetWorkforcemanagementHistoricaldataImportstatusParams) (*GetWorkforcemanagementHistoricaldataImportstatusOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementHistoricaldataImportstatus",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/historicaldata/importstatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementHistoricaldataImportstatusReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementHistoricaldataImportstatusOK), nil

}

/*
GetWorkforcemanagementManagementunit gets management unit

settings.shortTermForecasting is deprecated and now lives on the business unit
*/
func (a *Client) GetWorkforcemanagementManagementunit(ctx context.Context, params *GetWorkforcemanagementManagementunitParams) (*GetWorkforcemanagementManagementunitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunit",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitOK), nil

}

/*
GetWorkforcemanagementManagementunitActivitycodes gets activity codes
*/
func (a *Client) GetWorkforcemanagementManagementunitActivitycodes(ctx context.Context, params *GetWorkforcemanagementManagementunitActivitycodesParams) (*GetWorkforcemanagementManagementunitActivitycodesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitActivitycodes",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/activitycodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitActivitycodesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitActivitycodesOK), nil

}

/*
GetWorkforcemanagementManagementunitAdherence gets a list of user schedule adherence records for the requested management unit
*/
func (a *Client) GetWorkforcemanagementManagementunitAdherence(ctx context.Context, params *GetWorkforcemanagementManagementunitAdherenceParams) (*GetWorkforcemanagementManagementunitAdherenceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitAdherence",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/adherence",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitAdherenceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitAdherenceOK), nil

}

/*
GetWorkforcemanagementManagementunitAgent gets data for agent in the management unit
*/
func (a *Client) GetWorkforcemanagementManagementunitAgent(ctx context.Context, params *GetWorkforcemanagementManagementunitAgentParams) (*GetWorkforcemanagementManagementunitAgentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitAgent",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitAgentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitAgentOK), nil

}

/*
GetWorkforcemanagementManagementunitAgentShifttrades gets all the shift trades for a given agent
*/
func (a *Client) GetWorkforcemanagementManagementunitAgentShifttrades(ctx context.Context, params *GetWorkforcemanagementManagementunitAgentShifttradesParams) (*GetWorkforcemanagementManagementunitAgentShifttradesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitAgentShifttrades",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}/shifttrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitAgentShifttradesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitAgentShifttradesOK), nil

}

/*
GetWorkforcemanagementManagementunitShifttradesMatched gets a summary of all shift trades in the matched state
*/
func (a *Client) GetWorkforcemanagementManagementunitShifttradesMatched(ctx context.Context, params *GetWorkforcemanagementManagementunitShifttradesMatchedParams) (*GetWorkforcemanagementManagementunitShifttradesMatchedOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitShifttradesMatched",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/matched",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitShifttradesMatchedReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitShifttradesMatchedOK), nil

}

/*
GetWorkforcemanagementManagementunitShifttradesUsers gets list of users available for whom you can send direct shift trade requests
*/
func (a *Client) GetWorkforcemanagementManagementunitShifttradesUsers(ctx context.Context, params *GetWorkforcemanagementManagementunitShifttradesUsersParams) (*GetWorkforcemanagementManagementunitShifttradesUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitShifttradesUsers",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitShifttradesUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitShifttradesUsersOK), nil

}

/*
GetWorkforcemanagementManagementunitUserTimeoffrequest gets a time off request
*/
func (a *Client) GetWorkforcemanagementManagementunitUserTimeoffrequest(ctx context.Context, params *GetWorkforcemanagementManagementunitUserTimeoffrequestParams) (*GetWorkforcemanagementManagementunitUserTimeoffrequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitUserTimeoffrequest",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitUserTimeoffrequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitUserTimeoffrequestOK), nil

}

/*
GetWorkforcemanagementManagementunitUserTimeoffrequests gets a list of time off requests for a given user
*/
func (a *Client) GetWorkforcemanagementManagementunitUserTimeoffrequests(ctx context.Context, params *GetWorkforcemanagementManagementunitUserTimeoffrequestsParams) (*GetWorkforcemanagementManagementunitUserTimeoffrequestsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitUserTimeoffrequests",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitUserTimeoffrequestsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitUserTimeoffrequestsOK), nil

}

/*
GetWorkforcemanagementManagementunitUsers gets users in the management unit
*/
func (a *Client) GetWorkforcemanagementManagementunitUsers(ctx context.Context, params *GetWorkforcemanagementManagementunitUsersParams) (*GetWorkforcemanagementManagementunitUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitUsers",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitUsersOK), nil

}

/*
GetWorkforcemanagementManagementunitWeekSchedule deprecateds use the equivalent business unit resource instead get a week schedule
*/
func (a *Client) GetWorkforcemanagementManagementunitWeekSchedule(ctx context.Context, params *GetWorkforcemanagementManagementunitWeekScheduleParams) (*GetWorkforcemanagementManagementunitWeekScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitWeekSchedule",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitWeekScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitWeekScheduleOK), nil

}

/*
GetWorkforcemanagementManagementunitWeekSchedules deprecateds use the equivalent business unit resource instead get the list of schedules in a week in management unit
*/
func (a *Client) GetWorkforcemanagementManagementunitWeekSchedules(ctx context.Context, params *GetWorkforcemanagementManagementunitWeekSchedulesParams) (*GetWorkforcemanagementManagementunitWeekSchedulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitWeekSchedules",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitWeekSchedulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitWeekSchedulesOK), nil

}

/*
GetWorkforcemanagementManagementunitWeekShifttrades gets all the shift trades for a given week
*/
func (a *Client) GetWorkforcemanagementManagementunitWeekShifttrades(ctx context.Context, params *GetWorkforcemanagementManagementunitWeekShifttradesParams) (*GetWorkforcemanagementManagementunitWeekShifttradesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitWeekShifttrades",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitWeekShifttradesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitWeekShifttradesOK), nil

}

/*
GetWorkforcemanagementManagementunitWorkplan gets a work plan
*/
func (a *Client) GetWorkforcemanagementManagementunitWorkplan(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplanParams) (*GetWorkforcemanagementManagementunitWorkplanOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitWorkplan",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitWorkplanReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitWorkplanOK), nil

}

/*
GetWorkforcemanagementManagementunitWorkplanrotation gets a work plan rotation
*/
func (a *Client) GetWorkforcemanagementManagementunitWorkplanrotation(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplanrotationParams) (*GetWorkforcemanagementManagementunitWorkplanrotationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitWorkplanrotation",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitWorkplanrotationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitWorkplanrotationOK), nil

}

/*
GetWorkforcemanagementManagementunitWorkplanrotations gets work plan rotations
*/
func (a *Client) GetWorkforcemanagementManagementunitWorkplanrotations(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplanrotationsParams) (*GetWorkforcemanagementManagementunitWorkplanrotationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitWorkplanrotations",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitWorkplanrotationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitWorkplanrotationsOK), nil

}

/*
GetWorkforcemanagementManagementunitWorkplans gets work plans

"expand=details" is deprecated
*/
func (a *Client) GetWorkforcemanagementManagementunitWorkplans(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplansParams) (*GetWorkforcemanagementManagementunitWorkplansOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitWorkplans",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitWorkplansReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitWorkplansOK), nil

}

/*
GetWorkforcemanagementManagementunits gets management units
*/
func (a *Client) GetWorkforcemanagementManagementunits(ctx context.Context, params *GetWorkforcemanagementManagementunitsParams) (*GetWorkforcemanagementManagementunitsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunits",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitsOK), nil

}

/*
GetWorkforcemanagementManagementunitsDivisionviews gets management units across divisions
*/
func (a *Client) GetWorkforcemanagementManagementunitsDivisionviews(ctx context.Context, params *GetWorkforcemanagementManagementunitsDivisionviewsParams) (*GetWorkforcemanagementManagementunitsDivisionviewsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitsDivisionviews",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/divisionviews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitsDivisionviewsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitsDivisionviewsOK), nil

}

/*
GetWorkforcemanagementNotifications gets a list of notifications for the current user
*/
func (a *Client) GetWorkforcemanagementNotifications(ctx context.Context, params *GetWorkforcemanagementNotificationsParams) (*GetWorkforcemanagementNotificationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementNotifications",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementNotificationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementNotificationsOK), nil

}

/*
GetWorkforcemanagementSchedulingjob gets status of the scheduling job
*/
func (a *Client) GetWorkforcemanagementSchedulingjob(ctx context.Context, params *GetWorkforcemanagementSchedulingjobParams) (*GetWorkforcemanagementSchedulingjobOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementSchedulingjob",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/schedulingjobs/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementSchedulingjobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementSchedulingjobOK), nil

}

/*
GetWorkforcemanagementShifttrades gets all of my shift trades
*/
func (a *Client) GetWorkforcemanagementShifttrades(ctx context.Context, params *GetWorkforcemanagementShifttradesParams) (*GetWorkforcemanagementShifttradesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementShifttrades",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/shifttrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementShifttradesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementShifttradesOK), nil

}

/*
GetWorkforcemanagementTimeoffrequest gets a time off request for the current user
*/
func (a *Client) GetWorkforcemanagementTimeoffrequest(ctx context.Context, params *GetWorkforcemanagementTimeoffrequestParams) (*GetWorkforcemanagementTimeoffrequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementTimeoffrequest",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementTimeoffrequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementTimeoffrequestOK), nil

}

/*
GetWorkforcemanagementTimeoffrequests gets a list of time off requests for the current user
*/
func (a *Client) GetWorkforcemanagementTimeoffrequests(ctx context.Context, params *GetWorkforcemanagementTimeoffrequestsParams) (*GetWorkforcemanagementTimeoffrequestsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementTimeoffrequests",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/timeoffrequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementTimeoffrequestsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementTimeoffrequestsOK), nil

}

/*
PatchWorkforcemanagementBusinessunit updates business unit
*/
func (a *Client) PatchWorkforcemanagementBusinessunit(ctx context.Context, params *PatchWorkforcemanagementBusinessunitParams) (*PatchWorkforcemanagementBusinessunitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementBusinessunit",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementBusinessunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementBusinessunitOK), nil

}

/*
PatchWorkforcemanagementBusinessunitActivitycode updates an activity code
*/
func (a *Client) PatchWorkforcemanagementBusinessunitActivitycode(ctx context.Context, params *PatchWorkforcemanagementBusinessunitActivitycodeParams) (*PatchWorkforcemanagementBusinessunitActivitycodeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementBusinessunitActivitycode",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementBusinessunitActivitycodeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementBusinessunitActivitycodeOK), nil

}

/*
PatchWorkforcemanagementBusinessunitPlanninggroup updates the planning group
*/
func (a *Client) PatchWorkforcemanagementBusinessunitPlanninggroup(ctx context.Context, params *PatchWorkforcemanagementBusinessunitPlanninggroupParams) (*PatchWorkforcemanagementBusinessunitPlanninggroupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementBusinessunitPlanninggroup",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementBusinessunitPlanninggroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementBusinessunitPlanninggroupOK), nil

}

/*
PatchWorkforcemanagementBusinessunitSchedulingRun marks a schedule run as applied
*/
func (a *Client) PatchWorkforcemanagementBusinessunitSchedulingRun(ctx context.Context, params *PatchWorkforcemanagementBusinessunitSchedulingRunParams) (*PatchWorkforcemanagementBusinessunitSchedulingRunNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementBusinessunitSchedulingRun",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementBusinessunitSchedulingRunReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementBusinessunitSchedulingRunNoContent), nil

}

/*
PatchWorkforcemanagementBusinessunitServicegoaltemplate updates a service goal template
*/
func (a *Client) PatchWorkforcemanagementBusinessunitServicegoaltemplate(ctx context.Context, params *PatchWorkforcemanagementBusinessunitServicegoaltemplateParams) (*PatchWorkforcemanagementBusinessunitServicegoaltemplateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementBusinessunitServicegoaltemplate",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementBusinessunitServicegoaltemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementBusinessunitServicegoaltemplateOK), nil

}

/*
PatchWorkforcemanagementManagementunit updates the requested management unit
*/
func (a *Client) PatchWorkforcemanagementManagementunit(ctx context.Context, params *PatchWorkforcemanagementManagementunitParams) (*PatchWorkforcemanagementManagementunitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementManagementunit",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementManagementunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementManagementunitOK), nil

}

/*
PatchWorkforcemanagementManagementunitUserTimeoffrequest updates a time off request
*/
func (a *Client) PatchWorkforcemanagementManagementunitUserTimeoffrequest(ctx context.Context, params *PatchWorkforcemanagementManagementunitUserTimeoffrequestParams) (*PatchWorkforcemanagementManagementunitUserTimeoffrequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementManagementunitUserTimeoffrequest",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementManagementunitUserTimeoffrequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementManagementunitUserTimeoffrequestOK), nil

}

/*
PatchWorkforcemanagementManagementunitWeekShifttrade updates a shift trade this route can only be called by the initiating agent
*/
func (a *Client) PatchWorkforcemanagementManagementunitWeekShifttrade(ctx context.Context, params *PatchWorkforcemanagementManagementunitWeekShifttradeParams) (*PatchWorkforcemanagementManagementunitWeekShifttradeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementManagementunitWeekShifttrade",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementManagementunitWeekShifttradeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementManagementunitWeekShifttradeOK), nil

}

/*
PatchWorkforcemanagementManagementunitWorkplan updates a work plan
*/
func (a *Client) PatchWorkforcemanagementManagementunitWorkplan(ctx context.Context, params *PatchWorkforcemanagementManagementunitWorkplanParams) (*PatchWorkforcemanagementManagementunitWorkplanOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementManagementunitWorkplan",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementManagementunitWorkplanReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementManagementunitWorkplanOK), nil

}

/*
PatchWorkforcemanagementManagementunitWorkplanrotation updates a work plan rotation
*/
func (a *Client) PatchWorkforcemanagementManagementunitWorkplanrotation(ctx context.Context, params *PatchWorkforcemanagementManagementunitWorkplanrotationParams) (*PatchWorkforcemanagementManagementunitWorkplanrotationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementManagementunitWorkplanrotation",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementManagementunitWorkplanrotationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementManagementunitWorkplanrotationOK), nil

}

/*
PatchWorkforcemanagementTimeoffrequest updates a time off request for the current user
*/
func (a *Client) PatchWorkforcemanagementTimeoffrequest(ctx context.Context, params *PatchWorkforcemanagementTimeoffrequestParams) (*PatchWorkforcemanagementTimeoffrequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementTimeoffrequest",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementTimeoffrequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementTimeoffrequestOK), nil

}

/*
PostWorkforcemanagementAdherenceHistorical requests a historical adherence report for users across management units
*/
func (a *Client) PostWorkforcemanagementAdherenceHistorical(ctx context.Context, params *PostWorkforcemanagementAdherenceHistoricalParams) (*PostWorkforcemanagementAdherenceHistoricalAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementAdherenceHistorical",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/adherence/historical",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementAdherenceHistoricalReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementAdherenceHistoricalAccepted), nil

}

/*
PostWorkforcemanagementAgentschedulesMine gets published schedule for the current user
*/
func (a *Client) PostWorkforcemanagementAgentschedulesMine(ctx context.Context, params *PostWorkforcemanagementAgentschedulesMineParams) (*PostWorkforcemanagementAgentschedulesMineOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementAgentschedulesMine",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/agentschedules/mine",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementAgentschedulesMineReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementAgentschedulesMineOK), nil

}

/*
PostWorkforcemanagementBusinessunitActivitycodes creates a new activity code
*/
func (a *Client) PostWorkforcemanagementBusinessunitActivitycodes(ctx context.Context, params *PostWorkforcemanagementBusinessunitActivitycodesParams) (*PostWorkforcemanagementBusinessunitActivitycodesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitActivitycodes",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitActivitycodesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementBusinessunitActivitycodesOK), nil

}

/*
PostWorkforcemanagementBusinessunitAgentschedulesSearch searches published schedules
*/
func (a *Client) PostWorkforcemanagementBusinessunitAgentschedulesSearch(ctx context.Context, params *PostWorkforcemanagementBusinessunitAgentschedulesSearchParams) (*PostWorkforcemanagementBusinessunitAgentschedulesSearchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitAgentschedulesSearch",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/agentschedules/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitAgentschedulesSearchReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementBusinessunitAgentschedulesSearchOK), nil

}

/*
PostWorkforcemanagementBusinessunitIntraday gets intraday data for the given date for the requested planning group ids
*/
func (a *Client) PostWorkforcemanagementBusinessunitIntraday(ctx context.Context, params *PostWorkforcemanagementBusinessunitIntradayParams) (*PostWorkforcemanagementBusinessunitIntradayOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitIntraday",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitIntradayReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementBusinessunitIntradayOK), nil

}

/*
PostWorkforcemanagementBusinessunitPlanninggroups adds a new planning group
*/
func (a *Client) PostWorkforcemanagementBusinessunitPlanninggroups(ctx context.Context, params *PostWorkforcemanagementBusinessunitPlanninggroupsParams) (*PostWorkforcemanagementBusinessunitPlanninggroupsOK, *PostWorkforcemanagementBusinessunitPlanninggroupsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitPlanninggroups",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitPlanninggroupsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitPlanninggroupsOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitPlanninggroupsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitServicegoaltemplates adds a new service goal template
*/
func (a *Client) PostWorkforcemanagementBusinessunitServicegoaltemplates(ctx context.Context, params *PostWorkforcemanagementBusinessunitServicegoaltemplatesParams) (*PostWorkforcemanagementBusinessunitServicegoaltemplatesOK, *PostWorkforcemanagementBusinessunitServicegoaltemplatesCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitServicegoaltemplates",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitServicegoaltemplatesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitServicegoaltemplatesOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitServicegoaltemplatesCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery loads agent schedule data from the schedule used in combination with the metadata route
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryParams) (*PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/agentschedules/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryOK), nil

}

/*
PostWorkforcemanagementBusinessunitWeekScheduleCopy copies a schedule
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekScheduleCopy(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleCopyParams) (*PostWorkforcemanagementBusinessunitWeekScheduleCopyOK, *PostWorkforcemanagementBusinessunitWeekScheduleCopyCreated, *PostWorkforcemanagementBusinessunitWeekScheduleCopyAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekScheduleCopy",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekScheduleCopyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekScheduleCopyOK:
		return value, nil, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekScheduleCopyCreated:
		return nil, value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekScheduleCopyAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekScheduleReschedule starts a rescheduling run
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekScheduleReschedule(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleRescheduleParams) (*PostWorkforcemanagementBusinessunitWeekScheduleRescheduleOK, *PostWorkforcemanagementBusinessunitWeekScheduleRescheduleAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekScheduleReschedule",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/reschedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekScheduleRescheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekScheduleRescheduleOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekScheduleRescheduleAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekSchedules creates a blank schedule
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekSchedules(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekSchedulesParams) (*PostWorkforcemanagementBusinessunitWeekSchedulesOK, *PostWorkforcemanagementBusinessunitWeekSchedulesCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekSchedules",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekSchedulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekSchedulesOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekSchedulesCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekSchedulesGenerate generates a schedule
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekSchedulesGenerate(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekSchedulesGenerateParams) (*PostWorkforcemanagementBusinessunitWeekSchedulesGenerateOK, *PostWorkforcemanagementBusinessunitWeekSchedulesGenerateAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekSchedulesGenerate",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/generate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekSchedulesGenerateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekSchedulesGenerateOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekSchedulesGenerateAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekShorttermforecastCopy copies a short term forecast
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekShorttermforecastCopy(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyParams) (*PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyOK, *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyCreated, *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekShorttermforecastCopy",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyOK:
		return value, nil, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyCreated:
		return nil, value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate generates a short term forecast
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateParams) (*PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateOK, *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateCreated, *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/generate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateOK:
		return value, nil, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateCreated:
		return nil, value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunits adds a new business unit

It may take a minute or two for a new business unit to be available for api operations
*/
func (a *Client) PostWorkforcemanagementBusinessunits(ctx context.Context, params *PostWorkforcemanagementBusinessunitsParams) (*PostWorkforcemanagementBusinessunitsOK, *PostWorkforcemanagementBusinessunitsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunits",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitsOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementCalendarURLIcs creates a newly generated calendar link for the current user if the current user has previously generated one the generated link will be returned
*/
func (a *Client) PostWorkforcemanagementCalendarURLIcs(ctx context.Context, params *PostWorkforcemanagementCalendarURLIcsParams) (*PostWorkforcemanagementCalendarURLIcsOK, *PostWorkforcemanagementCalendarURLIcsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementCalendarUrlIcs",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/calendar/url/ics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementCalendarURLIcsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementCalendarURLIcsOK:
		return value, nil, nil
	case *PostWorkforcemanagementCalendarURLIcsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementHistoricaldataDeletejob deletes the entries of the historical data imports in the organization
*/
func (a *Client) PostWorkforcemanagementHistoricaldataDeletejob(ctx context.Context, params *PostWorkforcemanagementHistoricaldataDeletejobParams) (*PostWorkforcemanagementHistoricaldataDeletejobAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementHistoricaldataDeletejob",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/historicaldata/deletejob",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementHistoricaldataDeletejobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementHistoricaldataDeletejobAccepted), nil

}

/*
PostWorkforcemanagementHistoricaldataValidate triggers validation process for historical import
*/
func (a *Client) PostWorkforcemanagementHistoricaldataValidate(ctx context.Context, params *PostWorkforcemanagementHistoricaldataValidateParams) (*PostWorkforcemanagementHistoricaldataValidateAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementHistoricaldataValidate",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/historicaldata/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementHistoricaldataValidateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementHistoricaldataValidateAccepted), nil

}

/*
PostWorkforcemanagementManagementunitAgentschedulesSearch queries published schedules for given given time range for set of users
*/
func (a *Client) PostWorkforcemanagementManagementunitAgentschedulesSearch(ctx context.Context, params *PostWorkforcemanagementManagementunitAgentschedulesSearchParams) (*PostWorkforcemanagementManagementunitAgentschedulesSearchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitAgentschedulesSearch",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agentschedules/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitAgentschedulesSearchReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitAgentschedulesSearchOK), nil

}

/*
PostWorkforcemanagementManagementunitHistoricaladherencequery requests a historical adherence report

The maximum supported range for historical adherence queries is 31 days, or 7 days with includeExceptions = true
*/
func (a *Client) PostWorkforcemanagementManagementunitHistoricaladherencequery(ctx context.Context, params *PostWorkforcemanagementManagementunitHistoricaladherencequeryParams) (*PostWorkforcemanagementManagementunitHistoricaladherencequeryAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitHistoricaladherencequery",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/historicaladherencequery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitHistoricaladherencequeryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitHistoricaladherencequeryAccepted), nil

}

/*
PostWorkforcemanagementManagementunitMove moves the requested management unit to a new business unit

Returns status 200 if the management unit is already in the requested business unit
*/
func (a *Client) PostWorkforcemanagementManagementunitMove(ctx context.Context, params *PostWorkforcemanagementManagementunitMoveParams) (*PostWorkforcemanagementManagementunitMoveOK, *PostWorkforcemanagementManagementunitMoveAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitMove",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitMoveReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementManagementunitMoveOK:
		return value, nil, nil
	case *PostWorkforcemanagementManagementunitMoveAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementManagementunitSchedulesSearch queries published schedules for given given time range for set of users
*/
func (a *Client) PostWorkforcemanagementManagementunitSchedulesSearch(ctx context.Context, params *PostWorkforcemanagementManagementunitSchedulesSearchParams) (*PostWorkforcemanagementManagementunitSchedulesSearchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitSchedulesSearch",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/schedules/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitSchedulesSearchReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitSchedulesSearchOK), nil

}

/*
PostWorkforcemanagementManagementunitTimeoffrequests creates a new time off request
*/
func (a *Client) PostWorkforcemanagementManagementunitTimeoffrequests(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeoffrequestsParams) (*PostWorkforcemanagementManagementunitTimeoffrequestsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitTimeoffrequests",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitTimeoffrequestsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitTimeoffrequestsOK), nil

}

/*
PostWorkforcemanagementManagementunitTimeoffrequestsQuery fetches time off requests matching the conditions specified in the request body

Request body requires one of the following: User ID is specified, statuses == [Pending] or date range to be specified and less than or equal to 33 days.  All other fields are filters
*/
func (a *Client) PostWorkforcemanagementManagementunitTimeoffrequestsQuery(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeoffrequestsQueryParams) (*PostWorkforcemanagementManagementunitTimeoffrequestsQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitTimeoffrequestsQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitTimeoffrequestsQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitTimeoffrequestsQueryOK), nil

}

/*
PostWorkforcemanagementManagementunitWeekShifttradeMatch matches a shift trade this route can only be called by the receiving agent
*/
func (a *Client) PostWorkforcemanagementManagementunitWeekShifttradeMatch(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradeMatchParams) (*PostWorkforcemanagementManagementunitWeekShifttradeMatchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWeekShifttradeMatch",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}/match",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWeekShifttradeMatchReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitWeekShifttradeMatchOK), nil

}

/*
PostWorkforcemanagementManagementunitWeekShifttrades adds a shift trade
*/
func (a *Client) PostWorkforcemanagementManagementunitWeekShifttrades(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradesParams) (*PostWorkforcemanagementManagementunitWeekShifttradesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWeekShifttrades",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWeekShifttradesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitWeekShifttradesOK), nil

}

/*
PostWorkforcemanagementManagementunitWeekShifttradesSearch searches for potential shift trade matches for the current agent
*/
func (a *Client) PostWorkforcemanagementManagementunitWeekShifttradesSearch(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradesSearchParams) (*PostWorkforcemanagementManagementunitWeekShifttradesSearchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWeekShifttradesSearch",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWeekShifttradesSearchReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitWeekShifttradesSearchOK), nil

}

/*
PostWorkforcemanagementManagementunitWeekShifttradesStateBulk updates the state of a batch of shift trades

Admin functionality is not supported with "mine".
*/
func (a *Client) PostWorkforcemanagementManagementunitWeekShifttradesStateBulk(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradesStateBulkParams) (*PostWorkforcemanagementManagementunitWeekShifttradesStateBulkOK, *PostWorkforcemanagementManagementunitWeekShifttradesStateBulkAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWeekShifttradesStateBulk",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/state/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWeekShifttradesStateBulkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementManagementunitWeekShifttradesStateBulkOK:
		return value, nil, nil
	case *PostWorkforcemanagementManagementunitWeekShifttradesStateBulkAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementManagementunitWorkplanCopy creates a copy of work plan
*/
func (a *Client) PostWorkforcemanagementManagementunitWorkplanCopy(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanCopyParams) (*PostWorkforcemanagementManagementunitWorkplanCopyOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWorkplanCopy",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWorkplanCopyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitWorkplanCopyOK), nil

}

/*
PostWorkforcemanagementManagementunitWorkplanValidate validates work plan
*/
func (a *Client) PostWorkforcemanagementManagementunitWorkplanValidate(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanValidateParams) (*PostWorkforcemanagementManagementunitWorkplanValidateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWorkplanValidate",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWorkplanValidateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitWorkplanValidateOK), nil

}

/*
PostWorkforcemanagementManagementunitWorkplanrotationCopy creates a copy of work plan rotation
*/
func (a *Client) PostWorkforcemanagementManagementunitWorkplanrotationCopy(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanrotationCopyParams) (*PostWorkforcemanagementManagementunitWorkplanrotationCopyOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWorkplanrotationCopy",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWorkplanrotationCopyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitWorkplanrotationCopyOK), nil

}

/*
PostWorkforcemanagementManagementunitWorkplanrotations creates a new work plan rotation
*/
func (a *Client) PostWorkforcemanagementManagementunitWorkplanrotations(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanrotationsParams) (*PostWorkforcemanagementManagementunitWorkplanrotationsOK, *PostWorkforcemanagementManagementunitWorkplanrotationsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWorkplanrotations",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWorkplanrotationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementManagementunitWorkplanrotationsOK:
		return value, nil, nil
	case *PostWorkforcemanagementManagementunitWorkplanrotationsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementManagementunitWorkplans creates a new work plan
*/
func (a *Client) PostWorkforcemanagementManagementunitWorkplans(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplansParams) (*PostWorkforcemanagementManagementunitWorkplansOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWorkplans",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWorkplansReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitWorkplansOK), nil

}

/*
PostWorkforcemanagementManagementunits adds a management unit

It may take a minute or two for a new management unit to be available for api operations
*/
func (a *Client) PostWorkforcemanagementManagementunits(ctx context.Context, params *PostWorkforcemanagementManagementunitsParams) (*PostWorkforcemanagementManagementunitsOK, *PostWorkforcemanagementManagementunitsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunits",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementManagementunitsOK:
		return value, nil, nil
	case *PostWorkforcemanagementManagementunitsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementNotificationsUpdate marks a list of notifications as read or unread
*/
func (a *Client) PostWorkforcemanagementNotificationsUpdate(ctx context.Context, params *PostWorkforcemanagementNotificationsUpdateParams) (*PostWorkforcemanagementNotificationsUpdateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementNotificationsUpdate",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/notifications/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementNotificationsUpdateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementNotificationsUpdateOK), nil

}

/*
PostWorkforcemanagementSchedules gets published schedule for the current user
*/
func (a *Client) PostWorkforcemanagementSchedules(ctx context.Context, params *PostWorkforcemanagementSchedulesParams) (*PostWorkforcemanagementSchedulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementSchedules",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementSchedulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementSchedulesOK), nil

}

/*
PostWorkforcemanagementTimeoffrequests creates a time off request for the current user
*/
func (a *Client) PostWorkforcemanagementTimeoffrequests(ctx context.Context, params *PostWorkforcemanagementTimeoffrequestsParams) (*PostWorkforcemanagementTimeoffrequestsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementTimeoffrequests",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/timeoffrequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementTimeoffrequestsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementTimeoffrequestsOK), nil

}

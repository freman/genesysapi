// Code generated by go-swagger; DO NOT EDIT.

package workforce_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the workforce management client
type API interface {
	/*
	   DeleteWorkforcemanagementBusinessunit deletes business unit
	   A business unit cannot be deleted if it contains one or more management units
	*/
	DeleteWorkforcemanagementBusinessunit(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitParams) (*DeleteWorkforcemanagementBusinessunitNoContent, error)
	/*
	   DeleteWorkforcemanagementBusinessunitActivitycode deletes an activity code
	*/
	DeleteWorkforcemanagementBusinessunitActivitycode(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitActivitycodeParams) (*DeleteWorkforcemanagementBusinessunitActivitycodeNoContent, error)
	/*
	   DeleteWorkforcemanagementBusinessunitPlanninggroup deletes the planning group
	*/
	DeleteWorkforcemanagementBusinessunitPlanninggroup(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitPlanninggroupParams) (*DeleteWorkforcemanagementBusinessunitPlanninggroupNoContent, error)
	/*
	   DeleteWorkforcemanagementBusinessunitSchedulingRun cancels a scheduling run
	*/
	DeleteWorkforcemanagementBusinessunitSchedulingRun(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitSchedulingRunParams) (*DeleteWorkforcemanagementBusinessunitSchedulingRunNoContent, error)
	/*
	   DeleteWorkforcemanagementBusinessunitServicegoaltemplate deletes a service goal template
	*/
	DeleteWorkforcemanagementBusinessunitServicegoaltemplate(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitServicegoaltemplateParams) (*DeleteWorkforcemanagementBusinessunitServicegoaltemplateNoContent, error)
	/*
	   DeleteWorkforcemanagementBusinessunitWeekSchedule deletes a schedule
	*/
	DeleteWorkforcemanagementBusinessunitWeekSchedule(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitWeekScheduleParams) (*DeleteWorkforcemanagementBusinessunitWeekScheduleOK, *DeleteWorkforcemanagementBusinessunitWeekScheduleAccepted, error)
	/*
	   DeleteWorkforcemanagementBusinessunitWeekShorttermforecast deletes a short term forecast
	   Must not be tied to any schedules
	*/
	DeleteWorkforcemanagementBusinessunitWeekShorttermforecast(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitWeekShorttermforecastParams) (*DeleteWorkforcemanagementBusinessunitWeekShorttermforecastNoContent, error)
	/*
	   DeleteWorkforcemanagementCalendarURLIcs disables generated calendar link for the current user
	*/
	DeleteWorkforcemanagementCalendarURLIcs(ctx context.Context, params *DeleteWorkforcemanagementCalendarURLIcsParams) (*DeleteWorkforcemanagementCalendarURLIcsNoContent, error)
	/*
	   DeleteWorkforcemanagementManagementunit deletes management unit
	*/
	DeleteWorkforcemanagementManagementunit(ctx context.Context, params *DeleteWorkforcemanagementManagementunitParams) (*DeleteWorkforcemanagementManagementunitNoContent, error)
	/*
	   DeleteWorkforcemanagementManagementunitTimeofflimit deletes a time off limit object
	*/
	DeleteWorkforcemanagementManagementunitTimeofflimit(ctx context.Context, params *DeleteWorkforcemanagementManagementunitTimeofflimitParams) (*DeleteWorkforcemanagementManagementunitTimeofflimitNoContent, error)
	/*
	   DeleteWorkforcemanagementManagementunitTimeoffplan deletes a time off plan
	*/
	DeleteWorkforcemanagementManagementunitTimeoffplan(ctx context.Context, params *DeleteWorkforcemanagementManagementunitTimeoffplanParams) (*DeleteWorkforcemanagementManagementunitTimeoffplanNoContent, error)
	/*
	   DeleteWorkforcemanagementManagementunitWorkplan deletes a work plan
	*/
	DeleteWorkforcemanagementManagementunitWorkplan(ctx context.Context, params *DeleteWorkforcemanagementManagementunitWorkplanParams) (*DeleteWorkforcemanagementManagementunitWorkplanNoContent, error)
	/*
	   DeleteWorkforcemanagementManagementunitWorkplanrotation deletes a work plan rotation
	*/
	DeleteWorkforcemanagementManagementunitWorkplanrotation(ctx context.Context, params *DeleteWorkforcemanagementManagementunitWorkplanrotationParams) (*DeleteWorkforcemanagementManagementunitWorkplanrotationNoContent, error)
	/*
	   GetWorkforcemanagementAdherence gets a list of user schedule adherence records for the requested users
	*/
	GetWorkforcemanagementAdherence(ctx context.Context, params *GetWorkforcemanagementAdherenceParams) (*GetWorkforcemanagementAdherenceOK, error)
	/*
	   GetWorkforcemanagementAdherenceExplanation gets an adherence explanation for the current user
	*/
	GetWorkforcemanagementAdherenceExplanation(ctx context.Context, params *GetWorkforcemanagementAdherenceExplanationParams) (*GetWorkforcemanagementAdherenceExplanationOK, error)
	/*
	   GetWorkforcemanagementAdherenceExplanationsJob queries the status of an adherence explanation operation only the user who started the operation can query the status
	   Job details are only retained if the initial request returned a 202 ACCEPTED response
	*/
	GetWorkforcemanagementAdherenceExplanationsJob(ctx context.Context, params *GetWorkforcemanagementAdherenceExplanationsJobParams) (*GetWorkforcemanagementAdherenceExplanationsJobOK, error)
	/*
	   GetWorkforcemanagementAdherenceHistoricalBulkJob requests to fetch the status of the historical adherence bulk job only the user who started the operation can query the status
	   Job details are only retained if the initial request returned a 202 ACCEPTED response
	*/
	GetWorkforcemanagementAdherenceHistoricalBulkJob(ctx context.Context, params *GetWorkforcemanagementAdherenceHistoricalBulkJobParams) (*GetWorkforcemanagementAdherenceHistoricalBulkJobOK, error)
	/*
	   GetWorkforcemanagementAdherenceHistoricalJob queries the status of a historical adherence request operation only the user who started the operation can query the status
	   Job details are only retained if the initial request returned a 202 ACCEPTED response
	*/
	GetWorkforcemanagementAdherenceHistoricalJob(ctx context.Context, params *GetWorkforcemanagementAdherenceHistoricalJobParams) (*GetWorkforcemanagementAdherenceHistoricalJobOK, error)
	/*
	   GetWorkforcemanagementAdhocmodelingjob gets status of the modeling job
	*/
	GetWorkforcemanagementAdhocmodelingjob(ctx context.Context, params *GetWorkforcemanagementAdhocmodelingjobParams) (*GetWorkforcemanagementAdhocmodelingjobOK, error)
	/*
	   GetWorkforcemanagementAgentAdherenceExplanation gets an adherence explanation
	*/
	GetWorkforcemanagementAgentAdherenceExplanation(ctx context.Context, params *GetWorkforcemanagementAgentAdherenceExplanationParams) (*GetWorkforcemanagementAgentAdherenceExplanationOK, error)
	/*
	   GetWorkforcemanagementAgentManagementunit gets the management unit to which the agent belongs
	*/
	GetWorkforcemanagementAgentManagementunit(ctx context.Context, params *GetWorkforcemanagementAgentManagementunitParams) (*GetWorkforcemanagementAgentManagementunitOK, error)
	/*
	   GetWorkforcemanagementAgentsMeManagementunit gets the management unit to which the currently logged in agent belongs
	*/
	GetWorkforcemanagementAgentsMeManagementunit(ctx context.Context, params *GetWorkforcemanagementAgentsMeManagementunitParams) (*GetWorkforcemanagementAgentsMeManagementunitOK, error)
	/*
	   GetWorkforcemanagementBusinessunit gets business unit
	   Expanding "settings" will retrieve all settings.  All other expands will retrieve only the requested settings field(s).
	*/
	GetWorkforcemanagementBusinessunit(ctx context.Context, params *GetWorkforcemanagementBusinessunitParams) (*GetWorkforcemanagementBusinessunitOK, error)
	/*
	   GetWorkforcemanagementBusinessunitActivitycode gets an activity code
	*/
	GetWorkforcemanagementBusinessunitActivitycode(ctx context.Context, params *GetWorkforcemanagementBusinessunitActivitycodeParams) (*GetWorkforcemanagementBusinessunitActivitycodeOK, error)
	/*
	   GetWorkforcemanagementBusinessunitActivitycodes gets activity codes
	*/
	GetWorkforcemanagementBusinessunitActivitycodes(ctx context.Context, params *GetWorkforcemanagementBusinessunitActivitycodesParams) (*GetWorkforcemanagementBusinessunitActivitycodesOK, error)
	/*
	   GetWorkforcemanagementBusinessunitIntradayPlanninggroups gets intraday planning groups for the given date
	*/
	GetWorkforcemanagementBusinessunitIntradayPlanninggroups(ctx context.Context, params *GetWorkforcemanagementBusinessunitIntradayPlanninggroupsParams) (*GetWorkforcemanagementBusinessunitIntradayPlanninggroupsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitManagementunits gets all authorized management units in the business unit
	*/
	GetWorkforcemanagementBusinessunitManagementunits(ctx context.Context, params *GetWorkforcemanagementBusinessunitManagementunitsParams) (*GetWorkforcemanagementBusinessunitManagementunitsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitPlanninggroup gets a planning group
	*/
	GetWorkforcemanagementBusinessunitPlanninggroup(ctx context.Context, params *GetWorkforcemanagementBusinessunitPlanninggroupParams) (*GetWorkforcemanagementBusinessunitPlanninggroupOK, error)
	/*
	   GetWorkforcemanagementBusinessunitPlanninggroups gets list of planning groups
	*/
	GetWorkforcemanagementBusinessunitPlanninggroups(ctx context.Context, params *GetWorkforcemanagementBusinessunitPlanninggroupsParams) (*GetWorkforcemanagementBusinessunitPlanninggroupsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitSchedulingRun gets a scheduling run
	*/
	GetWorkforcemanagementBusinessunitSchedulingRun(ctx context.Context, params *GetWorkforcemanagementBusinessunitSchedulingRunParams) (*GetWorkforcemanagementBusinessunitSchedulingRunOK, error)
	/*
	   GetWorkforcemanagementBusinessunitSchedulingRunResult gets the result of a rescheduling operation
	*/
	GetWorkforcemanagementBusinessunitSchedulingRunResult(ctx context.Context, params *GetWorkforcemanagementBusinessunitSchedulingRunResultParams) (*GetWorkforcemanagementBusinessunitSchedulingRunResultOK, error)
	/*
	   GetWorkforcemanagementBusinessunitSchedulingRuns gets the list of scheduling runs
	*/
	GetWorkforcemanagementBusinessunitSchedulingRuns(ctx context.Context, params *GetWorkforcemanagementBusinessunitSchedulingRunsParams) (*GetWorkforcemanagementBusinessunitSchedulingRunsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitServicegoaltemplate gets a service goal template
	*/
	GetWorkforcemanagementBusinessunitServicegoaltemplate(ctx context.Context, params *GetWorkforcemanagementBusinessunitServicegoaltemplateParams) (*GetWorkforcemanagementBusinessunitServicegoaltemplateOK, error)
	/*
	   GetWorkforcemanagementBusinessunitServicegoaltemplates gets list of service goal templates
	*/
	GetWorkforcemanagementBusinessunitServicegoaltemplates(ctx context.Context, params *GetWorkforcemanagementBusinessunitServicegoaltemplatesParams) (*GetWorkforcemanagementBusinessunitServicegoaltemplatesOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekSchedule gets the metadata for the schedule describing which management units and agents are in the schedule schedule data can then be loaded with the query route
	*/
	GetWorkforcemanagementBusinessunitWeekSchedule(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleParams) (*GetWorkforcemanagementBusinessunitWeekScheduleOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekScheduleGenerationresults gets the generation results for a generated schedule
	*/
	GetWorkforcemanagementBusinessunitWeekScheduleGenerationresults(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleGenerationresultsParams) (*GetWorkforcemanagementBusinessunitWeekScheduleGenerationresultsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast gets the headcount forecast by planning group for the schedule
	*/
	GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastParams) (*GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgent loads agent s schedule history
	*/
	GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgent(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgentParams) (*GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgentOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekSchedules gets the list of week schedules for the specified week
	   Use "recent" (without quotes) for the `weekId` path parameter to fetch all forecasts for +/- 26 weeks from the current date. Response will include any schedule which spans the specified week
	*/
	GetWorkforcemanagementBusinessunitWeekSchedules(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekSchedulesParams) (*GetWorkforcemanagementBusinessunitWeekSchedulesOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekShorttermforecast gets a short term forecast
	*/
	GetWorkforcemanagementBusinessunitWeekShorttermforecast(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekShorttermforecastData gets the result of a short term forecast calculation
	   Includes modifications unless you pass the doNotApplyModifications query parameter
	*/
	GetWorkforcemanagementBusinessunitWeekShorttermforecastData(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastDataParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastDataOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults gets the forecast generation results
	*/
	GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata gets the result of a long term forecast calculation
	   Includes modifications unless you pass the doNotApplyModifications query parameter
	*/
	GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdataParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdataOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups gets the forecast planning group snapshot
	*/
	GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitWeekShorttermforecasts gets short term forecasts
	   Use "recent" (without quotes) for the `weekDateId` path parameter to fetch all forecasts for +/- 26 weeks from the current date. Response will include any forecast which spans the specified week
	*/
	GetWorkforcemanagementBusinessunitWeekShorttermforecasts(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastsParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastsOK, error)
	/*
	   GetWorkforcemanagementBusinessunits gets business units
	*/
	GetWorkforcemanagementBusinessunits(ctx context.Context, params *GetWorkforcemanagementBusinessunitsParams) (*GetWorkforcemanagementBusinessunitsOK, error)
	/*
	   GetWorkforcemanagementBusinessunitsDivisionviews gets business units across divisions
	*/
	GetWorkforcemanagementBusinessunitsDivisionviews(ctx context.Context, params *GetWorkforcemanagementBusinessunitsDivisionviewsParams) (*GetWorkforcemanagementBusinessunitsDivisionviewsOK, error)
	/*
	   GetWorkforcemanagementCalendarDataIcs gets ics formatted calendar based on shareable link
	*/
	GetWorkforcemanagementCalendarDataIcs(ctx context.Context, params *GetWorkforcemanagementCalendarDataIcsParams) (*GetWorkforcemanagementCalendarDataIcsOK, error)
	/*
	   GetWorkforcemanagementCalendarURLIcs gets existing calendar link for the current user
	*/
	GetWorkforcemanagementCalendarURLIcs(ctx context.Context, params *GetWorkforcemanagementCalendarURLIcsParams) (*GetWorkforcemanagementCalendarURLIcsOK, error)
	/*
	   GetWorkforcemanagementHistoricaldataDeletejob retrieves delete job status for historical data imports of the organization
	*/
	GetWorkforcemanagementHistoricaldataDeletejob(ctx context.Context, params *GetWorkforcemanagementHistoricaldataDeletejobParams) (*GetWorkforcemanagementHistoricaldataDeletejobOK, error)
	/*
	   GetWorkforcemanagementHistoricaldataImportstatus retrieves status of the historical data imports of the organization
	*/
	GetWorkforcemanagementHistoricaldataImportstatus(ctx context.Context, params *GetWorkforcemanagementHistoricaldataImportstatusParams) (*GetWorkforcemanagementHistoricaldataImportstatusOK, error)
	/*
	   GetWorkforcemanagementManagementunit gets management unit
	   settings.shortTermForecasting is deprecated and now lives on the business unit
	*/
	GetWorkforcemanagementManagementunit(ctx context.Context, params *GetWorkforcemanagementManagementunitParams) (*GetWorkforcemanagementManagementunitOK, error)
	/*
	   GetWorkforcemanagementManagementunitActivitycodes gets activity codes
	*/
	GetWorkforcemanagementManagementunitActivitycodes(ctx context.Context, params *GetWorkforcemanagementManagementunitActivitycodesParams) (*GetWorkforcemanagementManagementunitActivitycodesOK, error)
	/*
	   GetWorkforcemanagementManagementunitAdherence gets a list of user schedule adherence records for the requested management unit
	*/
	GetWorkforcemanagementManagementunitAdherence(ctx context.Context, params *GetWorkforcemanagementManagementunitAdherenceParams) (*GetWorkforcemanagementManagementunitAdherenceOK, error)
	/*
	   GetWorkforcemanagementManagementunitAgent gets data for agent in the management unit
	*/
	GetWorkforcemanagementManagementunitAgent(ctx context.Context, params *GetWorkforcemanagementManagementunitAgentParams) (*GetWorkforcemanagementManagementunitAgentOK, error)
	/*
	   GetWorkforcemanagementManagementunitAgentShifttrades gets all the shift trades for a given agent
	*/
	GetWorkforcemanagementManagementunitAgentShifttrades(ctx context.Context, params *GetWorkforcemanagementManagementunitAgentShifttradesParams) (*GetWorkforcemanagementManagementunitAgentShifttradesOK, error)
	/*
	   GetWorkforcemanagementManagementunitShifttradesMatched gets a summary of all shift trades in the matched state
	*/
	GetWorkforcemanagementManagementunitShifttradesMatched(ctx context.Context, params *GetWorkforcemanagementManagementunitShifttradesMatchedParams) (*GetWorkforcemanagementManagementunitShifttradesMatchedOK, error)
	/*
	   GetWorkforcemanagementManagementunitShifttradesUsers gets list of users available for whom you can send direct shift trade requests
	*/
	GetWorkforcemanagementManagementunitShifttradesUsers(ctx context.Context, params *GetWorkforcemanagementManagementunitShifttradesUsersParams) (*GetWorkforcemanagementManagementunitShifttradesUsersOK, error)
	/*
	   GetWorkforcemanagementManagementunitTimeofflimit gets a time off limit object
	   Returns properties of time off limit object, but not daily values.
	*/
	GetWorkforcemanagementManagementunitTimeofflimit(ctx context.Context, params *GetWorkforcemanagementManagementunitTimeofflimitParams) (*GetWorkforcemanagementManagementunitTimeofflimitOK, error)
	/*
	   GetWorkforcemanagementManagementunitTimeofflimits gets a list of time off limit objects under management unit
	   Currently only one time off limit object is allowed under management unit, so the list contains either 0 or 1 element.
	*/
	GetWorkforcemanagementManagementunitTimeofflimits(ctx context.Context, params *GetWorkforcemanagementManagementunitTimeofflimitsParams) (*GetWorkforcemanagementManagementunitTimeofflimitsOK, error)
	/*
	   GetWorkforcemanagementManagementunitTimeoffplan gets a time off plan
	*/
	GetWorkforcemanagementManagementunitTimeoffplan(ctx context.Context, params *GetWorkforcemanagementManagementunitTimeoffplanParams) (*GetWorkforcemanagementManagementunitTimeoffplanOK, error)
	/*
	   GetWorkforcemanagementManagementunitTimeoffplans gets a list of time off plans
	*/
	GetWorkforcemanagementManagementunitTimeoffplans(ctx context.Context, params *GetWorkforcemanagementManagementunitTimeoffplansParams) (*GetWorkforcemanagementManagementunitTimeoffplansOK, error)
	/*
	   GetWorkforcemanagementManagementunitUserTimeoffrequest gets a time off request
	*/
	GetWorkforcemanagementManagementunitUserTimeoffrequest(ctx context.Context, params *GetWorkforcemanagementManagementunitUserTimeoffrequestParams) (*GetWorkforcemanagementManagementunitUserTimeoffrequestOK, error)
	/*
	   GetWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits retrieves time off limit allocated and waitlisted values according to specific time off request
	*/
	GetWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits(ctx context.Context, params *GetWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimitsParams) (*GetWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimitsOK, error)
	/*
	   GetWorkforcemanagementManagementunitUserTimeoffrequests gets a list of time off requests for a given user
	*/
	GetWorkforcemanagementManagementunitUserTimeoffrequests(ctx context.Context, params *GetWorkforcemanagementManagementunitUserTimeoffrequestsParams) (*GetWorkforcemanagementManagementunitUserTimeoffrequestsOK, error)
	/*
	   GetWorkforcemanagementManagementunitUsers gets users in the management unit
	*/
	GetWorkforcemanagementManagementunitUsers(ctx context.Context, params *GetWorkforcemanagementManagementunitUsersParams) (*GetWorkforcemanagementManagementunitUsersOK, error)
	/*
	   GetWorkforcemanagementManagementunitWeekSchedule deprecateds use the equivalent business unit resource instead get a week schedule
	*/
	GetWorkforcemanagementManagementunitWeekSchedule(ctx context.Context, params *GetWorkforcemanagementManagementunitWeekScheduleParams) (*GetWorkforcemanagementManagementunitWeekScheduleOK, error)
	/*
	   GetWorkforcemanagementManagementunitWeekSchedules deprecateds use the equivalent business unit resource instead get the list of schedules in a week in management unit
	*/
	GetWorkforcemanagementManagementunitWeekSchedules(ctx context.Context, params *GetWorkforcemanagementManagementunitWeekSchedulesParams) (*GetWorkforcemanagementManagementunitWeekSchedulesOK, error)
	/*
	   GetWorkforcemanagementManagementunitWeekShifttrades gets all the shift trades for a given week
	*/
	GetWorkforcemanagementManagementunitWeekShifttrades(ctx context.Context, params *GetWorkforcemanagementManagementunitWeekShifttradesParams) (*GetWorkforcemanagementManagementunitWeekShifttradesOK, error)
	/*
	   GetWorkforcemanagementManagementunitWorkplan gets a work plan
	*/
	GetWorkforcemanagementManagementunitWorkplan(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplanParams) (*GetWorkforcemanagementManagementunitWorkplanOK, error)
	/*
	   GetWorkforcemanagementManagementunitWorkplanrotation gets a work plan rotation
	*/
	GetWorkforcemanagementManagementunitWorkplanrotation(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplanrotationParams) (*GetWorkforcemanagementManagementunitWorkplanrotationOK, error)
	/*
	   GetWorkforcemanagementManagementunitWorkplanrotations gets work plan rotations
	*/
	GetWorkforcemanagementManagementunitWorkplanrotations(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplanrotationsParams) (*GetWorkforcemanagementManagementunitWorkplanrotationsOK, error)
	/*
	   GetWorkforcemanagementManagementunitWorkplans gets work plans
	   "expand=details" is deprecated
	*/
	GetWorkforcemanagementManagementunitWorkplans(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplansParams) (*GetWorkforcemanagementManagementunitWorkplansOK, error)
	/*
	   GetWorkforcemanagementManagementunits gets management units
	*/
	GetWorkforcemanagementManagementunits(ctx context.Context, params *GetWorkforcemanagementManagementunitsParams) (*GetWorkforcemanagementManagementunitsOK, error)
	/*
	   GetWorkforcemanagementManagementunitsDivisionviews gets management units across divisions
	*/
	GetWorkforcemanagementManagementunitsDivisionviews(ctx context.Context, params *GetWorkforcemanagementManagementunitsDivisionviewsParams) (*GetWorkforcemanagementManagementunitsDivisionviewsOK, error)
	/*
	   GetWorkforcemanagementNotifications gets a list of notifications for the current user
	   Notifications are only initially sent if you have the relevant Notify and Edit permissions
	*/
	GetWorkforcemanagementNotifications(ctx context.Context, params *GetWorkforcemanagementNotificationsParams) (*GetWorkforcemanagementNotificationsOK, error)
	/*
	   GetWorkforcemanagementSchedulingjob gets status of the scheduling job
	*/
	GetWorkforcemanagementSchedulingjob(ctx context.Context, params *GetWorkforcemanagementSchedulingjobParams) (*GetWorkforcemanagementSchedulingjobOK, error)
	/*
	   GetWorkforcemanagementShifttrades gets all of my shift trades
	*/
	GetWorkforcemanagementShifttrades(ctx context.Context, params *GetWorkforcemanagementShifttradesParams) (*GetWorkforcemanagementShifttradesOK, error)
	/*
	   GetWorkforcemanagementShrinkageJob requests to fetch the status of the historical shrinkage query
	*/
	GetWorkforcemanagementShrinkageJob(ctx context.Context, params *GetWorkforcemanagementShrinkageJobParams) (*GetWorkforcemanagementShrinkageJobOK, error)
	/*
	   GetWorkforcemanagementTimeoffrequest gets a time off request for the current user
	*/
	GetWorkforcemanagementTimeoffrequest(ctx context.Context, params *GetWorkforcemanagementTimeoffrequestParams) (*GetWorkforcemanagementTimeoffrequestOK, error)
	/*
	   GetWorkforcemanagementTimeoffrequestWaitlistpositions gets the daily waitlist positions of a time off request for the current user
	*/
	GetWorkforcemanagementTimeoffrequestWaitlistpositions(ctx context.Context, params *GetWorkforcemanagementTimeoffrequestWaitlistpositionsParams) (*GetWorkforcemanagementTimeoffrequestWaitlistpositionsOK, error)
	/*
	   GetWorkforcemanagementTimeoffrequests gets a list of time off requests for the current user
	*/
	GetWorkforcemanagementTimeoffrequests(ctx context.Context, params *GetWorkforcemanagementTimeoffrequestsParams) (*GetWorkforcemanagementTimeoffrequestsOK, error)
	/*
	   PatchWorkforcemanagementAgentAdherenceExplanation updates an adherence explanation
	*/
	PatchWorkforcemanagementAgentAdherenceExplanation(ctx context.Context, params *PatchWorkforcemanagementAgentAdherenceExplanationParams) (*PatchWorkforcemanagementAgentAdherenceExplanationOK, *PatchWorkforcemanagementAgentAdherenceExplanationAccepted, error)
	/*
	   PatchWorkforcemanagementBusinessunit updates business unit
	*/
	PatchWorkforcemanagementBusinessunit(ctx context.Context, params *PatchWorkforcemanagementBusinessunitParams) (*PatchWorkforcemanagementBusinessunitOK, error)
	/*
	   PatchWorkforcemanagementBusinessunitActivitycode updates an activity code
	*/
	PatchWorkforcemanagementBusinessunitActivitycode(ctx context.Context, params *PatchWorkforcemanagementBusinessunitActivitycodeParams) (*PatchWorkforcemanagementBusinessunitActivitycodeOK, error)
	/*
	   PatchWorkforcemanagementBusinessunitPlanninggroup updates the planning group
	*/
	PatchWorkforcemanagementBusinessunitPlanninggroup(ctx context.Context, params *PatchWorkforcemanagementBusinessunitPlanninggroupParams) (*PatchWorkforcemanagementBusinessunitPlanninggroupOK, error)
	/*
	   PatchWorkforcemanagementBusinessunitSchedulingRun marks a schedule run as applied
	*/
	PatchWorkforcemanagementBusinessunitSchedulingRun(ctx context.Context, params *PatchWorkforcemanagementBusinessunitSchedulingRunParams) (*PatchWorkforcemanagementBusinessunitSchedulingRunNoContent, error)
	/*
	   PatchWorkforcemanagementBusinessunitServicegoaltemplate updates a service goal template
	*/
	PatchWorkforcemanagementBusinessunitServicegoaltemplate(ctx context.Context, params *PatchWorkforcemanagementBusinessunitServicegoaltemplateParams) (*PatchWorkforcemanagementBusinessunitServicegoaltemplateOK, error)
	/*
	   PatchWorkforcemanagementManagementunit updates the requested management unit
	*/
	PatchWorkforcemanagementManagementunit(ctx context.Context, params *PatchWorkforcemanagementManagementunitParams) (*PatchWorkforcemanagementManagementunitOK, error)
	/*
	   PatchWorkforcemanagementManagementunitTimeofflimit updates a time off limit object
	   Updates time off limit object properties, but not daily values.
	*/
	PatchWorkforcemanagementManagementunitTimeofflimit(ctx context.Context, params *PatchWorkforcemanagementManagementunitTimeofflimitParams) (*PatchWorkforcemanagementManagementunitTimeofflimitOK, error)
	/*
	   PatchWorkforcemanagementManagementunitTimeoffplan updates a time off plan
	*/
	PatchWorkforcemanagementManagementunitTimeoffplan(ctx context.Context, params *PatchWorkforcemanagementManagementunitTimeoffplanParams) (*PatchWorkforcemanagementManagementunitTimeoffplanOK, error)
	/*
	   PatchWorkforcemanagementManagementunitUserTimeoffrequest updates a time off request
	*/
	PatchWorkforcemanagementManagementunitUserTimeoffrequest(ctx context.Context, params *PatchWorkforcemanagementManagementunitUserTimeoffrequestParams) (*PatchWorkforcemanagementManagementunitUserTimeoffrequestOK, error)
	/*
	   PatchWorkforcemanagementManagementunitWeekShifttrade updates a shift trade this route can only be called by the initiating agent
	*/
	PatchWorkforcemanagementManagementunitWeekShifttrade(ctx context.Context, params *PatchWorkforcemanagementManagementunitWeekShifttradeParams) (*PatchWorkforcemanagementManagementunitWeekShifttradeOK, error)
	/*
	   PatchWorkforcemanagementManagementunitWorkplan updates a work plan
	*/
	PatchWorkforcemanagementManagementunitWorkplan(ctx context.Context, params *PatchWorkforcemanagementManagementunitWorkplanParams) (*PatchWorkforcemanagementManagementunitWorkplanOK, error)
	/*
	   PatchWorkforcemanagementManagementunitWorkplanrotation updates a work plan rotation
	*/
	PatchWorkforcemanagementManagementunitWorkplanrotation(ctx context.Context, params *PatchWorkforcemanagementManagementunitWorkplanrotationParams) (*PatchWorkforcemanagementManagementunitWorkplanrotationOK, error)
	/*
	   PatchWorkforcemanagementTimeoffrequest updates a time off request for the current user
	*/
	PatchWorkforcemanagementTimeoffrequest(ctx context.Context, params *PatchWorkforcemanagementTimeoffrequestParams) (*PatchWorkforcemanagementTimeoffrequestOK, error)
	/*
	   PostWorkforcemanagementAdherenceExplanations submits an adherence explanation for the current user
	*/
	PostWorkforcemanagementAdherenceExplanations(ctx context.Context, params *PostWorkforcemanagementAdherenceExplanationsParams) (*PostWorkforcemanagementAdherenceExplanationsAccepted, error)
	/*
	   PostWorkforcemanagementAdherenceExplanationsQuery queries adherence explanations for the current user
	*/
	PostWorkforcemanagementAdherenceExplanationsQuery(ctx context.Context, params *PostWorkforcemanagementAdherenceExplanationsQueryParams) (*PostWorkforcemanagementAdherenceExplanationsQueryAccepted, error)
	/*
	   PostWorkforcemanagementAdherenceHistorical requests a historical adherence report for users across management units
	*/
	PostWorkforcemanagementAdherenceHistorical(ctx context.Context, params *PostWorkforcemanagementAdherenceHistoricalParams) (*PostWorkforcemanagementAdherenceHistoricalAccepted, error)
	/*
	   PostWorkforcemanagementAdherenceHistoricalBulk requests a historical adherence report in bulk
	*/
	PostWorkforcemanagementAdherenceHistoricalBulk(ctx context.Context, params *PostWorkforcemanagementAdherenceHistoricalBulkParams) (*PostWorkforcemanagementAdherenceHistoricalBulkAccepted, error)
	/*
	   PostWorkforcemanagementAgentAdherenceExplanations adds an adherence explanation for the requested user
	*/
	PostWorkforcemanagementAgentAdherenceExplanations(ctx context.Context, params *PostWorkforcemanagementAgentAdherenceExplanationsParams) (*PostWorkforcemanagementAgentAdherenceExplanationsAccepted, error)
	/*
	   PostWorkforcemanagementAgentAdherenceExplanationsQuery queries adherence explanations for the given agent across a specified range
	*/
	PostWorkforcemanagementAgentAdherenceExplanationsQuery(ctx context.Context, params *PostWorkforcemanagementAgentAdherenceExplanationsQueryParams) (*PostWorkforcemanagementAgentAdherenceExplanationsQueryOK, *PostWorkforcemanagementAgentAdherenceExplanationsQueryAccepted, error)
	/*
	   PostWorkforcemanagementAgentschedulesMine gets published schedule for the current user
	*/
	PostWorkforcemanagementAgentschedulesMine(ctx context.Context, params *PostWorkforcemanagementAgentschedulesMineParams) (*PostWorkforcemanagementAgentschedulesMineOK, error)
	/*
	   PostWorkforcemanagementBusinessunitActivitycodes creates a new activity code
	*/
	PostWorkforcemanagementBusinessunitActivitycodes(ctx context.Context, params *PostWorkforcemanagementBusinessunitActivitycodesParams) (*PostWorkforcemanagementBusinessunitActivitycodesOK, error)
	/*
	   PostWorkforcemanagementBusinessunitAdherenceExplanationsQuery queries adherence explanations across an entire business unit for the requested period
	*/
	PostWorkforcemanagementBusinessunitAdherenceExplanationsQuery(ctx context.Context, params *PostWorkforcemanagementBusinessunitAdherenceExplanationsQueryParams) (*PostWorkforcemanagementBusinessunitAdherenceExplanationsQueryOK, *PostWorkforcemanagementBusinessunitAdherenceExplanationsQueryAccepted, error)
	/*
	   PostWorkforcemanagementBusinessunitAgentschedulesSearch searches published schedules
	*/
	PostWorkforcemanagementBusinessunitAgentschedulesSearch(ctx context.Context, params *PostWorkforcemanagementBusinessunitAgentschedulesSearchParams) (*PostWorkforcemanagementBusinessunitAgentschedulesSearchOK, error)
	/*
	   PostWorkforcemanagementBusinessunitIntraday gets intraday data for the given date for the requested planning group ids
	*/
	PostWorkforcemanagementBusinessunitIntraday(ctx context.Context, params *PostWorkforcemanagementBusinessunitIntradayParams) (*PostWorkforcemanagementBusinessunitIntradayOK, error)
	/*
	   PostWorkforcemanagementBusinessunitPlanninggroups adds a new planning group
	*/
	PostWorkforcemanagementBusinessunitPlanninggroups(ctx context.Context, params *PostWorkforcemanagementBusinessunitPlanninggroupsParams) (*PostWorkforcemanagementBusinessunitPlanninggroupsOK, *PostWorkforcemanagementBusinessunitPlanninggroupsCreated, error)
	/*
	   PostWorkforcemanagementBusinessunitServicegoaltemplates adds a new service goal template
	*/
	PostWorkforcemanagementBusinessunitServicegoaltemplates(ctx context.Context, params *PostWorkforcemanagementBusinessunitServicegoaltemplatesParams) (*PostWorkforcemanagementBusinessunitServicegoaltemplatesOK, *PostWorkforcemanagementBusinessunitServicegoaltemplatesCreated, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery loads agent schedule data from the schedule used in combination with the metadata route
	*/
	PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryParams) (*PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryOK, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekScheduleCopy copies a schedule
	*/
	PostWorkforcemanagementBusinessunitWeekScheduleCopy(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleCopyParams) (*PostWorkforcemanagementBusinessunitWeekScheduleCopyOK, *PostWorkforcemanagementBusinessunitWeekScheduleCopyCreated, *PostWorkforcemanagementBusinessunitWeekScheduleCopyAccepted, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekScheduleReschedule starts a rescheduling run
	*/
	PostWorkforcemanagementBusinessunitWeekScheduleReschedule(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleRescheduleParams) (*PostWorkforcemanagementBusinessunitWeekScheduleRescheduleOK, *PostWorkforcemanagementBusinessunitWeekScheduleRescheduleAccepted, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekScheduleUpdate starts processing a schedule update
	   Call after uploading the schedule data to the url supplied by the /update/uploadurl route
	*/
	PostWorkforcemanagementBusinessunitWeekScheduleUpdate(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleUpdateParams) (*PostWorkforcemanagementBusinessunitWeekScheduleUpdateOK, *PostWorkforcemanagementBusinessunitWeekScheduleUpdateAccepted, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl creates a signed upload URL for updating a schedule
	   Once the upload is complete, call the /{scheduleId}/update route to start the schedule update process
	*/
	PostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurlParams) (*PostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurlOK, *PostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurlCreated, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekSchedules creates a blank schedule
	*/
	PostWorkforcemanagementBusinessunitWeekSchedules(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekSchedulesParams) (*PostWorkforcemanagementBusinessunitWeekSchedulesOK, *PostWorkforcemanagementBusinessunitWeekSchedulesCreated, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekSchedulesGenerate generates a schedule
	*/
	PostWorkforcemanagementBusinessunitWeekSchedulesGenerate(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekSchedulesGenerateParams) (*PostWorkforcemanagementBusinessunitWeekSchedulesGenerateOK, *PostWorkforcemanagementBusinessunitWeekSchedulesGenerateAccepted, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekSchedulesImport starts processing a schedule import
	   Call after uploading the schedule data to the url supplied by the /import/uploadurl route
	*/
	PostWorkforcemanagementBusinessunitWeekSchedulesImport(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekSchedulesImportParams) (*PostWorkforcemanagementBusinessunitWeekSchedulesImportOK, *PostWorkforcemanagementBusinessunitWeekSchedulesImportAccepted, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl creates a signed upload URL for importing a schedule
	   Once the upload is complete, call the /import route to start the schedule import process
	*/
	PostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurlParams) (*PostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurlOK, *PostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurlCreated, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekShorttermforecastCopy copies a short term forecast
	*/
	PostWorkforcemanagementBusinessunitWeekShorttermforecastCopy(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyParams) (*PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyOK, *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyCreated, *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyAccepted, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate generates a short term forecast
	*/
	PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateParams) (*PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateOK, *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateCreated, *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateAccepted, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekShorttermforecastsImport starts importing the uploaded short term forecast
	   Call after uploading the forecast data to the url supplied by the /import/uploadurl route
	*/
	PostWorkforcemanagementBusinessunitWeekShorttermforecastsImport(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportParams) (*PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportOK, *PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportAccepted, error)
	/*
	   PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl creates a signed upload URL for importing a short term forecast
	   Once the upload is complete, call the /import route to start the short term forecast import process
	*/
	PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurlParams) (*PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurlOK, *PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurlCreated, error)
	/*
	   PostWorkforcemanagementBusinessunits adds a new business unit
	   It may take a minute or two for a new business unit to be available for api operations
	*/
	PostWorkforcemanagementBusinessunits(ctx context.Context, params *PostWorkforcemanagementBusinessunitsParams) (*PostWorkforcemanagementBusinessunitsOK, *PostWorkforcemanagementBusinessunitsCreated, error)
	/*
	   PostWorkforcemanagementCalendarURLIcs creates a newly generated calendar link for the current user if the current user has previously generated one the generated link will be returned
	*/
	PostWorkforcemanagementCalendarURLIcs(ctx context.Context, params *PostWorkforcemanagementCalendarURLIcsParams) (*PostWorkforcemanagementCalendarURLIcsOK, *PostWorkforcemanagementCalendarURLIcsCreated, error)
	/*
	   PostWorkforcemanagementHistoricaldataDeletejob deletes the entries of the historical data imports in the organization
	*/
	PostWorkforcemanagementHistoricaldataDeletejob(ctx context.Context, params *PostWorkforcemanagementHistoricaldataDeletejobParams) (*PostWorkforcemanagementHistoricaldataDeletejobAccepted, error)
	/*
	   PostWorkforcemanagementHistoricaldataValidate triggers validation process for historical import
	*/
	PostWorkforcemanagementHistoricaldataValidate(ctx context.Context, params *PostWorkforcemanagementHistoricaldataValidateParams) (*PostWorkforcemanagementHistoricaldataValidateAccepted, error)
	/*
	   PostWorkforcemanagementManagementunitAgentschedulesSearch queries published schedules for given given time range for set of users
	*/
	PostWorkforcemanagementManagementunitAgentschedulesSearch(ctx context.Context, params *PostWorkforcemanagementManagementunitAgentschedulesSearchParams) (*PostWorkforcemanagementManagementunitAgentschedulesSearchOK, error)
	/*
	   PostWorkforcemanagementManagementunitHistoricaladherencequery requests a historical adherence report
	   The maximum supported range for historical adherence queries is 31 days, or 7 days with includeExceptions = true
	*/
	PostWorkforcemanagementManagementunitHistoricaladherencequery(ctx context.Context, params *PostWorkforcemanagementManagementunitHistoricaladherencequeryParams) (*PostWorkforcemanagementManagementunitHistoricaladherencequeryAccepted, error)
	/*
	   PostWorkforcemanagementManagementunitMove moves the requested management unit to a new business unit
	   Returns status 200 if the management unit is already in the requested business unit
	*/
	PostWorkforcemanagementManagementunitMove(ctx context.Context, params *PostWorkforcemanagementManagementunitMoveParams) (*PostWorkforcemanagementManagementunitMoveOK, *PostWorkforcemanagementManagementunitMoveAccepted, error)
	/*
	   PostWorkforcemanagementManagementunitSchedulesSearch queries published schedules for given given time range for set of users
	*/
	PostWorkforcemanagementManagementunitSchedulesSearch(ctx context.Context, params *PostWorkforcemanagementManagementunitSchedulesSearchParams) (*PostWorkforcemanagementManagementunitSchedulesSearchOK, error)
	/*
	   PostWorkforcemanagementManagementunitShrinkageJobs requests a historical shrinkage report
	   The maximum supported range for historical shrinkage queries is up to 32 days. Historical Shrinkage for a given date range can be queried in two modes - granular and aggregated. To see granular shrinkage information, provide granularity in the request body.
	*/
	PostWorkforcemanagementManagementunitShrinkageJobs(ctx context.Context, params *PostWorkforcemanagementManagementunitShrinkageJobsParams) (*PostWorkforcemanagementManagementunitShrinkageJobsAccepted, error)
	/*
	   PostWorkforcemanagementManagementunitTimeofflimits creates a new time off limit object under management unit
	   Only one limit object is allowed under management unit, so an attempt to create second object will fail.
	*/
	PostWorkforcemanagementManagementunitTimeofflimits(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeofflimitsParams) (*PostWorkforcemanagementManagementunitTimeofflimitsOK, *PostWorkforcemanagementManagementunitTimeofflimitsCreated, error)
	/*
	   PostWorkforcemanagementManagementunitTimeofflimitsValuesQuery retrieves time off limit related values based on a given set of filters
	*/
	PostWorkforcemanagementManagementunitTimeofflimitsValuesQuery(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeofflimitsValuesQueryParams) (*PostWorkforcemanagementManagementunitTimeofflimitsValuesQueryOK, error)
	/*
	   PostWorkforcemanagementManagementunitTimeoffplans creates a new time off plan
	*/
	PostWorkforcemanagementManagementunitTimeoffplans(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeoffplansParams) (*PostWorkforcemanagementManagementunitTimeoffplansOK, *PostWorkforcemanagementManagementunitTimeoffplansCreated, error)
	/*
	   PostWorkforcemanagementManagementunitTimeoffrequests creates a new time off request
	*/
	PostWorkforcemanagementManagementunitTimeoffrequests(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeoffrequestsParams) (*PostWorkforcemanagementManagementunitTimeoffrequestsOK, error)
	/*
	   PostWorkforcemanagementManagementunitTimeoffrequestsQuery fetches time off requests matching the conditions specified in the request body
	   Request body requires one of the following: User ID is specified, statuses == [Pending] or date range to be specified and less than or equal to 33 days.  All other fields are filters
	*/
	PostWorkforcemanagementManagementunitTimeoffrequestsQuery(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeoffrequestsQueryParams) (*PostWorkforcemanagementManagementunitTimeoffrequestsQueryOK, error)
	/*
	   PostWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery retrieves daily waitlist position for a list of time off requests
	*/
	PostWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQueryParams) (*PostWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQueryOK, error)
	/*
	   PostWorkforcemanagementManagementunitUserTimeoffbalanceJobs queries time off balances for a given user for specified activity code and dates
	*/
	PostWorkforcemanagementManagementunitUserTimeoffbalanceJobs(ctx context.Context, params *PostWorkforcemanagementManagementunitUserTimeoffbalanceJobsParams) (*PostWorkforcemanagementManagementunitUserTimeoffbalanceJobsOK, *PostWorkforcemanagementManagementunitUserTimeoffbalanceJobsAccepted, error)
	/*
	   PostWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobs queries time off balances for dates spanned by a given time off request
	*/
	PostWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobs(ctx context.Context, params *PostWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobsParams) (*PostWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobsOK, *PostWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobsAccepted, error)
	/*
	   PostWorkforcemanagementManagementunitWeekShifttradeMatch matches a shift trade this route can only be called by the receiving agent
	*/
	PostWorkforcemanagementManagementunitWeekShifttradeMatch(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradeMatchParams) (*PostWorkforcemanagementManagementunitWeekShifttradeMatchOK, error)
	/*
	   PostWorkforcemanagementManagementunitWeekShifttrades adds a shift trade
	*/
	PostWorkforcemanagementManagementunitWeekShifttrades(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradesParams) (*PostWorkforcemanagementManagementunitWeekShifttradesOK, error)
	/*
	   PostWorkforcemanagementManagementunitWeekShifttradesSearch searches for potential shift trade matches for the current agent
	*/
	PostWorkforcemanagementManagementunitWeekShifttradesSearch(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradesSearchParams) (*PostWorkforcemanagementManagementunitWeekShifttradesSearchOK, error)
	/*
	   PostWorkforcemanagementManagementunitWeekShifttradesStateBulk updates the state of a batch of shift trades
	   Admin functionality is not supported with "mine".
	*/
	PostWorkforcemanagementManagementunitWeekShifttradesStateBulk(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradesStateBulkParams) (*PostWorkforcemanagementManagementunitWeekShifttradesStateBulkOK, *PostWorkforcemanagementManagementunitWeekShifttradesStateBulkAccepted, error)
	/*
	   PostWorkforcemanagementManagementunitWorkplanCopy creates a copy of work plan
	*/
	PostWorkforcemanagementManagementunitWorkplanCopy(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanCopyParams) (*PostWorkforcemanagementManagementunitWorkplanCopyOK, error)
	/*
	   PostWorkforcemanagementManagementunitWorkplanValidate validates work plan
	*/
	PostWorkforcemanagementManagementunitWorkplanValidate(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanValidateParams) (*PostWorkforcemanagementManagementunitWorkplanValidateOK, error)
	/*
	   PostWorkforcemanagementManagementunitWorkplanrotationCopy creates a copy of work plan rotation
	*/
	PostWorkforcemanagementManagementunitWorkplanrotationCopy(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanrotationCopyParams) (*PostWorkforcemanagementManagementunitWorkplanrotationCopyOK, error)
	/*
	   PostWorkforcemanagementManagementunitWorkplanrotations creates a new work plan rotation
	*/
	PostWorkforcemanagementManagementunitWorkplanrotations(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanrotationsParams) (*PostWorkforcemanagementManagementunitWorkplanrotationsOK, *PostWorkforcemanagementManagementunitWorkplanrotationsCreated, error)
	/*
	   PostWorkforcemanagementManagementunitWorkplans creates a new work plan
	*/
	PostWorkforcemanagementManagementunitWorkplans(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplansParams) (*PostWorkforcemanagementManagementunitWorkplansOK, error)
	/*
	   PostWorkforcemanagementManagementunits adds a management unit
	   It may take a minute or two for a new management unit to be available for api operations
	*/
	PostWorkforcemanagementManagementunits(ctx context.Context, params *PostWorkforcemanagementManagementunitsParams) (*PostWorkforcemanagementManagementunitsOK, *PostWorkforcemanagementManagementunitsCreated, error)
	/*
	   PostWorkforcemanagementNotificationsUpdate marks a list of notifications as read or unread
	*/
	PostWorkforcemanagementNotificationsUpdate(ctx context.Context, params *PostWorkforcemanagementNotificationsUpdateParams) (*PostWorkforcemanagementNotificationsUpdateOK, error)
	/*
	   PostWorkforcemanagementSchedules gets published schedule for the current user
	*/
	PostWorkforcemanagementSchedules(ctx context.Context, params *PostWorkforcemanagementSchedulesParams) (*PostWorkforcemanagementSchedulesOK, error)
	/*
	   PostWorkforcemanagementTimeofflimitsAvailableQuery queries available time off for the current user
	*/
	PostWorkforcemanagementTimeofflimitsAvailableQuery(ctx context.Context, params *PostWorkforcemanagementTimeofflimitsAvailableQueryParams) (*PostWorkforcemanagementTimeofflimitsAvailableQueryOK, error)
	/*
	   PostWorkforcemanagementTimeoffrequests creates a time off request for the current user
	*/
	PostWorkforcemanagementTimeoffrequests(ctx context.Context, params *PostWorkforcemanagementTimeoffrequestsParams) (*PostWorkforcemanagementTimeoffrequestsOK, error)
	/*
	   PutWorkforcemanagementManagementunitTimeofflimitValues sets daily values for a date range of time off limit object
	   Note that only limit daily values can be set through API, allocated and waitlisted values are read-only for time off limit API
	*/
	PutWorkforcemanagementManagementunitTimeofflimitValues(ctx context.Context, params *PutWorkforcemanagementManagementunitTimeofflimitValuesParams) (*PutWorkforcemanagementManagementunitTimeofflimitValuesOK, error)
}

// New creates a new workforce management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for workforce management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteWorkforcemanagementBusinessunit deletes business unit

A business unit cannot be deleted if it contains one or more management units
*/
func (a *Client) DeleteWorkforcemanagementBusinessunit(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitParams) (*DeleteWorkforcemanagementBusinessunitNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementBusinessunit",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementBusinessunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementBusinessunitNoContent), nil

}

/*
DeleteWorkforcemanagementBusinessunitActivitycode deletes an activity code
*/
func (a *Client) DeleteWorkforcemanagementBusinessunitActivitycode(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitActivitycodeParams) (*DeleteWorkforcemanagementBusinessunitActivitycodeNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementBusinessunitActivitycode",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementBusinessunitActivitycodeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementBusinessunitActivitycodeNoContent), nil

}

/*
DeleteWorkforcemanagementBusinessunitPlanninggroup deletes the planning group
*/
func (a *Client) DeleteWorkforcemanagementBusinessunitPlanninggroup(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitPlanninggroupParams) (*DeleteWorkforcemanagementBusinessunitPlanninggroupNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementBusinessunitPlanninggroup",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementBusinessunitPlanninggroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementBusinessunitPlanninggroupNoContent), nil

}

/*
DeleteWorkforcemanagementBusinessunitSchedulingRun cancels a scheduling run
*/
func (a *Client) DeleteWorkforcemanagementBusinessunitSchedulingRun(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitSchedulingRunParams) (*DeleteWorkforcemanagementBusinessunitSchedulingRunNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementBusinessunitSchedulingRun",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementBusinessunitSchedulingRunReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementBusinessunitSchedulingRunNoContent), nil

}

/*
DeleteWorkforcemanagementBusinessunitServicegoaltemplate deletes a service goal template
*/
func (a *Client) DeleteWorkforcemanagementBusinessunitServicegoaltemplate(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitServicegoaltemplateParams) (*DeleteWorkforcemanagementBusinessunitServicegoaltemplateNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementBusinessunitServicegoaltemplate",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementBusinessunitServicegoaltemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementBusinessunitServicegoaltemplateNoContent), nil

}

/*
DeleteWorkforcemanagementBusinessunitWeekSchedule deletes a schedule
*/
func (a *Client) DeleteWorkforcemanagementBusinessunitWeekSchedule(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitWeekScheduleParams) (*DeleteWorkforcemanagementBusinessunitWeekScheduleOK, *DeleteWorkforcemanagementBusinessunitWeekScheduleAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementBusinessunitWeekSchedule",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementBusinessunitWeekScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteWorkforcemanagementBusinessunitWeekScheduleOK:
		return value, nil, nil
	case *DeleteWorkforcemanagementBusinessunitWeekScheduleAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteWorkforcemanagementBusinessunitWeekShorttermforecast deletes a short term forecast

Must not be tied to any schedules
*/
func (a *Client) DeleteWorkforcemanagementBusinessunitWeekShorttermforecast(ctx context.Context, params *DeleteWorkforcemanagementBusinessunitWeekShorttermforecastParams) (*DeleteWorkforcemanagementBusinessunitWeekShorttermforecastNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementBusinessunitWeekShorttermforecast",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementBusinessunitWeekShorttermforecastReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementBusinessunitWeekShorttermforecastNoContent), nil

}

/*
DeleteWorkforcemanagementCalendarURLIcs disables generated calendar link for the current user
*/
func (a *Client) DeleteWorkforcemanagementCalendarURLIcs(ctx context.Context, params *DeleteWorkforcemanagementCalendarURLIcsParams) (*DeleteWorkforcemanagementCalendarURLIcsNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementCalendarUrlIcs",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/calendar/url/ics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementCalendarURLIcsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementCalendarURLIcsNoContent), nil

}

/*
DeleteWorkforcemanagementManagementunit deletes management unit
*/
func (a *Client) DeleteWorkforcemanagementManagementunit(ctx context.Context, params *DeleteWorkforcemanagementManagementunitParams) (*DeleteWorkforcemanagementManagementunitNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementManagementunit",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementManagementunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementManagementunitNoContent), nil

}

/*
DeleteWorkforcemanagementManagementunitTimeofflimit deletes a time off limit object
*/
func (a *Client) DeleteWorkforcemanagementManagementunitTimeofflimit(ctx context.Context, params *DeleteWorkforcemanagementManagementunitTimeofflimitParams) (*DeleteWorkforcemanagementManagementunitTimeofflimitNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementManagementunitTimeofflimit",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementManagementunitTimeofflimitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementManagementunitTimeofflimitNoContent), nil

}

/*
DeleteWorkforcemanagementManagementunitTimeoffplan deletes a time off plan
*/
func (a *Client) DeleteWorkforcemanagementManagementunitTimeoffplan(ctx context.Context, params *DeleteWorkforcemanagementManagementunitTimeoffplanParams) (*DeleteWorkforcemanagementManagementunitTimeoffplanNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementManagementunitTimeoffplan",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementManagementunitTimeoffplanReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementManagementunitTimeoffplanNoContent), nil

}

/*
DeleteWorkforcemanagementManagementunitWorkplan deletes a work plan
*/
func (a *Client) DeleteWorkforcemanagementManagementunitWorkplan(ctx context.Context, params *DeleteWorkforcemanagementManagementunitWorkplanParams) (*DeleteWorkforcemanagementManagementunitWorkplanNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementManagementunitWorkplan",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementManagementunitWorkplanReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementManagementunitWorkplanNoContent), nil

}

/*
DeleteWorkforcemanagementManagementunitWorkplanrotation deletes a work plan rotation
*/
func (a *Client) DeleteWorkforcemanagementManagementunitWorkplanrotation(ctx context.Context, params *DeleteWorkforcemanagementManagementunitWorkplanrotationParams) (*DeleteWorkforcemanagementManagementunitWorkplanrotationNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkforcemanagementManagementunitWorkplanrotation",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkforcemanagementManagementunitWorkplanrotationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkforcemanagementManagementunitWorkplanrotationNoContent), nil

}

/*
GetWorkforcemanagementAdherence gets a list of user schedule adherence records for the requested users
*/
func (a *Client) GetWorkforcemanagementAdherence(ctx context.Context, params *GetWorkforcemanagementAdherenceParams) (*GetWorkforcemanagementAdherenceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementAdherence",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/adherence",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementAdherenceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementAdherenceOK), nil

}

/*
GetWorkforcemanagementAdherenceExplanation gets an adherence explanation for the current user
*/
func (a *Client) GetWorkforcemanagementAdherenceExplanation(ctx context.Context, params *GetWorkforcemanagementAdherenceExplanationParams) (*GetWorkforcemanagementAdherenceExplanationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementAdherenceExplanation",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/adherence/explanations/{explanationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementAdherenceExplanationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementAdherenceExplanationOK), nil

}

/*
GetWorkforcemanagementAdherenceExplanationsJob queries the status of an adherence explanation operation only the user who started the operation can query the status

Job details are only retained if the initial request returned a 202 ACCEPTED response
*/
func (a *Client) GetWorkforcemanagementAdherenceExplanationsJob(ctx context.Context, params *GetWorkforcemanagementAdherenceExplanationsJobParams) (*GetWorkforcemanagementAdherenceExplanationsJobOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementAdherenceExplanationsJob",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/adherence/explanations/jobs/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementAdherenceExplanationsJobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementAdherenceExplanationsJobOK), nil

}

/*
GetWorkforcemanagementAdherenceHistoricalBulkJob requests to fetch the status of the historical adherence bulk job only the user who started the operation can query the status

Job details are only retained if the initial request returned a 202 ACCEPTED response
*/
func (a *Client) GetWorkforcemanagementAdherenceHistoricalBulkJob(ctx context.Context, params *GetWorkforcemanagementAdherenceHistoricalBulkJobParams) (*GetWorkforcemanagementAdherenceHistoricalBulkJobOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementAdherenceHistoricalBulkJob",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/adherence/historical/bulk/jobs/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementAdherenceHistoricalBulkJobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementAdherenceHistoricalBulkJobOK), nil

}

/*
GetWorkforcemanagementAdherenceHistoricalJob queries the status of a historical adherence request operation only the user who started the operation can query the status

Job details are only retained if the initial request returned a 202 ACCEPTED response
*/
func (a *Client) GetWorkforcemanagementAdherenceHistoricalJob(ctx context.Context, params *GetWorkforcemanagementAdherenceHistoricalJobParams) (*GetWorkforcemanagementAdherenceHistoricalJobOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementAdherenceHistoricalJob",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/adherence/historical/jobs/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementAdherenceHistoricalJobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementAdherenceHistoricalJobOK), nil

}

/*
GetWorkforcemanagementAdhocmodelingjob gets status of the modeling job
*/
func (a *Client) GetWorkforcemanagementAdhocmodelingjob(ctx context.Context, params *GetWorkforcemanagementAdhocmodelingjobParams) (*GetWorkforcemanagementAdhocmodelingjobOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementAdhocmodelingjob",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/adhocmodelingjobs/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementAdhocmodelingjobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementAdhocmodelingjobOK), nil

}

/*
GetWorkforcemanagementAgentAdherenceExplanation gets an adherence explanation
*/
func (a *Client) GetWorkforcemanagementAgentAdherenceExplanation(ctx context.Context, params *GetWorkforcemanagementAgentAdherenceExplanationParams) (*GetWorkforcemanagementAgentAdherenceExplanationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementAgentAdherenceExplanation",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/agents/{agentId}/adherence/explanations/{explanationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementAgentAdherenceExplanationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementAgentAdherenceExplanationOK), nil

}

/*
GetWorkforcemanagementAgentManagementunit gets the management unit to which the agent belongs
*/
func (a *Client) GetWorkforcemanagementAgentManagementunit(ctx context.Context, params *GetWorkforcemanagementAgentManagementunitParams) (*GetWorkforcemanagementAgentManagementunitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementAgentManagementunit",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/agents/{agentId}/managementunit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementAgentManagementunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementAgentManagementunitOK), nil

}

/*
GetWorkforcemanagementAgentsMeManagementunit gets the management unit to which the currently logged in agent belongs
*/
func (a *Client) GetWorkforcemanagementAgentsMeManagementunit(ctx context.Context, params *GetWorkforcemanagementAgentsMeManagementunitParams) (*GetWorkforcemanagementAgentsMeManagementunitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementAgentsMeManagementunit",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/agents/me/managementunit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementAgentsMeManagementunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementAgentsMeManagementunitOK), nil

}

/*
GetWorkforcemanagementBusinessunit gets business unit

Expanding "settings" will retrieve all settings.  All other expands will retrieve only the requested settings field(s).
*/
func (a *Client) GetWorkforcemanagementBusinessunit(ctx context.Context, params *GetWorkforcemanagementBusinessunitParams) (*GetWorkforcemanagementBusinessunitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunit",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitOK), nil

}

/*
GetWorkforcemanagementBusinessunitActivitycode gets an activity code
*/
func (a *Client) GetWorkforcemanagementBusinessunitActivitycode(ctx context.Context, params *GetWorkforcemanagementBusinessunitActivitycodeParams) (*GetWorkforcemanagementBusinessunitActivitycodeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitActivitycode",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitActivitycodeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitActivitycodeOK), nil

}

/*
GetWorkforcemanagementBusinessunitActivitycodes gets activity codes
*/
func (a *Client) GetWorkforcemanagementBusinessunitActivitycodes(ctx context.Context, params *GetWorkforcemanagementBusinessunitActivitycodesParams) (*GetWorkforcemanagementBusinessunitActivitycodesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitActivitycodes",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitActivitycodesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitActivitycodesOK), nil

}

/*
GetWorkforcemanagementBusinessunitIntradayPlanninggroups gets intraday planning groups for the given date
*/
func (a *Client) GetWorkforcemanagementBusinessunitIntradayPlanninggroups(ctx context.Context, params *GetWorkforcemanagementBusinessunitIntradayPlanninggroupsParams) (*GetWorkforcemanagementBusinessunitIntradayPlanninggroupsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitIntradayPlanninggroups",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday/planninggroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitIntradayPlanninggroupsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitIntradayPlanninggroupsOK), nil

}

/*
GetWorkforcemanagementBusinessunitManagementunits gets all authorized management units in the business unit
*/
func (a *Client) GetWorkforcemanagementBusinessunitManagementunits(ctx context.Context, params *GetWorkforcemanagementBusinessunitManagementunitsParams) (*GetWorkforcemanagementBusinessunitManagementunitsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitManagementunits",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/managementunits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitManagementunitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitManagementunitsOK), nil

}

/*
GetWorkforcemanagementBusinessunitPlanninggroup gets a planning group
*/
func (a *Client) GetWorkforcemanagementBusinessunitPlanninggroup(ctx context.Context, params *GetWorkforcemanagementBusinessunitPlanninggroupParams) (*GetWorkforcemanagementBusinessunitPlanninggroupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitPlanninggroup",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitPlanninggroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitPlanninggroupOK), nil

}

/*
GetWorkforcemanagementBusinessunitPlanninggroups gets list of planning groups
*/
func (a *Client) GetWorkforcemanagementBusinessunitPlanninggroups(ctx context.Context, params *GetWorkforcemanagementBusinessunitPlanninggroupsParams) (*GetWorkforcemanagementBusinessunitPlanninggroupsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitPlanninggroups",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitPlanninggroupsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitPlanninggroupsOK), nil

}

/*
GetWorkforcemanagementBusinessunitSchedulingRun gets a scheduling run
*/
func (a *Client) GetWorkforcemanagementBusinessunitSchedulingRun(ctx context.Context, params *GetWorkforcemanagementBusinessunitSchedulingRunParams) (*GetWorkforcemanagementBusinessunitSchedulingRunOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitSchedulingRun",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitSchedulingRunReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitSchedulingRunOK), nil

}

/*
GetWorkforcemanagementBusinessunitSchedulingRunResult gets the result of a rescheduling operation
*/
func (a *Client) GetWorkforcemanagementBusinessunitSchedulingRunResult(ctx context.Context, params *GetWorkforcemanagementBusinessunitSchedulingRunResultParams) (*GetWorkforcemanagementBusinessunitSchedulingRunResultOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitSchedulingRunResult",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}/result",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitSchedulingRunResultReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitSchedulingRunResultOK), nil

}

/*
GetWorkforcemanagementBusinessunitSchedulingRuns gets the list of scheduling runs
*/
func (a *Client) GetWorkforcemanagementBusinessunitSchedulingRuns(ctx context.Context, params *GetWorkforcemanagementBusinessunitSchedulingRunsParams) (*GetWorkforcemanagementBusinessunitSchedulingRunsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitSchedulingRuns",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitSchedulingRunsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitSchedulingRunsOK), nil

}

/*
GetWorkforcemanagementBusinessunitServicegoaltemplate gets a service goal template
*/
func (a *Client) GetWorkforcemanagementBusinessunitServicegoaltemplate(ctx context.Context, params *GetWorkforcemanagementBusinessunitServicegoaltemplateParams) (*GetWorkforcemanagementBusinessunitServicegoaltemplateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitServicegoaltemplate",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitServicegoaltemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitServicegoaltemplateOK), nil

}

/*
GetWorkforcemanagementBusinessunitServicegoaltemplates gets list of service goal templates
*/
func (a *Client) GetWorkforcemanagementBusinessunitServicegoaltemplates(ctx context.Context, params *GetWorkforcemanagementBusinessunitServicegoaltemplatesParams) (*GetWorkforcemanagementBusinessunitServicegoaltemplatesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitServicegoaltemplates",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitServicegoaltemplatesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitServicegoaltemplatesOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekSchedule gets the metadata for the schedule describing which management units and agents are in the schedule schedule data can then be loaded with the query route
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekSchedule(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleParams) (*GetWorkforcemanagementBusinessunitWeekScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekSchedule",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekScheduleOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekScheduleGenerationresults gets the generation results for a generated schedule
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekScheduleGenerationresults(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleGenerationresultsParams) (*GetWorkforcemanagementBusinessunitWeekScheduleGenerationresultsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekScheduleGenerationresults",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/generationresults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekScheduleGenerationresultsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekScheduleGenerationresultsOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast gets the headcount forecast by planning group for the schedule
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastParams) (*GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/headcountforecast",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgent loads agent s schedule history
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgent(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgentParams) (*GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/history/agents/{agentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgentOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekSchedules gets the list of week schedules for the specified week

Use "recent" (without quotes) for the `weekId` path parameter to fetch all forecasts for +/- 26 weeks from the current date. Response will include any schedule which spans the specified week
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekSchedules(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekSchedulesParams) (*GetWorkforcemanagementBusinessunitWeekSchedulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekSchedules",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekSchedulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekSchedulesOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekShorttermforecast gets a short term forecast
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekShorttermforecast(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekShorttermforecast",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekShorttermforecastReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekShorttermforecastOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekShorttermforecastData gets the result of a short term forecast calculation

Includes modifications unless you pass the doNotApplyModifications query parameter
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekShorttermforecastData(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastDataParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastDataOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekShorttermforecastData",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekShorttermforecastDataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekShorttermforecastDataOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults gets the forecast generation results
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/generationresults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata gets the result of a long term forecast calculation

Includes modifications unless you pass the doNotApplyModifications query parameter
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdataParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdataOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/longtermforecastdata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdataOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups gets the forecast planning group snapshot
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/planninggroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsOK), nil

}

/*
GetWorkforcemanagementBusinessunitWeekShorttermforecasts gets short term forecasts

Use "recent" (without quotes) for the `weekDateId` path parameter to fetch all forecasts for +/- 26 weeks from the current date. Response will include any forecast which spans the specified week
*/
func (a *Client) GetWorkforcemanagementBusinessunitWeekShorttermforecasts(ctx context.Context, params *GetWorkforcemanagementBusinessunitWeekShorttermforecastsParams) (*GetWorkforcemanagementBusinessunitWeekShorttermforecastsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitWeekShorttermforecasts",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitWeekShorttermforecastsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitWeekShorttermforecastsOK), nil

}

/*
GetWorkforcemanagementBusinessunits gets business units
*/
func (a *Client) GetWorkforcemanagementBusinessunits(ctx context.Context, params *GetWorkforcemanagementBusinessunitsParams) (*GetWorkforcemanagementBusinessunitsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunits",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitsOK), nil

}

/*
GetWorkforcemanagementBusinessunitsDivisionviews gets business units across divisions
*/
func (a *Client) GetWorkforcemanagementBusinessunitsDivisionviews(ctx context.Context, params *GetWorkforcemanagementBusinessunitsDivisionviewsParams) (*GetWorkforcemanagementBusinessunitsDivisionviewsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementBusinessunitsDivisionviews",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/divisionviews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementBusinessunitsDivisionviewsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementBusinessunitsDivisionviewsOK), nil

}

/*
GetWorkforcemanagementCalendarDataIcs gets ics formatted calendar based on shareable link
*/
func (a *Client) GetWorkforcemanagementCalendarDataIcs(ctx context.Context, params *GetWorkforcemanagementCalendarDataIcsParams) (*GetWorkforcemanagementCalendarDataIcsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementCalendarDataIcs",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/calendar/data/ics",
		ProducesMediaTypes: []string{"text/calendar"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementCalendarDataIcsReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementCalendarDataIcsOK), nil

}

/*
GetWorkforcemanagementCalendarURLIcs gets existing calendar link for the current user
*/
func (a *Client) GetWorkforcemanagementCalendarURLIcs(ctx context.Context, params *GetWorkforcemanagementCalendarURLIcsParams) (*GetWorkforcemanagementCalendarURLIcsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementCalendarUrlIcs",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/calendar/url/ics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementCalendarURLIcsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementCalendarURLIcsOK), nil

}

/*
GetWorkforcemanagementHistoricaldataDeletejob retrieves delete job status for historical data imports of the organization
*/
func (a *Client) GetWorkforcemanagementHistoricaldataDeletejob(ctx context.Context, params *GetWorkforcemanagementHistoricaldataDeletejobParams) (*GetWorkforcemanagementHistoricaldataDeletejobOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementHistoricaldataDeletejob",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/historicaldata/deletejob",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementHistoricaldataDeletejobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementHistoricaldataDeletejobOK), nil

}

/*
GetWorkforcemanagementHistoricaldataImportstatus retrieves status of the historical data imports of the organization
*/
func (a *Client) GetWorkforcemanagementHistoricaldataImportstatus(ctx context.Context, params *GetWorkforcemanagementHistoricaldataImportstatusParams) (*GetWorkforcemanagementHistoricaldataImportstatusOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementHistoricaldataImportstatus",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/historicaldata/importstatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementHistoricaldataImportstatusReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementHistoricaldataImportstatusOK), nil

}

/*
GetWorkforcemanagementManagementunit gets management unit

settings.shortTermForecasting is deprecated and now lives on the business unit
*/
func (a *Client) GetWorkforcemanagementManagementunit(ctx context.Context, params *GetWorkforcemanagementManagementunitParams) (*GetWorkforcemanagementManagementunitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunit",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitOK), nil

}

/*
GetWorkforcemanagementManagementunitActivitycodes gets activity codes
*/
func (a *Client) GetWorkforcemanagementManagementunitActivitycodes(ctx context.Context, params *GetWorkforcemanagementManagementunitActivitycodesParams) (*GetWorkforcemanagementManagementunitActivitycodesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitActivitycodes",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/activitycodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitActivitycodesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitActivitycodesOK), nil

}

/*
GetWorkforcemanagementManagementunitAdherence gets a list of user schedule adherence records for the requested management unit
*/
func (a *Client) GetWorkforcemanagementManagementunitAdherence(ctx context.Context, params *GetWorkforcemanagementManagementunitAdherenceParams) (*GetWorkforcemanagementManagementunitAdherenceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitAdherence",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/adherence",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitAdherenceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitAdherenceOK), nil

}

/*
GetWorkforcemanagementManagementunitAgent gets data for agent in the management unit
*/
func (a *Client) GetWorkforcemanagementManagementunitAgent(ctx context.Context, params *GetWorkforcemanagementManagementunitAgentParams) (*GetWorkforcemanagementManagementunitAgentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitAgent",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitAgentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitAgentOK), nil

}

/*
GetWorkforcemanagementManagementunitAgentShifttrades gets all the shift trades for a given agent
*/
func (a *Client) GetWorkforcemanagementManagementunitAgentShifttrades(ctx context.Context, params *GetWorkforcemanagementManagementunitAgentShifttradesParams) (*GetWorkforcemanagementManagementunitAgentShifttradesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitAgentShifttrades",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}/shifttrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitAgentShifttradesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitAgentShifttradesOK), nil

}

/*
GetWorkforcemanagementManagementunitShifttradesMatched gets a summary of all shift trades in the matched state
*/
func (a *Client) GetWorkforcemanagementManagementunitShifttradesMatched(ctx context.Context, params *GetWorkforcemanagementManagementunitShifttradesMatchedParams) (*GetWorkforcemanagementManagementunitShifttradesMatchedOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitShifttradesMatched",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/matched",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitShifttradesMatchedReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitShifttradesMatchedOK), nil

}

/*
GetWorkforcemanagementManagementunitShifttradesUsers gets list of users available for whom you can send direct shift trade requests
*/
func (a *Client) GetWorkforcemanagementManagementunitShifttradesUsers(ctx context.Context, params *GetWorkforcemanagementManagementunitShifttradesUsersParams) (*GetWorkforcemanagementManagementunitShifttradesUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitShifttradesUsers",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitShifttradesUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitShifttradesUsersOK), nil

}

/*
GetWorkforcemanagementManagementunitTimeofflimit gets a time off limit object

Returns properties of time off limit object, but not daily values.
*/
func (a *Client) GetWorkforcemanagementManagementunitTimeofflimit(ctx context.Context, params *GetWorkforcemanagementManagementunitTimeofflimitParams) (*GetWorkforcemanagementManagementunitTimeofflimitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitTimeofflimit",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitTimeofflimitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitTimeofflimitOK), nil

}

/*
GetWorkforcemanagementManagementunitTimeofflimits gets a list of time off limit objects under management unit

Currently only one time off limit object is allowed under management unit, so the list contains either 0 or 1 element.
*/
func (a *Client) GetWorkforcemanagementManagementunitTimeofflimits(ctx context.Context, params *GetWorkforcemanagementManagementunitTimeofflimitsParams) (*GetWorkforcemanagementManagementunitTimeofflimitsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitTimeofflimits",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitTimeofflimitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitTimeofflimitsOK), nil

}

/*
GetWorkforcemanagementManagementunitTimeoffplan gets a time off plan
*/
func (a *Client) GetWorkforcemanagementManagementunitTimeoffplan(ctx context.Context, params *GetWorkforcemanagementManagementunitTimeoffplanParams) (*GetWorkforcemanagementManagementunitTimeoffplanOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitTimeoffplan",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitTimeoffplanReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitTimeoffplanOK), nil

}

/*
GetWorkforcemanagementManagementunitTimeoffplans gets a list of time off plans
*/
func (a *Client) GetWorkforcemanagementManagementunitTimeoffplans(ctx context.Context, params *GetWorkforcemanagementManagementunitTimeoffplansParams) (*GetWorkforcemanagementManagementunitTimeoffplansOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitTimeoffplans",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitTimeoffplansReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitTimeoffplansOK), nil

}

/*
GetWorkforcemanagementManagementunitUserTimeoffrequest gets a time off request
*/
func (a *Client) GetWorkforcemanagementManagementunitUserTimeoffrequest(ctx context.Context, params *GetWorkforcemanagementManagementunitUserTimeoffrequestParams) (*GetWorkforcemanagementManagementunitUserTimeoffrequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitUserTimeoffrequest",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitUserTimeoffrequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitUserTimeoffrequestOK), nil

}

/*
GetWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits retrieves time off limit allocated and waitlisted values according to specific time off request
*/
func (a *Client) GetWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits(ctx context.Context, params *GetWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimitsParams) (*GetWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimitsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}/timeofflimits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimitsOK), nil

}

/*
GetWorkforcemanagementManagementunitUserTimeoffrequests gets a list of time off requests for a given user
*/
func (a *Client) GetWorkforcemanagementManagementunitUserTimeoffrequests(ctx context.Context, params *GetWorkforcemanagementManagementunitUserTimeoffrequestsParams) (*GetWorkforcemanagementManagementunitUserTimeoffrequestsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitUserTimeoffrequests",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitUserTimeoffrequestsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitUserTimeoffrequestsOK), nil

}

/*
GetWorkforcemanagementManagementunitUsers gets users in the management unit
*/
func (a *Client) GetWorkforcemanagementManagementunitUsers(ctx context.Context, params *GetWorkforcemanagementManagementunitUsersParams) (*GetWorkforcemanagementManagementunitUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitUsers",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitUsersOK), nil

}

/*
GetWorkforcemanagementManagementunitWeekSchedule deprecateds use the equivalent business unit resource instead get a week schedule
*/
func (a *Client) GetWorkforcemanagementManagementunitWeekSchedule(ctx context.Context, params *GetWorkforcemanagementManagementunitWeekScheduleParams) (*GetWorkforcemanagementManagementunitWeekScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitWeekSchedule",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitWeekScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitWeekScheduleOK), nil

}

/*
GetWorkforcemanagementManagementunitWeekSchedules deprecateds use the equivalent business unit resource instead get the list of schedules in a week in management unit
*/
func (a *Client) GetWorkforcemanagementManagementunitWeekSchedules(ctx context.Context, params *GetWorkforcemanagementManagementunitWeekSchedulesParams) (*GetWorkforcemanagementManagementunitWeekSchedulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitWeekSchedules",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitWeekSchedulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitWeekSchedulesOK), nil

}

/*
GetWorkforcemanagementManagementunitWeekShifttrades gets all the shift trades for a given week
*/
func (a *Client) GetWorkforcemanagementManagementunitWeekShifttrades(ctx context.Context, params *GetWorkforcemanagementManagementunitWeekShifttradesParams) (*GetWorkforcemanagementManagementunitWeekShifttradesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitWeekShifttrades",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitWeekShifttradesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitWeekShifttradesOK), nil

}

/*
GetWorkforcemanagementManagementunitWorkplan gets a work plan
*/
func (a *Client) GetWorkforcemanagementManagementunitWorkplan(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplanParams) (*GetWorkforcemanagementManagementunitWorkplanOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitWorkplan",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitWorkplanReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitWorkplanOK), nil

}

/*
GetWorkforcemanagementManagementunitWorkplanrotation gets a work plan rotation
*/
func (a *Client) GetWorkforcemanagementManagementunitWorkplanrotation(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplanrotationParams) (*GetWorkforcemanagementManagementunitWorkplanrotationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitWorkplanrotation",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitWorkplanrotationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitWorkplanrotationOK), nil

}

/*
GetWorkforcemanagementManagementunitWorkplanrotations gets work plan rotations
*/
func (a *Client) GetWorkforcemanagementManagementunitWorkplanrotations(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplanrotationsParams) (*GetWorkforcemanagementManagementunitWorkplanrotationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitWorkplanrotations",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitWorkplanrotationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitWorkplanrotationsOK), nil

}

/*
GetWorkforcemanagementManagementunitWorkplans gets work plans

"expand=details" is deprecated
*/
func (a *Client) GetWorkforcemanagementManagementunitWorkplans(ctx context.Context, params *GetWorkforcemanagementManagementunitWorkplansParams) (*GetWorkforcemanagementManagementunitWorkplansOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitWorkplans",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitWorkplansReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitWorkplansOK), nil

}

/*
GetWorkforcemanagementManagementunits gets management units
*/
func (a *Client) GetWorkforcemanagementManagementunits(ctx context.Context, params *GetWorkforcemanagementManagementunitsParams) (*GetWorkforcemanagementManagementunitsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunits",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitsOK), nil

}

/*
GetWorkforcemanagementManagementunitsDivisionviews gets management units across divisions
*/
func (a *Client) GetWorkforcemanagementManagementunitsDivisionviews(ctx context.Context, params *GetWorkforcemanagementManagementunitsDivisionviewsParams) (*GetWorkforcemanagementManagementunitsDivisionviewsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementManagementunitsDivisionviews",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/divisionviews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementManagementunitsDivisionviewsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementManagementunitsDivisionviewsOK), nil

}

/*
GetWorkforcemanagementNotifications gets a list of notifications for the current user

Notifications are only initially sent if you have the relevant Notify and Edit permissions
*/
func (a *Client) GetWorkforcemanagementNotifications(ctx context.Context, params *GetWorkforcemanagementNotificationsParams) (*GetWorkforcemanagementNotificationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementNotifications",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementNotificationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementNotificationsOK), nil

}

/*
GetWorkforcemanagementSchedulingjob gets status of the scheduling job
*/
func (a *Client) GetWorkforcemanagementSchedulingjob(ctx context.Context, params *GetWorkforcemanagementSchedulingjobParams) (*GetWorkforcemanagementSchedulingjobOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementSchedulingjob",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/schedulingjobs/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementSchedulingjobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementSchedulingjobOK), nil

}

/*
GetWorkforcemanagementShifttrades gets all of my shift trades
*/
func (a *Client) GetWorkforcemanagementShifttrades(ctx context.Context, params *GetWorkforcemanagementShifttradesParams) (*GetWorkforcemanagementShifttradesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementShifttrades",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/shifttrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementShifttradesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementShifttradesOK), nil

}

/*
GetWorkforcemanagementShrinkageJob requests to fetch the status of the historical shrinkage query
*/
func (a *Client) GetWorkforcemanagementShrinkageJob(ctx context.Context, params *GetWorkforcemanagementShrinkageJobParams) (*GetWorkforcemanagementShrinkageJobOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementShrinkageJob",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/shrinkage/jobs/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementShrinkageJobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementShrinkageJobOK), nil

}

/*
GetWorkforcemanagementTimeoffrequest gets a time off request for the current user
*/
func (a *Client) GetWorkforcemanagementTimeoffrequest(ctx context.Context, params *GetWorkforcemanagementTimeoffrequestParams) (*GetWorkforcemanagementTimeoffrequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementTimeoffrequest",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementTimeoffrequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementTimeoffrequestOK), nil

}

/*
GetWorkforcemanagementTimeoffrequestWaitlistpositions gets the daily waitlist positions of a time off request for the current user
*/
func (a *Client) GetWorkforcemanagementTimeoffrequestWaitlistpositions(ctx context.Context, params *GetWorkforcemanagementTimeoffrequestWaitlistpositionsParams) (*GetWorkforcemanagementTimeoffrequestWaitlistpositionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementTimeoffrequestWaitlistpositions",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}/waitlistpositions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementTimeoffrequestWaitlistpositionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementTimeoffrequestWaitlistpositionsOK), nil

}

/*
GetWorkforcemanagementTimeoffrequests gets a list of time off requests for the current user
*/
func (a *Client) GetWorkforcemanagementTimeoffrequests(ctx context.Context, params *GetWorkforcemanagementTimeoffrequestsParams) (*GetWorkforcemanagementTimeoffrequestsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkforcemanagementTimeoffrequests",
		Method:             "GET",
		PathPattern:        "/api/v2/workforcemanagement/timeoffrequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkforcemanagementTimeoffrequestsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkforcemanagementTimeoffrequestsOK), nil

}

/*
PatchWorkforcemanagementAgentAdherenceExplanation updates an adherence explanation
*/
func (a *Client) PatchWorkforcemanagementAgentAdherenceExplanation(ctx context.Context, params *PatchWorkforcemanagementAgentAdherenceExplanationParams) (*PatchWorkforcemanagementAgentAdherenceExplanationOK, *PatchWorkforcemanagementAgentAdherenceExplanationAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementAgentAdherenceExplanation",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/agents/{agentId}/adherence/explanations/{explanationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementAgentAdherenceExplanationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchWorkforcemanagementAgentAdherenceExplanationOK:
		return value, nil, nil
	case *PatchWorkforcemanagementAgentAdherenceExplanationAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PatchWorkforcemanagementBusinessunit updates business unit
*/
func (a *Client) PatchWorkforcemanagementBusinessunit(ctx context.Context, params *PatchWorkforcemanagementBusinessunitParams) (*PatchWorkforcemanagementBusinessunitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementBusinessunit",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementBusinessunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementBusinessunitOK), nil

}

/*
PatchWorkforcemanagementBusinessunitActivitycode updates an activity code
*/
func (a *Client) PatchWorkforcemanagementBusinessunitActivitycode(ctx context.Context, params *PatchWorkforcemanagementBusinessunitActivitycodeParams) (*PatchWorkforcemanagementBusinessunitActivitycodeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementBusinessunitActivitycode",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementBusinessunitActivitycodeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementBusinessunitActivitycodeOK), nil

}

/*
PatchWorkforcemanagementBusinessunitPlanninggroup updates the planning group
*/
func (a *Client) PatchWorkforcemanagementBusinessunitPlanninggroup(ctx context.Context, params *PatchWorkforcemanagementBusinessunitPlanninggroupParams) (*PatchWorkforcemanagementBusinessunitPlanninggroupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementBusinessunitPlanninggroup",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementBusinessunitPlanninggroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementBusinessunitPlanninggroupOK), nil

}

/*
PatchWorkforcemanagementBusinessunitSchedulingRun marks a schedule run as applied
*/
func (a *Client) PatchWorkforcemanagementBusinessunitSchedulingRun(ctx context.Context, params *PatchWorkforcemanagementBusinessunitSchedulingRunParams) (*PatchWorkforcemanagementBusinessunitSchedulingRunNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementBusinessunitSchedulingRun",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementBusinessunitSchedulingRunReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementBusinessunitSchedulingRunNoContent), nil

}

/*
PatchWorkforcemanagementBusinessunitServicegoaltemplate updates a service goal template
*/
func (a *Client) PatchWorkforcemanagementBusinessunitServicegoaltemplate(ctx context.Context, params *PatchWorkforcemanagementBusinessunitServicegoaltemplateParams) (*PatchWorkforcemanagementBusinessunitServicegoaltemplateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementBusinessunitServicegoaltemplate",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementBusinessunitServicegoaltemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementBusinessunitServicegoaltemplateOK), nil

}

/*
PatchWorkforcemanagementManagementunit updates the requested management unit
*/
func (a *Client) PatchWorkforcemanagementManagementunit(ctx context.Context, params *PatchWorkforcemanagementManagementunitParams) (*PatchWorkforcemanagementManagementunitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementManagementunit",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementManagementunitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementManagementunitOK), nil

}

/*
PatchWorkforcemanagementManagementunitTimeofflimit updates a time off limit object

Updates time off limit object properties, but not daily values.
*/
func (a *Client) PatchWorkforcemanagementManagementunitTimeofflimit(ctx context.Context, params *PatchWorkforcemanagementManagementunitTimeofflimitParams) (*PatchWorkforcemanagementManagementunitTimeofflimitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementManagementunitTimeofflimit",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementManagementunitTimeofflimitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementManagementunitTimeofflimitOK), nil

}

/*
PatchWorkforcemanagementManagementunitTimeoffplan updates a time off plan
*/
func (a *Client) PatchWorkforcemanagementManagementunitTimeoffplan(ctx context.Context, params *PatchWorkforcemanagementManagementunitTimeoffplanParams) (*PatchWorkforcemanagementManagementunitTimeoffplanOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementManagementunitTimeoffplan",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementManagementunitTimeoffplanReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementManagementunitTimeoffplanOK), nil

}

/*
PatchWorkforcemanagementManagementunitUserTimeoffrequest updates a time off request
*/
func (a *Client) PatchWorkforcemanagementManagementunitUserTimeoffrequest(ctx context.Context, params *PatchWorkforcemanagementManagementunitUserTimeoffrequestParams) (*PatchWorkforcemanagementManagementunitUserTimeoffrequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementManagementunitUserTimeoffrequest",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementManagementunitUserTimeoffrequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementManagementunitUserTimeoffrequestOK), nil

}

/*
PatchWorkforcemanagementManagementunitWeekShifttrade updates a shift trade this route can only be called by the initiating agent
*/
func (a *Client) PatchWorkforcemanagementManagementunitWeekShifttrade(ctx context.Context, params *PatchWorkforcemanagementManagementunitWeekShifttradeParams) (*PatchWorkforcemanagementManagementunitWeekShifttradeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementManagementunitWeekShifttrade",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementManagementunitWeekShifttradeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementManagementunitWeekShifttradeOK), nil

}

/*
PatchWorkforcemanagementManagementunitWorkplan updates a work plan
*/
func (a *Client) PatchWorkforcemanagementManagementunitWorkplan(ctx context.Context, params *PatchWorkforcemanagementManagementunitWorkplanParams) (*PatchWorkforcemanagementManagementunitWorkplanOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementManagementunitWorkplan",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementManagementunitWorkplanReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementManagementunitWorkplanOK), nil

}

/*
PatchWorkforcemanagementManagementunitWorkplanrotation updates a work plan rotation
*/
func (a *Client) PatchWorkforcemanagementManagementunitWorkplanrotation(ctx context.Context, params *PatchWorkforcemanagementManagementunitWorkplanrotationParams) (*PatchWorkforcemanagementManagementunitWorkplanrotationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementManagementunitWorkplanrotation",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementManagementunitWorkplanrotationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementManagementunitWorkplanrotationOK), nil

}

/*
PatchWorkforcemanagementTimeoffrequest updates a time off request for the current user
*/
func (a *Client) PatchWorkforcemanagementTimeoffrequest(ctx context.Context, params *PatchWorkforcemanagementTimeoffrequestParams) (*PatchWorkforcemanagementTimeoffrequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkforcemanagementTimeoffrequest",
		Method:             "PATCH",
		PathPattern:        "/api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkforcemanagementTimeoffrequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkforcemanagementTimeoffrequestOK), nil

}

/*
PostWorkforcemanagementAdherenceExplanations submits an adherence explanation for the current user
*/
func (a *Client) PostWorkforcemanagementAdherenceExplanations(ctx context.Context, params *PostWorkforcemanagementAdherenceExplanationsParams) (*PostWorkforcemanagementAdherenceExplanationsAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementAdherenceExplanations",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/adherence/explanations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementAdherenceExplanationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementAdherenceExplanationsAccepted), nil

}

/*
PostWorkforcemanagementAdherenceExplanationsQuery queries adherence explanations for the current user
*/
func (a *Client) PostWorkforcemanagementAdherenceExplanationsQuery(ctx context.Context, params *PostWorkforcemanagementAdherenceExplanationsQueryParams) (*PostWorkforcemanagementAdherenceExplanationsQueryAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementAdherenceExplanationsQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/adherence/explanations/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementAdherenceExplanationsQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementAdherenceExplanationsQueryAccepted), nil

}

/*
PostWorkforcemanagementAdherenceHistorical requests a historical adherence report for users across management units
*/
func (a *Client) PostWorkforcemanagementAdherenceHistorical(ctx context.Context, params *PostWorkforcemanagementAdherenceHistoricalParams) (*PostWorkforcemanagementAdherenceHistoricalAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementAdherenceHistorical",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/adherence/historical",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementAdherenceHistoricalReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementAdherenceHistoricalAccepted), nil

}

/*
PostWorkforcemanagementAdherenceHistoricalBulk requests a historical adherence report in bulk
*/
func (a *Client) PostWorkforcemanagementAdherenceHistoricalBulk(ctx context.Context, params *PostWorkforcemanagementAdherenceHistoricalBulkParams) (*PostWorkforcemanagementAdherenceHistoricalBulkAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementAdherenceHistoricalBulk",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/adherence/historical/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementAdherenceHistoricalBulkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementAdherenceHistoricalBulkAccepted), nil

}

/*
PostWorkforcemanagementAgentAdherenceExplanations adds an adherence explanation for the requested user
*/
func (a *Client) PostWorkforcemanagementAgentAdherenceExplanations(ctx context.Context, params *PostWorkforcemanagementAgentAdherenceExplanationsParams) (*PostWorkforcemanagementAgentAdherenceExplanationsAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementAgentAdherenceExplanations",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/agents/{agentId}/adherence/explanations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementAgentAdherenceExplanationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementAgentAdherenceExplanationsAccepted), nil

}

/*
PostWorkforcemanagementAgentAdherenceExplanationsQuery queries adherence explanations for the given agent across a specified range
*/
func (a *Client) PostWorkforcemanagementAgentAdherenceExplanationsQuery(ctx context.Context, params *PostWorkforcemanagementAgentAdherenceExplanationsQueryParams) (*PostWorkforcemanagementAgentAdherenceExplanationsQueryOK, *PostWorkforcemanagementAgentAdherenceExplanationsQueryAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementAgentAdherenceExplanationsQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/agents/{agentId}/adherence/explanations/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementAgentAdherenceExplanationsQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementAgentAdherenceExplanationsQueryOK:
		return value, nil, nil
	case *PostWorkforcemanagementAgentAdherenceExplanationsQueryAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementAgentschedulesMine gets published schedule for the current user
*/
func (a *Client) PostWorkforcemanagementAgentschedulesMine(ctx context.Context, params *PostWorkforcemanagementAgentschedulesMineParams) (*PostWorkforcemanagementAgentschedulesMineOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementAgentschedulesMine",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/agentschedules/mine",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementAgentschedulesMineReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementAgentschedulesMineOK), nil

}

/*
PostWorkforcemanagementBusinessunitActivitycodes creates a new activity code
*/
func (a *Client) PostWorkforcemanagementBusinessunitActivitycodes(ctx context.Context, params *PostWorkforcemanagementBusinessunitActivitycodesParams) (*PostWorkforcemanagementBusinessunitActivitycodesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitActivitycodes",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitActivitycodesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementBusinessunitActivitycodesOK), nil

}

/*
PostWorkforcemanagementBusinessunitAdherenceExplanationsQuery queries adherence explanations across an entire business unit for the requested period
*/
func (a *Client) PostWorkforcemanagementBusinessunitAdherenceExplanationsQuery(ctx context.Context, params *PostWorkforcemanagementBusinessunitAdherenceExplanationsQueryParams) (*PostWorkforcemanagementBusinessunitAdherenceExplanationsQueryOK, *PostWorkforcemanagementBusinessunitAdherenceExplanationsQueryAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitAdherenceExplanationsQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/adherence/explanations/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitAdherenceExplanationsQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitAdherenceExplanationsQueryOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitAdherenceExplanationsQueryAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitAgentschedulesSearch searches published schedules
*/
func (a *Client) PostWorkforcemanagementBusinessunitAgentschedulesSearch(ctx context.Context, params *PostWorkforcemanagementBusinessunitAgentschedulesSearchParams) (*PostWorkforcemanagementBusinessunitAgentschedulesSearchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitAgentschedulesSearch",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/agentschedules/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitAgentschedulesSearchReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementBusinessunitAgentschedulesSearchOK), nil

}

/*
PostWorkforcemanagementBusinessunitIntraday gets intraday data for the given date for the requested planning group ids
*/
func (a *Client) PostWorkforcemanagementBusinessunitIntraday(ctx context.Context, params *PostWorkforcemanagementBusinessunitIntradayParams) (*PostWorkforcemanagementBusinessunitIntradayOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitIntraday",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitIntradayReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementBusinessunitIntradayOK), nil

}

/*
PostWorkforcemanagementBusinessunitPlanninggroups adds a new planning group
*/
func (a *Client) PostWorkforcemanagementBusinessunitPlanninggroups(ctx context.Context, params *PostWorkforcemanagementBusinessunitPlanninggroupsParams) (*PostWorkforcemanagementBusinessunitPlanninggroupsOK, *PostWorkforcemanagementBusinessunitPlanninggroupsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitPlanninggroups",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitPlanninggroupsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitPlanninggroupsOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitPlanninggroupsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitServicegoaltemplates adds a new service goal template
*/
func (a *Client) PostWorkforcemanagementBusinessunitServicegoaltemplates(ctx context.Context, params *PostWorkforcemanagementBusinessunitServicegoaltemplatesParams) (*PostWorkforcemanagementBusinessunitServicegoaltemplatesOK, *PostWorkforcemanagementBusinessunitServicegoaltemplatesCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitServicegoaltemplates",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitServicegoaltemplatesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitServicegoaltemplatesOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitServicegoaltemplatesCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery loads agent schedule data from the schedule used in combination with the metadata route
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryParams) (*PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/agentschedules/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryOK), nil

}

/*
PostWorkforcemanagementBusinessunitWeekScheduleCopy copies a schedule
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekScheduleCopy(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleCopyParams) (*PostWorkforcemanagementBusinessunitWeekScheduleCopyOK, *PostWorkforcemanagementBusinessunitWeekScheduleCopyCreated, *PostWorkforcemanagementBusinessunitWeekScheduleCopyAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekScheduleCopy",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekScheduleCopyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekScheduleCopyOK:
		return value, nil, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekScheduleCopyCreated:
		return nil, value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekScheduleCopyAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekScheduleReschedule starts a rescheduling run
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekScheduleReschedule(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleRescheduleParams) (*PostWorkforcemanagementBusinessunitWeekScheduleRescheduleOK, *PostWorkforcemanagementBusinessunitWeekScheduleRescheduleAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekScheduleReschedule",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/reschedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekScheduleRescheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekScheduleRescheduleOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekScheduleRescheduleAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekScheduleUpdate starts processing a schedule update

Call after uploading the schedule data to the url supplied by the /update/uploadurl route
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekScheduleUpdate(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleUpdateParams) (*PostWorkforcemanagementBusinessunitWeekScheduleUpdateOK, *PostWorkforcemanagementBusinessunitWeekScheduleUpdateAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekScheduleUpdate",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekScheduleUpdateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekScheduleUpdateOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekScheduleUpdateAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl creates a signed upload URL for updating a schedule

Once the upload is complete, call the /{scheduleId}/update route to start the schedule update process
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurlParams) (*PostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurlOK, *PostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurlCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/update/uploadurl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurlReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurlOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurlCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekSchedules creates a blank schedule
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekSchedules(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekSchedulesParams) (*PostWorkforcemanagementBusinessunitWeekSchedulesOK, *PostWorkforcemanagementBusinessunitWeekSchedulesCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekSchedules",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekSchedulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekSchedulesOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekSchedulesCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekSchedulesGenerate generates a schedule
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekSchedulesGenerate(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekSchedulesGenerateParams) (*PostWorkforcemanagementBusinessunitWeekSchedulesGenerateOK, *PostWorkforcemanagementBusinessunitWeekSchedulesGenerateAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekSchedulesGenerate",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/generate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekSchedulesGenerateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekSchedulesGenerateOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekSchedulesGenerateAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekSchedulesImport starts processing a schedule import

Call after uploading the schedule data to the url supplied by the /import/uploadurl route
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekSchedulesImport(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekSchedulesImportParams) (*PostWorkforcemanagementBusinessunitWeekSchedulesImportOK, *PostWorkforcemanagementBusinessunitWeekSchedulesImportAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekSchedulesImport",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekSchedulesImportReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekSchedulesImportOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekSchedulesImportAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl creates a signed upload URL for importing a schedule

Once the upload is complete, call the /import route to start the schedule import process
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurlParams) (*PostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurlOK, *PostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurlCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/import/uploadurl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurlReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurlOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurlCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekShorttermforecastCopy copies a short term forecast
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekShorttermforecastCopy(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyParams) (*PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyOK, *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyCreated, *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekShorttermforecastCopy",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyOK:
		return value, nil, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyCreated:
		return nil, value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate generates a short term forecast
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateParams) (*PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateOK, *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateCreated, *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/generate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateOK:
		return value, nil, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateCreated:
		return nil, value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekShorttermforecastsImport starts importing the uploaded short term forecast

Call after uploading the forecast data to the url supplied by the /import/uploadurl route
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekShorttermforecastsImport(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportParams) (*PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportOK, *PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekShorttermforecastsImport",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl creates a signed upload URL for importing a short term forecast

Once the upload is complete, call the /import route to start the short term forecast import process
*/
func (a *Client) PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl(ctx context.Context, params *PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurlParams) (*PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurlOK, *PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurlCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/import/uploadurl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurlReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurlOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurlCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementBusinessunits adds a new business unit

It may take a minute or two for a new business unit to be available for api operations
*/
func (a *Client) PostWorkforcemanagementBusinessunits(ctx context.Context, params *PostWorkforcemanagementBusinessunitsParams) (*PostWorkforcemanagementBusinessunitsOK, *PostWorkforcemanagementBusinessunitsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementBusinessunits",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/businessunits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementBusinessunitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementBusinessunitsOK:
		return value, nil, nil
	case *PostWorkforcemanagementBusinessunitsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementCalendarURLIcs creates a newly generated calendar link for the current user if the current user has previously generated one the generated link will be returned
*/
func (a *Client) PostWorkforcemanagementCalendarURLIcs(ctx context.Context, params *PostWorkforcemanagementCalendarURLIcsParams) (*PostWorkforcemanagementCalendarURLIcsOK, *PostWorkforcemanagementCalendarURLIcsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementCalendarUrlIcs",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/calendar/url/ics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementCalendarURLIcsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementCalendarURLIcsOK:
		return value, nil, nil
	case *PostWorkforcemanagementCalendarURLIcsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementHistoricaldataDeletejob deletes the entries of the historical data imports in the organization
*/
func (a *Client) PostWorkforcemanagementHistoricaldataDeletejob(ctx context.Context, params *PostWorkforcemanagementHistoricaldataDeletejobParams) (*PostWorkforcemanagementHistoricaldataDeletejobAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementHistoricaldataDeletejob",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/historicaldata/deletejob",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementHistoricaldataDeletejobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementHistoricaldataDeletejobAccepted), nil

}

/*
PostWorkforcemanagementHistoricaldataValidate triggers validation process for historical import
*/
func (a *Client) PostWorkforcemanagementHistoricaldataValidate(ctx context.Context, params *PostWorkforcemanagementHistoricaldataValidateParams) (*PostWorkforcemanagementHistoricaldataValidateAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementHistoricaldataValidate",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/historicaldata/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementHistoricaldataValidateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementHistoricaldataValidateAccepted), nil

}

/*
PostWorkforcemanagementManagementunitAgentschedulesSearch queries published schedules for given given time range for set of users
*/
func (a *Client) PostWorkforcemanagementManagementunitAgentschedulesSearch(ctx context.Context, params *PostWorkforcemanagementManagementunitAgentschedulesSearchParams) (*PostWorkforcemanagementManagementunitAgentschedulesSearchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitAgentschedulesSearch",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agentschedules/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitAgentschedulesSearchReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitAgentschedulesSearchOK), nil

}

/*
PostWorkforcemanagementManagementunitHistoricaladherencequery requests a historical adherence report

The maximum supported range for historical adherence queries is 31 days, or 7 days with includeExceptions = true
*/
func (a *Client) PostWorkforcemanagementManagementunitHistoricaladherencequery(ctx context.Context, params *PostWorkforcemanagementManagementunitHistoricaladherencequeryParams) (*PostWorkforcemanagementManagementunitHistoricaladherencequeryAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitHistoricaladherencequery",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/historicaladherencequery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitHistoricaladherencequeryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitHistoricaladherencequeryAccepted), nil

}

/*
PostWorkforcemanagementManagementunitMove moves the requested management unit to a new business unit

Returns status 200 if the management unit is already in the requested business unit
*/
func (a *Client) PostWorkforcemanagementManagementunitMove(ctx context.Context, params *PostWorkforcemanagementManagementunitMoveParams) (*PostWorkforcemanagementManagementunitMoveOK, *PostWorkforcemanagementManagementunitMoveAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitMove",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitMoveReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementManagementunitMoveOK:
		return value, nil, nil
	case *PostWorkforcemanagementManagementunitMoveAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementManagementunitSchedulesSearch queries published schedules for given given time range for set of users
*/
func (a *Client) PostWorkforcemanagementManagementunitSchedulesSearch(ctx context.Context, params *PostWorkforcemanagementManagementunitSchedulesSearchParams) (*PostWorkforcemanagementManagementunitSchedulesSearchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitSchedulesSearch",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/schedules/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitSchedulesSearchReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitSchedulesSearchOK), nil

}

/*
PostWorkforcemanagementManagementunitShrinkageJobs requests a historical shrinkage report

The maximum supported range for historical shrinkage queries is up to 32 days. Historical Shrinkage for a given date range can be queried in two modes - granular and aggregated. To see granular shrinkage information, provide granularity in the request body.
*/
func (a *Client) PostWorkforcemanagementManagementunitShrinkageJobs(ctx context.Context, params *PostWorkforcemanagementManagementunitShrinkageJobsParams) (*PostWorkforcemanagementManagementunitShrinkageJobsAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitShrinkageJobs",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/shrinkage/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitShrinkageJobsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitShrinkageJobsAccepted), nil

}

/*
PostWorkforcemanagementManagementunitTimeofflimits creates a new time off limit object under management unit

Only one limit object is allowed under management unit, so an attempt to create second object will fail.
*/
func (a *Client) PostWorkforcemanagementManagementunitTimeofflimits(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeofflimitsParams) (*PostWorkforcemanagementManagementunitTimeofflimitsOK, *PostWorkforcemanagementManagementunitTimeofflimitsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitTimeofflimits",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitTimeofflimitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementManagementunitTimeofflimitsOK:
		return value, nil, nil
	case *PostWorkforcemanagementManagementunitTimeofflimitsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementManagementunitTimeofflimitsValuesQuery retrieves time off limit related values based on a given set of filters
*/
func (a *Client) PostWorkforcemanagementManagementunitTimeofflimitsValuesQuery(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeofflimitsValuesQueryParams) (*PostWorkforcemanagementManagementunitTimeofflimitsValuesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitTimeofflimitsValuesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/values/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitTimeofflimitsValuesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitTimeofflimitsValuesQueryOK), nil

}

/*
PostWorkforcemanagementManagementunitTimeoffplans creates a new time off plan
*/
func (a *Client) PostWorkforcemanagementManagementunitTimeoffplans(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeoffplansParams) (*PostWorkforcemanagementManagementunitTimeoffplansOK, *PostWorkforcemanagementManagementunitTimeoffplansCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitTimeoffplans",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitTimeoffplansReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementManagementunitTimeoffplansOK:
		return value, nil, nil
	case *PostWorkforcemanagementManagementunitTimeoffplansCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementManagementunitTimeoffrequests creates a new time off request
*/
func (a *Client) PostWorkforcemanagementManagementunitTimeoffrequests(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeoffrequestsParams) (*PostWorkforcemanagementManagementunitTimeoffrequestsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitTimeoffrequests",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitTimeoffrequestsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitTimeoffrequestsOK), nil

}

/*
PostWorkforcemanagementManagementunitTimeoffrequestsQuery fetches time off requests matching the conditions specified in the request body

Request body requires one of the following: User ID is specified, statuses == [Pending] or date range to be specified and less than or equal to 33 days.  All other fields are filters
*/
func (a *Client) PostWorkforcemanagementManagementunitTimeoffrequestsQuery(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeoffrequestsQueryParams) (*PostWorkforcemanagementManagementunitTimeoffrequestsQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitTimeoffrequestsQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitTimeoffrequestsQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitTimeoffrequestsQueryOK), nil

}

/*
PostWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery retrieves daily waitlist position for a list of time off requests
*/
func (a *Client) PostWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery(ctx context.Context, params *PostWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQueryParams) (*PostWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/waitlistpositions/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQueryOK), nil

}

/*
PostWorkforcemanagementManagementunitUserTimeoffbalanceJobs queries time off balances for a given user for specified activity code and dates
*/
func (a *Client) PostWorkforcemanagementManagementunitUserTimeoffbalanceJobs(ctx context.Context, params *PostWorkforcemanagementManagementunitUserTimeoffbalanceJobsParams) (*PostWorkforcemanagementManagementunitUserTimeoffbalanceJobsOK, *PostWorkforcemanagementManagementunitUserTimeoffbalanceJobsAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitUserTimeoffbalanceJobs",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffbalance/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitUserTimeoffbalanceJobsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementManagementunitUserTimeoffbalanceJobsOK:
		return value, nil, nil
	case *PostWorkforcemanagementManagementunitUserTimeoffbalanceJobsAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobs queries time off balances for dates spanned by a given time off request
*/
func (a *Client) PostWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobs(ctx context.Context, params *PostWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobsParams) (*PostWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobsOK, *PostWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobsAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobs",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}/timeoffbalance/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobsOK:
		return value, nil, nil
	case *PostWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobsAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementManagementunitWeekShifttradeMatch matches a shift trade this route can only be called by the receiving agent
*/
func (a *Client) PostWorkforcemanagementManagementunitWeekShifttradeMatch(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradeMatchParams) (*PostWorkforcemanagementManagementunitWeekShifttradeMatchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWeekShifttradeMatch",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}/match",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWeekShifttradeMatchReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitWeekShifttradeMatchOK), nil

}

/*
PostWorkforcemanagementManagementunitWeekShifttrades adds a shift trade
*/
func (a *Client) PostWorkforcemanagementManagementunitWeekShifttrades(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradesParams) (*PostWorkforcemanagementManagementunitWeekShifttradesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWeekShifttrades",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWeekShifttradesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitWeekShifttradesOK), nil

}

/*
PostWorkforcemanagementManagementunitWeekShifttradesSearch searches for potential shift trade matches for the current agent
*/
func (a *Client) PostWorkforcemanagementManagementunitWeekShifttradesSearch(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradesSearchParams) (*PostWorkforcemanagementManagementunitWeekShifttradesSearchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWeekShifttradesSearch",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWeekShifttradesSearchReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitWeekShifttradesSearchOK), nil

}

/*
PostWorkforcemanagementManagementunitWeekShifttradesStateBulk updates the state of a batch of shift trades

Admin functionality is not supported with "mine".
*/
func (a *Client) PostWorkforcemanagementManagementunitWeekShifttradesStateBulk(ctx context.Context, params *PostWorkforcemanagementManagementunitWeekShifttradesStateBulkParams) (*PostWorkforcemanagementManagementunitWeekShifttradesStateBulkOK, *PostWorkforcemanagementManagementunitWeekShifttradesStateBulkAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWeekShifttradesStateBulk",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/state/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWeekShifttradesStateBulkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementManagementunitWeekShifttradesStateBulkOK:
		return value, nil, nil
	case *PostWorkforcemanagementManagementunitWeekShifttradesStateBulkAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementManagementunitWorkplanCopy creates a copy of work plan
*/
func (a *Client) PostWorkforcemanagementManagementunitWorkplanCopy(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanCopyParams) (*PostWorkforcemanagementManagementunitWorkplanCopyOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWorkplanCopy",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWorkplanCopyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitWorkplanCopyOK), nil

}

/*
PostWorkforcemanagementManagementunitWorkplanValidate validates work plan
*/
func (a *Client) PostWorkforcemanagementManagementunitWorkplanValidate(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanValidateParams) (*PostWorkforcemanagementManagementunitWorkplanValidateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWorkplanValidate",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWorkplanValidateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitWorkplanValidateOK), nil

}

/*
PostWorkforcemanagementManagementunitWorkplanrotationCopy creates a copy of work plan rotation
*/
func (a *Client) PostWorkforcemanagementManagementunitWorkplanrotationCopy(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanrotationCopyParams) (*PostWorkforcemanagementManagementunitWorkplanrotationCopyOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWorkplanrotationCopy",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWorkplanrotationCopyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitWorkplanrotationCopyOK), nil

}

/*
PostWorkforcemanagementManagementunitWorkplanrotations creates a new work plan rotation
*/
func (a *Client) PostWorkforcemanagementManagementunitWorkplanrotations(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplanrotationsParams) (*PostWorkforcemanagementManagementunitWorkplanrotationsOK, *PostWorkforcemanagementManagementunitWorkplanrotationsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWorkplanrotations",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWorkplanrotationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementManagementunitWorkplanrotationsOK:
		return value, nil, nil
	case *PostWorkforcemanagementManagementunitWorkplanrotationsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementManagementunitWorkplans creates a new work plan
*/
func (a *Client) PostWorkforcemanagementManagementunitWorkplans(ctx context.Context, params *PostWorkforcemanagementManagementunitWorkplansParams) (*PostWorkforcemanagementManagementunitWorkplansOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunitWorkplans",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitWorkplansReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementManagementunitWorkplansOK), nil

}

/*
PostWorkforcemanagementManagementunits adds a management unit

It may take a minute or two for a new management unit to be available for api operations
*/
func (a *Client) PostWorkforcemanagementManagementunits(ctx context.Context, params *PostWorkforcemanagementManagementunitsParams) (*PostWorkforcemanagementManagementunitsOK, *PostWorkforcemanagementManagementunitsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementManagementunits",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/managementunits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementManagementunitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostWorkforcemanagementManagementunitsOK:
		return value, nil, nil
	case *PostWorkforcemanagementManagementunitsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostWorkforcemanagementNotificationsUpdate marks a list of notifications as read or unread
*/
func (a *Client) PostWorkforcemanagementNotificationsUpdate(ctx context.Context, params *PostWorkforcemanagementNotificationsUpdateParams) (*PostWorkforcemanagementNotificationsUpdateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementNotificationsUpdate",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/notifications/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementNotificationsUpdateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementNotificationsUpdateOK), nil

}

/*
PostWorkforcemanagementSchedules gets published schedule for the current user
*/
func (a *Client) PostWorkforcemanagementSchedules(ctx context.Context, params *PostWorkforcemanagementSchedulesParams) (*PostWorkforcemanagementSchedulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementSchedules",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementSchedulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementSchedulesOK), nil

}

/*
PostWorkforcemanagementTimeofflimitsAvailableQuery queries available time off for the current user
*/
func (a *Client) PostWorkforcemanagementTimeofflimitsAvailableQuery(ctx context.Context, params *PostWorkforcemanagementTimeofflimitsAvailableQueryParams) (*PostWorkforcemanagementTimeofflimitsAvailableQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementTimeofflimitsAvailableQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/timeofflimits/available/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementTimeofflimitsAvailableQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementTimeofflimitsAvailableQueryOK), nil

}

/*
PostWorkforcemanagementTimeoffrequests creates a time off request for the current user
*/
func (a *Client) PostWorkforcemanagementTimeoffrequests(ctx context.Context, params *PostWorkforcemanagementTimeoffrequestsParams) (*PostWorkforcemanagementTimeoffrequestsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkforcemanagementTimeoffrequests",
		Method:             "POST",
		PathPattern:        "/api/v2/workforcemanagement/timeoffrequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkforcemanagementTimeoffrequestsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkforcemanagementTimeoffrequestsOK), nil

}

/*
PutWorkforcemanagementManagementunitTimeofflimitValues sets daily values for a date range of time off limit object

Note that only limit daily values can be set through API, allocated and waitlisted values are read-only for time off limit API
*/
func (a *Client) PutWorkforcemanagementManagementunitTimeofflimitValues(ctx context.Context, params *PutWorkforcemanagementManagementunitTimeofflimitValuesParams) (*PutWorkforcemanagementManagementunitTimeofflimitValuesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putWorkforcemanagementManagementunitTimeofflimitValues",
		Method:             "PUT",
		PathPattern:        "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutWorkforcemanagementManagementunitTimeofflimitValuesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutWorkforcemanagementManagementunitTimeofflimitValuesOK), nil

}

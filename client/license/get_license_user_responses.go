// Code generated by go-swagger; DO NOT EDIT.

package license

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetLicenseUserReader is a Reader for the GetLicenseUser structure.
type GetLicenseUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLicenseUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLicenseUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLicenseUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLicenseUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLicenseUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLicenseUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetLicenseUserRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetLicenseUserRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetLicenseUserUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetLicenseUserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLicenseUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetLicenseUserServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetLicenseUserGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLicenseUserOK creates a GetLicenseUserOK with default headers values
func NewGetLicenseUserOK() *GetLicenseUserOK {
	return &GetLicenseUserOK{}
}

/*
GetLicenseUserOK describes a response with status code 200, with default header values.

successful operation
*/
type GetLicenseUserOK struct {
	Payload *models.LicenseUser
}

// IsSuccess returns true when this get license user o k response has a 2xx status code
func (o *GetLicenseUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get license user o k response has a 3xx status code
func (o *GetLicenseUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license user o k response has a 4xx status code
func (o *GetLicenseUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get license user o k response has a 5xx status code
func (o *GetLicenseUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get license user o k response a status code equal to that given
func (o *GetLicenseUserOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetLicenseUserOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserOK  %+v", 200, o.Payload)
}

func (o *GetLicenseUserOK) String() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserOK  %+v", 200, o.Payload)
}

func (o *GetLicenseUserOK) GetPayload() *models.LicenseUser {
	return o.Payload
}

func (o *GetLicenseUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LicenseUser)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUserBadRequest creates a GetLicenseUserBadRequest with default headers values
func NewGetLicenseUserBadRequest() *GetLicenseUserBadRequest {
	return &GetLicenseUserBadRequest{}
}

/*
GetLicenseUserBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetLicenseUserBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license user bad request response has a 2xx status code
func (o *GetLicenseUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license user bad request response has a 3xx status code
func (o *GetLicenseUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license user bad request response has a 4xx status code
func (o *GetLicenseUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license user bad request response has a 5xx status code
func (o *GetLicenseUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get license user bad request response a status code equal to that given
func (o *GetLicenseUserBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetLicenseUserBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserBadRequest  %+v", 400, o.Payload)
}

func (o *GetLicenseUserBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserBadRequest  %+v", 400, o.Payload)
}

func (o *GetLicenseUserBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUserUnauthorized creates a GetLicenseUserUnauthorized with default headers values
func NewGetLicenseUserUnauthorized() *GetLicenseUserUnauthorized {
	return &GetLicenseUserUnauthorized{}
}

/*
GetLicenseUserUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetLicenseUserUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license user unauthorized response has a 2xx status code
func (o *GetLicenseUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license user unauthorized response has a 3xx status code
func (o *GetLicenseUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license user unauthorized response has a 4xx status code
func (o *GetLicenseUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license user unauthorized response has a 5xx status code
func (o *GetLicenseUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get license user unauthorized response a status code equal to that given
func (o *GetLicenseUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetLicenseUserUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLicenseUserUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLicenseUserUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUserForbidden creates a GetLicenseUserForbidden with default headers values
func NewGetLicenseUserForbidden() *GetLicenseUserForbidden {
	return &GetLicenseUserForbidden{}
}

/*
GetLicenseUserForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetLicenseUserForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license user forbidden response has a 2xx status code
func (o *GetLicenseUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license user forbidden response has a 3xx status code
func (o *GetLicenseUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license user forbidden response has a 4xx status code
func (o *GetLicenseUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license user forbidden response has a 5xx status code
func (o *GetLicenseUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get license user forbidden response a status code equal to that given
func (o *GetLicenseUserForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetLicenseUserForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserForbidden  %+v", 403, o.Payload)
}

func (o *GetLicenseUserForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserForbidden  %+v", 403, o.Payload)
}

func (o *GetLicenseUserForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUserNotFound creates a GetLicenseUserNotFound with default headers values
func NewGetLicenseUserNotFound() *GetLicenseUserNotFound {
	return &GetLicenseUserNotFound{}
}

/*
GetLicenseUserNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetLicenseUserNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license user not found response has a 2xx status code
func (o *GetLicenseUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license user not found response has a 3xx status code
func (o *GetLicenseUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license user not found response has a 4xx status code
func (o *GetLicenseUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license user not found response has a 5xx status code
func (o *GetLicenseUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get license user not found response a status code equal to that given
func (o *GetLicenseUserNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetLicenseUserNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserNotFound  %+v", 404, o.Payload)
}

func (o *GetLicenseUserNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserNotFound  %+v", 404, o.Payload)
}

func (o *GetLicenseUserNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUserRequestTimeout creates a GetLicenseUserRequestTimeout with default headers values
func NewGetLicenseUserRequestTimeout() *GetLicenseUserRequestTimeout {
	return &GetLicenseUserRequestTimeout{}
}

/*
GetLicenseUserRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetLicenseUserRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license user request timeout response has a 2xx status code
func (o *GetLicenseUserRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license user request timeout response has a 3xx status code
func (o *GetLicenseUserRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license user request timeout response has a 4xx status code
func (o *GetLicenseUserRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license user request timeout response has a 5xx status code
func (o *GetLicenseUserRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get license user request timeout response a status code equal to that given
func (o *GetLicenseUserRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetLicenseUserRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetLicenseUserRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetLicenseUserRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUserRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUserRequestEntityTooLarge creates a GetLicenseUserRequestEntityTooLarge with default headers values
func NewGetLicenseUserRequestEntityTooLarge() *GetLicenseUserRequestEntityTooLarge {
	return &GetLicenseUserRequestEntityTooLarge{}
}

/*
GetLicenseUserRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetLicenseUserRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license user request entity too large response has a 2xx status code
func (o *GetLicenseUserRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license user request entity too large response has a 3xx status code
func (o *GetLicenseUserRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license user request entity too large response has a 4xx status code
func (o *GetLicenseUserRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license user request entity too large response has a 5xx status code
func (o *GetLicenseUserRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get license user request entity too large response a status code equal to that given
func (o *GetLicenseUserRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetLicenseUserRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetLicenseUserRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetLicenseUserRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUserRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUserUnsupportedMediaType creates a GetLicenseUserUnsupportedMediaType with default headers values
func NewGetLicenseUserUnsupportedMediaType() *GetLicenseUserUnsupportedMediaType {
	return &GetLicenseUserUnsupportedMediaType{}
}

/*
GetLicenseUserUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetLicenseUserUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license user unsupported media type response has a 2xx status code
func (o *GetLicenseUserUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license user unsupported media type response has a 3xx status code
func (o *GetLicenseUserUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license user unsupported media type response has a 4xx status code
func (o *GetLicenseUserUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license user unsupported media type response has a 5xx status code
func (o *GetLicenseUserUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get license user unsupported media type response a status code equal to that given
func (o *GetLicenseUserUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetLicenseUserUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetLicenseUserUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetLicenseUserUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUserUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUserTooManyRequests creates a GetLicenseUserTooManyRequests with default headers values
func NewGetLicenseUserTooManyRequests() *GetLicenseUserTooManyRequests {
	return &GetLicenseUserTooManyRequests{}
}

/*
GetLicenseUserTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetLicenseUserTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license user too many requests response has a 2xx status code
func (o *GetLicenseUserTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license user too many requests response has a 3xx status code
func (o *GetLicenseUserTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license user too many requests response has a 4xx status code
func (o *GetLicenseUserTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license user too many requests response has a 5xx status code
func (o *GetLicenseUserTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get license user too many requests response a status code equal to that given
func (o *GetLicenseUserTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetLicenseUserTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetLicenseUserTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetLicenseUserTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUserInternalServerError creates a GetLicenseUserInternalServerError with default headers values
func NewGetLicenseUserInternalServerError() *GetLicenseUserInternalServerError {
	return &GetLicenseUserInternalServerError{}
}

/*
GetLicenseUserInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetLicenseUserInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license user internal server error response has a 2xx status code
func (o *GetLicenseUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license user internal server error response has a 3xx status code
func (o *GetLicenseUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license user internal server error response has a 4xx status code
func (o *GetLicenseUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get license user internal server error response has a 5xx status code
func (o *GetLicenseUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get license user internal server error response a status code equal to that given
func (o *GetLicenseUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetLicenseUserInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLicenseUserInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLicenseUserInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUserServiceUnavailable creates a GetLicenseUserServiceUnavailable with default headers values
func NewGetLicenseUserServiceUnavailable() *GetLicenseUserServiceUnavailable {
	return &GetLicenseUserServiceUnavailable{}
}

/*
GetLicenseUserServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetLicenseUserServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license user service unavailable response has a 2xx status code
func (o *GetLicenseUserServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license user service unavailable response has a 3xx status code
func (o *GetLicenseUserServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license user service unavailable response has a 4xx status code
func (o *GetLicenseUserServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get license user service unavailable response has a 5xx status code
func (o *GetLicenseUserServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get license user service unavailable response a status code equal to that given
func (o *GetLicenseUserServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetLicenseUserServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetLicenseUserServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetLicenseUserServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUserServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUserGatewayTimeout creates a GetLicenseUserGatewayTimeout with default headers values
func NewGetLicenseUserGatewayTimeout() *GetLicenseUserGatewayTimeout {
	return &GetLicenseUserGatewayTimeout{}
}

/*
GetLicenseUserGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetLicenseUserGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license user gateway timeout response has a 2xx status code
func (o *GetLicenseUserGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license user gateway timeout response has a 3xx status code
func (o *GetLicenseUserGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license user gateway timeout response has a 4xx status code
func (o *GetLicenseUserGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get license user gateway timeout response has a 5xx status code
func (o *GetLicenseUserGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get license user gateway timeout response a status code equal to that given
func (o *GetLicenseUserGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetLicenseUserGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetLicenseUserGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/license/users/{userId}][%d] getLicenseUserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetLicenseUserGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUserGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

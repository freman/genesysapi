// Code generated by go-swagger; DO NOT EDIT.

package license

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetLicenseUsersReader is a Reader for the GetLicenseUsers structure.
type GetLicenseUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLicenseUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLicenseUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLicenseUsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLicenseUsersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLicenseUsersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLicenseUsersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetLicenseUsersRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetLicenseUsersRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetLicenseUsersUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetLicenseUsersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLicenseUsersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetLicenseUsersServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetLicenseUsersGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLicenseUsersOK creates a GetLicenseUsersOK with default headers values
func NewGetLicenseUsersOK() *GetLicenseUsersOK {
	return &GetLicenseUsersOK{}
}

/*GetLicenseUsersOK handles this case with default header values.

successful operation
*/
type GetLicenseUsersOK struct {
	Payload *models.UserLicensesEntityListing
}

func (o *GetLicenseUsersOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users][%d] getLicenseUsersOK  %+v", 200, o.Payload)
}

func (o *GetLicenseUsersOK) GetPayload() *models.UserLicensesEntityListing {
	return o.Payload
}

func (o *GetLicenseUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserLicensesEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUsersBadRequest creates a GetLicenseUsersBadRequest with default headers values
func NewGetLicenseUsersBadRequest() *GetLicenseUsersBadRequest {
	return &GetLicenseUsersBadRequest{}
}

/*GetLicenseUsersBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetLicenseUsersBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetLicenseUsersBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users][%d] getLicenseUsersBadRequest  %+v", 400, o.Payload)
}

func (o *GetLicenseUsersBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUsersUnauthorized creates a GetLicenseUsersUnauthorized with default headers values
func NewGetLicenseUsersUnauthorized() *GetLicenseUsersUnauthorized {
	return &GetLicenseUsersUnauthorized{}
}

/*GetLicenseUsersUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetLicenseUsersUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetLicenseUsersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users][%d] getLicenseUsersUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLicenseUsersUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUsersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUsersForbidden creates a GetLicenseUsersForbidden with default headers values
func NewGetLicenseUsersForbidden() *GetLicenseUsersForbidden {
	return &GetLicenseUsersForbidden{}
}

/*GetLicenseUsersForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetLicenseUsersForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetLicenseUsersForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users][%d] getLicenseUsersForbidden  %+v", 403, o.Payload)
}

func (o *GetLicenseUsersForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUsersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUsersNotFound creates a GetLicenseUsersNotFound with default headers values
func NewGetLicenseUsersNotFound() *GetLicenseUsersNotFound {
	return &GetLicenseUsersNotFound{}
}

/*GetLicenseUsersNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetLicenseUsersNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetLicenseUsersNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users][%d] getLicenseUsersNotFound  %+v", 404, o.Payload)
}

func (o *GetLicenseUsersNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUsersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUsersRequestTimeout creates a GetLicenseUsersRequestTimeout with default headers values
func NewGetLicenseUsersRequestTimeout() *GetLicenseUsersRequestTimeout {
	return &GetLicenseUsersRequestTimeout{}
}

/*GetLicenseUsersRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetLicenseUsersRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetLicenseUsersRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users][%d] getLicenseUsersRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetLicenseUsersRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUsersRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUsersRequestEntityTooLarge creates a GetLicenseUsersRequestEntityTooLarge with default headers values
func NewGetLicenseUsersRequestEntityTooLarge() *GetLicenseUsersRequestEntityTooLarge {
	return &GetLicenseUsersRequestEntityTooLarge{}
}

/*GetLicenseUsersRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetLicenseUsersRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetLicenseUsersRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users][%d] getLicenseUsersRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetLicenseUsersRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUsersRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUsersUnsupportedMediaType creates a GetLicenseUsersUnsupportedMediaType with default headers values
func NewGetLicenseUsersUnsupportedMediaType() *GetLicenseUsersUnsupportedMediaType {
	return &GetLicenseUsersUnsupportedMediaType{}
}

/*GetLicenseUsersUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetLicenseUsersUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetLicenseUsersUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users][%d] getLicenseUsersUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetLicenseUsersUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUsersUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUsersTooManyRequests creates a GetLicenseUsersTooManyRequests with default headers values
func NewGetLicenseUsersTooManyRequests() *GetLicenseUsersTooManyRequests {
	return &GetLicenseUsersTooManyRequests{}
}

/*GetLicenseUsersTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetLicenseUsersTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetLicenseUsersTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users][%d] getLicenseUsersTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetLicenseUsersTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUsersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUsersInternalServerError creates a GetLicenseUsersInternalServerError with default headers values
func NewGetLicenseUsersInternalServerError() *GetLicenseUsersInternalServerError {
	return &GetLicenseUsersInternalServerError{}
}

/*GetLicenseUsersInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetLicenseUsersInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetLicenseUsersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users][%d] getLicenseUsersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLicenseUsersInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUsersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUsersServiceUnavailable creates a GetLicenseUsersServiceUnavailable with default headers values
func NewGetLicenseUsersServiceUnavailable() *GetLicenseUsersServiceUnavailable {
	return &GetLicenseUsersServiceUnavailable{}
}

/*GetLicenseUsersServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetLicenseUsersServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetLicenseUsersServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users][%d] getLicenseUsersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetLicenseUsersServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUsersServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUsersGatewayTimeout creates a GetLicenseUsersGatewayTimeout with default headers values
func NewGetLicenseUsersGatewayTimeout() *GetLicenseUsersGatewayTimeout {
	return &GetLicenseUsersGatewayTimeout{}
}

/*GetLicenseUsersGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetLicenseUsersGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetLicenseUsersGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/users][%d] getLicenseUsersGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetLicenseUsersGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseUsersGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

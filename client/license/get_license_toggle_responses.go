// Code generated by go-swagger; DO NOT EDIT.

package license

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetLicenseToggleReader is a Reader for the GetLicenseToggle structure.
type GetLicenseToggleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLicenseToggleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLicenseToggleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLicenseToggleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLicenseToggleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLicenseToggleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLicenseToggleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetLicenseToggleRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetLicenseToggleRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetLicenseToggleUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetLicenseToggleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLicenseToggleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetLicenseToggleServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetLicenseToggleGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLicenseToggleOK creates a GetLicenseToggleOK with default headers values
func NewGetLicenseToggleOK() *GetLicenseToggleOK {
	return &GetLicenseToggleOK{}
}

/*
GetLicenseToggleOK describes a response with status code 200, with default header values.

successful operation
*/
type GetLicenseToggleOK struct {
	Payload *models.LicenseOrgToggle
}

// IsSuccess returns true when this get license toggle o k response has a 2xx status code
func (o *GetLicenseToggleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get license toggle o k response has a 3xx status code
func (o *GetLicenseToggleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license toggle o k response has a 4xx status code
func (o *GetLicenseToggleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get license toggle o k response has a 5xx status code
func (o *GetLicenseToggleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get license toggle o k response a status code equal to that given
func (o *GetLicenseToggleOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetLicenseToggleOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleOK  %+v", 200, o.Payload)
}

func (o *GetLicenseToggleOK) String() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleOK  %+v", 200, o.Payload)
}

func (o *GetLicenseToggleOK) GetPayload() *models.LicenseOrgToggle {
	return o.Payload
}

func (o *GetLicenseToggleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LicenseOrgToggle)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseToggleBadRequest creates a GetLicenseToggleBadRequest with default headers values
func NewGetLicenseToggleBadRequest() *GetLicenseToggleBadRequest {
	return &GetLicenseToggleBadRequest{}
}

/*
GetLicenseToggleBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetLicenseToggleBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license toggle bad request response has a 2xx status code
func (o *GetLicenseToggleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license toggle bad request response has a 3xx status code
func (o *GetLicenseToggleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license toggle bad request response has a 4xx status code
func (o *GetLicenseToggleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license toggle bad request response has a 5xx status code
func (o *GetLicenseToggleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get license toggle bad request response a status code equal to that given
func (o *GetLicenseToggleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetLicenseToggleBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleBadRequest  %+v", 400, o.Payload)
}

func (o *GetLicenseToggleBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleBadRequest  %+v", 400, o.Payload)
}

func (o *GetLicenseToggleBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseToggleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseToggleUnauthorized creates a GetLicenseToggleUnauthorized with default headers values
func NewGetLicenseToggleUnauthorized() *GetLicenseToggleUnauthorized {
	return &GetLicenseToggleUnauthorized{}
}

/*
GetLicenseToggleUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetLicenseToggleUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license toggle unauthorized response has a 2xx status code
func (o *GetLicenseToggleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license toggle unauthorized response has a 3xx status code
func (o *GetLicenseToggleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license toggle unauthorized response has a 4xx status code
func (o *GetLicenseToggleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license toggle unauthorized response has a 5xx status code
func (o *GetLicenseToggleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get license toggle unauthorized response a status code equal to that given
func (o *GetLicenseToggleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetLicenseToggleUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLicenseToggleUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLicenseToggleUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseToggleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseToggleForbidden creates a GetLicenseToggleForbidden with default headers values
func NewGetLicenseToggleForbidden() *GetLicenseToggleForbidden {
	return &GetLicenseToggleForbidden{}
}

/*
GetLicenseToggleForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetLicenseToggleForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license toggle forbidden response has a 2xx status code
func (o *GetLicenseToggleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license toggle forbidden response has a 3xx status code
func (o *GetLicenseToggleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license toggle forbidden response has a 4xx status code
func (o *GetLicenseToggleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license toggle forbidden response has a 5xx status code
func (o *GetLicenseToggleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get license toggle forbidden response a status code equal to that given
func (o *GetLicenseToggleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetLicenseToggleForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleForbidden  %+v", 403, o.Payload)
}

func (o *GetLicenseToggleForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleForbidden  %+v", 403, o.Payload)
}

func (o *GetLicenseToggleForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseToggleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseToggleNotFound creates a GetLicenseToggleNotFound with default headers values
func NewGetLicenseToggleNotFound() *GetLicenseToggleNotFound {
	return &GetLicenseToggleNotFound{}
}

/*
GetLicenseToggleNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetLicenseToggleNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license toggle not found response has a 2xx status code
func (o *GetLicenseToggleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license toggle not found response has a 3xx status code
func (o *GetLicenseToggleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license toggle not found response has a 4xx status code
func (o *GetLicenseToggleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license toggle not found response has a 5xx status code
func (o *GetLicenseToggleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get license toggle not found response a status code equal to that given
func (o *GetLicenseToggleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetLicenseToggleNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleNotFound  %+v", 404, o.Payload)
}

func (o *GetLicenseToggleNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleNotFound  %+v", 404, o.Payload)
}

func (o *GetLicenseToggleNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseToggleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseToggleRequestTimeout creates a GetLicenseToggleRequestTimeout with default headers values
func NewGetLicenseToggleRequestTimeout() *GetLicenseToggleRequestTimeout {
	return &GetLicenseToggleRequestTimeout{}
}

/*
GetLicenseToggleRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetLicenseToggleRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license toggle request timeout response has a 2xx status code
func (o *GetLicenseToggleRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license toggle request timeout response has a 3xx status code
func (o *GetLicenseToggleRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license toggle request timeout response has a 4xx status code
func (o *GetLicenseToggleRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license toggle request timeout response has a 5xx status code
func (o *GetLicenseToggleRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get license toggle request timeout response a status code equal to that given
func (o *GetLicenseToggleRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetLicenseToggleRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetLicenseToggleRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetLicenseToggleRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseToggleRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseToggleRequestEntityTooLarge creates a GetLicenseToggleRequestEntityTooLarge with default headers values
func NewGetLicenseToggleRequestEntityTooLarge() *GetLicenseToggleRequestEntityTooLarge {
	return &GetLicenseToggleRequestEntityTooLarge{}
}

/*
GetLicenseToggleRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetLicenseToggleRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license toggle request entity too large response has a 2xx status code
func (o *GetLicenseToggleRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license toggle request entity too large response has a 3xx status code
func (o *GetLicenseToggleRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license toggle request entity too large response has a 4xx status code
func (o *GetLicenseToggleRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license toggle request entity too large response has a 5xx status code
func (o *GetLicenseToggleRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get license toggle request entity too large response a status code equal to that given
func (o *GetLicenseToggleRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetLicenseToggleRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetLicenseToggleRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetLicenseToggleRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseToggleRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseToggleUnsupportedMediaType creates a GetLicenseToggleUnsupportedMediaType with default headers values
func NewGetLicenseToggleUnsupportedMediaType() *GetLicenseToggleUnsupportedMediaType {
	return &GetLicenseToggleUnsupportedMediaType{}
}

/*
GetLicenseToggleUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetLicenseToggleUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license toggle unsupported media type response has a 2xx status code
func (o *GetLicenseToggleUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license toggle unsupported media type response has a 3xx status code
func (o *GetLicenseToggleUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license toggle unsupported media type response has a 4xx status code
func (o *GetLicenseToggleUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license toggle unsupported media type response has a 5xx status code
func (o *GetLicenseToggleUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get license toggle unsupported media type response a status code equal to that given
func (o *GetLicenseToggleUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetLicenseToggleUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetLicenseToggleUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetLicenseToggleUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseToggleUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseToggleTooManyRequests creates a GetLicenseToggleTooManyRequests with default headers values
func NewGetLicenseToggleTooManyRequests() *GetLicenseToggleTooManyRequests {
	return &GetLicenseToggleTooManyRequests{}
}

/*
GetLicenseToggleTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetLicenseToggleTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license toggle too many requests response has a 2xx status code
func (o *GetLicenseToggleTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license toggle too many requests response has a 3xx status code
func (o *GetLicenseToggleTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license toggle too many requests response has a 4xx status code
func (o *GetLicenseToggleTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get license toggle too many requests response has a 5xx status code
func (o *GetLicenseToggleTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get license toggle too many requests response a status code equal to that given
func (o *GetLicenseToggleTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetLicenseToggleTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetLicenseToggleTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetLicenseToggleTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseToggleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseToggleInternalServerError creates a GetLicenseToggleInternalServerError with default headers values
func NewGetLicenseToggleInternalServerError() *GetLicenseToggleInternalServerError {
	return &GetLicenseToggleInternalServerError{}
}

/*
GetLicenseToggleInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetLicenseToggleInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license toggle internal server error response has a 2xx status code
func (o *GetLicenseToggleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license toggle internal server error response has a 3xx status code
func (o *GetLicenseToggleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license toggle internal server error response has a 4xx status code
func (o *GetLicenseToggleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get license toggle internal server error response has a 5xx status code
func (o *GetLicenseToggleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get license toggle internal server error response a status code equal to that given
func (o *GetLicenseToggleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetLicenseToggleInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLicenseToggleInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLicenseToggleInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseToggleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseToggleServiceUnavailable creates a GetLicenseToggleServiceUnavailable with default headers values
func NewGetLicenseToggleServiceUnavailable() *GetLicenseToggleServiceUnavailable {
	return &GetLicenseToggleServiceUnavailable{}
}

/*
GetLicenseToggleServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetLicenseToggleServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license toggle service unavailable response has a 2xx status code
func (o *GetLicenseToggleServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license toggle service unavailable response has a 3xx status code
func (o *GetLicenseToggleServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license toggle service unavailable response has a 4xx status code
func (o *GetLicenseToggleServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get license toggle service unavailable response has a 5xx status code
func (o *GetLicenseToggleServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get license toggle service unavailable response a status code equal to that given
func (o *GetLicenseToggleServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetLicenseToggleServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetLicenseToggleServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetLicenseToggleServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseToggleServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseToggleGatewayTimeout creates a GetLicenseToggleGatewayTimeout with default headers values
func NewGetLicenseToggleGatewayTimeout() *GetLicenseToggleGatewayTimeout {
	return &GetLicenseToggleGatewayTimeout{}
}

/*
GetLicenseToggleGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetLicenseToggleGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get license toggle gateway timeout response has a 2xx status code
func (o *GetLicenseToggleGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get license toggle gateway timeout response has a 3xx status code
func (o *GetLicenseToggleGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get license toggle gateway timeout response has a 4xx status code
func (o *GetLicenseToggleGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get license toggle gateway timeout response has a 5xx status code
func (o *GetLicenseToggleGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get license toggle gateway timeout response a status code equal to that given
func (o *GetLicenseToggleGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetLicenseToggleGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetLicenseToggleGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/license/toggles/{featureName}][%d] getLicenseToggleGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetLicenseToggleGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLicenseToggleGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

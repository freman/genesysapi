// Code generated by go-swagger; DO NOT EDIT.

package license

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the license client
type API interface {
	/*
	   GetLicenseDefinition gets pure cloud license definition
	*/
	GetLicenseDefinition(ctx context.Context, params *GetLicenseDefinitionParams) (*GetLicenseDefinitionOK, error)
	/*
	   GetLicenseDefinitions gets all pure cloud license definitions available for the organization
	*/
	GetLicenseDefinitions(ctx context.Context, params *GetLicenseDefinitionsParams) (*GetLicenseDefinitionsOK, error)
	/*
	   GetLicenseToggle gets pure cloud license feature toggle value
	*/
	GetLicenseToggle(ctx context.Context, params *GetLicenseToggleParams) (*GetLicenseToggleOK, error)
	/*
	   GetLicenseUser gets licenses for specified user
	*/
	GetLicenseUser(ctx context.Context, params *GetLicenseUserParams) (*GetLicenseUserOK, error)
	/*
	   GetLicenseUsers gets a page of users and their licenses
	   Retrieve a page of users in an organization along with the licenses they possess.
	*/
	GetLicenseUsers(ctx context.Context, params *GetLicenseUsersParams) (*GetLicenseUsersOK, error)
	/*
	   PostLicenseInfer gets a list of licenses inferred based on a list of role ids
	*/
	PostLicenseInfer(ctx context.Context, params *PostLicenseInferParams) (*PostLicenseInferOK, error)
	/*
	   PostLicenseOrganization updates the organization s license assignments in a batch
	*/
	PostLicenseOrganization(ctx context.Context, params *PostLicenseOrganizationParams) (*PostLicenseOrganizationOK, error)
	/*
	   PostLicenseToggle switches pure cloud license feature toggle value
	*/
	PostLicenseToggle(ctx context.Context, params *PostLicenseToggleParams) (*PostLicenseToggleOK, error)
	/*
	   PostLicenseUsers fetches user licenses in a batch
	*/
	PostLicenseUsers(ctx context.Context, params *PostLicenseUsersParams) (*PostLicenseUsersOK, error)
}

// New creates a new license API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for license API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetLicenseDefinition gets pure cloud license definition
*/
func (a *Client) GetLicenseDefinition(ctx context.Context, params *GetLicenseDefinitionParams) (*GetLicenseDefinitionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLicenseDefinition",
		Method:             "GET",
		PathPattern:        "/api/v2/license/definitions/{licenseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLicenseDefinitionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLicenseDefinitionOK), nil

}

/*
GetLicenseDefinitions gets all pure cloud license definitions available for the organization
*/
func (a *Client) GetLicenseDefinitions(ctx context.Context, params *GetLicenseDefinitionsParams) (*GetLicenseDefinitionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLicenseDefinitions",
		Method:             "GET",
		PathPattern:        "/api/v2/license/definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLicenseDefinitionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLicenseDefinitionsOK), nil

}

/*
GetLicenseToggle gets pure cloud license feature toggle value
*/
func (a *Client) GetLicenseToggle(ctx context.Context, params *GetLicenseToggleParams) (*GetLicenseToggleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLicenseToggle",
		Method:             "GET",
		PathPattern:        "/api/v2/license/toggles/{featureName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLicenseToggleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLicenseToggleOK), nil

}

/*
GetLicenseUser gets licenses for specified user
*/
func (a *Client) GetLicenseUser(ctx context.Context, params *GetLicenseUserParams) (*GetLicenseUserOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLicenseUser",
		Method:             "GET",
		PathPattern:        "/api/v2/license/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLicenseUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLicenseUserOK), nil

}

/*
GetLicenseUsers gets a page of users and their licenses

Retrieve a page of users in an organization along with the licenses they possess.
*/
func (a *Client) GetLicenseUsers(ctx context.Context, params *GetLicenseUsersParams) (*GetLicenseUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLicenseUsers",
		Method:             "GET",
		PathPattern:        "/api/v2/license/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLicenseUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLicenseUsersOK), nil

}

/*
PostLicenseInfer gets a list of licenses inferred based on a list of role ids
*/
func (a *Client) PostLicenseInfer(ctx context.Context, params *PostLicenseInferParams) (*PostLicenseInferOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLicenseInfer",
		Method:             "POST",
		PathPattern:        "/api/v2/license/infer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLicenseInferReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLicenseInferOK), nil

}

/*
PostLicenseOrganization updates the organization s license assignments in a batch
*/
func (a *Client) PostLicenseOrganization(ctx context.Context, params *PostLicenseOrganizationParams) (*PostLicenseOrganizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLicenseOrganization",
		Method:             "POST",
		PathPattern:        "/api/v2/license/organization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLicenseOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLicenseOrganizationOK), nil

}

/*
PostLicenseToggle switches pure cloud license feature toggle value
*/
func (a *Client) PostLicenseToggle(ctx context.Context, params *PostLicenseToggleParams) (*PostLicenseToggleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLicenseToggle",
		Method:             "POST",
		PathPattern:        "/api/v2/license/toggles/{featureName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLicenseToggleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLicenseToggleOK), nil

}

/*
PostLicenseUsers fetches user licenses in a batch
*/
func (a *Client) PostLicenseUsers(ctx context.Context, params *PostLicenseUsersParams) (*PostLicenseUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLicenseUsers",
		Method:             "POST",
		PathPattern:        "/api/v2/license/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLicenseUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLicenseUsersOK), nil

}

// Code generated by go-swagger; DO NOT EDIT.

package language_understanding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLanguageunderstandingDomainFeedbackFeedbackIDParams creates a new GetLanguageunderstandingDomainFeedbackFeedbackIDParams object
// with the default values initialized.
func NewGetLanguageunderstandingDomainFeedbackFeedbackIDParams() *GetLanguageunderstandingDomainFeedbackFeedbackIDParams {
	var ()
	return &GetLanguageunderstandingDomainFeedbackFeedbackIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLanguageunderstandingDomainFeedbackFeedbackIDParamsWithTimeout creates a new GetLanguageunderstandingDomainFeedbackFeedbackIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLanguageunderstandingDomainFeedbackFeedbackIDParamsWithTimeout(timeout time.Duration) *GetLanguageunderstandingDomainFeedbackFeedbackIDParams {
	var ()
	return &GetLanguageunderstandingDomainFeedbackFeedbackIDParams{

		timeout: timeout,
	}
}

// NewGetLanguageunderstandingDomainFeedbackFeedbackIDParamsWithContext creates a new GetLanguageunderstandingDomainFeedbackFeedbackIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLanguageunderstandingDomainFeedbackFeedbackIDParamsWithContext(ctx context.Context) *GetLanguageunderstandingDomainFeedbackFeedbackIDParams {
	var ()
	return &GetLanguageunderstandingDomainFeedbackFeedbackIDParams{

		Context: ctx,
	}
}

// NewGetLanguageunderstandingDomainFeedbackFeedbackIDParamsWithHTTPClient creates a new GetLanguageunderstandingDomainFeedbackFeedbackIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLanguageunderstandingDomainFeedbackFeedbackIDParamsWithHTTPClient(client *http.Client) *GetLanguageunderstandingDomainFeedbackFeedbackIDParams {
	var ()
	return &GetLanguageunderstandingDomainFeedbackFeedbackIDParams{
		HTTPClient: client,
	}
}

/*GetLanguageunderstandingDomainFeedbackFeedbackIDParams contains all the parameters to send to the API endpoint
for the get languageunderstanding domain feedback feedback Id operation typically these are written to a http.Request
*/
type GetLanguageunderstandingDomainFeedbackFeedbackIDParams struct {

	/*DomainID
	  ID of the NLU domain.

	*/
	DomainID string
	/*FeedbackID
	  ID of the Feedback

	*/
	FeedbackID string
	/*Fields
	  Fields and properties to get, comma-separated

	*/
	Fields []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get languageunderstanding domain feedback feedback Id params
func (o *GetLanguageunderstandingDomainFeedbackFeedbackIDParams) WithTimeout(timeout time.Duration) *GetLanguageunderstandingDomainFeedbackFeedbackIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get languageunderstanding domain feedback feedback Id params
func (o *GetLanguageunderstandingDomainFeedbackFeedbackIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get languageunderstanding domain feedback feedback Id params
func (o *GetLanguageunderstandingDomainFeedbackFeedbackIDParams) WithContext(ctx context.Context) *GetLanguageunderstandingDomainFeedbackFeedbackIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get languageunderstanding domain feedback feedback Id params
func (o *GetLanguageunderstandingDomainFeedbackFeedbackIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get languageunderstanding domain feedback feedback Id params
func (o *GetLanguageunderstandingDomainFeedbackFeedbackIDParams) WithHTTPClient(client *http.Client) *GetLanguageunderstandingDomainFeedbackFeedbackIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get languageunderstanding domain feedback feedback Id params
func (o *GetLanguageunderstandingDomainFeedbackFeedbackIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomainID adds the domainID to the get languageunderstanding domain feedback feedback Id params
func (o *GetLanguageunderstandingDomainFeedbackFeedbackIDParams) WithDomainID(domainID string) *GetLanguageunderstandingDomainFeedbackFeedbackIDParams {
	o.SetDomainID(domainID)
	return o
}

// SetDomainID adds the domainId to the get languageunderstanding domain feedback feedback Id params
func (o *GetLanguageunderstandingDomainFeedbackFeedbackIDParams) SetDomainID(domainID string) {
	o.DomainID = domainID
}

// WithFeedbackID adds the feedbackID to the get languageunderstanding domain feedback feedback Id params
func (o *GetLanguageunderstandingDomainFeedbackFeedbackIDParams) WithFeedbackID(feedbackID string) *GetLanguageunderstandingDomainFeedbackFeedbackIDParams {
	o.SetFeedbackID(feedbackID)
	return o
}

// SetFeedbackID adds the feedbackId to the get languageunderstanding domain feedback feedback Id params
func (o *GetLanguageunderstandingDomainFeedbackFeedbackIDParams) SetFeedbackID(feedbackID string) {
	o.FeedbackID = feedbackID
}

// WithFields adds the fields to the get languageunderstanding domain feedback feedback Id params
func (o *GetLanguageunderstandingDomainFeedbackFeedbackIDParams) WithFields(fields []string) *GetLanguageunderstandingDomainFeedbackFeedbackIDParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get languageunderstanding domain feedback feedback Id params
func (o *GetLanguageunderstandingDomainFeedbackFeedbackIDParams) SetFields(fields []string) {
	o.Fields = fields
}

// WriteToRequest writes these params to a swagger request
func (o *GetLanguageunderstandingDomainFeedbackFeedbackIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param domainId
	if err := r.SetPathParam("domainId", o.DomainID); err != nil {
		return err
	}

	// path param feedbackId
	if err := r.SetPathParam("feedbackId", o.FeedbackID); err != nil {
		return err
	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "multi")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

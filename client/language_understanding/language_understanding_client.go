// Code generated by go-swagger; DO NOT EDIT.

package language_understanding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the language understanding client
type API interface {
	/*
	   DeleteLanguageunderstandingDomain deletes an n l u domain
	*/
	DeleteLanguageunderstandingDomain(ctx context.Context, params *DeleteLanguageunderstandingDomainParams) (*DeleteLanguageunderstandingDomainNoContent, error)
	/*
	   DeleteLanguageunderstandingDomainFeedbackFeedbackID deletes the feedback on the n l u domain version
	*/
	DeleteLanguageunderstandingDomainFeedbackFeedbackID(ctx context.Context, params *DeleteLanguageunderstandingDomainFeedbackFeedbackIDParams) (*DeleteLanguageunderstandingDomainFeedbackFeedbackIDNoContent, error)
	/*
	   DeleteLanguageunderstandingDomainVersion deletes an n l u domain version
	*/
	DeleteLanguageunderstandingDomainVersion(ctx context.Context, params *DeleteLanguageunderstandingDomainVersionParams) (*DeleteLanguageunderstandingDomainVersionNoContent, error)
	/*
	   DeleteLanguageunderstandingMiner deletes a miner
	*/
	DeleteLanguageunderstandingMiner(ctx context.Context, params *DeleteLanguageunderstandingMinerParams) (*DeleteLanguageunderstandingMinerNoContent, error)
	/*
	   DeleteLanguageunderstandingMinerDraft deletes a draft
	*/
	DeleteLanguageunderstandingMinerDraft(ctx context.Context, params *DeleteLanguageunderstandingMinerDraftParams) (*DeleteLanguageunderstandingMinerDraftNoContent, error)
	/*
	   GetLanguageunderstandingDomain finds an n l u domain
	*/
	GetLanguageunderstandingDomain(ctx context.Context, params *GetLanguageunderstandingDomainParams) (*GetLanguageunderstandingDomainOK, error)
	/*
	   GetLanguageunderstandingDomainFeedback gets all feedback in the given n l u domain version
	*/
	GetLanguageunderstandingDomainFeedback(ctx context.Context, params *GetLanguageunderstandingDomainFeedbackParams) (*GetLanguageunderstandingDomainFeedbackOK, error)
	/*
	   GetLanguageunderstandingDomainFeedbackFeedbackID finds a feedback
	*/
	GetLanguageunderstandingDomainFeedbackFeedbackID(ctx context.Context, params *GetLanguageunderstandingDomainFeedbackFeedbackIDParams) (*GetLanguageunderstandingDomainFeedbackFeedbackIDOK, error)
	/*
	   GetLanguageunderstandingDomainVersion finds an n l u domain version
	*/
	GetLanguageunderstandingDomainVersion(ctx context.Context, params *GetLanguageunderstandingDomainVersionParams) (*GetLanguageunderstandingDomainVersionOK, error)
	/*
	   GetLanguageunderstandingDomainVersionReport retrieveds quality report for the specified n l u domain version
	*/
	GetLanguageunderstandingDomainVersionReport(ctx context.Context, params *GetLanguageunderstandingDomainVersionReportParams) (*GetLanguageunderstandingDomainVersionReportOK, error)
	/*
	   GetLanguageunderstandingDomainVersions gets all n l u domain versions for a given domain
	*/
	GetLanguageunderstandingDomainVersions(ctx context.Context, params *GetLanguageunderstandingDomainVersionsParams) (*GetLanguageunderstandingDomainVersionsOK, error)
	/*
	   GetLanguageunderstandingDomains gets all n l u domains
	*/
	GetLanguageunderstandingDomains(ctx context.Context, params *GetLanguageunderstandingDomainsParams) (*GetLanguageunderstandingDomainsOK, error)
	/*
	   GetLanguageunderstandingMiner gets information about a miner
	*/
	GetLanguageunderstandingMiner(ctx context.Context, params *GetLanguageunderstandingMinerParams) (*GetLanguageunderstandingMinerOK, error)
	/*
	   GetLanguageunderstandingMinerDraft gets information about a draft
	*/
	GetLanguageunderstandingMinerDraft(ctx context.Context, params *GetLanguageunderstandingMinerDraftParams) (*GetLanguageunderstandingMinerDraftOK, error)
	/*
	   GetLanguageunderstandingMinerDrafts retrieves the list of drafts created
	*/
	GetLanguageunderstandingMinerDrafts(ctx context.Context, params *GetLanguageunderstandingMinerDraftsParams) (*GetLanguageunderstandingMinerDraftsOK, error)
	/*
	   GetLanguageunderstandingMinerIntent gets information about a mined intent
	*/
	GetLanguageunderstandingMinerIntent(ctx context.Context, params *GetLanguageunderstandingMinerIntentParams) (*GetLanguageunderstandingMinerIntentOK, error)
	/*
	   GetLanguageunderstandingMinerIntents retrieves a list of mined intents
	*/
	GetLanguageunderstandingMinerIntents(ctx context.Context, params *GetLanguageunderstandingMinerIntentsParams) (*GetLanguageunderstandingMinerIntentsOK, error)
	/*
	   GetLanguageunderstandingMinerTopic retrieves details of a particular topic
	*/
	GetLanguageunderstandingMinerTopic(ctx context.Context, params *GetLanguageunderstandingMinerTopicParams) (*GetLanguageunderstandingMinerTopicOK, error)
	/*
	   GetLanguageunderstandingMinerTopicPhrase retrieves utterances related to a phrase in a topic
	*/
	GetLanguageunderstandingMinerTopicPhrase(ctx context.Context, params *GetLanguageunderstandingMinerTopicPhraseParams) (*GetLanguageunderstandingMinerTopicPhraseOK, error)
	/*
	   GetLanguageunderstandingMinerTopics retrieves a list of mined topics
	*/
	GetLanguageunderstandingMinerTopics(ctx context.Context, params *GetLanguageunderstandingMinerTopicsParams) (*GetLanguageunderstandingMinerTopicsOK, error)
	/*
	   GetLanguageunderstandingMiners retrieves the list of miners created
	*/
	GetLanguageunderstandingMiners(ctx context.Context, params *GetLanguageunderstandingMinersParams) (*GetLanguageunderstandingMinersOK, error)
	/*
	   PatchLanguageunderstandingDomain updates an n l u domain
	*/
	PatchLanguageunderstandingDomain(ctx context.Context, params *PatchLanguageunderstandingDomainParams) (*PatchLanguageunderstandingDomainOK, error)
	/*
	   PatchLanguageunderstandingMinerDraft saves information for the draft either topic draft or intent draft should be sent
	*/
	PatchLanguageunderstandingMinerDraft(ctx context.Context, params *PatchLanguageunderstandingMinerDraftParams) (*PatchLanguageunderstandingMinerDraftOK, error)
	/*
	   PostLanguageunderstandingDomainFeedback creates feedback for the n l u domain version
	*/
	PostLanguageunderstandingDomainFeedback(ctx context.Context, params *PostLanguageunderstandingDomainFeedbackParams) (*PostLanguageunderstandingDomainFeedbackOK, *PostLanguageunderstandingDomainFeedbackCreated, error)
	/*
	   PostLanguageunderstandingDomainVersionDetect detects intent entities etc in the submitted text using the specified n l u domain version
	*/
	PostLanguageunderstandingDomainVersionDetect(ctx context.Context, params *PostLanguageunderstandingDomainVersionDetectParams) (*PostLanguageunderstandingDomainVersionDetectOK, error)
	/*
	   PostLanguageunderstandingDomainVersionPublish publishes the draft n l u domain version
	*/
	PostLanguageunderstandingDomainVersionPublish(ctx context.Context, params *PostLanguageunderstandingDomainVersionPublishParams) (*PostLanguageunderstandingDomainVersionPublishOK, *PostLanguageunderstandingDomainVersionPublishCreated, error)
	/*
	   PostLanguageunderstandingDomainVersionTrain trains the draft n l u domain version
	*/
	PostLanguageunderstandingDomainVersionTrain(ctx context.Context, params *PostLanguageunderstandingDomainVersionTrainParams) (*PostLanguageunderstandingDomainVersionTrainOK, *PostLanguageunderstandingDomainVersionTrainAccepted, error)
	/*
	   PostLanguageunderstandingDomainVersions creates an n l u domain version
	*/
	PostLanguageunderstandingDomainVersions(ctx context.Context, params *PostLanguageunderstandingDomainVersionsParams) (*PostLanguageunderstandingDomainVersionsOK, *PostLanguageunderstandingDomainVersionsCreated, error)
	/*
	   PostLanguageunderstandingDomains creates an n l u domain
	*/
	PostLanguageunderstandingDomains(ctx context.Context, params *PostLanguageunderstandingDomainsParams) (*PostLanguageunderstandingDomainsOK, *PostLanguageunderstandingDomainsCreated, error)
	/*
	   PostLanguageunderstandingMinerDrafts creates a new draft resource
	*/
	PostLanguageunderstandingMinerDrafts(ctx context.Context, params *PostLanguageunderstandingMinerDraftsParams) (*PostLanguageunderstandingMinerDraftsOK, *PostLanguageunderstandingMinerDraftsCreated, error)
	/*
	   PostLanguageunderstandingMinerExecute starts the mining process specify date range pair with media type queue ids participant type for mining data from genesys cloud specify only upload key for mining through an external file
	*/
	PostLanguageunderstandingMinerExecute(ctx context.Context, params *PostLanguageunderstandingMinerExecuteParams) (*PostLanguageunderstandingMinerExecuteOK, *PostLanguageunderstandingMinerExecuteAccepted, error)
	/*
	   PostLanguageunderstandingMiners creates a unique miner
	*/
	PostLanguageunderstandingMiners(ctx context.Context, params *PostLanguageunderstandingMinersParams) (*PostLanguageunderstandingMinersOK, *PostLanguageunderstandingMinersCreated, error)
	/*
	   PutLanguageunderstandingDomainVersion updates an n l u domain version
	*/
	PutLanguageunderstandingDomainVersion(ctx context.Context, params *PutLanguageunderstandingDomainVersionParams) (*PutLanguageunderstandingDomainVersionOK, error)
}

// New creates a new language understanding API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for language understanding API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteLanguageunderstandingDomain deletes an n l u domain
*/
func (a *Client) DeleteLanguageunderstandingDomain(ctx context.Context, params *DeleteLanguageunderstandingDomainParams) (*DeleteLanguageunderstandingDomainNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteLanguageunderstandingDomain",
		Method:             "DELETE",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLanguageunderstandingDomainReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLanguageunderstandingDomainNoContent), nil

}

/*
DeleteLanguageunderstandingDomainFeedbackFeedbackID deletes the feedback on the n l u domain version
*/
func (a *Client) DeleteLanguageunderstandingDomainFeedbackFeedbackID(ctx context.Context, params *DeleteLanguageunderstandingDomainFeedbackFeedbackIDParams) (*DeleteLanguageunderstandingDomainFeedbackFeedbackIDNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteLanguageunderstandingDomainFeedbackFeedbackId",
		Method:             "DELETE",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLanguageunderstandingDomainFeedbackFeedbackIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLanguageunderstandingDomainFeedbackFeedbackIDNoContent), nil

}

/*
DeleteLanguageunderstandingDomainVersion deletes an n l u domain version
*/
func (a *Client) DeleteLanguageunderstandingDomainVersion(ctx context.Context, params *DeleteLanguageunderstandingDomainVersionParams) (*DeleteLanguageunderstandingDomainVersionNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteLanguageunderstandingDomainVersion",
		Method:             "DELETE",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLanguageunderstandingDomainVersionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLanguageunderstandingDomainVersionNoContent), nil

}

/*
DeleteLanguageunderstandingMiner deletes a miner
*/
func (a *Client) DeleteLanguageunderstandingMiner(ctx context.Context, params *DeleteLanguageunderstandingMinerParams) (*DeleteLanguageunderstandingMinerNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteLanguageunderstandingMiner",
		Method:             "DELETE",
		PathPattern:        "/api/v2/languageunderstanding/miners/{minerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLanguageunderstandingMinerReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLanguageunderstandingMinerNoContent), nil

}

/*
DeleteLanguageunderstandingMinerDraft deletes a draft
*/
func (a *Client) DeleteLanguageunderstandingMinerDraft(ctx context.Context, params *DeleteLanguageunderstandingMinerDraftParams) (*DeleteLanguageunderstandingMinerDraftNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteLanguageunderstandingMinerDraft",
		Method:             "DELETE",
		PathPattern:        "/api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLanguageunderstandingMinerDraftReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLanguageunderstandingMinerDraftNoContent), nil

}

/*
GetLanguageunderstandingDomain finds an n l u domain
*/
func (a *Client) GetLanguageunderstandingDomain(ctx context.Context, params *GetLanguageunderstandingDomainParams) (*GetLanguageunderstandingDomainOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingDomain",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingDomainReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingDomainOK), nil

}

/*
GetLanguageunderstandingDomainFeedback gets all feedback in the given n l u domain version
*/
func (a *Client) GetLanguageunderstandingDomainFeedback(ctx context.Context, params *GetLanguageunderstandingDomainFeedbackParams) (*GetLanguageunderstandingDomainFeedbackOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingDomainFeedback",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}/feedback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingDomainFeedbackReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingDomainFeedbackOK), nil

}

/*
GetLanguageunderstandingDomainFeedbackFeedbackID finds a feedback
*/
func (a *Client) GetLanguageunderstandingDomainFeedbackFeedbackID(ctx context.Context, params *GetLanguageunderstandingDomainFeedbackFeedbackIDParams) (*GetLanguageunderstandingDomainFeedbackFeedbackIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingDomainFeedbackFeedbackId",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingDomainFeedbackFeedbackIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingDomainFeedbackFeedbackIDOK), nil

}

/*
GetLanguageunderstandingDomainVersion finds an n l u domain version
*/
func (a *Client) GetLanguageunderstandingDomainVersion(ctx context.Context, params *GetLanguageunderstandingDomainVersionParams) (*GetLanguageunderstandingDomainVersionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingDomainVersion",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingDomainVersionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingDomainVersionOK), nil

}

/*
GetLanguageunderstandingDomainVersionReport retrieveds quality report for the specified n l u domain version
*/
func (a *Client) GetLanguageunderstandingDomainVersionReport(ctx context.Context, params *GetLanguageunderstandingDomainVersionReportParams) (*GetLanguageunderstandingDomainVersionReportOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingDomainVersionReport",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/report",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingDomainVersionReportReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingDomainVersionReportOK), nil

}

/*
GetLanguageunderstandingDomainVersions gets all n l u domain versions for a given domain
*/
func (a *Client) GetLanguageunderstandingDomainVersions(ctx context.Context, params *GetLanguageunderstandingDomainVersionsParams) (*GetLanguageunderstandingDomainVersionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingDomainVersions",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingDomainVersionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingDomainVersionsOK), nil

}

/*
GetLanguageunderstandingDomains gets all n l u domains
*/
func (a *Client) GetLanguageunderstandingDomains(ctx context.Context, params *GetLanguageunderstandingDomainsParams) (*GetLanguageunderstandingDomainsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingDomains",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingDomainsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingDomainsOK), nil

}

/*
GetLanguageunderstandingMiner gets information about a miner
*/
func (a *Client) GetLanguageunderstandingMiner(ctx context.Context, params *GetLanguageunderstandingMinerParams) (*GetLanguageunderstandingMinerOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingMiner",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/miners/{minerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingMinerReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingMinerOK), nil

}

/*
GetLanguageunderstandingMinerDraft gets information about a draft
*/
func (a *Client) GetLanguageunderstandingMinerDraft(ctx context.Context, params *GetLanguageunderstandingMinerDraftParams) (*GetLanguageunderstandingMinerDraftOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingMinerDraft",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingMinerDraftReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingMinerDraftOK), nil

}

/*
GetLanguageunderstandingMinerDrafts retrieves the list of drafts created
*/
func (a *Client) GetLanguageunderstandingMinerDrafts(ctx context.Context, params *GetLanguageunderstandingMinerDraftsParams) (*GetLanguageunderstandingMinerDraftsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingMinerDrafts",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/miners/{minerId}/drafts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingMinerDraftsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingMinerDraftsOK), nil

}

/*
GetLanguageunderstandingMinerIntent gets information about a mined intent
*/
func (a *Client) GetLanguageunderstandingMinerIntent(ctx context.Context, params *GetLanguageunderstandingMinerIntentParams) (*GetLanguageunderstandingMinerIntentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingMinerIntent",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/miners/{minerId}/intents/{intentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingMinerIntentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingMinerIntentOK), nil

}

/*
GetLanguageunderstandingMinerIntents retrieves a list of mined intents
*/
func (a *Client) GetLanguageunderstandingMinerIntents(ctx context.Context, params *GetLanguageunderstandingMinerIntentsParams) (*GetLanguageunderstandingMinerIntentsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingMinerIntents",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/miners/{minerId}/intents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingMinerIntentsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingMinerIntentsOK), nil

}

/*
GetLanguageunderstandingMinerTopic retrieves details of a particular topic
*/
func (a *Client) GetLanguageunderstandingMinerTopic(ctx context.Context, params *GetLanguageunderstandingMinerTopicParams) (*GetLanguageunderstandingMinerTopicOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingMinerTopic",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/miners/{minerId}/topics/{topicId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingMinerTopicReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingMinerTopicOK), nil

}

/*
GetLanguageunderstandingMinerTopicPhrase retrieves utterances related to a phrase in a topic
*/
func (a *Client) GetLanguageunderstandingMinerTopicPhrase(ctx context.Context, params *GetLanguageunderstandingMinerTopicPhraseParams) (*GetLanguageunderstandingMinerTopicPhraseOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingMinerTopicPhrase",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/miners/{minerId}/topics/{topicId}/phrases/{phraseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingMinerTopicPhraseReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingMinerTopicPhraseOK), nil

}

/*
GetLanguageunderstandingMinerTopics retrieves a list of mined topics
*/
func (a *Client) GetLanguageunderstandingMinerTopics(ctx context.Context, params *GetLanguageunderstandingMinerTopicsParams) (*GetLanguageunderstandingMinerTopicsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingMinerTopics",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/miners/{minerId}/topics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingMinerTopicsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingMinerTopicsOK), nil

}

/*
GetLanguageunderstandingMiners retrieves the list of miners created
*/
func (a *Client) GetLanguageunderstandingMiners(ctx context.Context, params *GetLanguageunderstandingMinersParams) (*GetLanguageunderstandingMinersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguageunderstandingMiners",
		Method:             "GET",
		PathPattern:        "/api/v2/languageunderstanding/miners",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLanguageunderstandingMinersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguageunderstandingMinersOK), nil

}

/*
PatchLanguageunderstandingDomain updates an n l u domain
*/
func (a *Client) PatchLanguageunderstandingDomain(ctx context.Context, params *PatchLanguageunderstandingDomainParams) (*PatchLanguageunderstandingDomainOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchLanguageunderstandingDomain",
		Method:             "PATCH",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLanguageunderstandingDomainReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchLanguageunderstandingDomainOK), nil

}

/*
PatchLanguageunderstandingMinerDraft saves information for the draft either topic draft or intent draft should be sent
*/
func (a *Client) PatchLanguageunderstandingMinerDraft(ctx context.Context, params *PatchLanguageunderstandingMinerDraftParams) (*PatchLanguageunderstandingMinerDraftOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchLanguageunderstandingMinerDraft",
		Method:             "PATCH",
		PathPattern:        "/api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLanguageunderstandingMinerDraftReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchLanguageunderstandingMinerDraftOK), nil

}

/*
PostLanguageunderstandingDomainFeedback creates feedback for the n l u domain version
*/
func (a *Client) PostLanguageunderstandingDomainFeedback(ctx context.Context, params *PostLanguageunderstandingDomainFeedbackParams) (*PostLanguageunderstandingDomainFeedbackOK, *PostLanguageunderstandingDomainFeedbackCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLanguageunderstandingDomainFeedback",
		Method:             "POST",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}/feedback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLanguageunderstandingDomainFeedbackReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostLanguageunderstandingDomainFeedbackOK:
		return value, nil, nil
	case *PostLanguageunderstandingDomainFeedbackCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostLanguageunderstandingDomainVersionDetect detects intent entities etc in the submitted text using the specified n l u domain version
*/
func (a *Client) PostLanguageunderstandingDomainVersionDetect(ctx context.Context, params *PostLanguageunderstandingDomainVersionDetectParams) (*PostLanguageunderstandingDomainVersionDetectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLanguageunderstandingDomainVersionDetect",
		Method:             "POST",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/detect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLanguageunderstandingDomainVersionDetectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLanguageunderstandingDomainVersionDetectOK), nil

}

/*
PostLanguageunderstandingDomainVersionPublish publishes the draft n l u domain version
*/
func (a *Client) PostLanguageunderstandingDomainVersionPublish(ctx context.Context, params *PostLanguageunderstandingDomainVersionPublishParams) (*PostLanguageunderstandingDomainVersionPublishOK, *PostLanguageunderstandingDomainVersionPublishCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLanguageunderstandingDomainVersionPublish",
		Method:             "POST",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/publish",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLanguageunderstandingDomainVersionPublishReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostLanguageunderstandingDomainVersionPublishOK:
		return value, nil, nil
	case *PostLanguageunderstandingDomainVersionPublishCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostLanguageunderstandingDomainVersionTrain trains the draft n l u domain version
*/
func (a *Client) PostLanguageunderstandingDomainVersionTrain(ctx context.Context, params *PostLanguageunderstandingDomainVersionTrainParams) (*PostLanguageunderstandingDomainVersionTrainOK, *PostLanguageunderstandingDomainVersionTrainAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLanguageunderstandingDomainVersionTrain",
		Method:             "POST",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/train",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLanguageunderstandingDomainVersionTrainReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostLanguageunderstandingDomainVersionTrainOK:
		return value, nil, nil
	case *PostLanguageunderstandingDomainVersionTrainAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostLanguageunderstandingDomainVersions creates an n l u domain version
*/
func (a *Client) PostLanguageunderstandingDomainVersions(ctx context.Context, params *PostLanguageunderstandingDomainVersionsParams) (*PostLanguageunderstandingDomainVersionsOK, *PostLanguageunderstandingDomainVersionsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLanguageunderstandingDomainVersions",
		Method:             "POST",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLanguageunderstandingDomainVersionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostLanguageunderstandingDomainVersionsOK:
		return value, nil, nil
	case *PostLanguageunderstandingDomainVersionsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostLanguageunderstandingDomains creates an n l u domain
*/
func (a *Client) PostLanguageunderstandingDomains(ctx context.Context, params *PostLanguageunderstandingDomainsParams) (*PostLanguageunderstandingDomainsOK, *PostLanguageunderstandingDomainsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLanguageunderstandingDomains",
		Method:             "POST",
		PathPattern:        "/api/v2/languageunderstanding/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLanguageunderstandingDomainsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostLanguageunderstandingDomainsOK:
		return value, nil, nil
	case *PostLanguageunderstandingDomainsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostLanguageunderstandingMinerDrafts creates a new draft resource
*/
func (a *Client) PostLanguageunderstandingMinerDrafts(ctx context.Context, params *PostLanguageunderstandingMinerDraftsParams) (*PostLanguageunderstandingMinerDraftsOK, *PostLanguageunderstandingMinerDraftsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLanguageunderstandingMinerDrafts",
		Method:             "POST",
		PathPattern:        "/api/v2/languageunderstanding/miners/{minerId}/drafts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLanguageunderstandingMinerDraftsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostLanguageunderstandingMinerDraftsOK:
		return value, nil, nil
	case *PostLanguageunderstandingMinerDraftsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostLanguageunderstandingMinerExecute starts the mining process specify date range pair with media type queue ids participant type for mining data from genesys cloud specify only upload key for mining through an external file
*/
func (a *Client) PostLanguageunderstandingMinerExecute(ctx context.Context, params *PostLanguageunderstandingMinerExecuteParams) (*PostLanguageunderstandingMinerExecuteOK, *PostLanguageunderstandingMinerExecuteAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLanguageunderstandingMinerExecute",
		Method:             "POST",
		PathPattern:        "/api/v2/languageunderstanding/miners/{minerId}/execute",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLanguageunderstandingMinerExecuteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostLanguageunderstandingMinerExecuteOK:
		return value, nil, nil
	case *PostLanguageunderstandingMinerExecuteAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostLanguageunderstandingMiners creates a unique miner
*/
func (a *Client) PostLanguageunderstandingMiners(ctx context.Context, params *PostLanguageunderstandingMinersParams) (*PostLanguageunderstandingMinersOK, *PostLanguageunderstandingMinersCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLanguageunderstandingMiners",
		Method:             "POST",
		PathPattern:        "/api/v2/languageunderstanding/miners",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLanguageunderstandingMinersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostLanguageunderstandingMinersOK:
		return value, nil, nil
	case *PostLanguageunderstandingMinersCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PutLanguageunderstandingDomainVersion updates an n l u domain version
*/
func (a *Client) PutLanguageunderstandingDomainVersion(ctx context.Context, params *PutLanguageunderstandingDomainVersionParams) (*PutLanguageunderstandingDomainVersionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putLanguageunderstandingDomainVersion",
		Method:             "PUT",
		PathPattern:        "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutLanguageunderstandingDomainVersionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutLanguageunderstandingDomainVersionOK), nil

}

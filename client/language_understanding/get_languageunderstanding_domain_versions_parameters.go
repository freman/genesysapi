// Code generated by go-swagger; DO NOT EDIT.

package language_understanding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLanguageunderstandingDomainVersionsParams creates a new GetLanguageunderstandingDomainVersionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetLanguageunderstandingDomainVersionsParams() *GetLanguageunderstandingDomainVersionsParams {
	return &GetLanguageunderstandingDomainVersionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetLanguageunderstandingDomainVersionsParamsWithTimeout creates a new GetLanguageunderstandingDomainVersionsParams object
// with the ability to set a timeout on a request.
func NewGetLanguageunderstandingDomainVersionsParamsWithTimeout(timeout time.Duration) *GetLanguageunderstandingDomainVersionsParams {
	return &GetLanguageunderstandingDomainVersionsParams{
		timeout: timeout,
	}
}

// NewGetLanguageunderstandingDomainVersionsParamsWithContext creates a new GetLanguageunderstandingDomainVersionsParams object
// with the ability to set a context for a request.
func NewGetLanguageunderstandingDomainVersionsParamsWithContext(ctx context.Context) *GetLanguageunderstandingDomainVersionsParams {
	return &GetLanguageunderstandingDomainVersionsParams{
		Context: ctx,
	}
}

// NewGetLanguageunderstandingDomainVersionsParamsWithHTTPClient creates a new GetLanguageunderstandingDomainVersionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetLanguageunderstandingDomainVersionsParamsWithHTTPClient(client *http.Client) *GetLanguageunderstandingDomainVersionsParams {
	return &GetLanguageunderstandingDomainVersionsParams{
		HTTPClient: client,
	}
}

/*
GetLanguageunderstandingDomainVersionsParams contains all the parameters to send to the API endpoint

	for the get languageunderstanding domain versions operation.

	Typically these are written to a http.Request.
*/
type GetLanguageunderstandingDomainVersionsParams struct {

	/* DomainID.

	   ID of the NLU domain.
	*/
	DomainID string

	/* IncludeUtterances.

	   Whether utterances for intent definition should be included when marshalling response.
	*/
	IncludeUtterances *bool

	/* PageNumber.

	   Page number

	   Format: int32
	   Default: 1
	*/
	PageNumber *int32

	/* PageSize.

	   Page size

	   Format: int32
	   Default: 25
	*/
	PageSize *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get languageunderstanding domain versions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLanguageunderstandingDomainVersionsParams) WithDefaults() *GetLanguageunderstandingDomainVersionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get languageunderstanding domain versions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLanguageunderstandingDomainVersionsParams) SetDefaults() {
	var (
		pageNumberDefault = int32(1)

		pageSizeDefault = int32(25)
	)

	val := GetLanguageunderstandingDomainVersionsParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get languageunderstanding domain versions params
func (o *GetLanguageunderstandingDomainVersionsParams) WithTimeout(timeout time.Duration) *GetLanguageunderstandingDomainVersionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get languageunderstanding domain versions params
func (o *GetLanguageunderstandingDomainVersionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get languageunderstanding domain versions params
func (o *GetLanguageunderstandingDomainVersionsParams) WithContext(ctx context.Context) *GetLanguageunderstandingDomainVersionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get languageunderstanding domain versions params
func (o *GetLanguageunderstandingDomainVersionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get languageunderstanding domain versions params
func (o *GetLanguageunderstandingDomainVersionsParams) WithHTTPClient(client *http.Client) *GetLanguageunderstandingDomainVersionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get languageunderstanding domain versions params
func (o *GetLanguageunderstandingDomainVersionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomainID adds the domainID to the get languageunderstanding domain versions params
func (o *GetLanguageunderstandingDomainVersionsParams) WithDomainID(domainID string) *GetLanguageunderstandingDomainVersionsParams {
	o.SetDomainID(domainID)
	return o
}

// SetDomainID adds the domainId to the get languageunderstanding domain versions params
func (o *GetLanguageunderstandingDomainVersionsParams) SetDomainID(domainID string) {
	o.DomainID = domainID
}

// WithIncludeUtterances adds the includeUtterances to the get languageunderstanding domain versions params
func (o *GetLanguageunderstandingDomainVersionsParams) WithIncludeUtterances(includeUtterances *bool) *GetLanguageunderstandingDomainVersionsParams {
	o.SetIncludeUtterances(includeUtterances)
	return o
}

// SetIncludeUtterances adds the includeUtterances to the get languageunderstanding domain versions params
func (o *GetLanguageunderstandingDomainVersionsParams) SetIncludeUtterances(includeUtterances *bool) {
	o.IncludeUtterances = includeUtterances
}

// WithPageNumber adds the pageNumber to the get languageunderstanding domain versions params
func (o *GetLanguageunderstandingDomainVersionsParams) WithPageNumber(pageNumber *int32) *GetLanguageunderstandingDomainVersionsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get languageunderstanding domain versions params
func (o *GetLanguageunderstandingDomainVersionsParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get languageunderstanding domain versions params
func (o *GetLanguageunderstandingDomainVersionsParams) WithPageSize(pageSize *int32) *GetLanguageunderstandingDomainVersionsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get languageunderstanding domain versions params
func (o *GetLanguageunderstandingDomainVersionsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *GetLanguageunderstandingDomainVersionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param domainId
	if err := r.SetPathParam("domainId", o.DomainID); err != nil {
		return err
	}

	if o.IncludeUtterances != nil {

		// query param includeUtterances
		var qrIncludeUtterances bool

		if o.IncludeUtterances != nil {
			qrIncludeUtterances = *o.IncludeUtterances
		}
		qIncludeUtterances := swag.FormatBool(qrIncludeUtterances)
		if qIncludeUtterances != "" {

			if err := r.SetQueryParam("includeUtterances", qIncludeUtterances); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

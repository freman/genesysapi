// Code generated by go-swagger; DO NOT EDIT.

package language_understanding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLanguageunderstandingDomainVersionParams creates a new GetLanguageunderstandingDomainVersionParams object
// with the default values initialized.
func NewGetLanguageunderstandingDomainVersionParams() *GetLanguageunderstandingDomainVersionParams {
	var ()
	return &GetLanguageunderstandingDomainVersionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLanguageunderstandingDomainVersionParamsWithTimeout creates a new GetLanguageunderstandingDomainVersionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLanguageunderstandingDomainVersionParamsWithTimeout(timeout time.Duration) *GetLanguageunderstandingDomainVersionParams {
	var ()
	return &GetLanguageunderstandingDomainVersionParams{

		timeout: timeout,
	}
}

// NewGetLanguageunderstandingDomainVersionParamsWithContext creates a new GetLanguageunderstandingDomainVersionParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLanguageunderstandingDomainVersionParamsWithContext(ctx context.Context) *GetLanguageunderstandingDomainVersionParams {
	var ()
	return &GetLanguageunderstandingDomainVersionParams{

		Context: ctx,
	}
}

// NewGetLanguageunderstandingDomainVersionParamsWithHTTPClient creates a new GetLanguageunderstandingDomainVersionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLanguageunderstandingDomainVersionParamsWithHTTPClient(client *http.Client) *GetLanguageunderstandingDomainVersionParams {
	var ()
	return &GetLanguageunderstandingDomainVersionParams{
		HTTPClient: client,
	}
}

/*GetLanguageunderstandingDomainVersionParams contains all the parameters to send to the API endpoint
for the get languageunderstanding domain version operation typically these are written to a http.Request
*/
type GetLanguageunderstandingDomainVersionParams struct {

	/*DomainID
	  ID of the NLU domain.

	*/
	DomainID string
	/*DomainVersionID
	  ID of the NLU domain version.

	*/
	DomainVersionID string
	/*IncludeUtterances
	  Whether utterances for intent definition should be included when marshalling response.

	*/
	IncludeUtterances *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get languageunderstanding domain version params
func (o *GetLanguageunderstandingDomainVersionParams) WithTimeout(timeout time.Duration) *GetLanguageunderstandingDomainVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get languageunderstanding domain version params
func (o *GetLanguageunderstandingDomainVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get languageunderstanding domain version params
func (o *GetLanguageunderstandingDomainVersionParams) WithContext(ctx context.Context) *GetLanguageunderstandingDomainVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get languageunderstanding domain version params
func (o *GetLanguageunderstandingDomainVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get languageunderstanding domain version params
func (o *GetLanguageunderstandingDomainVersionParams) WithHTTPClient(client *http.Client) *GetLanguageunderstandingDomainVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get languageunderstanding domain version params
func (o *GetLanguageunderstandingDomainVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomainID adds the domainID to the get languageunderstanding domain version params
func (o *GetLanguageunderstandingDomainVersionParams) WithDomainID(domainID string) *GetLanguageunderstandingDomainVersionParams {
	o.SetDomainID(domainID)
	return o
}

// SetDomainID adds the domainId to the get languageunderstanding domain version params
func (o *GetLanguageunderstandingDomainVersionParams) SetDomainID(domainID string) {
	o.DomainID = domainID
}

// WithDomainVersionID adds the domainVersionID to the get languageunderstanding domain version params
func (o *GetLanguageunderstandingDomainVersionParams) WithDomainVersionID(domainVersionID string) *GetLanguageunderstandingDomainVersionParams {
	o.SetDomainVersionID(domainVersionID)
	return o
}

// SetDomainVersionID adds the domainVersionId to the get languageunderstanding domain version params
func (o *GetLanguageunderstandingDomainVersionParams) SetDomainVersionID(domainVersionID string) {
	o.DomainVersionID = domainVersionID
}

// WithIncludeUtterances adds the includeUtterances to the get languageunderstanding domain version params
func (o *GetLanguageunderstandingDomainVersionParams) WithIncludeUtterances(includeUtterances *bool) *GetLanguageunderstandingDomainVersionParams {
	o.SetIncludeUtterances(includeUtterances)
	return o
}

// SetIncludeUtterances adds the includeUtterances to the get languageunderstanding domain version params
func (o *GetLanguageunderstandingDomainVersionParams) SetIncludeUtterances(includeUtterances *bool) {
	o.IncludeUtterances = includeUtterances
}

// WriteToRequest writes these params to a swagger request
func (o *GetLanguageunderstandingDomainVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param domainId
	if err := r.SetPathParam("domainId", o.DomainID); err != nil {
		return err
	}

	// path param domainVersionId
	if err := r.SetPathParam("domainVersionId", o.DomainVersionID); err != nil {
		return err
	}

	if o.IncludeUtterances != nil {

		// query param includeUtterances
		var qrIncludeUtterances bool
		if o.IncludeUtterances != nil {
			qrIncludeUtterances = *o.IncludeUtterances
		}
		qIncludeUtterances := swag.FormatBool(qrIncludeUtterances)
		if qIncludeUtterances != "" {
			if err := r.SetQueryParam("includeUtterances", qIncludeUtterances); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

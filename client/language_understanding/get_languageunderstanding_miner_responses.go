// Code generated by go-swagger; DO NOT EDIT.

package language_understanding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetLanguageunderstandingMinerReader is a Reader for the GetLanguageunderstandingMiner structure.
type GetLanguageunderstandingMinerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLanguageunderstandingMinerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLanguageunderstandingMinerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLanguageunderstandingMinerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLanguageunderstandingMinerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLanguageunderstandingMinerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLanguageunderstandingMinerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetLanguageunderstandingMinerRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetLanguageunderstandingMinerRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetLanguageunderstandingMinerUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetLanguageunderstandingMinerTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLanguageunderstandingMinerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetLanguageunderstandingMinerServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetLanguageunderstandingMinerGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLanguageunderstandingMinerOK creates a GetLanguageunderstandingMinerOK with default headers values
func NewGetLanguageunderstandingMinerOK() *GetLanguageunderstandingMinerOK {
	return &GetLanguageunderstandingMinerOK{}
}

/*GetLanguageunderstandingMinerOK handles this case with default header values.

successful operation
*/
type GetLanguageunderstandingMinerOK struct {
	Payload *models.Miner
}

func (o *GetLanguageunderstandingMinerOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}][%d] getLanguageunderstandingMinerOK  %+v", 200, o.Payload)
}

func (o *GetLanguageunderstandingMinerOK) GetPayload() *models.Miner {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Miner)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerBadRequest creates a GetLanguageunderstandingMinerBadRequest with default headers values
func NewGetLanguageunderstandingMinerBadRequest() *GetLanguageunderstandingMinerBadRequest {
	return &GetLanguageunderstandingMinerBadRequest{}
}

/*GetLanguageunderstandingMinerBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetLanguageunderstandingMinerBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}][%d] getLanguageunderstandingMinerBadRequest  %+v", 400, o.Payload)
}

func (o *GetLanguageunderstandingMinerBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerUnauthorized creates a GetLanguageunderstandingMinerUnauthorized with default headers values
func NewGetLanguageunderstandingMinerUnauthorized() *GetLanguageunderstandingMinerUnauthorized {
	return &GetLanguageunderstandingMinerUnauthorized{}
}

/*GetLanguageunderstandingMinerUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetLanguageunderstandingMinerUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}][%d] getLanguageunderstandingMinerUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLanguageunderstandingMinerUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerForbidden creates a GetLanguageunderstandingMinerForbidden with default headers values
func NewGetLanguageunderstandingMinerForbidden() *GetLanguageunderstandingMinerForbidden {
	return &GetLanguageunderstandingMinerForbidden{}
}

/*GetLanguageunderstandingMinerForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetLanguageunderstandingMinerForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}][%d] getLanguageunderstandingMinerForbidden  %+v", 403, o.Payload)
}

func (o *GetLanguageunderstandingMinerForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerNotFound creates a GetLanguageunderstandingMinerNotFound with default headers values
func NewGetLanguageunderstandingMinerNotFound() *GetLanguageunderstandingMinerNotFound {
	return &GetLanguageunderstandingMinerNotFound{}
}

/*GetLanguageunderstandingMinerNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetLanguageunderstandingMinerNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}][%d] getLanguageunderstandingMinerNotFound  %+v", 404, o.Payload)
}

func (o *GetLanguageunderstandingMinerNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerRequestTimeout creates a GetLanguageunderstandingMinerRequestTimeout with default headers values
func NewGetLanguageunderstandingMinerRequestTimeout() *GetLanguageunderstandingMinerRequestTimeout {
	return &GetLanguageunderstandingMinerRequestTimeout{}
}

/*GetLanguageunderstandingMinerRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetLanguageunderstandingMinerRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}][%d] getLanguageunderstandingMinerRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetLanguageunderstandingMinerRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerRequestEntityTooLarge creates a GetLanguageunderstandingMinerRequestEntityTooLarge with default headers values
func NewGetLanguageunderstandingMinerRequestEntityTooLarge() *GetLanguageunderstandingMinerRequestEntityTooLarge {
	return &GetLanguageunderstandingMinerRequestEntityTooLarge{}
}

/*GetLanguageunderstandingMinerRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetLanguageunderstandingMinerRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}][%d] getLanguageunderstandingMinerRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetLanguageunderstandingMinerRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerUnsupportedMediaType creates a GetLanguageunderstandingMinerUnsupportedMediaType with default headers values
func NewGetLanguageunderstandingMinerUnsupportedMediaType() *GetLanguageunderstandingMinerUnsupportedMediaType {
	return &GetLanguageunderstandingMinerUnsupportedMediaType{}
}

/*GetLanguageunderstandingMinerUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetLanguageunderstandingMinerUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}][%d] getLanguageunderstandingMinerUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetLanguageunderstandingMinerUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerTooManyRequests creates a GetLanguageunderstandingMinerTooManyRequests with default headers values
func NewGetLanguageunderstandingMinerTooManyRequests() *GetLanguageunderstandingMinerTooManyRequests {
	return &GetLanguageunderstandingMinerTooManyRequests{}
}

/*GetLanguageunderstandingMinerTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetLanguageunderstandingMinerTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}][%d] getLanguageunderstandingMinerTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetLanguageunderstandingMinerTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerInternalServerError creates a GetLanguageunderstandingMinerInternalServerError with default headers values
func NewGetLanguageunderstandingMinerInternalServerError() *GetLanguageunderstandingMinerInternalServerError {
	return &GetLanguageunderstandingMinerInternalServerError{}
}

/*GetLanguageunderstandingMinerInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetLanguageunderstandingMinerInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}][%d] getLanguageunderstandingMinerInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLanguageunderstandingMinerInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerServiceUnavailable creates a GetLanguageunderstandingMinerServiceUnavailable with default headers values
func NewGetLanguageunderstandingMinerServiceUnavailable() *GetLanguageunderstandingMinerServiceUnavailable {
	return &GetLanguageunderstandingMinerServiceUnavailable{}
}

/*GetLanguageunderstandingMinerServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetLanguageunderstandingMinerServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}][%d] getLanguageunderstandingMinerServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetLanguageunderstandingMinerServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerGatewayTimeout creates a GetLanguageunderstandingMinerGatewayTimeout with default headers values
func NewGetLanguageunderstandingMinerGatewayTimeout() *GetLanguageunderstandingMinerGatewayTimeout {
	return &GetLanguageunderstandingMinerGatewayTimeout{}
}

/*GetLanguageunderstandingMinerGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetLanguageunderstandingMinerGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}][%d] getLanguageunderstandingMinerGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetLanguageunderstandingMinerGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

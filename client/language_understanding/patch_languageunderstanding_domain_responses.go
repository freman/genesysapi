// Code generated by go-swagger; DO NOT EDIT.

package language_understanding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchLanguageunderstandingDomainReader is a Reader for the PatchLanguageunderstandingDomain structure.
type PatchLanguageunderstandingDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLanguageunderstandingDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchLanguageunderstandingDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchLanguageunderstandingDomainBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchLanguageunderstandingDomainUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchLanguageunderstandingDomainForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchLanguageunderstandingDomainNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchLanguageunderstandingDomainRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchLanguageunderstandingDomainUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchLanguageunderstandingDomainTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchLanguageunderstandingDomainInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchLanguageunderstandingDomainServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchLanguageunderstandingDomainGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchLanguageunderstandingDomainOK creates a PatchLanguageunderstandingDomainOK with default headers values
func NewPatchLanguageunderstandingDomainOK() *PatchLanguageunderstandingDomainOK {
	return &PatchLanguageunderstandingDomainOK{}
}

/*PatchLanguageunderstandingDomainOK handles this case with default header values.

successful operation
*/
type PatchLanguageunderstandingDomainOK struct {
	Payload *models.NluDomain
}

func (o *PatchLanguageunderstandingDomainOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainOK  %+v", 200, o.Payload)
}

func (o *PatchLanguageunderstandingDomainOK) GetPayload() *models.NluDomain {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NluDomain)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainBadRequest creates a PatchLanguageunderstandingDomainBadRequest with default headers values
func NewPatchLanguageunderstandingDomainBadRequest() *PatchLanguageunderstandingDomainBadRequest {
	return &PatchLanguageunderstandingDomainBadRequest{}
}

/*PatchLanguageunderstandingDomainBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchLanguageunderstandingDomainBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchLanguageunderstandingDomainBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLanguageunderstandingDomainBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainUnauthorized creates a PatchLanguageunderstandingDomainUnauthorized with default headers values
func NewPatchLanguageunderstandingDomainUnauthorized() *PatchLanguageunderstandingDomainUnauthorized {
	return &PatchLanguageunderstandingDomainUnauthorized{}
}

/*PatchLanguageunderstandingDomainUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchLanguageunderstandingDomainUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchLanguageunderstandingDomainUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchLanguageunderstandingDomainUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainForbidden creates a PatchLanguageunderstandingDomainForbidden with default headers values
func NewPatchLanguageunderstandingDomainForbidden() *PatchLanguageunderstandingDomainForbidden {
	return &PatchLanguageunderstandingDomainForbidden{}
}

/*PatchLanguageunderstandingDomainForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchLanguageunderstandingDomainForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchLanguageunderstandingDomainForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainForbidden  %+v", 403, o.Payload)
}

func (o *PatchLanguageunderstandingDomainForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainNotFound creates a PatchLanguageunderstandingDomainNotFound with default headers values
func NewPatchLanguageunderstandingDomainNotFound() *PatchLanguageunderstandingDomainNotFound {
	return &PatchLanguageunderstandingDomainNotFound{}
}

/*PatchLanguageunderstandingDomainNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchLanguageunderstandingDomainNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchLanguageunderstandingDomainNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainNotFound  %+v", 404, o.Payload)
}

func (o *PatchLanguageunderstandingDomainNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainRequestEntityTooLarge creates a PatchLanguageunderstandingDomainRequestEntityTooLarge with default headers values
func NewPatchLanguageunderstandingDomainRequestEntityTooLarge() *PatchLanguageunderstandingDomainRequestEntityTooLarge {
	return &PatchLanguageunderstandingDomainRequestEntityTooLarge{}
}

/*PatchLanguageunderstandingDomainRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PatchLanguageunderstandingDomainRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchLanguageunderstandingDomainRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchLanguageunderstandingDomainRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainUnsupportedMediaType creates a PatchLanguageunderstandingDomainUnsupportedMediaType with default headers values
func NewPatchLanguageunderstandingDomainUnsupportedMediaType() *PatchLanguageunderstandingDomainUnsupportedMediaType {
	return &PatchLanguageunderstandingDomainUnsupportedMediaType{}
}

/*PatchLanguageunderstandingDomainUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchLanguageunderstandingDomainUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchLanguageunderstandingDomainUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchLanguageunderstandingDomainUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainTooManyRequests creates a PatchLanguageunderstandingDomainTooManyRequests with default headers values
func NewPatchLanguageunderstandingDomainTooManyRequests() *PatchLanguageunderstandingDomainTooManyRequests {
	return &PatchLanguageunderstandingDomainTooManyRequests{}
}

/*PatchLanguageunderstandingDomainTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PatchLanguageunderstandingDomainTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchLanguageunderstandingDomainTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchLanguageunderstandingDomainTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainInternalServerError creates a PatchLanguageunderstandingDomainInternalServerError with default headers values
func NewPatchLanguageunderstandingDomainInternalServerError() *PatchLanguageunderstandingDomainInternalServerError {
	return &PatchLanguageunderstandingDomainInternalServerError{}
}

/*PatchLanguageunderstandingDomainInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchLanguageunderstandingDomainInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchLanguageunderstandingDomainInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchLanguageunderstandingDomainInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainServiceUnavailable creates a PatchLanguageunderstandingDomainServiceUnavailable with default headers values
func NewPatchLanguageunderstandingDomainServiceUnavailable() *PatchLanguageunderstandingDomainServiceUnavailable {
	return &PatchLanguageunderstandingDomainServiceUnavailable{}
}

/*PatchLanguageunderstandingDomainServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchLanguageunderstandingDomainServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchLanguageunderstandingDomainServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchLanguageunderstandingDomainServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainGatewayTimeout creates a PatchLanguageunderstandingDomainGatewayTimeout with default headers values
func NewPatchLanguageunderstandingDomainGatewayTimeout() *PatchLanguageunderstandingDomainGatewayTimeout {
	return &PatchLanguageunderstandingDomainGatewayTimeout{}
}

/*PatchLanguageunderstandingDomainGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchLanguageunderstandingDomainGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchLanguageunderstandingDomainGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchLanguageunderstandingDomainGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

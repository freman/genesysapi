// Code generated by go-swagger; DO NOT EDIT.

package language_understanding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchLanguageunderstandingDomainReader is a Reader for the PatchLanguageunderstandingDomain structure.
type PatchLanguageunderstandingDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLanguageunderstandingDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchLanguageunderstandingDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchLanguageunderstandingDomainBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchLanguageunderstandingDomainUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchLanguageunderstandingDomainForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchLanguageunderstandingDomainNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchLanguageunderstandingDomainRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchLanguageunderstandingDomainRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchLanguageunderstandingDomainUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchLanguageunderstandingDomainTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchLanguageunderstandingDomainInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchLanguageunderstandingDomainServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchLanguageunderstandingDomainGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchLanguageunderstandingDomainOK creates a PatchLanguageunderstandingDomainOK with default headers values
func NewPatchLanguageunderstandingDomainOK() *PatchLanguageunderstandingDomainOK {
	return &PatchLanguageunderstandingDomainOK{}
}

/*
PatchLanguageunderstandingDomainOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchLanguageunderstandingDomainOK struct {
	Payload *models.NluDomain
}

// IsSuccess returns true when this patch languageunderstanding domain o k response has a 2xx status code
func (o *PatchLanguageunderstandingDomainOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch languageunderstanding domain o k response has a 3xx status code
func (o *PatchLanguageunderstandingDomainOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch languageunderstanding domain o k response has a 4xx status code
func (o *PatchLanguageunderstandingDomainOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch languageunderstanding domain o k response has a 5xx status code
func (o *PatchLanguageunderstandingDomainOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch languageunderstanding domain o k response a status code equal to that given
func (o *PatchLanguageunderstandingDomainOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchLanguageunderstandingDomainOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainOK  %+v", 200, o.Payload)
}

func (o *PatchLanguageunderstandingDomainOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainOK  %+v", 200, o.Payload)
}

func (o *PatchLanguageunderstandingDomainOK) GetPayload() *models.NluDomain {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NluDomain)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainBadRequest creates a PatchLanguageunderstandingDomainBadRequest with default headers values
func NewPatchLanguageunderstandingDomainBadRequest() *PatchLanguageunderstandingDomainBadRequest {
	return &PatchLanguageunderstandingDomainBadRequest{}
}

/*
PatchLanguageunderstandingDomainBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchLanguageunderstandingDomainBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch languageunderstanding domain bad request response has a 2xx status code
func (o *PatchLanguageunderstandingDomainBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch languageunderstanding domain bad request response has a 3xx status code
func (o *PatchLanguageunderstandingDomainBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch languageunderstanding domain bad request response has a 4xx status code
func (o *PatchLanguageunderstandingDomainBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch languageunderstanding domain bad request response has a 5xx status code
func (o *PatchLanguageunderstandingDomainBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch languageunderstanding domain bad request response a status code equal to that given
func (o *PatchLanguageunderstandingDomainBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchLanguageunderstandingDomainBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLanguageunderstandingDomainBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainBadRequest  %+v", 400, o.Payload)
}

func (o *PatchLanguageunderstandingDomainBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainUnauthorized creates a PatchLanguageunderstandingDomainUnauthorized with default headers values
func NewPatchLanguageunderstandingDomainUnauthorized() *PatchLanguageunderstandingDomainUnauthorized {
	return &PatchLanguageunderstandingDomainUnauthorized{}
}

/*
PatchLanguageunderstandingDomainUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchLanguageunderstandingDomainUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch languageunderstanding domain unauthorized response has a 2xx status code
func (o *PatchLanguageunderstandingDomainUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch languageunderstanding domain unauthorized response has a 3xx status code
func (o *PatchLanguageunderstandingDomainUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch languageunderstanding domain unauthorized response has a 4xx status code
func (o *PatchLanguageunderstandingDomainUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch languageunderstanding domain unauthorized response has a 5xx status code
func (o *PatchLanguageunderstandingDomainUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch languageunderstanding domain unauthorized response a status code equal to that given
func (o *PatchLanguageunderstandingDomainUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchLanguageunderstandingDomainUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchLanguageunderstandingDomainUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchLanguageunderstandingDomainUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainForbidden creates a PatchLanguageunderstandingDomainForbidden with default headers values
func NewPatchLanguageunderstandingDomainForbidden() *PatchLanguageunderstandingDomainForbidden {
	return &PatchLanguageunderstandingDomainForbidden{}
}

/*
PatchLanguageunderstandingDomainForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchLanguageunderstandingDomainForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch languageunderstanding domain forbidden response has a 2xx status code
func (o *PatchLanguageunderstandingDomainForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch languageunderstanding domain forbidden response has a 3xx status code
func (o *PatchLanguageunderstandingDomainForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch languageunderstanding domain forbidden response has a 4xx status code
func (o *PatchLanguageunderstandingDomainForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch languageunderstanding domain forbidden response has a 5xx status code
func (o *PatchLanguageunderstandingDomainForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch languageunderstanding domain forbidden response a status code equal to that given
func (o *PatchLanguageunderstandingDomainForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchLanguageunderstandingDomainForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainForbidden  %+v", 403, o.Payload)
}

func (o *PatchLanguageunderstandingDomainForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainForbidden  %+v", 403, o.Payload)
}

func (o *PatchLanguageunderstandingDomainForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainNotFound creates a PatchLanguageunderstandingDomainNotFound with default headers values
func NewPatchLanguageunderstandingDomainNotFound() *PatchLanguageunderstandingDomainNotFound {
	return &PatchLanguageunderstandingDomainNotFound{}
}

/*
PatchLanguageunderstandingDomainNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchLanguageunderstandingDomainNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch languageunderstanding domain not found response has a 2xx status code
func (o *PatchLanguageunderstandingDomainNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch languageunderstanding domain not found response has a 3xx status code
func (o *PatchLanguageunderstandingDomainNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch languageunderstanding domain not found response has a 4xx status code
func (o *PatchLanguageunderstandingDomainNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch languageunderstanding domain not found response has a 5xx status code
func (o *PatchLanguageunderstandingDomainNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch languageunderstanding domain not found response a status code equal to that given
func (o *PatchLanguageunderstandingDomainNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchLanguageunderstandingDomainNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainNotFound  %+v", 404, o.Payload)
}

func (o *PatchLanguageunderstandingDomainNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainNotFound  %+v", 404, o.Payload)
}

func (o *PatchLanguageunderstandingDomainNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainRequestTimeout creates a PatchLanguageunderstandingDomainRequestTimeout with default headers values
func NewPatchLanguageunderstandingDomainRequestTimeout() *PatchLanguageunderstandingDomainRequestTimeout {
	return &PatchLanguageunderstandingDomainRequestTimeout{}
}

/*
PatchLanguageunderstandingDomainRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchLanguageunderstandingDomainRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch languageunderstanding domain request timeout response has a 2xx status code
func (o *PatchLanguageunderstandingDomainRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch languageunderstanding domain request timeout response has a 3xx status code
func (o *PatchLanguageunderstandingDomainRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch languageunderstanding domain request timeout response has a 4xx status code
func (o *PatchLanguageunderstandingDomainRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch languageunderstanding domain request timeout response has a 5xx status code
func (o *PatchLanguageunderstandingDomainRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch languageunderstanding domain request timeout response a status code equal to that given
func (o *PatchLanguageunderstandingDomainRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchLanguageunderstandingDomainRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchLanguageunderstandingDomainRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchLanguageunderstandingDomainRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainRequestEntityTooLarge creates a PatchLanguageunderstandingDomainRequestEntityTooLarge with default headers values
func NewPatchLanguageunderstandingDomainRequestEntityTooLarge() *PatchLanguageunderstandingDomainRequestEntityTooLarge {
	return &PatchLanguageunderstandingDomainRequestEntityTooLarge{}
}

/*
PatchLanguageunderstandingDomainRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchLanguageunderstandingDomainRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch languageunderstanding domain request entity too large response has a 2xx status code
func (o *PatchLanguageunderstandingDomainRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch languageunderstanding domain request entity too large response has a 3xx status code
func (o *PatchLanguageunderstandingDomainRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch languageunderstanding domain request entity too large response has a 4xx status code
func (o *PatchLanguageunderstandingDomainRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch languageunderstanding domain request entity too large response has a 5xx status code
func (o *PatchLanguageunderstandingDomainRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch languageunderstanding domain request entity too large response a status code equal to that given
func (o *PatchLanguageunderstandingDomainRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchLanguageunderstandingDomainRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchLanguageunderstandingDomainRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchLanguageunderstandingDomainRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainUnsupportedMediaType creates a PatchLanguageunderstandingDomainUnsupportedMediaType with default headers values
func NewPatchLanguageunderstandingDomainUnsupportedMediaType() *PatchLanguageunderstandingDomainUnsupportedMediaType {
	return &PatchLanguageunderstandingDomainUnsupportedMediaType{}
}

/*
PatchLanguageunderstandingDomainUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchLanguageunderstandingDomainUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch languageunderstanding domain unsupported media type response has a 2xx status code
func (o *PatchLanguageunderstandingDomainUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch languageunderstanding domain unsupported media type response has a 3xx status code
func (o *PatchLanguageunderstandingDomainUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch languageunderstanding domain unsupported media type response has a 4xx status code
func (o *PatchLanguageunderstandingDomainUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch languageunderstanding domain unsupported media type response has a 5xx status code
func (o *PatchLanguageunderstandingDomainUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch languageunderstanding domain unsupported media type response a status code equal to that given
func (o *PatchLanguageunderstandingDomainUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchLanguageunderstandingDomainUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchLanguageunderstandingDomainUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchLanguageunderstandingDomainUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainTooManyRequests creates a PatchLanguageunderstandingDomainTooManyRequests with default headers values
func NewPatchLanguageunderstandingDomainTooManyRequests() *PatchLanguageunderstandingDomainTooManyRequests {
	return &PatchLanguageunderstandingDomainTooManyRequests{}
}

/*
PatchLanguageunderstandingDomainTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchLanguageunderstandingDomainTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch languageunderstanding domain too many requests response has a 2xx status code
func (o *PatchLanguageunderstandingDomainTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch languageunderstanding domain too many requests response has a 3xx status code
func (o *PatchLanguageunderstandingDomainTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch languageunderstanding domain too many requests response has a 4xx status code
func (o *PatchLanguageunderstandingDomainTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch languageunderstanding domain too many requests response has a 5xx status code
func (o *PatchLanguageunderstandingDomainTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch languageunderstanding domain too many requests response a status code equal to that given
func (o *PatchLanguageunderstandingDomainTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchLanguageunderstandingDomainTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchLanguageunderstandingDomainTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchLanguageunderstandingDomainTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainInternalServerError creates a PatchLanguageunderstandingDomainInternalServerError with default headers values
func NewPatchLanguageunderstandingDomainInternalServerError() *PatchLanguageunderstandingDomainInternalServerError {
	return &PatchLanguageunderstandingDomainInternalServerError{}
}

/*
PatchLanguageunderstandingDomainInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchLanguageunderstandingDomainInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch languageunderstanding domain internal server error response has a 2xx status code
func (o *PatchLanguageunderstandingDomainInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch languageunderstanding domain internal server error response has a 3xx status code
func (o *PatchLanguageunderstandingDomainInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch languageunderstanding domain internal server error response has a 4xx status code
func (o *PatchLanguageunderstandingDomainInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch languageunderstanding domain internal server error response has a 5xx status code
func (o *PatchLanguageunderstandingDomainInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch languageunderstanding domain internal server error response a status code equal to that given
func (o *PatchLanguageunderstandingDomainInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchLanguageunderstandingDomainInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchLanguageunderstandingDomainInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchLanguageunderstandingDomainInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainServiceUnavailable creates a PatchLanguageunderstandingDomainServiceUnavailable with default headers values
func NewPatchLanguageunderstandingDomainServiceUnavailable() *PatchLanguageunderstandingDomainServiceUnavailable {
	return &PatchLanguageunderstandingDomainServiceUnavailable{}
}

/*
PatchLanguageunderstandingDomainServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchLanguageunderstandingDomainServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch languageunderstanding domain service unavailable response has a 2xx status code
func (o *PatchLanguageunderstandingDomainServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch languageunderstanding domain service unavailable response has a 3xx status code
func (o *PatchLanguageunderstandingDomainServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch languageunderstanding domain service unavailable response has a 4xx status code
func (o *PatchLanguageunderstandingDomainServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch languageunderstanding domain service unavailable response has a 5xx status code
func (o *PatchLanguageunderstandingDomainServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch languageunderstanding domain service unavailable response a status code equal to that given
func (o *PatchLanguageunderstandingDomainServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchLanguageunderstandingDomainServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchLanguageunderstandingDomainServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchLanguageunderstandingDomainServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchLanguageunderstandingDomainGatewayTimeout creates a PatchLanguageunderstandingDomainGatewayTimeout with default headers values
func NewPatchLanguageunderstandingDomainGatewayTimeout() *PatchLanguageunderstandingDomainGatewayTimeout {
	return &PatchLanguageunderstandingDomainGatewayTimeout{}
}

/*
PatchLanguageunderstandingDomainGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchLanguageunderstandingDomainGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch languageunderstanding domain gateway timeout response has a 2xx status code
func (o *PatchLanguageunderstandingDomainGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch languageunderstanding domain gateway timeout response has a 3xx status code
func (o *PatchLanguageunderstandingDomainGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch languageunderstanding domain gateway timeout response has a 4xx status code
func (o *PatchLanguageunderstandingDomainGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch languageunderstanding domain gateway timeout response has a 5xx status code
func (o *PatchLanguageunderstandingDomainGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch languageunderstanding domain gateway timeout response a status code equal to that given
func (o *PatchLanguageunderstandingDomainGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchLanguageunderstandingDomainGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchLanguageunderstandingDomainGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/languageunderstanding/domains/{domainId}][%d] patchLanguageunderstandingDomainGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchLanguageunderstandingDomainGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchLanguageunderstandingDomainGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

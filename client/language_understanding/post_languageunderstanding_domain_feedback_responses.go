// Code generated by go-swagger; DO NOT EDIT.

package language_understanding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostLanguageunderstandingDomainFeedbackReader is a Reader for the PostLanguageunderstandingDomainFeedback structure.
type PostLanguageunderstandingDomainFeedbackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLanguageunderstandingDomainFeedbackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostLanguageunderstandingDomainFeedbackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewPostLanguageunderstandingDomainFeedbackCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostLanguageunderstandingDomainFeedbackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostLanguageunderstandingDomainFeedbackUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostLanguageunderstandingDomainFeedbackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostLanguageunderstandingDomainFeedbackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostLanguageunderstandingDomainFeedbackRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostLanguageunderstandingDomainFeedbackRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostLanguageunderstandingDomainFeedbackUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostLanguageunderstandingDomainFeedbackTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostLanguageunderstandingDomainFeedbackInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostLanguageunderstandingDomainFeedbackServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostLanguageunderstandingDomainFeedbackGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostLanguageunderstandingDomainFeedbackOK creates a PostLanguageunderstandingDomainFeedbackOK with default headers values
func NewPostLanguageunderstandingDomainFeedbackOK() *PostLanguageunderstandingDomainFeedbackOK {
	return &PostLanguageunderstandingDomainFeedbackOK{}
}

/*PostLanguageunderstandingDomainFeedbackOK handles this case with default header values.

successful operation
*/
type PostLanguageunderstandingDomainFeedbackOK struct {
	Payload *models.NluFeedbackResponse
}

func (o *PostLanguageunderstandingDomainFeedbackOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/languageunderstanding/domains/{domainId}/feedback][%d] postLanguageunderstandingDomainFeedbackOK  %+v", 200, o.Payload)
}

func (o *PostLanguageunderstandingDomainFeedbackOK) GetPayload() *models.NluFeedbackResponse {
	return o.Payload
}

func (o *PostLanguageunderstandingDomainFeedbackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NluFeedbackResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguageunderstandingDomainFeedbackCreated creates a PostLanguageunderstandingDomainFeedbackCreated with default headers values
func NewPostLanguageunderstandingDomainFeedbackCreated() *PostLanguageunderstandingDomainFeedbackCreated {
	return &PostLanguageunderstandingDomainFeedbackCreated{}
}

/*PostLanguageunderstandingDomainFeedbackCreated handles this case with default header values.

Feedback created successfully
*/
type PostLanguageunderstandingDomainFeedbackCreated struct {
	Payload *models.NluFeedbackResponse
}

func (o *PostLanguageunderstandingDomainFeedbackCreated) Error() string {
	return fmt.Sprintf("[POST /api/v2/languageunderstanding/domains/{domainId}/feedback][%d] postLanguageunderstandingDomainFeedbackCreated  %+v", 201, o.Payload)
}

func (o *PostLanguageunderstandingDomainFeedbackCreated) GetPayload() *models.NluFeedbackResponse {
	return o.Payload
}

func (o *PostLanguageunderstandingDomainFeedbackCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NluFeedbackResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguageunderstandingDomainFeedbackBadRequest creates a PostLanguageunderstandingDomainFeedbackBadRequest with default headers values
func NewPostLanguageunderstandingDomainFeedbackBadRequest() *PostLanguageunderstandingDomainFeedbackBadRequest {
	return &PostLanguageunderstandingDomainFeedbackBadRequest{}
}

/*PostLanguageunderstandingDomainFeedbackBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostLanguageunderstandingDomainFeedbackBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostLanguageunderstandingDomainFeedbackBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/languageunderstanding/domains/{domainId}/feedback][%d] postLanguageunderstandingDomainFeedbackBadRequest  %+v", 400, o.Payload)
}

func (o *PostLanguageunderstandingDomainFeedbackBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguageunderstandingDomainFeedbackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguageunderstandingDomainFeedbackUnauthorized creates a PostLanguageunderstandingDomainFeedbackUnauthorized with default headers values
func NewPostLanguageunderstandingDomainFeedbackUnauthorized() *PostLanguageunderstandingDomainFeedbackUnauthorized {
	return &PostLanguageunderstandingDomainFeedbackUnauthorized{}
}

/*PostLanguageunderstandingDomainFeedbackUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostLanguageunderstandingDomainFeedbackUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostLanguageunderstandingDomainFeedbackUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/languageunderstanding/domains/{domainId}/feedback][%d] postLanguageunderstandingDomainFeedbackUnauthorized  %+v", 401, o.Payload)
}

func (o *PostLanguageunderstandingDomainFeedbackUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguageunderstandingDomainFeedbackUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguageunderstandingDomainFeedbackForbidden creates a PostLanguageunderstandingDomainFeedbackForbidden with default headers values
func NewPostLanguageunderstandingDomainFeedbackForbidden() *PostLanguageunderstandingDomainFeedbackForbidden {
	return &PostLanguageunderstandingDomainFeedbackForbidden{}
}

/*PostLanguageunderstandingDomainFeedbackForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostLanguageunderstandingDomainFeedbackForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostLanguageunderstandingDomainFeedbackForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/languageunderstanding/domains/{domainId}/feedback][%d] postLanguageunderstandingDomainFeedbackForbidden  %+v", 403, o.Payload)
}

func (o *PostLanguageunderstandingDomainFeedbackForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguageunderstandingDomainFeedbackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguageunderstandingDomainFeedbackNotFound creates a PostLanguageunderstandingDomainFeedbackNotFound with default headers values
func NewPostLanguageunderstandingDomainFeedbackNotFound() *PostLanguageunderstandingDomainFeedbackNotFound {
	return &PostLanguageunderstandingDomainFeedbackNotFound{}
}

/*PostLanguageunderstandingDomainFeedbackNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostLanguageunderstandingDomainFeedbackNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostLanguageunderstandingDomainFeedbackNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/languageunderstanding/domains/{domainId}/feedback][%d] postLanguageunderstandingDomainFeedbackNotFound  %+v", 404, o.Payload)
}

func (o *PostLanguageunderstandingDomainFeedbackNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguageunderstandingDomainFeedbackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguageunderstandingDomainFeedbackRequestTimeout creates a PostLanguageunderstandingDomainFeedbackRequestTimeout with default headers values
func NewPostLanguageunderstandingDomainFeedbackRequestTimeout() *PostLanguageunderstandingDomainFeedbackRequestTimeout {
	return &PostLanguageunderstandingDomainFeedbackRequestTimeout{}
}

/*PostLanguageunderstandingDomainFeedbackRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostLanguageunderstandingDomainFeedbackRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostLanguageunderstandingDomainFeedbackRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/languageunderstanding/domains/{domainId}/feedback][%d] postLanguageunderstandingDomainFeedbackRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostLanguageunderstandingDomainFeedbackRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguageunderstandingDomainFeedbackRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguageunderstandingDomainFeedbackRequestEntityTooLarge creates a PostLanguageunderstandingDomainFeedbackRequestEntityTooLarge with default headers values
func NewPostLanguageunderstandingDomainFeedbackRequestEntityTooLarge() *PostLanguageunderstandingDomainFeedbackRequestEntityTooLarge {
	return &PostLanguageunderstandingDomainFeedbackRequestEntityTooLarge{}
}

/*PostLanguageunderstandingDomainFeedbackRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PostLanguageunderstandingDomainFeedbackRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostLanguageunderstandingDomainFeedbackRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/languageunderstanding/domains/{domainId}/feedback][%d] postLanguageunderstandingDomainFeedbackRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostLanguageunderstandingDomainFeedbackRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguageunderstandingDomainFeedbackRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguageunderstandingDomainFeedbackUnsupportedMediaType creates a PostLanguageunderstandingDomainFeedbackUnsupportedMediaType with default headers values
func NewPostLanguageunderstandingDomainFeedbackUnsupportedMediaType() *PostLanguageunderstandingDomainFeedbackUnsupportedMediaType {
	return &PostLanguageunderstandingDomainFeedbackUnsupportedMediaType{}
}

/*PostLanguageunderstandingDomainFeedbackUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostLanguageunderstandingDomainFeedbackUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostLanguageunderstandingDomainFeedbackUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/languageunderstanding/domains/{domainId}/feedback][%d] postLanguageunderstandingDomainFeedbackUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostLanguageunderstandingDomainFeedbackUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguageunderstandingDomainFeedbackUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguageunderstandingDomainFeedbackTooManyRequests creates a PostLanguageunderstandingDomainFeedbackTooManyRequests with default headers values
func NewPostLanguageunderstandingDomainFeedbackTooManyRequests() *PostLanguageunderstandingDomainFeedbackTooManyRequests {
	return &PostLanguageunderstandingDomainFeedbackTooManyRequests{}
}

/*PostLanguageunderstandingDomainFeedbackTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostLanguageunderstandingDomainFeedbackTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostLanguageunderstandingDomainFeedbackTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/languageunderstanding/domains/{domainId}/feedback][%d] postLanguageunderstandingDomainFeedbackTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostLanguageunderstandingDomainFeedbackTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguageunderstandingDomainFeedbackTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguageunderstandingDomainFeedbackInternalServerError creates a PostLanguageunderstandingDomainFeedbackInternalServerError with default headers values
func NewPostLanguageunderstandingDomainFeedbackInternalServerError() *PostLanguageunderstandingDomainFeedbackInternalServerError {
	return &PostLanguageunderstandingDomainFeedbackInternalServerError{}
}

/*PostLanguageunderstandingDomainFeedbackInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostLanguageunderstandingDomainFeedbackInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostLanguageunderstandingDomainFeedbackInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/languageunderstanding/domains/{domainId}/feedback][%d] postLanguageunderstandingDomainFeedbackInternalServerError  %+v", 500, o.Payload)
}

func (o *PostLanguageunderstandingDomainFeedbackInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguageunderstandingDomainFeedbackInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguageunderstandingDomainFeedbackServiceUnavailable creates a PostLanguageunderstandingDomainFeedbackServiceUnavailable with default headers values
func NewPostLanguageunderstandingDomainFeedbackServiceUnavailable() *PostLanguageunderstandingDomainFeedbackServiceUnavailable {
	return &PostLanguageunderstandingDomainFeedbackServiceUnavailable{}
}

/*PostLanguageunderstandingDomainFeedbackServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostLanguageunderstandingDomainFeedbackServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostLanguageunderstandingDomainFeedbackServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/languageunderstanding/domains/{domainId}/feedback][%d] postLanguageunderstandingDomainFeedbackServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostLanguageunderstandingDomainFeedbackServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguageunderstandingDomainFeedbackServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLanguageunderstandingDomainFeedbackGatewayTimeout creates a PostLanguageunderstandingDomainFeedbackGatewayTimeout with default headers values
func NewPostLanguageunderstandingDomainFeedbackGatewayTimeout() *PostLanguageunderstandingDomainFeedbackGatewayTimeout {
	return &PostLanguageunderstandingDomainFeedbackGatewayTimeout{}
}

/*PostLanguageunderstandingDomainFeedbackGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostLanguageunderstandingDomainFeedbackGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostLanguageunderstandingDomainFeedbackGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/languageunderstanding/domains/{domainId}/feedback][%d] postLanguageunderstandingDomainFeedbackGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostLanguageunderstandingDomainFeedbackGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostLanguageunderstandingDomainFeedbackGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

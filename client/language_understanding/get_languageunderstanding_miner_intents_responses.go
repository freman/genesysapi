// Code generated by go-swagger; DO NOT EDIT.

package language_understanding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetLanguageunderstandingMinerIntentsReader is a Reader for the GetLanguageunderstandingMinerIntents structure.
type GetLanguageunderstandingMinerIntentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLanguageunderstandingMinerIntentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLanguageunderstandingMinerIntentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLanguageunderstandingMinerIntentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLanguageunderstandingMinerIntentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLanguageunderstandingMinerIntentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLanguageunderstandingMinerIntentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetLanguageunderstandingMinerIntentsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetLanguageunderstandingMinerIntentsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetLanguageunderstandingMinerIntentsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetLanguageunderstandingMinerIntentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLanguageunderstandingMinerIntentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetLanguageunderstandingMinerIntentsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetLanguageunderstandingMinerIntentsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLanguageunderstandingMinerIntentsOK creates a GetLanguageunderstandingMinerIntentsOK with default headers values
func NewGetLanguageunderstandingMinerIntentsOK() *GetLanguageunderstandingMinerIntentsOK {
	return &GetLanguageunderstandingMinerIntentsOK{}
}

/*GetLanguageunderstandingMinerIntentsOK handles this case with default header values.

successful operation
*/
type GetLanguageunderstandingMinerIntentsOK struct {
	Payload *models.MinedIntentsListing
}

func (o *GetLanguageunderstandingMinerIntentsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}/intents][%d] getLanguageunderstandingMinerIntentsOK  %+v", 200, o.Payload)
}

func (o *GetLanguageunderstandingMinerIntentsOK) GetPayload() *models.MinedIntentsListing {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerIntentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MinedIntentsListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerIntentsBadRequest creates a GetLanguageunderstandingMinerIntentsBadRequest with default headers values
func NewGetLanguageunderstandingMinerIntentsBadRequest() *GetLanguageunderstandingMinerIntentsBadRequest {
	return &GetLanguageunderstandingMinerIntentsBadRequest{}
}

/*GetLanguageunderstandingMinerIntentsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetLanguageunderstandingMinerIntentsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerIntentsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}/intents][%d] getLanguageunderstandingMinerIntentsBadRequest  %+v", 400, o.Payload)
}

func (o *GetLanguageunderstandingMinerIntentsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerIntentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerIntentsUnauthorized creates a GetLanguageunderstandingMinerIntentsUnauthorized with default headers values
func NewGetLanguageunderstandingMinerIntentsUnauthorized() *GetLanguageunderstandingMinerIntentsUnauthorized {
	return &GetLanguageunderstandingMinerIntentsUnauthorized{}
}

/*GetLanguageunderstandingMinerIntentsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetLanguageunderstandingMinerIntentsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerIntentsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}/intents][%d] getLanguageunderstandingMinerIntentsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLanguageunderstandingMinerIntentsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerIntentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerIntentsForbidden creates a GetLanguageunderstandingMinerIntentsForbidden with default headers values
func NewGetLanguageunderstandingMinerIntentsForbidden() *GetLanguageunderstandingMinerIntentsForbidden {
	return &GetLanguageunderstandingMinerIntentsForbidden{}
}

/*GetLanguageunderstandingMinerIntentsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetLanguageunderstandingMinerIntentsForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerIntentsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}/intents][%d] getLanguageunderstandingMinerIntentsForbidden  %+v", 403, o.Payload)
}

func (o *GetLanguageunderstandingMinerIntentsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerIntentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerIntentsNotFound creates a GetLanguageunderstandingMinerIntentsNotFound with default headers values
func NewGetLanguageunderstandingMinerIntentsNotFound() *GetLanguageunderstandingMinerIntentsNotFound {
	return &GetLanguageunderstandingMinerIntentsNotFound{}
}

/*GetLanguageunderstandingMinerIntentsNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetLanguageunderstandingMinerIntentsNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerIntentsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}/intents][%d] getLanguageunderstandingMinerIntentsNotFound  %+v", 404, o.Payload)
}

func (o *GetLanguageunderstandingMinerIntentsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerIntentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerIntentsRequestTimeout creates a GetLanguageunderstandingMinerIntentsRequestTimeout with default headers values
func NewGetLanguageunderstandingMinerIntentsRequestTimeout() *GetLanguageunderstandingMinerIntentsRequestTimeout {
	return &GetLanguageunderstandingMinerIntentsRequestTimeout{}
}

/*GetLanguageunderstandingMinerIntentsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetLanguageunderstandingMinerIntentsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerIntentsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}/intents][%d] getLanguageunderstandingMinerIntentsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetLanguageunderstandingMinerIntentsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerIntentsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerIntentsRequestEntityTooLarge creates a GetLanguageunderstandingMinerIntentsRequestEntityTooLarge with default headers values
func NewGetLanguageunderstandingMinerIntentsRequestEntityTooLarge() *GetLanguageunderstandingMinerIntentsRequestEntityTooLarge {
	return &GetLanguageunderstandingMinerIntentsRequestEntityTooLarge{}
}

/*GetLanguageunderstandingMinerIntentsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetLanguageunderstandingMinerIntentsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerIntentsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}/intents][%d] getLanguageunderstandingMinerIntentsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetLanguageunderstandingMinerIntentsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerIntentsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerIntentsUnsupportedMediaType creates a GetLanguageunderstandingMinerIntentsUnsupportedMediaType with default headers values
func NewGetLanguageunderstandingMinerIntentsUnsupportedMediaType() *GetLanguageunderstandingMinerIntentsUnsupportedMediaType {
	return &GetLanguageunderstandingMinerIntentsUnsupportedMediaType{}
}

/*GetLanguageunderstandingMinerIntentsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetLanguageunderstandingMinerIntentsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerIntentsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}/intents][%d] getLanguageunderstandingMinerIntentsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetLanguageunderstandingMinerIntentsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerIntentsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerIntentsTooManyRequests creates a GetLanguageunderstandingMinerIntentsTooManyRequests with default headers values
func NewGetLanguageunderstandingMinerIntentsTooManyRequests() *GetLanguageunderstandingMinerIntentsTooManyRequests {
	return &GetLanguageunderstandingMinerIntentsTooManyRequests{}
}

/*GetLanguageunderstandingMinerIntentsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetLanguageunderstandingMinerIntentsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerIntentsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}/intents][%d] getLanguageunderstandingMinerIntentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetLanguageunderstandingMinerIntentsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerIntentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerIntentsInternalServerError creates a GetLanguageunderstandingMinerIntentsInternalServerError with default headers values
func NewGetLanguageunderstandingMinerIntentsInternalServerError() *GetLanguageunderstandingMinerIntentsInternalServerError {
	return &GetLanguageunderstandingMinerIntentsInternalServerError{}
}

/*GetLanguageunderstandingMinerIntentsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetLanguageunderstandingMinerIntentsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerIntentsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}/intents][%d] getLanguageunderstandingMinerIntentsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLanguageunderstandingMinerIntentsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerIntentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerIntentsServiceUnavailable creates a GetLanguageunderstandingMinerIntentsServiceUnavailable with default headers values
func NewGetLanguageunderstandingMinerIntentsServiceUnavailable() *GetLanguageunderstandingMinerIntentsServiceUnavailable {
	return &GetLanguageunderstandingMinerIntentsServiceUnavailable{}
}

/*GetLanguageunderstandingMinerIntentsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetLanguageunderstandingMinerIntentsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerIntentsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}/intents][%d] getLanguageunderstandingMinerIntentsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetLanguageunderstandingMinerIntentsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerIntentsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguageunderstandingMinerIntentsGatewayTimeout creates a GetLanguageunderstandingMinerIntentsGatewayTimeout with default headers values
func NewGetLanguageunderstandingMinerIntentsGatewayTimeout() *GetLanguageunderstandingMinerIntentsGatewayTimeout {
	return &GetLanguageunderstandingMinerIntentsGatewayTimeout{}
}

/*GetLanguageunderstandingMinerIntentsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetLanguageunderstandingMinerIntentsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetLanguageunderstandingMinerIntentsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/languageunderstanding/miners/{minerId}/intents][%d] getLanguageunderstandingMinerIntentsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetLanguageunderstandingMinerIntentsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLanguageunderstandingMinerIntentsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

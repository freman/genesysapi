// Code generated by go-swagger; DO NOT EDIT.

package usage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostUsageQueryReader is a Reader for the PostUsageQuery structure.
type PostUsageQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUsageQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUsageQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewPostUsageQueryAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUsageQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostUsageQueryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostUsageQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostUsageQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostUsageQueryRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostUsageQueryRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostUsageQueryUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostUsageQueryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostUsageQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostUsageQueryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostUsageQueryGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostUsageQueryOK creates a PostUsageQueryOK with default headers values
func NewPostUsageQueryOK() *PostUsageQueryOK {
	return &PostUsageQueryOK{}
}

/*
PostUsageQueryOK describes a response with status code 200, with default header values.

successful operation
*/
type PostUsageQueryOK struct {
	Payload *models.UsageExecutionResult
}

// IsSuccess returns true when this post usage query o k response has a 2xx status code
func (o *PostUsageQueryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post usage query o k response has a 3xx status code
func (o *PostUsageQueryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post usage query o k response has a 4xx status code
func (o *PostUsageQueryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post usage query o k response has a 5xx status code
func (o *PostUsageQueryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post usage query o k response a status code equal to that given
func (o *PostUsageQueryOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostUsageQueryOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryOK  %+v", 200, o.Payload)
}

func (o *PostUsageQueryOK) String() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryOK  %+v", 200, o.Payload)
}

func (o *PostUsageQueryOK) GetPayload() *models.UsageExecutionResult {
	return o.Payload
}

func (o *PostUsageQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UsageExecutionResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryAccepted creates a PostUsageQueryAccepted with default headers values
func NewPostUsageQueryAccepted() *PostUsageQueryAccepted {
	return &PostUsageQueryAccepted{}
}

/*
PostUsageQueryAccepted describes a response with status code 202, with default header values.

Execution not completed, check back for results
*/
type PostUsageQueryAccepted struct {
	Payload *models.UsageExecutionResult
}

// IsSuccess returns true when this post usage query accepted response has a 2xx status code
func (o *PostUsageQueryAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post usage query accepted response has a 3xx status code
func (o *PostUsageQueryAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post usage query accepted response has a 4xx status code
func (o *PostUsageQueryAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this post usage query accepted response has a 5xx status code
func (o *PostUsageQueryAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this post usage query accepted response a status code equal to that given
func (o *PostUsageQueryAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PostUsageQueryAccepted) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryAccepted  %+v", 202, o.Payload)
}

func (o *PostUsageQueryAccepted) String() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryAccepted  %+v", 202, o.Payload)
}

func (o *PostUsageQueryAccepted) GetPayload() *models.UsageExecutionResult {
	return o.Payload
}

func (o *PostUsageQueryAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UsageExecutionResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryBadRequest creates a PostUsageQueryBadRequest with default headers values
func NewPostUsageQueryBadRequest() *PostUsageQueryBadRequest {
	return &PostUsageQueryBadRequest{}
}

/*
PostUsageQueryBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostUsageQueryBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post usage query bad request response has a 2xx status code
func (o *PostUsageQueryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post usage query bad request response has a 3xx status code
func (o *PostUsageQueryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post usage query bad request response has a 4xx status code
func (o *PostUsageQueryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post usage query bad request response has a 5xx status code
func (o *PostUsageQueryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post usage query bad request response a status code equal to that given
func (o *PostUsageQueryBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostUsageQueryBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryBadRequest  %+v", 400, o.Payload)
}

func (o *PostUsageQueryBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryBadRequest  %+v", 400, o.Payload)
}

func (o *PostUsageQueryBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryUnauthorized creates a PostUsageQueryUnauthorized with default headers values
func NewPostUsageQueryUnauthorized() *PostUsageQueryUnauthorized {
	return &PostUsageQueryUnauthorized{}
}

/*
PostUsageQueryUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostUsageQueryUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post usage query unauthorized response has a 2xx status code
func (o *PostUsageQueryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post usage query unauthorized response has a 3xx status code
func (o *PostUsageQueryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post usage query unauthorized response has a 4xx status code
func (o *PostUsageQueryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post usage query unauthorized response has a 5xx status code
func (o *PostUsageQueryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post usage query unauthorized response a status code equal to that given
func (o *PostUsageQueryUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostUsageQueryUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryUnauthorized  %+v", 401, o.Payload)
}

func (o *PostUsageQueryUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryUnauthorized  %+v", 401, o.Payload)
}

func (o *PostUsageQueryUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryForbidden creates a PostUsageQueryForbidden with default headers values
func NewPostUsageQueryForbidden() *PostUsageQueryForbidden {
	return &PostUsageQueryForbidden{}
}

/*
PostUsageQueryForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostUsageQueryForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post usage query forbidden response has a 2xx status code
func (o *PostUsageQueryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post usage query forbidden response has a 3xx status code
func (o *PostUsageQueryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post usage query forbidden response has a 4xx status code
func (o *PostUsageQueryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post usage query forbidden response has a 5xx status code
func (o *PostUsageQueryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post usage query forbidden response a status code equal to that given
func (o *PostUsageQueryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostUsageQueryForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryForbidden  %+v", 403, o.Payload)
}

func (o *PostUsageQueryForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryForbidden  %+v", 403, o.Payload)
}

func (o *PostUsageQueryForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryNotFound creates a PostUsageQueryNotFound with default headers values
func NewPostUsageQueryNotFound() *PostUsageQueryNotFound {
	return &PostUsageQueryNotFound{}
}

/*
PostUsageQueryNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostUsageQueryNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post usage query not found response has a 2xx status code
func (o *PostUsageQueryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post usage query not found response has a 3xx status code
func (o *PostUsageQueryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post usage query not found response has a 4xx status code
func (o *PostUsageQueryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post usage query not found response has a 5xx status code
func (o *PostUsageQueryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post usage query not found response a status code equal to that given
func (o *PostUsageQueryNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostUsageQueryNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryNotFound  %+v", 404, o.Payload)
}

func (o *PostUsageQueryNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryNotFound  %+v", 404, o.Payload)
}

func (o *PostUsageQueryNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryRequestTimeout creates a PostUsageQueryRequestTimeout with default headers values
func NewPostUsageQueryRequestTimeout() *PostUsageQueryRequestTimeout {
	return &PostUsageQueryRequestTimeout{}
}

/*
PostUsageQueryRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostUsageQueryRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post usage query request timeout response has a 2xx status code
func (o *PostUsageQueryRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post usage query request timeout response has a 3xx status code
func (o *PostUsageQueryRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post usage query request timeout response has a 4xx status code
func (o *PostUsageQueryRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post usage query request timeout response has a 5xx status code
func (o *PostUsageQueryRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post usage query request timeout response a status code equal to that given
func (o *PostUsageQueryRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostUsageQueryRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostUsageQueryRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostUsageQueryRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryRequestEntityTooLarge creates a PostUsageQueryRequestEntityTooLarge with default headers values
func NewPostUsageQueryRequestEntityTooLarge() *PostUsageQueryRequestEntityTooLarge {
	return &PostUsageQueryRequestEntityTooLarge{}
}

/*
PostUsageQueryRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostUsageQueryRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post usage query request entity too large response has a 2xx status code
func (o *PostUsageQueryRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post usage query request entity too large response has a 3xx status code
func (o *PostUsageQueryRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post usage query request entity too large response has a 4xx status code
func (o *PostUsageQueryRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post usage query request entity too large response has a 5xx status code
func (o *PostUsageQueryRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post usage query request entity too large response a status code equal to that given
func (o *PostUsageQueryRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostUsageQueryRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostUsageQueryRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostUsageQueryRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryUnsupportedMediaType creates a PostUsageQueryUnsupportedMediaType with default headers values
func NewPostUsageQueryUnsupportedMediaType() *PostUsageQueryUnsupportedMediaType {
	return &PostUsageQueryUnsupportedMediaType{}
}

/*
PostUsageQueryUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostUsageQueryUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post usage query unsupported media type response has a 2xx status code
func (o *PostUsageQueryUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post usage query unsupported media type response has a 3xx status code
func (o *PostUsageQueryUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post usage query unsupported media type response has a 4xx status code
func (o *PostUsageQueryUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post usage query unsupported media type response has a 5xx status code
func (o *PostUsageQueryUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post usage query unsupported media type response a status code equal to that given
func (o *PostUsageQueryUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostUsageQueryUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostUsageQueryUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostUsageQueryUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryTooManyRequests creates a PostUsageQueryTooManyRequests with default headers values
func NewPostUsageQueryTooManyRequests() *PostUsageQueryTooManyRequests {
	return &PostUsageQueryTooManyRequests{}
}

/*
PostUsageQueryTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostUsageQueryTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post usage query too many requests response has a 2xx status code
func (o *PostUsageQueryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post usage query too many requests response has a 3xx status code
func (o *PostUsageQueryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post usage query too many requests response has a 4xx status code
func (o *PostUsageQueryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post usage query too many requests response has a 5xx status code
func (o *PostUsageQueryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post usage query too many requests response a status code equal to that given
func (o *PostUsageQueryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostUsageQueryTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostUsageQueryTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostUsageQueryTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryInternalServerError creates a PostUsageQueryInternalServerError with default headers values
func NewPostUsageQueryInternalServerError() *PostUsageQueryInternalServerError {
	return &PostUsageQueryInternalServerError{}
}

/*
PostUsageQueryInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostUsageQueryInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post usage query internal server error response has a 2xx status code
func (o *PostUsageQueryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post usage query internal server error response has a 3xx status code
func (o *PostUsageQueryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post usage query internal server error response has a 4xx status code
func (o *PostUsageQueryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post usage query internal server error response has a 5xx status code
func (o *PostUsageQueryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post usage query internal server error response a status code equal to that given
func (o *PostUsageQueryInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostUsageQueryInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUsageQueryInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUsageQueryInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryServiceUnavailable creates a PostUsageQueryServiceUnavailable with default headers values
func NewPostUsageQueryServiceUnavailable() *PostUsageQueryServiceUnavailable {
	return &PostUsageQueryServiceUnavailable{}
}

/*
PostUsageQueryServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostUsageQueryServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post usage query service unavailable response has a 2xx status code
func (o *PostUsageQueryServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post usage query service unavailable response has a 3xx status code
func (o *PostUsageQueryServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post usage query service unavailable response has a 4xx status code
func (o *PostUsageQueryServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post usage query service unavailable response has a 5xx status code
func (o *PostUsageQueryServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post usage query service unavailable response a status code equal to that given
func (o *PostUsageQueryServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostUsageQueryServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostUsageQueryServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostUsageQueryServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryGatewayTimeout creates a PostUsageQueryGatewayTimeout with default headers values
func NewPostUsageQueryGatewayTimeout() *PostUsageQueryGatewayTimeout {
	return &PostUsageQueryGatewayTimeout{}
}

/*
PostUsageQueryGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostUsageQueryGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post usage query gateway timeout response has a 2xx status code
func (o *PostUsageQueryGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post usage query gateway timeout response has a 3xx status code
func (o *PostUsageQueryGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post usage query gateway timeout response has a 4xx status code
func (o *PostUsageQueryGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post usage query gateway timeout response has a 5xx status code
func (o *PostUsageQueryGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post usage query gateway timeout response a status code equal to that given
func (o *PostUsageQueryGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostUsageQueryGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostUsageQueryGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostUsageQueryGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package usage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostUsageQueryReader is a Reader for the PostUsageQuery structure.
type PostUsageQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUsageQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUsageQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewPostUsageQueryAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUsageQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostUsageQueryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostUsageQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostUsageQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostUsageQueryRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostUsageQueryUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostUsageQueryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostUsageQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostUsageQueryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostUsageQueryGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostUsageQueryOK creates a PostUsageQueryOK with default headers values
func NewPostUsageQueryOK() *PostUsageQueryOK {
	return &PostUsageQueryOK{}
}

/*PostUsageQueryOK handles this case with default header values.

successful operation
*/
type PostUsageQueryOK struct {
	Payload *models.UsageExecutionResult
}

func (o *PostUsageQueryOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryOK  %+v", 200, o.Payload)
}

func (o *PostUsageQueryOK) GetPayload() *models.UsageExecutionResult {
	return o.Payload
}

func (o *PostUsageQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UsageExecutionResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryAccepted creates a PostUsageQueryAccepted with default headers values
func NewPostUsageQueryAccepted() *PostUsageQueryAccepted {
	return &PostUsageQueryAccepted{}
}

/*PostUsageQueryAccepted handles this case with default header values.

Execution not completed, check back for results
*/
type PostUsageQueryAccepted struct {
	Payload *models.UsageExecutionResult
}

func (o *PostUsageQueryAccepted) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryAccepted  %+v", 202, o.Payload)
}

func (o *PostUsageQueryAccepted) GetPayload() *models.UsageExecutionResult {
	return o.Payload
}

func (o *PostUsageQueryAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UsageExecutionResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryBadRequest creates a PostUsageQueryBadRequest with default headers values
func NewPostUsageQueryBadRequest() *PostUsageQueryBadRequest {
	return &PostUsageQueryBadRequest{}
}

/*PostUsageQueryBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostUsageQueryBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostUsageQueryBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryBadRequest  %+v", 400, o.Payload)
}

func (o *PostUsageQueryBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryUnauthorized creates a PostUsageQueryUnauthorized with default headers values
func NewPostUsageQueryUnauthorized() *PostUsageQueryUnauthorized {
	return &PostUsageQueryUnauthorized{}
}

/*PostUsageQueryUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostUsageQueryUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostUsageQueryUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryUnauthorized  %+v", 401, o.Payload)
}

func (o *PostUsageQueryUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryForbidden creates a PostUsageQueryForbidden with default headers values
func NewPostUsageQueryForbidden() *PostUsageQueryForbidden {
	return &PostUsageQueryForbidden{}
}

/*PostUsageQueryForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostUsageQueryForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostUsageQueryForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryForbidden  %+v", 403, o.Payload)
}

func (o *PostUsageQueryForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryNotFound creates a PostUsageQueryNotFound with default headers values
func NewPostUsageQueryNotFound() *PostUsageQueryNotFound {
	return &PostUsageQueryNotFound{}
}

/*PostUsageQueryNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostUsageQueryNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostUsageQueryNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryNotFound  %+v", 404, o.Payload)
}

func (o *PostUsageQueryNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryRequestEntityTooLarge creates a PostUsageQueryRequestEntityTooLarge with default headers values
func NewPostUsageQueryRequestEntityTooLarge() *PostUsageQueryRequestEntityTooLarge {
	return &PostUsageQueryRequestEntityTooLarge{}
}

/*PostUsageQueryRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PostUsageQueryRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostUsageQueryRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostUsageQueryRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryUnsupportedMediaType creates a PostUsageQueryUnsupportedMediaType with default headers values
func NewPostUsageQueryUnsupportedMediaType() *PostUsageQueryUnsupportedMediaType {
	return &PostUsageQueryUnsupportedMediaType{}
}

/*PostUsageQueryUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostUsageQueryUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostUsageQueryUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostUsageQueryUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryTooManyRequests creates a PostUsageQueryTooManyRequests with default headers values
func NewPostUsageQueryTooManyRequests() *PostUsageQueryTooManyRequests {
	return &PostUsageQueryTooManyRequests{}
}

/*PostUsageQueryTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PostUsageQueryTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostUsageQueryTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostUsageQueryTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryInternalServerError creates a PostUsageQueryInternalServerError with default headers values
func NewPostUsageQueryInternalServerError() *PostUsageQueryInternalServerError {
	return &PostUsageQueryInternalServerError{}
}

/*PostUsageQueryInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostUsageQueryInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostUsageQueryInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUsageQueryInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryServiceUnavailable creates a PostUsageQueryServiceUnavailable with default headers values
func NewPostUsageQueryServiceUnavailable() *PostUsageQueryServiceUnavailable {
	return &PostUsageQueryServiceUnavailable{}
}

/*PostUsageQueryServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostUsageQueryServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostUsageQueryServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostUsageQueryServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsageQueryGatewayTimeout creates a PostUsageQueryGatewayTimeout with default headers values
func NewPostUsageQueryGatewayTimeout() *PostUsageQueryGatewayTimeout {
	return &PostUsageQueryGatewayTimeout{}
}

/*PostUsageQueryGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostUsageQueryGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostUsageQueryGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/usage/query][%d] postUsageQueryGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostUsageQueryGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUsageQueryGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

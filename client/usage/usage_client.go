// Code generated by go-swagger; DO NOT EDIT.

package usage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the usage client
type API interface {
	/*
	   GetUsageQueryExecutionIDResults gets the results of a usage query
	*/
	GetUsageQueryExecutionIDResults(ctx context.Context, params *GetUsageQueryExecutionIDResultsParams) (*GetUsageQueryExecutionIDResultsOK, error)
	/*
	   PostUsageQuery queries organization API usage
	   After calling this method, you will then need to poll for the query results based on the returned execution Id
	*/
	PostUsageQuery(ctx context.Context, params *PostUsageQueryParams) (*PostUsageQueryOK, *PostUsageQueryAccepted, error)
}

// New creates a new usage API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for usage API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetUsageQueryExecutionIDResults gets the results of a usage query
*/
func (a *Client) GetUsageQueryExecutionIDResults(ctx context.Context, params *GetUsageQueryExecutionIDResultsParams) (*GetUsageQueryExecutionIDResultsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsageQueryExecutionIdResults",
		Method:             "GET",
		PathPattern:        "/api/v2/usage/query/{executionId}/results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsageQueryExecutionIDResultsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsageQueryExecutionIDResultsOK), nil

}

/*
PostUsageQuery queries organization API usage

After calling this method, you will then need to poll for the query results based on the returned execution Id
*/
func (a *Client) PostUsageQuery(ctx context.Context, params *PostUsageQueryParams) (*PostUsageQueryOK, *PostUsageQueryAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUsageQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/usage/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsageQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostUsageQueryOK:
		return value, nil, nil
	case *PostUsageQueryAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

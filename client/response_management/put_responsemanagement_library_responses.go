// Code generated by go-swagger; DO NOT EDIT.

package response_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutResponsemanagementLibraryReader is a Reader for the PutResponsemanagementLibrary structure.
type PutResponsemanagementLibraryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutResponsemanagementLibraryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutResponsemanagementLibraryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutResponsemanagementLibraryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutResponsemanagementLibraryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutResponsemanagementLibraryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutResponsemanagementLibraryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutResponsemanagementLibraryRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutResponsemanagementLibraryConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutResponsemanagementLibraryRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutResponsemanagementLibraryUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutResponsemanagementLibraryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutResponsemanagementLibraryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutResponsemanagementLibraryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutResponsemanagementLibraryGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutResponsemanagementLibraryOK creates a PutResponsemanagementLibraryOK with default headers values
func NewPutResponsemanagementLibraryOK() *PutResponsemanagementLibraryOK {
	return &PutResponsemanagementLibraryOK{}
}

/*
PutResponsemanagementLibraryOK describes a response with status code 200, with default header values.

successful operation
*/
type PutResponsemanagementLibraryOK struct {
	Payload *models.Library
}

// IsSuccess returns true when this put responsemanagement library o k response has a 2xx status code
func (o *PutResponsemanagementLibraryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put responsemanagement library o k response has a 3xx status code
func (o *PutResponsemanagementLibraryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put responsemanagement library o k response has a 4xx status code
func (o *PutResponsemanagementLibraryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put responsemanagement library o k response has a 5xx status code
func (o *PutResponsemanagementLibraryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put responsemanagement library o k response a status code equal to that given
func (o *PutResponsemanagementLibraryOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutResponsemanagementLibraryOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryOK  %+v", 200, o.Payload)
}

func (o *PutResponsemanagementLibraryOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryOK  %+v", 200, o.Payload)
}

func (o *PutResponsemanagementLibraryOK) GetPayload() *models.Library {
	return o.Payload
}

func (o *PutResponsemanagementLibraryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Library)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResponsemanagementLibraryBadRequest creates a PutResponsemanagementLibraryBadRequest with default headers values
func NewPutResponsemanagementLibraryBadRequest() *PutResponsemanagementLibraryBadRequest {
	return &PutResponsemanagementLibraryBadRequest{}
}

/*
PutResponsemanagementLibraryBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutResponsemanagementLibraryBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put responsemanagement library bad request response has a 2xx status code
func (o *PutResponsemanagementLibraryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put responsemanagement library bad request response has a 3xx status code
func (o *PutResponsemanagementLibraryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put responsemanagement library bad request response has a 4xx status code
func (o *PutResponsemanagementLibraryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put responsemanagement library bad request response has a 5xx status code
func (o *PutResponsemanagementLibraryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put responsemanagement library bad request response a status code equal to that given
func (o *PutResponsemanagementLibraryBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutResponsemanagementLibraryBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryBadRequest  %+v", 400, o.Payload)
}

func (o *PutResponsemanagementLibraryBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryBadRequest  %+v", 400, o.Payload)
}

func (o *PutResponsemanagementLibraryBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutResponsemanagementLibraryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResponsemanagementLibraryUnauthorized creates a PutResponsemanagementLibraryUnauthorized with default headers values
func NewPutResponsemanagementLibraryUnauthorized() *PutResponsemanagementLibraryUnauthorized {
	return &PutResponsemanagementLibraryUnauthorized{}
}

/*
PutResponsemanagementLibraryUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutResponsemanagementLibraryUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put responsemanagement library unauthorized response has a 2xx status code
func (o *PutResponsemanagementLibraryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put responsemanagement library unauthorized response has a 3xx status code
func (o *PutResponsemanagementLibraryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put responsemanagement library unauthorized response has a 4xx status code
func (o *PutResponsemanagementLibraryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put responsemanagement library unauthorized response has a 5xx status code
func (o *PutResponsemanagementLibraryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put responsemanagement library unauthorized response a status code equal to that given
func (o *PutResponsemanagementLibraryUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutResponsemanagementLibraryUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryUnauthorized  %+v", 401, o.Payload)
}

func (o *PutResponsemanagementLibraryUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryUnauthorized  %+v", 401, o.Payload)
}

func (o *PutResponsemanagementLibraryUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutResponsemanagementLibraryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResponsemanagementLibraryForbidden creates a PutResponsemanagementLibraryForbidden with default headers values
func NewPutResponsemanagementLibraryForbidden() *PutResponsemanagementLibraryForbidden {
	return &PutResponsemanagementLibraryForbidden{}
}

/*
PutResponsemanagementLibraryForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutResponsemanagementLibraryForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put responsemanagement library forbidden response has a 2xx status code
func (o *PutResponsemanagementLibraryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put responsemanagement library forbidden response has a 3xx status code
func (o *PutResponsemanagementLibraryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put responsemanagement library forbidden response has a 4xx status code
func (o *PutResponsemanagementLibraryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put responsemanagement library forbidden response has a 5xx status code
func (o *PutResponsemanagementLibraryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put responsemanagement library forbidden response a status code equal to that given
func (o *PutResponsemanagementLibraryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutResponsemanagementLibraryForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryForbidden  %+v", 403, o.Payload)
}

func (o *PutResponsemanagementLibraryForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryForbidden  %+v", 403, o.Payload)
}

func (o *PutResponsemanagementLibraryForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutResponsemanagementLibraryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResponsemanagementLibraryNotFound creates a PutResponsemanagementLibraryNotFound with default headers values
func NewPutResponsemanagementLibraryNotFound() *PutResponsemanagementLibraryNotFound {
	return &PutResponsemanagementLibraryNotFound{}
}

/*
PutResponsemanagementLibraryNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutResponsemanagementLibraryNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put responsemanagement library not found response has a 2xx status code
func (o *PutResponsemanagementLibraryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put responsemanagement library not found response has a 3xx status code
func (o *PutResponsemanagementLibraryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put responsemanagement library not found response has a 4xx status code
func (o *PutResponsemanagementLibraryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put responsemanagement library not found response has a 5xx status code
func (o *PutResponsemanagementLibraryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put responsemanagement library not found response a status code equal to that given
func (o *PutResponsemanagementLibraryNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutResponsemanagementLibraryNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryNotFound  %+v", 404, o.Payload)
}

func (o *PutResponsemanagementLibraryNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryNotFound  %+v", 404, o.Payload)
}

func (o *PutResponsemanagementLibraryNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutResponsemanagementLibraryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResponsemanagementLibraryRequestTimeout creates a PutResponsemanagementLibraryRequestTimeout with default headers values
func NewPutResponsemanagementLibraryRequestTimeout() *PutResponsemanagementLibraryRequestTimeout {
	return &PutResponsemanagementLibraryRequestTimeout{}
}

/*
PutResponsemanagementLibraryRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutResponsemanagementLibraryRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put responsemanagement library request timeout response has a 2xx status code
func (o *PutResponsemanagementLibraryRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put responsemanagement library request timeout response has a 3xx status code
func (o *PutResponsemanagementLibraryRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put responsemanagement library request timeout response has a 4xx status code
func (o *PutResponsemanagementLibraryRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put responsemanagement library request timeout response has a 5xx status code
func (o *PutResponsemanagementLibraryRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put responsemanagement library request timeout response a status code equal to that given
func (o *PutResponsemanagementLibraryRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutResponsemanagementLibraryRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutResponsemanagementLibraryRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutResponsemanagementLibraryRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutResponsemanagementLibraryRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResponsemanagementLibraryConflict creates a PutResponsemanagementLibraryConflict with default headers values
func NewPutResponsemanagementLibraryConflict() *PutResponsemanagementLibraryConflict {
	return &PutResponsemanagementLibraryConflict{}
}

/*
PutResponsemanagementLibraryConflict describes a response with status code 409, with default header values.

Resource conflict - Unexpected version was provided
*/
type PutResponsemanagementLibraryConflict struct {
}

// IsSuccess returns true when this put responsemanagement library conflict response has a 2xx status code
func (o *PutResponsemanagementLibraryConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put responsemanagement library conflict response has a 3xx status code
func (o *PutResponsemanagementLibraryConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put responsemanagement library conflict response has a 4xx status code
func (o *PutResponsemanagementLibraryConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this put responsemanagement library conflict response has a 5xx status code
func (o *PutResponsemanagementLibraryConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this put responsemanagement library conflict response a status code equal to that given
func (o *PutResponsemanagementLibraryConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PutResponsemanagementLibraryConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryConflict ", 409)
}

func (o *PutResponsemanagementLibraryConflict) String() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryConflict ", 409)
}

func (o *PutResponsemanagementLibraryConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutResponsemanagementLibraryRequestEntityTooLarge creates a PutResponsemanagementLibraryRequestEntityTooLarge with default headers values
func NewPutResponsemanagementLibraryRequestEntityTooLarge() *PutResponsemanagementLibraryRequestEntityTooLarge {
	return &PutResponsemanagementLibraryRequestEntityTooLarge{}
}

/*
PutResponsemanagementLibraryRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PutResponsemanagementLibraryRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put responsemanagement library request entity too large response has a 2xx status code
func (o *PutResponsemanagementLibraryRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put responsemanagement library request entity too large response has a 3xx status code
func (o *PutResponsemanagementLibraryRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put responsemanagement library request entity too large response has a 4xx status code
func (o *PutResponsemanagementLibraryRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put responsemanagement library request entity too large response has a 5xx status code
func (o *PutResponsemanagementLibraryRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put responsemanagement library request entity too large response a status code equal to that given
func (o *PutResponsemanagementLibraryRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutResponsemanagementLibraryRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutResponsemanagementLibraryRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutResponsemanagementLibraryRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutResponsemanagementLibraryRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResponsemanagementLibraryUnsupportedMediaType creates a PutResponsemanagementLibraryUnsupportedMediaType with default headers values
func NewPutResponsemanagementLibraryUnsupportedMediaType() *PutResponsemanagementLibraryUnsupportedMediaType {
	return &PutResponsemanagementLibraryUnsupportedMediaType{}
}

/*
PutResponsemanagementLibraryUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutResponsemanagementLibraryUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put responsemanagement library unsupported media type response has a 2xx status code
func (o *PutResponsemanagementLibraryUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put responsemanagement library unsupported media type response has a 3xx status code
func (o *PutResponsemanagementLibraryUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put responsemanagement library unsupported media type response has a 4xx status code
func (o *PutResponsemanagementLibraryUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put responsemanagement library unsupported media type response has a 5xx status code
func (o *PutResponsemanagementLibraryUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put responsemanagement library unsupported media type response a status code equal to that given
func (o *PutResponsemanagementLibraryUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutResponsemanagementLibraryUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutResponsemanagementLibraryUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutResponsemanagementLibraryUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutResponsemanagementLibraryUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResponsemanagementLibraryTooManyRequests creates a PutResponsemanagementLibraryTooManyRequests with default headers values
func NewPutResponsemanagementLibraryTooManyRequests() *PutResponsemanagementLibraryTooManyRequests {
	return &PutResponsemanagementLibraryTooManyRequests{}
}

/*
PutResponsemanagementLibraryTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutResponsemanagementLibraryTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put responsemanagement library too many requests response has a 2xx status code
func (o *PutResponsemanagementLibraryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put responsemanagement library too many requests response has a 3xx status code
func (o *PutResponsemanagementLibraryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put responsemanagement library too many requests response has a 4xx status code
func (o *PutResponsemanagementLibraryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put responsemanagement library too many requests response has a 5xx status code
func (o *PutResponsemanagementLibraryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put responsemanagement library too many requests response a status code equal to that given
func (o *PutResponsemanagementLibraryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutResponsemanagementLibraryTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutResponsemanagementLibraryTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutResponsemanagementLibraryTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutResponsemanagementLibraryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResponsemanagementLibraryInternalServerError creates a PutResponsemanagementLibraryInternalServerError with default headers values
func NewPutResponsemanagementLibraryInternalServerError() *PutResponsemanagementLibraryInternalServerError {
	return &PutResponsemanagementLibraryInternalServerError{}
}

/*
PutResponsemanagementLibraryInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutResponsemanagementLibraryInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put responsemanagement library internal server error response has a 2xx status code
func (o *PutResponsemanagementLibraryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put responsemanagement library internal server error response has a 3xx status code
func (o *PutResponsemanagementLibraryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put responsemanagement library internal server error response has a 4xx status code
func (o *PutResponsemanagementLibraryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put responsemanagement library internal server error response has a 5xx status code
func (o *PutResponsemanagementLibraryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put responsemanagement library internal server error response a status code equal to that given
func (o *PutResponsemanagementLibraryInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutResponsemanagementLibraryInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryInternalServerError  %+v", 500, o.Payload)
}

func (o *PutResponsemanagementLibraryInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryInternalServerError  %+v", 500, o.Payload)
}

func (o *PutResponsemanagementLibraryInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutResponsemanagementLibraryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResponsemanagementLibraryServiceUnavailable creates a PutResponsemanagementLibraryServiceUnavailable with default headers values
func NewPutResponsemanagementLibraryServiceUnavailable() *PutResponsemanagementLibraryServiceUnavailable {
	return &PutResponsemanagementLibraryServiceUnavailable{}
}

/*
PutResponsemanagementLibraryServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutResponsemanagementLibraryServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put responsemanagement library service unavailable response has a 2xx status code
func (o *PutResponsemanagementLibraryServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put responsemanagement library service unavailable response has a 3xx status code
func (o *PutResponsemanagementLibraryServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put responsemanagement library service unavailable response has a 4xx status code
func (o *PutResponsemanagementLibraryServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put responsemanagement library service unavailable response has a 5xx status code
func (o *PutResponsemanagementLibraryServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put responsemanagement library service unavailable response a status code equal to that given
func (o *PutResponsemanagementLibraryServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutResponsemanagementLibraryServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutResponsemanagementLibraryServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutResponsemanagementLibraryServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutResponsemanagementLibraryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResponsemanagementLibraryGatewayTimeout creates a PutResponsemanagementLibraryGatewayTimeout with default headers values
func NewPutResponsemanagementLibraryGatewayTimeout() *PutResponsemanagementLibraryGatewayTimeout {
	return &PutResponsemanagementLibraryGatewayTimeout{}
}

/*
PutResponsemanagementLibraryGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutResponsemanagementLibraryGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put responsemanagement library gateway timeout response has a 2xx status code
func (o *PutResponsemanagementLibraryGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put responsemanagement library gateway timeout response has a 3xx status code
func (o *PutResponsemanagementLibraryGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put responsemanagement library gateway timeout response has a 4xx status code
func (o *PutResponsemanagementLibraryGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put responsemanagement library gateway timeout response has a 5xx status code
func (o *PutResponsemanagementLibraryGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put responsemanagement library gateway timeout response a status code equal to that given
func (o *PutResponsemanagementLibraryGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutResponsemanagementLibraryGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutResponsemanagementLibraryGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/responsemanagement/libraries/{libraryId}][%d] putResponsemanagementLibraryGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutResponsemanagementLibraryGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutResponsemanagementLibraryGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

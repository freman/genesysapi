// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchAuthorizationSettingsReader is a Reader for the PatchAuthorizationSettings structure.
type PatchAuthorizationSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAuthorizationSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchAuthorizationSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchAuthorizationSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchAuthorizationSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchAuthorizationSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchAuthorizationSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchAuthorizationSettingsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchAuthorizationSettingsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchAuthorizationSettingsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchAuthorizationSettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchAuthorizationSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchAuthorizationSettingsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchAuthorizationSettingsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchAuthorizationSettingsOK creates a PatchAuthorizationSettingsOK with default headers values
func NewPatchAuthorizationSettingsOK() *PatchAuthorizationSettingsOK {
	return &PatchAuthorizationSettingsOK{}
}

/*
PatchAuthorizationSettingsOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchAuthorizationSettingsOK struct {
	Payload *models.AuthorizationSettings
}

// IsSuccess returns true when this patch authorization settings o k response has a 2xx status code
func (o *PatchAuthorizationSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch authorization settings o k response has a 3xx status code
func (o *PatchAuthorizationSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authorization settings o k response has a 4xx status code
func (o *PatchAuthorizationSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch authorization settings o k response has a 5xx status code
func (o *PatchAuthorizationSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch authorization settings o k response a status code equal to that given
func (o *PatchAuthorizationSettingsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchAuthorizationSettingsOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsOK  %+v", 200, o.Payload)
}

func (o *PatchAuthorizationSettingsOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsOK  %+v", 200, o.Payload)
}

func (o *PatchAuthorizationSettingsOK) GetPayload() *models.AuthorizationSettings {
	return o.Payload
}

func (o *PatchAuthorizationSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthorizationSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationSettingsBadRequest creates a PatchAuthorizationSettingsBadRequest with default headers values
func NewPatchAuthorizationSettingsBadRequest() *PatchAuthorizationSettingsBadRequest {
	return &PatchAuthorizationSettingsBadRequest{}
}

/*
PatchAuthorizationSettingsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchAuthorizationSettingsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch authorization settings bad request response has a 2xx status code
func (o *PatchAuthorizationSettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch authorization settings bad request response has a 3xx status code
func (o *PatchAuthorizationSettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authorization settings bad request response has a 4xx status code
func (o *PatchAuthorizationSettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch authorization settings bad request response has a 5xx status code
func (o *PatchAuthorizationSettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch authorization settings bad request response a status code equal to that given
func (o *PatchAuthorizationSettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchAuthorizationSettingsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchAuthorizationSettingsBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchAuthorizationSettingsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationSettingsUnauthorized creates a PatchAuthorizationSettingsUnauthorized with default headers values
func NewPatchAuthorizationSettingsUnauthorized() *PatchAuthorizationSettingsUnauthorized {
	return &PatchAuthorizationSettingsUnauthorized{}
}

/*
PatchAuthorizationSettingsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchAuthorizationSettingsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch authorization settings unauthorized response has a 2xx status code
func (o *PatchAuthorizationSettingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch authorization settings unauthorized response has a 3xx status code
func (o *PatchAuthorizationSettingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authorization settings unauthorized response has a 4xx status code
func (o *PatchAuthorizationSettingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch authorization settings unauthorized response has a 5xx status code
func (o *PatchAuthorizationSettingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch authorization settings unauthorized response a status code equal to that given
func (o *PatchAuthorizationSettingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchAuthorizationSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchAuthorizationSettingsUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchAuthorizationSettingsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationSettingsForbidden creates a PatchAuthorizationSettingsForbidden with default headers values
func NewPatchAuthorizationSettingsForbidden() *PatchAuthorizationSettingsForbidden {
	return &PatchAuthorizationSettingsForbidden{}
}

/*
PatchAuthorizationSettingsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchAuthorizationSettingsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch authorization settings forbidden response has a 2xx status code
func (o *PatchAuthorizationSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch authorization settings forbidden response has a 3xx status code
func (o *PatchAuthorizationSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authorization settings forbidden response has a 4xx status code
func (o *PatchAuthorizationSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch authorization settings forbidden response has a 5xx status code
func (o *PatchAuthorizationSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch authorization settings forbidden response a status code equal to that given
func (o *PatchAuthorizationSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchAuthorizationSettingsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PatchAuthorizationSettingsForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PatchAuthorizationSettingsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationSettingsNotFound creates a PatchAuthorizationSettingsNotFound with default headers values
func NewPatchAuthorizationSettingsNotFound() *PatchAuthorizationSettingsNotFound {
	return &PatchAuthorizationSettingsNotFound{}
}

/*
PatchAuthorizationSettingsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchAuthorizationSettingsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch authorization settings not found response has a 2xx status code
func (o *PatchAuthorizationSettingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch authorization settings not found response has a 3xx status code
func (o *PatchAuthorizationSettingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authorization settings not found response has a 4xx status code
func (o *PatchAuthorizationSettingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch authorization settings not found response has a 5xx status code
func (o *PatchAuthorizationSettingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch authorization settings not found response a status code equal to that given
func (o *PatchAuthorizationSettingsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchAuthorizationSettingsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PatchAuthorizationSettingsNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PatchAuthorizationSettingsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationSettingsRequestTimeout creates a PatchAuthorizationSettingsRequestTimeout with default headers values
func NewPatchAuthorizationSettingsRequestTimeout() *PatchAuthorizationSettingsRequestTimeout {
	return &PatchAuthorizationSettingsRequestTimeout{}
}

/*
PatchAuthorizationSettingsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchAuthorizationSettingsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch authorization settings request timeout response has a 2xx status code
func (o *PatchAuthorizationSettingsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch authorization settings request timeout response has a 3xx status code
func (o *PatchAuthorizationSettingsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authorization settings request timeout response has a 4xx status code
func (o *PatchAuthorizationSettingsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch authorization settings request timeout response has a 5xx status code
func (o *PatchAuthorizationSettingsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch authorization settings request timeout response a status code equal to that given
func (o *PatchAuthorizationSettingsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchAuthorizationSettingsRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchAuthorizationSettingsRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchAuthorizationSettingsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationSettingsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationSettingsRequestEntityTooLarge creates a PatchAuthorizationSettingsRequestEntityTooLarge with default headers values
func NewPatchAuthorizationSettingsRequestEntityTooLarge() *PatchAuthorizationSettingsRequestEntityTooLarge {
	return &PatchAuthorizationSettingsRequestEntityTooLarge{}
}

/*
PatchAuthorizationSettingsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchAuthorizationSettingsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch authorization settings request entity too large response has a 2xx status code
func (o *PatchAuthorizationSettingsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch authorization settings request entity too large response has a 3xx status code
func (o *PatchAuthorizationSettingsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authorization settings request entity too large response has a 4xx status code
func (o *PatchAuthorizationSettingsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch authorization settings request entity too large response has a 5xx status code
func (o *PatchAuthorizationSettingsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch authorization settings request entity too large response a status code equal to that given
func (o *PatchAuthorizationSettingsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchAuthorizationSettingsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchAuthorizationSettingsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchAuthorizationSettingsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationSettingsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationSettingsUnsupportedMediaType creates a PatchAuthorizationSettingsUnsupportedMediaType with default headers values
func NewPatchAuthorizationSettingsUnsupportedMediaType() *PatchAuthorizationSettingsUnsupportedMediaType {
	return &PatchAuthorizationSettingsUnsupportedMediaType{}
}

/*
PatchAuthorizationSettingsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchAuthorizationSettingsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch authorization settings unsupported media type response has a 2xx status code
func (o *PatchAuthorizationSettingsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch authorization settings unsupported media type response has a 3xx status code
func (o *PatchAuthorizationSettingsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authorization settings unsupported media type response has a 4xx status code
func (o *PatchAuthorizationSettingsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch authorization settings unsupported media type response has a 5xx status code
func (o *PatchAuthorizationSettingsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch authorization settings unsupported media type response a status code equal to that given
func (o *PatchAuthorizationSettingsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchAuthorizationSettingsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchAuthorizationSettingsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchAuthorizationSettingsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationSettingsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationSettingsTooManyRequests creates a PatchAuthorizationSettingsTooManyRequests with default headers values
func NewPatchAuthorizationSettingsTooManyRequests() *PatchAuthorizationSettingsTooManyRequests {
	return &PatchAuthorizationSettingsTooManyRequests{}
}

/*
PatchAuthorizationSettingsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchAuthorizationSettingsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch authorization settings too many requests response has a 2xx status code
func (o *PatchAuthorizationSettingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch authorization settings too many requests response has a 3xx status code
func (o *PatchAuthorizationSettingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authorization settings too many requests response has a 4xx status code
func (o *PatchAuthorizationSettingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch authorization settings too many requests response has a 5xx status code
func (o *PatchAuthorizationSettingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch authorization settings too many requests response a status code equal to that given
func (o *PatchAuthorizationSettingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchAuthorizationSettingsTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchAuthorizationSettingsTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchAuthorizationSettingsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationSettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationSettingsInternalServerError creates a PatchAuthorizationSettingsInternalServerError with default headers values
func NewPatchAuthorizationSettingsInternalServerError() *PatchAuthorizationSettingsInternalServerError {
	return &PatchAuthorizationSettingsInternalServerError{}
}

/*
PatchAuthorizationSettingsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchAuthorizationSettingsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch authorization settings internal server error response has a 2xx status code
func (o *PatchAuthorizationSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch authorization settings internal server error response has a 3xx status code
func (o *PatchAuthorizationSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authorization settings internal server error response has a 4xx status code
func (o *PatchAuthorizationSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch authorization settings internal server error response has a 5xx status code
func (o *PatchAuthorizationSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch authorization settings internal server error response a status code equal to that given
func (o *PatchAuthorizationSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchAuthorizationSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchAuthorizationSettingsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchAuthorizationSettingsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationSettingsServiceUnavailable creates a PatchAuthorizationSettingsServiceUnavailable with default headers values
func NewPatchAuthorizationSettingsServiceUnavailable() *PatchAuthorizationSettingsServiceUnavailable {
	return &PatchAuthorizationSettingsServiceUnavailable{}
}

/*
PatchAuthorizationSettingsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchAuthorizationSettingsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch authorization settings service unavailable response has a 2xx status code
func (o *PatchAuthorizationSettingsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch authorization settings service unavailable response has a 3xx status code
func (o *PatchAuthorizationSettingsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authorization settings service unavailable response has a 4xx status code
func (o *PatchAuthorizationSettingsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch authorization settings service unavailable response has a 5xx status code
func (o *PatchAuthorizationSettingsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch authorization settings service unavailable response a status code equal to that given
func (o *PatchAuthorizationSettingsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchAuthorizationSettingsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchAuthorizationSettingsServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchAuthorizationSettingsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationSettingsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationSettingsGatewayTimeout creates a PatchAuthorizationSettingsGatewayTimeout with default headers values
func NewPatchAuthorizationSettingsGatewayTimeout() *PatchAuthorizationSettingsGatewayTimeout {
	return &PatchAuthorizationSettingsGatewayTimeout{}
}

/*
PatchAuthorizationSettingsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchAuthorizationSettingsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch authorization settings gateway timeout response has a 2xx status code
func (o *PatchAuthorizationSettingsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch authorization settings gateway timeout response has a 3xx status code
func (o *PatchAuthorizationSettingsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authorization settings gateway timeout response has a 4xx status code
func (o *PatchAuthorizationSettingsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch authorization settings gateway timeout response has a 5xx status code
func (o *PatchAuthorizationSettingsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch authorization settings gateway timeout response a status code equal to that given
func (o *PatchAuthorizationSettingsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchAuthorizationSettingsGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchAuthorizationSettingsGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/settings][%d] patchAuthorizationSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchAuthorizationSettingsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationSettingsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

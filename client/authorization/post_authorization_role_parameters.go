// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// NewPostAuthorizationRoleParams creates a new PostAuthorizationRoleParams object
// with the default values initialized.
func NewPostAuthorizationRoleParams() *PostAuthorizationRoleParams {
	var (
		subjectTypeDefault = string("PC_USER")
	)
	return &PostAuthorizationRoleParams{
		SubjectType: &subjectTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPostAuthorizationRoleParamsWithTimeout creates a new PostAuthorizationRoleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostAuthorizationRoleParamsWithTimeout(timeout time.Duration) *PostAuthorizationRoleParams {
	var (
		subjectTypeDefault = string("PC_USER")
	)
	return &PostAuthorizationRoleParams{
		SubjectType: &subjectTypeDefault,

		timeout: timeout,
	}
}

// NewPostAuthorizationRoleParamsWithContext creates a new PostAuthorizationRoleParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostAuthorizationRoleParamsWithContext(ctx context.Context) *PostAuthorizationRoleParams {
	var (
		subjectTypeDefault = string("PC_USER")
	)
	return &PostAuthorizationRoleParams{
		SubjectType: &subjectTypeDefault,

		Context: ctx,
	}
}

// NewPostAuthorizationRoleParamsWithHTTPClient creates a new PostAuthorizationRoleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostAuthorizationRoleParamsWithHTTPClient(client *http.Client) *PostAuthorizationRoleParams {
	var (
		subjectTypeDefault = string("PC_USER")
	)
	return &PostAuthorizationRoleParams{
		SubjectType: &subjectTypeDefault,
		HTTPClient:  client,
	}
}

/*PostAuthorizationRoleParams contains all the parameters to send to the API endpoint
for the post authorization role operation typically these are written to a http.Request
*/
type PostAuthorizationRoleParams struct {

	/*Body
	  Subjects and Divisions

	*/
	Body *models.SubjectDivisions
	/*RoleID
	  Role ID

	*/
	RoleID string
	/*SubjectType
	  what the type of the subjects are (PC_GROUP, PC_USER or PC_OAUTH_CLIENT)

	*/
	SubjectType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post authorization role params
func (o *PostAuthorizationRoleParams) WithTimeout(timeout time.Duration) *PostAuthorizationRoleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post authorization role params
func (o *PostAuthorizationRoleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post authorization role params
func (o *PostAuthorizationRoleParams) WithContext(ctx context.Context) *PostAuthorizationRoleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post authorization role params
func (o *PostAuthorizationRoleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post authorization role params
func (o *PostAuthorizationRoleParams) WithHTTPClient(client *http.Client) *PostAuthorizationRoleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post authorization role params
func (o *PostAuthorizationRoleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post authorization role params
func (o *PostAuthorizationRoleParams) WithBody(body *models.SubjectDivisions) *PostAuthorizationRoleParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post authorization role params
func (o *PostAuthorizationRoleParams) SetBody(body *models.SubjectDivisions) {
	o.Body = body
}

// WithRoleID adds the roleID to the post authorization role params
func (o *PostAuthorizationRoleParams) WithRoleID(roleID string) *PostAuthorizationRoleParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the post authorization role params
func (o *PostAuthorizationRoleParams) SetRoleID(roleID string) {
	o.RoleID = roleID
}

// WithSubjectType adds the subjectType to the post authorization role params
func (o *PostAuthorizationRoleParams) WithSubjectType(subjectType *string) *PostAuthorizationRoleParams {
	o.SetSubjectType(subjectType)
	return o
}

// SetSubjectType adds the subjectType to the post authorization role params
func (o *PostAuthorizationRoleParams) SetSubjectType(subjectType *string) {
	o.SubjectType = subjectType
}

// WriteToRequest writes these params to a swagger request
func (o *PostAuthorizationRoleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param roleId
	if err := r.SetPathParam("roleId", o.RoleID); err != nil {
		return err
	}

	if o.SubjectType != nil {

		// query param subjectType
		var qrSubjectType string
		if o.SubjectType != nil {
			qrSubjectType = *o.SubjectType
		}
		qSubjectType := qrSubjectType
		if qSubjectType != "" {
			if err := r.SetQueryParam("subjectType", qSubjectType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

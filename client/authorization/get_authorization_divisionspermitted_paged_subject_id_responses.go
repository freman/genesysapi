// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetAuthorizationDivisionspermittedPagedSubjectIDReader is a Reader for the GetAuthorizationDivisionspermittedPagedSubjectID structure.
type GetAuthorizationDivisionspermittedPagedSubjectIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuthorizationDivisionspermittedPagedSubjectIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuthorizationDivisionspermittedPagedSubjectIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuthorizationDivisionspermittedPagedSubjectIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAuthorizationDivisionspermittedPagedSubjectIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAuthorizationDivisionspermittedPagedSubjectIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuthorizationDivisionspermittedPagedSubjectIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetAuthorizationDivisionspermittedPagedSubjectIDRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAuthorizationDivisionspermittedPagedSubjectIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAuthorizationDivisionspermittedPagedSubjectIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAuthorizationDivisionspermittedPagedSubjectIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuthorizationDivisionspermittedPagedSubjectIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAuthorizationDivisionspermittedPagedSubjectIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetAuthorizationDivisionspermittedPagedSubjectIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAuthorizationDivisionspermittedPagedSubjectIDOK creates a GetAuthorizationDivisionspermittedPagedSubjectIDOK with default headers values
func NewGetAuthorizationDivisionspermittedPagedSubjectIDOK() *GetAuthorizationDivisionspermittedPagedSubjectIDOK {
	return &GetAuthorizationDivisionspermittedPagedSubjectIDOK{}
}

/*GetAuthorizationDivisionspermittedPagedSubjectIDOK handles this case with default header values.

successful operation
*/
type GetAuthorizationDivisionspermittedPagedSubjectIDOK struct {
	Payload *models.DivsPermittedEntityListing
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/paged/{subjectId}][%d] getAuthorizationDivisionspermittedPagedSubjectIdOK  %+v", 200, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDOK) GetPayload() *models.DivsPermittedEntityListing {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DivsPermittedEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedPagedSubjectIDBadRequest creates a GetAuthorizationDivisionspermittedPagedSubjectIDBadRequest with default headers values
func NewGetAuthorizationDivisionspermittedPagedSubjectIDBadRequest() *GetAuthorizationDivisionspermittedPagedSubjectIDBadRequest {
	return &GetAuthorizationDivisionspermittedPagedSubjectIDBadRequest{}
}

/*GetAuthorizationDivisionspermittedPagedSubjectIDBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetAuthorizationDivisionspermittedPagedSubjectIDBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/paged/{subjectId}][%d] getAuthorizationDivisionspermittedPagedSubjectIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedPagedSubjectIDUnauthorized creates a GetAuthorizationDivisionspermittedPagedSubjectIDUnauthorized with default headers values
func NewGetAuthorizationDivisionspermittedPagedSubjectIDUnauthorized() *GetAuthorizationDivisionspermittedPagedSubjectIDUnauthorized {
	return &GetAuthorizationDivisionspermittedPagedSubjectIDUnauthorized{}
}

/*GetAuthorizationDivisionspermittedPagedSubjectIDUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetAuthorizationDivisionspermittedPagedSubjectIDUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/paged/{subjectId}][%d] getAuthorizationDivisionspermittedPagedSubjectIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedPagedSubjectIDForbidden creates a GetAuthorizationDivisionspermittedPagedSubjectIDForbidden with default headers values
func NewGetAuthorizationDivisionspermittedPagedSubjectIDForbidden() *GetAuthorizationDivisionspermittedPagedSubjectIDForbidden {
	return &GetAuthorizationDivisionspermittedPagedSubjectIDForbidden{}
}

/*GetAuthorizationDivisionspermittedPagedSubjectIDForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetAuthorizationDivisionspermittedPagedSubjectIDForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/paged/{subjectId}][%d] getAuthorizationDivisionspermittedPagedSubjectIdForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedPagedSubjectIDNotFound creates a GetAuthorizationDivisionspermittedPagedSubjectIDNotFound with default headers values
func NewGetAuthorizationDivisionspermittedPagedSubjectIDNotFound() *GetAuthorizationDivisionspermittedPagedSubjectIDNotFound {
	return &GetAuthorizationDivisionspermittedPagedSubjectIDNotFound{}
}

/*GetAuthorizationDivisionspermittedPagedSubjectIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetAuthorizationDivisionspermittedPagedSubjectIDNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/paged/{subjectId}][%d] getAuthorizationDivisionspermittedPagedSubjectIdNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedPagedSubjectIDRequestTimeout creates a GetAuthorizationDivisionspermittedPagedSubjectIDRequestTimeout with default headers values
func NewGetAuthorizationDivisionspermittedPagedSubjectIDRequestTimeout() *GetAuthorizationDivisionspermittedPagedSubjectIDRequestTimeout {
	return &GetAuthorizationDivisionspermittedPagedSubjectIDRequestTimeout{}
}

/*GetAuthorizationDivisionspermittedPagedSubjectIDRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetAuthorizationDivisionspermittedPagedSubjectIDRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/paged/{subjectId}][%d] getAuthorizationDivisionspermittedPagedSubjectIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedPagedSubjectIDRequestEntityTooLarge creates a GetAuthorizationDivisionspermittedPagedSubjectIDRequestEntityTooLarge with default headers values
func NewGetAuthorizationDivisionspermittedPagedSubjectIDRequestEntityTooLarge() *GetAuthorizationDivisionspermittedPagedSubjectIDRequestEntityTooLarge {
	return &GetAuthorizationDivisionspermittedPagedSubjectIDRequestEntityTooLarge{}
}

/*GetAuthorizationDivisionspermittedPagedSubjectIDRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetAuthorizationDivisionspermittedPagedSubjectIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/paged/{subjectId}][%d] getAuthorizationDivisionspermittedPagedSubjectIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedPagedSubjectIDUnsupportedMediaType creates a GetAuthorizationDivisionspermittedPagedSubjectIDUnsupportedMediaType with default headers values
func NewGetAuthorizationDivisionspermittedPagedSubjectIDUnsupportedMediaType() *GetAuthorizationDivisionspermittedPagedSubjectIDUnsupportedMediaType {
	return &GetAuthorizationDivisionspermittedPagedSubjectIDUnsupportedMediaType{}
}

/*GetAuthorizationDivisionspermittedPagedSubjectIDUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetAuthorizationDivisionspermittedPagedSubjectIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/paged/{subjectId}][%d] getAuthorizationDivisionspermittedPagedSubjectIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedPagedSubjectIDTooManyRequests creates a GetAuthorizationDivisionspermittedPagedSubjectIDTooManyRequests with default headers values
func NewGetAuthorizationDivisionspermittedPagedSubjectIDTooManyRequests() *GetAuthorizationDivisionspermittedPagedSubjectIDTooManyRequests {
	return &GetAuthorizationDivisionspermittedPagedSubjectIDTooManyRequests{}
}

/*GetAuthorizationDivisionspermittedPagedSubjectIDTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetAuthorizationDivisionspermittedPagedSubjectIDTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/paged/{subjectId}][%d] getAuthorizationDivisionspermittedPagedSubjectIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedPagedSubjectIDInternalServerError creates a GetAuthorizationDivisionspermittedPagedSubjectIDInternalServerError with default headers values
func NewGetAuthorizationDivisionspermittedPagedSubjectIDInternalServerError() *GetAuthorizationDivisionspermittedPagedSubjectIDInternalServerError {
	return &GetAuthorizationDivisionspermittedPagedSubjectIDInternalServerError{}
}

/*GetAuthorizationDivisionspermittedPagedSubjectIDInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetAuthorizationDivisionspermittedPagedSubjectIDInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/paged/{subjectId}][%d] getAuthorizationDivisionspermittedPagedSubjectIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedPagedSubjectIDServiceUnavailable creates a GetAuthorizationDivisionspermittedPagedSubjectIDServiceUnavailable with default headers values
func NewGetAuthorizationDivisionspermittedPagedSubjectIDServiceUnavailable() *GetAuthorizationDivisionspermittedPagedSubjectIDServiceUnavailable {
	return &GetAuthorizationDivisionspermittedPagedSubjectIDServiceUnavailable{}
}

/*GetAuthorizationDivisionspermittedPagedSubjectIDServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetAuthorizationDivisionspermittedPagedSubjectIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/paged/{subjectId}][%d] getAuthorizationDivisionspermittedPagedSubjectIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedPagedSubjectIDGatewayTimeout creates a GetAuthorizationDivisionspermittedPagedSubjectIDGatewayTimeout with default headers values
func NewGetAuthorizationDivisionspermittedPagedSubjectIDGatewayTimeout() *GetAuthorizationDivisionspermittedPagedSubjectIDGatewayTimeout {
	return &GetAuthorizationDivisionspermittedPagedSubjectIDGatewayTimeout{}
}

/*GetAuthorizationDivisionspermittedPagedSubjectIDGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetAuthorizationDivisionspermittedPagedSubjectIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/paged/{subjectId}][%d] getAuthorizationDivisionspermittedPagedSubjectIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedPagedSubjectIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetAuthorizationSubjectsRolecountsReader is a Reader for the GetAuthorizationSubjectsRolecounts structure.
type GetAuthorizationSubjectsRolecountsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuthorizationSubjectsRolecountsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuthorizationSubjectsRolecountsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuthorizationSubjectsRolecountsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAuthorizationSubjectsRolecountsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAuthorizationSubjectsRolecountsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuthorizationSubjectsRolecountsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetAuthorizationSubjectsRolecountsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAuthorizationSubjectsRolecountsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAuthorizationSubjectsRolecountsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAuthorizationSubjectsRolecountsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuthorizationSubjectsRolecountsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAuthorizationSubjectsRolecountsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetAuthorizationSubjectsRolecountsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAuthorizationSubjectsRolecountsOK creates a GetAuthorizationSubjectsRolecountsOK with default headers values
func NewGetAuthorizationSubjectsRolecountsOK() *GetAuthorizationSubjectsRolecountsOK {
	return &GetAuthorizationSubjectsRolecountsOK{}
}

/*
GetAuthorizationSubjectsRolecountsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetAuthorizationSubjectsRolecountsOK struct {
	Payload map[string]interface{}
}

// IsSuccess returns true when this get authorization subjects rolecounts o k response has a 2xx status code
func (o *GetAuthorizationSubjectsRolecountsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get authorization subjects rolecounts o k response has a 3xx status code
func (o *GetAuthorizationSubjectsRolecountsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects rolecounts o k response has a 4xx status code
func (o *GetAuthorizationSubjectsRolecountsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization subjects rolecounts o k response has a 5xx status code
func (o *GetAuthorizationSubjectsRolecountsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects rolecounts o k response a status code equal to that given
func (o *GetAuthorizationSubjectsRolecountsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAuthorizationSubjectsRolecountsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsOK  %+v", 200, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsOK) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsOK  %+v", 200, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsOK) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *GetAuthorizationSubjectsRolecountsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsRolecountsBadRequest creates a GetAuthorizationSubjectsRolecountsBadRequest with default headers values
func NewGetAuthorizationSubjectsRolecountsBadRequest() *GetAuthorizationSubjectsRolecountsBadRequest {
	return &GetAuthorizationSubjectsRolecountsBadRequest{}
}

/*
GetAuthorizationSubjectsRolecountsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetAuthorizationSubjectsRolecountsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects rolecounts bad request response has a 2xx status code
func (o *GetAuthorizationSubjectsRolecountsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects rolecounts bad request response has a 3xx status code
func (o *GetAuthorizationSubjectsRolecountsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects rolecounts bad request response has a 4xx status code
func (o *GetAuthorizationSubjectsRolecountsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects rolecounts bad request response has a 5xx status code
func (o *GetAuthorizationSubjectsRolecountsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects rolecounts bad request response a status code equal to that given
func (o *GetAuthorizationSubjectsRolecountsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAuthorizationSubjectsRolecountsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsRolecountsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsRolecountsUnauthorized creates a GetAuthorizationSubjectsRolecountsUnauthorized with default headers values
func NewGetAuthorizationSubjectsRolecountsUnauthorized() *GetAuthorizationSubjectsRolecountsUnauthorized {
	return &GetAuthorizationSubjectsRolecountsUnauthorized{}
}

/*
GetAuthorizationSubjectsRolecountsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetAuthorizationSubjectsRolecountsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects rolecounts unauthorized response has a 2xx status code
func (o *GetAuthorizationSubjectsRolecountsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects rolecounts unauthorized response has a 3xx status code
func (o *GetAuthorizationSubjectsRolecountsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects rolecounts unauthorized response has a 4xx status code
func (o *GetAuthorizationSubjectsRolecountsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects rolecounts unauthorized response has a 5xx status code
func (o *GetAuthorizationSubjectsRolecountsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects rolecounts unauthorized response a status code equal to that given
func (o *GetAuthorizationSubjectsRolecountsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAuthorizationSubjectsRolecountsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsRolecountsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsRolecountsForbidden creates a GetAuthorizationSubjectsRolecountsForbidden with default headers values
func NewGetAuthorizationSubjectsRolecountsForbidden() *GetAuthorizationSubjectsRolecountsForbidden {
	return &GetAuthorizationSubjectsRolecountsForbidden{}
}

/*
GetAuthorizationSubjectsRolecountsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetAuthorizationSubjectsRolecountsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects rolecounts forbidden response has a 2xx status code
func (o *GetAuthorizationSubjectsRolecountsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects rolecounts forbidden response has a 3xx status code
func (o *GetAuthorizationSubjectsRolecountsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects rolecounts forbidden response has a 4xx status code
func (o *GetAuthorizationSubjectsRolecountsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects rolecounts forbidden response has a 5xx status code
func (o *GetAuthorizationSubjectsRolecountsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects rolecounts forbidden response a status code equal to that given
func (o *GetAuthorizationSubjectsRolecountsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAuthorizationSubjectsRolecountsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsRolecountsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsRolecountsNotFound creates a GetAuthorizationSubjectsRolecountsNotFound with default headers values
func NewGetAuthorizationSubjectsRolecountsNotFound() *GetAuthorizationSubjectsRolecountsNotFound {
	return &GetAuthorizationSubjectsRolecountsNotFound{}
}

/*
GetAuthorizationSubjectsRolecountsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetAuthorizationSubjectsRolecountsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects rolecounts not found response has a 2xx status code
func (o *GetAuthorizationSubjectsRolecountsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects rolecounts not found response has a 3xx status code
func (o *GetAuthorizationSubjectsRolecountsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects rolecounts not found response has a 4xx status code
func (o *GetAuthorizationSubjectsRolecountsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects rolecounts not found response has a 5xx status code
func (o *GetAuthorizationSubjectsRolecountsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects rolecounts not found response a status code equal to that given
func (o *GetAuthorizationSubjectsRolecountsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAuthorizationSubjectsRolecountsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsRolecountsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsRolecountsRequestTimeout creates a GetAuthorizationSubjectsRolecountsRequestTimeout with default headers values
func NewGetAuthorizationSubjectsRolecountsRequestTimeout() *GetAuthorizationSubjectsRolecountsRequestTimeout {
	return &GetAuthorizationSubjectsRolecountsRequestTimeout{}
}

/*
GetAuthorizationSubjectsRolecountsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetAuthorizationSubjectsRolecountsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects rolecounts request timeout response has a 2xx status code
func (o *GetAuthorizationSubjectsRolecountsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects rolecounts request timeout response has a 3xx status code
func (o *GetAuthorizationSubjectsRolecountsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects rolecounts request timeout response has a 4xx status code
func (o *GetAuthorizationSubjectsRolecountsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects rolecounts request timeout response has a 5xx status code
func (o *GetAuthorizationSubjectsRolecountsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects rolecounts request timeout response a status code equal to that given
func (o *GetAuthorizationSubjectsRolecountsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetAuthorizationSubjectsRolecountsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsRolecountsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsRolecountsRequestEntityTooLarge creates a GetAuthorizationSubjectsRolecountsRequestEntityTooLarge with default headers values
func NewGetAuthorizationSubjectsRolecountsRequestEntityTooLarge() *GetAuthorizationSubjectsRolecountsRequestEntityTooLarge {
	return &GetAuthorizationSubjectsRolecountsRequestEntityTooLarge{}
}

/*
GetAuthorizationSubjectsRolecountsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetAuthorizationSubjectsRolecountsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects rolecounts request entity too large response has a 2xx status code
func (o *GetAuthorizationSubjectsRolecountsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects rolecounts request entity too large response has a 3xx status code
func (o *GetAuthorizationSubjectsRolecountsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects rolecounts request entity too large response has a 4xx status code
func (o *GetAuthorizationSubjectsRolecountsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects rolecounts request entity too large response has a 5xx status code
func (o *GetAuthorizationSubjectsRolecountsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects rolecounts request entity too large response a status code equal to that given
func (o *GetAuthorizationSubjectsRolecountsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetAuthorizationSubjectsRolecountsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsRolecountsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsRolecountsUnsupportedMediaType creates a GetAuthorizationSubjectsRolecountsUnsupportedMediaType with default headers values
func NewGetAuthorizationSubjectsRolecountsUnsupportedMediaType() *GetAuthorizationSubjectsRolecountsUnsupportedMediaType {
	return &GetAuthorizationSubjectsRolecountsUnsupportedMediaType{}
}

/*
GetAuthorizationSubjectsRolecountsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetAuthorizationSubjectsRolecountsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects rolecounts unsupported media type response has a 2xx status code
func (o *GetAuthorizationSubjectsRolecountsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects rolecounts unsupported media type response has a 3xx status code
func (o *GetAuthorizationSubjectsRolecountsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects rolecounts unsupported media type response has a 4xx status code
func (o *GetAuthorizationSubjectsRolecountsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects rolecounts unsupported media type response has a 5xx status code
func (o *GetAuthorizationSubjectsRolecountsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects rolecounts unsupported media type response a status code equal to that given
func (o *GetAuthorizationSubjectsRolecountsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetAuthorizationSubjectsRolecountsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsRolecountsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsRolecountsTooManyRequests creates a GetAuthorizationSubjectsRolecountsTooManyRequests with default headers values
func NewGetAuthorizationSubjectsRolecountsTooManyRequests() *GetAuthorizationSubjectsRolecountsTooManyRequests {
	return &GetAuthorizationSubjectsRolecountsTooManyRequests{}
}

/*
GetAuthorizationSubjectsRolecountsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetAuthorizationSubjectsRolecountsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects rolecounts too many requests response has a 2xx status code
func (o *GetAuthorizationSubjectsRolecountsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects rolecounts too many requests response has a 3xx status code
func (o *GetAuthorizationSubjectsRolecountsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects rolecounts too many requests response has a 4xx status code
func (o *GetAuthorizationSubjectsRolecountsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects rolecounts too many requests response has a 5xx status code
func (o *GetAuthorizationSubjectsRolecountsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects rolecounts too many requests response a status code equal to that given
func (o *GetAuthorizationSubjectsRolecountsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAuthorizationSubjectsRolecountsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsRolecountsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsRolecountsInternalServerError creates a GetAuthorizationSubjectsRolecountsInternalServerError with default headers values
func NewGetAuthorizationSubjectsRolecountsInternalServerError() *GetAuthorizationSubjectsRolecountsInternalServerError {
	return &GetAuthorizationSubjectsRolecountsInternalServerError{}
}

/*
GetAuthorizationSubjectsRolecountsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetAuthorizationSubjectsRolecountsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects rolecounts internal server error response has a 2xx status code
func (o *GetAuthorizationSubjectsRolecountsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects rolecounts internal server error response has a 3xx status code
func (o *GetAuthorizationSubjectsRolecountsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects rolecounts internal server error response has a 4xx status code
func (o *GetAuthorizationSubjectsRolecountsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization subjects rolecounts internal server error response has a 5xx status code
func (o *GetAuthorizationSubjectsRolecountsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get authorization subjects rolecounts internal server error response a status code equal to that given
func (o *GetAuthorizationSubjectsRolecountsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAuthorizationSubjectsRolecountsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsRolecountsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsRolecountsServiceUnavailable creates a GetAuthorizationSubjectsRolecountsServiceUnavailable with default headers values
func NewGetAuthorizationSubjectsRolecountsServiceUnavailable() *GetAuthorizationSubjectsRolecountsServiceUnavailable {
	return &GetAuthorizationSubjectsRolecountsServiceUnavailable{}
}

/*
GetAuthorizationSubjectsRolecountsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetAuthorizationSubjectsRolecountsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects rolecounts service unavailable response has a 2xx status code
func (o *GetAuthorizationSubjectsRolecountsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects rolecounts service unavailable response has a 3xx status code
func (o *GetAuthorizationSubjectsRolecountsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects rolecounts service unavailable response has a 4xx status code
func (o *GetAuthorizationSubjectsRolecountsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization subjects rolecounts service unavailable response has a 5xx status code
func (o *GetAuthorizationSubjectsRolecountsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get authorization subjects rolecounts service unavailable response a status code equal to that given
func (o *GetAuthorizationSubjectsRolecountsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAuthorizationSubjectsRolecountsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsRolecountsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsRolecountsGatewayTimeout creates a GetAuthorizationSubjectsRolecountsGatewayTimeout with default headers values
func NewGetAuthorizationSubjectsRolecountsGatewayTimeout() *GetAuthorizationSubjectsRolecountsGatewayTimeout {
	return &GetAuthorizationSubjectsRolecountsGatewayTimeout{}
}

/*
GetAuthorizationSubjectsRolecountsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetAuthorizationSubjectsRolecountsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects rolecounts gateway timeout response has a 2xx status code
func (o *GetAuthorizationSubjectsRolecountsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects rolecounts gateway timeout response has a 3xx status code
func (o *GetAuthorizationSubjectsRolecountsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects rolecounts gateway timeout response has a 4xx status code
func (o *GetAuthorizationSubjectsRolecountsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization subjects rolecounts gateway timeout response has a 5xx status code
func (o *GetAuthorizationSubjectsRolecountsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get authorization subjects rolecounts gateway timeout response a status code equal to that given
func (o *GetAuthorizationSubjectsRolecountsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetAuthorizationSubjectsRolecountsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/rolecounts][%d] getAuthorizationSubjectsRolecountsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAuthorizationSubjectsRolecountsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsRolecountsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

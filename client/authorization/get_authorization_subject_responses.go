// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetAuthorizationSubjectReader is a Reader for the GetAuthorizationSubject structure.
type GetAuthorizationSubjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuthorizationSubjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuthorizationSubjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuthorizationSubjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAuthorizationSubjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAuthorizationSubjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuthorizationSubjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetAuthorizationSubjectRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAuthorizationSubjectRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAuthorizationSubjectUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAuthorizationSubjectTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuthorizationSubjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAuthorizationSubjectServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetAuthorizationSubjectGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAuthorizationSubjectOK creates a GetAuthorizationSubjectOK with default headers values
func NewGetAuthorizationSubjectOK() *GetAuthorizationSubjectOK {
	return &GetAuthorizationSubjectOK{}
}

/*GetAuthorizationSubjectOK handles this case with default header values.

successful operation
*/
type GetAuthorizationSubjectOK struct {
	Payload *models.AuthzSubject
}

func (o *GetAuthorizationSubjectOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/{subjectId}][%d] getAuthorizationSubjectOK  %+v", 200, o.Payload)
}

func (o *GetAuthorizationSubjectOK) GetPayload() *models.AuthzSubject {
	return o.Payload
}

func (o *GetAuthorizationSubjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthzSubject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectBadRequest creates a GetAuthorizationSubjectBadRequest with default headers values
func NewGetAuthorizationSubjectBadRequest() *GetAuthorizationSubjectBadRequest {
	return &GetAuthorizationSubjectBadRequest{}
}

/*GetAuthorizationSubjectBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetAuthorizationSubjectBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationSubjectBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/{subjectId}][%d] getAuthorizationSubjectBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorizationSubjectBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectUnauthorized creates a GetAuthorizationSubjectUnauthorized with default headers values
func NewGetAuthorizationSubjectUnauthorized() *GetAuthorizationSubjectUnauthorized {
	return &GetAuthorizationSubjectUnauthorized{}
}

/*GetAuthorizationSubjectUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetAuthorizationSubjectUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationSubjectUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/{subjectId}][%d] getAuthorizationSubjectUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorizationSubjectUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectForbidden creates a GetAuthorizationSubjectForbidden with default headers values
func NewGetAuthorizationSubjectForbidden() *GetAuthorizationSubjectForbidden {
	return &GetAuthorizationSubjectForbidden{}
}

/*GetAuthorizationSubjectForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetAuthorizationSubjectForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationSubjectForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/{subjectId}][%d] getAuthorizationSubjectForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthorizationSubjectForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectNotFound creates a GetAuthorizationSubjectNotFound with default headers values
func NewGetAuthorizationSubjectNotFound() *GetAuthorizationSubjectNotFound {
	return &GetAuthorizationSubjectNotFound{}
}

/*GetAuthorizationSubjectNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetAuthorizationSubjectNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationSubjectNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/{subjectId}][%d] getAuthorizationSubjectNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorizationSubjectNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectRequestTimeout creates a GetAuthorizationSubjectRequestTimeout with default headers values
func NewGetAuthorizationSubjectRequestTimeout() *GetAuthorizationSubjectRequestTimeout {
	return &GetAuthorizationSubjectRequestTimeout{}
}

/*GetAuthorizationSubjectRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetAuthorizationSubjectRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationSubjectRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/{subjectId}][%d] getAuthorizationSubjectRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAuthorizationSubjectRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectRequestEntityTooLarge creates a GetAuthorizationSubjectRequestEntityTooLarge with default headers values
func NewGetAuthorizationSubjectRequestEntityTooLarge() *GetAuthorizationSubjectRequestEntityTooLarge {
	return &GetAuthorizationSubjectRequestEntityTooLarge{}
}

/*GetAuthorizationSubjectRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetAuthorizationSubjectRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationSubjectRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/{subjectId}][%d] getAuthorizationSubjectRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAuthorizationSubjectRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectUnsupportedMediaType creates a GetAuthorizationSubjectUnsupportedMediaType with default headers values
func NewGetAuthorizationSubjectUnsupportedMediaType() *GetAuthorizationSubjectUnsupportedMediaType {
	return &GetAuthorizationSubjectUnsupportedMediaType{}
}

/*GetAuthorizationSubjectUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetAuthorizationSubjectUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationSubjectUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/{subjectId}][%d] getAuthorizationSubjectUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAuthorizationSubjectUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectTooManyRequests creates a GetAuthorizationSubjectTooManyRequests with default headers values
func NewGetAuthorizationSubjectTooManyRequests() *GetAuthorizationSubjectTooManyRequests {
	return &GetAuthorizationSubjectTooManyRequests{}
}

/*GetAuthorizationSubjectTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetAuthorizationSubjectTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationSubjectTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/{subjectId}][%d] getAuthorizationSubjectTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAuthorizationSubjectTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectInternalServerError creates a GetAuthorizationSubjectInternalServerError with default headers values
func NewGetAuthorizationSubjectInternalServerError() *GetAuthorizationSubjectInternalServerError {
	return &GetAuthorizationSubjectInternalServerError{}
}

/*GetAuthorizationSubjectInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetAuthorizationSubjectInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationSubjectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/{subjectId}][%d] getAuthorizationSubjectInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorizationSubjectInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectServiceUnavailable creates a GetAuthorizationSubjectServiceUnavailable with default headers values
func NewGetAuthorizationSubjectServiceUnavailable() *GetAuthorizationSubjectServiceUnavailable {
	return &GetAuthorizationSubjectServiceUnavailable{}
}

/*GetAuthorizationSubjectServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetAuthorizationSubjectServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationSubjectServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/{subjectId}][%d] getAuthorizationSubjectServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuthorizationSubjectServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectGatewayTimeout creates a GetAuthorizationSubjectGatewayTimeout with default headers values
func NewGetAuthorizationSubjectGatewayTimeout() *GetAuthorizationSubjectGatewayTimeout {
	return &GetAuthorizationSubjectGatewayTimeout{}
}

/*GetAuthorizationSubjectGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetAuthorizationSubjectGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationSubjectGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/{subjectId}][%d] getAuthorizationSubjectGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAuthorizationSubjectGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

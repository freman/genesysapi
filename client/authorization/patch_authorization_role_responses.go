// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchAuthorizationRoleReader is a Reader for the PatchAuthorizationRole structure.
type PatchAuthorizationRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAuthorizationRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchAuthorizationRoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchAuthorizationRoleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchAuthorizationRoleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchAuthorizationRoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchAuthorizationRoleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchAuthorizationRoleRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchAuthorizationRoleRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchAuthorizationRoleUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchAuthorizationRoleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchAuthorizationRoleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchAuthorizationRoleServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchAuthorizationRoleGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchAuthorizationRoleOK creates a PatchAuthorizationRoleOK with default headers values
func NewPatchAuthorizationRoleOK() *PatchAuthorizationRoleOK {
	return &PatchAuthorizationRoleOK{}
}

/*PatchAuthorizationRoleOK handles this case with default header values.

successful operation
*/
type PatchAuthorizationRoleOK struct {
	Payload *models.DomainOrganizationRole
}

func (o *PatchAuthorizationRoleOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/roles/{roleId}][%d] patchAuthorizationRoleOK  %+v", 200, o.Payload)
}

func (o *PatchAuthorizationRoleOK) GetPayload() *models.DomainOrganizationRole {
	return o.Payload
}

func (o *PatchAuthorizationRoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DomainOrganizationRole)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationRoleBadRequest creates a PatchAuthorizationRoleBadRequest with default headers values
func NewPatchAuthorizationRoleBadRequest() *PatchAuthorizationRoleBadRequest {
	return &PatchAuthorizationRoleBadRequest{}
}

/*PatchAuthorizationRoleBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchAuthorizationRoleBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchAuthorizationRoleBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/roles/{roleId}][%d] patchAuthorizationRoleBadRequest  %+v", 400, o.Payload)
}

func (o *PatchAuthorizationRoleBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationRoleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationRoleUnauthorized creates a PatchAuthorizationRoleUnauthorized with default headers values
func NewPatchAuthorizationRoleUnauthorized() *PatchAuthorizationRoleUnauthorized {
	return &PatchAuthorizationRoleUnauthorized{}
}

/*PatchAuthorizationRoleUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchAuthorizationRoleUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchAuthorizationRoleUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/roles/{roleId}][%d] patchAuthorizationRoleUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchAuthorizationRoleUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationRoleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationRoleForbidden creates a PatchAuthorizationRoleForbidden with default headers values
func NewPatchAuthorizationRoleForbidden() *PatchAuthorizationRoleForbidden {
	return &PatchAuthorizationRoleForbidden{}
}

/*PatchAuthorizationRoleForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchAuthorizationRoleForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchAuthorizationRoleForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/roles/{roleId}][%d] patchAuthorizationRoleForbidden  %+v", 403, o.Payload)
}

func (o *PatchAuthorizationRoleForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationRoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationRoleNotFound creates a PatchAuthorizationRoleNotFound with default headers values
func NewPatchAuthorizationRoleNotFound() *PatchAuthorizationRoleNotFound {
	return &PatchAuthorizationRoleNotFound{}
}

/*PatchAuthorizationRoleNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchAuthorizationRoleNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchAuthorizationRoleNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/roles/{roleId}][%d] patchAuthorizationRoleNotFound  %+v", 404, o.Payload)
}

func (o *PatchAuthorizationRoleNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationRoleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationRoleRequestTimeout creates a PatchAuthorizationRoleRequestTimeout with default headers values
func NewPatchAuthorizationRoleRequestTimeout() *PatchAuthorizationRoleRequestTimeout {
	return &PatchAuthorizationRoleRequestTimeout{}
}

/*PatchAuthorizationRoleRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchAuthorizationRoleRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchAuthorizationRoleRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/roles/{roleId}][%d] patchAuthorizationRoleRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchAuthorizationRoleRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationRoleRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationRoleRequestEntityTooLarge creates a PatchAuthorizationRoleRequestEntityTooLarge with default headers values
func NewPatchAuthorizationRoleRequestEntityTooLarge() *PatchAuthorizationRoleRequestEntityTooLarge {
	return &PatchAuthorizationRoleRequestEntityTooLarge{}
}

/*PatchAuthorizationRoleRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchAuthorizationRoleRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchAuthorizationRoleRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/roles/{roleId}][%d] patchAuthorizationRoleRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchAuthorizationRoleRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationRoleRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationRoleUnsupportedMediaType creates a PatchAuthorizationRoleUnsupportedMediaType with default headers values
func NewPatchAuthorizationRoleUnsupportedMediaType() *PatchAuthorizationRoleUnsupportedMediaType {
	return &PatchAuthorizationRoleUnsupportedMediaType{}
}

/*PatchAuthorizationRoleUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchAuthorizationRoleUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchAuthorizationRoleUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/roles/{roleId}][%d] patchAuthorizationRoleUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchAuthorizationRoleUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationRoleUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationRoleTooManyRequests creates a PatchAuthorizationRoleTooManyRequests with default headers values
func NewPatchAuthorizationRoleTooManyRequests() *PatchAuthorizationRoleTooManyRequests {
	return &PatchAuthorizationRoleTooManyRequests{}
}

/*PatchAuthorizationRoleTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchAuthorizationRoleTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchAuthorizationRoleTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/roles/{roleId}][%d] patchAuthorizationRoleTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchAuthorizationRoleTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationRoleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationRoleInternalServerError creates a PatchAuthorizationRoleInternalServerError with default headers values
func NewPatchAuthorizationRoleInternalServerError() *PatchAuthorizationRoleInternalServerError {
	return &PatchAuthorizationRoleInternalServerError{}
}

/*PatchAuthorizationRoleInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchAuthorizationRoleInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchAuthorizationRoleInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/roles/{roleId}][%d] patchAuthorizationRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchAuthorizationRoleInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationRoleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationRoleServiceUnavailable creates a PatchAuthorizationRoleServiceUnavailable with default headers values
func NewPatchAuthorizationRoleServiceUnavailable() *PatchAuthorizationRoleServiceUnavailable {
	return &PatchAuthorizationRoleServiceUnavailable{}
}

/*PatchAuthorizationRoleServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchAuthorizationRoleServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchAuthorizationRoleServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/roles/{roleId}][%d] patchAuthorizationRoleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchAuthorizationRoleServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationRoleServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthorizationRoleGatewayTimeout creates a PatchAuthorizationRoleGatewayTimeout with default headers values
func NewPatchAuthorizationRoleGatewayTimeout() *PatchAuthorizationRoleGatewayTimeout {
	return &PatchAuthorizationRoleGatewayTimeout{}
}

/*PatchAuthorizationRoleGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchAuthorizationRoleGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchAuthorizationRoleGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/authorization/roles/{roleId}][%d] patchAuthorizationRoleGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchAuthorizationRoleGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchAuthorizationRoleGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetAuthorizationDivisionReader is a Reader for the GetAuthorizationDivision structure.
type GetAuthorizationDivisionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuthorizationDivisionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuthorizationDivisionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuthorizationDivisionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAuthorizationDivisionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAuthorizationDivisionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuthorizationDivisionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetAuthorizationDivisionRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAuthorizationDivisionRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAuthorizationDivisionUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAuthorizationDivisionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuthorizationDivisionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAuthorizationDivisionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetAuthorizationDivisionGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAuthorizationDivisionOK creates a GetAuthorizationDivisionOK with default headers values
func NewGetAuthorizationDivisionOK() *GetAuthorizationDivisionOK {
	return &GetAuthorizationDivisionOK{}
}

/*GetAuthorizationDivisionOK handles this case with default header values.

successful operation
*/
type GetAuthorizationDivisionOK struct {
	Payload *models.AuthzDivision
}

func (o *GetAuthorizationDivisionOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisions/{divisionId}][%d] getAuthorizationDivisionOK  %+v", 200, o.Payload)
}

func (o *GetAuthorizationDivisionOK) GetPayload() *models.AuthzDivision {
	return o.Payload
}

func (o *GetAuthorizationDivisionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthzDivision)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionBadRequest creates a GetAuthorizationDivisionBadRequest with default headers values
func NewGetAuthorizationDivisionBadRequest() *GetAuthorizationDivisionBadRequest {
	return &GetAuthorizationDivisionBadRequest{}
}

/*GetAuthorizationDivisionBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetAuthorizationDivisionBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisions/{divisionId}][%d] getAuthorizationDivisionBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorizationDivisionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionUnauthorized creates a GetAuthorizationDivisionUnauthorized with default headers values
func NewGetAuthorizationDivisionUnauthorized() *GetAuthorizationDivisionUnauthorized {
	return &GetAuthorizationDivisionUnauthorized{}
}

/*GetAuthorizationDivisionUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetAuthorizationDivisionUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisions/{divisionId}][%d] getAuthorizationDivisionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorizationDivisionUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionForbidden creates a GetAuthorizationDivisionForbidden with default headers values
func NewGetAuthorizationDivisionForbidden() *GetAuthorizationDivisionForbidden {
	return &GetAuthorizationDivisionForbidden{}
}

/*GetAuthorizationDivisionForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetAuthorizationDivisionForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisions/{divisionId}][%d] getAuthorizationDivisionForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthorizationDivisionForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionNotFound creates a GetAuthorizationDivisionNotFound with default headers values
func NewGetAuthorizationDivisionNotFound() *GetAuthorizationDivisionNotFound {
	return &GetAuthorizationDivisionNotFound{}
}

/*GetAuthorizationDivisionNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetAuthorizationDivisionNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisions/{divisionId}][%d] getAuthorizationDivisionNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorizationDivisionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionRequestTimeout creates a GetAuthorizationDivisionRequestTimeout with default headers values
func NewGetAuthorizationDivisionRequestTimeout() *GetAuthorizationDivisionRequestTimeout {
	return &GetAuthorizationDivisionRequestTimeout{}
}

/*GetAuthorizationDivisionRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetAuthorizationDivisionRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisions/{divisionId}][%d] getAuthorizationDivisionRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAuthorizationDivisionRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionRequestEntityTooLarge creates a GetAuthorizationDivisionRequestEntityTooLarge with default headers values
func NewGetAuthorizationDivisionRequestEntityTooLarge() *GetAuthorizationDivisionRequestEntityTooLarge {
	return &GetAuthorizationDivisionRequestEntityTooLarge{}
}

/*GetAuthorizationDivisionRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetAuthorizationDivisionRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisions/{divisionId}][%d] getAuthorizationDivisionRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAuthorizationDivisionRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionUnsupportedMediaType creates a GetAuthorizationDivisionUnsupportedMediaType with default headers values
func NewGetAuthorizationDivisionUnsupportedMediaType() *GetAuthorizationDivisionUnsupportedMediaType {
	return &GetAuthorizationDivisionUnsupportedMediaType{}
}

/*GetAuthorizationDivisionUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetAuthorizationDivisionUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisions/{divisionId}][%d] getAuthorizationDivisionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAuthorizationDivisionUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionTooManyRequests creates a GetAuthorizationDivisionTooManyRequests with default headers values
func NewGetAuthorizationDivisionTooManyRequests() *GetAuthorizationDivisionTooManyRequests {
	return &GetAuthorizationDivisionTooManyRequests{}
}

/*GetAuthorizationDivisionTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetAuthorizationDivisionTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisions/{divisionId}][%d] getAuthorizationDivisionTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAuthorizationDivisionTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionInternalServerError creates a GetAuthorizationDivisionInternalServerError with default headers values
func NewGetAuthorizationDivisionInternalServerError() *GetAuthorizationDivisionInternalServerError {
	return &GetAuthorizationDivisionInternalServerError{}
}

/*GetAuthorizationDivisionInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetAuthorizationDivisionInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisions/{divisionId}][%d] getAuthorizationDivisionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorizationDivisionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionServiceUnavailable creates a GetAuthorizationDivisionServiceUnavailable with default headers values
func NewGetAuthorizationDivisionServiceUnavailable() *GetAuthorizationDivisionServiceUnavailable {
	return &GetAuthorizationDivisionServiceUnavailable{}
}

/*GetAuthorizationDivisionServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetAuthorizationDivisionServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisions/{divisionId}][%d] getAuthorizationDivisionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuthorizationDivisionServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionGatewayTimeout creates a GetAuthorizationDivisionGatewayTimeout with default headers values
func NewGetAuthorizationDivisionGatewayTimeout() *GetAuthorizationDivisionGatewayTimeout {
	return &GetAuthorizationDivisionGatewayTimeout{}
}

/*GetAuthorizationDivisionGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetAuthorizationDivisionGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationDivisionGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisions/{divisionId}][%d] getAuthorizationDivisionGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAuthorizationDivisionGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

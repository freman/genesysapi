// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostAuthorizationSubjectDivisionRoleReader is a Reader for the PostAuthorizationSubjectDivisionRole structure.
type PostAuthorizationSubjectDivisionRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAuthorizationSubjectDivisionRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewPostAuthorizationSubjectDivisionRoleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostAuthorizationSubjectDivisionRoleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostAuthorizationSubjectDivisionRoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostAuthorizationSubjectDivisionRoleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostAuthorizationSubjectDivisionRoleRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostAuthorizationSubjectDivisionRoleRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostAuthorizationSubjectDivisionRoleUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostAuthorizationSubjectDivisionRoleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostAuthorizationSubjectDivisionRoleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostAuthorizationSubjectDivisionRoleServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostAuthorizationSubjectDivisionRoleGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPostAuthorizationSubjectDivisionRoleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostAuthorizationSubjectDivisionRoleBadRequest creates a PostAuthorizationSubjectDivisionRoleBadRequest with default headers values
func NewPostAuthorizationSubjectDivisionRoleBadRequest() *PostAuthorizationSubjectDivisionRoleBadRequest {
	return &PostAuthorizationSubjectDivisionRoleBadRequest{}
}

/*
PostAuthorizationSubjectDivisionRoleBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostAuthorizationSubjectDivisionRoleBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization subject division role bad request response has a 2xx status code
func (o *PostAuthorizationSubjectDivisionRoleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization subject division role bad request response has a 3xx status code
func (o *PostAuthorizationSubjectDivisionRoleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization subject division role bad request response has a 4xx status code
func (o *PostAuthorizationSubjectDivisionRoleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization subject division role bad request response has a 5xx status code
func (o *PostAuthorizationSubjectDivisionRoleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization subject division role bad request response a status code equal to that given
func (o *PostAuthorizationSubjectDivisionRoleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostAuthorizationSubjectDivisionRoleBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleBadRequest  %+v", 400, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleBadRequest  %+v", 400, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationSubjectDivisionRoleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationSubjectDivisionRoleUnauthorized creates a PostAuthorizationSubjectDivisionRoleUnauthorized with default headers values
func NewPostAuthorizationSubjectDivisionRoleUnauthorized() *PostAuthorizationSubjectDivisionRoleUnauthorized {
	return &PostAuthorizationSubjectDivisionRoleUnauthorized{}
}

/*
PostAuthorizationSubjectDivisionRoleUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostAuthorizationSubjectDivisionRoleUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization subject division role unauthorized response has a 2xx status code
func (o *PostAuthorizationSubjectDivisionRoleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization subject division role unauthorized response has a 3xx status code
func (o *PostAuthorizationSubjectDivisionRoleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization subject division role unauthorized response has a 4xx status code
func (o *PostAuthorizationSubjectDivisionRoleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization subject division role unauthorized response has a 5xx status code
func (o *PostAuthorizationSubjectDivisionRoleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization subject division role unauthorized response a status code equal to that given
func (o *PostAuthorizationSubjectDivisionRoleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostAuthorizationSubjectDivisionRoleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleUnauthorized  %+v", 401, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleUnauthorized  %+v", 401, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationSubjectDivisionRoleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationSubjectDivisionRoleForbidden creates a PostAuthorizationSubjectDivisionRoleForbidden with default headers values
func NewPostAuthorizationSubjectDivisionRoleForbidden() *PostAuthorizationSubjectDivisionRoleForbidden {
	return &PostAuthorizationSubjectDivisionRoleForbidden{}
}

/*
PostAuthorizationSubjectDivisionRoleForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostAuthorizationSubjectDivisionRoleForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization subject division role forbidden response has a 2xx status code
func (o *PostAuthorizationSubjectDivisionRoleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization subject division role forbidden response has a 3xx status code
func (o *PostAuthorizationSubjectDivisionRoleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization subject division role forbidden response has a 4xx status code
func (o *PostAuthorizationSubjectDivisionRoleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization subject division role forbidden response has a 5xx status code
func (o *PostAuthorizationSubjectDivisionRoleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization subject division role forbidden response a status code equal to that given
func (o *PostAuthorizationSubjectDivisionRoleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostAuthorizationSubjectDivisionRoleForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleForbidden  %+v", 403, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleForbidden  %+v", 403, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationSubjectDivisionRoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationSubjectDivisionRoleNotFound creates a PostAuthorizationSubjectDivisionRoleNotFound with default headers values
func NewPostAuthorizationSubjectDivisionRoleNotFound() *PostAuthorizationSubjectDivisionRoleNotFound {
	return &PostAuthorizationSubjectDivisionRoleNotFound{}
}

/*
PostAuthorizationSubjectDivisionRoleNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostAuthorizationSubjectDivisionRoleNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization subject division role not found response has a 2xx status code
func (o *PostAuthorizationSubjectDivisionRoleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization subject division role not found response has a 3xx status code
func (o *PostAuthorizationSubjectDivisionRoleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization subject division role not found response has a 4xx status code
func (o *PostAuthorizationSubjectDivisionRoleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization subject division role not found response has a 5xx status code
func (o *PostAuthorizationSubjectDivisionRoleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization subject division role not found response a status code equal to that given
func (o *PostAuthorizationSubjectDivisionRoleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostAuthorizationSubjectDivisionRoleNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleNotFound  %+v", 404, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleNotFound  %+v", 404, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationSubjectDivisionRoleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationSubjectDivisionRoleRequestTimeout creates a PostAuthorizationSubjectDivisionRoleRequestTimeout with default headers values
func NewPostAuthorizationSubjectDivisionRoleRequestTimeout() *PostAuthorizationSubjectDivisionRoleRequestTimeout {
	return &PostAuthorizationSubjectDivisionRoleRequestTimeout{}
}

/*
PostAuthorizationSubjectDivisionRoleRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostAuthorizationSubjectDivisionRoleRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization subject division role request timeout response has a 2xx status code
func (o *PostAuthorizationSubjectDivisionRoleRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization subject division role request timeout response has a 3xx status code
func (o *PostAuthorizationSubjectDivisionRoleRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization subject division role request timeout response has a 4xx status code
func (o *PostAuthorizationSubjectDivisionRoleRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization subject division role request timeout response has a 5xx status code
func (o *PostAuthorizationSubjectDivisionRoleRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization subject division role request timeout response a status code equal to that given
func (o *PostAuthorizationSubjectDivisionRoleRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostAuthorizationSubjectDivisionRoleRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationSubjectDivisionRoleRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationSubjectDivisionRoleRequestEntityTooLarge creates a PostAuthorizationSubjectDivisionRoleRequestEntityTooLarge with default headers values
func NewPostAuthorizationSubjectDivisionRoleRequestEntityTooLarge() *PostAuthorizationSubjectDivisionRoleRequestEntityTooLarge {
	return &PostAuthorizationSubjectDivisionRoleRequestEntityTooLarge{}
}

/*
PostAuthorizationSubjectDivisionRoleRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PostAuthorizationSubjectDivisionRoleRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization subject division role request entity too large response has a 2xx status code
func (o *PostAuthorizationSubjectDivisionRoleRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization subject division role request entity too large response has a 3xx status code
func (o *PostAuthorizationSubjectDivisionRoleRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization subject division role request entity too large response has a 4xx status code
func (o *PostAuthorizationSubjectDivisionRoleRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization subject division role request entity too large response has a 5xx status code
func (o *PostAuthorizationSubjectDivisionRoleRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization subject division role request entity too large response a status code equal to that given
func (o *PostAuthorizationSubjectDivisionRoleRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostAuthorizationSubjectDivisionRoleRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationSubjectDivisionRoleRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationSubjectDivisionRoleUnsupportedMediaType creates a PostAuthorizationSubjectDivisionRoleUnsupportedMediaType with default headers values
func NewPostAuthorizationSubjectDivisionRoleUnsupportedMediaType() *PostAuthorizationSubjectDivisionRoleUnsupportedMediaType {
	return &PostAuthorizationSubjectDivisionRoleUnsupportedMediaType{}
}

/*
PostAuthorizationSubjectDivisionRoleUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostAuthorizationSubjectDivisionRoleUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization subject division role unsupported media type response has a 2xx status code
func (o *PostAuthorizationSubjectDivisionRoleUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization subject division role unsupported media type response has a 3xx status code
func (o *PostAuthorizationSubjectDivisionRoleUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization subject division role unsupported media type response has a 4xx status code
func (o *PostAuthorizationSubjectDivisionRoleUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization subject division role unsupported media type response has a 5xx status code
func (o *PostAuthorizationSubjectDivisionRoleUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization subject division role unsupported media type response a status code equal to that given
func (o *PostAuthorizationSubjectDivisionRoleUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostAuthorizationSubjectDivisionRoleUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationSubjectDivisionRoleUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationSubjectDivisionRoleTooManyRequests creates a PostAuthorizationSubjectDivisionRoleTooManyRequests with default headers values
func NewPostAuthorizationSubjectDivisionRoleTooManyRequests() *PostAuthorizationSubjectDivisionRoleTooManyRequests {
	return &PostAuthorizationSubjectDivisionRoleTooManyRequests{}
}

/*
PostAuthorizationSubjectDivisionRoleTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostAuthorizationSubjectDivisionRoleTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization subject division role too many requests response has a 2xx status code
func (o *PostAuthorizationSubjectDivisionRoleTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization subject division role too many requests response has a 3xx status code
func (o *PostAuthorizationSubjectDivisionRoleTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization subject division role too many requests response has a 4xx status code
func (o *PostAuthorizationSubjectDivisionRoleTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization subject division role too many requests response has a 5xx status code
func (o *PostAuthorizationSubjectDivisionRoleTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization subject division role too many requests response a status code equal to that given
func (o *PostAuthorizationSubjectDivisionRoleTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostAuthorizationSubjectDivisionRoleTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationSubjectDivisionRoleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationSubjectDivisionRoleInternalServerError creates a PostAuthorizationSubjectDivisionRoleInternalServerError with default headers values
func NewPostAuthorizationSubjectDivisionRoleInternalServerError() *PostAuthorizationSubjectDivisionRoleInternalServerError {
	return &PostAuthorizationSubjectDivisionRoleInternalServerError{}
}

/*
PostAuthorizationSubjectDivisionRoleInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostAuthorizationSubjectDivisionRoleInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization subject division role internal server error response has a 2xx status code
func (o *PostAuthorizationSubjectDivisionRoleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization subject division role internal server error response has a 3xx status code
func (o *PostAuthorizationSubjectDivisionRoleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization subject division role internal server error response has a 4xx status code
func (o *PostAuthorizationSubjectDivisionRoleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authorization subject division role internal server error response has a 5xx status code
func (o *PostAuthorizationSubjectDivisionRoleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post authorization subject division role internal server error response a status code equal to that given
func (o *PostAuthorizationSubjectDivisionRoleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostAuthorizationSubjectDivisionRoleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationSubjectDivisionRoleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationSubjectDivisionRoleServiceUnavailable creates a PostAuthorizationSubjectDivisionRoleServiceUnavailable with default headers values
func NewPostAuthorizationSubjectDivisionRoleServiceUnavailable() *PostAuthorizationSubjectDivisionRoleServiceUnavailable {
	return &PostAuthorizationSubjectDivisionRoleServiceUnavailable{}
}

/*
PostAuthorizationSubjectDivisionRoleServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostAuthorizationSubjectDivisionRoleServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization subject division role service unavailable response has a 2xx status code
func (o *PostAuthorizationSubjectDivisionRoleServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization subject division role service unavailable response has a 3xx status code
func (o *PostAuthorizationSubjectDivisionRoleServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization subject division role service unavailable response has a 4xx status code
func (o *PostAuthorizationSubjectDivisionRoleServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authorization subject division role service unavailable response has a 5xx status code
func (o *PostAuthorizationSubjectDivisionRoleServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post authorization subject division role service unavailable response a status code equal to that given
func (o *PostAuthorizationSubjectDivisionRoleServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostAuthorizationSubjectDivisionRoleServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationSubjectDivisionRoleServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationSubjectDivisionRoleGatewayTimeout creates a PostAuthorizationSubjectDivisionRoleGatewayTimeout with default headers values
func NewPostAuthorizationSubjectDivisionRoleGatewayTimeout() *PostAuthorizationSubjectDivisionRoleGatewayTimeout {
	return &PostAuthorizationSubjectDivisionRoleGatewayTimeout{}
}

/*
PostAuthorizationSubjectDivisionRoleGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostAuthorizationSubjectDivisionRoleGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization subject division role gateway timeout response has a 2xx status code
func (o *PostAuthorizationSubjectDivisionRoleGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization subject division role gateway timeout response has a 3xx status code
func (o *PostAuthorizationSubjectDivisionRoleGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization subject division role gateway timeout response has a 4xx status code
func (o *PostAuthorizationSubjectDivisionRoleGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authorization subject division role gateway timeout response has a 5xx status code
func (o *PostAuthorizationSubjectDivisionRoleGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post authorization subject division role gateway timeout response a status code equal to that given
func (o *PostAuthorizationSubjectDivisionRoleGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostAuthorizationSubjectDivisionRoleGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRoleGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostAuthorizationSubjectDivisionRoleGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationSubjectDivisionRoleGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationSubjectDivisionRoleDefault creates a PostAuthorizationSubjectDivisionRoleDefault with default headers values
func NewPostAuthorizationSubjectDivisionRoleDefault(code int) *PostAuthorizationSubjectDivisionRoleDefault {
	return &PostAuthorizationSubjectDivisionRoleDefault{
		_statusCode: code,
	}
}

/*
PostAuthorizationSubjectDivisionRoleDefault describes a response with status code -1, with default header values.

successful operation
*/
type PostAuthorizationSubjectDivisionRoleDefault struct {
	_statusCode int
}

// Code gets the status code for the post authorization subject division role default response
func (o *PostAuthorizationSubjectDivisionRoleDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this post authorization subject division role default response has a 2xx status code
func (o *PostAuthorizationSubjectDivisionRoleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this post authorization subject division role default response has a 3xx status code
func (o *PostAuthorizationSubjectDivisionRoleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this post authorization subject division role default response has a 4xx status code
func (o *PostAuthorizationSubjectDivisionRoleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this post authorization subject division role default response has a 5xx status code
func (o *PostAuthorizationSubjectDivisionRoleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this post authorization subject division role default response a status code equal to that given
func (o *PostAuthorizationSubjectDivisionRoleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *PostAuthorizationSubjectDivisionRoleDefault) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRole default ", o._statusCode)
}

func (o *PostAuthorizationSubjectDivisionRoleDefault) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}][%d] postAuthorizationSubjectDivisionRole default ", o._statusCode)
}

func (o *PostAuthorizationSubjectDivisionRoleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

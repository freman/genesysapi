// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostAuthorizationSubjectDivisionRoleParams creates a new PostAuthorizationSubjectDivisionRoleParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostAuthorizationSubjectDivisionRoleParams() *PostAuthorizationSubjectDivisionRoleParams {
	return &PostAuthorizationSubjectDivisionRoleParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostAuthorizationSubjectDivisionRoleParamsWithTimeout creates a new PostAuthorizationSubjectDivisionRoleParams object
// with the ability to set a timeout on a request.
func NewPostAuthorizationSubjectDivisionRoleParamsWithTimeout(timeout time.Duration) *PostAuthorizationSubjectDivisionRoleParams {
	return &PostAuthorizationSubjectDivisionRoleParams{
		timeout: timeout,
	}
}

// NewPostAuthorizationSubjectDivisionRoleParamsWithContext creates a new PostAuthorizationSubjectDivisionRoleParams object
// with the ability to set a context for a request.
func NewPostAuthorizationSubjectDivisionRoleParamsWithContext(ctx context.Context) *PostAuthorizationSubjectDivisionRoleParams {
	return &PostAuthorizationSubjectDivisionRoleParams{
		Context: ctx,
	}
}

// NewPostAuthorizationSubjectDivisionRoleParamsWithHTTPClient creates a new PostAuthorizationSubjectDivisionRoleParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostAuthorizationSubjectDivisionRoleParamsWithHTTPClient(client *http.Client) *PostAuthorizationSubjectDivisionRoleParams {
	return &PostAuthorizationSubjectDivisionRoleParams{
		HTTPClient: client,
	}
}

/*
PostAuthorizationSubjectDivisionRoleParams contains all the parameters to send to the API endpoint

	for the post authorization subject division role operation.

	Typically these are written to a http.Request.
*/
type PostAuthorizationSubjectDivisionRoleParams struct {

	/* DivisionID.

	   the id of the division to which to make the grant
	*/
	DivisionID string

	/* RoleID.

	   the id of the role to grant
	*/
	RoleID string

	/* SubjectID.

	   Subject ID (user or group)
	*/
	SubjectID string

	/* SubjectType.

	   what the type of the subject is: PC_GROUP, PC_USER or PC_OAUTH_CLIENT (note: for cross-org authorization, please use the Organization Authorization endpoints)

	   Default: "PC_USER"
	*/
	SubjectType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post authorization subject division role params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostAuthorizationSubjectDivisionRoleParams) WithDefaults() *PostAuthorizationSubjectDivisionRoleParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post authorization subject division role params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostAuthorizationSubjectDivisionRoleParams) SetDefaults() {
	var (
		subjectTypeDefault = string("PC_USER")
	)

	val := PostAuthorizationSubjectDivisionRoleParams{
		SubjectType: &subjectTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the post authorization subject division role params
func (o *PostAuthorizationSubjectDivisionRoleParams) WithTimeout(timeout time.Duration) *PostAuthorizationSubjectDivisionRoleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post authorization subject division role params
func (o *PostAuthorizationSubjectDivisionRoleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post authorization subject division role params
func (o *PostAuthorizationSubjectDivisionRoleParams) WithContext(ctx context.Context) *PostAuthorizationSubjectDivisionRoleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post authorization subject division role params
func (o *PostAuthorizationSubjectDivisionRoleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post authorization subject division role params
func (o *PostAuthorizationSubjectDivisionRoleParams) WithHTTPClient(client *http.Client) *PostAuthorizationSubjectDivisionRoleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post authorization subject division role params
func (o *PostAuthorizationSubjectDivisionRoleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDivisionID adds the divisionID to the post authorization subject division role params
func (o *PostAuthorizationSubjectDivisionRoleParams) WithDivisionID(divisionID string) *PostAuthorizationSubjectDivisionRoleParams {
	o.SetDivisionID(divisionID)
	return o
}

// SetDivisionID adds the divisionId to the post authorization subject division role params
func (o *PostAuthorizationSubjectDivisionRoleParams) SetDivisionID(divisionID string) {
	o.DivisionID = divisionID
}

// WithRoleID adds the roleID to the post authorization subject division role params
func (o *PostAuthorizationSubjectDivisionRoleParams) WithRoleID(roleID string) *PostAuthorizationSubjectDivisionRoleParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the post authorization subject division role params
func (o *PostAuthorizationSubjectDivisionRoleParams) SetRoleID(roleID string) {
	o.RoleID = roleID
}

// WithSubjectID adds the subjectID to the post authorization subject division role params
func (o *PostAuthorizationSubjectDivisionRoleParams) WithSubjectID(subjectID string) *PostAuthorizationSubjectDivisionRoleParams {
	o.SetSubjectID(subjectID)
	return o
}

// SetSubjectID adds the subjectId to the post authorization subject division role params
func (o *PostAuthorizationSubjectDivisionRoleParams) SetSubjectID(subjectID string) {
	o.SubjectID = subjectID
}

// WithSubjectType adds the subjectType to the post authorization subject division role params
func (o *PostAuthorizationSubjectDivisionRoleParams) WithSubjectType(subjectType *string) *PostAuthorizationSubjectDivisionRoleParams {
	o.SetSubjectType(subjectType)
	return o
}

// SetSubjectType adds the subjectType to the post authorization subject division role params
func (o *PostAuthorizationSubjectDivisionRoleParams) SetSubjectType(subjectType *string) {
	o.SubjectType = subjectType
}

// WriteToRequest writes these params to a swagger request
func (o *PostAuthorizationSubjectDivisionRoleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param divisionId
	if err := r.SetPathParam("divisionId", o.DivisionID); err != nil {
		return err
	}

	// path param roleId
	if err := r.SetPathParam("roleId", o.RoleID); err != nil {
		return err
	}

	// path param subjectId
	if err := r.SetPathParam("subjectId", o.SubjectID); err != nil {
		return err
	}

	if o.SubjectType != nil {

		// query param subjectType
		var qrSubjectType string

		if o.SubjectType != nil {
			qrSubjectType = *o.SubjectType
		}
		qSubjectType := qrSubjectType
		if qSubjectType != "" {

			if err := r.SetQueryParam("subjectType", qSubjectType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

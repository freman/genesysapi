// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteAuthorizationSubjectDivisionRoleParams creates a new DeleteAuthorizationSubjectDivisionRoleParams object
// with the default values initialized.
func NewDeleteAuthorizationSubjectDivisionRoleParams() *DeleteAuthorizationSubjectDivisionRoleParams {
	var ()
	return &DeleteAuthorizationSubjectDivisionRoleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteAuthorizationSubjectDivisionRoleParamsWithTimeout creates a new DeleteAuthorizationSubjectDivisionRoleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteAuthorizationSubjectDivisionRoleParamsWithTimeout(timeout time.Duration) *DeleteAuthorizationSubjectDivisionRoleParams {
	var ()
	return &DeleteAuthorizationSubjectDivisionRoleParams{

		timeout: timeout,
	}
}

// NewDeleteAuthorizationSubjectDivisionRoleParamsWithContext creates a new DeleteAuthorizationSubjectDivisionRoleParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteAuthorizationSubjectDivisionRoleParamsWithContext(ctx context.Context) *DeleteAuthorizationSubjectDivisionRoleParams {
	var ()
	return &DeleteAuthorizationSubjectDivisionRoleParams{

		Context: ctx,
	}
}

// NewDeleteAuthorizationSubjectDivisionRoleParamsWithHTTPClient creates a new DeleteAuthorizationSubjectDivisionRoleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteAuthorizationSubjectDivisionRoleParamsWithHTTPClient(client *http.Client) *DeleteAuthorizationSubjectDivisionRoleParams {
	var ()
	return &DeleteAuthorizationSubjectDivisionRoleParams{
		HTTPClient: client,
	}
}

/*DeleteAuthorizationSubjectDivisionRoleParams contains all the parameters to send to the API endpoint
for the delete authorization subject division role operation typically these are written to a http.Request
*/
type DeleteAuthorizationSubjectDivisionRoleParams struct {

	/*DivisionID
	  the id of the division of the grant

	*/
	DivisionID string
	/*RoleID
	  the id of the role of the grant

	*/
	RoleID string
	/*SubjectID
	  Subject ID (user or group)

	*/
	SubjectID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete authorization subject division role params
func (o *DeleteAuthorizationSubjectDivisionRoleParams) WithTimeout(timeout time.Duration) *DeleteAuthorizationSubjectDivisionRoleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete authorization subject division role params
func (o *DeleteAuthorizationSubjectDivisionRoleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete authorization subject division role params
func (o *DeleteAuthorizationSubjectDivisionRoleParams) WithContext(ctx context.Context) *DeleteAuthorizationSubjectDivisionRoleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete authorization subject division role params
func (o *DeleteAuthorizationSubjectDivisionRoleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete authorization subject division role params
func (o *DeleteAuthorizationSubjectDivisionRoleParams) WithHTTPClient(client *http.Client) *DeleteAuthorizationSubjectDivisionRoleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete authorization subject division role params
func (o *DeleteAuthorizationSubjectDivisionRoleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDivisionID adds the divisionID to the delete authorization subject division role params
func (o *DeleteAuthorizationSubjectDivisionRoleParams) WithDivisionID(divisionID string) *DeleteAuthorizationSubjectDivisionRoleParams {
	o.SetDivisionID(divisionID)
	return o
}

// SetDivisionID adds the divisionId to the delete authorization subject division role params
func (o *DeleteAuthorizationSubjectDivisionRoleParams) SetDivisionID(divisionID string) {
	o.DivisionID = divisionID
}

// WithRoleID adds the roleID to the delete authorization subject division role params
func (o *DeleteAuthorizationSubjectDivisionRoleParams) WithRoleID(roleID string) *DeleteAuthorizationSubjectDivisionRoleParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the delete authorization subject division role params
func (o *DeleteAuthorizationSubjectDivisionRoleParams) SetRoleID(roleID string) {
	o.RoleID = roleID
}

// WithSubjectID adds the subjectID to the delete authorization subject division role params
func (o *DeleteAuthorizationSubjectDivisionRoleParams) WithSubjectID(subjectID string) *DeleteAuthorizationSubjectDivisionRoleParams {
	o.SetSubjectID(subjectID)
	return o
}

// SetSubjectID adds the subjectId to the delete authorization subject division role params
func (o *DeleteAuthorizationSubjectDivisionRoleParams) SetSubjectID(subjectID string) {
	o.SubjectID = subjectID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteAuthorizationSubjectDivisionRoleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param divisionId
	if err := r.SetPathParam("divisionId", o.DivisionID); err != nil {
		return err
	}

	// path param roleId
	if err := r.SetPathParam("roleId", o.RoleID); err != nil {
		return err
	}

	// path param subjectId
	if err := r.SetPathParam("subjectId", o.SubjectID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

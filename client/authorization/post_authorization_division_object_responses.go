// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostAuthorizationDivisionObjectReader is a Reader for the PostAuthorizationDivisionObject structure.
type PostAuthorizationDivisionObjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAuthorizationDivisionObjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPostAuthorizationDivisionObjectNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostAuthorizationDivisionObjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostAuthorizationDivisionObjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostAuthorizationDivisionObjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostAuthorizationDivisionObjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostAuthorizationDivisionObjectRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostAuthorizationDivisionObjectConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostAuthorizationDivisionObjectRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostAuthorizationDivisionObjectUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostAuthorizationDivisionObjectTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostAuthorizationDivisionObjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostAuthorizationDivisionObjectServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostAuthorizationDivisionObjectGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostAuthorizationDivisionObjectNoContent creates a PostAuthorizationDivisionObjectNoContent with default headers values
func NewPostAuthorizationDivisionObjectNoContent() *PostAuthorizationDivisionObjectNoContent {
	return &PostAuthorizationDivisionObjectNoContent{}
}

/*
PostAuthorizationDivisionObjectNoContent describes a response with status code 204, with default header values.

The divisions were updated successfully
*/
type PostAuthorizationDivisionObjectNoContent struct {
}

// IsSuccess returns true when this post authorization division object no content response has a 2xx status code
func (o *PostAuthorizationDivisionObjectNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post authorization division object no content response has a 3xx status code
func (o *PostAuthorizationDivisionObjectNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization division object no content response has a 4xx status code
func (o *PostAuthorizationDivisionObjectNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authorization division object no content response has a 5xx status code
func (o *PostAuthorizationDivisionObjectNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization division object no content response a status code equal to that given
func (o *PostAuthorizationDivisionObjectNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *PostAuthorizationDivisionObjectNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectNoContent ", 204)
}

func (o *PostAuthorizationDivisionObjectNoContent) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectNoContent ", 204)
}

func (o *PostAuthorizationDivisionObjectNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostAuthorizationDivisionObjectBadRequest creates a PostAuthorizationDivisionObjectBadRequest with default headers values
func NewPostAuthorizationDivisionObjectBadRequest() *PostAuthorizationDivisionObjectBadRequest {
	return &PostAuthorizationDivisionObjectBadRequest{}
}

/*
PostAuthorizationDivisionObjectBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostAuthorizationDivisionObjectBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization division object bad request response has a 2xx status code
func (o *PostAuthorizationDivisionObjectBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization division object bad request response has a 3xx status code
func (o *PostAuthorizationDivisionObjectBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization division object bad request response has a 4xx status code
func (o *PostAuthorizationDivisionObjectBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization division object bad request response has a 5xx status code
func (o *PostAuthorizationDivisionObjectBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization division object bad request response a status code equal to that given
func (o *PostAuthorizationDivisionObjectBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostAuthorizationDivisionObjectBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectBadRequest  %+v", 400, o.Payload)
}

func (o *PostAuthorizationDivisionObjectBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectBadRequest  %+v", 400, o.Payload)
}

func (o *PostAuthorizationDivisionObjectBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionObjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionObjectUnauthorized creates a PostAuthorizationDivisionObjectUnauthorized with default headers values
func NewPostAuthorizationDivisionObjectUnauthorized() *PostAuthorizationDivisionObjectUnauthorized {
	return &PostAuthorizationDivisionObjectUnauthorized{}
}

/*
PostAuthorizationDivisionObjectUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostAuthorizationDivisionObjectUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization division object unauthorized response has a 2xx status code
func (o *PostAuthorizationDivisionObjectUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization division object unauthorized response has a 3xx status code
func (o *PostAuthorizationDivisionObjectUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization division object unauthorized response has a 4xx status code
func (o *PostAuthorizationDivisionObjectUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization division object unauthorized response has a 5xx status code
func (o *PostAuthorizationDivisionObjectUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization division object unauthorized response a status code equal to that given
func (o *PostAuthorizationDivisionObjectUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostAuthorizationDivisionObjectUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectUnauthorized  %+v", 401, o.Payload)
}

func (o *PostAuthorizationDivisionObjectUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectUnauthorized  %+v", 401, o.Payload)
}

func (o *PostAuthorizationDivisionObjectUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionObjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionObjectForbidden creates a PostAuthorizationDivisionObjectForbidden with default headers values
func NewPostAuthorizationDivisionObjectForbidden() *PostAuthorizationDivisionObjectForbidden {
	return &PostAuthorizationDivisionObjectForbidden{}
}

/*
PostAuthorizationDivisionObjectForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostAuthorizationDivisionObjectForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization division object forbidden response has a 2xx status code
func (o *PostAuthorizationDivisionObjectForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization division object forbidden response has a 3xx status code
func (o *PostAuthorizationDivisionObjectForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization division object forbidden response has a 4xx status code
func (o *PostAuthorizationDivisionObjectForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization division object forbidden response has a 5xx status code
func (o *PostAuthorizationDivisionObjectForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization division object forbidden response a status code equal to that given
func (o *PostAuthorizationDivisionObjectForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostAuthorizationDivisionObjectForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectForbidden  %+v", 403, o.Payload)
}

func (o *PostAuthorizationDivisionObjectForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectForbidden  %+v", 403, o.Payload)
}

func (o *PostAuthorizationDivisionObjectForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionObjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionObjectNotFound creates a PostAuthorizationDivisionObjectNotFound with default headers values
func NewPostAuthorizationDivisionObjectNotFound() *PostAuthorizationDivisionObjectNotFound {
	return &PostAuthorizationDivisionObjectNotFound{}
}

/*
PostAuthorizationDivisionObjectNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostAuthorizationDivisionObjectNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization division object not found response has a 2xx status code
func (o *PostAuthorizationDivisionObjectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization division object not found response has a 3xx status code
func (o *PostAuthorizationDivisionObjectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization division object not found response has a 4xx status code
func (o *PostAuthorizationDivisionObjectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization division object not found response has a 5xx status code
func (o *PostAuthorizationDivisionObjectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization division object not found response a status code equal to that given
func (o *PostAuthorizationDivisionObjectNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostAuthorizationDivisionObjectNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectNotFound  %+v", 404, o.Payload)
}

func (o *PostAuthorizationDivisionObjectNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectNotFound  %+v", 404, o.Payload)
}

func (o *PostAuthorizationDivisionObjectNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionObjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionObjectRequestTimeout creates a PostAuthorizationDivisionObjectRequestTimeout with default headers values
func NewPostAuthorizationDivisionObjectRequestTimeout() *PostAuthorizationDivisionObjectRequestTimeout {
	return &PostAuthorizationDivisionObjectRequestTimeout{}
}

/*
PostAuthorizationDivisionObjectRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostAuthorizationDivisionObjectRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization division object request timeout response has a 2xx status code
func (o *PostAuthorizationDivisionObjectRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization division object request timeout response has a 3xx status code
func (o *PostAuthorizationDivisionObjectRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization division object request timeout response has a 4xx status code
func (o *PostAuthorizationDivisionObjectRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization division object request timeout response has a 5xx status code
func (o *PostAuthorizationDivisionObjectRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization division object request timeout response a status code equal to that given
func (o *PostAuthorizationDivisionObjectRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostAuthorizationDivisionObjectRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostAuthorizationDivisionObjectRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostAuthorizationDivisionObjectRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionObjectRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionObjectConflict creates a PostAuthorizationDivisionObjectConflict with default headers values
func NewPostAuthorizationDivisionObjectConflict() *PostAuthorizationDivisionObjectConflict {
	return &PostAuthorizationDivisionObjectConflict{}
}

/*
PostAuthorizationDivisionObjectConflict describes a response with status code 409, with default header values.

Conflict
*/
type PostAuthorizationDivisionObjectConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization division object conflict response has a 2xx status code
func (o *PostAuthorizationDivisionObjectConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization division object conflict response has a 3xx status code
func (o *PostAuthorizationDivisionObjectConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization division object conflict response has a 4xx status code
func (o *PostAuthorizationDivisionObjectConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization division object conflict response has a 5xx status code
func (o *PostAuthorizationDivisionObjectConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization division object conflict response a status code equal to that given
func (o *PostAuthorizationDivisionObjectConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PostAuthorizationDivisionObjectConflict) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectConflict  %+v", 409, o.Payload)
}

func (o *PostAuthorizationDivisionObjectConflict) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectConflict  %+v", 409, o.Payload)
}

func (o *PostAuthorizationDivisionObjectConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionObjectConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionObjectRequestEntityTooLarge creates a PostAuthorizationDivisionObjectRequestEntityTooLarge with default headers values
func NewPostAuthorizationDivisionObjectRequestEntityTooLarge() *PostAuthorizationDivisionObjectRequestEntityTooLarge {
	return &PostAuthorizationDivisionObjectRequestEntityTooLarge{}
}

/*
PostAuthorizationDivisionObjectRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostAuthorizationDivisionObjectRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization division object request entity too large response has a 2xx status code
func (o *PostAuthorizationDivisionObjectRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization division object request entity too large response has a 3xx status code
func (o *PostAuthorizationDivisionObjectRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization division object request entity too large response has a 4xx status code
func (o *PostAuthorizationDivisionObjectRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization division object request entity too large response has a 5xx status code
func (o *PostAuthorizationDivisionObjectRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization division object request entity too large response a status code equal to that given
func (o *PostAuthorizationDivisionObjectRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostAuthorizationDivisionObjectRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostAuthorizationDivisionObjectRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostAuthorizationDivisionObjectRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionObjectRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionObjectUnsupportedMediaType creates a PostAuthorizationDivisionObjectUnsupportedMediaType with default headers values
func NewPostAuthorizationDivisionObjectUnsupportedMediaType() *PostAuthorizationDivisionObjectUnsupportedMediaType {
	return &PostAuthorizationDivisionObjectUnsupportedMediaType{}
}

/*
PostAuthorizationDivisionObjectUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostAuthorizationDivisionObjectUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization division object unsupported media type response has a 2xx status code
func (o *PostAuthorizationDivisionObjectUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization division object unsupported media type response has a 3xx status code
func (o *PostAuthorizationDivisionObjectUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization division object unsupported media type response has a 4xx status code
func (o *PostAuthorizationDivisionObjectUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization division object unsupported media type response has a 5xx status code
func (o *PostAuthorizationDivisionObjectUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization division object unsupported media type response a status code equal to that given
func (o *PostAuthorizationDivisionObjectUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostAuthorizationDivisionObjectUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostAuthorizationDivisionObjectUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostAuthorizationDivisionObjectUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionObjectUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionObjectTooManyRequests creates a PostAuthorizationDivisionObjectTooManyRequests with default headers values
func NewPostAuthorizationDivisionObjectTooManyRequests() *PostAuthorizationDivisionObjectTooManyRequests {
	return &PostAuthorizationDivisionObjectTooManyRequests{}
}

/*
PostAuthorizationDivisionObjectTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostAuthorizationDivisionObjectTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization division object too many requests response has a 2xx status code
func (o *PostAuthorizationDivisionObjectTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization division object too many requests response has a 3xx status code
func (o *PostAuthorizationDivisionObjectTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization division object too many requests response has a 4xx status code
func (o *PostAuthorizationDivisionObjectTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization division object too many requests response has a 5xx status code
func (o *PostAuthorizationDivisionObjectTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization division object too many requests response a status code equal to that given
func (o *PostAuthorizationDivisionObjectTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostAuthorizationDivisionObjectTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostAuthorizationDivisionObjectTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostAuthorizationDivisionObjectTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionObjectTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionObjectInternalServerError creates a PostAuthorizationDivisionObjectInternalServerError with default headers values
func NewPostAuthorizationDivisionObjectInternalServerError() *PostAuthorizationDivisionObjectInternalServerError {
	return &PostAuthorizationDivisionObjectInternalServerError{}
}

/*
PostAuthorizationDivisionObjectInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostAuthorizationDivisionObjectInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization division object internal server error response has a 2xx status code
func (o *PostAuthorizationDivisionObjectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization division object internal server error response has a 3xx status code
func (o *PostAuthorizationDivisionObjectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization division object internal server error response has a 4xx status code
func (o *PostAuthorizationDivisionObjectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authorization division object internal server error response has a 5xx status code
func (o *PostAuthorizationDivisionObjectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post authorization division object internal server error response a status code equal to that given
func (o *PostAuthorizationDivisionObjectInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostAuthorizationDivisionObjectInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectInternalServerError  %+v", 500, o.Payload)
}

func (o *PostAuthorizationDivisionObjectInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectInternalServerError  %+v", 500, o.Payload)
}

func (o *PostAuthorizationDivisionObjectInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionObjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionObjectServiceUnavailable creates a PostAuthorizationDivisionObjectServiceUnavailable with default headers values
func NewPostAuthorizationDivisionObjectServiceUnavailable() *PostAuthorizationDivisionObjectServiceUnavailable {
	return &PostAuthorizationDivisionObjectServiceUnavailable{}
}

/*
PostAuthorizationDivisionObjectServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostAuthorizationDivisionObjectServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization division object service unavailable response has a 2xx status code
func (o *PostAuthorizationDivisionObjectServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization division object service unavailable response has a 3xx status code
func (o *PostAuthorizationDivisionObjectServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization division object service unavailable response has a 4xx status code
func (o *PostAuthorizationDivisionObjectServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authorization division object service unavailable response has a 5xx status code
func (o *PostAuthorizationDivisionObjectServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post authorization division object service unavailable response a status code equal to that given
func (o *PostAuthorizationDivisionObjectServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostAuthorizationDivisionObjectServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostAuthorizationDivisionObjectServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostAuthorizationDivisionObjectServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionObjectServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionObjectGatewayTimeout creates a PostAuthorizationDivisionObjectGatewayTimeout with default headers values
func NewPostAuthorizationDivisionObjectGatewayTimeout() *PostAuthorizationDivisionObjectGatewayTimeout {
	return &PostAuthorizationDivisionObjectGatewayTimeout{}
}

/*
PostAuthorizationDivisionObjectGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostAuthorizationDivisionObjectGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization division object gateway timeout response has a 2xx status code
func (o *PostAuthorizationDivisionObjectGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization division object gateway timeout response has a 3xx status code
func (o *PostAuthorizationDivisionObjectGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization division object gateway timeout response has a 4xx status code
func (o *PostAuthorizationDivisionObjectGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authorization division object gateway timeout response has a 5xx status code
func (o *PostAuthorizationDivisionObjectGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post authorization division object gateway timeout response a status code equal to that given
func (o *PostAuthorizationDivisionObjectGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostAuthorizationDivisionObjectGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostAuthorizationDivisionObjectGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}][%d] postAuthorizationDivisionObjectGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostAuthorizationDivisionObjectGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionObjectGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

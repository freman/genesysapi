// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostAuthorizationRoleComparedefaultRightRoleIDReader is a Reader for the PostAuthorizationRoleComparedefaultRightRoleID structure.
type PostAuthorizationRoleComparedefaultRightRoleIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAuthorizationRoleComparedefaultRightRoleIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostAuthorizationRoleComparedefaultRightRoleIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostAuthorizationRoleComparedefaultRightRoleIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostAuthorizationRoleComparedefaultRightRoleIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostAuthorizationRoleComparedefaultRightRoleIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostAuthorizationRoleComparedefaultRightRoleIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostAuthorizationRoleComparedefaultRightRoleIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostAuthorizationRoleComparedefaultRightRoleIDOK creates a PostAuthorizationRoleComparedefaultRightRoleIDOK with default headers values
func NewPostAuthorizationRoleComparedefaultRightRoleIDOK() *PostAuthorizationRoleComparedefaultRightRoleIDOK {
	return &PostAuthorizationRoleComparedefaultRightRoleIDOK{}
}

/*
PostAuthorizationRoleComparedefaultRightRoleIDOK describes a response with status code 200, with default header values.

successful operation
*/
type PostAuthorizationRoleComparedefaultRightRoleIDOK struct {
	Payload *models.DomainOrgRoleDifference
}

// IsSuccess returns true when this post authorization role comparedefault right role Id o k response has a 2xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post authorization role comparedefault right role Id o k response has a 3xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization role comparedefault right role Id o k response has a 4xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authorization role comparedefault right role Id o k response has a 5xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization role comparedefault right role Id o k response a status code equal to that given
func (o *PostAuthorizationRoleComparedefaultRightRoleIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdOK  %+v", 200, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDOK) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdOK  %+v", 200, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDOK) GetPayload() *models.DomainOrgRoleDifference {
	return o.Payload
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DomainOrgRoleDifference)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationRoleComparedefaultRightRoleIDBadRequest creates a PostAuthorizationRoleComparedefaultRightRoleIDBadRequest with default headers values
func NewPostAuthorizationRoleComparedefaultRightRoleIDBadRequest() *PostAuthorizationRoleComparedefaultRightRoleIDBadRequest {
	return &PostAuthorizationRoleComparedefaultRightRoleIDBadRequest{}
}

/*
PostAuthorizationRoleComparedefaultRightRoleIDBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostAuthorizationRoleComparedefaultRightRoleIDBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization role comparedefault right role Id bad request response has a 2xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization role comparedefault right role Id bad request response has a 3xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization role comparedefault right role Id bad request response has a 4xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization role comparedefault right role Id bad request response has a 5xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization role comparedefault right role Id bad request response a status code equal to that given
func (o *PostAuthorizationRoleComparedefaultRightRoleIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdBadRequest  %+v", 400, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdBadRequest  %+v", 400, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationRoleComparedefaultRightRoleIDUnauthorized creates a PostAuthorizationRoleComparedefaultRightRoleIDUnauthorized with default headers values
func NewPostAuthorizationRoleComparedefaultRightRoleIDUnauthorized() *PostAuthorizationRoleComparedefaultRightRoleIDUnauthorized {
	return &PostAuthorizationRoleComparedefaultRightRoleIDUnauthorized{}
}

/*
PostAuthorizationRoleComparedefaultRightRoleIDUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostAuthorizationRoleComparedefaultRightRoleIDUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization role comparedefault right role Id unauthorized response has a 2xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization role comparedefault right role Id unauthorized response has a 3xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization role comparedefault right role Id unauthorized response has a 4xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization role comparedefault right role Id unauthorized response has a 5xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization role comparedefault right role Id unauthorized response a status code equal to that given
func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationRoleComparedefaultRightRoleIDForbidden creates a PostAuthorizationRoleComparedefaultRightRoleIDForbidden with default headers values
func NewPostAuthorizationRoleComparedefaultRightRoleIDForbidden() *PostAuthorizationRoleComparedefaultRightRoleIDForbidden {
	return &PostAuthorizationRoleComparedefaultRightRoleIDForbidden{}
}

/*
PostAuthorizationRoleComparedefaultRightRoleIDForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostAuthorizationRoleComparedefaultRightRoleIDForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization role comparedefault right role Id forbidden response has a 2xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization role comparedefault right role Id forbidden response has a 3xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization role comparedefault right role Id forbidden response has a 4xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization role comparedefault right role Id forbidden response has a 5xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization role comparedefault right role Id forbidden response a status code equal to that given
func (o *PostAuthorizationRoleComparedefaultRightRoleIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdForbidden  %+v", 403, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdForbidden  %+v", 403, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationRoleComparedefaultRightRoleIDNotFound creates a PostAuthorizationRoleComparedefaultRightRoleIDNotFound with default headers values
func NewPostAuthorizationRoleComparedefaultRightRoleIDNotFound() *PostAuthorizationRoleComparedefaultRightRoleIDNotFound {
	return &PostAuthorizationRoleComparedefaultRightRoleIDNotFound{}
}

/*
PostAuthorizationRoleComparedefaultRightRoleIDNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostAuthorizationRoleComparedefaultRightRoleIDNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization role comparedefault right role Id not found response has a 2xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization role comparedefault right role Id not found response has a 3xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization role comparedefault right role Id not found response has a 4xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization role comparedefault right role Id not found response has a 5xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization role comparedefault right role Id not found response a status code equal to that given
func (o *PostAuthorizationRoleComparedefaultRightRoleIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdNotFound  %+v", 404, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdNotFound  %+v", 404, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout creates a PostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout with default headers values
func NewPostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout() *PostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout {
	return &PostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout{}
}

/*
PostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization role comparedefault right role Id request timeout response has a 2xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization role comparedefault right role Id request timeout response has a 3xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization role comparedefault right role Id request timeout response has a 4xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization role comparedefault right role Id request timeout response has a 5xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization role comparedefault right role Id request timeout response a status code equal to that given
func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge creates a PostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge with default headers values
func NewPostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge() *PostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge {
	return &PostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge{}
}

/*
PostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization role comparedefault right role Id request entity too large response has a 2xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization role comparedefault right role Id request entity too large response has a 3xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization role comparedefault right role Id request entity too large response has a 4xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization role comparedefault right role Id request entity too large response has a 5xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization role comparedefault right role Id request entity too large response a status code equal to that given
func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType creates a PostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType with default headers values
func NewPostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType() *PostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType {
	return &PostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType{}
}

/*
PostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization role comparedefault right role Id unsupported media type response has a 2xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization role comparedefault right role Id unsupported media type response has a 3xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization role comparedefault right role Id unsupported media type response has a 4xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization role comparedefault right role Id unsupported media type response has a 5xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization role comparedefault right role Id unsupported media type response a status code equal to that given
func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests creates a PostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests with default headers values
func NewPostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests() *PostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests {
	return &PostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests{}
}

/*
PostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization role comparedefault right role Id too many requests response has a 2xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization role comparedefault right role Id too many requests response has a 3xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization role comparedefault right role Id too many requests response has a 4xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization role comparedefault right role Id too many requests response has a 5xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization role comparedefault right role Id too many requests response a status code equal to that given
func (o *PostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationRoleComparedefaultRightRoleIDInternalServerError creates a PostAuthorizationRoleComparedefaultRightRoleIDInternalServerError with default headers values
func NewPostAuthorizationRoleComparedefaultRightRoleIDInternalServerError() *PostAuthorizationRoleComparedefaultRightRoleIDInternalServerError {
	return &PostAuthorizationRoleComparedefaultRightRoleIDInternalServerError{}
}

/*
PostAuthorizationRoleComparedefaultRightRoleIDInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostAuthorizationRoleComparedefaultRightRoleIDInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization role comparedefault right role Id internal server error response has a 2xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization role comparedefault right role Id internal server error response has a 3xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization role comparedefault right role Id internal server error response has a 4xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authorization role comparedefault right role Id internal server error response has a 5xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post authorization role comparedefault right role Id internal server error response a status code equal to that given
func (o *PostAuthorizationRoleComparedefaultRightRoleIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable creates a PostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable with default headers values
func NewPostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable() *PostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable {
	return &PostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable{}
}

/*
PostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization role comparedefault right role Id service unavailable response has a 2xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization role comparedefault right role Id service unavailable response has a 3xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization role comparedefault right role Id service unavailable response has a 4xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authorization role comparedefault right role Id service unavailable response has a 5xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post authorization role comparedefault right role Id service unavailable response a status code equal to that given
func (o *PostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout creates a PostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout with default headers values
func NewPostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout() *PostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout {
	return &PostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout{}
}

/*
PostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization role comparedefault right role Id gateway timeout response has a 2xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization role comparedefault right role Id gateway timeout response has a 3xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization role comparedefault right role Id gateway timeout response has a 4xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authorization role comparedefault right role Id gateway timeout response has a 5xx status code
func (o *PostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post authorization role comparedefault right role Id gateway timeout response a status code equal to that given
func (o *PostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] postAuthorizationRoleComparedefaultRightRoleIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

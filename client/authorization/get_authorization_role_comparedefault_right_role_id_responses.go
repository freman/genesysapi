// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetAuthorizationRoleComparedefaultRightRoleIDReader is a Reader for the GetAuthorizationRoleComparedefaultRightRoleID structure.
type GetAuthorizationRoleComparedefaultRightRoleIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuthorizationRoleComparedefaultRightRoleIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuthorizationRoleComparedefaultRightRoleIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuthorizationRoleComparedefaultRightRoleIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAuthorizationRoleComparedefaultRightRoleIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAuthorizationRoleComparedefaultRightRoleIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuthorizationRoleComparedefaultRightRoleIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAuthorizationRoleComparedefaultRightRoleIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuthorizationRoleComparedefaultRightRoleIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAuthorizationRoleComparedefaultRightRoleIDOK creates a GetAuthorizationRoleComparedefaultRightRoleIDOK with default headers values
func NewGetAuthorizationRoleComparedefaultRightRoleIDOK() *GetAuthorizationRoleComparedefaultRightRoleIDOK {
	return &GetAuthorizationRoleComparedefaultRightRoleIDOK{}
}

/*GetAuthorizationRoleComparedefaultRightRoleIDOK handles this case with default header values.

successful operation
*/
type GetAuthorizationRoleComparedefaultRightRoleIDOK struct {
	Payload *models.DomainOrgRoleDifference
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] getAuthorizationRoleComparedefaultRightRoleIdOK  %+v", 200, o.Payload)
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDOK) GetPayload() *models.DomainOrgRoleDifference {
	return o.Payload
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DomainOrgRoleDifference)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleComparedefaultRightRoleIDBadRequest creates a GetAuthorizationRoleComparedefaultRightRoleIDBadRequest with default headers values
func NewGetAuthorizationRoleComparedefaultRightRoleIDBadRequest() *GetAuthorizationRoleComparedefaultRightRoleIDBadRequest {
	return &GetAuthorizationRoleComparedefaultRightRoleIDBadRequest{}
}

/*GetAuthorizationRoleComparedefaultRightRoleIDBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetAuthorizationRoleComparedefaultRightRoleIDBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] getAuthorizationRoleComparedefaultRightRoleIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleComparedefaultRightRoleIDUnauthorized creates a GetAuthorizationRoleComparedefaultRightRoleIDUnauthorized with default headers values
func NewGetAuthorizationRoleComparedefaultRightRoleIDUnauthorized() *GetAuthorizationRoleComparedefaultRightRoleIDUnauthorized {
	return &GetAuthorizationRoleComparedefaultRightRoleIDUnauthorized{}
}

/*GetAuthorizationRoleComparedefaultRightRoleIDUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetAuthorizationRoleComparedefaultRightRoleIDUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] getAuthorizationRoleComparedefaultRightRoleIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleComparedefaultRightRoleIDForbidden creates a GetAuthorizationRoleComparedefaultRightRoleIDForbidden with default headers values
func NewGetAuthorizationRoleComparedefaultRightRoleIDForbidden() *GetAuthorizationRoleComparedefaultRightRoleIDForbidden {
	return &GetAuthorizationRoleComparedefaultRightRoleIDForbidden{}
}

/*GetAuthorizationRoleComparedefaultRightRoleIDForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetAuthorizationRoleComparedefaultRightRoleIDForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] getAuthorizationRoleComparedefaultRightRoleIdForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleComparedefaultRightRoleIDNotFound creates a GetAuthorizationRoleComparedefaultRightRoleIDNotFound with default headers values
func NewGetAuthorizationRoleComparedefaultRightRoleIDNotFound() *GetAuthorizationRoleComparedefaultRightRoleIDNotFound {
	return &GetAuthorizationRoleComparedefaultRightRoleIDNotFound{}
}

/*GetAuthorizationRoleComparedefaultRightRoleIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetAuthorizationRoleComparedefaultRightRoleIDNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] getAuthorizationRoleComparedefaultRightRoleIdNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge creates a GetAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge with default headers values
func NewGetAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge() *GetAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge {
	return &GetAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge{}
}

/*GetAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] getAuthorizationRoleComparedefaultRightRoleIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType creates a GetAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType with default headers values
func NewGetAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType() *GetAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType {
	return &GetAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType{}
}

/*GetAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] getAuthorizationRoleComparedefaultRightRoleIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleComparedefaultRightRoleIDTooManyRequests creates a GetAuthorizationRoleComparedefaultRightRoleIDTooManyRequests with default headers values
func NewGetAuthorizationRoleComparedefaultRightRoleIDTooManyRequests() *GetAuthorizationRoleComparedefaultRightRoleIDTooManyRequests {
	return &GetAuthorizationRoleComparedefaultRightRoleIDTooManyRequests{}
}

/*GetAuthorizationRoleComparedefaultRightRoleIDTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type GetAuthorizationRoleComparedefaultRightRoleIDTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] getAuthorizationRoleComparedefaultRightRoleIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleComparedefaultRightRoleIDInternalServerError creates a GetAuthorizationRoleComparedefaultRightRoleIDInternalServerError with default headers values
func NewGetAuthorizationRoleComparedefaultRightRoleIDInternalServerError() *GetAuthorizationRoleComparedefaultRightRoleIDInternalServerError {
	return &GetAuthorizationRoleComparedefaultRightRoleIDInternalServerError{}
}

/*GetAuthorizationRoleComparedefaultRightRoleIDInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetAuthorizationRoleComparedefaultRightRoleIDInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] getAuthorizationRoleComparedefaultRightRoleIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable creates a GetAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable with default headers values
func NewGetAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable() *GetAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable {
	return &GetAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable{}
}

/*GetAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] getAuthorizationRoleComparedefaultRightRoleIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout creates a GetAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout with default headers values
func NewGetAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout() *GetAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout {
	return &GetAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout{}
}

/*GetAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}][%d] getAuthorizationRoleComparedefaultRightRoleIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleComparedefaultRightRoleIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

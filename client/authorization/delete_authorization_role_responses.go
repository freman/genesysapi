// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteAuthorizationRoleReader is a Reader for the DeleteAuthorizationRole structure.
type DeleteAuthorizationRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAuthorizationRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewDeleteAuthorizationRoleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteAuthorizationRoleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteAuthorizationRoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteAuthorizationRoleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteAuthorizationRoleRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteAuthorizationRoleRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteAuthorizationRoleUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteAuthorizationRoleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteAuthorizationRoleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteAuthorizationRoleServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteAuthorizationRoleGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteAuthorizationRoleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteAuthorizationRoleBadRequest creates a DeleteAuthorizationRoleBadRequest with default headers values
func NewDeleteAuthorizationRoleBadRequest() *DeleteAuthorizationRoleBadRequest {
	return &DeleteAuthorizationRoleBadRequest{}
}

/*
DeleteAuthorizationRoleBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteAuthorizationRoleBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete authorization role bad request response has a 2xx status code
func (o *DeleteAuthorizationRoleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authorization role bad request response has a 3xx status code
func (o *DeleteAuthorizationRoleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authorization role bad request response has a 4xx status code
func (o *DeleteAuthorizationRoleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete authorization role bad request response has a 5xx status code
func (o *DeleteAuthorizationRoleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete authorization role bad request response a status code equal to that given
func (o *DeleteAuthorizationRoleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteAuthorizationRoleBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteAuthorizationRoleBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteAuthorizationRoleBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteAuthorizationRoleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorizationRoleUnauthorized creates a DeleteAuthorizationRoleUnauthorized with default headers values
func NewDeleteAuthorizationRoleUnauthorized() *DeleteAuthorizationRoleUnauthorized {
	return &DeleteAuthorizationRoleUnauthorized{}
}

/*
DeleteAuthorizationRoleUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteAuthorizationRoleUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete authorization role unauthorized response has a 2xx status code
func (o *DeleteAuthorizationRoleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authorization role unauthorized response has a 3xx status code
func (o *DeleteAuthorizationRoleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authorization role unauthorized response has a 4xx status code
func (o *DeleteAuthorizationRoleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete authorization role unauthorized response has a 5xx status code
func (o *DeleteAuthorizationRoleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete authorization role unauthorized response a status code equal to that given
func (o *DeleteAuthorizationRoleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteAuthorizationRoleUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteAuthorizationRoleUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteAuthorizationRoleUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteAuthorizationRoleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorizationRoleForbidden creates a DeleteAuthorizationRoleForbidden with default headers values
func NewDeleteAuthorizationRoleForbidden() *DeleteAuthorizationRoleForbidden {
	return &DeleteAuthorizationRoleForbidden{}
}

/*
DeleteAuthorizationRoleForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type DeleteAuthorizationRoleForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete authorization role forbidden response has a 2xx status code
func (o *DeleteAuthorizationRoleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authorization role forbidden response has a 3xx status code
func (o *DeleteAuthorizationRoleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authorization role forbidden response has a 4xx status code
func (o *DeleteAuthorizationRoleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete authorization role forbidden response has a 5xx status code
func (o *DeleteAuthorizationRoleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete authorization role forbidden response a status code equal to that given
func (o *DeleteAuthorizationRoleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteAuthorizationRoleForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleForbidden  %+v", 403, o.Payload)
}

func (o *DeleteAuthorizationRoleForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleForbidden  %+v", 403, o.Payload)
}

func (o *DeleteAuthorizationRoleForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteAuthorizationRoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorizationRoleNotFound creates a DeleteAuthorizationRoleNotFound with default headers values
func NewDeleteAuthorizationRoleNotFound() *DeleteAuthorizationRoleNotFound {
	return &DeleteAuthorizationRoleNotFound{}
}

/*
DeleteAuthorizationRoleNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type DeleteAuthorizationRoleNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete authorization role not found response has a 2xx status code
func (o *DeleteAuthorizationRoleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authorization role not found response has a 3xx status code
func (o *DeleteAuthorizationRoleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authorization role not found response has a 4xx status code
func (o *DeleteAuthorizationRoleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete authorization role not found response has a 5xx status code
func (o *DeleteAuthorizationRoleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete authorization role not found response a status code equal to that given
func (o *DeleteAuthorizationRoleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteAuthorizationRoleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteAuthorizationRoleNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteAuthorizationRoleNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteAuthorizationRoleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorizationRoleRequestTimeout creates a DeleteAuthorizationRoleRequestTimeout with default headers values
func NewDeleteAuthorizationRoleRequestTimeout() *DeleteAuthorizationRoleRequestTimeout {
	return &DeleteAuthorizationRoleRequestTimeout{}
}

/*
DeleteAuthorizationRoleRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteAuthorizationRoleRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete authorization role request timeout response has a 2xx status code
func (o *DeleteAuthorizationRoleRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authorization role request timeout response has a 3xx status code
func (o *DeleteAuthorizationRoleRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authorization role request timeout response has a 4xx status code
func (o *DeleteAuthorizationRoleRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete authorization role request timeout response has a 5xx status code
func (o *DeleteAuthorizationRoleRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this delete authorization role request timeout response a status code equal to that given
func (o *DeleteAuthorizationRoleRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *DeleteAuthorizationRoleRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteAuthorizationRoleRequestTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteAuthorizationRoleRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteAuthorizationRoleRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorizationRoleRequestEntityTooLarge creates a DeleteAuthorizationRoleRequestEntityTooLarge with default headers values
func NewDeleteAuthorizationRoleRequestEntityTooLarge() *DeleteAuthorizationRoleRequestEntityTooLarge {
	return &DeleteAuthorizationRoleRequestEntityTooLarge{}
}

/*
DeleteAuthorizationRoleRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type DeleteAuthorizationRoleRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete authorization role request entity too large response has a 2xx status code
func (o *DeleteAuthorizationRoleRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authorization role request entity too large response has a 3xx status code
func (o *DeleteAuthorizationRoleRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authorization role request entity too large response has a 4xx status code
func (o *DeleteAuthorizationRoleRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete authorization role request entity too large response has a 5xx status code
func (o *DeleteAuthorizationRoleRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this delete authorization role request entity too large response a status code equal to that given
func (o *DeleteAuthorizationRoleRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *DeleteAuthorizationRoleRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteAuthorizationRoleRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteAuthorizationRoleRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteAuthorizationRoleRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorizationRoleUnsupportedMediaType creates a DeleteAuthorizationRoleUnsupportedMediaType with default headers values
func NewDeleteAuthorizationRoleUnsupportedMediaType() *DeleteAuthorizationRoleUnsupportedMediaType {
	return &DeleteAuthorizationRoleUnsupportedMediaType{}
}

/*
DeleteAuthorizationRoleUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteAuthorizationRoleUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete authorization role unsupported media type response has a 2xx status code
func (o *DeleteAuthorizationRoleUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authorization role unsupported media type response has a 3xx status code
func (o *DeleteAuthorizationRoleUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authorization role unsupported media type response has a 4xx status code
func (o *DeleteAuthorizationRoleUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete authorization role unsupported media type response has a 5xx status code
func (o *DeleteAuthorizationRoleUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this delete authorization role unsupported media type response a status code equal to that given
func (o *DeleteAuthorizationRoleUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *DeleteAuthorizationRoleUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteAuthorizationRoleUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteAuthorizationRoleUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteAuthorizationRoleUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorizationRoleTooManyRequests creates a DeleteAuthorizationRoleTooManyRequests with default headers values
func NewDeleteAuthorizationRoleTooManyRequests() *DeleteAuthorizationRoleTooManyRequests {
	return &DeleteAuthorizationRoleTooManyRequests{}
}

/*
DeleteAuthorizationRoleTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteAuthorizationRoleTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete authorization role too many requests response has a 2xx status code
func (o *DeleteAuthorizationRoleTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authorization role too many requests response has a 3xx status code
func (o *DeleteAuthorizationRoleTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authorization role too many requests response has a 4xx status code
func (o *DeleteAuthorizationRoleTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete authorization role too many requests response has a 5xx status code
func (o *DeleteAuthorizationRoleTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete authorization role too many requests response a status code equal to that given
func (o *DeleteAuthorizationRoleTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeleteAuthorizationRoleTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteAuthorizationRoleTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteAuthorizationRoleTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteAuthorizationRoleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorizationRoleInternalServerError creates a DeleteAuthorizationRoleInternalServerError with default headers values
func NewDeleteAuthorizationRoleInternalServerError() *DeleteAuthorizationRoleInternalServerError {
	return &DeleteAuthorizationRoleInternalServerError{}
}

/*
DeleteAuthorizationRoleInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteAuthorizationRoleInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete authorization role internal server error response has a 2xx status code
func (o *DeleteAuthorizationRoleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authorization role internal server error response has a 3xx status code
func (o *DeleteAuthorizationRoleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authorization role internal server error response has a 4xx status code
func (o *DeleteAuthorizationRoleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete authorization role internal server error response has a 5xx status code
func (o *DeleteAuthorizationRoleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete authorization role internal server error response a status code equal to that given
func (o *DeleteAuthorizationRoleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteAuthorizationRoleInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteAuthorizationRoleInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteAuthorizationRoleInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteAuthorizationRoleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorizationRoleServiceUnavailable creates a DeleteAuthorizationRoleServiceUnavailable with default headers values
func NewDeleteAuthorizationRoleServiceUnavailable() *DeleteAuthorizationRoleServiceUnavailable {
	return &DeleteAuthorizationRoleServiceUnavailable{}
}

/*
DeleteAuthorizationRoleServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteAuthorizationRoleServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete authorization role service unavailable response has a 2xx status code
func (o *DeleteAuthorizationRoleServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authorization role service unavailable response has a 3xx status code
func (o *DeleteAuthorizationRoleServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authorization role service unavailable response has a 4xx status code
func (o *DeleteAuthorizationRoleServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete authorization role service unavailable response has a 5xx status code
func (o *DeleteAuthorizationRoleServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete authorization role service unavailable response a status code equal to that given
func (o *DeleteAuthorizationRoleServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeleteAuthorizationRoleServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteAuthorizationRoleServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteAuthorizationRoleServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteAuthorizationRoleServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorizationRoleGatewayTimeout creates a DeleteAuthorizationRoleGatewayTimeout with default headers values
func NewDeleteAuthorizationRoleGatewayTimeout() *DeleteAuthorizationRoleGatewayTimeout {
	return &DeleteAuthorizationRoleGatewayTimeout{}
}

/*
DeleteAuthorizationRoleGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type DeleteAuthorizationRoleGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete authorization role gateway timeout response has a 2xx status code
func (o *DeleteAuthorizationRoleGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authorization role gateway timeout response has a 3xx status code
func (o *DeleteAuthorizationRoleGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authorization role gateway timeout response has a 4xx status code
func (o *DeleteAuthorizationRoleGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete authorization role gateway timeout response has a 5xx status code
func (o *DeleteAuthorizationRoleGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this delete authorization role gateway timeout response a status code equal to that given
func (o *DeleteAuthorizationRoleGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *DeleteAuthorizationRoleGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteAuthorizationRoleGatewayTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRoleGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteAuthorizationRoleGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteAuthorizationRoleGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorizationRoleDefault creates a DeleteAuthorizationRoleDefault with default headers values
func NewDeleteAuthorizationRoleDefault(code int) *DeleteAuthorizationRoleDefault {
	return &DeleteAuthorizationRoleDefault{
		_statusCode: code,
	}
}

/*
DeleteAuthorizationRoleDefault describes a response with status code -1, with default header values.

successful operation
*/
type DeleteAuthorizationRoleDefault struct {
	_statusCode int
}

// Code gets the status code for the delete authorization role default response
func (o *DeleteAuthorizationRoleDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this delete authorization role default response has a 2xx status code
func (o *DeleteAuthorizationRoleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete authorization role default response has a 3xx status code
func (o *DeleteAuthorizationRoleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete authorization role default response has a 4xx status code
func (o *DeleteAuthorizationRoleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete authorization role default response has a 5xx status code
func (o *DeleteAuthorizationRoleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete authorization role default response a status code equal to that given
func (o *DeleteAuthorizationRoleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *DeleteAuthorizationRoleDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRole default ", o._statusCode)
}

func (o *DeleteAuthorizationRoleDefault) String() string {
	return fmt.Sprintf("[DELETE /api/v2/authorization/roles/{roleId}][%d] deleteAuthorizationRole default ", o._statusCode)
}

func (o *DeleteAuthorizationRoleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

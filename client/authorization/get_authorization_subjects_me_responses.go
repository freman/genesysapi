// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetAuthorizationSubjectsMeReader is a Reader for the GetAuthorizationSubjectsMe structure.
type GetAuthorizationSubjectsMeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuthorizationSubjectsMeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuthorizationSubjectsMeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuthorizationSubjectsMeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAuthorizationSubjectsMeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAuthorizationSubjectsMeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuthorizationSubjectsMeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetAuthorizationSubjectsMeRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAuthorizationSubjectsMeRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAuthorizationSubjectsMeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAuthorizationSubjectsMeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuthorizationSubjectsMeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAuthorizationSubjectsMeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetAuthorizationSubjectsMeGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAuthorizationSubjectsMeOK creates a GetAuthorizationSubjectsMeOK with default headers values
func NewGetAuthorizationSubjectsMeOK() *GetAuthorizationSubjectsMeOK {
	return &GetAuthorizationSubjectsMeOK{}
}

/*
GetAuthorizationSubjectsMeOK describes a response with status code 200, with default header values.

successful operation
*/
type GetAuthorizationSubjectsMeOK struct {
	Payload *models.AuthzSubject
}

// IsSuccess returns true when this get authorization subjects me o k response has a 2xx status code
func (o *GetAuthorizationSubjectsMeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get authorization subjects me o k response has a 3xx status code
func (o *GetAuthorizationSubjectsMeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects me o k response has a 4xx status code
func (o *GetAuthorizationSubjectsMeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization subjects me o k response has a 5xx status code
func (o *GetAuthorizationSubjectsMeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects me o k response a status code equal to that given
func (o *GetAuthorizationSubjectsMeOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAuthorizationSubjectsMeOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeOK  %+v", 200, o.Payload)
}

func (o *GetAuthorizationSubjectsMeOK) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeOK  %+v", 200, o.Payload)
}

func (o *GetAuthorizationSubjectsMeOK) GetPayload() *models.AuthzSubject {
	return o.Payload
}

func (o *GetAuthorizationSubjectsMeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthzSubject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsMeBadRequest creates a GetAuthorizationSubjectsMeBadRequest with default headers values
func NewGetAuthorizationSubjectsMeBadRequest() *GetAuthorizationSubjectsMeBadRequest {
	return &GetAuthorizationSubjectsMeBadRequest{}
}

/*
GetAuthorizationSubjectsMeBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetAuthorizationSubjectsMeBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects me bad request response has a 2xx status code
func (o *GetAuthorizationSubjectsMeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects me bad request response has a 3xx status code
func (o *GetAuthorizationSubjectsMeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects me bad request response has a 4xx status code
func (o *GetAuthorizationSubjectsMeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects me bad request response has a 5xx status code
func (o *GetAuthorizationSubjectsMeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects me bad request response a status code equal to that given
func (o *GetAuthorizationSubjectsMeBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAuthorizationSubjectsMeBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorizationSubjectsMeBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorizationSubjectsMeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsMeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsMeUnauthorized creates a GetAuthorizationSubjectsMeUnauthorized with default headers values
func NewGetAuthorizationSubjectsMeUnauthorized() *GetAuthorizationSubjectsMeUnauthorized {
	return &GetAuthorizationSubjectsMeUnauthorized{}
}

/*
GetAuthorizationSubjectsMeUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetAuthorizationSubjectsMeUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects me unauthorized response has a 2xx status code
func (o *GetAuthorizationSubjectsMeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects me unauthorized response has a 3xx status code
func (o *GetAuthorizationSubjectsMeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects me unauthorized response has a 4xx status code
func (o *GetAuthorizationSubjectsMeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects me unauthorized response has a 5xx status code
func (o *GetAuthorizationSubjectsMeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects me unauthorized response a status code equal to that given
func (o *GetAuthorizationSubjectsMeUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAuthorizationSubjectsMeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorizationSubjectsMeUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorizationSubjectsMeUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsMeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsMeForbidden creates a GetAuthorizationSubjectsMeForbidden with default headers values
func NewGetAuthorizationSubjectsMeForbidden() *GetAuthorizationSubjectsMeForbidden {
	return &GetAuthorizationSubjectsMeForbidden{}
}

/*
GetAuthorizationSubjectsMeForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetAuthorizationSubjectsMeForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects me forbidden response has a 2xx status code
func (o *GetAuthorizationSubjectsMeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects me forbidden response has a 3xx status code
func (o *GetAuthorizationSubjectsMeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects me forbidden response has a 4xx status code
func (o *GetAuthorizationSubjectsMeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects me forbidden response has a 5xx status code
func (o *GetAuthorizationSubjectsMeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects me forbidden response a status code equal to that given
func (o *GetAuthorizationSubjectsMeForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAuthorizationSubjectsMeForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthorizationSubjectsMeForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthorizationSubjectsMeForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsMeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsMeNotFound creates a GetAuthorizationSubjectsMeNotFound with default headers values
func NewGetAuthorizationSubjectsMeNotFound() *GetAuthorizationSubjectsMeNotFound {
	return &GetAuthorizationSubjectsMeNotFound{}
}

/*
GetAuthorizationSubjectsMeNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetAuthorizationSubjectsMeNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects me not found response has a 2xx status code
func (o *GetAuthorizationSubjectsMeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects me not found response has a 3xx status code
func (o *GetAuthorizationSubjectsMeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects me not found response has a 4xx status code
func (o *GetAuthorizationSubjectsMeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects me not found response has a 5xx status code
func (o *GetAuthorizationSubjectsMeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects me not found response a status code equal to that given
func (o *GetAuthorizationSubjectsMeNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAuthorizationSubjectsMeNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorizationSubjectsMeNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorizationSubjectsMeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsMeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsMeRequestTimeout creates a GetAuthorizationSubjectsMeRequestTimeout with default headers values
func NewGetAuthorizationSubjectsMeRequestTimeout() *GetAuthorizationSubjectsMeRequestTimeout {
	return &GetAuthorizationSubjectsMeRequestTimeout{}
}

/*
GetAuthorizationSubjectsMeRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetAuthorizationSubjectsMeRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects me request timeout response has a 2xx status code
func (o *GetAuthorizationSubjectsMeRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects me request timeout response has a 3xx status code
func (o *GetAuthorizationSubjectsMeRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects me request timeout response has a 4xx status code
func (o *GetAuthorizationSubjectsMeRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects me request timeout response has a 5xx status code
func (o *GetAuthorizationSubjectsMeRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects me request timeout response a status code equal to that given
func (o *GetAuthorizationSubjectsMeRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetAuthorizationSubjectsMeRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAuthorizationSubjectsMeRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAuthorizationSubjectsMeRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsMeRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsMeRequestEntityTooLarge creates a GetAuthorizationSubjectsMeRequestEntityTooLarge with default headers values
func NewGetAuthorizationSubjectsMeRequestEntityTooLarge() *GetAuthorizationSubjectsMeRequestEntityTooLarge {
	return &GetAuthorizationSubjectsMeRequestEntityTooLarge{}
}

/*
GetAuthorizationSubjectsMeRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetAuthorizationSubjectsMeRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects me request entity too large response has a 2xx status code
func (o *GetAuthorizationSubjectsMeRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects me request entity too large response has a 3xx status code
func (o *GetAuthorizationSubjectsMeRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects me request entity too large response has a 4xx status code
func (o *GetAuthorizationSubjectsMeRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects me request entity too large response has a 5xx status code
func (o *GetAuthorizationSubjectsMeRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects me request entity too large response a status code equal to that given
func (o *GetAuthorizationSubjectsMeRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetAuthorizationSubjectsMeRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAuthorizationSubjectsMeRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAuthorizationSubjectsMeRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsMeRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsMeUnsupportedMediaType creates a GetAuthorizationSubjectsMeUnsupportedMediaType with default headers values
func NewGetAuthorizationSubjectsMeUnsupportedMediaType() *GetAuthorizationSubjectsMeUnsupportedMediaType {
	return &GetAuthorizationSubjectsMeUnsupportedMediaType{}
}

/*
GetAuthorizationSubjectsMeUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetAuthorizationSubjectsMeUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects me unsupported media type response has a 2xx status code
func (o *GetAuthorizationSubjectsMeUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects me unsupported media type response has a 3xx status code
func (o *GetAuthorizationSubjectsMeUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects me unsupported media type response has a 4xx status code
func (o *GetAuthorizationSubjectsMeUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects me unsupported media type response has a 5xx status code
func (o *GetAuthorizationSubjectsMeUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects me unsupported media type response a status code equal to that given
func (o *GetAuthorizationSubjectsMeUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetAuthorizationSubjectsMeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAuthorizationSubjectsMeUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAuthorizationSubjectsMeUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsMeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsMeTooManyRequests creates a GetAuthorizationSubjectsMeTooManyRequests with default headers values
func NewGetAuthorizationSubjectsMeTooManyRequests() *GetAuthorizationSubjectsMeTooManyRequests {
	return &GetAuthorizationSubjectsMeTooManyRequests{}
}

/*
GetAuthorizationSubjectsMeTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetAuthorizationSubjectsMeTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects me too many requests response has a 2xx status code
func (o *GetAuthorizationSubjectsMeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects me too many requests response has a 3xx status code
func (o *GetAuthorizationSubjectsMeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects me too many requests response has a 4xx status code
func (o *GetAuthorizationSubjectsMeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization subjects me too many requests response has a 5xx status code
func (o *GetAuthorizationSubjectsMeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization subjects me too many requests response a status code equal to that given
func (o *GetAuthorizationSubjectsMeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAuthorizationSubjectsMeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAuthorizationSubjectsMeTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAuthorizationSubjectsMeTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsMeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsMeInternalServerError creates a GetAuthorizationSubjectsMeInternalServerError with default headers values
func NewGetAuthorizationSubjectsMeInternalServerError() *GetAuthorizationSubjectsMeInternalServerError {
	return &GetAuthorizationSubjectsMeInternalServerError{}
}

/*
GetAuthorizationSubjectsMeInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetAuthorizationSubjectsMeInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects me internal server error response has a 2xx status code
func (o *GetAuthorizationSubjectsMeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects me internal server error response has a 3xx status code
func (o *GetAuthorizationSubjectsMeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects me internal server error response has a 4xx status code
func (o *GetAuthorizationSubjectsMeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization subjects me internal server error response has a 5xx status code
func (o *GetAuthorizationSubjectsMeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get authorization subjects me internal server error response a status code equal to that given
func (o *GetAuthorizationSubjectsMeInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAuthorizationSubjectsMeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorizationSubjectsMeInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorizationSubjectsMeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsMeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsMeServiceUnavailable creates a GetAuthorizationSubjectsMeServiceUnavailable with default headers values
func NewGetAuthorizationSubjectsMeServiceUnavailable() *GetAuthorizationSubjectsMeServiceUnavailable {
	return &GetAuthorizationSubjectsMeServiceUnavailable{}
}

/*
GetAuthorizationSubjectsMeServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetAuthorizationSubjectsMeServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects me service unavailable response has a 2xx status code
func (o *GetAuthorizationSubjectsMeServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects me service unavailable response has a 3xx status code
func (o *GetAuthorizationSubjectsMeServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects me service unavailable response has a 4xx status code
func (o *GetAuthorizationSubjectsMeServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization subjects me service unavailable response has a 5xx status code
func (o *GetAuthorizationSubjectsMeServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get authorization subjects me service unavailable response a status code equal to that given
func (o *GetAuthorizationSubjectsMeServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAuthorizationSubjectsMeServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuthorizationSubjectsMeServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuthorizationSubjectsMeServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsMeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationSubjectsMeGatewayTimeout creates a GetAuthorizationSubjectsMeGatewayTimeout with default headers values
func NewGetAuthorizationSubjectsMeGatewayTimeout() *GetAuthorizationSubjectsMeGatewayTimeout {
	return &GetAuthorizationSubjectsMeGatewayTimeout{}
}

/*
GetAuthorizationSubjectsMeGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetAuthorizationSubjectsMeGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization subjects me gateway timeout response has a 2xx status code
func (o *GetAuthorizationSubjectsMeGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization subjects me gateway timeout response has a 3xx status code
func (o *GetAuthorizationSubjectsMeGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization subjects me gateway timeout response has a 4xx status code
func (o *GetAuthorizationSubjectsMeGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization subjects me gateway timeout response has a 5xx status code
func (o *GetAuthorizationSubjectsMeGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get authorization subjects me gateway timeout response a status code equal to that given
func (o *GetAuthorizationSubjectsMeGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetAuthorizationSubjectsMeGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAuthorizationSubjectsMeGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/subjects/me][%d] getAuthorizationSubjectsMeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAuthorizationSubjectsMeGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationSubjectsMeGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostAuthorizationDivisionsReader is a Reader for the PostAuthorizationDivisions structure.
type PostAuthorizationDivisionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAuthorizationDivisionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostAuthorizationDivisionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostAuthorizationDivisionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostAuthorizationDivisionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostAuthorizationDivisionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostAuthorizationDivisionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostAuthorizationDivisionsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostAuthorizationDivisionsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostAuthorizationDivisionsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostAuthorizationDivisionsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostAuthorizationDivisionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostAuthorizationDivisionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostAuthorizationDivisionsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostAuthorizationDivisionsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostAuthorizationDivisionsOK creates a PostAuthorizationDivisionsOK with default headers values
func NewPostAuthorizationDivisionsOK() *PostAuthorizationDivisionsOK {
	return &PostAuthorizationDivisionsOK{}
}

/*
PostAuthorizationDivisionsOK describes a response with status code 200, with default header values.

successful operation
*/
type PostAuthorizationDivisionsOK struct {
	Payload *models.AuthzDivision
}

// IsSuccess returns true when this post authorization divisions o k response has a 2xx status code
func (o *PostAuthorizationDivisionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post authorization divisions o k response has a 3xx status code
func (o *PostAuthorizationDivisionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization divisions o k response has a 4xx status code
func (o *PostAuthorizationDivisionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authorization divisions o k response has a 5xx status code
func (o *PostAuthorizationDivisionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization divisions o k response a status code equal to that given
func (o *PostAuthorizationDivisionsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostAuthorizationDivisionsOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsOK  %+v", 200, o.Payload)
}

func (o *PostAuthorizationDivisionsOK) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsOK  %+v", 200, o.Payload)
}

func (o *PostAuthorizationDivisionsOK) GetPayload() *models.AuthzDivision {
	return o.Payload
}

func (o *PostAuthorizationDivisionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthzDivision)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionsBadRequest creates a PostAuthorizationDivisionsBadRequest with default headers values
func NewPostAuthorizationDivisionsBadRequest() *PostAuthorizationDivisionsBadRequest {
	return &PostAuthorizationDivisionsBadRequest{}
}

/*
PostAuthorizationDivisionsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostAuthorizationDivisionsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization divisions bad request response has a 2xx status code
func (o *PostAuthorizationDivisionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization divisions bad request response has a 3xx status code
func (o *PostAuthorizationDivisionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization divisions bad request response has a 4xx status code
func (o *PostAuthorizationDivisionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization divisions bad request response has a 5xx status code
func (o *PostAuthorizationDivisionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization divisions bad request response a status code equal to that given
func (o *PostAuthorizationDivisionsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostAuthorizationDivisionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsBadRequest  %+v", 400, o.Payload)
}

func (o *PostAuthorizationDivisionsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsBadRequest  %+v", 400, o.Payload)
}

func (o *PostAuthorizationDivisionsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionsUnauthorized creates a PostAuthorizationDivisionsUnauthorized with default headers values
func NewPostAuthorizationDivisionsUnauthorized() *PostAuthorizationDivisionsUnauthorized {
	return &PostAuthorizationDivisionsUnauthorized{}
}

/*
PostAuthorizationDivisionsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostAuthorizationDivisionsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization divisions unauthorized response has a 2xx status code
func (o *PostAuthorizationDivisionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization divisions unauthorized response has a 3xx status code
func (o *PostAuthorizationDivisionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization divisions unauthorized response has a 4xx status code
func (o *PostAuthorizationDivisionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization divisions unauthorized response has a 5xx status code
func (o *PostAuthorizationDivisionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization divisions unauthorized response a status code equal to that given
func (o *PostAuthorizationDivisionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostAuthorizationDivisionsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostAuthorizationDivisionsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostAuthorizationDivisionsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionsForbidden creates a PostAuthorizationDivisionsForbidden with default headers values
func NewPostAuthorizationDivisionsForbidden() *PostAuthorizationDivisionsForbidden {
	return &PostAuthorizationDivisionsForbidden{}
}

/*
PostAuthorizationDivisionsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostAuthorizationDivisionsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization divisions forbidden response has a 2xx status code
func (o *PostAuthorizationDivisionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization divisions forbidden response has a 3xx status code
func (o *PostAuthorizationDivisionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization divisions forbidden response has a 4xx status code
func (o *PostAuthorizationDivisionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization divisions forbidden response has a 5xx status code
func (o *PostAuthorizationDivisionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization divisions forbidden response a status code equal to that given
func (o *PostAuthorizationDivisionsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostAuthorizationDivisionsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsForbidden  %+v", 403, o.Payload)
}

func (o *PostAuthorizationDivisionsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsForbidden  %+v", 403, o.Payload)
}

func (o *PostAuthorizationDivisionsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionsNotFound creates a PostAuthorizationDivisionsNotFound with default headers values
func NewPostAuthorizationDivisionsNotFound() *PostAuthorizationDivisionsNotFound {
	return &PostAuthorizationDivisionsNotFound{}
}

/*
PostAuthorizationDivisionsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostAuthorizationDivisionsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization divisions not found response has a 2xx status code
func (o *PostAuthorizationDivisionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization divisions not found response has a 3xx status code
func (o *PostAuthorizationDivisionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization divisions not found response has a 4xx status code
func (o *PostAuthorizationDivisionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization divisions not found response has a 5xx status code
func (o *PostAuthorizationDivisionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization divisions not found response a status code equal to that given
func (o *PostAuthorizationDivisionsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostAuthorizationDivisionsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsNotFound  %+v", 404, o.Payload)
}

func (o *PostAuthorizationDivisionsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsNotFound  %+v", 404, o.Payload)
}

func (o *PostAuthorizationDivisionsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionsRequestTimeout creates a PostAuthorizationDivisionsRequestTimeout with default headers values
func NewPostAuthorizationDivisionsRequestTimeout() *PostAuthorizationDivisionsRequestTimeout {
	return &PostAuthorizationDivisionsRequestTimeout{}
}

/*
PostAuthorizationDivisionsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostAuthorizationDivisionsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization divisions request timeout response has a 2xx status code
func (o *PostAuthorizationDivisionsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization divisions request timeout response has a 3xx status code
func (o *PostAuthorizationDivisionsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization divisions request timeout response has a 4xx status code
func (o *PostAuthorizationDivisionsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization divisions request timeout response has a 5xx status code
func (o *PostAuthorizationDivisionsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization divisions request timeout response a status code equal to that given
func (o *PostAuthorizationDivisionsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostAuthorizationDivisionsRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostAuthorizationDivisionsRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostAuthorizationDivisionsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionsConflict creates a PostAuthorizationDivisionsConflict with default headers values
func NewPostAuthorizationDivisionsConflict() *PostAuthorizationDivisionsConflict {
	return &PostAuthorizationDivisionsConflict{}
}

/*
PostAuthorizationDivisionsConflict describes a response with status code 409, with default header values.

Conflict
*/
type PostAuthorizationDivisionsConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization divisions conflict response has a 2xx status code
func (o *PostAuthorizationDivisionsConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization divisions conflict response has a 3xx status code
func (o *PostAuthorizationDivisionsConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization divisions conflict response has a 4xx status code
func (o *PostAuthorizationDivisionsConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization divisions conflict response has a 5xx status code
func (o *PostAuthorizationDivisionsConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization divisions conflict response a status code equal to that given
func (o *PostAuthorizationDivisionsConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PostAuthorizationDivisionsConflict) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsConflict  %+v", 409, o.Payload)
}

func (o *PostAuthorizationDivisionsConflict) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsConflict  %+v", 409, o.Payload)
}

func (o *PostAuthorizationDivisionsConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionsRequestEntityTooLarge creates a PostAuthorizationDivisionsRequestEntityTooLarge with default headers values
func NewPostAuthorizationDivisionsRequestEntityTooLarge() *PostAuthorizationDivisionsRequestEntityTooLarge {
	return &PostAuthorizationDivisionsRequestEntityTooLarge{}
}

/*
PostAuthorizationDivisionsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostAuthorizationDivisionsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization divisions request entity too large response has a 2xx status code
func (o *PostAuthorizationDivisionsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization divisions request entity too large response has a 3xx status code
func (o *PostAuthorizationDivisionsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization divisions request entity too large response has a 4xx status code
func (o *PostAuthorizationDivisionsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization divisions request entity too large response has a 5xx status code
func (o *PostAuthorizationDivisionsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization divisions request entity too large response a status code equal to that given
func (o *PostAuthorizationDivisionsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostAuthorizationDivisionsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostAuthorizationDivisionsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostAuthorizationDivisionsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionsUnsupportedMediaType creates a PostAuthorizationDivisionsUnsupportedMediaType with default headers values
func NewPostAuthorizationDivisionsUnsupportedMediaType() *PostAuthorizationDivisionsUnsupportedMediaType {
	return &PostAuthorizationDivisionsUnsupportedMediaType{}
}

/*
PostAuthorizationDivisionsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostAuthorizationDivisionsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization divisions unsupported media type response has a 2xx status code
func (o *PostAuthorizationDivisionsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization divisions unsupported media type response has a 3xx status code
func (o *PostAuthorizationDivisionsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization divisions unsupported media type response has a 4xx status code
func (o *PostAuthorizationDivisionsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization divisions unsupported media type response has a 5xx status code
func (o *PostAuthorizationDivisionsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization divisions unsupported media type response a status code equal to that given
func (o *PostAuthorizationDivisionsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostAuthorizationDivisionsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostAuthorizationDivisionsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostAuthorizationDivisionsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionsTooManyRequests creates a PostAuthorizationDivisionsTooManyRequests with default headers values
func NewPostAuthorizationDivisionsTooManyRequests() *PostAuthorizationDivisionsTooManyRequests {
	return &PostAuthorizationDivisionsTooManyRequests{}
}

/*
PostAuthorizationDivisionsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostAuthorizationDivisionsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization divisions too many requests response has a 2xx status code
func (o *PostAuthorizationDivisionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization divisions too many requests response has a 3xx status code
func (o *PostAuthorizationDivisionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization divisions too many requests response has a 4xx status code
func (o *PostAuthorizationDivisionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authorization divisions too many requests response has a 5xx status code
func (o *PostAuthorizationDivisionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post authorization divisions too many requests response a status code equal to that given
func (o *PostAuthorizationDivisionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostAuthorizationDivisionsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostAuthorizationDivisionsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostAuthorizationDivisionsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionsInternalServerError creates a PostAuthorizationDivisionsInternalServerError with default headers values
func NewPostAuthorizationDivisionsInternalServerError() *PostAuthorizationDivisionsInternalServerError {
	return &PostAuthorizationDivisionsInternalServerError{}
}

/*
PostAuthorizationDivisionsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostAuthorizationDivisionsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization divisions internal server error response has a 2xx status code
func (o *PostAuthorizationDivisionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization divisions internal server error response has a 3xx status code
func (o *PostAuthorizationDivisionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization divisions internal server error response has a 4xx status code
func (o *PostAuthorizationDivisionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authorization divisions internal server error response has a 5xx status code
func (o *PostAuthorizationDivisionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post authorization divisions internal server error response a status code equal to that given
func (o *PostAuthorizationDivisionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostAuthorizationDivisionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostAuthorizationDivisionsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostAuthorizationDivisionsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionsServiceUnavailable creates a PostAuthorizationDivisionsServiceUnavailable with default headers values
func NewPostAuthorizationDivisionsServiceUnavailable() *PostAuthorizationDivisionsServiceUnavailable {
	return &PostAuthorizationDivisionsServiceUnavailable{}
}

/*
PostAuthorizationDivisionsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostAuthorizationDivisionsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization divisions service unavailable response has a 2xx status code
func (o *PostAuthorizationDivisionsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization divisions service unavailable response has a 3xx status code
func (o *PostAuthorizationDivisionsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization divisions service unavailable response has a 4xx status code
func (o *PostAuthorizationDivisionsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authorization divisions service unavailable response has a 5xx status code
func (o *PostAuthorizationDivisionsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post authorization divisions service unavailable response a status code equal to that given
func (o *PostAuthorizationDivisionsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostAuthorizationDivisionsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostAuthorizationDivisionsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostAuthorizationDivisionsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorizationDivisionsGatewayTimeout creates a PostAuthorizationDivisionsGatewayTimeout with default headers values
func NewPostAuthorizationDivisionsGatewayTimeout() *PostAuthorizationDivisionsGatewayTimeout {
	return &PostAuthorizationDivisionsGatewayTimeout{}
}

/*
PostAuthorizationDivisionsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostAuthorizationDivisionsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post authorization divisions gateway timeout response has a 2xx status code
func (o *PostAuthorizationDivisionsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authorization divisions gateway timeout response has a 3xx status code
func (o *PostAuthorizationDivisionsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authorization divisions gateway timeout response has a 4xx status code
func (o *PostAuthorizationDivisionsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authorization divisions gateway timeout response has a 5xx status code
func (o *PostAuthorizationDivisionsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post authorization divisions gateway timeout response a status code equal to that given
func (o *PostAuthorizationDivisionsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostAuthorizationDivisionsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostAuthorizationDivisionsGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/authorization/divisions][%d] postAuthorizationDivisionsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostAuthorizationDivisionsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostAuthorizationDivisionsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

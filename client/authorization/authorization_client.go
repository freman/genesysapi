// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the authorization client
type API interface {
	/*
	   DeleteAuthorizationDivision deletes a division
	*/
	DeleteAuthorizationDivision(ctx context.Context, params *DeleteAuthorizationDivisionParams) (*DeleteAuthorizationDivisionNoContent, error)
	/*
	   DeleteAuthorizationRole deletes an organization role
	*/
	DeleteAuthorizationRole(ctx context.Context, params *DeleteAuthorizationRoleParams) error
	/*
	   DeleteAuthorizationSubjectDivisionRole deletes a grant of a role in a division
	*/
	DeleteAuthorizationSubjectDivisionRole(ctx context.Context, params *DeleteAuthorizationSubjectDivisionRoleParams) error
	/*
	   GetAuthorizationDivision returns an authorization division
	*/
	GetAuthorizationDivision(ctx context.Context, params *GetAuthorizationDivisionParams) (*GetAuthorizationDivisionOK, error)
	/*
	   GetAuthorizationDivisionGrants gets all grants for a given division
	   Returns all grants assigned to a given division. Maximum page size is 500.
	*/
	GetAuthorizationDivisionGrants(ctx context.Context, params *GetAuthorizationDivisionGrantsParams) (*GetAuthorizationDivisionGrantsOK, error)
	/*
	   GetAuthorizationDivisions retrieves a list of all divisions defined for the organization
	   Request specific divisions by id using a query param "id", e.g.
	   ?id=5f777167-63be-4c24-ad41-374155d9e28b&id=72e9fb25-c484-488d-9312-7acba82435b3
	*/
	GetAuthorizationDivisions(ctx context.Context, params *GetAuthorizationDivisionsParams) (*GetAuthorizationDivisionsOK, error)
	/*
	   GetAuthorizationDivisionsHome retrieves the home division for the organization
	   Will not include object counts.
	*/
	GetAuthorizationDivisionsHome(ctx context.Context, params *GetAuthorizationDivisionsHomeParams) (*GetAuthorizationDivisionsHomeOK, error)
	/*
	   GetAuthorizationDivisionsLimit returns the maximum allowed number of divisions
	*/
	GetAuthorizationDivisionsLimit(ctx context.Context, params *GetAuthorizationDivisionsLimitParams) (*GetAuthorizationDivisionsLimitOK, error)
	/*
	   GetAuthorizationDivisionspermittedMe returns which divisions the current user has the given permission in
	   This route is deprecated, use authorization/divisionspermitted/paged/me instead.
	*/
	GetAuthorizationDivisionspermittedMe(ctx context.Context, params *GetAuthorizationDivisionspermittedMeParams) (*GetAuthorizationDivisionspermittedMeOK, error)
	/*
	   GetAuthorizationDivisionspermittedPagedMe returns which divisions the current user has the given permission in
	*/
	GetAuthorizationDivisionspermittedPagedMe(ctx context.Context, params *GetAuthorizationDivisionspermittedPagedMeParams) (*GetAuthorizationDivisionspermittedPagedMeOK, error)
	/*
	   GetAuthorizationDivisionspermittedPagedSubjectID returns which divisions the specified user has the given permission in
	   This route is deprecated, use authorization/divisionspermitted/paged/me instead.
	*/
	GetAuthorizationDivisionspermittedPagedSubjectID(ctx context.Context, params *GetAuthorizationDivisionspermittedPagedSubjectIDParams) (*GetAuthorizationDivisionspermittedPagedSubjectIDOK, error)
	/*
	   GetAuthorizationPermissions gets all permissions
	   Retrieve a list of all permission defined in the system.
	*/
	GetAuthorizationPermissions(ctx context.Context, params *GetAuthorizationPermissionsParams) (*GetAuthorizationPermissionsOK, error)
	/*
	   GetAuthorizationProducts gets the list of enabled products
	   Gets the list of enabled products. Some example product names are: collaborateFree, collaboratePro, communicate, and engage.
	*/
	GetAuthorizationProducts(ctx context.Context, params *GetAuthorizationProductsParams) (*GetAuthorizationProductsOK, error)
	/*
	   GetAuthorizationRole gets a single organization role
	   Get the organization role specified by its ID.
	*/
	GetAuthorizationRole(ctx context.Context, params *GetAuthorizationRoleParams) (*GetAuthorizationRoleOK, error)
	/*
	   GetAuthorizationRoleComparedefaultRightRoleID gets an org role to default role comparison
	   Compares any organization role to a default role id and show differences
	*/
	GetAuthorizationRoleComparedefaultRightRoleID(ctx context.Context, params *GetAuthorizationRoleComparedefaultRightRoleIDParams) (*GetAuthorizationRoleComparedefaultRightRoleIDOK, error)
	/*
	   GetAuthorizationRoleSubjectgrants gets the subjects granted divisions in the specified role
	   Includes the divisions for which the subject has a grant.
	*/
	GetAuthorizationRoleSubjectgrants(ctx context.Context, params *GetAuthorizationRoleSubjectgrantsParams) (*GetAuthorizationRoleSubjectgrantsOK, error)
	/*
	   GetAuthorizationRoleUsers gets a list of the users in a specified role
	   Get an array of the UUIDs of the users in the specified role.
	*/
	GetAuthorizationRoleUsers(ctx context.Context, params *GetAuthorizationRoleUsersParams) (*GetAuthorizationRoleUsersOK, error)
	/*
	   GetAuthorizationRoles retrieves a list of all roles defined for the organization
	*/
	GetAuthorizationRoles(ctx context.Context, params *GetAuthorizationRolesParams) (*GetAuthorizationRolesOK, error)
	/*
	   GetAuthorizationSubject returns a listing of roles and permissions for a user
	*/
	GetAuthorizationSubject(ctx context.Context, params *GetAuthorizationSubjectParams) (*GetAuthorizationSubjectOK, error)
	/*
	   GetAuthorizationSubjectsMe returns a listing of roles and permissions for the currently authenticated user
	*/
	GetAuthorizationSubjectsMe(ctx context.Context, params *GetAuthorizationSubjectsMeParams) (*GetAuthorizationSubjectsMeOK, error)
	/*
	   GetAuthorizationSubjectsRolecounts gets the count of roles granted to a list of subjects
	*/
	GetAuthorizationSubjectsRolecounts(ctx context.Context, params *GetAuthorizationSubjectsRolecountsParams) (*GetAuthorizationSubjectsRolecountsOK, error)
	/*
	   GetUserRoles returns a listing of roles and permissions for a user
	*/
	GetUserRoles(ctx context.Context, params *GetUserRolesParams) (*GetUserRolesOK, error)
	/*
	   PatchAuthorizationRole patches organization role for needs update field
	   Patch Organization Role for needsUpdate Field
	*/
	PatchAuthorizationRole(ctx context.Context, params *PatchAuthorizationRoleParams) (*PatchAuthorizationRoleOK, error)
	/*
	   PostAuthorizationDivisionObject assigns a list of objects to a division
	   Set the division of a specified list of objects. The objects must all be of the same type, one of:
	   CAMPAIGN, MANAGEMENTUNIT, FLOW, QUEUE, DATATABLES or USER.
	   The body of the request is a list of object IDs, which are expected to be
	   GUIDs, e.g. ["206ce31f-61ec-40ed-a8b1-be6f06303998","250a754e-f5e4-4f51-800f-a92f09d3bf8c"]
	*/
	PostAuthorizationDivisionObject(ctx context.Context, params *PostAuthorizationDivisionObjectParams) (*PostAuthorizationDivisionObjectNoContent, error)
	/*
	   PostAuthorizationDivisionRestore recreates a previously deleted division
	*/
	PostAuthorizationDivisionRestore(ctx context.Context, params *PostAuthorizationDivisionRestoreParams) (*PostAuthorizationDivisionRestoreOK, error)
	/*
	   PostAuthorizationDivisions creates a division
	*/
	PostAuthorizationDivisions(ctx context.Context, params *PostAuthorizationDivisionsParams) (*PostAuthorizationDivisionsOK, error)
	/*
	   PostAuthorizationRole bulks grant subjects and divisions with an organization role
	*/
	PostAuthorizationRole(ctx context.Context, params *PostAuthorizationRoleParams) (*PostAuthorizationRoleNoContent, error)
	/*
	   PostAuthorizationRoleComparedefaultRightRoleID gets an unsaved org role to default role comparison
	   Allows users to compare their existing roles in an unsaved state to its default role
	*/
	PostAuthorizationRoleComparedefaultRightRoleID(ctx context.Context, params *PostAuthorizationRoleComparedefaultRightRoleIDParams) (*PostAuthorizationRoleComparedefaultRightRoleIDOK, error)
	/*
	   PostAuthorizationRoles creates an organization role
	*/
	PostAuthorizationRoles(ctx context.Context, params *PostAuthorizationRolesParams) (*PostAuthorizationRolesOK, error)
	/*
	   PostAuthorizationRolesDefault restores all default roles
	   This endpoint serves several purposes. 1. It provides the org with default roles. This is important for default roles that will be added after go-live (they can retroactively add the new default-role). Note: When not using a query param of force=true, it only adds the default roles not configured for the org; it does not overwrite roles. 2. Using the query param force=true, you can restore all default roles. Note: This does not have an effect on custom roles.
	*/
	PostAuthorizationRolesDefault(ctx context.Context, params *PostAuthorizationRolesDefaultParams) (*PostAuthorizationRolesDefaultOK, error)
	/*
	   PostAuthorizationSubjectBulkadd bulks grant roles and divisions to a subject
	*/
	PostAuthorizationSubjectBulkadd(ctx context.Context, params *PostAuthorizationSubjectBulkaddParams) (*PostAuthorizationSubjectBulkaddNoContent, error)
	/*
	   PostAuthorizationSubjectBulkremove bulks remove grants from a subject
	*/
	PostAuthorizationSubjectBulkremove(ctx context.Context, params *PostAuthorizationSubjectBulkremoveParams) (*PostAuthorizationSubjectBulkremoveNoContent, error)
	/*
	   PostAuthorizationSubjectBulkreplace replaces subject s roles and divisions with the exact list supplied in the request
	   This operation will not remove grants that are inherited from group membership. It will only set the grants directly applied to the subject.
	*/
	PostAuthorizationSubjectBulkreplace(ctx context.Context, params *PostAuthorizationSubjectBulkreplaceParams) (*PostAuthorizationSubjectBulkreplaceNoContent, error)
	/*
	   PostAuthorizationSubjectDivisionRole makes a grant of a role in a division
	*/
	PostAuthorizationSubjectDivisionRole(ctx context.Context, params *PostAuthorizationSubjectDivisionRoleParams) error
	/*
	   PutAuthorizationDivision updates a division
	*/
	PutAuthorizationDivision(ctx context.Context, params *PutAuthorizationDivisionParams) (*PutAuthorizationDivisionOK, error)
	/*
	   PutAuthorizationRole updates an organization role
	   Update
	*/
	PutAuthorizationRole(ctx context.Context, params *PutAuthorizationRoleParams) (*PutAuthorizationRoleOK, error)
	/*
	   PutAuthorizationRoleUsersAdd sets the users for the role
	*/
	PutAuthorizationRoleUsersAdd(ctx context.Context, params *PutAuthorizationRoleUsersAddParams) (*PutAuthorizationRoleUsersAddOK, error)
	/*
	   PutAuthorizationRoleUsersRemove removes the users from the role
	*/
	PutAuthorizationRoleUsersRemove(ctx context.Context, params *PutAuthorizationRoleUsersRemoveParams) (*PutAuthorizationRoleUsersRemoveOK, error)
	/*
	   PutAuthorizationRolesDefault restores specified default roles
	*/
	PutAuthorizationRolesDefault(ctx context.Context, params *PutAuthorizationRolesDefaultParams) (*PutAuthorizationRolesDefaultOK, error)
	/*
	   PutUserRoles sets the user s roles
	*/
	PutUserRoles(ctx context.Context, params *PutUserRolesParams) (*PutUserRolesOK, error)
}

// New creates a new authorization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for authorization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteAuthorizationDivision deletes a division
*/
func (a *Client) DeleteAuthorizationDivision(ctx context.Context, params *DeleteAuthorizationDivisionParams) (*DeleteAuthorizationDivisionNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAuthorizationDivision",
		Method:             "DELETE",
		PathPattern:        "/api/v2/authorization/divisions/{divisionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuthorizationDivisionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAuthorizationDivisionNoContent), nil

}

/*
DeleteAuthorizationRole deletes an organization role
*/
func (a *Client) DeleteAuthorizationRole(ctx context.Context, params *DeleteAuthorizationRoleParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAuthorizationRole",
		Method:             "DELETE",
		PathPattern:        "/api/v2/authorization/roles/{roleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuthorizationRoleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteAuthorizationSubjectDivisionRole deletes a grant of a role in a division
*/
func (a *Client) DeleteAuthorizationSubjectDivisionRole(ctx context.Context, params *DeleteAuthorizationSubjectDivisionRoleParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAuthorizationSubjectDivisionRole",
		Method:             "DELETE",
		PathPattern:        "/api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuthorizationSubjectDivisionRoleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetAuthorizationDivision returns an authorization division
*/
func (a *Client) GetAuthorizationDivision(ctx context.Context, params *GetAuthorizationDivisionParams) (*GetAuthorizationDivisionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationDivision",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/divisions/{divisionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationDivisionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationDivisionOK), nil

}

/*
GetAuthorizationDivisionGrants gets all grants for a given division

Returns all grants assigned to a given division. Maximum page size is 500.
*/
func (a *Client) GetAuthorizationDivisionGrants(ctx context.Context, params *GetAuthorizationDivisionGrantsParams) (*GetAuthorizationDivisionGrantsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationDivisionGrants",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/divisions/{divisionId}/grants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationDivisionGrantsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationDivisionGrantsOK), nil

}

/*
GetAuthorizationDivisions retrieves a list of all divisions defined for the organization

Request specific divisions by id using a query param "id", e.g.
?id=5f777167-63be-4c24-ad41-374155d9e28b&id=72e9fb25-c484-488d-9312-7acba82435b3
*/
func (a *Client) GetAuthorizationDivisions(ctx context.Context, params *GetAuthorizationDivisionsParams) (*GetAuthorizationDivisionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationDivisions",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/divisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationDivisionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationDivisionsOK), nil

}

/*
GetAuthorizationDivisionsHome retrieves the home division for the organization

Will not include object counts.
*/
func (a *Client) GetAuthorizationDivisionsHome(ctx context.Context, params *GetAuthorizationDivisionsHomeParams) (*GetAuthorizationDivisionsHomeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationDivisionsHome",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/divisions/home",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationDivisionsHomeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationDivisionsHomeOK), nil

}

/*
GetAuthorizationDivisionsLimit returns the maximum allowed number of divisions
*/
func (a *Client) GetAuthorizationDivisionsLimit(ctx context.Context, params *GetAuthorizationDivisionsLimitParams) (*GetAuthorizationDivisionsLimitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationDivisionsLimit",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/divisions/limit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationDivisionsLimitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationDivisionsLimitOK), nil

}

/*
GetAuthorizationDivisionspermittedMe returns which divisions the current user has the given permission in

This route is deprecated, use authorization/divisionspermitted/paged/me instead.
*/
func (a *Client) GetAuthorizationDivisionspermittedMe(ctx context.Context, params *GetAuthorizationDivisionspermittedMeParams) (*GetAuthorizationDivisionspermittedMeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationDivisionspermittedMe",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/divisionspermitted/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationDivisionspermittedMeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationDivisionspermittedMeOK), nil

}

/*
GetAuthorizationDivisionspermittedPagedMe returns which divisions the current user has the given permission in
*/
func (a *Client) GetAuthorizationDivisionspermittedPagedMe(ctx context.Context, params *GetAuthorizationDivisionspermittedPagedMeParams) (*GetAuthorizationDivisionspermittedPagedMeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationDivisionspermittedPagedMe",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/divisionspermitted/paged/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationDivisionspermittedPagedMeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationDivisionspermittedPagedMeOK), nil

}

/*
GetAuthorizationDivisionspermittedPagedSubjectID returns which divisions the specified user has the given permission in

This route is deprecated, use authorization/divisionspermitted/paged/me instead.
*/
func (a *Client) GetAuthorizationDivisionspermittedPagedSubjectID(ctx context.Context, params *GetAuthorizationDivisionspermittedPagedSubjectIDParams) (*GetAuthorizationDivisionspermittedPagedSubjectIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationDivisionspermittedPagedSubjectId",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/divisionspermitted/paged/{subjectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationDivisionspermittedPagedSubjectIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationDivisionspermittedPagedSubjectIDOK), nil

}

/*
GetAuthorizationPermissions gets all permissions

Retrieve a list of all permission defined in the system.
*/
func (a *Client) GetAuthorizationPermissions(ctx context.Context, params *GetAuthorizationPermissionsParams) (*GetAuthorizationPermissionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationPermissions",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationPermissionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationPermissionsOK), nil

}

/*
GetAuthorizationProducts gets the list of enabled products

Gets the list of enabled products. Some example product names are: collaborateFree, collaboratePro, communicate, and engage.
*/
func (a *Client) GetAuthorizationProducts(ctx context.Context, params *GetAuthorizationProductsParams) (*GetAuthorizationProductsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationProducts",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/products",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationProductsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationProductsOK), nil

}

/*
GetAuthorizationRole gets a single organization role

Get the organization role specified by its ID.
*/
func (a *Client) GetAuthorizationRole(ctx context.Context, params *GetAuthorizationRoleParams) (*GetAuthorizationRoleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationRole",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/roles/{roleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationRoleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationRoleOK), nil

}

/*
GetAuthorizationRoleComparedefaultRightRoleID gets an org role to default role comparison

Compares any organization role to a default role id and show differences
*/
func (a *Client) GetAuthorizationRoleComparedefaultRightRoleID(ctx context.Context, params *GetAuthorizationRoleComparedefaultRightRoleIDParams) (*GetAuthorizationRoleComparedefaultRightRoleIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationRoleComparedefaultRightRoleId",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationRoleComparedefaultRightRoleIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationRoleComparedefaultRightRoleIDOK), nil

}

/*
GetAuthorizationRoleSubjectgrants gets the subjects granted divisions in the specified role

Includes the divisions for which the subject has a grant.
*/
func (a *Client) GetAuthorizationRoleSubjectgrants(ctx context.Context, params *GetAuthorizationRoleSubjectgrantsParams) (*GetAuthorizationRoleSubjectgrantsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationRoleSubjectgrants",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/roles/{roleId}/subjectgrants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationRoleSubjectgrantsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationRoleSubjectgrantsOK), nil

}

/*
GetAuthorizationRoleUsers gets a list of the users in a specified role

Get an array of the UUIDs of the users in the specified role.
*/
func (a *Client) GetAuthorizationRoleUsers(ctx context.Context, params *GetAuthorizationRoleUsersParams) (*GetAuthorizationRoleUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationRoleUsers",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/roles/{roleId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationRoleUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationRoleUsersOK), nil

}

/*
GetAuthorizationRoles retrieves a list of all roles defined for the organization
*/
func (a *Client) GetAuthorizationRoles(ctx context.Context, params *GetAuthorizationRolesParams) (*GetAuthorizationRolesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationRoles",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationRolesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationRolesOK), nil

}

/*
GetAuthorizationSubject returns a listing of roles and permissions for a user
*/
func (a *Client) GetAuthorizationSubject(ctx context.Context, params *GetAuthorizationSubjectParams) (*GetAuthorizationSubjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationSubject",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/subjects/{subjectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationSubjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationSubjectOK), nil

}

/*
GetAuthorizationSubjectsMe returns a listing of roles and permissions for the currently authenticated user
*/
func (a *Client) GetAuthorizationSubjectsMe(ctx context.Context, params *GetAuthorizationSubjectsMeParams) (*GetAuthorizationSubjectsMeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationSubjectsMe",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/subjects/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationSubjectsMeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationSubjectsMeOK), nil

}

/*
GetAuthorizationSubjectsRolecounts gets the count of roles granted to a list of subjects
*/
func (a *Client) GetAuthorizationSubjectsRolecounts(ctx context.Context, params *GetAuthorizationSubjectsRolecountsParams) (*GetAuthorizationSubjectsRolecountsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationSubjectsRolecounts",
		Method:             "GET",
		PathPattern:        "/api/v2/authorization/subjects/rolecounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationSubjectsRolecountsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthorizationSubjectsRolecountsOK), nil

}

/*
GetUserRoles returns a listing of roles and permissions for a user
*/
func (a *Client) GetUserRoles(ctx context.Context, params *GetUserRolesParams) (*GetUserRolesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserRoles",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserRolesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserRolesOK), nil

}

/*
PatchAuthorizationRole patches organization role for needs update field

Patch Organization Role for needsUpdate Field
*/
func (a *Client) PatchAuthorizationRole(ctx context.Context, params *PatchAuthorizationRoleParams) (*PatchAuthorizationRoleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAuthorizationRole",
		Method:             "PATCH",
		PathPattern:        "/api/v2/authorization/roles/{roleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAuthorizationRoleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAuthorizationRoleOK), nil

}

/*
PostAuthorizationDivisionObject assigns a list of objects to a division

Set the division of a specified list of objects. The objects must all be of the same type, one of:
CAMPAIGN, MANAGEMENTUNIT, FLOW, QUEUE, DATATABLES or USER.
The body of the request is a list of object IDs, which are expected to be
GUIDs, e.g. ["206ce31f-61ec-40ed-a8b1-be6f06303998","250a754e-f5e4-4f51-800f-a92f09d3bf8c"]
*/
func (a *Client) PostAuthorizationDivisionObject(ctx context.Context, params *PostAuthorizationDivisionObjectParams) (*PostAuthorizationDivisionObjectNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuthorizationDivisionObject",
		Method:             "POST",
		PathPattern:        "/api/v2/authorization/divisions/{divisionId}/objects/{objectType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuthorizationDivisionObjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAuthorizationDivisionObjectNoContent), nil

}

/*
PostAuthorizationDivisionRestore recreates a previously deleted division
*/
func (a *Client) PostAuthorizationDivisionRestore(ctx context.Context, params *PostAuthorizationDivisionRestoreParams) (*PostAuthorizationDivisionRestoreOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuthorizationDivisionRestore",
		Method:             "POST",
		PathPattern:        "/api/v2/authorization/divisions/{divisionId}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuthorizationDivisionRestoreReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAuthorizationDivisionRestoreOK), nil

}

/*
PostAuthorizationDivisions creates a division
*/
func (a *Client) PostAuthorizationDivisions(ctx context.Context, params *PostAuthorizationDivisionsParams) (*PostAuthorizationDivisionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuthorizationDivisions",
		Method:             "POST",
		PathPattern:        "/api/v2/authorization/divisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuthorizationDivisionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAuthorizationDivisionsOK), nil

}

/*
PostAuthorizationRole bulks grant subjects and divisions with an organization role
*/
func (a *Client) PostAuthorizationRole(ctx context.Context, params *PostAuthorizationRoleParams) (*PostAuthorizationRoleNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuthorizationRole",
		Method:             "POST",
		PathPattern:        "/api/v2/authorization/roles/{roleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuthorizationRoleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAuthorizationRoleNoContent), nil

}

/*
PostAuthorizationRoleComparedefaultRightRoleID gets an unsaved org role to default role comparison

Allows users to compare their existing roles in an unsaved state to its default role
*/
func (a *Client) PostAuthorizationRoleComparedefaultRightRoleID(ctx context.Context, params *PostAuthorizationRoleComparedefaultRightRoleIDParams) (*PostAuthorizationRoleComparedefaultRightRoleIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuthorizationRoleComparedefaultRightRoleId",
		Method:             "POST",
		PathPattern:        "/api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuthorizationRoleComparedefaultRightRoleIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAuthorizationRoleComparedefaultRightRoleIDOK), nil

}

/*
PostAuthorizationRoles creates an organization role
*/
func (a *Client) PostAuthorizationRoles(ctx context.Context, params *PostAuthorizationRolesParams) (*PostAuthorizationRolesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuthorizationRoles",
		Method:             "POST",
		PathPattern:        "/api/v2/authorization/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuthorizationRolesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAuthorizationRolesOK), nil

}

/*
PostAuthorizationRolesDefault restores all default roles

This endpoint serves several purposes. 1. It provides the org with default roles. This is important for default roles that will be added after go-live (they can retroactively add the new default-role). Note: When not using a query param of force=true, it only adds the default roles not configured for the org; it does not overwrite roles. 2. Using the query param force=true, you can restore all default roles. Note: This does not have an effect on custom roles.
*/
func (a *Client) PostAuthorizationRolesDefault(ctx context.Context, params *PostAuthorizationRolesDefaultParams) (*PostAuthorizationRolesDefaultOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuthorizationRolesDefault",
		Method:             "POST",
		PathPattern:        "/api/v2/authorization/roles/default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuthorizationRolesDefaultReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAuthorizationRolesDefaultOK), nil

}

/*
PostAuthorizationSubjectBulkadd bulks grant roles and divisions to a subject
*/
func (a *Client) PostAuthorizationSubjectBulkadd(ctx context.Context, params *PostAuthorizationSubjectBulkaddParams) (*PostAuthorizationSubjectBulkaddNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuthorizationSubjectBulkadd",
		Method:             "POST",
		PathPattern:        "/api/v2/authorization/subjects/{subjectId}/bulkadd",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuthorizationSubjectBulkaddReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAuthorizationSubjectBulkaddNoContent), nil

}

/*
PostAuthorizationSubjectBulkremove bulks remove grants from a subject
*/
func (a *Client) PostAuthorizationSubjectBulkremove(ctx context.Context, params *PostAuthorizationSubjectBulkremoveParams) (*PostAuthorizationSubjectBulkremoveNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuthorizationSubjectBulkremove",
		Method:             "POST",
		PathPattern:        "/api/v2/authorization/subjects/{subjectId}/bulkremove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuthorizationSubjectBulkremoveReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAuthorizationSubjectBulkremoveNoContent), nil

}

/*
PostAuthorizationSubjectBulkreplace replaces subject s roles and divisions with the exact list supplied in the request

This operation will not remove grants that are inherited from group membership. It will only set the grants directly applied to the subject.
*/
func (a *Client) PostAuthorizationSubjectBulkreplace(ctx context.Context, params *PostAuthorizationSubjectBulkreplaceParams) (*PostAuthorizationSubjectBulkreplaceNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuthorizationSubjectBulkreplace",
		Method:             "POST",
		PathPattern:        "/api/v2/authorization/subjects/{subjectId}/bulkreplace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuthorizationSubjectBulkreplaceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAuthorizationSubjectBulkreplaceNoContent), nil

}

/*
PostAuthorizationSubjectDivisionRole makes a grant of a role in a division
*/
func (a *Client) PostAuthorizationSubjectDivisionRole(ctx context.Context, params *PostAuthorizationSubjectDivisionRoleParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuthorizationSubjectDivisionRole",
		Method:             "POST",
		PathPattern:        "/api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuthorizationSubjectDivisionRoleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutAuthorizationDivision updates a division
*/
func (a *Client) PutAuthorizationDivision(ctx context.Context, params *PutAuthorizationDivisionParams) (*PutAuthorizationDivisionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAuthorizationDivision",
		Method:             "PUT",
		PathPattern:        "/api/v2/authorization/divisions/{divisionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAuthorizationDivisionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAuthorizationDivisionOK), nil

}

/*
PutAuthorizationRole updates an organization role

Update
*/
func (a *Client) PutAuthorizationRole(ctx context.Context, params *PutAuthorizationRoleParams) (*PutAuthorizationRoleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAuthorizationRole",
		Method:             "PUT",
		PathPattern:        "/api/v2/authorization/roles/{roleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAuthorizationRoleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAuthorizationRoleOK), nil

}

/*
PutAuthorizationRoleUsersAdd sets the users for the role
*/
func (a *Client) PutAuthorizationRoleUsersAdd(ctx context.Context, params *PutAuthorizationRoleUsersAddParams) (*PutAuthorizationRoleUsersAddOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAuthorizationRoleUsersAdd",
		Method:             "PUT",
		PathPattern:        "/api/v2/authorization/roles/{roleId}/users/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAuthorizationRoleUsersAddReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAuthorizationRoleUsersAddOK), nil

}

/*
PutAuthorizationRoleUsersRemove removes the users from the role
*/
func (a *Client) PutAuthorizationRoleUsersRemove(ctx context.Context, params *PutAuthorizationRoleUsersRemoveParams) (*PutAuthorizationRoleUsersRemoveOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAuthorizationRoleUsersRemove",
		Method:             "PUT",
		PathPattern:        "/api/v2/authorization/roles/{roleId}/users/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAuthorizationRoleUsersRemoveReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAuthorizationRoleUsersRemoveOK), nil

}

/*
PutAuthorizationRolesDefault restores specified default roles
*/
func (a *Client) PutAuthorizationRolesDefault(ctx context.Context, params *PutAuthorizationRolesDefaultParams) (*PutAuthorizationRolesDefaultOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAuthorizationRolesDefault",
		Method:             "PUT",
		PathPattern:        "/api/v2/authorization/roles/default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAuthorizationRolesDefaultReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAuthorizationRolesDefaultOK), nil

}

/*
PutUserRoles sets the user s roles
*/
func (a *Client) PutUserRoles(ctx context.Context, params *PutUserRolesParams) (*PutUserRolesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUserRoles",
		Method:             "PUT",
		PathPattern:        "/api/v2/users/{userId}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserRolesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUserRolesOK), nil

}

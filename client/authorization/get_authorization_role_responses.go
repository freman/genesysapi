// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetAuthorizationRoleReader is a Reader for the GetAuthorizationRole structure.
type GetAuthorizationRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuthorizationRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuthorizationRoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuthorizationRoleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAuthorizationRoleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAuthorizationRoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuthorizationRoleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetAuthorizationRoleRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAuthorizationRoleRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAuthorizationRoleUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAuthorizationRoleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuthorizationRoleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAuthorizationRoleServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetAuthorizationRoleGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAuthorizationRoleOK creates a GetAuthorizationRoleOK with default headers values
func NewGetAuthorizationRoleOK() *GetAuthorizationRoleOK {
	return &GetAuthorizationRoleOK{}
}

/*
GetAuthorizationRoleOK describes a response with status code 200, with default header values.

successful operation
*/
type GetAuthorizationRoleOK struct {
	Payload *models.DomainOrganizationRole
}

// IsSuccess returns true when this get authorization role o k response has a 2xx status code
func (o *GetAuthorizationRoleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get authorization role o k response has a 3xx status code
func (o *GetAuthorizationRoleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization role o k response has a 4xx status code
func (o *GetAuthorizationRoleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization role o k response has a 5xx status code
func (o *GetAuthorizationRoleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization role o k response a status code equal to that given
func (o *GetAuthorizationRoleOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAuthorizationRoleOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleOK  %+v", 200, o.Payload)
}

func (o *GetAuthorizationRoleOK) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleOK  %+v", 200, o.Payload)
}

func (o *GetAuthorizationRoleOK) GetPayload() *models.DomainOrganizationRole {
	return o.Payload
}

func (o *GetAuthorizationRoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DomainOrganizationRole)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleBadRequest creates a GetAuthorizationRoleBadRequest with default headers values
func NewGetAuthorizationRoleBadRequest() *GetAuthorizationRoleBadRequest {
	return &GetAuthorizationRoleBadRequest{}
}

/*
GetAuthorizationRoleBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetAuthorizationRoleBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization role bad request response has a 2xx status code
func (o *GetAuthorizationRoleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization role bad request response has a 3xx status code
func (o *GetAuthorizationRoleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization role bad request response has a 4xx status code
func (o *GetAuthorizationRoleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization role bad request response has a 5xx status code
func (o *GetAuthorizationRoleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization role bad request response a status code equal to that given
func (o *GetAuthorizationRoleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAuthorizationRoleBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorizationRoleBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorizationRoleBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleUnauthorized creates a GetAuthorizationRoleUnauthorized with default headers values
func NewGetAuthorizationRoleUnauthorized() *GetAuthorizationRoleUnauthorized {
	return &GetAuthorizationRoleUnauthorized{}
}

/*
GetAuthorizationRoleUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetAuthorizationRoleUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization role unauthorized response has a 2xx status code
func (o *GetAuthorizationRoleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization role unauthorized response has a 3xx status code
func (o *GetAuthorizationRoleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization role unauthorized response has a 4xx status code
func (o *GetAuthorizationRoleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization role unauthorized response has a 5xx status code
func (o *GetAuthorizationRoleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization role unauthorized response a status code equal to that given
func (o *GetAuthorizationRoleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAuthorizationRoleUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorizationRoleUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorizationRoleUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleForbidden creates a GetAuthorizationRoleForbidden with default headers values
func NewGetAuthorizationRoleForbidden() *GetAuthorizationRoleForbidden {
	return &GetAuthorizationRoleForbidden{}
}

/*
GetAuthorizationRoleForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetAuthorizationRoleForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization role forbidden response has a 2xx status code
func (o *GetAuthorizationRoleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization role forbidden response has a 3xx status code
func (o *GetAuthorizationRoleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization role forbidden response has a 4xx status code
func (o *GetAuthorizationRoleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization role forbidden response has a 5xx status code
func (o *GetAuthorizationRoleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization role forbidden response a status code equal to that given
func (o *GetAuthorizationRoleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAuthorizationRoleForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthorizationRoleForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthorizationRoleForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleNotFound creates a GetAuthorizationRoleNotFound with default headers values
func NewGetAuthorizationRoleNotFound() *GetAuthorizationRoleNotFound {
	return &GetAuthorizationRoleNotFound{}
}

/*
GetAuthorizationRoleNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetAuthorizationRoleNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization role not found response has a 2xx status code
func (o *GetAuthorizationRoleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization role not found response has a 3xx status code
func (o *GetAuthorizationRoleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization role not found response has a 4xx status code
func (o *GetAuthorizationRoleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization role not found response has a 5xx status code
func (o *GetAuthorizationRoleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization role not found response a status code equal to that given
func (o *GetAuthorizationRoleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAuthorizationRoleNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorizationRoleNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorizationRoleNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleRequestTimeout creates a GetAuthorizationRoleRequestTimeout with default headers values
func NewGetAuthorizationRoleRequestTimeout() *GetAuthorizationRoleRequestTimeout {
	return &GetAuthorizationRoleRequestTimeout{}
}

/*
GetAuthorizationRoleRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetAuthorizationRoleRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization role request timeout response has a 2xx status code
func (o *GetAuthorizationRoleRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization role request timeout response has a 3xx status code
func (o *GetAuthorizationRoleRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization role request timeout response has a 4xx status code
func (o *GetAuthorizationRoleRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization role request timeout response has a 5xx status code
func (o *GetAuthorizationRoleRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization role request timeout response a status code equal to that given
func (o *GetAuthorizationRoleRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetAuthorizationRoleRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAuthorizationRoleRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAuthorizationRoleRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleRequestEntityTooLarge creates a GetAuthorizationRoleRequestEntityTooLarge with default headers values
func NewGetAuthorizationRoleRequestEntityTooLarge() *GetAuthorizationRoleRequestEntityTooLarge {
	return &GetAuthorizationRoleRequestEntityTooLarge{}
}

/*
GetAuthorizationRoleRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetAuthorizationRoleRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization role request entity too large response has a 2xx status code
func (o *GetAuthorizationRoleRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization role request entity too large response has a 3xx status code
func (o *GetAuthorizationRoleRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization role request entity too large response has a 4xx status code
func (o *GetAuthorizationRoleRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization role request entity too large response has a 5xx status code
func (o *GetAuthorizationRoleRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization role request entity too large response a status code equal to that given
func (o *GetAuthorizationRoleRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetAuthorizationRoleRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAuthorizationRoleRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAuthorizationRoleRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleUnsupportedMediaType creates a GetAuthorizationRoleUnsupportedMediaType with default headers values
func NewGetAuthorizationRoleUnsupportedMediaType() *GetAuthorizationRoleUnsupportedMediaType {
	return &GetAuthorizationRoleUnsupportedMediaType{}
}

/*
GetAuthorizationRoleUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetAuthorizationRoleUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization role unsupported media type response has a 2xx status code
func (o *GetAuthorizationRoleUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization role unsupported media type response has a 3xx status code
func (o *GetAuthorizationRoleUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization role unsupported media type response has a 4xx status code
func (o *GetAuthorizationRoleUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization role unsupported media type response has a 5xx status code
func (o *GetAuthorizationRoleUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization role unsupported media type response a status code equal to that given
func (o *GetAuthorizationRoleUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetAuthorizationRoleUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAuthorizationRoleUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAuthorizationRoleUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleTooManyRequests creates a GetAuthorizationRoleTooManyRequests with default headers values
func NewGetAuthorizationRoleTooManyRequests() *GetAuthorizationRoleTooManyRequests {
	return &GetAuthorizationRoleTooManyRequests{}
}

/*
GetAuthorizationRoleTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetAuthorizationRoleTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization role too many requests response has a 2xx status code
func (o *GetAuthorizationRoleTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization role too many requests response has a 3xx status code
func (o *GetAuthorizationRoleTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization role too many requests response has a 4xx status code
func (o *GetAuthorizationRoleTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization role too many requests response has a 5xx status code
func (o *GetAuthorizationRoleTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization role too many requests response a status code equal to that given
func (o *GetAuthorizationRoleTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAuthorizationRoleTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAuthorizationRoleTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAuthorizationRoleTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleInternalServerError creates a GetAuthorizationRoleInternalServerError with default headers values
func NewGetAuthorizationRoleInternalServerError() *GetAuthorizationRoleInternalServerError {
	return &GetAuthorizationRoleInternalServerError{}
}

/*
GetAuthorizationRoleInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetAuthorizationRoleInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization role internal server error response has a 2xx status code
func (o *GetAuthorizationRoleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization role internal server error response has a 3xx status code
func (o *GetAuthorizationRoleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization role internal server error response has a 4xx status code
func (o *GetAuthorizationRoleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization role internal server error response has a 5xx status code
func (o *GetAuthorizationRoleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get authorization role internal server error response a status code equal to that given
func (o *GetAuthorizationRoleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAuthorizationRoleInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorizationRoleInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorizationRoleInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleServiceUnavailable creates a GetAuthorizationRoleServiceUnavailable with default headers values
func NewGetAuthorizationRoleServiceUnavailable() *GetAuthorizationRoleServiceUnavailable {
	return &GetAuthorizationRoleServiceUnavailable{}
}

/*
GetAuthorizationRoleServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetAuthorizationRoleServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization role service unavailable response has a 2xx status code
func (o *GetAuthorizationRoleServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization role service unavailable response has a 3xx status code
func (o *GetAuthorizationRoleServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization role service unavailable response has a 4xx status code
func (o *GetAuthorizationRoleServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization role service unavailable response has a 5xx status code
func (o *GetAuthorizationRoleServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get authorization role service unavailable response a status code equal to that given
func (o *GetAuthorizationRoleServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAuthorizationRoleServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuthorizationRoleServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuthorizationRoleServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationRoleGatewayTimeout creates a GetAuthorizationRoleGatewayTimeout with default headers values
func NewGetAuthorizationRoleGatewayTimeout() *GetAuthorizationRoleGatewayTimeout {
	return &GetAuthorizationRoleGatewayTimeout{}
}

/*
GetAuthorizationRoleGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetAuthorizationRoleGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization role gateway timeout response has a 2xx status code
func (o *GetAuthorizationRoleGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization role gateway timeout response has a 3xx status code
func (o *GetAuthorizationRoleGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization role gateway timeout response has a 4xx status code
func (o *GetAuthorizationRoleGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization role gateway timeout response has a 5xx status code
func (o *GetAuthorizationRoleGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get authorization role gateway timeout response a status code equal to that given
func (o *GetAuthorizationRoleGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetAuthorizationRoleGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAuthorizationRoleGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/roles/{roleId}][%d] getAuthorizationRoleGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAuthorizationRoleGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationRoleGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

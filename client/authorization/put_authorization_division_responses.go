// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutAuthorizationDivisionReader is a Reader for the PutAuthorizationDivision structure.
type PutAuthorizationDivisionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutAuthorizationDivisionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutAuthorizationDivisionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutAuthorizationDivisionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutAuthorizationDivisionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutAuthorizationDivisionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutAuthorizationDivisionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutAuthorizationDivisionRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutAuthorizationDivisionRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutAuthorizationDivisionUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutAuthorizationDivisionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutAuthorizationDivisionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutAuthorizationDivisionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutAuthorizationDivisionGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutAuthorizationDivisionOK creates a PutAuthorizationDivisionOK with default headers values
func NewPutAuthorizationDivisionOK() *PutAuthorizationDivisionOK {
	return &PutAuthorizationDivisionOK{}
}

/*PutAuthorizationDivisionOK handles this case with default header values.

successful operation
*/
type PutAuthorizationDivisionOK struct {
	Payload *models.AuthzDivision
}

func (o *PutAuthorizationDivisionOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/divisions/{divisionId}][%d] putAuthorizationDivisionOK  %+v", 200, o.Payload)
}

func (o *PutAuthorizationDivisionOK) GetPayload() *models.AuthzDivision {
	return o.Payload
}

func (o *PutAuthorizationDivisionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthzDivision)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationDivisionBadRequest creates a PutAuthorizationDivisionBadRequest with default headers values
func NewPutAuthorizationDivisionBadRequest() *PutAuthorizationDivisionBadRequest {
	return &PutAuthorizationDivisionBadRequest{}
}

/*PutAuthorizationDivisionBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutAuthorizationDivisionBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationDivisionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/divisions/{divisionId}][%d] putAuthorizationDivisionBadRequest  %+v", 400, o.Payload)
}

func (o *PutAuthorizationDivisionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationDivisionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationDivisionUnauthorized creates a PutAuthorizationDivisionUnauthorized with default headers values
func NewPutAuthorizationDivisionUnauthorized() *PutAuthorizationDivisionUnauthorized {
	return &PutAuthorizationDivisionUnauthorized{}
}

/*PutAuthorizationDivisionUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutAuthorizationDivisionUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationDivisionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/divisions/{divisionId}][%d] putAuthorizationDivisionUnauthorized  %+v", 401, o.Payload)
}

func (o *PutAuthorizationDivisionUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationDivisionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationDivisionForbidden creates a PutAuthorizationDivisionForbidden with default headers values
func NewPutAuthorizationDivisionForbidden() *PutAuthorizationDivisionForbidden {
	return &PutAuthorizationDivisionForbidden{}
}

/*PutAuthorizationDivisionForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutAuthorizationDivisionForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationDivisionForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/divisions/{divisionId}][%d] putAuthorizationDivisionForbidden  %+v", 403, o.Payload)
}

func (o *PutAuthorizationDivisionForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationDivisionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationDivisionNotFound creates a PutAuthorizationDivisionNotFound with default headers values
func NewPutAuthorizationDivisionNotFound() *PutAuthorizationDivisionNotFound {
	return &PutAuthorizationDivisionNotFound{}
}

/*PutAuthorizationDivisionNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutAuthorizationDivisionNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationDivisionNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/divisions/{divisionId}][%d] putAuthorizationDivisionNotFound  %+v", 404, o.Payload)
}

func (o *PutAuthorizationDivisionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationDivisionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationDivisionRequestTimeout creates a PutAuthorizationDivisionRequestTimeout with default headers values
func NewPutAuthorizationDivisionRequestTimeout() *PutAuthorizationDivisionRequestTimeout {
	return &PutAuthorizationDivisionRequestTimeout{}
}

/*PutAuthorizationDivisionRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutAuthorizationDivisionRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationDivisionRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/divisions/{divisionId}][%d] putAuthorizationDivisionRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutAuthorizationDivisionRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationDivisionRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationDivisionRequestEntityTooLarge creates a PutAuthorizationDivisionRequestEntityTooLarge with default headers values
func NewPutAuthorizationDivisionRequestEntityTooLarge() *PutAuthorizationDivisionRequestEntityTooLarge {
	return &PutAuthorizationDivisionRequestEntityTooLarge{}
}

/*PutAuthorizationDivisionRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutAuthorizationDivisionRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationDivisionRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/divisions/{divisionId}][%d] putAuthorizationDivisionRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutAuthorizationDivisionRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationDivisionRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationDivisionUnsupportedMediaType creates a PutAuthorizationDivisionUnsupportedMediaType with default headers values
func NewPutAuthorizationDivisionUnsupportedMediaType() *PutAuthorizationDivisionUnsupportedMediaType {
	return &PutAuthorizationDivisionUnsupportedMediaType{}
}

/*PutAuthorizationDivisionUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutAuthorizationDivisionUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationDivisionUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/divisions/{divisionId}][%d] putAuthorizationDivisionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutAuthorizationDivisionUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationDivisionUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationDivisionTooManyRequests creates a PutAuthorizationDivisionTooManyRequests with default headers values
func NewPutAuthorizationDivisionTooManyRequests() *PutAuthorizationDivisionTooManyRequests {
	return &PutAuthorizationDivisionTooManyRequests{}
}

/*PutAuthorizationDivisionTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutAuthorizationDivisionTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationDivisionTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/divisions/{divisionId}][%d] putAuthorizationDivisionTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutAuthorizationDivisionTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationDivisionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationDivisionInternalServerError creates a PutAuthorizationDivisionInternalServerError with default headers values
func NewPutAuthorizationDivisionInternalServerError() *PutAuthorizationDivisionInternalServerError {
	return &PutAuthorizationDivisionInternalServerError{}
}

/*PutAuthorizationDivisionInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutAuthorizationDivisionInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationDivisionInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/divisions/{divisionId}][%d] putAuthorizationDivisionInternalServerError  %+v", 500, o.Payload)
}

func (o *PutAuthorizationDivisionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationDivisionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationDivisionServiceUnavailable creates a PutAuthorizationDivisionServiceUnavailable with default headers values
func NewPutAuthorizationDivisionServiceUnavailable() *PutAuthorizationDivisionServiceUnavailable {
	return &PutAuthorizationDivisionServiceUnavailable{}
}

/*PutAuthorizationDivisionServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutAuthorizationDivisionServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationDivisionServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/divisions/{divisionId}][%d] putAuthorizationDivisionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutAuthorizationDivisionServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationDivisionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationDivisionGatewayTimeout creates a PutAuthorizationDivisionGatewayTimeout with default headers values
func NewPutAuthorizationDivisionGatewayTimeout() *PutAuthorizationDivisionGatewayTimeout {
	return &PutAuthorizationDivisionGatewayTimeout{}
}

/*PutAuthorizationDivisionGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutAuthorizationDivisionGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationDivisionGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/divisions/{divisionId}][%d] putAuthorizationDivisionGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutAuthorizationDivisionGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationDivisionGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

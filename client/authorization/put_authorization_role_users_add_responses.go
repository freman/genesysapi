// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutAuthorizationRoleUsersAddReader is a Reader for the PutAuthorizationRoleUsersAdd structure.
type PutAuthorizationRoleUsersAddReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutAuthorizationRoleUsersAddReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutAuthorizationRoleUsersAddOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutAuthorizationRoleUsersAddBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutAuthorizationRoleUsersAddUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutAuthorizationRoleUsersAddForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutAuthorizationRoleUsersAddNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutAuthorizationRoleUsersAddRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutAuthorizationRoleUsersAddRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutAuthorizationRoleUsersAddUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutAuthorizationRoleUsersAddTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutAuthorizationRoleUsersAddInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutAuthorizationRoleUsersAddServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutAuthorizationRoleUsersAddGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutAuthorizationRoleUsersAddOK creates a PutAuthorizationRoleUsersAddOK with default headers values
func NewPutAuthorizationRoleUsersAddOK() *PutAuthorizationRoleUsersAddOK {
	return &PutAuthorizationRoleUsersAddOK{}
}

/*PutAuthorizationRoleUsersAddOK handles this case with default header values.

successful operation
*/
type PutAuthorizationRoleUsersAddOK struct {
	Payload []string
}

func (o *PutAuthorizationRoleUsersAddOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/add][%d] putAuthorizationRoleUsersAddOK  %+v", 200, o.Payload)
}

func (o *PutAuthorizationRoleUsersAddOK) GetPayload() []string {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersAddOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersAddBadRequest creates a PutAuthorizationRoleUsersAddBadRequest with default headers values
func NewPutAuthorizationRoleUsersAddBadRequest() *PutAuthorizationRoleUsersAddBadRequest {
	return &PutAuthorizationRoleUsersAddBadRequest{}
}

/*PutAuthorizationRoleUsersAddBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutAuthorizationRoleUsersAddBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersAddBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/add][%d] putAuthorizationRoleUsersAddBadRequest  %+v", 400, o.Payload)
}

func (o *PutAuthorizationRoleUsersAddBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersAddBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersAddUnauthorized creates a PutAuthorizationRoleUsersAddUnauthorized with default headers values
func NewPutAuthorizationRoleUsersAddUnauthorized() *PutAuthorizationRoleUsersAddUnauthorized {
	return &PutAuthorizationRoleUsersAddUnauthorized{}
}

/*PutAuthorizationRoleUsersAddUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutAuthorizationRoleUsersAddUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersAddUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/add][%d] putAuthorizationRoleUsersAddUnauthorized  %+v", 401, o.Payload)
}

func (o *PutAuthorizationRoleUsersAddUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersAddUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersAddForbidden creates a PutAuthorizationRoleUsersAddForbidden with default headers values
func NewPutAuthorizationRoleUsersAddForbidden() *PutAuthorizationRoleUsersAddForbidden {
	return &PutAuthorizationRoleUsersAddForbidden{}
}

/*PutAuthorizationRoleUsersAddForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutAuthorizationRoleUsersAddForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersAddForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/add][%d] putAuthorizationRoleUsersAddForbidden  %+v", 403, o.Payload)
}

func (o *PutAuthorizationRoleUsersAddForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersAddForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersAddNotFound creates a PutAuthorizationRoleUsersAddNotFound with default headers values
func NewPutAuthorizationRoleUsersAddNotFound() *PutAuthorizationRoleUsersAddNotFound {
	return &PutAuthorizationRoleUsersAddNotFound{}
}

/*PutAuthorizationRoleUsersAddNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutAuthorizationRoleUsersAddNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersAddNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/add][%d] putAuthorizationRoleUsersAddNotFound  %+v", 404, o.Payload)
}

func (o *PutAuthorizationRoleUsersAddNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersAddNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersAddRequestTimeout creates a PutAuthorizationRoleUsersAddRequestTimeout with default headers values
func NewPutAuthorizationRoleUsersAddRequestTimeout() *PutAuthorizationRoleUsersAddRequestTimeout {
	return &PutAuthorizationRoleUsersAddRequestTimeout{}
}

/*PutAuthorizationRoleUsersAddRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutAuthorizationRoleUsersAddRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersAddRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/add][%d] putAuthorizationRoleUsersAddRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutAuthorizationRoleUsersAddRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersAddRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersAddRequestEntityTooLarge creates a PutAuthorizationRoleUsersAddRequestEntityTooLarge with default headers values
func NewPutAuthorizationRoleUsersAddRequestEntityTooLarge() *PutAuthorizationRoleUsersAddRequestEntityTooLarge {
	return &PutAuthorizationRoleUsersAddRequestEntityTooLarge{}
}

/*PutAuthorizationRoleUsersAddRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutAuthorizationRoleUsersAddRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersAddRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/add][%d] putAuthorizationRoleUsersAddRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutAuthorizationRoleUsersAddRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersAddRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersAddUnsupportedMediaType creates a PutAuthorizationRoleUsersAddUnsupportedMediaType with default headers values
func NewPutAuthorizationRoleUsersAddUnsupportedMediaType() *PutAuthorizationRoleUsersAddUnsupportedMediaType {
	return &PutAuthorizationRoleUsersAddUnsupportedMediaType{}
}

/*PutAuthorizationRoleUsersAddUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutAuthorizationRoleUsersAddUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersAddUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/add][%d] putAuthorizationRoleUsersAddUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutAuthorizationRoleUsersAddUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersAddUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersAddTooManyRequests creates a PutAuthorizationRoleUsersAddTooManyRequests with default headers values
func NewPutAuthorizationRoleUsersAddTooManyRequests() *PutAuthorizationRoleUsersAddTooManyRequests {
	return &PutAuthorizationRoleUsersAddTooManyRequests{}
}

/*PutAuthorizationRoleUsersAddTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutAuthorizationRoleUsersAddTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersAddTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/add][%d] putAuthorizationRoleUsersAddTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutAuthorizationRoleUsersAddTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersAddTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersAddInternalServerError creates a PutAuthorizationRoleUsersAddInternalServerError with default headers values
func NewPutAuthorizationRoleUsersAddInternalServerError() *PutAuthorizationRoleUsersAddInternalServerError {
	return &PutAuthorizationRoleUsersAddInternalServerError{}
}

/*PutAuthorizationRoleUsersAddInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutAuthorizationRoleUsersAddInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersAddInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/add][%d] putAuthorizationRoleUsersAddInternalServerError  %+v", 500, o.Payload)
}

func (o *PutAuthorizationRoleUsersAddInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersAddInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersAddServiceUnavailable creates a PutAuthorizationRoleUsersAddServiceUnavailable with default headers values
func NewPutAuthorizationRoleUsersAddServiceUnavailable() *PutAuthorizationRoleUsersAddServiceUnavailable {
	return &PutAuthorizationRoleUsersAddServiceUnavailable{}
}

/*PutAuthorizationRoleUsersAddServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutAuthorizationRoleUsersAddServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersAddServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/add][%d] putAuthorizationRoleUsersAddServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutAuthorizationRoleUsersAddServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersAddServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersAddGatewayTimeout creates a PutAuthorizationRoleUsersAddGatewayTimeout with default headers values
func NewPutAuthorizationRoleUsersAddGatewayTimeout() *PutAuthorizationRoleUsersAddGatewayTimeout {
	return &PutAuthorizationRoleUsersAddGatewayTimeout{}
}

/*PutAuthorizationRoleUsersAddGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutAuthorizationRoleUsersAddGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersAddGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/add][%d] putAuthorizationRoleUsersAddGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutAuthorizationRoleUsersAddGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersAddGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

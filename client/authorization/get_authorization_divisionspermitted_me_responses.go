// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetAuthorizationDivisionspermittedMeReader is a Reader for the GetAuthorizationDivisionspermittedMe structure.
type GetAuthorizationDivisionspermittedMeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuthorizationDivisionspermittedMeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuthorizationDivisionspermittedMeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuthorizationDivisionspermittedMeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAuthorizationDivisionspermittedMeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAuthorizationDivisionspermittedMeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuthorizationDivisionspermittedMeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetAuthorizationDivisionspermittedMeRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAuthorizationDivisionspermittedMeRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAuthorizationDivisionspermittedMeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAuthorizationDivisionspermittedMeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuthorizationDivisionspermittedMeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAuthorizationDivisionspermittedMeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetAuthorizationDivisionspermittedMeGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAuthorizationDivisionspermittedMeOK creates a GetAuthorizationDivisionspermittedMeOK with default headers values
func NewGetAuthorizationDivisionspermittedMeOK() *GetAuthorizationDivisionspermittedMeOK {
	return &GetAuthorizationDivisionspermittedMeOK{}
}

/*
GetAuthorizationDivisionspermittedMeOK describes a response with status code 200, with default header values.

successful operation
*/
type GetAuthorizationDivisionspermittedMeOK struct {
	Payload []*models.AuthzDivision
}

// IsSuccess returns true when this get authorization divisionspermitted me o k response has a 2xx status code
func (o *GetAuthorizationDivisionspermittedMeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get authorization divisionspermitted me o k response has a 3xx status code
func (o *GetAuthorizationDivisionspermittedMeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization divisionspermitted me o k response has a 4xx status code
func (o *GetAuthorizationDivisionspermittedMeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization divisionspermitted me o k response has a 5xx status code
func (o *GetAuthorizationDivisionspermittedMeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization divisionspermitted me o k response a status code equal to that given
func (o *GetAuthorizationDivisionspermittedMeOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAuthorizationDivisionspermittedMeOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeOK  %+v", 200, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeOK) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeOK  %+v", 200, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeOK) GetPayload() []*models.AuthzDivision {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedMeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedMeBadRequest creates a GetAuthorizationDivisionspermittedMeBadRequest with default headers values
func NewGetAuthorizationDivisionspermittedMeBadRequest() *GetAuthorizationDivisionspermittedMeBadRequest {
	return &GetAuthorizationDivisionspermittedMeBadRequest{}
}

/*
GetAuthorizationDivisionspermittedMeBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetAuthorizationDivisionspermittedMeBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization divisionspermitted me bad request response has a 2xx status code
func (o *GetAuthorizationDivisionspermittedMeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization divisionspermitted me bad request response has a 3xx status code
func (o *GetAuthorizationDivisionspermittedMeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization divisionspermitted me bad request response has a 4xx status code
func (o *GetAuthorizationDivisionspermittedMeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization divisionspermitted me bad request response has a 5xx status code
func (o *GetAuthorizationDivisionspermittedMeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization divisionspermitted me bad request response a status code equal to that given
func (o *GetAuthorizationDivisionspermittedMeBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAuthorizationDivisionspermittedMeBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedMeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedMeUnauthorized creates a GetAuthorizationDivisionspermittedMeUnauthorized with default headers values
func NewGetAuthorizationDivisionspermittedMeUnauthorized() *GetAuthorizationDivisionspermittedMeUnauthorized {
	return &GetAuthorizationDivisionspermittedMeUnauthorized{}
}

/*
GetAuthorizationDivisionspermittedMeUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetAuthorizationDivisionspermittedMeUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization divisionspermitted me unauthorized response has a 2xx status code
func (o *GetAuthorizationDivisionspermittedMeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization divisionspermitted me unauthorized response has a 3xx status code
func (o *GetAuthorizationDivisionspermittedMeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization divisionspermitted me unauthorized response has a 4xx status code
func (o *GetAuthorizationDivisionspermittedMeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization divisionspermitted me unauthorized response has a 5xx status code
func (o *GetAuthorizationDivisionspermittedMeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization divisionspermitted me unauthorized response a status code equal to that given
func (o *GetAuthorizationDivisionspermittedMeUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAuthorizationDivisionspermittedMeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedMeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedMeForbidden creates a GetAuthorizationDivisionspermittedMeForbidden with default headers values
func NewGetAuthorizationDivisionspermittedMeForbidden() *GetAuthorizationDivisionspermittedMeForbidden {
	return &GetAuthorizationDivisionspermittedMeForbidden{}
}

/*
GetAuthorizationDivisionspermittedMeForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetAuthorizationDivisionspermittedMeForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization divisionspermitted me forbidden response has a 2xx status code
func (o *GetAuthorizationDivisionspermittedMeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization divisionspermitted me forbidden response has a 3xx status code
func (o *GetAuthorizationDivisionspermittedMeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization divisionspermitted me forbidden response has a 4xx status code
func (o *GetAuthorizationDivisionspermittedMeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization divisionspermitted me forbidden response has a 5xx status code
func (o *GetAuthorizationDivisionspermittedMeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization divisionspermitted me forbidden response a status code equal to that given
func (o *GetAuthorizationDivisionspermittedMeForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAuthorizationDivisionspermittedMeForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedMeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedMeNotFound creates a GetAuthorizationDivisionspermittedMeNotFound with default headers values
func NewGetAuthorizationDivisionspermittedMeNotFound() *GetAuthorizationDivisionspermittedMeNotFound {
	return &GetAuthorizationDivisionspermittedMeNotFound{}
}

/*
GetAuthorizationDivisionspermittedMeNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetAuthorizationDivisionspermittedMeNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization divisionspermitted me not found response has a 2xx status code
func (o *GetAuthorizationDivisionspermittedMeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization divisionspermitted me not found response has a 3xx status code
func (o *GetAuthorizationDivisionspermittedMeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization divisionspermitted me not found response has a 4xx status code
func (o *GetAuthorizationDivisionspermittedMeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization divisionspermitted me not found response has a 5xx status code
func (o *GetAuthorizationDivisionspermittedMeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization divisionspermitted me not found response a status code equal to that given
func (o *GetAuthorizationDivisionspermittedMeNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAuthorizationDivisionspermittedMeNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedMeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedMeRequestTimeout creates a GetAuthorizationDivisionspermittedMeRequestTimeout with default headers values
func NewGetAuthorizationDivisionspermittedMeRequestTimeout() *GetAuthorizationDivisionspermittedMeRequestTimeout {
	return &GetAuthorizationDivisionspermittedMeRequestTimeout{}
}

/*
GetAuthorizationDivisionspermittedMeRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetAuthorizationDivisionspermittedMeRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization divisionspermitted me request timeout response has a 2xx status code
func (o *GetAuthorizationDivisionspermittedMeRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization divisionspermitted me request timeout response has a 3xx status code
func (o *GetAuthorizationDivisionspermittedMeRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization divisionspermitted me request timeout response has a 4xx status code
func (o *GetAuthorizationDivisionspermittedMeRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization divisionspermitted me request timeout response has a 5xx status code
func (o *GetAuthorizationDivisionspermittedMeRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization divisionspermitted me request timeout response a status code equal to that given
func (o *GetAuthorizationDivisionspermittedMeRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetAuthorizationDivisionspermittedMeRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedMeRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedMeRequestEntityTooLarge creates a GetAuthorizationDivisionspermittedMeRequestEntityTooLarge with default headers values
func NewGetAuthorizationDivisionspermittedMeRequestEntityTooLarge() *GetAuthorizationDivisionspermittedMeRequestEntityTooLarge {
	return &GetAuthorizationDivisionspermittedMeRequestEntityTooLarge{}
}

/*
GetAuthorizationDivisionspermittedMeRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetAuthorizationDivisionspermittedMeRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization divisionspermitted me request entity too large response has a 2xx status code
func (o *GetAuthorizationDivisionspermittedMeRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization divisionspermitted me request entity too large response has a 3xx status code
func (o *GetAuthorizationDivisionspermittedMeRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization divisionspermitted me request entity too large response has a 4xx status code
func (o *GetAuthorizationDivisionspermittedMeRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization divisionspermitted me request entity too large response has a 5xx status code
func (o *GetAuthorizationDivisionspermittedMeRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization divisionspermitted me request entity too large response a status code equal to that given
func (o *GetAuthorizationDivisionspermittedMeRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetAuthorizationDivisionspermittedMeRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedMeRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedMeUnsupportedMediaType creates a GetAuthorizationDivisionspermittedMeUnsupportedMediaType with default headers values
func NewGetAuthorizationDivisionspermittedMeUnsupportedMediaType() *GetAuthorizationDivisionspermittedMeUnsupportedMediaType {
	return &GetAuthorizationDivisionspermittedMeUnsupportedMediaType{}
}

/*
GetAuthorizationDivisionspermittedMeUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetAuthorizationDivisionspermittedMeUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization divisionspermitted me unsupported media type response has a 2xx status code
func (o *GetAuthorizationDivisionspermittedMeUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization divisionspermitted me unsupported media type response has a 3xx status code
func (o *GetAuthorizationDivisionspermittedMeUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization divisionspermitted me unsupported media type response has a 4xx status code
func (o *GetAuthorizationDivisionspermittedMeUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization divisionspermitted me unsupported media type response has a 5xx status code
func (o *GetAuthorizationDivisionspermittedMeUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization divisionspermitted me unsupported media type response a status code equal to that given
func (o *GetAuthorizationDivisionspermittedMeUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetAuthorizationDivisionspermittedMeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedMeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedMeTooManyRequests creates a GetAuthorizationDivisionspermittedMeTooManyRequests with default headers values
func NewGetAuthorizationDivisionspermittedMeTooManyRequests() *GetAuthorizationDivisionspermittedMeTooManyRequests {
	return &GetAuthorizationDivisionspermittedMeTooManyRequests{}
}

/*
GetAuthorizationDivisionspermittedMeTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetAuthorizationDivisionspermittedMeTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization divisionspermitted me too many requests response has a 2xx status code
func (o *GetAuthorizationDivisionspermittedMeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization divisionspermitted me too many requests response has a 3xx status code
func (o *GetAuthorizationDivisionspermittedMeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization divisionspermitted me too many requests response has a 4xx status code
func (o *GetAuthorizationDivisionspermittedMeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authorization divisionspermitted me too many requests response has a 5xx status code
func (o *GetAuthorizationDivisionspermittedMeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get authorization divisionspermitted me too many requests response a status code equal to that given
func (o *GetAuthorizationDivisionspermittedMeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAuthorizationDivisionspermittedMeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedMeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedMeInternalServerError creates a GetAuthorizationDivisionspermittedMeInternalServerError with default headers values
func NewGetAuthorizationDivisionspermittedMeInternalServerError() *GetAuthorizationDivisionspermittedMeInternalServerError {
	return &GetAuthorizationDivisionspermittedMeInternalServerError{}
}

/*
GetAuthorizationDivisionspermittedMeInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetAuthorizationDivisionspermittedMeInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization divisionspermitted me internal server error response has a 2xx status code
func (o *GetAuthorizationDivisionspermittedMeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization divisionspermitted me internal server error response has a 3xx status code
func (o *GetAuthorizationDivisionspermittedMeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization divisionspermitted me internal server error response has a 4xx status code
func (o *GetAuthorizationDivisionspermittedMeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization divisionspermitted me internal server error response has a 5xx status code
func (o *GetAuthorizationDivisionspermittedMeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get authorization divisionspermitted me internal server error response a status code equal to that given
func (o *GetAuthorizationDivisionspermittedMeInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAuthorizationDivisionspermittedMeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedMeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedMeServiceUnavailable creates a GetAuthorizationDivisionspermittedMeServiceUnavailable with default headers values
func NewGetAuthorizationDivisionspermittedMeServiceUnavailable() *GetAuthorizationDivisionspermittedMeServiceUnavailable {
	return &GetAuthorizationDivisionspermittedMeServiceUnavailable{}
}

/*
GetAuthorizationDivisionspermittedMeServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetAuthorizationDivisionspermittedMeServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization divisionspermitted me service unavailable response has a 2xx status code
func (o *GetAuthorizationDivisionspermittedMeServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization divisionspermitted me service unavailable response has a 3xx status code
func (o *GetAuthorizationDivisionspermittedMeServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization divisionspermitted me service unavailable response has a 4xx status code
func (o *GetAuthorizationDivisionspermittedMeServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization divisionspermitted me service unavailable response has a 5xx status code
func (o *GetAuthorizationDivisionspermittedMeServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get authorization divisionspermitted me service unavailable response a status code equal to that given
func (o *GetAuthorizationDivisionspermittedMeServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAuthorizationDivisionspermittedMeServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedMeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorizationDivisionspermittedMeGatewayTimeout creates a GetAuthorizationDivisionspermittedMeGatewayTimeout with default headers values
func NewGetAuthorizationDivisionspermittedMeGatewayTimeout() *GetAuthorizationDivisionspermittedMeGatewayTimeout {
	return &GetAuthorizationDivisionspermittedMeGatewayTimeout{}
}

/*
GetAuthorizationDivisionspermittedMeGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetAuthorizationDivisionspermittedMeGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get authorization divisionspermitted me gateway timeout response has a 2xx status code
func (o *GetAuthorizationDivisionspermittedMeGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authorization divisionspermitted me gateway timeout response has a 3xx status code
func (o *GetAuthorizationDivisionspermittedMeGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authorization divisionspermitted me gateway timeout response has a 4xx status code
func (o *GetAuthorizationDivisionspermittedMeGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authorization divisionspermitted me gateway timeout response has a 5xx status code
func (o *GetAuthorizationDivisionspermittedMeGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get authorization divisionspermitted me gateway timeout response a status code equal to that given
func (o *GetAuthorizationDivisionspermittedMeGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetAuthorizationDivisionspermittedMeGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/authorization/divisionspermitted/me][%d] getAuthorizationDivisionspermittedMeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetAuthorizationDivisionspermittedMeGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAuthorizationDivisionspermittedMeGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutAuthorizationRoleUsersRemoveReader is a Reader for the PutAuthorizationRoleUsersRemove structure.
type PutAuthorizationRoleUsersRemoveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutAuthorizationRoleUsersRemoveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutAuthorizationRoleUsersRemoveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutAuthorizationRoleUsersRemoveBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutAuthorizationRoleUsersRemoveUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutAuthorizationRoleUsersRemoveForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutAuthorizationRoleUsersRemoveNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutAuthorizationRoleUsersRemoveRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutAuthorizationRoleUsersRemoveUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutAuthorizationRoleUsersRemoveTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutAuthorizationRoleUsersRemoveInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutAuthorizationRoleUsersRemoveServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutAuthorizationRoleUsersRemoveGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutAuthorizationRoleUsersRemoveOK creates a PutAuthorizationRoleUsersRemoveOK with default headers values
func NewPutAuthorizationRoleUsersRemoveOK() *PutAuthorizationRoleUsersRemoveOK {
	return &PutAuthorizationRoleUsersRemoveOK{}
}

/*PutAuthorizationRoleUsersRemoveOK handles this case with default header values.

successful operation
*/
type PutAuthorizationRoleUsersRemoveOK struct {
	Payload []string
}

func (o *PutAuthorizationRoleUsersRemoveOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/remove][%d] putAuthorizationRoleUsersRemoveOK  %+v", 200, o.Payload)
}

func (o *PutAuthorizationRoleUsersRemoveOK) GetPayload() []string {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersRemoveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersRemoveBadRequest creates a PutAuthorizationRoleUsersRemoveBadRequest with default headers values
func NewPutAuthorizationRoleUsersRemoveBadRequest() *PutAuthorizationRoleUsersRemoveBadRequest {
	return &PutAuthorizationRoleUsersRemoveBadRequest{}
}

/*PutAuthorizationRoleUsersRemoveBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutAuthorizationRoleUsersRemoveBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersRemoveBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/remove][%d] putAuthorizationRoleUsersRemoveBadRequest  %+v", 400, o.Payload)
}

func (o *PutAuthorizationRoleUsersRemoveBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersRemoveBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersRemoveUnauthorized creates a PutAuthorizationRoleUsersRemoveUnauthorized with default headers values
func NewPutAuthorizationRoleUsersRemoveUnauthorized() *PutAuthorizationRoleUsersRemoveUnauthorized {
	return &PutAuthorizationRoleUsersRemoveUnauthorized{}
}

/*PutAuthorizationRoleUsersRemoveUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutAuthorizationRoleUsersRemoveUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersRemoveUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/remove][%d] putAuthorizationRoleUsersRemoveUnauthorized  %+v", 401, o.Payload)
}

func (o *PutAuthorizationRoleUsersRemoveUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersRemoveUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersRemoveForbidden creates a PutAuthorizationRoleUsersRemoveForbidden with default headers values
func NewPutAuthorizationRoleUsersRemoveForbidden() *PutAuthorizationRoleUsersRemoveForbidden {
	return &PutAuthorizationRoleUsersRemoveForbidden{}
}

/*PutAuthorizationRoleUsersRemoveForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutAuthorizationRoleUsersRemoveForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersRemoveForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/remove][%d] putAuthorizationRoleUsersRemoveForbidden  %+v", 403, o.Payload)
}

func (o *PutAuthorizationRoleUsersRemoveForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersRemoveForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersRemoveNotFound creates a PutAuthorizationRoleUsersRemoveNotFound with default headers values
func NewPutAuthorizationRoleUsersRemoveNotFound() *PutAuthorizationRoleUsersRemoveNotFound {
	return &PutAuthorizationRoleUsersRemoveNotFound{}
}

/*PutAuthorizationRoleUsersRemoveNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutAuthorizationRoleUsersRemoveNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersRemoveNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/remove][%d] putAuthorizationRoleUsersRemoveNotFound  %+v", 404, o.Payload)
}

func (o *PutAuthorizationRoleUsersRemoveNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersRemoveNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersRemoveRequestEntityTooLarge creates a PutAuthorizationRoleUsersRemoveRequestEntityTooLarge with default headers values
func NewPutAuthorizationRoleUsersRemoveRequestEntityTooLarge() *PutAuthorizationRoleUsersRemoveRequestEntityTooLarge {
	return &PutAuthorizationRoleUsersRemoveRequestEntityTooLarge{}
}

/*PutAuthorizationRoleUsersRemoveRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PutAuthorizationRoleUsersRemoveRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersRemoveRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/remove][%d] putAuthorizationRoleUsersRemoveRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutAuthorizationRoleUsersRemoveRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersRemoveRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersRemoveUnsupportedMediaType creates a PutAuthorizationRoleUsersRemoveUnsupportedMediaType with default headers values
func NewPutAuthorizationRoleUsersRemoveUnsupportedMediaType() *PutAuthorizationRoleUsersRemoveUnsupportedMediaType {
	return &PutAuthorizationRoleUsersRemoveUnsupportedMediaType{}
}

/*PutAuthorizationRoleUsersRemoveUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutAuthorizationRoleUsersRemoveUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersRemoveUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/remove][%d] putAuthorizationRoleUsersRemoveUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutAuthorizationRoleUsersRemoveUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersRemoveUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersRemoveTooManyRequests creates a PutAuthorizationRoleUsersRemoveTooManyRequests with default headers values
func NewPutAuthorizationRoleUsersRemoveTooManyRequests() *PutAuthorizationRoleUsersRemoveTooManyRequests {
	return &PutAuthorizationRoleUsersRemoveTooManyRequests{}
}

/*PutAuthorizationRoleUsersRemoveTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PutAuthorizationRoleUsersRemoveTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersRemoveTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/remove][%d] putAuthorizationRoleUsersRemoveTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutAuthorizationRoleUsersRemoveTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersRemoveTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersRemoveInternalServerError creates a PutAuthorizationRoleUsersRemoveInternalServerError with default headers values
func NewPutAuthorizationRoleUsersRemoveInternalServerError() *PutAuthorizationRoleUsersRemoveInternalServerError {
	return &PutAuthorizationRoleUsersRemoveInternalServerError{}
}

/*PutAuthorizationRoleUsersRemoveInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutAuthorizationRoleUsersRemoveInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersRemoveInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/remove][%d] putAuthorizationRoleUsersRemoveInternalServerError  %+v", 500, o.Payload)
}

func (o *PutAuthorizationRoleUsersRemoveInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersRemoveInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersRemoveServiceUnavailable creates a PutAuthorizationRoleUsersRemoveServiceUnavailable with default headers values
func NewPutAuthorizationRoleUsersRemoveServiceUnavailable() *PutAuthorizationRoleUsersRemoveServiceUnavailable {
	return &PutAuthorizationRoleUsersRemoveServiceUnavailable{}
}

/*PutAuthorizationRoleUsersRemoveServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutAuthorizationRoleUsersRemoveServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersRemoveServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/remove][%d] putAuthorizationRoleUsersRemoveServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutAuthorizationRoleUsersRemoveServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersRemoveServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAuthorizationRoleUsersRemoveGatewayTimeout creates a PutAuthorizationRoleUsersRemoveGatewayTimeout with default headers values
func NewPutAuthorizationRoleUsersRemoveGatewayTimeout() *PutAuthorizationRoleUsersRemoveGatewayTimeout {
	return &PutAuthorizationRoleUsersRemoveGatewayTimeout{}
}

/*PutAuthorizationRoleUsersRemoveGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutAuthorizationRoleUsersRemoveGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutAuthorizationRoleUsersRemoveGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/authorization/roles/{roleId}/users/remove][%d] putAuthorizationRoleUsersRemoveGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutAuthorizationRoleUsersRemoveGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutAuthorizationRoleUsersRemoveGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

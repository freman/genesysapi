// Code generated by go-swagger; DO NOT EDIT.

package user_development

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the user development client
type API interface {
	/*
	   GetUsersDevelopmentActivities gets list of development activities
	   Either moduleId or userId is required. Results are filtered based on the applicable permissions.
	*/
	GetUsersDevelopmentActivities(ctx context.Context, params *GetUsersDevelopmentActivitiesParams) (*GetUsersDevelopmentActivitiesOK, error)
	/*
	   GetUsersDevelopmentActivitiesMe gets list of development activities for current user
	   Results are filtered based on the applicable permissions.
	*/
	GetUsersDevelopmentActivitiesMe(ctx context.Context, params *GetUsersDevelopmentActivitiesMeParams) (*GetUsersDevelopmentActivitiesMeOK, error)
	/*
	   GetUsersDevelopmentActivity gets a development activity
	*/
	GetUsersDevelopmentActivity(ctx context.Context, params *GetUsersDevelopmentActivityParams) (*GetUsersDevelopmentActivityOK, error)
	/*
	   PostUsersDevelopmentActivitiesAggregatesQuery retrieves aggregated development activity data
	   Results are filtered based on the applicable permissions.
	*/
	PostUsersDevelopmentActivitiesAggregatesQuery(ctx context.Context, params *PostUsersDevelopmentActivitiesAggregatesQueryParams) (*PostUsersDevelopmentActivitiesAggregatesQueryOK, error)
}

// New creates a new user development API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for user development API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetUsersDevelopmentActivities gets list of development activities

Either moduleId or userId is required. Results are filtered based on the applicable permissions.
*/
func (a *Client) GetUsersDevelopmentActivities(ctx context.Context, params *GetUsersDevelopmentActivitiesParams) (*GetUsersDevelopmentActivitiesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersDevelopmentActivities",
		Method:             "GET",
		PathPattern:        "/api/v2/users/development/activities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersDevelopmentActivitiesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersDevelopmentActivitiesOK), nil

}

/*
GetUsersDevelopmentActivitiesMe gets list of development activities for current user

Results are filtered based on the applicable permissions.
*/
func (a *Client) GetUsersDevelopmentActivitiesMe(ctx context.Context, params *GetUsersDevelopmentActivitiesMeParams) (*GetUsersDevelopmentActivitiesMeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersDevelopmentActivitiesMe",
		Method:             "GET",
		PathPattern:        "/api/v2/users/development/activities/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersDevelopmentActivitiesMeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersDevelopmentActivitiesMeOK), nil

}

/*
GetUsersDevelopmentActivity gets a development activity
*/
func (a *Client) GetUsersDevelopmentActivity(ctx context.Context, params *GetUsersDevelopmentActivityParams) (*GetUsersDevelopmentActivityOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersDevelopmentActivity",
		Method:             "GET",
		PathPattern:        "/api/v2/users/development/activities/{activityId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersDevelopmentActivityReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersDevelopmentActivityOK), nil

}

/*
PostUsersDevelopmentActivitiesAggregatesQuery retrieves aggregated development activity data

Results are filtered based on the applicable permissions.
*/
func (a *Client) PostUsersDevelopmentActivitiesAggregatesQuery(ctx context.Context, params *PostUsersDevelopmentActivitiesAggregatesQueryParams) (*PostUsersDevelopmentActivitiesAggregatesQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUsersDevelopmentActivitiesAggregatesQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/users/development/activities/aggregates/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersDevelopmentActivitiesAggregatesQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersDevelopmentActivitiesAggregatesQueryOK), nil

}

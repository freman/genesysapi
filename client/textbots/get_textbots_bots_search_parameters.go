// Code generated by go-swagger; DO NOT EDIT.

package textbots

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTextbotsBotsSearchParams creates a new GetTextbotsBotsSearchParams object
// with the default values initialized.
func NewGetTextbotsBotsSearchParams() *GetTextbotsBotsSearchParams {
	var (
		pageSizeDefault = int32(25)
	)
	return &GetTextbotsBotsSearchParams{
		PageSize: &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTextbotsBotsSearchParamsWithTimeout creates a new GetTextbotsBotsSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTextbotsBotsSearchParamsWithTimeout(timeout time.Duration) *GetTextbotsBotsSearchParams {
	var (
		pageSizeDefault = int32(25)
	)
	return &GetTextbotsBotsSearchParams{
		PageSize: &pageSizeDefault,

		timeout: timeout,
	}
}

// NewGetTextbotsBotsSearchParamsWithContext creates a new GetTextbotsBotsSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTextbotsBotsSearchParamsWithContext(ctx context.Context) *GetTextbotsBotsSearchParams {
	var (
		pageSizeDefault = int32(25)
	)
	return &GetTextbotsBotsSearchParams{
		PageSize: &pageSizeDefault,

		Context: ctx,
	}
}

// NewGetTextbotsBotsSearchParamsWithHTTPClient creates a new GetTextbotsBotsSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTextbotsBotsSearchParamsWithHTTPClient(client *http.Client) *GetTextbotsBotsSearchParams {
	var (
		pageSizeDefault = int32(25)
	)
	return &GetTextbotsBotsSearchParams{
		PageSize:   &pageSizeDefault,
		HTTPClient: client,
	}
}

/*GetTextbotsBotsSearchParams contains all the parameters to send to the API endpoint
for the get textbots bots search operation typically these are written to a http.Request
*/
type GetTextbotsBotsSearchParams struct {

	/*BotID
	  Bot IDs

	*/
	BotID []string
	/*BotName
	  Bot name

	*/
	BotName *string
	/*BotType
	  Bot types

	*/
	BotType []string
	/*PageSize
	  The maximum results to return

	*/
	PageSize *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get textbots bots search params
func (o *GetTextbotsBotsSearchParams) WithTimeout(timeout time.Duration) *GetTextbotsBotsSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get textbots bots search params
func (o *GetTextbotsBotsSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get textbots bots search params
func (o *GetTextbotsBotsSearchParams) WithContext(ctx context.Context) *GetTextbotsBotsSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get textbots bots search params
func (o *GetTextbotsBotsSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get textbots bots search params
func (o *GetTextbotsBotsSearchParams) WithHTTPClient(client *http.Client) *GetTextbotsBotsSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get textbots bots search params
func (o *GetTextbotsBotsSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBotID adds the botID to the get textbots bots search params
func (o *GetTextbotsBotsSearchParams) WithBotID(botID []string) *GetTextbotsBotsSearchParams {
	o.SetBotID(botID)
	return o
}

// SetBotID adds the botId to the get textbots bots search params
func (o *GetTextbotsBotsSearchParams) SetBotID(botID []string) {
	o.BotID = botID
}

// WithBotName adds the botName to the get textbots bots search params
func (o *GetTextbotsBotsSearchParams) WithBotName(botName *string) *GetTextbotsBotsSearchParams {
	o.SetBotName(botName)
	return o
}

// SetBotName adds the botName to the get textbots bots search params
func (o *GetTextbotsBotsSearchParams) SetBotName(botName *string) {
	o.BotName = botName
}

// WithBotType adds the botType to the get textbots bots search params
func (o *GetTextbotsBotsSearchParams) WithBotType(botType []string) *GetTextbotsBotsSearchParams {
	o.SetBotType(botType)
	return o
}

// SetBotType adds the botType to the get textbots bots search params
func (o *GetTextbotsBotsSearchParams) SetBotType(botType []string) {
	o.BotType = botType
}

// WithPageSize adds the pageSize to the get textbots bots search params
func (o *GetTextbotsBotsSearchParams) WithPageSize(pageSize *int32) *GetTextbotsBotsSearchParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get textbots bots search params
func (o *GetTextbotsBotsSearchParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *GetTextbotsBotsSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesBotID := o.BotID

	joinedBotID := swag.JoinByFormat(valuesBotID, "multi")
	// query array param botId
	if err := r.SetQueryParam("botId", joinedBotID...); err != nil {
		return err
	}

	if o.BotName != nil {

		// query param botName
		var qrBotName string
		if o.BotName != nil {
			qrBotName = *o.BotName
		}
		qBotName := qrBotName
		if qBotName != "" {
			if err := r.SetQueryParam("botName", qBotName); err != nil {
				return err
			}
		}

	}

	valuesBotType := o.BotType

	joinedBotType := swag.JoinByFormat(valuesBotType, "multi")
	// query array param botType
	if err := r.SetQueryParam("botType", joinedBotType...); err != nil {
		return err
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

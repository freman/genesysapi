// Code generated by go-swagger; DO NOT EDIT.

package organization_authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteOrgauthorizationTrustorCloneduserParams creates a new DeleteOrgauthorizationTrustorCloneduserParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteOrgauthorizationTrustorCloneduserParams() *DeleteOrgauthorizationTrustorCloneduserParams {
	return &DeleteOrgauthorizationTrustorCloneduserParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteOrgauthorizationTrustorCloneduserParamsWithTimeout creates a new DeleteOrgauthorizationTrustorCloneduserParams object
// with the ability to set a timeout on a request.
func NewDeleteOrgauthorizationTrustorCloneduserParamsWithTimeout(timeout time.Duration) *DeleteOrgauthorizationTrustorCloneduserParams {
	return &DeleteOrgauthorizationTrustorCloneduserParams{
		timeout: timeout,
	}
}

// NewDeleteOrgauthorizationTrustorCloneduserParamsWithContext creates a new DeleteOrgauthorizationTrustorCloneduserParams object
// with the ability to set a context for a request.
func NewDeleteOrgauthorizationTrustorCloneduserParamsWithContext(ctx context.Context) *DeleteOrgauthorizationTrustorCloneduserParams {
	return &DeleteOrgauthorizationTrustorCloneduserParams{
		Context: ctx,
	}
}

// NewDeleteOrgauthorizationTrustorCloneduserParamsWithHTTPClient creates a new DeleteOrgauthorizationTrustorCloneduserParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteOrgauthorizationTrustorCloneduserParamsWithHTTPClient(client *http.Client) *DeleteOrgauthorizationTrustorCloneduserParams {
	return &DeleteOrgauthorizationTrustorCloneduserParams{
		HTTPClient: client,
	}
}

/*
DeleteOrgauthorizationTrustorCloneduserParams contains all the parameters to send to the API endpoint

	for the delete orgauthorization trustor cloneduser operation.

	Typically these are written to a http.Request.
*/
type DeleteOrgauthorizationTrustorCloneduserParams struct {

	/* TrusteeUserID.

	   Trustee User Id
	*/
	TrusteeUserID string

	/* TrustorOrgID.

	   Trustor Organization Id
	*/
	TrustorOrgID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete orgauthorization trustor cloneduser params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteOrgauthorizationTrustorCloneduserParams) WithDefaults() *DeleteOrgauthorizationTrustorCloneduserParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete orgauthorization trustor cloneduser params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteOrgauthorizationTrustorCloneduserParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete orgauthorization trustor cloneduser params
func (o *DeleteOrgauthorizationTrustorCloneduserParams) WithTimeout(timeout time.Duration) *DeleteOrgauthorizationTrustorCloneduserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete orgauthorization trustor cloneduser params
func (o *DeleteOrgauthorizationTrustorCloneduserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete orgauthorization trustor cloneduser params
func (o *DeleteOrgauthorizationTrustorCloneduserParams) WithContext(ctx context.Context) *DeleteOrgauthorizationTrustorCloneduserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete orgauthorization trustor cloneduser params
func (o *DeleteOrgauthorizationTrustorCloneduserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete orgauthorization trustor cloneduser params
func (o *DeleteOrgauthorizationTrustorCloneduserParams) WithHTTPClient(client *http.Client) *DeleteOrgauthorizationTrustorCloneduserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete orgauthorization trustor cloneduser params
func (o *DeleteOrgauthorizationTrustorCloneduserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTrusteeUserID adds the trusteeUserID to the delete orgauthorization trustor cloneduser params
func (o *DeleteOrgauthorizationTrustorCloneduserParams) WithTrusteeUserID(trusteeUserID string) *DeleteOrgauthorizationTrustorCloneduserParams {
	o.SetTrusteeUserID(trusteeUserID)
	return o
}

// SetTrusteeUserID adds the trusteeUserId to the delete orgauthorization trustor cloneduser params
func (o *DeleteOrgauthorizationTrustorCloneduserParams) SetTrusteeUserID(trusteeUserID string) {
	o.TrusteeUserID = trusteeUserID
}

// WithTrustorOrgID adds the trustorOrgID to the delete orgauthorization trustor cloneduser params
func (o *DeleteOrgauthorizationTrustorCloneduserParams) WithTrustorOrgID(trustorOrgID string) *DeleteOrgauthorizationTrustorCloneduserParams {
	o.SetTrustorOrgID(trustorOrgID)
	return o
}

// SetTrustorOrgID adds the trustorOrgId to the delete orgauthorization trustor cloneduser params
func (o *DeleteOrgauthorizationTrustorCloneduserParams) SetTrustorOrgID(trustorOrgID string) {
	o.TrustorOrgID = trustorOrgID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteOrgauthorizationTrustorCloneduserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param trusteeUserId
	if err := r.SetPathParam("trusteeUserId", o.TrusteeUserID); err != nil {
		return err
	}

	// path param trustorOrgId
	if err := r.SetPathParam("trustorOrgId", o.TrustorOrgID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

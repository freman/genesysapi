// Code generated by go-swagger; DO NOT EDIT.

package organization_authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the organization authorization client
type API interface {
	/*
	   DeleteOrgauthorizationTrustee deletes org trust
	*/
	DeleteOrgauthorizationTrustee(ctx context.Context, params *DeleteOrgauthorizationTrusteeParams) (*DeleteOrgauthorizationTrusteeNoContent, error)
	/*
	   DeleteOrgauthorizationTrusteeUser deletes trustee user
	*/
	DeleteOrgauthorizationTrusteeUser(ctx context.Context, params *DeleteOrgauthorizationTrusteeUserParams) (*DeleteOrgauthorizationTrusteeUserNoContent, error)
	/*
	   DeleteOrgauthorizationTrusteeUserRoles deletes trustee user roles
	*/
	DeleteOrgauthorizationTrusteeUserRoles(ctx context.Context, params *DeleteOrgauthorizationTrusteeUserRolesParams) (*DeleteOrgauthorizationTrusteeUserRolesNoContent, error)
	/*
	   DeleteOrgauthorizationTrustor deletes org trust
	*/
	DeleteOrgauthorizationTrustor(ctx context.Context, params *DeleteOrgauthorizationTrustorParams) (*DeleteOrgauthorizationTrustorNoContent, error)
	/*
	   DeleteOrgauthorizationTrustorUser deletes trustee user
	*/
	DeleteOrgauthorizationTrustorUser(ctx context.Context, params *DeleteOrgauthorizationTrustorUserParams) (*DeleteOrgauthorizationTrustorUserNoContent, error)
	/*
	   GetOrgauthorizationPairing gets pairing info
	*/
	GetOrgauthorizationPairing(ctx context.Context, params *GetOrgauthorizationPairingParams) (*GetOrgauthorizationPairingOK, error)
	/*
	   GetOrgauthorizationTrustee gets org trust
	*/
	GetOrgauthorizationTrustee(ctx context.Context, params *GetOrgauthorizationTrusteeParams) (*GetOrgauthorizationTrusteeOK, error)
	/*
	   GetOrgauthorizationTrusteeUser gets trustee user
	*/
	GetOrgauthorizationTrusteeUser(ctx context.Context, params *GetOrgauthorizationTrusteeUserParams) (*GetOrgauthorizationTrusteeUserOK, error)
	/*
	   GetOrgauthorizationTrusteeUserRoles gets trustee user roles
	*/
	GetOrgauthorizationTrusteeUserRoles(ctx context.Context, params *GetOrgauthorizationTrusteeUserRolesParams) (*GetOrgauthorizationTrusteeUserRolesOK, error)
	/*
	   GetOrgauthorizationTrusteeUsers thes list of trustee users for this organization i e users granted access to this organization
	*/
	GetOrgauthorizationTrusteeUsers(ctx context.Context, params *GetOrgauthorizationTrusteeUsersParams) (*GetOrgauthorizationTrusteeUsersOK, error)
	/*
	   GetOrgauthorizationTrustees thes list of trustees for this organization i e organizations granted access to this organization
	*/
	GetOrgauthorizationTrustees(ctx context.Context, params *GetOrgauthorizationTrusteesParams) (*GetOrgauthorizationTrusteesOK, error)
	/*
	   GetOrgauthorizationTrustor gets org trust
	*/
	GetOrgauthorizationTrustor(ctx context.Context, params *GetOrgauthorizationTrustorParams) (*GetOrgauthorizationTrustorOK, error)
	/*
	   GetOrgauthorizationTrustorUser gets trustee user
	*/
	GetOrgauthorizationTrustorUser(ctx context.Context, params *GetOrgauthorizationTrustorUserParams) (*GetOrgauthorizationTrustorUserOK, error)
	/*
	   GetOrgauthorizationTrustorUsers thes list of users in the trustor organization i e users granted access
	*/
	GetOrgauthorizationTrustorUsers(ctx context.Context, params *GetOrgauthorizationTrustorUsersParams) (*GetOrgauthorizationTrustorUsersOK, error)
	/*
	   GetOrgauthorizationTrustors thes list of organizations that have authorized trusted your organization
	*/
	GetOrgauthorizationTrustors(ctx context.Context, params *GetOrgauthorizationTrustorsParams) (*GetOrgauthorizationTrustorsOK, error)
	/*
	   PostOrgauthorizationPairings as pairing id is created by the trustee and given to the trustor to create a trust
	*/
	PostOrgauthorizationPairings(ctx context.Context, params *PostOrgauthorizationPairingsParams) (*PostOrgauthorizationPairingsOK, error)
	/*
	   PostOrgauthorizationTrusteeUsers adds a user to the trust
	*/
	PostOrgauthorizationTrusteeUsers(ctx context.Context, params *PostOrgauthorizationTrusteeUsersParams) (*PostOrgauthorizationTrusteeUsersOK, error)
	/*
	   PostOrgauthorizationTrustees creates a new organization authorization trust this is required to grant other organizations access to your organization
	*/
	PostOrgauthorizationTrustees(ctx context.Context, params *PostOrgauthorizationTrusteesParams) (*PostOrgauthorizationTrusteesOK, error)
	/*
	   PostOrgauthorizationTrusteesAudits gets org trustee audits
	*/
	PostOrgauthorizationTrusteesAudits(ctx context.Context, params *PostOrgauthorizationTrusteesAuditsParams) (*PostOrgauthorizationTrusteesAuditsOK, error)
	/*
	   PostOrgauthorizationTrustorAudits gets org trustor audits
	*/
	PostOrgauthorizationTrustorAudits(ctx context.Context, params *PostOrgauthorizationTrustorAuditsParams) (*PostOrgauthorizationTrustorAuditsOK, error)
	/*
	   PutOrgauthorizationTrustee updates org trust
	*/
	PutOrgauthorizationTrustee(ctx context.Context, params *PutOrgauthorizationTrusteeParams) (*PutOrgauthorizationTrusteeOK, error)
	/*
	   PutOrgauthorizationTrusteeUserRoledivisions updates trustee user roles
	*/
	PutOrgauthorizationTrusteeUserRoledivisions(ctx context.Context, params *PutOrgauthorizationTrusteeUserRoledivisionsParams) (*PutOrgauthorizationTrusteeUserRoledivisionsOK, error)
	/*
	   PutOrgauthorizationTrusteeUserRoles updates trustee user roles
	*/
	PutOrgauthorizationTrusteeUserRoles(ctx context.Context, params *PutOrgauthorizationTrusteeUserRolesParams) (*PutOrgauthorizationTrusteeUserRolesOK, error)
	/*
	   PutOrgauthorizationTrustorUser adds a trustee user to the trust
	*/
	PutOrgauthorizationTrustorUser(ctx context.Context, params *PutOrgauthorizationTrustorUserParams) (*PutOrgauthorizationTrustorUserOK, error)
}

// New creates a new organization authorization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for organization authorization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteOrgauthorizationTrustee deletes org trust
*/
func (a *Client) DeleteOrgauthorizationTrustee(ctx context.Context, params *DeleteOrgauthorizationTrusteeParams) (*DeleteOrgauthorizationTrusteeNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrgauthorizationTrustee",
		Method:             "DELETE",
		PathPattern:        "/api/v2/orgauthorization/trustees/{trusteeOrgId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrgauthorizationTrusteeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrgauthorizationTrusteeNoContent), nil

}

/*
DeleteOrgauthorizationTrusteeUser deletes trustee user
*/
func (a *Client) DeleteOrgauthorizationTrusteeUser(ctx context.Context, params *DeleteOrgauthorizationTrusteeUserParams) (*DeleteOrgauthorizationTrusteeUserNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrgauthorizationTrusteeUser",
		Method:             "DELETE",
		PathPattern:        "/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrgauthorizationTrusteeUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrgauthorizationTrusteeUserNoContent), nil

}

/*
DeleteOrgauthorizationTrusteeUserRoles deletes trustee user roles
*/
func (a *Client) DeleteOrgauthorizationTrusteeUserRoles(ctx context.Context, params *DeleteOrgauthorizationTrusteeUserRolesParams) (*DeleteOrgauthorizationTrusteeUserRolesNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrgauthorizationTrusteeUserRoles",
		Method:             "DELETE",
		PathPattern:        "/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrgauthorizationTrusteeUserRolesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrgauthorizationTrusteeUserRolesNoContent), nil

}

/*
DeleteOrgauthorizationTrustor deletes org trust
*/
func (a *Client) DeleteOrgauthorizationTrustor(ctx context.Context, params *DeleteOrgauthorizationTrustorParams) (*DeleteOrgauthorizationTrustorNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrgauthorizationTrustor",
		Method:             "DELETE",
		PathPattern:        "/api/v2/orgauthorization/trustors/{trustorOrgId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrgauthorizationTrustorReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrgauthorizationTrustorNoContent), nil

}

/*
DeleteOrgauthorizationTrustorUser deletes trustee user
*/
func (a *Client) DeleteOrgauthorizationTrustorUser(ctx context.Context, params *DeleteOrgauthorizationTrustorUserParams) (*DeleteOrgauthorizationTrustorUserNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrgauthorizationTrustorUser",
		Method:             "DELETE",
		PathPattern:        "/api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrgauthorizationTrustorUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrgauthorizationTrustorUserNoContent), nil

}

/*
GetOrgauthorizationPairing gets pairing info
*/
func (a *Client) GetOrgauthorizationPairing(ctx context.Context, params *GetOrgauthorizationPairingParams) (*GetOrgauthorizationPairingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrgauthorizationPairing",
		Method:             "GET",
		PathPattern:        "/api/v2/orgauthorization/pairings/{pairingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrgauthorizationPairingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrgauthorizationPairingOK), nil

}

/*
GetOrgauthorizationTrustee gets org trust
*/
func (a *Client) GetOrgauthorizationTrustee(ctx context.Context, params *GetOrgauthorizationTrusteeParams) (*GetOrgauthorizationTrusteeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrgauthorizationTrustee",
		Method:             "GET",
		PathPattern:        "/api/v2/orgauthorization/trustees/{trusteeOrgId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrgauthorizationTrusteeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrgauthorizationTrusteeOK), nil

}

/*
GetOrgauthorizationTrusteeUser gets trustee user
*/
func (a *Client) GetOrgauthorizationTrusteeUser(ctx context.Context, params *GetOrgauthorizationTrusteeUserParams) (*GetOrgauthorizationTrusteeUserOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrgauthorizationTrusteeUser",
		Method:             "GET",
		PathPattern:        "/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrgauthorizationTrusteeUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrgauthorizationTrusteeUserOK), nil

}

/*
GetOrgauthorizationTrusteeUserRoles gets trustee user roles
*/
func (a *Client) GetOrgauthorizationTrusteeUserRoles(ctx context.Context, params *GetOrgauthorizationTrusteeUserRolesParams) (*GetOrgauthorizationTrusteeUserRolesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrgauthorizationTrusteeUserRoles",
		Method:             "GET",
		PathPattern:        "/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrgauthorizationTrusteeUserRolesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrgauthorizationTrusteeUserRolesOK), nil

}

/*
GetOrgauthorizationTrusteeUsers thes list of trustee users for this organization i e users granted access to this organization
*/
func (a *Client) GetOrgauthorizationTrusteeUsers(ctx context.Context, params *GetOrgauthorizationTrusteeUsersParams) (*GetOrgauthorizationTrusteeUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrgauthorizationTrusteeUsers",
		Method:             "GET",
		PathPattern:        "/api/v2/orgauthorization/trustees/{trusteeOrgId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrgauthorizationTrusteeUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrgauthorizationTrusteeUsersOK), nil

}

/*
GetOrgauthorizationTrustees thes list of trustees for this organization i e organizations granted access to this organization
*/
func (a *Client) GetOrgauthorizationTrustees(ctx context.Context, params *GetOrgauthorizationTrusteesParams) (*GetOrgauthorizationTrusteesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrgauthorizationTrustees",
		Method:             "GET",
		PathPattern:        "/api/v2/orgauthorization/trustees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrgauthorizationTrusteesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrgauthorizationTrusteesOK), nil

}

/*
GetOrgauthorizationTrustor gets org trust
*/
func (a *Client) GetOrgauthorizationTrustor(ctx context.Context, params *GetOrgauthorizationTrustorParams) (*GetOrgauthorizationTrustorOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrgauthorizationTrustor",
		Method:             "GET",
		PathPattern:        "/api/v2/orgauthorization/trustors/{trustorOrgId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrgauthorizationTrustorReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrgauthorizationTrustorOK), nil

}

/*
GetOrgauthorizationTrustorUser gets trustee user
*/
func (a *Client) GetOrgauthorizationTrustorUser(ctx context.Context, params *GetOrgauthorizationTrustorUserParams) (*GetOrgauthorizationTrustorUserOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrgauthorizationTrustorUser",
		Method:             "GET",
		PathPattern:        "/api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrgauthorizationTrustorUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrgauthorizationTrustorUserOK), nil

}

/*
GetOrgauthorizationTrustorUsers thes list of users in the trustor organization i e users granted access
*/
func (a *Client) GetOrgauthorizationTrustorUsers(ctx context.Context, params *GetOrgauthorizationTrustorUsersParams) (*GetOrgauthorizationTrustorUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrgauthorizationTrustorUsers",
		Method:             "GET",
		PathPattern:        "/api/v2/orgauthorization/trustors/{trustorOrgId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrgauthorizationTrustorUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrgauthorizationTrustorUsersOK), nil

}

/*
GetOrgauthorizationTrustors thes list of organizations that have authorized trusted your organization
*/
func (a *Client) GetOrgauthorizationTrustors(ctx context.Context, params *GetOrgauthorizationTrustorsParams) (*GetOrgauthorizationTrustorsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrgauthorizationTrustors",
		Method:             "GET",
		PathPattern:        "/api/v2/orgauthorization/trustors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrgauthorizationTrustorsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrgauthorizationTrustorsOK), nil

}

/*
PostOrgauthorizationPairings as pairing id is created by the trustee and given to the trustor to create a trust
*/
func (a *Client) PostOrgauthorizationPairings(ctx context.Context, params *PostOrgauthorizationPairingsParams) (*PostOrgauthorizationPairingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOrgauthorizationPairings",
		Method:             "POST",
		PathPattern:        "/api/v2/orgauthorization/pairings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOrgauthorizationPairingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrgauthorizationPairingsOK), nil

}

/*
PostOrgauthorizationTrusteeUsers adds a user to the trust
*/
func (a *Client) PostOrgauthorizationTrusteeUsers(ctx context.Context, params *PostOrgauthorizationTrusteeUsersParams) (*PostOrgauthorizationTrusteeUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOrgauthorizationTrusteeUsers",
		Method:             "POST",
		PathPattern:        "/api/v2/orgauthorization/trustees/{trusteeOrgId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOrgauthorizationTrusteeUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrgauthorizationTrusteeUsersOK), nil

}

/*
PostOrgauthorizationTrustees creates a new organization authorization trust this is required to grant other organizations access to your organization
*/
func (a *Client) PostOrgauthorizationTrustees(ctx context.Context, params *PostOrgauthorizationTrusteesParams) (*PostOrgauthorizationTrusteesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOrgauthorizationTrustees",
		Method:             "POST",
		PathPattern:        "/api/v2/orgauthorization/trustees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOrgauthorizationTrusteesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrgauthorizationTrusteesOK), nil

}

/*
PostOrgauthorizationTrusteesAudits gets org trustee audits
*/
func (a *Client) PostOrgauthorizationTrusteesAudits(ctx context.Context, params *PostOrgauthorizationTrusteesAuditsParams) (*PostOrgauthorizationTrusteesAuditsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOrgauthorizationTrusteesAudits",
		Method:             "POST",
		PathPattern:        "/api/v2/orgauthorization/trustees/audits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOrgauthorizationTrusteesAuditsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrgauthorizationTrusteesAuditsOK), nil

}

/*
PostOrgauthorizationTrustorAudits gets org trustor audits
*/
func (a *Client) PostOrgauthorizationTrustorAudits(ctx context.Context, params *PostOrgauthorizationTrustorAuditsParams) (*PostOrgauthorizationTrustorAuditsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOrgauthorizationTrustorAudits",
		Method:             "POST",
		PathPattern:        "/api/v2/orgauthorization/trustor/audits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOrgauthorizationTrustorAuditsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrgauthorizationTrustorAuditsOK), nil

}

/*
PutOrgauthorizationTrustee updates org trust
*/
func (a *Client) PutOrgauthorizationTrustee(ctx context.Context, params *PutOrgauthorizationTrusteeParams) (*PutOrgauthorizationTrusteeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOrgauthorizationTrustee",
		Method:             "PUT",
		PathPattern:        "/api/v2/orgauthorization/trustees/{trusteeOrgId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOrgauthorizationTrusteeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOrgauthorizationTrusteeOK), nil

}

/*
PutOrgauthorizationTrusteeUserRoledivisions updates trustee user roles
*/
func (a *Client) PutOrgauthorizationTrusteeUserRoledivisions(ctx context.Context, params *PutOrgauthorizationTrusteeUserRoledivisionsParams) (*PutOrgauthorizationTrusteeUserRoledivisionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOrgauthorizationTrusteeUserRoledivisions",
		Method:             "PUT",
		PathPattern:        "/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roledivisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOrgauthorizationTrusteeUserRoledivisionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOrgauthorizationTrusteeUserRoledivisionsOK), nil

}

/*
PutOrgauthorizationTrusteeUserRoles updates trustee user roles
*/
func (a *Client) PutOrgauthorizationTrusteeUserRoles(ctx context.Context, params *PutOrgauthorizationTrusteeUserRolesParams) (*PutOrgauthorizationTrusteeUserRolesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOrgauthorizationTrusteeUserRoles",
		Method:             "PUT",
		PathPattern:        "/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOrgauthorizationTrusteeUserRolesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOrgauthorizationTrusteeUserRolesOK), nil

}

/*
PutOrgauthorizationTrustorUser adds a trustee user to the trust
*/
func (a *Client) PutOrgauthorizationTrustorUser(ctx context.Context, params *PutOrgauthorizationTrustorUserParams) (*PutOrgauthorizationTrustorUserOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOrgauthorizationTrustorUser",
		Method:             "PUT",
		PathPattern:        "/api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOrgauthorizationTrustorUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOrgauthorizationTrustorUserOK), nil

}

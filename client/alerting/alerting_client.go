// Code generated by go-swagger; DO NOT EDIT.

package alerting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the alerting client
type API interface {
	/*
	   DeleteAlertingInteractionstatsAlert deletes an interaction stats alert
	*/
	DeleteAlertingInteractionstatsAlert(ctx context.Context, params *DeleteAlertingInteractionstatsAlertParams) (*DeleteAlertingInteractionstatsAlertNoContent, error)
	/*
	   DeleteAlertingInteractionstatsRule deletes an interaction stats rule
	*/
	DeleteAlertingInteractionstatsRule(ctx context.Context, params *DeleteAlertingInteractionstatsRuleParams) (*DeleteAlertingInteractionstatsRuleNoContent, error)
	/*
	   GetAlertingAlertsActive gets active alert count for a user
	*/
	GetAlertingAlertsActive(ctx context.Context, params *GetAlertingAlertsActiveParams) (*GetAlertingAlertsActiveOK, error)
	/*
	   GetAlertingInteractionstatsAlert gets an interaction stats alert
	*/
	GetAlertingInteractionstatsAlert(ctx context.Context, params *GetAlertingInteractionstatsAlertParams) (*GetAlertingInteractionstatsAlertOK, error)
	/*
	   GetAlertingInteractionstatsAlerts gets interaction stats alert list
	*/
	GetAlertingInteractionstatsAlerts(ctx context.Context, params *GetAlertingInteractionstatsAlertsParams) (*GetAlertingInteractionstatsAlertsOK, error)
	/*
	   GetAlertingInteractionstatsAlertsUnread gets user unread count of interaction stats alerts
	*/
	GetAlertingInteractionstatsAlertsUnread(ctx context.Context, params *GetAlertingInteractionstatsAlertsUnreadParams) (*GetAlertingInteractionstatsAlertsUnreadOK, error)
	/*
	   GetAlertingInteractionstatsRule gets an interaction stats rule
	*/
	GetAlertingInteractionstatsRule(ctx context.Context, params *GetAlertingInteractionstatsRuleParams) (*GetAlertingInteractionstatsRuleOK, error)
	/*
	   GetAlertingInteractionstatsRules gets an interaction stats rule list
	*/
	GetAlertingInteractionstatsRules(ctx context.Context, params *GetAlertingInteractionstatsRulesParams) (*GetAlertingInteractionstatsRulesOK, error)
	/*
	   PostAlertingInteractionstatsRules creates an interaction stats rule
	*/
	PostAlertingInteractionstatsRules(ctx context.Context, params *PostAlertingInteractionstatsRulesParams) (*PostAlertingInteractionstatsRulesOK, error)
	/*
	   PutAlertingInteractionstatsAlert updates an interaction stats alert read status
	*/
	PutAlertingInteractionstatsAlert(ctx context.Context, params *PutAlertingInteractionstatsAlertParams) (*PutAlertingInteractionstatsAlertOK, error)
	/*
	   PutAlertingInteractionstatsRule updates an interaction stats rule
	*/
	PutAlertingInteractionstatsRule(ctx context.Context, params *PutAlertingInteractionstatsRuleParams) (*PutAlertingInteractionstatsRuleOK, error)
}

// New creates a new alerting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for alerting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteAlertingInteractionstatsAlert deletes an interaction stats alert
*/
func (a *Client) DeleteAlertingInteractionstatsAlert(ctx context.Context, params *DeleteAlertingInteractionstatsAlertParams) (*DeleteAlertingInteractionstatsAlertNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAlertingInteractionstatsAlert",
		Method:             "DELETE",
		PathPattern:        "/api/v2/alerting/interactionstats/alerts/{alertId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAlertingInteractionstatsAlertReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAlertingInteractionstatsAlertNoContent), nil

}

/*
DeleteAlertingInteractionstatsRule deletes an interaction stats rule
*/
func (a *Client) DeleteAlertingInteractionstatsRule(ctx context.Context, params *DeleteAlertingInteractionstatsRuleParams) (*DeleteAlertingInteractionstatsRuleNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAlertingInteractionstatsRule",
		Method:             "DELETE",
		PathPattern:        "/api/v2/alerting/interactionstats/rules/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAlertingInteractionstatsRuleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAlertingInteractionstatsRuleNoContent), nil

}

/*
GetAlertingAlertsActive gets active alert count for a user
*/
func (a *Client) GetAlertingAlertsActive(ctx context.Context, params *GetAlertingAlertsActiveParams) (*GetAlertingAlertsActiveOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertingAlertsActive",
		Method:             "GET",
		PathPattern:        "/api/v2/alerting/alerts/active",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertingAlertsActiveReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertingAlertsActiveOK), nil

}

/*
GetAlertingInteractionstatsAlert gets an interaction stats alert
*/
func (a *Client) GetAlertingInteractionstatsAlert(ctx context.Context, params *GetAlertingInteractionstatsAlertParams) (*GetAlertingInteractionstatsAlertOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertingInteractionstatsAlert",
		Method:             "GET",
		PathPattern:        "/api/v2/alerting/interactionstats/alerts/{alertId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertingInteractionstatsAlertReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertingInteractionstatsAlertOK), nil

}

/*
GetAlertingInteractionstatsAlerts gets interaction stats alert list
*/
func (a *Client) GetAlertingInteractionstatsAlerts(ctx context.Context, params *GetAlertingInteractionstatsAlertsParams) (*GetAlertingInteractionstatsAlertsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertingInteractionstatsAlerts",
		Method:             "GET",
		PathPattern:        "/api/v2/alerting/interactionstats/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertingInteractionstatsAlertsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertingInteractionstatsAlertsOK), nil

}

/*
GetAlertingInteractionstatsAlertsUnread gets user unread count of interaction stats alerts
*/
func (a *Client) GetAlertingInteractionstatsAlertsUnread(ctx context.Context, params *GetAlertingInteractionstatsAlertsUnreadParams) (*GetAlertingInteractionstatsAlertsUnreadOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertingInteractionstatsAlertsUnread",
		Method:             "GET",
		PathPattern:        "/api/v2/alerting/interactionstats/alerts/unread",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertingInteractionstatsAlertsUnreadReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertingInteractionstatsAlertsUnreadOK), nil

}

/*
GetAlertingInteractionstatsRule gets an interaction stats rule
*/
func (a *Client) GetAlertingInteractionstatsRule(ctx context.Context, params *GetAlertingInteractionstatsRuleParams) (*GetAlertingInteractionstatsRuleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertingInteractionstatsRule",
		Method:             "GET",
		PathPattern:        "/api/v2/alerting/interactionstats/rules/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertingInteractionstatsRuleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertingInteractionstatsRuleOK), nil

}

/*
GetAlertingInteractionstatsRules gets an interaction stats rule list
*/
func (a *Client) GetAlertingInteractionstatsRules(ctx context.Context, params *GetAlertingInteractionstatsRulesParams) (*GetAlertingInteractionstatsRulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertingInteractionstatsRules",
		Method:             "GET",
		PathPattern:        "/api/v2/alerting/interactionstats/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertingInteractionstatsRulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertingInteractionstatsRulesOK), nil

}

/*
PostAlertingInteractionstatsRules creates an interaction stats rule
*/
func (a *Client) PostAlertingInteractionstatsRules(ctx context.Context, params *PostAlertingInteractionstatsRulesParams) (*PostAlertingInteractionstatsRulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAlertingInteractionstatsRules",
		Method:             "POST",
		PathPattern:        "/api/v2/alerting/interactionstats/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAlertingInteractionstatsRulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAlertingInteractionstatsRulesOK), nil

}

/*
PutAlertingInteractionstatsAlert updates an interaction stats alert read status
*/
func (a *Client) PutAlertingInteractionstatsAlert(ctx context.Context, params *PutAlertingInteractionstatsAlertParams) (*PutAlertingInteractionstatsAlertOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAlertingInteractionstatsAlert",
		Method:             "PUT",
		PathPattern:        "/api/v2/alerting/interactionstats/alerts/{alertId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAlertingInteractionstatsAlertReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAlertingInteractionstatsAlertOK), nil

}

/*
PutAlertingInteractionstatsRule updates an interaction stats rule
*/
func (a *Client) PutAlertingInteractionstatsRule(ctx context.Context, params *PutAlertingInteractionstatsRuleParams) (*PutAlertingInteractionstatsRuleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAlertingInteractionstatsRule",
		Method:             "PUT",
		PathPattern:        "/api/v2/alerting/interactionstats/rules/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAlertingInteractionstatsRuleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAlertingInteractionstatsRuleOK), nil

}

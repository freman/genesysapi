// Code generated by go-swagger; DO NOT EDIT.

package stations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetStationsParams creates a new GetStationsParams object
// with the default values initialized.
func NewGetStationsParams() *GetStationsParams {
	var (
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortByDefault     = string("name")
	)
	return &GetStationsParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortBy:     &sortByDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetStationsParamsWithTimeout creates a new GetStationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetStationsParamsWithTimeout(timeout time.Duration) *GetStationsParams {
	var (
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortByDefault     = string("name")
	)
	return &GetStationsParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortBy:     &sortByDefault,

		timeout: timeout,
	}
}

// NewGetStationsParamsWithContext creates a new GetStationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetStationsParamsWithContext(ctx context.Context) *GetStationsParams {
	var (
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortByDefault     = string("name")
	)
	return &GetStationsParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortBy:     &sortByDefault,

		Context: ctx,
	}
}

// NewGetStationsParamsWithHTTPClient creates a new GetStationsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetStationsParamsWithHTTPClient(client *http.Client) *GetStationsParams {
	var (
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortByDefault     = string("name")
	)
	return &GetStationsParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortBy:     &sortByDefault,
		HTTPClient: client,
	}
}

/*GetStationsParams contains all the parameters to send to the API endpoint
for the get stations operation typically these are written to a http.Request
*/
type GetStationsParams struct {

	/*ID
	  Comma separated list of stationIds

	*/
	ID *string
	/*LineAppearanceID
	  lineAppearanceId

	*/
	LineAppearanceID *string
	/*Name
	  Name

	*/
	Name *string
	/*PageNumber
	  Page number

	*/
	PageNumber *int32
	/*PageSize
	  Page size

	*/
	PageSize *int32
	/*SortBy
	  Sort by

	*/
	SortBy *string
	/*UserSelectable
	  True for stations that the user can select otherwise false

	*/
	UserSelectable *string
	/*WebRtcUserID
	  Filter for the webRtc station of the webRtcUserId

	*/
	WebRtcUserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get stations params
func (o *GetStationsParams) WithTimeout(timeout time.Duration) *GetStationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get stations params
func (o *GetStationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get stations params
func (o *GetStationsParams) WithContext(ctx context.Context) *GetStationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get stations params
func (o *GetStationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get stations params
func (o *GetStationsParams) WithHTTPClient(client *http.Client) *GetStationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get stations params
func (o *GetStationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get stations params
func (o *GetStationsParams) WithID(id *string) *GetStationsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get stations params
func (o *GetStationsParams) SetID(id *string) {
	o.ID = id
}

// WithLineAppearanceID adds the lineAppearanceID to the get stations params
func (o *GetStationsParams) WithLineAppearanceID(lineAppearanceID *string) *GetStationsParams {
	o.SetLineAppearanceID(lineAppearanceID)
	return o
}

// SetLineAppearanceID adds the lineAppearanceId to the get stations params
func (o *GetStationsParams) SetLineAppearanceID(lineAppearanceID *string) {
	o.LineAppearanceID = lineAppearanceID
}

// WithName adds the name to the get stations params
func (o *GetStationsParams) WithName(name *string) *GetStationsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get stations params
func (o *GetStationsParams) SetName(name *string) {
	o.Name = name
}

// WithPageNumber adds the pageNumber to the get stations params
func (o *GetStationsParams) WithPageNumber(pageNumber *int32) *GetStationsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get stations params
func (o *GetStationsParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get stations params
func (o *GetStationsParams) WithPageSize(pageSize *int32) *GetStationsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get stations params
func (o *GetStationsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithSortBy adds the sortBy to the get stations params
func (o *GetStationsParams) WithSortBy(sortBy *string) *GetStationsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get stations params
func (o *GetStationsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithUserSelectable adds the userSelectable to the get stations params
func (o *GetStationsParams) WithUserSelectable(userSelectable *string) *GetStationsParams {
	o.SetUserSelectable(userSelectable)
	return o
}

// SetUserSelectable adds the userSelectable to the get stations params
func (o *GetStationsParams) SetUserSelectable(userSelectable *string) {
	o.UserSelectable = userSelectable
}

// WithWebRtcUserID adds the webRtcUserID to the get stations params
func (o *GetStationsParams) WithWebRtcUserID(webRtcUserID *string) *GetStationsParams {
	o.SetWebRtcUserID(webRtcUserID)
	return o
}

// SetWebRtcUserID adds the webRtcUserId to the get stations params
func (o *GetStationsParams) SetWebRtcUserID(webRtcUserID *string) {
	o.WebRtcUserID = webRtcUserID
}

// WriteToRequest writes these params to a swagger request
func (o *GetStationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.LineAppearanceID != nil {

		// query param lineAppearanceId
		var qrLineAppearanceID string
		if o.LineAppearanceID != nil {
			qrLineAppearanceID = *o.LineAppearanceID
		}
		qLineAppearanceID := qrLineAppearanceID
		if qLineAppearanceID != "" {
			if err := r.SetQueryParam("lineAppearanceId", qLineAppearanceID); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if o.UserSelectable != nil {

		// query param userSelectable
		var qrUserSelectable string
		if o.UserSelectable != nil {
			qrUserSelectable = *o.UserSelectable
		}
		qUserSelectable := qrUserSelectable
		if qUserSelectable != "" {
			if err := r.SetQueryParam("userSelectable", qUserSelectable); err != nil {
				return err
			}
		}

	}

	if o.WebRtcUserID != nil {

		// query param webRtcUserId
		var qrWebRtcUserID string
		if o.WebRtcUserID != nil {
			qrWebRtcUserID = *o.WebRtcUserID
		}
		qWebRtcUserID := qrWebRtcUserID
		if qWebRtcUserID != "" {
			if err := r.SetQueryParam("webRtcUserId", qWebRtcUserID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

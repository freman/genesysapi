// Code generated by go-swagger; DO NOT EDIT.

package outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetOutboundEventsReader is a Reader for the GetOutboundEvents structure.
type GetOutboundEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOutboundEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOutboundEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOutboundEventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOutboundEventsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOutboundEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOutboundEventsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetOutboundEventsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetOutboundEventsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetOutboundEventsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOutboundEventsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOutboundEventsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetOutboundEventsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetOutboundEventsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOutboundEventsOK creates a GetOutboundEventsOK with default headers values
func NewGetOutboundEventsOK() *GetOutboundEventsOK {
	return &GetOutboundEventsOK{}
}

/*GetOutboundEventsOK handles this case with default header values.

successful operation
*/
type GetOutboundEventsOK struct {
	Payload *models.DialerEventEntityListing
}

func (o *GetOutboundEventsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events][%d] getOutboundEventsOK  %+v", 200, o.Payload)
}

func (o *GetOutboundEventsOK) GetPayload() *models.DialerEventEntityListing {
	return o.Payload
}

func (o *GetOutboundEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DialerEventEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventsBadRequest creates a GetOutboundEventsBadRequest with default headers values
func NewGetOutboundEventsBadRequest() *GetOutboundEventsBadRequest {
	return &GetOutboundEventsBadRequest{}
}

/*GetOutboundEventsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetOutboundEventsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundEventsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events][%d] getOutboundEventsBadRequest  %+v", 400, o.Payload)
}

func (o *GetOutboundEventsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventsUnauthorized creates a GetOutboundEventsUnauthorized with default headers values
func NewGetOutboundEventsUnauthorized() *GetOutboundEventsUnauthorized {
	return &GetOutboundEventsUnauthorized{}
}

/*GetOutboundEventsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetOutboundEventsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundEventsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events][%d] getOutboundEventsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOutboundEventsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventsForbidden creates a GetOutboundEventsForbidden with default headers values
func NewGetOutboundEventsForbidden() *GetOutboundEventsForbidden {
	return &GetOutboundEventsForbidden{}
}

/*GetOutboundEventsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetOutboundEventsForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundEventsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events][%d] getOutboundEventsForbidden  %+v", 403, o.Payload)
}

func (o *GetOutboundEventsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventsNotFound creates a GetOutboundEventsNotFound with default headers values
func NewGetOutboundEventsNotFound() *GetOutboundEventsNotFound {
	return &GetOutboundEventsNotFound{}
}

/*GetOutboundEventsNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetOutboundEventsNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundEventsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events][%d] getOutboundEventsNotFound  %+v", 404, o.Payload)
}

func (o *GetOutboundEventsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventsRequestTimeout creates a GetOutboundEventsRequestTimeout with default headers values
func NewGetOutboundEventsRequestTimeout() *GetOutboundEventsRequestTimeout {
	return &GetOutboundEventsRequestTimeout{}
}

/*GetOutboundEventsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetOutboundEventsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundEventsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events][%d] getOutboundEventsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetOutboundEventsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventsRequestEntityTooLarge creates a GetOutboundEventsRequestEntityTooLarge with default headers values
func NewGetOutboundEventsRequestEntityTooLarge() *GetOutboundEventsRequestEntityTooLarge {
	return &GetOutboundEventsRequestEntityTooLarge{}
}

/*GetOutboundEventsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetOutboundEventsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundEventsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events][%d] getOutboundEventsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOutboundEventsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventsUnsupportedMediaType creates a GetOutboundEventsUnsupportedMediaType with default headers values
func NewGetOutboundEventsUnsupportedMediaType() *GetOutboundEventsUnsupportedMediaType {
	return &GetOutboundEventsUnsupportedMediaType{}
}

/*GetOutboundEventsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetOutboundEventsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundEventsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events][%d] getOutboundEventsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOutboundEventsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventsTooManyRequests creates a GetOutboundEventsTooManyRequests with default headers values
func NewGetOutboundEventsTooManyRequests() *GetOutboundEventsTooManyRequests {
	return &GetOutboundEventsTooManyRequests{}
}

/*GetOutboundEventsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetOutboundEventsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundEventsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events][%d] getOutboundEventsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOutboundEventsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventsInternalServerError creates a GetOutboundEventsInternalServerError with default headers values
func NewGetOutboundEventsInternalServerError() *GetOutboundEventsInternalServerError {
	return &GetOutboundEventsInternalServerError{}
}

/*GetOutboundEventsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetOutboundEventsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundEventsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events][%d] getOutboundEventsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOutboundEventsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventsServiceUnavailable creates a GetOutboundEventsServiceUnavailable with default headers values
func NewGetOutboundEventsServiceUnavailable() *GetOutboundEventsServiceUnavailable {
	return &GetOutboundEventsServiceUnavailable{}
}

/*GetOutboundEventsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetOutboundEventsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundEventsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events][%d] getOutboundEventsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOutboundEventsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventsGatewayTimeout creates a GetOutboundEventsGatewayTimeout with default headers values
func NewGetOutboundEventsGatewayTimeout() *GetOutboundEventsGatewayTimeout {
	return &GetOutboundEventsGatewayTimeout{}
}

/*GetOutboundEventsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetOutboundEventsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundEventsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events][%d] getOutboundEventsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetOutboundEventsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

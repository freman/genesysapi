// Code generated by go-swagger; DO NOT EDIT.

package outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/freman/genesysapi/models"
)

// NewPostOutboundContactlistContactsParams creates a new PostOutboundContactlistContactsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostOutboundContactlistContactsParams() *PostOutboundContactlistContactsParams {
	return &PostOutboundContactlistContactsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostOutboundContactlistContactsParamsWithTimeout creates a new PostOutboundContactlistContactsParams object
// with the ability to set a timeout on a request.
func NewPostOutboundContactlistContactsParamsWithTimeout(timeout time.Duration) *PostOutboundContactlistContactsParams {
	return &PostOutboundContactlistContactsParams{
		timeout: timeout,
	}
}

// NewPostOutboundContactlistContactsParamsWithContext creates a new PostOutboundContactlistContactsParams object
// with the ability to set a context for a request.
func NewPostOutboundContactlistContactsParamsWithContext(ctx context.Context) *PostOutboundContactlistContactsParams {
	return &PostOutboundContactlistContactsParams{
		Context: ctx,
	}
}

// NewPostOutboundContactlistContactsParamsWithHTTPClient creates a new PostOutboundContactlistContactsParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostOutboundContactlistContactsParamsWithHTTPClient(client *http.Client) *PostOutboundContactlistContactsParams {
	return &PostOutboundContactlistContactsParams{
		HTTPClient: client,
	}
}

/*
PostOutboundContactlistContactsParams contains all the parameters to send to the API endpoint

	for the post outbound contactlist contacts operation.

	Typically these are written to a http.Request.
*/
type PostOutboundContactlistContactsParams struct {

	/* Body.

	   Contact
	*/
	Body []*models.WritableDialerContact

	/* ClearSystemData.

	   Clear system data. True means the system columns (attempts, callable status, etc) stored on the contact will be cleared if the contact already exists; false means they won't.
	*/
	ClearSystemData *bool

	/* ContactListID.

	   Contact List ID
	*/
	ContactListID string

	/* DoNotQueue.

	   Do not queue. True means that updated contacts will not have their positions in the queue altered, so contacts that have already been dialed will not be redialed. For new contacts, this parameter has no effect; False means that updated contacts will be re-queued, according to the 'priority' parameter.
	*/
	DoNotQueue *bool

	/* Priority.

	   Contact priority. True means the contact(s) will be dialed next; false means the contact will go to the end of the contact queue.
	*/
	Priority *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post outbound contactlist contacts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostOutboundContactlistContactsParams) WithDefaults() *PostOutboundContactlistContactsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post outbound contactlist contacts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostOutboundContactlistContactsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) WithTimeout(timeout time.Duration) *PostOutboundContactlistContactsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) WithContext(ctx context.Context) *PostOutboundContactlistContactsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) WithHTTPClient(client *http.Client) *PostOutboundContactlistContactsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) WithBody(body []*models.WritableDialerContact) *PostOutboundContactlistContactsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) SetBody(body []*models.WritableDialerContact) {
	o.Body = body
}

// WithClearSystemData adds the clearSystemData to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) WithClearSystemData(clearSystemData *bool) *PostOutboundContactlistContactsParams {
	o.SetClearSystemData(clearSystemData)
	return o
}

// SetClearSystemData adds the clearSystemData to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) SetClearSystemData(clearSystemData *bool) {
	o.ClearSystemData = clearSystemData
}

// WithContactListID adds the contactListID to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) WithContactListID(contactListID string) *PostOutboundContactlistContactsParams {
	o.SetContactListID(contactListID)
	return o
}

// SetContactListID adds the contactListId to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) SetContactListID(contactListID string) {
	o.ContactListID = contactListID
}

// WithDoNotQueue adds the doNotQueue to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) WithDoNotQueue(doNotQueue *bool) *PostOutboundContactlistContactsParams {
	o.SetDoNotQueue(doNotQueue)
	return o
}

// SetDoNotQueue adds the doNotQueue to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) SetDoNotQueue(doNotQueue *bool) {
	o.DoNotQueue = doNotQueue
}

// WithPriority adds the priority to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) WithPriority(priority *bool) *PostOutboundContactlistContactsParams {
	o.SetPriority(priority)
	return o
}

// SetPriority adds the priority to the post outbound contactlist contacts params
func (o *PostOutboundContactlistContactsParams) SetPriority(priority *bool) {
	o.Priority = priority
}

// WriteToRequest writes these params to a swagger request
func (o *PostOutboundContactlistContactsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.ClearSystemData != nil {

		// query param clearSystemData
		var qrClearSystemData bool

		if o.ClearSystemData != nil {
			qrClearSystemData = *o.ClearSystemData
		}
		qClearSystemData := swag.FormatBool(qrClearSystemData)
		if qClearSystemData != "" {

			if err := r.SetQueryParam("clearSystemData", qClearSystemData); err != nil {
				return err
			}
		}
	}

	// path param contactListId
	if err := r.SetPathParam("contactListId", o.ContactListID); err != nil {
		return err
	}

	if o.DoNotQueue != nil {

		// query param doNotQueue
		var qrDoNotQueue bool

		if o.DoNotQueue != nil {
			qrDoNotQueue = *o.DoNotQueue
		}
		qDoNotQueue := swag.FormatBool(qrDoNotQueue)
		if qDoNotQueue != "" {

			if err := r.SetQueryParam("doNotQueue", qDoNotQueue); err != nil {
				return err
			}
		}
	}

	if o.Priority != nil {

		// query param priority
		var qrPriority bool

		if o.Priority != nil {
			qrPriority = *o.Priority
		}
		qPriority := swag.FormatBool(qrPriority)
		if qPriority != "" {

			if err := r.SetQueryParam("priority", qPriority); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

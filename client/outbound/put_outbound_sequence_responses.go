// Code generated by go-swagger; DO NOT EDIT.

package outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutOutboundSequenceReader is a Reader for the PutOutboundSequence structure.
type PutOutboundSequenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutOutboundSequenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutOutboundSequenceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutOutboundSequenceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutOutboundSequenceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutOutboundSequenceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutOutboundSequenceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutOutboundSequenceRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutOutboundSequenceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutOutboundSequenceRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutOutboundSequenceUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutOutboundSequenceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutOutboundSequenceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutOutboundSequenceServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutOutboundSequenceGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutOutboundSequenceOK creates a PutOutboundSequenceOK with default headers values
func NewPutOutboundSequenceOK() *PutOutboundSequenceOK {
	return &PutOutboundSequenceOK{}
}

/*PutOutboundSequenceOK handles this case with default header values.

successful operation
*/
type PutOutboundSequenceOK struct {
	Payload *models.CampaignSequence
}

func (o *PutOutboundSequenceOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/sequences/{sequenceId}][%d] putOutboundSequenceOK  %+v", 200, o.Payload)
}

func (o *PutOutboundSequenceOK) GetPayload() *models.CampaignSequence {
	return o.Payload
}

func (o *PutOutboundSequenceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CampaignSequence)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundSequenceBadRequest creates a PutOutboundSequenceBadRequest with default headers values
func NewPutOutboundSequenceBadRequest() *PutOutboundSequenceBadRequest {
	return &PutOutboundSequenceBadRequest{}
}

/*PutOutboundSequenceBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutOutboundSequenceBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundSequenceBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/sequences/{sequenceId}][%d] putOutboundSequenceBadRequest  %+v", 400, o.Payload)
}

func (o *PutOutboundSequenceBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundSequenceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundSequenceUnauthorized creates a PutOutboundSequenceUnauthorized with default headers values
func NewPutOutboundSequenceUnauthorized() *PutOutboundSequenceUnauthorized {
	return &PutOutboundSequenceUnauthorized{}
}

/*PutOutboundSequenceUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutOutboundSequenceUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundSequenceUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/sequences/{sequenceId}][%d] putOutboundSequenceUnauthorized  %+v", 401, o.Payload)
}

func (o *PutOutboundSequenceUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundSequenceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundSequenceForbidden creates a PutOutboundSequenceForbidden with default headers values
func NewPutOutboundSequenceForbidden() *PutOutboundSequenceForbidden {
	return &PutOutboundSequenceForbidden{}
}

/*PutOutboundSequenceForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutOutboundSequenceForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundSequenceForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/sequences/{sequenceId}][%d] putOutboundSequenceForbidden  %+v", 403, o.Payload)
}

func (o *PutOutboundSequenceForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundSequenceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundSequenceNotFound creates a PutOutboundSequenceNotFound with default headers values
func NewPutOutboundSequenceNotFound() *PutOutboundSequenceNotFound {
	return &PutOutboundSequenceNotFound{}
}

/*PutOutboundSequenceNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutOutboundSequenceNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundSequenceNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/sequences/{sequenceId}][%d] putOutboundSequenceNotFound  %+v", 404, o.Payload)
}

func (o *PutOutboundSequenceNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundSequenceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundSequenceRequestTimeout creates a PutOutboundSequenceRequestTimeout with default headers values
func NewPutOutboundSequenceRequestTimeout() *PutOutboundSequenceRequestTimeout {
	return &PutOutboundSequenceRequestTimeout{}
}

/*PutOutboundSequenceRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutOutboundSequenceRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundSequenceRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/sequences/{sequenceId}][%d] putOutboundSequenceRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutOutboundSequenceRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundSequenceRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundSequenceConflict creates a PutOutboundSequenceConflict with default headers values
func NewPutOutboundSequenceConflict() *PutOutboundSequenceConflict {
	return &PutOutboundSequenceConflict{}
}

/*PutOutboundSequenceConflict handles this case with default header values.

Conflict
*/
type PutOutboundSequenceConflict struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundSequenceConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/sequences/{sequenceId}][%d] putOutboundSequenceConflict  %+v", 409, o.Payload)
}

func (o *PutOutboundSequenceConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundSequenceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundSequenceRequestEntityTooLarge creates a PutOutboundSequenceRequestEntityTooLarge with default headers values
func NewPutOutboundSequenceRequestEntityTooLarge() *PutOutboundSequenceRequestEntityTooLarge {
	return &PutOutboundSequenceRequestEntityTooLarge{}
}

/*PutOutboundSequenceRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PutOutboundSequenceRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundSequenceRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/sequences/{sequenceId}][%d] putOutboundSequenceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutOutboundSequenceRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundSequenceRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundSequenceUnsupportedMediaType creates a PutOutboundSequenceUnsupportedMediaType with default headers values
func NewPutOutboundSequenceUnsupportedMediaType() *PutOutboundSequenceUnsupportedMediaType {
	return &PutOutboundSequenceUnsupportedMediaType{}
}

/*PutOutboundSequenceUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutOutboundSequenceUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundSequenceUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/sequences/{sequenceId}][%d] putOutboundSequenceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutOutboundSequenceUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundSequenceUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundSequenceTooManyRequests creates a PutOutboundSequenceTooManyRequests with default headers values
func NewPutOutboundSequenceTooManyRequests() *PutOutboundSequenceTooManyRequests {
	return &PutOutboundSequenceTooManyRequests{}
}

/*PutOutboundSequenceTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutOutboundSequenceTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundSequenceTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/sequences/{sequenceId}][%d] putOutboundSequenceTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutOutboundSequenceTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundSequenceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundSequenceInternalServerError creates a PutOutboundSequenceInternalServerError with default headers values
func NewPutOutboundSequenceInternalServerError() *PutOutboundSequenceInternalServerError {
	return &PutOutboundSequenceInternalServerError{}
}

/*PutOutboundSequenceInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutOutboundSequenceInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundSequenceInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/sequences/{sequenceId}][%d] putOutboundSequenceInternalServerError  %+v", 500, o.Payload)
}

func (o *PutOutboundSequenceInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundSequenceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundSequenceServiceUnavailable creates a PutOutboundSequenceServiceUnavailable with default headers values
func NewPutOutboundSequenceServiceUnavailable() *PutOutboundSequenceServiceUnavailable {
	return &PutOutboundSequenceServiceUnavailable{}
}

/*PutOutboundSequenceServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutOutboundSequenceServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundSequenceServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/sequences/{sequenceId}][%d] putOutboundSequenceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutOutboundSequenceServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundSequenceServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundSequenceGatewayTimeout creates a PutOutboundSequenceGatewayTimeout with default headers values
func NewPutOutboundSequenceGatewayTimeout() *PutOutboundSequenceGatewayTimeout {
	return &PutOutboundSequenceGatewayTimeout{}
}

/*PutOutboundSequenceGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutOutboundSequenceGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundSequenceGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/sequences/{sequenceId}][%d] putOutboundSequenceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutOutboundSequenceGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundSequenceGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

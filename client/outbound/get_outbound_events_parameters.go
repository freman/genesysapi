// Code generated by go-swagger; DO NOT EDIT.

package outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOutboundEventsParams creates a new GetOutboundEventsParams object
// with the default values initialized.
func NewGetOutboundEventsParams() *GetOutboundEventsParams {
	var (
		filterTypeDefault = string("Prefix")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortOrderDefault  = string("a")
	)
	return &GetOutboundEventsParams{
		FilterType: &filterTypeDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortOrder:  &sortOrderDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOutboundEventsParamsWithTimeout creates a new GetOutboundEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOutboundEventsParamsWithTimeout(timeout time.Duration) *GetOutboundEventsParams {
	var (
		filterTypeDefault = string("Prefix")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortOrderDefault  = string("a")
	)
	return &GetOutboundEventsParams{
		FilterType: &filterTypeDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortOrder:  &sortOrderDefault,

		timeout: timeout,
	}
}

// NewGetOutboundEventsParamsWithContext creates a new GetOutboundEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOutboundEventsParamsWithContext(ctx context.Context) *GetOutboundEventsParams {
	var (
		filterTypeDefault = string("Prefix")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortOrderDefault  = string("a")
	)
	return &GetOutboundEventsParams{
		FilterType: &filterTypeDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortOrder:  &sortOrderDefault,

		Context: ctx,
	}
}

// NewGetOutboundEventsParamsWithHTTPClient creates a new GetOutboundEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOutboundEventsParamsWithHTTPClient(client *http.Client) *GetOutboundEventsParams {
	var (
		filterTypeDefault = string("Prefix")
		pageNumberDefault = int32(1)
		pageSizeDefault   = int32(25)
		sortOrderDefault  = string("a")
	)
	return &GetOutboundEventsParams{
		FilterType: &filterTypeDefault,
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortOrder:  &sortOrderDefault,
		HTTPClient: client,
	}
}

/*GetOutboundEventsParams contains all the parameters to send to the API endpoint
for the get outbound events operation typically these are written to a http.Request
*/
type GetOutboundEventsParams struct {

	/*Category
	  Category

	*/
	Category *string
	/*FilterType
	  Filter type

	*/
	FilterType *string
	/*Level
	  Level

	*/
	Level *string
	/*PageNumber
	  Page number

	*/
	PageNumber *int32
	/*PageSize
	  Page size

	*/
	PageSize *int32
	/*SortBy
	  Sort by

	*/
	SortBy *string
	/*SortOrder
	  Sort order

	*/
	SortOrder *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get outbound events params
func (o *GetOutboundEventsParams) WithTimeout(timeout time.Duration) *GetOutboundEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get outbound events params
func (o *GetOutboundEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get outbound events params
func (o *GetOutboundEventsParams) WithContext(ctx context.Context) *GetOutboundEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get outbound events params
func (o *GetOutboundEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get outbound events params
func (o *GetOutboundEventsParams) WithHTTPClient(client *http.Client) *GetOutboundEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get outbound events params
func (o *GetOutboundEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the get outbound events params
func (o *GetOutboundEventsParams) WithCategory(category *string) *GetOutboundEventsParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the get outbound events params
func (o *GetOutboundEventsParams) SetCategory(category *string) {
	o.Category = category
}

// WithFilterType adds the filterType to the get outbound events params
func (o *GetOutboundEventsParams) WithFilterType(filterType *string) *GetOutboundEventsParams {
	o.SetFilterType(filterType)
	return o
}

// SetFilterType adds the filterType to the get outbound events params
func (o *GetOutboundEventsParams) SetFilterType(filterType *string) {
	o.FilterType = filterType
}

// WithLevel adds the level to the get outbound events params
func (o *GetOutboundEventsParams) WithLevel(level *string) *GetOutboundEventsParams {
	o.SetLevel(level)
	return o
}

// SetLevel adds the level to the get outbound events params
func (o *GetOutboundEventsParams) SetLevel(level *string) {
	o.Level = level
}

// WithPageNumber adds the pageNumber to the get outbound events params
func (o *GetOutboundEventsParams) WithPageNumber(pageNumber *int32) *GetOutboundEventsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get outbound events params
func (o *GetOutboundEventsParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get outbound events params
func (o *GetOutboundEventsParams) WithPageSize(pageSize *int32) *GetOutboundEventsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get outbound events params
func (o *GetOutboundEventsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithSortBy adds the sortBy to the get outbound events params
func (o *GetOutboundEventsParams) WithSortBy(sortBy *string) *GetOutboundEventsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get outbound events params
func (o *GetOutboundEventsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortOrder adds the sortOrder to the get outbound events params
func (o *GetOutboundEventsParams) WithSortOrder(sortOrder *string) *GetOutboundEventsParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get outbound events params
func (o *GetOutboundEventsParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WriteToRequest writes these params to a swagger request
func (o *GetOutboundEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Category != nil {

		// query param category
		var qrCategory string
		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := qrCategory
		if qCategory != "" {
			if err := r.SetQueryParam("category", qCategory); err != nil {
				return err
			}
		}

	}

	if o.FilterType != nil {

		// query param filterType
		var qrFilterType string
		if o.FilterType != nil {
			qrFilterType = *o.FilterType
		}
		qFilterType := qrFilterType
		if qFilterType != "" {
			if err := r.SetQueryParam("filterType", qFilterType); err != nil {
				return err
			}
		}

	}

	if o.Level != nil {

		// query param level
		var qrLevel string
		if o.Level != nil {
			qrLevel = *o.Level
		}
		qLevel := qrLevel
		if qLevel != "" {
			if err := r.SetQueryParam("level", qLevel); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string
		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {
			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetOutboundDigitalrulesetReader is a Reader for the GetOutboundDigitalruleset structure.
type GetOutboundDigitalrulesetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOutboundDigitalrulesetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOutboundDigitalrulesetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOutboundDigitalrulesetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOutboundDigitalrulesetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOutboundDigitalrulesetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOutboundDigitalrulesetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetOutboundDigitalrulesetRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetOutboundDigitalrulesetRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetOutboundDigitalrulesetUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOutboundDigitalrulesetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOutboundDigitalrulesetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetOutboundDigitalrulesetServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetOutboundDigitalrulesetGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOutboundDigitalrulesetOK creates a GetOutboundDigitalrulesetOK with default headers values
func NewGetOutboundDigitalrulesetOK() *GetOutboundDigitalrulesetOK {
	return &GetOutboundDigitalrulesetOK{}
}

/*
GetOutboundDigitalrulesetOK describes a response with status code 200, with default header values.

successful operation
*/
type GetOutboundDigitalrulesetOK struct {
	Payload *models.DigitalRuleSet
}

// IsSuccess returns true when this get outbound digitalruleset o k response has a 2xx status code
func (o *GetOutboundDigitalrulesetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get outbound digitalruleset o k response has a 3xx status code
func (o *GetOutboundDigitalrulesetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound digitalruleset o k response has a 4xx status code
func (o *GetOutboundDigitalrulesetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get outbound digitalruleset o k response has a 5xx status code
func (o *GetOutboundDigitalrulesetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound digitalruleset o k response a status code equal to that given
func (o *GetOutboundDigitalrulesetOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetOutboundDigitalrulesetOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetOK  %+v", 200, o.Payload)
}

func (o *GetOutboundDigitalrulesetOK) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetOK  %+v", 200, o.Payload)
}

func (o *GetOutboundDigitalrulesetOK) GetPayload() *models.DigitalRuleSet {
	return o.Payload
}

func (o *GetOutboundDigitalrulesetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DigitalRuleSet)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundDigitalrulesetBadRequest creates a GetOutboundDigitalrulesetBadRequest with default headers values
func NewGetOutboundDigitalrulesetBadRequest() *GetOutboundDigitalrulesetBadRequest {
	return &GetOutboundDigitalrulesetBadRequest{}
}

/*
GetOutboundDigitalrulesetBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetOutboundDigitalrulesetBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound digitalruleset bad request response has a 2xx status code
func (o *GetOutboundDigitalrulesetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound digitalruleset bad request response has a 3xx status code
func (o *GetOutboundDigitalrulesetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound digitalruleset bad request response has a 4xx status code
func (o *GetOutboundDigitalrulesetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound digitalruleset bad request response has a 5xx status code
func (o *GetOutboundDigitalrulesetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound digitalruleset bad request response a status code equal to that given
func (o *GetOutboundDigitalrulesetBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetOutboundDigitalrulesetBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetBadRequest  %+v", 400, o.Payload)
}

func (o *GetOutboundDigitalrulesetBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetBadRequest  %+v", 400, o.Payload)
}

func (o *GetOutboundDigitalrulesetBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundDigitalrulesetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundDigitalrulesetUnauthorized creates a GetOutboundDigitalrulesetUnauthorized with default headers values
func NewGetOutboundDigitalrulesetUnauthorized() *GetOutboundDigitalrulesetUnauthorized {
	return &GetOutboundDigitalrulesetUnauthorized{}
}

/*
GetOutboundDigitalrulesetUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetOutboundDigitalrulesetUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound digitalruleset unauthorized response has a 2xx status code
func (o *GetOutboundDigitalrulesetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound digitalruleset unauthorized response has a 3xx status code
func (o *GetOutboundDigitalrulesetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound digitalruleset unauthorized response has a 4xx status code
func (o *GetOutboundDigitalrulesetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound digitalruleset unauthorized response has a 5xx status code
func (o *GetOutboundDigitalrulesetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound digitalruleset unauthorized response a status code equal to that given
func (o *GetOutboundDigitalrulesetUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetOutboundDigitalrulesetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOutboundDigitalrulesetUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOutboundDigitalrulesetUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundDigitalrulesetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundDigitalrulesetForbidden creates a GetOutboundDigitalrulesetForbidden with default headers values
func NewGetOutboundDigitalrulesetForbidden() *GetOutboundDigitalrulesetForbidden {
	return &GetOutboundDigitalrulesetForbidden{}
}

/*
GetOutboundDigitalrulesetForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetOutboundDigitalrulesetForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound digitalruleset forbidden response has a 2xx status code
func (o *GetOutboundDigitalrulesetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound digitalruleset forbidden response has a 3xx status code
func (o *GetOutboundDigitalrulesetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound digitalruleset forbidden response has a 4xx status code
func (o *GetOutboundDigitalrulesetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound digitalruleset forbidden response has a 5xx status code
func (o *GetOutboundDigitalrulesetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound digitalruleset forbidden response a status code equal to that given
func (o *GetOutboundDigitalrulesetForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetOutboundDigitalrulesetForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetForbidden  %+v", 403, o.Payload)
}

func (o *GetOutboundDigitalrulesetForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetForbidden  %+v", 403, o.Payload)
}

func (o *GetOutboundDigitalrulesetForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundDigitalrulesetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundDigitalrulesetNotFound creates a GetOutboundDigitalrulesetNotFound with default headers values
func NewGetOutboundDigitalrulesetNotFound() *GetOutboundDigitalrulesetNotFound {
	return &GetOutboundDigitalrulesetNotFound{}
}

/*
GetOutboundDigitalrulesetNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetOutboundDigitalrulesetNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound digitalruleset not found response has a 2xx status code
func (o *GetOutboundDigitalrulesetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound digitalruleset not found response has a 3xx status code
func (o *GetOutboundDigitalrulesetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound digitalruleset not found response has a 4xx status code
func (o *GetOutboundDigitalrulesetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound digitalruleset not found response has a 5xx status code
func (o *GetOutboundDigitalrulesetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound digitalruleset not found response a status code equal to that given
func (o *GetOutboundDigitalrulesetNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetOutboundDigitalrulesetNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetNotFound  %+v", 404, o.Payload)
}

func (o *GetOutboundDigitalrulesetNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetNotFound  %+v", 404, o.Payload)
}

func (o *GetOutboundDigitalrulesetNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundDigitalrulesetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundDigitalrulesetRequestTimeout creates a GetOutboundDigitalrulesetRequestTimeout with default headers values
func NewGetOutboundDigitalrulesetRequestTimeout() *GetOutboundDigitalrulesetRequestTimeout {
	return &GetOutboundDigitalrulesetRequestTimeout{}
}

/*
GetOutboundDigitalrulesetRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetOutboundDigitalrulesetRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound digitalruleset request timeout response has a 2xx status code
func (o *GetOutboundDigitalrulesetRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound digitalruleset request timeout response has a 3xx status code
func (o *GetOutboundDigitalrulesetRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound digitalruleset request timeout response has a 4xx status code
func (o *GetOutboundDigitalrulesetRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound digitalruleset request timeout response has a 5xx status code
func (o *GetOutboundDigitalrulesetRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound digitalruleset request timeout response a status code equal to that given
func (o *GetOutboundDigitalrulesetRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetOutboundDigitalrulesetRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetOutboundDigitalrulesetRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetOutboundDigitalrulesetRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundDigitalrulesetRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundDigitalrulesetRequestEntityTooLarge creates a GetOutboundDigitalrulesetRequestEntityTooLarge with default headers values
func NewGetOutboundDigitalrulesetRequestEntityTooLarge() *GetOutboundDigitalrulesetRequestEntityTooLarge {
	return &GetOutboundDigitalrulesetRequestEntityTooLarge{}
}

/*
GetOutboundDigitalrulesetRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetOutboundDigitalrulesetRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound digitalruleset request entity too large response has a 2xx status code
func (o *GetOutboundDigitalrulesetRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound digitalruleset request entity too large response has a 3xx status code
func (o *GetOutboundDigitalrulesetRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound digitalruleset request entity too large response has a 4xx status code
func (o *GetOutboundDigitalrulesetRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound digitalruleset request entity too large response has a 5xx status code
func (o *GetOutboundDigitalrulesetRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound digitalruleset request entity too large response a status code equal to that given
func (o *GetOutboundDigitalrulesetRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetOutboundDigitalrulesetRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOutboundDigitalrulesetRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOutboundDigitalrulesetRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundDigitalrulesetRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundDigitalrulesetUnsupportedMediaType creates a GetOutboundDigitalrulesetUnsupportedMediaType with default headers values
func NewGetOutboundDigitalrulesetUnsupportedMediaType() *GetOutboundDigitalrulesetUnsupportedMediaType {
	return &GetOutboundDigitalrulesetUnsupportedMediaType{}
}

/*
GetOutboundDigitalrulesetUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetOutboundDigitalrulesetUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound digitalruleset unsupported media type response has a 2xx status code
func (o *GetOutboundDigitalrulesetUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound digitalruleset unsupported media type response has a 3xx status code
func (o *GetOutboundDigitalrulesetUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound digitalruleset unsupported media type response has a 4xx status code
func (o *GetOutboundDigitalrulesetUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound digitalruleset unsupported media type response has a 5xx status code
func (o *GetOutboundDigitalrulesetUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound digitalruleset unsupported media type response a status code equal to that given
func (o *GetOutboundDigitalrulesetUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetOutboundDigitalrulesetUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOutboundDigitalrulesetUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOutboundDigitalrulesetUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundDigitalrulesetUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundDigitalrulesetTooManyRequests creates a GetOutboundDigitalrulesetTooManyRequests with default headers values
func NewGetOutboundDigitalrulesetTooManyRequests() *GetOutboundDigitalrulesetTooManyRequests {
	return &GetOutboundDigitalrulesetTooManyRequests{}
}

/*
GetOutboundDigitalrulesetTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetOutboundDigitalrulesetTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound digitalruleset too many requests response has a 2xx status code
func (o *GetOutboundDigitalrulesetTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound digitalruleset too many requests response has a 3xx status code
func (o *GetOutboundDigitalrulesetTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound digitalruleset too many requests response has a 4xx status code
func (o *GetOutboundDigitalrulesetTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound digitalruleset too many requests response has a 5xx status code
func (o *GetOutboundDigitalrulesetTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound digitalruleset too many requests response a status code equal to that given
func (o *GetOutboundDigitalrulesetTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetOutboundDigitalrulesetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOutboundDigitalrulesetTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOutboundDigitalrulesetTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundDigitalrulesetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundDigitalrulesetInternalServerError creates a GetOutboundDigitalrulesetInternalServerError with default headers values
func NewGetOutboundDigitalrulesetInternalServerError() *GetOutboundDigitalrulesetInternalServerError {
	return &GetOutboundDigitalrulesetInternalServerError{}
}

/*
GetOutboundDigitalrulesetInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetOutboundDigitalrulesetInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound digitalruleset internal server error response has a 2xx status code
func (o *GetOutboundDigitalrulesetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound digitalruleset internal server error response has a 3xx status code
func (o *GetOutboundDigitalrulesetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound digitalruleset internal server error response has a 4xx status code
func (o *GetOutboundDigitalrulesetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get outbound digitalruleset internal server error response has a 5xx status code
func (o *GetOutboundDigitalrulesetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get outbound digitalruleset internal server error response a status code equal to that given
func (o *GetOutboundDigitalrulesetInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetOutboundDigitalrulesetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOutboundDigitalrulesetInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOutboundDigitalrulesetInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundDigitalrulesetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundDigitalrulesetServiceUnavailable creates a GetOutboundDigitalrulesetServiceUnavailable with default headers values
func NewGetOutboundDigitalrulesetServiceUnavailable() *GetOutboundDigitalrulesetServiceUnavailable {
	return &GetOutboundDigitalrulesetServiceUnavailable{}
}

/*
GetOutboundDigitalrulesetServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetOutboundDigitalrulesetServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound digitalruleset service unavailable response has a 2xx status code
func (o *GetOutboundDigitalrulesetServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound digitalruleset service unavailable response has a 3xx status code
func (o *GetOutboundDigitalrulesetServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound digitalruleset service unavailable response has a 4xx status code
func (o *GetOutboundDigitalrulesetServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get outbound digitalruleset service unavailable response has a 5xx status code
func (o *GetOutboundDigitalrulesetServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get outbound digitalruleset service unavailable response a status code equal to that given
func (o *GetOutboundDigitalrulesetServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetOutboundDigitalrulesetServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOutboundDigitalrulesetServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOutboundDigitalrulesetServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundDigitalrulesetServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundDigitalrulesetGatewayTimeout creates a GetOutboundDigitalrulesetGatewayTimeout with default headers values
func NewGetOutboundDigitalrulesetGatewayTimeout() *GetOutboundDigitalrulesetGatewayTimeout {
	return &GetOutboundDigitalrulesetGatewayTimeout{}
}

/*
GetOutboundDigitalrulesetGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetOutboundDigitalrulesetGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound digitalruleset gateway timeout response has a 2xx status code
func (o *GetOutboundDigitalrulesetGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound digitalruleset gateway timeout response has a 3xx status code
func (o *GetOutboundDigitalrulesetGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound digitalruleset gateway timeout response has a 4xx status code
func (o *GetOutboundDigitalrulesetGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get outbound digitalruleset gateway timeout response has a 5xx status code
func (o *GetOutboundDigitalrulesetGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get outbound digitalruleset gateway timeout response a status code equal to that given
func (o *GetOutboundDigitalrulesetGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetOutboundDigitalrulesetGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetOutboundDigitalrulesetGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] getOutboundDigitalrulesetGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetOutboundDigitalrulesetGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundDigitalrulesetGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

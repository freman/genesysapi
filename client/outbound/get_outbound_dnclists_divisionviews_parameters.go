// Code generated by go-swagger; DO NOT EDIT.

package outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOutboundDnclistsDivisionviewsParams creates a new GetOutboundDnclistsDivisionviewsParams object
// with the default values initialized.
func NewGetOutboundDnclistsDivisionviewsParams() *GetOutboundDnclistsDivisionviewsParams {
	var (
		filterTypeDefault          = string("Prefix")
		includeImportStatusDefault = bool(false)
		includeSizeDefault         = bool(false)
		pageNumberDefault          = int32(1)
		pageSizeDefault            = int32(25)
		sortOrderDefault           = string("a")
	)
	return &GetOutboundDnclistsDivisionviewsParams{
		FilterType:          &filterTypeDefault,
		IncludeImportStatus: &includeImportStatusDefault,
		IncludeSize:         &includeSizeDefault,
		PageNumber:          &pageNumberDefault,
		PageSize:            &pageSizeDefault,
		SortOrder:           &sortOrderDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOutboundDnclistsDivisionviewsParamsWithTimeout creates a new GetOutboundDnclistsDivisionviewsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOutboundDnclistsDivisionviewsParamsWithTimeout(timeout time.Duration) *GetOutboundDnclistsDivisionviewsParams {
	var (
		filterTypeDefault          = string("Prefix")
		includeImportStatusDefault = bool(false)
		includeSizeDefault         = bool(false)
		pageNumberDefault          = int32(1)
		pageSizeDefault            = int32(25)
		sortOrderDefault           = string("a")
	)
	return &GetOutboundDnclistsDivisionviewsParams{
		FilterType:          &filterTypeDefault,
		IncludeImportStatus: &includeImportStatusDefault,
		IncludeSize:         &includeSizeDefault,
		PageNumber:          &pageNumberDefault,
		PageSize:            &pageSizeDefault,
		SortOrder:           &sortOrderDefault,

		timeout: timeout,
	}
}

// NewGetOutboundDnclistsDivisionviewsParamsWithContext creates a new GetOutboundDnclistsDivisionviewsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOutboundDnclistsDivisionviewsParamsWithContext(ctx context.Context) *GetOutboundDnclistsDivisionviewsParams {
	var (
		filterTypeDefault          = string("Prefix")
		includeImportStatusDefault = bool(false)
		includeSizeDefault         = bool(false)
		pageNumberDefault          = int32(1)
		pageSizeDefault            = int32(25)
		sortOrderDefault           = string("a")
	)
	return &GetOutboundDnclistsDivisionviewsParams{
		FilterType:          &filterTypeDefault,
		IncludeImportStatus: &includeImportStatusDefault,
		IncludeSize:         &includeSizeDefault,
		PageNumber:          &pageNumberDefault,
		PageSize:            &pageSizeDefault,
		SortOrder:           &sortOrderDefault,

		Context: ctx,
	}
}

// NewGetOutboundDnclistsDivisionviewsParamsWithHTTPClient creates a new GetOutboundDnclistsDivisionviewsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOutboundDnclistsDivisionviewsParamsWithHTTPClient(client *http.Client) *GetOutboundDnclistsDivisionviewsParams {
	var (
		filterTypeDefault          = string("Prefix")
		includeImportStatusDefault = bool(false)
		includeSizeDefault         = bool(false)
		pageNumberDefault          = int32(1)
		pageSizeDefault            = int32(25)
		sortOrderDefault           = string("a")
	)
	return &GetOutboundDnclistsDivisionviewsParams{
		FilterType:          &filterTypeDefault,
		IncludeImportStatus: &includeImportStatusDefault,
		IncludeSize:         &includeSizeDefault,
		PageNumber:          &pageNumberDefault,
		PageSize:            &pageSizeDefault,
		SortOrder:           &sortOrderDefault,
		HTTPClient:          client,
	}
}

/*GetOutboundDnclistsDivisionviewsParams contains all the parameters to send to the API endpoint
for the get outbound dnclists divisionviews operation typically these are written to a http.Request
*/
type GetOutboundDnclistsDivisionviewsParams struct {

	/*DncSourceType
	  DncSourceType

	*/
	DncSourceType *string
	/*FilterType
	  Filter type

	*/
	FilterType *string
	/*ID
	  id

	*/
	ID []string
	/*IncludeImportStatus
	  Include import status

	*/
	IncludeImportStatus *bool
	/*IncludeSize
	  Include size

	*/
	IncludeSize *bool
	/*Name
	  Name

	*/
	Name *string
	/*PageNumber
	  Page number

	*/
	PageNumber *int32
	/*PageSize
	  Page size. The max that will be returned is 100.

	*/
	PageSize *int32
	/*SortBy
	  Sort by

	*/
	SortBy *string
	/*SortOrder
	  Sort order

	*/
	SortOrder *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) WithTimeout(timeout time.Duration) *GetOutboundDnclistsDivisionviewsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) WithContext(ctx context.Context) *GetOutboundDnclistsDivisionviewsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) WithHTTPClient(client *http.Client) *GetOutboundDnclistsDivisionviewsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDncSourceType adds the dncSourceType to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) WithDncSourceType(dncSourceType *string) *GetOutboundDnclistsDivisionviewsParams {
	o.SetDncSourceType(dncSourceType)
	return o
}

// SetDncSourceType adds the dncSourceType to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) SetDncSourceType(dncSourceType *string) {
	o.DncSourceType = dncSourceType
}

// WithFilterType adds the filterType to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) WithFilterType(filterType *string) *GetOutboundDnclistsDivisionviewsParams {
	o.SetFilterType(filterType)
	return o
}

// SetFilterType adds the filterType to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) SetFilterType(filterType *string) {
	o.FilterType = filterType
}

// WithID adds the id to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) WithID(id []string) *GetOutboundDnclistsDivisionviewsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) SetID(id []string) {
	o.ID = id
}

// WithIncludeImportStatus adds the includeImportStatus to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) WithIncludeImportStatus(includeImportStatus *bool) *GetOutboundDnclistsDivisionviewsParams {
	o.SetIncludeImportStatus(includeImportStatus)
	return o
}

// SetIncludeImportStatus adds the includeImportStatus to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) SetIncludeImportStatus(includeImportStatus *bool) {
	o.IncludeImportStatus = includeImportStatus
}

// WithIncludeSize adds the includeSize to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) WithIncludeSize(includeSize *bool) *GetOutboundDnclistsDivisionviewsParams {
	o.SetIncludeSize(includeSize)
	return o
}

// SetIncludeSize adds the includeSize to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) SetIncludeSize(includeSize *bool) {
	o.IncludeSize = includeSize
}

// WithName adds the name to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) WithName(name *string) *GetOutboundDnclistsDivisionviewsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) SetName(name *string) {
	o.Name = name
}

// WithPageNumber adds the pageNumber to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) WithPageNumber(pageNumber *int32) *GetOutboundDnclistsDivisionviewsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) WithPageSize(pageSize *int32) *GetOutboundDnclistsDivisionviewsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithSortBy adds the sortBy to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) WithSortBy(sortBy *string) *GetOutboundDnclistsDivisionviewsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortOrder adds the sortOrder to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) WithSortOrder(sortOrder *string) *GetOutboundDnclistsDivisionviewsParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get outbound dnclists divisionviews params
func (o *GetOutboundDnclistsDivisionviewsParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WriteToRequest writes these params to a swagger request
func (o *GetOutboundDnclistsDivisionviewsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DncSourceType != nil {

		// query param dncSourceType
		var qrDncSourceType string
		if o.DncSourceType != nil {
			qrDncSourceType = *o.DncSourceType
		}
		qDncSourceType := qrDncSourceType
		if qDncSourceType != "" {
			if err := r.SetQueryParam("dncSourceType", qDncSourceType); err != nil {
				return err
			}
		}

	}

	if o.FilterType != nil {

		// query param filterType
		var qrFilterType string
		if o.FilterType != nil {
			qrFilterType = *o.FilterType
		}
		qFilterType := qrFilterType
		if qFilterType != "" {
			if err := r.SetQueryParam("filterType", qFilterType); err != nil {
				return err
			}
		}

	}

	valuesID := o.ID

	joinedID := swag.JoinByFormat(valuesID, "multi")
	// query array param id
	if err := r.SetQueryParam("id", joinedID...); err != nil {
		return err
	}

	if o.IncludeImportStatus != nil {

		// query param includeImportStatus
		var qrIncludeImportStatus bool
		if o.IncludeImportStatus != nil {
			qrIncludeImportStatus = *o.IncludeImportStatus
		}
		qIncludeImportStatus := swag.FormatBool(qrIncludeImportStatus)
		if qIncludeImportStatus != "" {
			if err := r.SetQueryParam("includeImportStatus", qIncludeImportStatus); err != nil {
				return err
			}
		}

	}

	if o.IncludeSize != nil {

		// query param includeSize
		var qrIncludeSize bool
		if o.IncludeSize != nil {
			qrIncludeSize = *o.IncludeSize
		}
		qIncludeSize := swag.FormatBool(qrIncludeSize)
		if qIncludeSize != "" {
			if err := r.SetQueryParam("includeSize", qIncludeSize); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string
		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {
			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostOutboundDigitalrulesetsReader is a Reader for the PostOutboundDigitalrulesets structure.
type PostOutboundDigitalrulesetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostOutboundDigitalrulesetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostOutboundDigitalrulesetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostOutboundDigitalrulesetsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostOutboundDigitalrulesetsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostOutboundDigitalrulesetsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostOutboundDigitalrulesetsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostOutboundDigitalrulesetsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostOutboundDigitalrulesetsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostOutboundDigitalrulesetsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostOutboundDigitalrulesetsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostOutboundDigitalrulesetsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostOutboundDigitalrulesetsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostOutboundDigitalrulesetsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostOutboundDigitalrulesetsOK creates a PostOutboundDigitalrulesetsOK with default headers values
func NewPostOutboundDigitalrulesetsOK() *PostOutboundDigitalrulesetsOK {
	return &PostOutboundDigitalrulesetsOK{}
}

/*
PostOutboundDigitalrulesetsOK describes a response with status code 200, with default header values.

successful operation
*/
type PostOutboundDigitalrulesetsOK struct {
	Payload *models.DigitalRuleSet
}

// IsSuccess returns true when this post outbound digitalrulesets o k response has a 2xx status code
func (o *PostOutboundDigitalrulesetsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post outbound digitalrulesets o k response has a 3xx status code
func (o *PostOutboundDigitalrulesetsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound digitalrulesets o k response has a 4xx status code
func (o *PostOutboundDigitalrulesetsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post outbound digitalrulesets o k response has a 5xx status code
func (o *PostOutboundDigitalrulesetsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound digitalrulesets o k response a status code equal to that given
func (o *PostOutboundDigitalrulesetsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostOutboundDigitalrulesetsOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsOK  %+v", 200, o.Payload)
}

func (o *PostOutboundDigitalrulesetsOK) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsOK  %+v", 200, o.Payload)
}

func (o *PostOutboundDigitalrulesetsOK) GetPayload() *models.DigitalRuleSet {
	return o.Payload
}

func (o *PostOutboundDigitalrulesetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DigitalRuleSet)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundDigitalrulesetsBadRequest creates a PostOutboundDigitalrulesetsBadRequest with default headers values
func NewPostOutboundDigitalrulesetsBadRequest() *PostOutboundDigitalrulesetsBadRequest {
	return &PostOutboundDigitalrulesetsBadRequest{}
}

/*
PostOutboundDigitalrulesetsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostOutboundDigitalrulesetsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound digitalrulesets bad request response has a 2xx status code
func (o *PostOutboundDigitalrulesetsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound digitalrulesets bad request response has a 3xx status code
func (o *PostOutboundDigitalrulesetsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound digitalrulesets bad request response has a 4xx status code
func (o *PostOutboundDigitalrulesetsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound digitalrulesets bad request response has a 5xx status code
func (o *PostOutboundDigitalrulesetsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound digitalrulesets bad request response a status code equal to that given
func (o *PostOutboundDigitalrulesetsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostOutboundDigitalrulesetsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsBadRequest  %+v", 400, o.Payload)
}

func (o *PostOutboundDigitalrulesetsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsBadRequest  %+v", 400, o.Payload)
}

func (o *PostOutboundDigitalrulesetsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundDigitalrulesetsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundDigitalrulesetsUnauthorized creates a PostOutboundDigitalrulesetsUnauthorized with default headers values
func NewPostOutboundDigitalrulesetsUnauthorized() *PostOutboundDigitalrulesetsUnauthorized {
	return &PostOutboundDigitalrulesetsUnauthorized{}
}

/*
PostOutboundDigitalrulesetsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostOutboundDigitalrulesetsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound digitalrulesets unauthorized response has a 2xx status code
func (o *PostOutboundDigitalrulesetsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound digitalrulesets unauthorized response has a 3xx status code
func (o *PostOutboundDigitalrulesetsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound digitalrulesets unauthorized response has a 4xx status code
func (o *PostOutboundDigitalrulesetsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound digitalrulesets unauthorized response has a 5xx status code
func (o *PostOutboundDigitalrulesetsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound digitalrulesets unauthorized response a status code equal to that given
func (o *PostOutboundDigitalrulesetsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostOutboundDigitalrulesetsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostOutboundDigitalrulesetsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostOutboundDigitalrulesetsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundDigitalrulesetsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundDigitalrulesetsForbidden creates a PostOutboundDigitalrulesetsForbidden with default headers values
func NewPostOutboundDigitalrulesetsForbidden() *PostOutboundDigitalrulesetsForbidden {
	return &PostOutboundDigitalrulesetsForbidden{}
}

/*
PostOutboundDigitalrulesetsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostOutboundDigitalrulesetsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound digitalrulesets forbidden response has a 2xx status code
func (o *PostOutboundDigitalrulesetsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound digitalrulesets forbidden response has a 3xx status code
func (o *PostOutboundDigitalrulesetsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound digitalrulesets forbidden response has a 4xx status code
func (o *PostOutboundDigitalrulesetsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound digitalrulesets forbidden response has a 5xx status code
func (o *PostOutboundDigitalrulesetsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound digitalrulesets forbidden response a status code equal to that given
func (o *PostOutboundDigitalrulesetsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostOutboundDigitalrulesetsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsForbidden  %+v", 403, o.Payload)
}

func (o *PostOutboundDigitalrulesetsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsForbidden  %+v", 403, o.Payload)
}

func (o *PostOutboundDigitalrulesetsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundDigitalrulesetsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundDigitalrulesetsNotFound creates a PostOutboundDigitalrulesetsNotFound with default headers values
func NewPostOutboundDigitalrulesetsNotFound() *PostOutboundDigitalrulesetsNotFound {
	return &PostOutboundDigitalrulesetsNotFound{}
}

/*
PostOutboundDigitalrulesetsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostOutboundDigitalrulesetsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound digitalrulesets not found response has a 2xx status code
func (o *PostOutboundDigitalrulesetsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound digitalrulesets not found response has a 3xx status code
func (o *PostOutboundDigitalrulesetsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound digitalrulesets not found response has a 4xx status code
func (o *PostOutboundDigitalrulesetsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound digitalrulesets not found response has a 5xx status code
func (o *PostOutboundDigitalrulesetsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound digitalrulesets not found response a status code equal to that given
func (o *PostOutboundDigitalrulesetsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostOutboundDigitalrulesetsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsNotFound  %+v", 404, o.Payload)
}

func (o *PostOutboundDigitalrulesetsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsNotFound  %+v", 404, o.Payload)
}

func (o *PostOutboundDigitalrulesetsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundDigitalrulesetsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundDigitalrulesetsRequestTimeout creates a PostOutboundDigitalrulesetsRequestTimeout with default headers values
func NewPostOutboundDigitalrulesetsRequestTimeout() *PostOutboundDigitalrulesetsRequestTimeout {
	return &PostOutboundDigitalrulesetsRequestTimeout{}
}

/*
PostOutboundDigitalrulesetsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostOutboundDigitalrulesetsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound digitalrulesets request timeout response has a 2xx status code
func (o *PostOutboundDigitalrulesetsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound digitalrulesets request timeout response has a 3xx status code
func (o *PostOutboundDigitalrulesetsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound digitalrulesets request timeout response has a 4xx status code
func (o *PostOutboundDigitalrulesetsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound digitalrulesets request timeout response has a 5xx status code
func (o *PostOutboundDigitalrulesetsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound digitalrulesets request timeout response a status code equal to that given
func (o *PostOutboundDigitalrulesetsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostOutboundDigitalrulesetsRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostOutboundDigitalrulesetsRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostOutboundDigitalrulesetsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundDigitalrulesetsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundDigitalrulesetsRequestEntityTooLarge creates a PostOutboundDigitalrulesetsRequestEntityTooLarge with default headers values
func NewPostOutboundDigitalrulesetsRequestEntityTooLarge() *PostOutboundDigitalrulesetsRequestEntityTooLarge {
	return &PostOutboundDigitalrulesetsRequestEntityTooLarge{}
}

/*
PostOutboundDigitalrulesetsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostOutboundDigitalrulesetsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound digitalrulesets request entity too large response has a 2xx status code
func (o *PostOutboundDigitalrulesetsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound digitalrulesets request entity too large response has a 3xx status code
func (o *PostOutboundDigitalrulesetsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound digitalrulesets request entity too large response has a 4xx status code
func (o *PostOutboundDigitalrulesetsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound digitalrulesets request entity too large response has a 5xx status code
func (o *PostOutboundDigitalrulesetsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound digitalrulesets request entity too large response a status code equal to that given
func (o *PostOutboundDigitalrulesetsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostOutboundDigitalrulesetsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostOutboundDigitalrulesetsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostOutboundDigitalrulesetsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundDigitalrulesetsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundDigitalrulesetsUnsupportedMediaType creates a PostOutboundDigitalrulesetsUnsupportedMediaType with default headers values
func NewPostOutboundDigitalrulesetsUnsupportedMediaType() *PostOutboundDigitalrulesetsUnsupportedMediaType {
	return &PostOutboundDigitalrulesetsUnsupportedMediaType{}
}

/*
PostOutboundDigitalrulesetsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostOutboundDigitalrulesetsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound digitalrulesets unsupported media type response has a 2xx status code
func (o *PostOutboundDigitalrulesetsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound digitalrulesets unsupported media type response has a 3xx status code
func (o *PostOutboundDigitalrulesetsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound digitalrulesets unsupported media type response has a 4xx status code
func (o *PostOutboundDigitalrulesetsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound digitalrulesets unsupported media type response has a 5xx status code
func (o *PostOutboundDigitalrulesetsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound digitalrulesets unsupported media type response a status code equal to that given
func (o *PostOutboundDigitalrulesetsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostOutboundDigitalrulesetsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostOutboundDigitalrulesetsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostOutboundDigitalrulesetsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundDigitalrulesetsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundDigitalrulesetsTooManyRequests creates a PostOutboundDigitalrulesetsTooManyRequests with default headers values
func NewPostOutboundDigitalrulesetsTooManyRequests() *PostOutboundDigitalrulesetsTooManyRequests {
	return &PostOutboundDigitalrulesetsTooManyRequests{}
}

/*
PostOutboundDigitalrulesetsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostOutboundDigitalrulesetsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound digitalrulesets too many requests response has a 2xx status code
func (o *PostOutboundDigitalrulesetsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound digitalrulesets too many requests response has a 3xx status code
func (o *PostOutboundDigitalrulesetsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound digitalrulesets too many requests response has a 4xx status code
func (o *PostOutboundDigitalrulesetsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound digitalrulesets too many requests response has a 5xx status code
func (o *PostOutboundDigitalrulesetsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound digitalrulesets too many requests response a status code equal to that given
func (o *PostOutboundDigitalrulesetsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostOutboundDigitalrulesetsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostOutboundDigitalrulesetsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostOutboundDigitalrulesetsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundDigitalrulesetsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundDigitalrulesetsInternalServerError creates a PostOutboundDigitalrulesetsInternalServerError with default headers values
func NewPostOutboundDigitalrulesetsInternalServerError() *PostOutboundDigitalrulesetsInternalServerError {
	return &PostOutboundDigitalrulesetsInternalServerError{}
}

/*
PostOutboundDigitalrulesetsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostOutboundDigitalrulesetsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound digitalrulesets internal server error response has a 2xx status code
func (o *PostOutboundDigitalrulesetsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound digitalrulesets internal server error response has a 3xx status code
func (o *PostOutboundDigitalrulesetsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound digitalrulesets internal server error response has a 4xx status code
func (o *PostOutboundDigitalrulesetsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post outbound digitalrulesets internal server error response has a 5xx status code
func (o *PostOutboundDigitalrulesetsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post outbound digitalrulesets internal server error response a status code equal to that given
func (o *PostOutboundDigitalrulesetsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostOutboundDigitalrulesetsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostOutboundDigitalrulesetsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostOutboundDigitalrulesetsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundDigitalrulesetsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundDigitalrulesetsServiceUnavailable creates a PostOutboundDigitalrulesetsServiceUnavailable with default headers values
func NewPostOutboundDigitalrulesetsServiceUnavailable() *PostOutboundDigitalrulesetsServiceUnavailable {
	return &PostOutboundDigitalrulesetsServiceUnavailable{}
}

/*
PostOutboundDigitalrulesetsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostOutboundDigitalrulesetsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound digitalrulesets service unavailable response has a 2xx status code
func (o *PostOutboundDigitalrulesetsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound digitalrulesets service unavailable response has a 3xx status code
func (o *PostOutboundDigitalrulesetsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound digitalrulesets service unavailable response has a 4xx status code
func (o *PostOutboundDigitalrulesetsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post outbound digitalrulesets service unavailable response has a 5xx status code
func (o *PostOutboundDigitalrulesetsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post outbound digitalrulesets service unavailable response a status code equal to that given
func (o *PostOutboundDigitalrulesetsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostOutboundDigitalrulesetsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostOutboundDigitalrulesetsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostOutboundDigitalrulesetsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundDigitalrulesetsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundDigitalrulesetsGatewayTimeout creates a PostOutboundDigitalrulesetsGatewayTimeout with default headers values
func NewPostOutboundDigitalrulesetsGatewayTimeout() *PostOutboundDigitalrulesetsGatewayTimeout {
	return &PostOutboundDigitalrulesetsGatewayTimeout{}
}

/*
PostOutboundDigitalrulesetsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostOutboundDigitalrulesetsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound digitalrulesets gateway timeout response has a 2xx status code
func (o *PostOutboundDigitalrulesetsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound digitalrulesets gateway timeout response has a 3xx status code
func (o *PostOutboundDigitalrulesetsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound digitalrulesets gateway timeout response has a 4xx status code
func (o *PostOutboundDigitalrulesetsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post outbound digitalrulesets gateway timeout response has a 5xx status code
func (o *PostOutboundDigitalrulesetsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post outbound digitalrulesets gateway timeout response a status code equal to that given
func (o *PostOutboundDigitalrulesetsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostOutboundDigitalrulesetsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostOutboundDigitalrulesetsGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/digitalrulesets][%d] postOutboundDigitalrulesetsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostOutboundDigitalrulesetsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundDigitalrulesetsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

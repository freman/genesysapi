// Code generated by go-swagger; DO NOT EDIT.

package outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the outbound client
type API interface {
	/*
	   DeleteOutboundAttemptlimit deletes attempt limits
	*/
	DeleteOutboundAttemptlimit(ctx context.Context, params *DeleteOutboundAttemptlimitParams) (*DeleteOutboundAttemptlimitOK, error)
	/*
	   DeleteOutboundCallabletimeset deletes callable time set
	*/
	DeleteOutboundCallabletimeset(ctx context.Context, params *DeleteOutboundCallabletimesetParams) (*DeleteOutboundCallabletimesetOK, error)
	/*
	   DeleteOutboundCallanalysisresponseset deletes a dialer call analysis response set
	*/
	DeleteOutboundCallanalysisresponseset(ctx context.Context, params *DeleteOutboundCallanalysisresponsesetParams) (*DeleteOutboundCallanalysisresponsesetOK, error)
	/*
	   DeleteOutboundCampaign deletes a campaign
	*/
	DeleteOutboundCampaign(ctx context.Context, params *DeleteOutboundCampaignParams) (*DeleteOutboundCampaignOK, error)
	/*
	   DeleteOutboundCampaignProgress resets campaign progress and recycle the campaign
	*/
	DeleteOutboundCampaignProgress(ctx context.Context, params *DeleteOutboundCampaignProgressParams) (*DeleteOutboundCampaignProgressAccepted, error)
	/*
	   DeleteOutboundCampaignrule deletes campaign rule
	*/
	DeleteOutboundCampaignrule(ctx context.Context, params *DeleteOutboundCampaignruleParams) (*DeleteOutboundCampaignruleOK, error)
	/*
	   DeleteOutboundContactlist deletes a contact list
	*/
	DeleteOutboundContactlist(ctx context.Context, params *DeleteOutboundContactlistParams) (*DeleteOutboundContactlistOK, error)
	/*
	   DeleteOutboundContactlistContact deletes a contact
	*/
	DeleteOutboundContactlistContact(ctx context.Context, params *DeleteOutboundContactlistContactParams) (*DeleteOutboundContactlistContactOK, error)
	/*
	   DeleteOutboundContactlistContacts deletes contacts from a contact list
	*/
	DeleteOutboundContactlistContacts(ctx context.Context, params *DeleteOutboundContactlistContactsParams) (*DeleteOutboundContactlistContactsOK, error)
	/*
	   DeleteOutboundContactlistfilter deletes contact list filter
	*/
	DeleteOutboundContactlistfilter(ctx context.Context, params *DeleteOutboundContactlistfilterParams) (*DeleteOutboundContactlistfilterNoContent, error)
	/*
	   DeleteOutboundContactlists deletes multiple contact lists
	*/
	DeleteOutboundContactlists(ctx context.Context, params *DeleteOutboundContactlistsParams) (*DeleteOutboundContactlistsNoContent, error)
	/*
	   DeleteOutboundDnclist deletes dialer d n c list
	*/
	DeleteOutboundDnclist(ctx context.Context, params *DeleteOutboundDnclistParams) (*DeleteOutboundDnclistOK, error)
	/*
	   DeleteOutboundRuleset deletes a rule set
	*/
	DeleteOutboundRuleset(ctx context.Context, params *DeleteOutboundRulesetParams) (*DeleteOutboundRulesetOK, error)
	/*
	   DeleteOutboundSchedulesCampaign deletes a dialer campaign schedule
	*/
	DeleteOutboundSchedulesCampaign(ctx context.Context, params *DeleteOutboundSchedulesCampaignParams) (*DeleteOutboundSchedulesCampaignOK, error)
	/*
	   DeleteOutboundSchedulesSequence deletes a dialer sequence schedule
	*/
	DeleteOutboundSchedulesSequence(ctx context.Context, params *DeleteOutboundSchedulesSequenceParams) (*DeleteOutboundSchedulesSequenceOK, error)
	/*
	   DeleteOutboundSequence deletes a dialer campaign sequence
	*/
	DeleteOutboundSequence(ctx context.Context, params *DeleteOutboundSequenceParams) (*DeleteOutboundSequenceOK, error)
	/*
	   GetOutboundAttemptlimit gets attempt limits
	*/
	GetOutboundAttemptlimit(ctx context.Context, params *GetOutboundAttemptlimitParams) (*GetOutboundAttemptlimitOK, error)
	/*
	   GetOutboundAttemptlimits queries attempt limits list
	*/
	GetOutboundAttemptlimits(ctx context.Context, params *GetOutboundAttemptlimitsParams) (*GetOutboundAttemptlimitsOK, error)
	/*
	   GetOutboundCallabletimeset gets callable time set
	*/
	GetOutboundCallabletimeset(ctx context.Context, params *GetOutboundCallabletimesetParams) (*GetOutboundCallabletimesetOK, error)
	/*
	   GetOutboundCallabletimesets queries callable time set list
	*/
	GetOutboundCallabletimesets(ctx context.Context, params *GetOutboundCallabletimesetsParams) (*GetOutboundCallabletimesetsOK, error)
	/*
	   GetOutboundCallanalysisresponseset gets a dialer call analysis response set
	*/
	GetOutboundCallanalysisresponseset(ctx context.Context, params *GetOutboundCallanalysisresponsesetParams) (*GetOutboundCallanalysisresponsesetOK, error)
	/*
	   GetOutboundCallanalysisresponsesets queries a list of dialer call analysis response sets
	*/
	GetOutboundCallanalysisresponsesets(ctx context.Context, params *GetOutboundCallanalysisresponsesetsParams) (*GetOutboundCallanalysisresponsesetsOK, error)
	/*
	   GetOutboundCampaign gets dialer campaign
	*/
	GetOutboundCampaign(ctx context.Context, params *GetOutboundCampaignParams) (*GetOutboundCampaignOK, error)
	/*
	   GetOutboundCampaignDiagnostics gets campaign diagnostics
	*/
	GetOutboundCampaignDiagnostics(ctx context.Context, params *GetOutboundCampaignDiagnosticsParams) (*GetOutboundCampaignDiagnosticsOK, error)
	/*
	   GetOutboundCampaignInteractions gets dialer campaign interactions
	*/
	GetOutboundCampaignInteractions(ctx context.Context, params *GetOutboundCampaignInteractionsParams) (*GetOutboundCampaignInteractionsOK, error)
	/*
	   GetOutboundCampaignProgress gets campaign progress
	*/
	GetOutboundCampaignProgress(ctx context.Context, params *GetOutboundCampaignProgressParams) (*GetOutboundCampaignProgressOK, error)
	/*
	   GetOutboundCampaignStats gets statistics about a dialer campaign
	*/
	GetOutboundCampaignStats(ctx context.Context, params *GetOutboundCampaignStatsParams) (*GetOutboundCampaignStatsOK, error)
	/*
	   GetOutboundCampaignrule gets campaign rule
	*/
	GetOutboundCampaignrule(ctx context.Context, params *GetOutboundCampaignruleParams) (*GetOutboundCampaignruleOK, error)
	/*
	   GetOutboundCampaignrules queries campaign rule list
	*/
	GetOutboundCampaignrules(ctx context.Context, params *GetOutboundCampaignrulesParams) (*GetOutboundCampaignrulesOK, error)
	/*
	   GetOutboundCampaigns queries a list of dialer campaigns
	*/
	GetOutboundCampaigns(ctx context.Context, params *GetOutboundCampaignsParams) (*GetOutboundCampaignsOK, error)
	/*
	   GetOutboundCampaignsDivisionview gets a basic campaign information object
	   This returns a simplified version of a Campaign, consisting of name and division.
	*/
	GetOutboundCampaignsDivisionview(ctx context.Context, params *GetOutboundCampaignsDivisionviewParams) (*GetOutboundCampaignsDivisionviewOK, error)
	/*
	   GetOutboundCampaignsDivisionviews queries a list of basic campaign information objects
	   This returns a simplified version of a Campaign, consisting of name and division.
	*/
	GetOutboundCampaignsDivisionviews(ctx context.Context, params *GetOutboundCampaignsDivisionviewsParams) (*GetOutboundCampaignsDivisionviewsOK, error)
	/*
	   GetOutboundContactlist gets a dialer contact list
	*/
	GetOutboundContactlist(ctx context.Context, params *GetOutboundContactlistParams) (*GetOutboundContactlistOK, error)
	/*
	   GetOutboundContactlistContact gets a contact
	*/
	GetOutboundContactlistContact(ctx context.Context, params *GetOutboundContactlistContactParams) (*GetOutboundContactlistContactOK, error)
	/*
	   GetOutboundContactlistExport gets the URI of a contact list export
	*/
	GetOutboundContactlistExport(ctx context.Context, params *GetOutboundContactlistExportParams) (*GetOutboundContactlistExportOK, error)
	/*
	   GetOutboundContactlistImportstatus gets dialer contact list import status
	*/
	GetOutboundContactlistImportstatus(ctx context.Context, params *GetOutboundContactlistImportstatusParams) (*GetOutboundContactlistImportstatusOK, error)
	/*
	   GetOutboundContactlistTimezonemappingpreview previews the result of applying automatic time zone mapping to a contact list
	*/
	GetOutboundContactlistTimezonemappingpreview(ctx context.Context, params *GetOutboundContactlistTimezonemappingpreviewParams) (*GetOutboundContactlistTimezonemappingpreviewOK, error)
	/*
	   GetOutboundContactlistfilter gets contact list filter
	*/
	GetOutboundContactlistfilter(ctx context.Context, params *GetOutboundContactlistfilterParams) (*GetOutboundContactlistfilterOK, error)
	/*
	   GetOutboundContactlistfilters queries contact list filters
	*/
	GetOutboundContactlistfilters(ctx context.Context, params *GetOutboundContactlistfiltersParams) (*GetOutboundContactlistfiltersOK, error)
	/*
	   GetOutboundContactlists queries a list of contact lists
	*/
	GetOutboundContactlists(ctx context.Context, params *GetOutboundContactlistsParams) (*GetOutboundContactlistsOK, error)
	/*
	   GetOutboundContactlistsDivisionview gets a basic contact list information object
	   This returns a simplified version of a ContactList, consisting of the name, division, column names, phone columns, import status, and size.
	*/
	GetOutboundContactlistsDivisionview(ctx context.Context, params *GetOutboundContactlistsDivisionviewParams) (*GetOutboundContactlistsDivisionviewOK, error)
	/*
	   GetOutboundContactlistsDivisionviews queries a list of simplified contact list objects
	   This return a simplified version of contact lists, consisting of the name, division, column names, phone columns, import status, and size.
	*/
	GetOutboundContactlistsDivisionviews(ctx context.Context, params *GetOutboundContactlistsDivisionviewsParams) (*GetOutboundContactlistsDivisionviewsOK, error)
	/*
	   GetOutboundDnclist gets dialer d n c list
	*/
	GetOutboundDnclist(ctx context.Context, params *GetOutboundDnclistParams) (*GetOutboundDnclistOK, error)
	/*
	   GetOutboundDnclistExport gets the URI of a d n c list export
	*/
	GetOutboundDnclistExport(ctx context.Context, params *GetOutboundDnclistExportParams) (*GetOutboundDnclistExportOK, error)
	/*
	   GetOutboundDnclistImportstatus gets dialer dnc list import status
	*/
	GetOutboundDnclistImportstatus(ctx context.Context, params *GetOutboundDnclistImportstatusParams) (*GetOutboundDnclistImportstatusOK, error)
	/*
	   GetOutboundDnclists queries dialer d n c lists
	*/
	GetOutboundDnclists(ctx context.Context, params *GetOutboundDnclistsParams) (*GetOutboundDnclistsOK, error)
	/*
	   GetOutboundDnclistsDivisionview gets a basic dnc list information object
	   This returns a simplified version of a DncList, consisting of the name, division, import status, and size.
	*/
	GetOutboundDnclistsDivisionview(ctx context.Context, params *GetOutboundDnclistsDivisionviewParams) (*GetOutboundDnclistsDivisionviewOK, error)
	/*
	   GetOutboundDnclistsDivisionviews queries a list of simplified dnc list objects
	   This return a simplified version of dnc lists, consisting of the name, division, import status, and size.
	*/
	GetOutboundDnclistsDivisionviews(ctx context.Context, params *GetOutboundDnclistsDivisionviewsParams) (*GetOutboundDnclistsDivisionviewsOK, error)
	/*
	   GetOutboundEvent gets dialer event
	*/
	GetOutboundEvent(ctx context.Context, params *GetOutboundEventParams) (*GetOutboundEventOK, error)
	/*
	   GetOutboundEvents queries event logs
	*/
	GetOutboundEvents(ctx context.Context, params *GetOutboundEventsParams) (*GetOutboundEventsOK, error)
	/*
	   GetOutboundRuleset gets a rule set by ID
	*/
	GetOutboundRuleset(ctx context.Context, params *GetOutboundRulesetParams) (*GetOutboundRulesetOK, error)
	/*
	   GetOutboundRulesets queries a list of rule sets
	*/
	GetOutboundRulesets(ctx context.Context, params *GetOutboundRulesetsParams) (*GetOutboundRulesetsOK, error)
	/*
	   GetOutboundSchedulesCampaign gets a dialer campaign schedule
	*/
	GetOutboundSchedulesCampaign(ctx context.Context, params *GetOutboundSchedulesCampaignParams) (*GetOutboundSchedulesCampaignOK, error)
	/*
	   GetOutboundSchedulesCampaigns queries for a list of dialer campaign schedules
	*/
	GetOutboundSchedulesCampaigns(ctx context.Context, params *GetOutboundSchedulesCampaignsParams) (*GetOutboundSchedulesCampaignsOK, error)
	/*
	   GetOutboundSchedulesSequence gets a dialer sequence schedule
	*/
	GetOutboundSchedulesSequence(ctx context.Context, params *GetOutboundSchedulesSequenceParams) (*GetOutboundSchedulesSequenceOK, error)
	/*
	   GetOutboundSchedulesSequences queries for a list of dialer sequence schedules
	*/
	GetOutboundSchedulesSequences(ctx context.Context, params *GetOutboundSchedulesSequencesParams) (*GetOutboundSchedulesSequencesOK, error)
	/*
	   GetOutboundSequence gets a dialer campaign sequence
	*/
	GetOutboundSequence(ctx context.Context, params *GetOutboundSequenceParams) (*GetOutboundSequenceOK, error)
	/*
	   GetOutboundSequences queries a list of dialer campaign sequences
	*/
	GetOutboundSequences(ctx context.Context, params *GetOutboundSequencesParams) (*GetOutboundSequencesOK, error)
	/*
	   GetOutboundSettings gets the outbound settings for this organization
	*/
	GetOutboundSettings(ctx context.Context, params *GetOutboundSettingsParams) (*GetOutboundSettingsOK, error)
	/*
	   GetOutboundWrapupcodemappings gets the dialer wrap up code mapping
	*/
	GetOutboundWrapupcodemappings(ctx context.Context, params *GetOutboundWrapupcodemappingsParams) (*GetOutboundWrapupcodemappingsOK, error)
	/*
	   PatchOutboundSettings updates the outbound settings for this organization
	*/
	PatchOutboundSettings(ctx context.Context, params *PatchOutboundSettingsParams) (*PatchOutboundSettingsNoContent, error)
	/*
	   PostOutboundAttemptlimits creates attempt limits
	*/
	PostOutboundAttemptlimits(ctx context.Context, params *PostOutboundAttemptlimitsParams) (*PostOutboundAttemptlimitsOK, error)
	/*
	   PostOutboundAudits retrieves audits for dialer
	*/
	PostOutboundAudits(ctx context.Context, params *PostOutboundAuditsParams) (*PostOutboundAuditsOK, error)
	/*
	   PostOutboundCallabletimesets creates callable time set
	*/
	PostOutboundCallabletimesets(ctx context.Context, params *PostOutboundCallabletimesetsParams) (*PostOutboundCallabletimesetsOK, error)
	/*
	   PostOutboundCallanalysisresponsesets creates a dialer call analysis response set
	*/
	PostOutboundCallanalysisresponsesets(ctx context.Context, params *PostOutboundCallanalysisresponsesetsParams) (*PostOutboundCallanalysisresponsesetsOK, error)
	/*
	   PostOutboundCampaignCallbackSchedule schedules a callback for a dialer campaign deprecated
	   This endpoint is deprecated and may have unexpected results. Please use "/conversations/{conversationId}/participants/{participantId}/callbacks instead."
	*/
	PostOutboundCampaignCallbackSchedule(ctx context.Context, params *PostOutboundCampaignCallbackScheduleParams) (*PostOutboundCampaignCallbackScheduleOK, error)
	/*
	   PostOutboundCampaignrules creates campaign rule
	*/
	PostOutboundCampaignrules(ctx context.Context, params *PostOutboundCampaignrulesParams) (*PostOutboundCampaignrulesOK, error)
	/*
	   PostOutboundCampaigns creates a campaign
	*/
	PostOutboundCampaigns(ctx context.Context, params *PostOutboundCampaignsParams) (*PostOutboundCampaignsOK, error)
	/*
	   PostOutboundCampaignsProgress gets progress for a list of campaigns
	*/
	PostOutboundCampaignsProgress(ctx context.Context, params *PostOutboundCampaignsProgressParams) (*PostOutboundCampaignsProgressOK, error)
	/*
	   PostOutboundContactlistClear deletes all contacts out of a list all outstanding recalls or rule scheduled callbacks for non preview campaigns configured with the contactlist will be cancelled
	*/
	PostOutboundContactlistClear(ctx context.Context, params *PostOutboundContactlistClearParams) (*PostOutboundContactlistClearNoContent, error)
	/*
	   PostOutboundContactlistContacts adds contacts to a contact list
	*/
	PostOutboundContactlistContacts(ctx context.Context, params *PostOutboundContactlistContactsParams) (*PostOutboundContactlistContactsOK, error)
	/*
	   PostOutboundContactlistContactsBulk gets contacts from a contact list
	*/
	PostOutboundContactlistContactsBulk(ctx context.Context, params *PostOutboundContactlistContactsBulkParams) (*PostOutboundContactlistContactsBulkOK, error)
	/*
	   PostOutboundContactlistExport initiates the export of a contact list
	   Returns 200 if received OK.
	*/
	PostOutboundContactlistExport(ctx context.Context, params *PostOutboundContactlistExportParams) (*PostOutboundContactlistExportOK, error)
	/*
	   PostOutboundContactlistfilters creates contact list filter
	*/
	PostOutboundContactlistfilters(ctx context.Context, params *PostOutboundContactlistfiltersParams) (*PostOutboundContactlistfiltersOK, error)
	/*
	   PostOutboundContactlistfiltersPreview gets a preview of the output of a contact list filter
	*/
	PostOutboundContactlistfiltersPreview(ctx context.Context, params *PostOutboundContactlistfiltersPreviewParams) (*PostOutboundContactlistfiltersPreviewOK, error)
	/*
	   PostOutboundContactlists creates a contact list
	*/
	PostOutboundContactlists(ctx context.Context, params *PostOutboundContactlistsParams) (*PostOutboundContactlistsOK, error)
	/*
	   PostOutboundConversationDnc adds phone numbers to a dialer d n c list
	*/
	PostOutboundConversationDnc(ctx context.Context, params *PostOutboundConversationDncParams) error
	/*
	   PostOutboundDnclistExport initiates the export of a dnc list
	   Returns 200 if received OK.
	*/
	PostOutboundDnclistExport(ctx context.Context, params *PostOutboundDnclistExportParams) (*PostOutboundDnclistExportOK, error)
	/*
	   PostOutboundDnclistPhonenumbers adds phone numbers to a dialer d n c list
	   Only Internal DNC lists may be appended to
	*/
	PostOutboundDnclistPhonenumbers(ctx context.Context, params *PostOutboundDnclistPhonenumbersParams) error
	/*
	   PostOutboundDnclists creates dialer d n c list
	*/
	PostOutboundDnclists(ctx context.Context, params *PostOutboundDnclistsParams) (*PostOutboundDnclistsOK, error)
	/*
	   PostOutboundRulesets creates a dialer call analysis response set
	*/
	PostOutboundRulesets(ctx context.Context, params *PostOutboundRulesetsParams) (*PostOutboundRulesetsOK, error)
	/*
	   PostOutboundSequences creates a new campaign sequence
	*/
	PostOutboundSequences(ctx context.Context, params *PostOutboundSequencesParams) (*PostOutboundSequencesOK, error)
	/*
	   PutOutboundAttemptlimit updates attempt limits
	*/
	PutOutboundAttemptlimit(ctx context.Context, params *PutOutboundAttemptlimitParams) (*PutOutboundAttemptlimitOK, error)
	/*
	   PutOutboundCallabletimeset updates callable time set
	*/
	PutOutboundCallabletimeset(ctx context.Context, params *PutOutboundCallabletimesetParams) (*PutOutboundCallabletimesetOK, error)
	/*
	   PutOutboundCallanalysisresponseset updates a dialer call analysis response set
	*/
	PutOutboundCallanalysisresponseset(ctx context.Context, params *PutOutboundCallanalysisresponsesetParams) (*PutOutboundCallanalysisresponsesetOK, error)
	/*
	   PutOutboundCampaign updates a campaign
	*/
	PutOutboundCampaign(ctx context.Context, params *PutOutboundCampaignParams) (*PutOutboundCampaignOK, error)
	/*
	   PutOutboundCampaignAgent sends notification that an agent s state changed
	   New agent state.
	*/
	PutOutboundCampaignAgent(ctx context.Context, params *PutOutboundCampaignAgentParams) (*PutOutboundCampaignAgentOK, error)
	/*
	   PutOutboundCampaignrule updates campaign rule
	*/
	PutOutboundCampaignrule(ctx context.Context, params *PutOutboundCampaignruleParams) (*PutOutboundCampaignruleOK, error)
	/*
	   PutOutboundContactlist updates a contact list
	*/
	PutOutboundContactlist(ctx context.Context, params *PutOutboundContactlistParams) (*PutOutboundContactlistOK, error)
	/*
	   PutOutboundContactlistContact updates a contact
	*/
	PutOutboundContactlistContact(ctx context.Context, params *PutOutboundContactlistContactParams) (*PutOutboundContactlistContactOK, error)
	/*
	   PutOutboundContactlistfilter updates contact list filter
	*/
	PutOutboundContactlistfilter(ctx context.Context, params *PutOutboundContactlistfilterParams) (*PutOutboundContactlistfilterOK, error)
	/*
	   PutOutboundDnclist updates dialer d n c list
	*/
	PutOutboundDnclist(ctx context.Context, params *PutOutboundDnclistParams) (*PutOutboundDnclistOK, error)
	/*
	   PutOutboundRuleset updates a rule set
	*/
	PutOutboundRuleset(ctx context.Context, params *PutOutboundRulesetParams) (*PutOutboundRulesetOK, error)
	/*
	   PutOutboundSchedulesCampaign updates a new campaign schedule
	*/
	PutOutboundSchedulesCampaign(ctx context.Context, params *PutOutboundSchedulesCampaignParams) (*PutOutboundSchedulesCampaignOK, error)
	/*
	   PutOutboundSchedulesSequence updates a new sequence schedule
	*/
	PutOutboundSchedulesSequence(ctx context.Context, params *PutOutboundSchedulesSequenceParams) (*PutOutboundSchedulesSequenceOK, error)
	/*
	   PutOutboundSequence updates a new campaign sequence
	*/
	PutOutboundSequence(ctx context.Context, params *PutOutboundSequenceParams) (*PutOutboundSequenceOK, error)
	/*
	   PutOutboundWrapupcodemappings updates the dialer wrap up code mapping
	*/
	PutOutboundWrapupcodemappings(ctx context.Context, params *PutOutboundWrapupcodemappingsParams) (*PutOutboundWrapupcodemappingsOK, error)
}

// New creates a new outbound API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for outbound API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteOutboundAttemptlimit deletes attempt limits
*/
func (a *Client) DeleteOutboundAttemptlimit(ctx context.Context, params *DeleteOutboundAttemptlimitParams) (*DeleteOutboundAttemptlimitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundAttemptlimit",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/attemptlimits/{attemptLimitsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundAttemptlimitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundAttemptlimitOK), nil

}

/*
DeleteOutboundCallabletimeset deletes callable time set
*/
func (a *Client) DeleteOutboundCallabletimeset(ctx context.Context, params *DeleteOutboundCallabletimesetParams) (*DeleteOutboundCallabletimesetOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundCallabletimeset",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/callabletimesets/{callableTimeSetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundCallabletimesetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundCallabletimesetOK), nil

}

/*
DeleteOutboundCallanalysisresponseset deletes a dialer call analysis response set
*/
func (a *Client) DeleteOutboundCallanalysisresponseset(ctx context.Context, params *DeleteOutboundCallanalysisresponsesetParams) (*DeleteOutboundCallanalysisresponsesetOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundCallanalysisresponseset",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundCallanalysisresponsesetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundCallanalysisresponsesetOK), nil

}

/*
DeleteOutboundCampaign deletes a campaign
*/
func (a *Client) DeleteOutboundCampaign(ctx context.Context, params *DeleteOutboundCampaignParams) (*DeleteOutboundCampaignOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundCampaign",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/campaigns/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundCampaignReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundCampaignOK), nil

}

/*
DeleteOutboundCampaignProgress resets campaign progress and recycle the campaign
*/
func (a *Client) DeleteOutboundCampaignProgress(ctx context.Context, params *DeleteOutboundCampaignProgressParams) (*DeleteOutboundCampaignProgressAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundCampaignProgress",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/campaigns/{campaignId}/progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundCampaignProgressReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundCampaignProgressAccepted), nil

}

/*
DeleteOutboundCampaignrule deletes campaign rule
*/
func (a *Client) DeleteOutboundCampaignrule(ctx context.Context, params *DeleteOutboundCampaignruleParams) (*DeleteOutboundCampaignruleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundCampaignrule",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/campaignrules/{campaignRuleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundCampaignruleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundCampaignruleOK), nil

}

/*
DeleteOutboundContactlist deletes a contact list
*/
func (a *Client) DeleteOutboundContactlist(ctx context.Context, params *DeleteOutboundContactlistParams) (*DeleteOutboundContactlistOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundContactlist",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/contactlists/{contactListId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundContactlistReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundContactlistOK), nil

}

/*
DeleteOutboundContactlistContact deletes a contact
*/
func (a *Client) DeleteOutboundContactlistContact(ctx context.Context, params *DeleteOutboundContactlistContactParams) (*DeleteOutboundContactlistContactOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundContactlistContact",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundContactlistContactReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundContactlistContactOK), nil

}

/*
DeleteOutboundContactlistContacts deletes contacts from a contact list
*/
func (a *Client) DeleteOutboundContactlistContacts(ctx context.Context, params *DeleteOutboundContactlistContactsParams) (*DeleteOutboundContactlistContactsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundContactlistContacts",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/contactlists/{contactListId}/contacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundContactlistContactsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundContactlistContactsOK), nil

}

/*
DeleteOutboundContactlistfilter deletes contact list filter
*/
func (a *Client) DeleteOutboundContactlistfilter(ctx context.Context, params *DeleteOutboundContactlistfilterParams) (*DeleteOutboundContactlistfilterNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundContactlistfilter",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/contactlistfilters/{contactListFilterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundContactlistfilterReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundContactlistfilterNoContent), nil

}

/*
DeleteOutboundContactlists deletes multiple contact lists
*/
func (a *Client) DeleteOutboundContactlists(ctx context.Context, params *DeleteOutboundContactlistsParams) (*DeleteOutboundContactlistsNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundContactlists",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/contactlists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundContactlistsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundContactlistsNoContent), nil

}

/*
DeleteOutboundDnclist deletes dialer d n c list
*/
func (a *Client) DeleteOutboundDnclist(ctx context.Context, params *DeleteOutboundDnclistParams) (*DeleteOutboundDnclistOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundDnclist",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/dnclists/{dncListId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundDnclistReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundDnclistOK), nil

}

/*
DeleteOutboundRuleset deletes a rule set
*/
func (a *Client) DeleteOutboundRuleset(ctx context.Context, params *DeleteOutboundRulesetParams) (*DeleteOutboundRulesetOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundRuleset",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/rulesets/{ruleSetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundRulesetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundRulesetOK), nil

}

/*
DeleteOutboundSchedulesCampaign deletes a dialer campaign schedule
*/
func (a *Client) DeleteOutboundSchedulesCampaign(ctx context.Context, params *DeleteOutboundSchedulesCampaignParams) (*DeleteOutboundSchedulesCampaignOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundSchedulesCampaign",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/schedules/campaigns/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundSchedulesCampaignReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundSchedulesCampaignOK), nil

}

/*
DeleteOutboundSchedulesSequence deletes a dialer sequence schedule
*/
func (a *Client) DeleteOutboundSchedulesSequence(ctx context.Context, params *DeleteOutboundSchedulesSequenceParams) (*DeleteOutboundSchedulesSequenceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundSchedulesSequence",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/schedules/sequences/{sequenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundSchedulesSequenceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundSchedulesSequenceOK), nil

}

/*
DeleteOutboundSequence deletes a dialer campaign sequence
*/
func (a *Client) DeleteOutboundSequence(ctx context.Context, params *DeleteOutboundSequenceParams) (*DeleteOutboundSequenceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOutboundSequence",
		Method:             "DELETE",
		PathPattern:        "/api/v2/outbound/sequences/{sequenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundSequenceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOutboundSequenceOK), nil

}

/*
GetOutboundAttemptlimit gets attempt limits
*/
func (a *Client) GetOutboundAttemptlimit(ctx context.Context, params *GetOutboundAttemptlimitParams) (*GetOutboundAttemptlimitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundAttemptlimit",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/attemptlimits/{attemptLimitsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundAttemptlimitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundAttemptlimitOK), nil

}

/*
GetOutboundAttemptlimits queries attempt limits list
*/
func (a *Client) GetOutboundAttemptlimits(ctx context.Context, params *GetOutboundAttemptlimitsParams) (*GetOutboundAttemptlimitsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundAttemptlimits",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/attemptlimits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundAttemptlimitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundAttemptlimitsOK), nil

}

/*
GetOutboundCallabletimeset gets callable time set
*/
func (a *Client) GetOutboundCallabletimeset(ctx context.Context, params *GetOutboundCallabletimesetParams) (*GetOutboundCallabletimesetOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundCallabletimeset",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/callabletimesets/{callableTimeSetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundCallabletimesetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundCallabletimesetOK), nil

}

/*
GetOutboundCallabletimesets queries callable time set list
*/
func (a *Client) GetOutboundCallabletimesets(ctx context.Context, params *GetOutboundCallabletimesetsParams) (*GetOutboundCallabletimesetsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundCallabletimesets",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/callabletimesets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundCallabletimesetsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundCallabletimesetsOK), nil

}

/*
GetOutboundCallanalysisresponseset gets a dialer call analysis response set
*/
func (a *Client) GetOutboundCallanalysisresponseset(ctx context.Context, params *GetOutboundCallanalysisresponsesetParams) (*GetOutboundCallanalysisresponsesetOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundCallanalysisresponseset",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundCallanalysisresponsesetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundCallanalysisresponsesetOK), nil

}

/*
GetOutboundCallanalysisresponsesets queries a list of dialer call analysis response sets
*/
func (a *Client) GetOutboundCallanalysisresponsesets(ctx context.Context, params *GetOutboundCallanalysisresponsesetsParams) (*GetOutboundCallanalysisresponsesetsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundCallanalysisresponsesets",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/callanalysisresponsesets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundCallanalysisresponsesetsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundCallanalysisresponsesetsOK), nil

}

/*
GetOutboundCampaign gets dialer campaign
*/
func (a *Client) GetOutboundCampaign(ctx context.Context, params *GetOutboundCampaignParams) (*GetOutboundCampaignOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundCampaign",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/campaigns/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundCampaignReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundCampaignOK), nil

}

/*
GetOutboundCampaignDiagnostics gets campaign diagnostics
*/
func (a *Client) GetOutboundCampaignDiagnostics(ctx context.Context, params *GetOutboundCampaignDiagnosticsParams) (*GetOutboundCampaignDiagnosticsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundCampaignDiagnostics",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/campaigns/{campaignId}/diagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundCampaignDiagnosticsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundCampaignDiagnosticsOK), nil

}

/*
GetOutboundCampaignInteractions gets dialer campaign interactions
*/
func (a *Client) GetOutboundCampaignInteractions(ctx context.Context, params *GetOutboundCampaignInteractionsParams) (*GetOutboundCampaignInteractionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundCampaignInteractions",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/campaigns/{campaignId}/interactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundCampaignInteractionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundCampaignInteractionsOK), nil

}

/*
GetOutboundCampaignProgress gets campaign progress
*/
func (a *Client) GetOutboundCampaignProgress(ctx context.Context, params *GetOutboundCampaignProgressParams) (*GetOutboundCampaignProgressOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundCampaignProgress",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/campaigns/{campaignId}/progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundCampaignProgressReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundCampaignProgressOK), nil

}

/*
GetOutboundCampaignStats gets statistics about a dialer campaign
*/
func (a *Client) GetOutboundCampaignStats(ctx context.Context, params *GetOutboundCampaignStatsParams) (*GetOutboundCampaignStatsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundCampaignStats",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/campaigns/{campaignId}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundCampaignStatsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundCampaignStatsOK), nil

}

/*
GetOutboundCampaignrule gets campaign rule
*/
func (a *Client) GetOutboundCampaignrule(ctx context.Context, params *GetOutboundCampaignruleParams) (*GetOutboundCampaignruleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundCampaignrule",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/campaignrules/{campaignRuleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundCampaignruleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundCampaignruleOK), nil

}

/*
GetOutboundCampaignrules queries campaign rule list
*/
func (a *Client) GetOutboundCampaignrules(ctx context.Context, params *GetOutboundCampaignrulesParams) (*GetOutboundCampaignrulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundCampaignrules",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/campaignrules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundCampaignrulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundCampaignrulesOK), nil

}

/*
GetOutboundCampaigns queries a list of dialer campaigns
*/
func (a *Client) GetOutboundCampaigns(ctx context.Context, params *GetOutboundCampaignsParams) (*GetOutboundCampaignsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundCampaigns",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/campaigns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundCampaignsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundCampaignsOK), nil

}

/*
GetOutboundCampaignsDivisionview gets a basic campaign information object

This returns a simplified version of a Campaign, consisting of name and division.
*/
func (a *Client) GetOutboundCampaignsDivisionview(ctx context.Context, params *GetOutboundCampaignsDivisionviewParams) (*GetOutboundCampaignsDivisionviewOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundCampaignsDivisionview",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/campaigns/divisionviews/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundCampaignsDivisionviewReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundCampaignsDivisionviewOK), nil

}

/*
GetOutboundCampaignsDivisionviews queries a list of basic campaign information objects

This returns a simplified version of a Campaign, consisting of name and division.
*/
func (a *Client) GetOutboundCampaignsDivisionviews(ctx context.Context, params *GetOutboundCampaignsDivisionviewsParams) (*GetOutboundCampaignsDivisionviewsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundCampaignsDivisionviews",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/campaigns/divisionviews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundCampaignsDivisionviewsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundCampaignsDivisionviewsOK), nil

}

/*
GetOutboundContactlist gets a dialer contact list
*/
func (a *Client) GetOutboundContactlist(ctx context.Context, params *GetOutboundContactlistParams) (*GetOutboundContactlistOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundContactlist",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/contactlists/{contactListId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundContactlistReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundContactlistOK), nil

}

/*
GetOutboundContactlistContact gets a contact
*/
func (a *Client) GetOutboundContactlistContact(ctx context.Context, params *GetOutboundContactlistContactParams) (*GetOutboundContactlistContactOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundContactlistContact",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundContactlistContactReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundContactlistContactOK), nil

}

/*
GetOutboundContactlistExport gets the URI of a contact list export
*/
func (a *Client) GetOutboundContactlistExport(ctx context.Context, params *GetOutboundContactlistExportParams) (*GetOutboundContactlistExportOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundContactlistExport",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/contactlists/{contactListId}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundContactlistExportReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundContactlistExportOK), nil

}

/*
GetOutboundContactlistImportstatus gets dialer contact list import status
*/
func (a *Client) GetOutboundContactlistImportstatus(ctx context.Context, params *GetOutboundContactlistImportstatusParams) (*GetOutboundContactlistImportstatusOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundContactlistImportstatus",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/contactlists/{contactListId}/importstatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundContactlistImportstatusReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundContactlistImportstatusOK), nil

}

/*
GetOutboundContactlistTimezonemappingpreview previews the result of applying automatic time zone mapping to a contact list
*/
func (a *Client) GetOutboundContactlistTimezonemappingpreview(ctx context.Context, params *GetOutboundContactlistTimezonemappingpreviewParams) (*GetOutboundContactlistTimezonemappingpreviewOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundContactlistTimezonemappingpreview",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/contactlists/{contactListId}/timezonemappingpreview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundContactlistTimezonemappingpreviewReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundContactlistTimezonemappingpreviewOK), nil

}

/*
GetOutboundContactlistfilter gets contact list filter
*/
func (a *Client) GetOutboundContactlistfilter(ctx context.Context, params *GetOutboundContactlistfilterParams) (*GetOutboundContactlistfilterOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundContactlistfilter",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/contactlistfilters/{contactListFilterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundContactlistfilterReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundContactlistfilterOK), nil

}

/*
GetOutboundContactlistfilters queries contact list filters
*/
func (a *Client) GetOutboundContactlistfilters(ctx context.Context, params *GetOutboundContactlistfiltersParams) (*GetOutboundContactlistfiltersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundContactlistfilters",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/contactlistfilters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundContactlistfiltersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundContactlistfiltersOK), nil

}

/*
GetOutboundContactlists queries a list of contact lists
*/
func (a *Client) GetOutboundContactlists(ctx context.Context, params *GetOutboundContactlistsParams) (*GetOutboundContactlistsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundContactlists",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/contactlists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundContactlistsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundContactlistsOK), nil

}

/*
GetOutboundContactlistsDivisionview gets a basic contact list information object

This returns a simplified version of a ContactList, consisting of the name, division, column names, phone columns, import status, and size.
*/
func (a *Client) GetOutboundContactlistsDivisionview(ctx context.Context, params *GetOutboundContactlistsDivisionviewParams) (*GetOutboundContactlistsDivisionviewOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundContactlistsDivisionview",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/contactlists/divisionviews/{contactListId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundContactlistsDivisionviewReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundContactlistsDivisionviewOK), nil

}

/*
GetOutboundContactlistsDivisionviews queries a list of simplified contact list objects

This return a simplified version of contact lists, consisting of the name, division, column names, phone columns, import status, and size.
*/
func (a *Client) GetOutboundContactlistsDivisionviews(ctx context.Context, params *GetOutboundContactlistsDivisionviewsParams) (*GetOutboundContactlistsDivisionviewsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundContactlistsDivisionviews",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/contactlists/divisionviews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundContactlistsDivisionviewsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundContactlistsDivisionviewsOK), nil

}

/*
GetOutboundDnclist gets dialer d n c list
*/
func (a *Client) GetOutboundDnclist(ctx context.Context, params *GetOutboundDnclistParams) (*GetOutboundDnclistOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundDnclist",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/dnclists/{dncListId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundDnclistReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundDnclistOK), nil

}

/*
GetOutboundDnclistExport gets the URI of a d n c list export
*/
func (a *Client) GetOutboundDnclistExport(ctx context.Context, params *GetOutboundDnclistExportParams) (*GetOutboundDnclistExportOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundDnclistExport",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/dnclists/{dncListId}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundDnclistExportReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundDnclistExportOK), nil

}

/*
GetOutboundDnclistImportstatus gets dialer dnc list import status
*/
func (a *Client) GetOutboundDnclistImportstatus(ctx context.Context, params *GetOutboundDnclistImportstatusParams) (*GetOutboundDnclistImportstatusOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundDnclistImportstatus",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/dnclists/{dncListId}/importstatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundDnclistImportstatusReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundDnclistImportstatusOK), nil

}

/*
GetOutboundDnclists queries dialer d n c lists
*/
func (a *Client) GetOutboundDnclists(ctx context.Context, params *GetOutboundDnclistsParams) (*GetOutboundDnclistsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundDnclists",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/dnclists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundDnclistsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundDnclistsOK), nil

}

/*
GetOutboundDnclistsDivisionview gets a basic dnc list information object

This returns a simplified version of a DncList, consisting of the name, division, import status, and size.
*/
func (a *Client) GetOutboundDnclistsDivisionview(ctx context.Context, params *GetOutboundDnclistsDivisionviewParams) (*GetOutboundDnclistsDivisionviewOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundDnclistsDivisionview",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/dnclists/divisionviews/{dncListId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundDnclistsDivisionviewReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundDnclistsDivisionviewOK), nil

}

/*
GetOutboundDnclistsDivisionviews queries a list of simplified dnc list objects

This return a simplified version of dnc lists, consisting of the name, division, import status, and size.
*/
func (a *Client) GetOutboundDnclistsDivisionviews(ctx context.Context, params *GetOutboundDnclistsDivisionviewsParams) (*GetOutboundDnclistsDivisionviewsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundDnclistsDivisionviews",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/dnclists/divisionviews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundDnclistsDivisionviewsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundDnclistsDivisionviewsOK), nil

}

/*
GetOutboundEvent gets dialer event
*/
func (a *Client) GetOutboundEvent(ctx context.Context, params *GetOutboundEventParams) (*GetOutboundEventOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundEvent",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/events/{eventId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundEventReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundEventOK), nil

}

/*
GetOutboundEvents queries event logs
*/
func (a *Client) GetOutboundEvents(ctx context.Context, params *GetOutboundEventsParams) (*GetOutboundEventsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundEvents",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundEventsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundEventsOK), nil

}

/*
GetOutboundRuleset gets a rule set by ID
*/
func (a *Client) GetOutboundRuleset(ctx context.Context, params *GetOutboundRulesetParams) (*GetOutboundRulesetOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundRuleset",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/rulesets/{ruleSetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundRulesetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundRulesetOK), nil

}

/*
GetOutboundRulesets queries a list of rule sets
*/
func (a *Client) GetOutboundRulesets(ctx context.Context, params *GetOutboundRulesetsParams) (*GetOutboundRulesetsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundRulesets",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/rulesets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundRulesetsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundRulesetsOK), nil

}

/*
GetOutboundSchedulesCampaign gets a dialer campaign schedule
*/
func (a *Client) GetOutboundSchedulesCampaign(ctx context.Context, params *GetOutboundSchedulesCampaignParams) (*GetOutboundSchedulesCampaignOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundSchedulesCampaign",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/schedules/campaigns/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundSchedulesCampaignReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundSchedulesCampaignOK), nil

}

/*
GetOutboundSchedulesCampaigns queries for a list of dialer campaign schedules
*/
func (a *Client) GetOutboundSchedulesCampaigns(ctx context.Context, params *GetOutboundSchedulesCampaignsParams) (*GetOutboundSchedulesCampaignsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundSchedulesCampaigns",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/schedules/campaigns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundSchedulesCampaignsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundSchedulesCampaignsOK), nil

}

/*
GetOutboundSchedulesSequence gets a dialer sequence schedule
*/
func (a *Client) GetOutboundSchedulesSequence(ctx context.Context, params *GetOutboundSchedulesSequenceParams) (*GetOutboundSchedulesSequenceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundSchedulesSequence",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/schedules/sequences/{sequenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundSchedulesSequenceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundSchedulesSequenceOK), nil

}

/*
GetOutboundSchedulesSequences queries for a list of dialer sequence schedules
*/
func (a *Client) GetOutboundSchedulesSequences(ctx context.Context, params *GetOutboundSchedulesSequencesParams) (*GetOutboundSchedulesSequencesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundSchedulesSequences",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/schedules/sequences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundSchedulesSequencesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundSchedulesSequencesOK), nil

}

/*
GetOutboundSequence gets a dialer campaign sequence
*/
func (a *Client) GetOutboundSequence(ctx context.Context, params *GetOutboundSequenceParams) (*GetOutboundSequenceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundSequence",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/sequences/{sequenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundSequenceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundSequenceOK), nil

}

/*
GetOutboundSequences queries a list of dialer campaign sequences
*/
func (a *Client) GetOutboundSequences(ctx context.Context, params *GetOutboundSequencesParams) (*GetOutboundSequencesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundSequences",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/sequences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundSequencesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundSequencesOK), nil

}

/*
GetOutboundSettings gets the outbound settings for this organization
*/
func (a *Client) GetOutboundSettings(ctx context.Context, params *GetOutboundSettingsParams) (*GetOutboundSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundSettings",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundSettingsOK), nil

}

/*
GetOutboundWrapupcodemappings gets the dialer wrap up code mapping
*/
func (a *Client) GetOutboundWrapupcodemappings(ctx context.Context, params *GetOutboundWrapupcodemappingsParams) (*GetOutboundWrapupcodemappingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutboundWrapupcodemappings",
		Method:             "GET",
		PathPattern:        "/api/v2/outbound/wrapupcodemappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutboundWrapupcodemappingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutboundWrapupcodemappingsOK), nil

}

/*
PatchOutboundSettings updates the outbound settings for this organization
*/
func (a *Client) PatchOutboundSettings(ctx context.Context, params *PatchOutboundSettingsParams) (*PatchOutboundSettingsNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchOutboundSettings",
		Method:             "PATCH",
		PathPattern:        "/api/v2/outbound/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchOutboundSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchOutboundSettingsNoContent), nil

}

/*
PostOutboundAttemptlimits creates attempt limits
*/
func (a *Client) PostOutboundAttemptlimits(ctx context.Context, params *PostOutboundAttemptlimitsParams) (*PostOutboundAttemptlimitsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundAttemptlimits",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/attemptlimits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundAttemptlimitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundAttemptlimitsOK), nil

}

/*
PostOutboundAudits retrieves audits for dialer
*/
func (a *Client) PostOutboundAudits(ctx context.Context, params *PostOutboundAuditsParams) (*PostOutboundAuditsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundAudits",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/audits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundAuditsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundAuditsOK), nil

}

/*
PostOutboundCallabletimesets creates callable time set
*/
func (a *Client) PostOutboundCallabletimesets(ctx context.Context, params *PostOutboundCallabletimesetsParams) (*PostOutboundCallabletimesetsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundCallabletimesets",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/callabletimesets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundCallabletimesetsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundCallabletimesetsOK), nil

}

/*
PostOutboundCallanalysisresponsesets creates a dialer call analysis response set
*/
func (a *Client) PostOutboundCallanalysisresponsesets(ctx context.Context, params *PostOutboundCallanalysisresponsesetsParams) (*PostOutboundCallanalysisresponsesetsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundCallanalysisresponsesets",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/callanalysisresponsesets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundCallanalysisresponsesetsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundCallanalysisresponsesetsOK), nil

}

/*
PostOutboundCampaignCallbackSchedule schedules a callback for a dialer campaign deprecated

This endpoint is deprecated and may have unexpected results. Please use "/conversations/{conversationId}/participants/{participantId}/callbacks instead."
*/
func (a *Client) PostOutboundCampaignCallbackSchedule(ctx context.Context, params *PostOutboundCampaignCallbackScheduleParams) (*PostOutboundCampaignCallbackScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundCampaignCallbackSchedule",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/campaigns/{campaignId}/callback/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundCampaignCallbackScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundCampaignCallbackScheduleOK), nil

}

/*
PostOutboundCampaignrules creates campaign rule
*/
func (a *Client) PostOutboundCampaignrules(ctx context.Context, params *PostOutboundCampaignrulesParams) (*PostOutboundCampaignrulesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundCampaignrules",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/campaignrules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundCampaignrulesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundCampaignrulesOK), nil

}

/*
PostOutboundCampaigns creates a campaign
*/
func (a *Client) PostOutboundCampaigns(ctx context.Context, params *PostOutboundCampaignsParams) (*PostOutboundCampaignsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundCampaigns",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/campaigns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundCampaignsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundCampaignsOK), nil

}

/*
PostOutboundCampaignsProgress gets progress for a list of campaigns
*/
func (a *Client) PostOutboundCampaignsProgress(ctx context.Context, params *PostOutboundCampaignsProgressParams) (*PostOutboundCampaignsProgressOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundCampaignsProgress",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/campaigns/progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundCampaignsProgressReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundCampaignsProgressOK), nil

}

/*
PostOutboundContactlistClear deletes all contacts out of a list all outstanding recalls or rule scheduled callbacks for non preview campaigns configured with the contactlist will be cancelled
*/
func (a *Client) PostOutboundContactlistClear(ctx context.Context, params *PostOutboundContactlistClearParams) (*PostOutboundContactlistClearNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundContactlistClear",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/contactlists/{contactListId}/clear",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundContactlistClearReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundContactlistClearNoContent), nil

}

/*
PostOutboundContactlistContacts adds contacts to a contact list
*/
func (a *Client) PostOutboundContactlistContacts(ctx context.Context, params *PostOutboundContactlistContactsParams) (*PostOutboundContactlistContactsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundContactlistContacts",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/contactlists/{contactListId}/contacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundContactlistContactsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundContactlistContactsOK), nil

}

/*
PostOutboundContactlistContactsBulk gets contacts from a contact list
*/
func (a *Client) PostOutboundContactlistContactsBulk(ctx context.Context, params *PostOutboundContactlistContactsBulkParams) (*PostOutboundContactlistContactsBulkOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundContactlistContactsBulk",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/contactlists/{contactListId}/contacts/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundContactlistContactsBulkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundContactlistContactsBulkOK), nil

}

/*
PostOutboundContactlistExport initiates the export of a contact list

Returns 200 if received OK.
*/
func (a *Client) PostOutboundContactlistExport(ctx context.Context, params *PostOutboundContactlistExportParams) (*PostOutboundContactlistExportOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundContactlistExport",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/contactlists/{contactListId}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundContactlistExportReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundContactlistExportOK), nil

}

/*
PostOutboundContactlistfilters creates contact list filter
*/
func (a *Client) PostOutboundContactlistfilters(ctx context.Context, params *PostOutboundContactlistfiltersParams) (*PostOutboundContactlistfiltersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundContactlistfilters",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/contactlistfilters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundContactlistfiltersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundContactlistfiltersOK), nil

}

/*
PostOutboundContactlistfiltersPreview gets a preview of the output of a contact list filter
*/
func (a *Client) PostOutboundContactlistfiltersPreview(ctx context.Context, params *PostOutboundContactlistfiltersPreviewParams) (*PostOutboundContactlistfiltersPreviewOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundContactlistfiltersPreview",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/contactlistfilters/preview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundContactlistfiltersPreviewReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundContactlistfiltersPreviewOK), nil

}

/*
PostOutboundContactlists creates a contact list
*/
func (a *Client) PostOutboundContactlists(ctx context.Context, params *PostOutboundContactlistsParams) (*PostOutboundContactlistsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundContactlists",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/contactlists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundContactlistsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundContactlistsOK), nil

}

/*
PostOutboundConversationDnc adds phone numbers to a dialer d n c list
*/
func (a *Client) PostOutboundConversationDnc(ctx context.Context, params *PostOutboundConversationDncParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundConversationDnc",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/conversations/{conversationId}/dnc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundConversationDncReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostOutboundDnclistExport initiates the export of a dnc list

Returns 200 if received OK.
*/
func (a *Client) PostOutboundDnclistExport(ctx context.Context, params *PostOutboundDnclistExportParams) (*PostOutboundDnclistExportOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundDnclistExport",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/dnclists/{dncListId}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundDnclistExportReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundDnclistExportOK), nil

}

/*
PostOutboundDnclistPhonenumbers adds phone numbers to a dialer d n c list

Only Internal DNC lists may be appended to
*/
func (a *Client) PostOutboundDnclistPhonenumbers(ctx context.Context, params *PostOutboundDnclistPhonenumbersParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundDnclistPhonenumbers",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/dnclists/{dncListId}/phonenumbers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundDnclistPhonenumbersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostOutboundDnclists creates dialer d n c list
*/
func (a *Client) PostOutboundDnclists(ctx context.Context, params *PostOutboundDnclistsParams) (*PostOutboundDnclistsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundDnclists",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/dnclists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundDnclistsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundDnclistsOK), nil

}

/*
PostOutboundRulesets creates a dialer call analysis response set
*/
func (a *Client) PostOutboundRulesets(ctx context.Context, params *PostOutboundRulesetsParams) (*PostOutboundRulesetsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundRulesets",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/rulesets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundRulesetsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundRulesetsOK), nil

}

/*
PostOutboundSequences creates a new campaign sequence
*/
func (a *Client) PostOutboundSequences(ctx context.Context, params *PostOutboundSequencesParams) (*PostOutboundSequencesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOutboundSequences",
		Method:             "POST",
		PathPattern:        "/api/v2/outbound/sequences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOutboundSequencesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOutboundSequencesOK), nil

}

/*
PutOutboundAttemptlimit updates attempt limits
*/
func (a *Client) PutOutboundAttemptlimit(ctx context.Context, params *PutOutboundAttemptlimitParams) (*PutOutboundAttemptlimitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOutboundAttemptlimit",
		Method:             "PUT",
		PathPattern:        "/api/v2/outbound/attemptlimits/{attemptLimitsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOutboundAttemptlimitReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOutboundAttemptlimitOK), nil

}

/*
PutOutboundCallabletimeset updates callable time set
*/
func (a *Client) PutOutboundCallabletimeset(ctx context.Context, params *PutOutboundCallabletimesetParams) (*PutOutboundCallabletimesetOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOutboundCallabletimeset",
		Method:             "PUT",
		PathPattern:        "/api/v2/outbound/callabletimesets/{callableTimeSetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOutboundCallabletimesetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOutboundCallabletimesetOK), nil

}

/*
PutOutboundCallanalysisresponseset updates a dialer call analysis response set
*/
func (a *Client) PutOutboundCallanalysisresponseset(ctx context.Context, params *PutOutboundCallanalysisresponsesetParams) (*PutOutboundCallanalysisresponsesetOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOutboundCallanalysisresponseset",
		Method:             "PUT",
		PathPattern:        "/api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOutboundCallanalysisresponsesetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOutboundCallanalysisresponsesetOK), nil

}

/*
PutOutboundCampaign updates a campaign
*/
func (a *Client) PutOutboundCampaign(ctx context.Context, params *PutOutboundCampaignParams) (*PutOutboundCampaignOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOutboundCampaign",
		Method:             "PUT",
		PathPattern:        "/api/v2/outbound/campaigns/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOutboundCampaignReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOutboundCampaignOK), nil

}

/*
PutOutboundCampaignAgent sends notification that an agent s state changed

New agent state.
*/
func (a *Client) PutOutboundCampaignAgent(ctx context.Context, params *PutOutboundCampaignAgentParams) (*PutOutboundCampaignAgentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOutboundCampaignAgent",
		Method:             "PUT",
		PathPattern:        "/api/v2/outbound/campaigns/{campaignId}/agents/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOutboundCampaignAgentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOutboundCampaignAgentOK), nil

}

/*
PutOutboundCampaignrule updates campaign rule
*/
func (a *Client) PutOutboundCampaignrule(ctx context.Context, params *PutOutboundCampaignruleParams) (*PutOutboundCampaignruleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOutboundCampaignrule",
		Method:             "PUT",
		PathPattern:        "/api/v2/outbound/campaignrules/{campaignRuleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOutboundCampaignruleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOutboundCampaignruleOK), nil

}

/*
PutOutboundContactlist updates a contact list
*/
func (a *Client) PutOutboundContactlist(ctx context.Context, params *PutOutboundContactlistParams) (*PutOutboundContactlistOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOutboundContactlist",
		Method:             "PUT",
		PathPattern:        "/api/v2/outbound/contactlists/{contactListId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOutboundContactlistReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOutboundContactlistOK), nil

}

/*
PutOutboundContactlistContact updates a contact
*/
func (a *Client) PutOutboundContactlistContact(ctx context.Context, params *PutOutboundContactlistContactParams) (*PutOutboundContactlistContactOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOutboundContactlistContact",
		Method:             "PUT",
		PathPattern:        "/api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOutboundContactlistContactReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOutboundContactlistContactOK), nil

}

/*
PutOutboundContactlistfilter updates contact list filter
*/
func (a *Client) PutOutboundContactlistfilter(ctx context.Context, params *PutOutboundContactlistfilterParams) (*PutOutboundContactlistfilterOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOutboundContactlistfilter",
		Method:             "PUT",
		PathPattern:        "/api/v2/outbound/contactlistfilters/{contactListFilterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOutboundContactlistfilterReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOutboundContactlistfilterOK), nil

}

/*
PutOutboundDnclist updates dialer d n c list
*/
func (a *Client) PutOutboundDnclist(ctx context.Context, params *PutOutboundDnclistParams) (*PutOutboundDnclistOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOutboundDnclist",
		Method:             "PUT",
		PathPattern:        "/api/v2/outbound/dnclists/{dncListId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOutboundDnclistReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOutboundDnclistOK), nil

}

/*
PutOutboundRuleset updates a rule set
*/
func (a *Client) PutOutboundRuleset(ctx context.Context, params *PutOutboundRulesetParams) (*PutOutboundRulesetOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOutboundRuleset",
		Method:             "PUT",
		PathPattern:        "/api/v2/outbound/rulesets/{ruleSetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOutboundRulesetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOutboundRulesetOK), nil

}

/*
PutOutboundSchedulesCampaign updates a new campaign schedule
*/
func (a *Client) PutOutboundSchedulesCampaign(ctx context.Context, params *PutOutboundSchedulesCampaignParams) (*PutOutboundSchedulesCampaignOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOutboundSchedulesCampaign",
		Method:             "PUT",
		PathPattern:        "/api/v2/outbound/schedules/campaigns/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOutboundSchedulesCampaignReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOutboundSchedulesCampaignOK), nil

}

/*
PutOutboundSchedulesSequence updates a new sequence schedule
*/
func (a *Client) PutOutboundSchedulesSequence(ctx context.Context, params *PutOutboundSchedulesSequenceParams) (*PutOutboundSchedulesSequenceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOutboundSchedulesSequence",
		Method:             "PUT",
		PathPattern:        "/api/v2/outbound/schedules/sequences/{sequenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOutboundSchedulesSequenceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOutboundSchedulesSequenceOK), nil

}

/*
PutOutboundSequence updates a new campaign sequence
*/
func (a *Client) PutOutboundSequence(ctx context.Context, params *PutOutboundSequenceParams) (*PutOutboundSequenceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOutboundSequence",
		Method:             "PUT",
		PathPattern:        "/api/v2/outbound/sequences/{sequenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOutboundSequenceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOutboundSequenceOK), nil

}

/*
PutOutboundWrapupcodemappings updates the dialer wrap up code mapping
*/
func (a *Client) PutOutboundWrapupcodemappings(ctx context.Context, params *PutOutboundWrapupcodemappingsParams) (*PutOutboundWrapupcodemappingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putOutboundWrapupcodemappings",
		Method:             "PUT",
		PathPattern:        "/api/v2/outbound/wrapupcodemappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOutboundWrapupcodemappingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOutboundWrapupcodemappingsOK), nil

}

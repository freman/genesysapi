// Code generated by go-swagger; DO NOT EDIT.

package outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostOutboundAuditsReader is a Reader for the PostOutboundAudits structure.
type PostOutboundAuditsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostOutboundAuditsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostOutboundAuditsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostOutboundAuditsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostOutboundAuditsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostOutboundAuditsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostOutboundAuditsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostOutboundAuditsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostOutboundAuditsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostOutboundAuditsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostOutboundAuditsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostOutboundAuditsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostOutboundAuditsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostOutboundAuditsOK creates a PostOutboundAuditsOK with default headers values
func NewPostOutboundAuditsOK() *PostOutboundAuditsOK {
	return &PostOutboundAuditsOK{}
}

/*PostOutboundAuditsOK handles this case with default header values.

successful operation
*/
type PostOutboundAuditsOK struct {
	Payload *models.AuditSearchResult
}

func (o *PostOutboundAuditsOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/audits][%d] postOutboundAuditsOK  %+v", 200, o.Payload)
}

func (o *PostOutboundAuditsOK) GetPayload() *models.AuditSearchResult {
	return o.Payload
}

func (o *PostOutboundAuditsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuditSearchResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAuditsBadRequest creates a PostOutboundAuditsBadRequest with default headers values
func NewPostOutboundAuditsBadRequest() *PostOutboundAuditsBadRequest {
	return &PostOutboundAuditsBadRequest{}
}

/*PostOutboundAuditsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostOutboundAuditsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostOutboundAuditsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/audits][%d] postOutboundAuditsBadRequest  %+v", 400, o.Payload)
}

func (o *PostOutboundAuditsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAuditsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAuditsUnauthorized creates a PostOutboundAuditsUnauthorized with default headers values
func NewPostOutboundAuditsUnauthorized() *PostOutboundAuditsUnauthorized {
	return &PostOutboundAuditsUnauthorized{}
}

/*PostOutboundAuditsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostOutboundAuditsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostOutboundAuditsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/audits][%d] postOutboundAuditsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostOutboundAuditsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAuditsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAuditsForbidden creates a PostOutboundAuditsForbidden with default headers values
func NewPostOutboundAuditsForbidden() *PostOutboundAuditsForbidden {
	return &PostOutboundAuditsForbidden{}
}

/*PostOutboundAuditsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostOutboundAuditsForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostOutboundAuditsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/audits][%d] postOutboundAuditsForbidden  %+v", 403, o.Payload)
}

func (o *PostOutboundAuditsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAuditsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAuditsNotFound creates a PostOutboundAuditsNotFound with default headers values
func NewPostOutboundAuditsNotFound() *PostOutboundAuditsNotFound {
	return &PostOutboundAuditsNotFound{}
}

/*PostOutboundAuditsNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostOutboundAuditsNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostOutboundAuditsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/audits][%d] postOutboundAuditsNotFound  %+v", 404, o.Payload)
}

func (o *PostOutboundAuditsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAuditsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAuditsRequestEntityTooLarge creates a PostOutboundAuditsRequestEntityTooLarge with default headers values
func NewPostOutboundAuditsRequestEntityTooLarge() *PostOutboundAuditsRequestEntityTooLarge {
	return &PostOutboundAuditsRequestEntityTooLarge{}
}

/*PostOutboundAuditsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PostOutboundAuditsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostOutboundAuditsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/audits][%d] postOutboundAuditsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostOutboundAuditsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAuditsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAuditsUnsupportedMediaType creates a PostOutboundAuditsUnsupportedMediaType with default headers values
func NewPostOutboundAuditsUnsupportedMediaType() *PostOutboundAuditsUnsupportedMediaType {
	return &PostOutboundAuditsUnsupportedMediaType{}
}

/*PostOutboundAuditsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostOutboundAuditsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostOutboundAuditsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/audits][%d] postOutboundAuditsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostOutboundAuditsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAuditsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAuditsTooManyRequests creates a PostOutboundAuditsTooManyRequests with default headers values
func NewPostOutboundAuditsTooManyRequests() *PostOutboundAuditsTooManyRequests {
	return &PostOutboundAuditsTooManyRequests{}
}

/*PostOutboundAuditsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PostOutboundAuditsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostOutboundAuditsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/audits][%d] postOutboundAuditsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostOutboundAuditsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAuditsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAuditsInternalServerError creates a PostOutboundAuditsInternalServerError with default headers values
func NewPostOutboundAuditsInternalServerError() *PostOutboundAuditsInternalServerError {
	return &PostOutboundAuditsInternalServerError{}
}

/*PostOutboundAuditsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostOutboundAuditsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostOutboundAuditsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/audits][%d] postOutboundAuditsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostOutboundAuditsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAuditsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAuditsServiceUnavailable creates a PostOutboundAuditsServiceUnavailable with default headers values
func NewPostOutboundAuditsServiceUnavailable() *PostOutboundAuditsServiceUnavailable {
	return &PostOutboundAuditsServiceUnavailable{}
}

/*PostOutboundAuditsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostOutboundAuditsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostOutboundAuditsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/audits][%d] postOutboundAuditsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostOutboundAuditsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAuditsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAuditsGatewayTimeout creates a PostOutboundAuditsGatewayTimeout with default headers values
func NewPostOutboundAuditsGatewayTimeout() *PostOutboundAuditsGatewayTimeout {
	return &PostOutboundAuditsGatewayTimeout{}
}

/*PostOutboundAuditsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostOutboundAuditsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostOutboundAuditsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/audits][%d] postOutboundAuditsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostOutboundAuditsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAuditsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetOutboundRulesetReader is a Reader for the GetOutboundRuleset structure.
type GetOutboundRulesetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOutboundRulesetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOutboundRulesetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOutboundRulesetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOutboundRulesetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOutboundRulesetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOutboundRulesetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetOutboundRulesetRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetOutboundRulesetRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetOutboundRulesetUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOutboundRulesetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOutboundRulesetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetOutboundRulesetServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetOutboundRulesetGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOutboundRulesetOK creates a GetOutboundRulesetOK with default headers values
func NewGetOutboundRulesetOK() *GetOutboundRulesetOK {
	return &GetOutboundRulesetOK{}
}

/*GetOutboundRulesetOK handles this case with default header values.

successful operation
*/
type GetOutboundRulesetOK struct {
	Payload *models.RuleSet
}

func (o *GetOutboundRulesetOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/rulesets/{ruleSetId}][%d] getOutboundRulesetOK  %+v", 200, o.Payload)
}

func (o *GetOutboundRulesetOK) GetPayload() *models.RuleSet {
	return o.Payload
}

func (o *GetOutboundRulesetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuleSet)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundRulesetBadRequest creates a GetOutboundRulesetBadRequest with default headers values
func NewGetOutboundRulesetBadRequest() *GetOutboundRulesetBadRequest {
	return &GetOutboundRulesetBadRequest{}
}

/*GetOutboundRulesetBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetOutboundRulesetBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundRulesetBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/rulesets/{ruleSetId}][%d] getOutboundRulesetBadRequest  %+v", 400, o.Payload)
}

func (o *GetOutboundRulesetBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundRulesetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundRulesetUnauthorized creates a GetOutboundRulesetUnauthorized with default headers values
func NewGetOutboundRulesetUnauthorized() *GetOutboundRulesetUnauthorized {
	return &GetOutboundRulesetUnauthorized{}
}

/*GetOutboundRulesetUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetOutboundRulesetUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundRulesetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/rulesets/{ruleSetId}][%d] getOutboundRulesetUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOutboundRulesetUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundRulesetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundRulesetForbidden creates a GetOutboundRulesetForbidden with default headers values
func NewGetOutboundRulesetForbidden() *GetOutboundRulesetForbidden {
	return &GetOutboundRulesetForbidden{}
}

/*GetOutboundRulesetForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetOutboundRulesetForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundRulesetForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/rulesets/{ruleSetId}][%d] getOutboundRulesetForbidden  %+v", 403, o.Payload)
}

func (o *GetOutboundRulesetForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundRulesetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundRulesetNotFound creates a GetOutboundRulesetNotFound with default headers values
func NewGetOutboundRulesetNotFound() *GetOutboundRulesetNotFound {
	return &GetOutboundRulesetNotFound{}
}

/*GetOutboundRulesetNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetOutboundRulesetNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundRulesetNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/rulesets/{ruleSetId}][%d] getOutboundRulesetNotFound  %+v", 404, o.Payload)
}

func (o *GetOutboundRulesetNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundRulesetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundRulesetRequestTimeout creates a GetOutboundRulesetRequestTimeout with default headers values
func NewGetOutboundRulesetRequestTimeout() *GetOutboundRulesetRequestTimeout {
	return &GetOutboundRulesetRequestTimeout{}
}

/*GetOutboundRulesetRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetOutboundRulesetRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundRulesetRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/rulesets/{ruleSetId}][%d] getOutboundRulesetRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetOutboundRulesetRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundRulesetRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundRulesetRequestEntityTooLarge creates a GetOutboundRulesetRequestEntityTooLarge with default headers values
func NewGetOutboundRulesetRequestEntityTooLarge() *GetOutboundRulesetRequestEntityTooLarge {
	return &GetOutboundRulesetRequestEntityTooLarge{}
}

/*GetOutboundRulesetRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetOutboundRulesetRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundRulesetRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/rulesets/{ruleSetId}][%d] getOutboundRulesetRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOutboundRulesetRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundRulesetRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundRulesetUnsupportedMediaType creates a GetOutboundRulesetUnsupportedMediaType with default headers values
func NewGetOutboundRulesetUnsupportedMediaType() *GetOutboundRulesetUnsupportedMediaType {
	return &GetOutboundRulesetUnsupportedMediaType{}
}

/*GetOutboundRulesetUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetOutboundRulesetUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundRulesetUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/rulesets/{ruleSetId}][%d] getOutboundRulesetUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOutboundRulesetUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundRulesetUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundRulesetTooManyRequests creates a GetOutboundRulesetTooManyRequests with default headers values
func NewGetOutboundRulesetTooManyRequests() *GetOutboundRulesetTooManyRequests {
	return &GetOutboundRulesetTooManyRequests{}
}

/*GetOutboundRulesetTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetOutboundRulesetTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundRulesetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/rulesets/{ruleSetId}][%d] getOutboundRulesetTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOutboundRulesetTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundRulesetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundRulesetInternalServerError creates a GetOutboundRulesetInternalServerError with default headers values
func NewGetOutboundRulesetInternalServerError() *GetOutboundRulesetInternalServerError {
	return &GetOutboundRulesetInternalServerError{}
}

/*GetOutboundRulesetInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetOutboundRulesetInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundRulesetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/rulesets/{ruleSetId}][%d] getOutboundRulesetInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOutboundRulesetInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundRulesetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundRulesetServiceUnavailable creates a GetOutboundRulesetServiceUnavailable with default headers values
func NewGetOutboundRulesetServiceUnavailable() *GetOutboundRulesetServiceUnavailable {
	return &GetOutboundRulesetServiceUnavailable{}
}

/*GetOutboundRulesetServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetOutboundRulesetServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundRulesetServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/rulesets/{ruleSetId}][%d] getOutboundRulesetServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOutboundRulesetServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundRulesetServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundRulesetGatewayTimeout creates a GetOutboundRulesetGatewayTimeout with default headers values
func NewGetOutboundRulesetGatewayTimeout() *GetOutboundRulesetGatewayTimeout {
	return &GetOutboundRulesetGatewayTimeout{}
}

/*GetOutboundRulesetGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetOutboundRulesetGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetOutboundRulesetGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/rulesets/{ruleSetId}][%d] getOutboundRulesetGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetOutboundRulesetGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundRulesetGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

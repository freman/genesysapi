// Code generated by go-swagger; DO NOT EDIT.

package outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetOutboundEventReader is a Reader for the GetOutboundEvent structure.
type GetOutboundEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOutboundEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOutboundEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOutboundEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOutboundEventUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOutboundEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOutboundEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetOutboundEventRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetOutboundEventRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetOutboundEventUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOutboundEventTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOutboundEventInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetOutboundEventServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetOutboundEventGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOutboundEventOK creates a GetOutboundEventOK with default headers values
func NewGetOutboundEventOK() *GetOutboundEventOK {
	return &GetOutboundEventOK{}
}

/*
GetOutboundEventOK describes a response with status code 200, with default header values.

successful operation
*/
type GetOutboundEventOK struct {
	Payload *models.EventLog
}

// IsSuccess returns true when this get outbound event o k response has a 2xx status code
func (o *GetOutboundEventOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get outbound event o k response has a 3xx status code
func (o *GetOutboundEventOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound event o k response has a 4xx status code
func (o *GetOutboundEventOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get outbound event o k response has a 5xx status code
func (o *GetOutboundEventOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound event o k response a status code equal to that given
func (o *GetOutboundEventOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetOutboundEventOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventOK  %+v", 200, o.Payload)
}

func (o *GetOutboundEventOK) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventOK  %+v", 200, o.Payload)
}

func (o *GetOutboundEventOK) GetPayload() *models.EventLog {
	return o.Payload
}

func (o *GetOutboundEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EventLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventBadRequest creates a GetOutboundEventBadRequest with default headers values
func NewGetOutboundEventBadRequest() *GetOutboundEventBadRequest {
	return &GetOutboundEventBadRequest{}
}

/*
GetOutboundEventBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetOutboundEventBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound event bad request response has a 2xx status code
func (o *GetOutboundEventBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound event bad request response has a 3xx status code
func (o *GetOutboundEventBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound event bad request response has a 4xx status code
func (o *GetOutboundEventBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound event bad request response has a 5xx status code
func (o *GetOutboundEventBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound event bad request response a status code equal to that given
func (o *GetOutboundEventBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetOutboundEventBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventBadRequest  %+v", 400, o.Payload)
}

func (o *GetOutboundEventBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventBadRequest  %+v", 400, o.Payload)
}

func (o *GetOutboundEventBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventUnauthorized creates a GetOutboundEventUnauthorized with default headers values
func NewGetOutboundEventUnauthorized() *GetOutboundEventUnauthorized {
	return &GetOutboundEventUnauthorized{}
}

/*
GetOutboundEventUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetOutboundEventUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound event unauthorized response has a 2xx status code
func (o *GetOutboundEventUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound event unauthorized response has a 3xx status code
func (o *GetOutboundEventUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound event unauthorized response has a 4xx status code
func (o *GetOutboundEventUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound event unauthorized response has a 5xx status code
func (o *GetOutboundEventUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound event unauthorized response a status code equal to that given
func (o *GetOutboundEventUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetOutboundEventUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOutboundEventUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOutboundEventUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventForbidden creates a GetOutboundEventForbidden with default headers values
func NewGetOutboundEventForbidden() *GetOutboundEventForbidden {
	return &GetOutboundEventForbidden{}
}

/*
GetOutboundEventForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetOutboundEventForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound event forbidden response has a 2xx status code
func (o *GetOutboundEventForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound event forbidden response has a 3xx status code
func (o *GetOutboundEventForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound event forbidden response has a 4xx status code
func (o *GetOutboundEventForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound event forbidden response has a 5xx status code
func (o *GetOutboundEventForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound event forbidden response a status code equal to that given
func (o *GetOutboundEventForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetOutboundEventForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventForbidden  %+v", 403, o.Payload)
}

func (o *GetOutboundEventForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventForbidden  %+v", 403, o.Payload)
}

func (o *GetOutboundEventForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventNotFound creates a GetOutboundEventNotFound with default headers values
func NewGetOutboundEventNotFound() *GetOutboundEventNotFound {
	return &GetOutboundEventNotFound{}
}

/*
GetOutboundEventNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetOutboundEventNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound event not found response has a 2xx status code
func (o *GetOutboundEventNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound event not found response has a 3xx status code
func (o *GetOutboundEventNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound event not found response has a 4xx status code
func (o *GetOutboundEventNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound event not found response has a 5xx status code
func (o *GetOutboundEventNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound event not found response a status code equal to that given
func (o *GetOutboundEventNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetOutboundEventNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventNotFound  %+v", 404, o.Payload)
}

func (o *GetOutboundEventNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventNotFound  %+v", 404, o.Payload)
}

func (o *GetOutboundEventNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventRequestTimeout creates a GetOutboundEventRequestTimeout with default headers values
func NewGetOutboundEventRequestTimeout() *GetOutboundEventRequestTimeout {
	return &GetOutboundEventRequestTimeout{}
}

/*
GetOutboundEventRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetOutboundEventRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound event request timeout response has a 2xx status code
func (o *GetOutboundEventRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound event request timeout response has a 3xx status code
func (o *GetOutboundEventRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound event request timeout response has a 4xx status code
func (o *GetOutboundEventRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound event request timeout response has a 5xx status code
func (o *GetOutboundEventRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound event request timeout response a status code equal to that given
func (o *GetOutboundEventRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetOutboundEventRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetOutboundEventRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetOutboundEventRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventRequestEntityTooLarge creates a GetOutboundEventRequestEntityTooLarge with default headers values
func NewGetOutboundEventRequestEntityTooLarge() *GetOutboundEventRequestEntityTooLarge {
	return &GetOutboundEventRequestEntityTooLarge{}
}

/*
GetOutboundEventRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetOutboundEventRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound event request entity too large response has a 2xx status code
func (o *GetOutboundEventRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound event request entity too large response has a 3xx status code
func (o *GetOutboundEventRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound event request entity too large response has a 4xx status code
func (o *GetOutboundEventRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound event request entity too large response has a 5xx status code
func (o *GetOutboundEventRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound event request entity too large response a status code equal to that given
func (o *GetOutboundEventRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetOutboundEventRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOutboundEventRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOutboundEventRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventUnsupportedMediaType creates a GetOutboundEventUnsupportedMediaType with default headers values
func NewGetOutboundEventUnsupportedMediaType() *GetOutboundEventUnsupportedMediaType {
	return &GetOutboundEventUnsupportedMediaType{}
}

/*
GetOutboundEventUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetOutboundEventUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound event unsupported media type response has a 2xx status code
func (o *GetOutboundEventUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound event unsupported media type response has a 3xx status code
func (o *GetOutboundEventUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound event unsupported media type response has a 4xx status code
func (o *GetOutboundEventUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound event unsupported media type response has a 5xx status code
func (o *GetOutboundEventUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound event unsupported media type response a status code equal to that given
func (o *GetOutboundEventUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetOutboundEventUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOutboundEventUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOutboundEventUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventTooManyRequests creates a GetOutboundEventTooManyRequests with default headers values
func NewGetOutboundEventTooManyRequests() *GetOutboundEventTooManyRequests {
	return &GetOutboundEventTooManyRequests{}
}

/*
GetOutboundEventTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetOutboundEventTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound event too many requests response has a 2xx status code
func (o *GetOutboundEventTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound event too many requests response has a 3xx status code
func (o *GetOutboundEventTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound event too many requests response has a 4xx status code
func (o *GetOutboundEventTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound event too many requests response has a 5xx status code
func (o *GetOutboundEventTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound event too many requests response a status code equal to that given
func (o *GetOutboundEventTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetOutboundEventTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOutboundEventTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOutboundEventTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventInternalServerError creates a GetOutboundEventInternalServerError with default headers values
func NewGetOutboundEventInternalServerError() *GetOutboundEventInternalServerError {
	return &GetOutboundEventInternalServerError{}
}

/*
GetOutboundEventInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetOutboundEventInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound event internal server error response has a 2xx status code
func (o *GetOutboundEventInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound event internal server error response has a 3xx status code
func (o *GetOutboundEventInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound event internal server error response has a 4xx status code
func (o *GetOutboundEventInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get outbound event internal server error response has a 5xx status code
func (o *GetOutboundEventInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get outbound event internal server error response a status code equal to that given
func (o *GetOutboundEventInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetOutboundEventInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOutboundEventInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOutboundEventInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventServiceUnavailable creates a GetOutboundEventServiceUnavailable with default headers values
func NewGetOutboundEventServiceUnavailable() *GetOutboundEventServiceUnavailable {
	return &GetOutboundEventServiceUnavailable{}
}

/*
GetOutboundEventServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetOutboundEventServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound event service unavailable response has a 2xx status code
func (o *GetOutboundEventServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound event service unavailable response has a 3xx status code
func (o *GetOutboundEventServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound event service unavailable response has a 4xx status code
func (o *GetOutboundEventServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get outbound event service unavailable response has a 5xx status code
func (o *GetOutboundEventServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get outbound event service unavailable response a status code equal to that given
func (o *GetOutboundEventServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetOutboundEventServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOutboundEventServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOutboundEventServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundEventGatewayTimeout creates a GetOutboundEventGatewayTimeout with default headers values
func NewGetOutboundEventGatewayTimeout() *GetOutboundEventGatewayTimeout {
	return &GetOutboundEventGatewayTimeout{}
}

/*
GetOutboundEventGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetOutboundEventGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get outbound event gateway timeout response has a 2xx status code
func (o *GetOutboundEventGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound event gateway timeout response has a 3xx status code
func (o *GetOutboundEventGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound event gateway timeout response has a 4xx status code
func (o *GetOutboundEventGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get outbound event gateway timeout response has a 5xx status code
func (o *GetOutboundEventGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get outbound event gateway timeout response a status code equal to that given
func (o *GetOutboundEventGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetOutboundEventGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetOutboundEventGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/outbound/events/{eventId}][%d] getOutboundEventGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetOutboundEventGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetOutboundEventGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostOutboundAttemptlimitsReader is a Reader for the PostOutboundAttemptlimits structure.
type PostOutboundAttemptlimitsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostOutboundAttemptlimitsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostOutboundAttemptlimitsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostOutboundAttemptlimitsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostOutboundAttemptlimitsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostOutboundAttemptlimitsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostOutboundAttemptlimitsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostOutboundAttemptlimitsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostOutboundAttemptlimitsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostOutboundAttemptlimitsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostOutboundAttemptlimitsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostOutboundAttemptlimitsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostOutboundAttemptlimitsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostOutboundAttemptlimitsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostOutboundAttemptlimitsOK creates a PostOutboundAttemptlimitsOK with default headers values
func NewPostOutboundAttemptlimitsOK() *PostOutboundAttemptlimitsOK {
	return &PostOutboundAttemptlimitsOK{}
}

/*
PostOutboundAttemptlimitsOK describes a response with status code 200, with default header values.

successful operation
*/
type PostOutboundAttemptlimitsOK struct {
	Payload *models.AttemptLimits
}

// IsSuccess returns true when this post outbound attemptlimits o k response has a 2xx status code
func (o *PostOutboundAttemptlimitsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post outbound attemptlimits o k response has a 3xx status code
func (o *PostOutboundAttemptlimitsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound attemptlimits o k response has a 4xx status code
func (o *PostOutboundAttemptlimitsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post outbound attemptlimits o k response has a 5xx status code
func (o *PostOutboundAttemptlimitsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound attemptlimits o k response a status code equal to that given
func (o *PostOutboundAttemptlimitsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostOutboundAttemptlimitsOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsOK  %+v", 200, o.Payload)
}

func (o *PostOutboundAttemptlimitsOK) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsOK  %+v", 200, o.Payload)
}

func (o *PostOutboundAttemptlimitsOK) GetPayload() *models.AttemptLimits {
	return o.Payload
}

func (o *PostOutboundAttemptlimitsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AttemptLimits)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAttemptlimitsBadRequest creates a PostOutboundAttemptlimitsBadRequest with default headers values
func NewPostOutboundAttemptlimitsBadRequest() *PostOutboundAttemptlimitsBadRequest {
	return &PostOutboundAttemptlimitsBadRequest{}
}

/*
PostOutboundAttemptlimitsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostOutboundAttemptlimitsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound attemptlimits bad request response has a 2xx status code
func (o *PostOutboundAttemptlimitsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound attemptlimits bad request response has a 3xx status code
func (o *PostOutboundAttemptlimitsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound attemptlimits bad request response has a 4xx status code
func (o *PostOutboundAttemptlimitsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound attemptlimits bad request response has a 5xx status code
func (o *PostOutboundAttemptlimitsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound attemptlimits bad request response a status code equal to that given
func (o *PostOutboundAttemptlimitsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostOutboundAttemptlimitsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsBadRequest  %+v", 400, o.Payload)
}

func (o *PostOutboundAttemptlimitsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsBadRequest  %+v", 400, o.Payload)
}

func (o *PostOutboundAttemptlimitsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAttemptlimitsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAttemptlimitsUnauthorized creates a PostOutboundAttemptlimitsUnauthorized with default headers values
func NewPostOutboundAttemptlimitsUnauthorized() *PostOutboundAttemptlimitsUnauthorized {
	return &PostOutboundAttemptlimitsUnauthorized{}
}

/*
PostOutboundAttemptlimitsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostOutboundAttemptlimitsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound attemptlimits unauthorized response has a 2xx status code
func (o *PostOutboundAttemptlimitsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound attemptlimits unauthorized response has a 3xx status code
func (o *PostOutboundAttemptlimitsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound attemptlimits unauthorized response has a 4xx status code
func (o *PostOutboundAttemptlimitsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound attemptlimits unauthorized response has a 5xx status code
func (o *PostOutboundAttemptlimitsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound attemptlimits unauthorized response a status code equal to that given
func (o *PostOutboundAttemptlimitsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostOutboundAttemptlimitsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostOutboundAttemptlimitsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostOutboundAttemptlimitsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAttemptlimitsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAttemptlimitsForbidden creates a PostOutboundAttemptlimitsForbidden with default headers values
func NewPostOutboundAttemptlimitsForbidden() *PostOutboundAttemptlimitsForbidden {
	return &PostOutboundAttemptlimitsForbidden{}
}

/*
PostOutboundAttemptlimitsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostOutboundAttemptlimitsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound attemptlimits forbidden response has a 2xx status code
func (o *PostOutboundAttemptlimitsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound attemptlimits forbidden response has a 3xx status code
func (o *PostOutboundAttemptlimitsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound attemptlimits forbidden response has a 4xx status code
func (o *PostOutboundAttemptlimitsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound attemptlimits forbidden response has a 5xx status code
func (o *PostOutboundAttemptlimitsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound attemptlimits forbidden response a status code equal to that given
func (o *PostOutboundAttemptlimitsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostOutboundAttemptlimitsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsForbidden  %+v", 403, o.Payload)
}

func (o *PostOutboundAttemptlimitsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsForbidden  %+v", 403, o.Payload)
}

func (o *PostOutboundAttemptlimitsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAttemptlimitsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAttemptlimitsNotFound creates a PostOutboundAttemptlimitsNotFound with default headers values
func NewPostOutboundAttemptlimitsNotFound() *PostOutboundAttemptlimitsNotFound {
	return &PostOutboundAttemptlimitsNotFound{}
}

/*
PostOutboundAttemptlimitsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostOutboundAttemptlimitsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound attemptlimits not found response has a 2xx status code
func (o *PostOutboundAttemptlimitsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound attemptlimits not found response has a 3xx status code
func (o *PostOutboundAttemptlimitsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound attemptlimits not found response has a 4xx status code
func (o *PostOutboundAttemptlimitsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound attemptlimits not found response has a 5xx status code
func (o *PostOutboundAttemptlimitsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound attemptlimits not found response a status code equal to that given
func (o *PostOutboundAttemptlimitsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostOutboundAttemptlimitsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsNotFound  %+v", 404, o.Payload)
}

func (o *PostOutboundAttemptlimitsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsNotFound  %+v", 404, o.Payload)
}

func (o *PostOutboundAttemptlimitsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAttemptlimitsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAttemptlimitsRequestTimeout creates a PostOutboundAttemptlimitsRequestTimeout with default headers values
func NewPostOutboundAttemptlimitsRequestTimeout() *PostOutboundAttemptlimitsRequestTimeout {
	return &PostOutboundAttemptlimitsRequestTimeout{}
}

/*
PostOutboundAttemptlimitsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostOutboundAttemptlimitsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound attemptlimits request timeout response has a 2xx status code
func (o *PostOutboundAttemptlimitsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound attemptlimits request timeout response has a 3xx status code
func (o *PostOutboundAttemptlimitsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound attemptlimits request timeout response has a 4xx status code
func (o *PostOutboundAttemptlimitsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound attemptlimits request timeout response has a 5xx status code
func (o *PostOutboundAttemptlimitsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound attemptlimits request timeout response a status code equal to that given
func (o *PostOutboundAttemptlimitsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostOutboundAttemptlimitsRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostOutboundAttemptlimitsRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostOutboundAttemptlimitsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAttemptlimitsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAttemptlimitsRequestEntityTooLarge creates a PostOutboundAttemptlimitsRequestEntityTooLarge with default headers values
func NewPostOutboundAttemptlimitsRequestEntityTooLarge() *PostOutboundAttemptlimitsRequestEntityTooLarge {
	return &PostOutboundAttemptlimitsRequestEntityTooLarge{}
}

/*
PostOutboundAttemptlimitsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PostOutboundAttemptlimitsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound attemptlimits request entity too large response has a 2xx status code
func (o *PostOutboundAttemptlimitsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound attemptlimits request entity too large response has a 3xx status code
func (o *PostOutboundAttemptlimitsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound attemptlimits request entity too large response has a 4xx status code
func (o *PostOutboundAttemptlimitsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound attemptlimits request entity too large response has a 5xx status code
func (o *PostOutboundAttemptlimitsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound attemptlimits request entity too large response a status code equal to that given
func (o *PostOutboundAttemptlimitsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostOutboundAttemptlimitsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostOutboundAttemptlimitsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostOutboundAttemptlimitsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAttemptlimitsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAttemptlimitsUnsupportedMediaType creates a PostOutboundAttemptlimitsUnsupportedMediaType with default headers values
func NewPostOutboundAttemptlimitsUnsupportedMediaType() *PostOutboundAttemptlimitsUnsupportedMediaType {
	return &PostOutboundAttemptlimitsUnsupportedMediaType{}
}

/*
PostOutboundAttemptlimitsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostOutboundAttemptlimitsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound attemptlimits unsupported media type response has a 2xx status code
func (o *PostOutboundAttemptlimitsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound attemptlimits unsupported media type response has a 3xx status code
func (o *PostOutboundAttemptlimitsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound attemptlimits unsupported media type response has a 4xx status code
func (o *PostOutboundAttemptlimitsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound attemptlimits unsupported media type response has a 5xx status code
func (o *PostOutboundAttemptlimitsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound attemptlimits unsupported media type response a status code equal to that given
func (o *PostOutboundAttemptlimitsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostOutboundAttemptlimitsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostOutboundAttemptlimitsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostOutboundAttemptlimitsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAttemptlimitsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAttemptlimitsTooManyRequests creates a PostOutboundAttemptlimitsTooManyRequests with default headers values
func NewPostOutboundAttemptlimitsTooManyRequests() *PostOutboundAttemptlimitsTooManyRequests {
	return &PostOutboundAttemptlimitsTooManyRequests{}
}

/*
PostOutboundAttemptlimitsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostOutboundAttemptlimitsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound attemptlimits too many requests response has a 2xx status code
func (o *PostOutboundAttemptlimitsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound attemptlimits too many requests response has a 3xx status code
func (o *PostOutboundAttemptlimitsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound attemptlimits too many requests response has a 4xx status code
func (o *PostOutboundAttemptlimitsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post outbound attemptlimits too many requests response has a 5xx status code
func (o *PostOutboundAttemptlimitsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post outbound attemptlimits too many requests response a status code equal to that given
func (o *PostOutboundAttemptlimitsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostOutboundAttemptlimitsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostOutboundAttemptlimitsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostOutboundAttemptlimitsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAttemptlimitsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAttemptlimitsInternalServerError creates a PostOutboundAttemptlimitsInternalServerError with default headers values
func NewPostOutboundAttemptlimitsInternalServerError() *PostOutboundAttemptlimitsInternalServerError {
	return &PostOutboundAttemptlimitsInternalServerError{}
}

/*
PostOutboundAttemptlimitsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostOutboundAttemptlimitsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound attemptlimits internal server error response has a 2xx status code
func (o *PostOutboundAttemptlimitsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound attemptlimits internal server error response has a 3xx status code
func (o *PostOutboundAttemptlimitsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound attemptlimits internal server error response has a 4xx status code
func (o *PostOutboundAttemptlimitsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post outbound attemptlimits internal server error response has a 5xx status code
func (o *PostOutboundAttemptlimitsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post outbound attemptlimits internal server error response a status code equal to that given
func (o *PostOutboundAttemptlimitsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostOutboundAttemptlimitsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostOutboundAttemptlimitsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostOutboundAttemptlimitsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAttemptlimitsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAttemptlimitsServiceUnavailable creates a PostOutboundAttemptlimitsServiceUnavailable with default headers values
func NewPostOutboundAttemptlimitsServiceUnavailable() *PostOutboundAttemptlimitsServiceUnavailable {
	return &PostOutboundAttemptlimitsServiceUnavailable{}
}

/*
PostOutboundAttemptlimitsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostOutboundAttemptlimitsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound attemptlimits service unavailable response has a 2xx status code
func (o *PostOutboundAttemptlimitsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound attemptlimits service unavailable response has a 3xx status code
func (o *PostOutboundAttemptlimitsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound attemptlimits service unavailable response has a 4xx status code
func (o *PostOutboundAttemptlimitsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post outbound attemptlimits service unavailable response has a 5xx status code
func (o *PostOutboundAttemptlimitsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post outbound attemptlimits service unavailable response a status code equal to that given
func (o *PostOutboundAttemptlimitsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostOutboundAttemptlimitsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostOutboundAttemptlimitsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostOutboundAttemptlimitsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAttemptlimitsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutboundAttemptlimitsGatewayTimeout creates a PostOutboundAttemptlimitsGatewayTimeout with default headers values
func NewPostOutboundAttemptlimitsGatewayTimeout() *PostOutboundAttemptlimitsGatewayTimeout {
	return &PostOutboundAttemptlimitsGatewayTimeout{}
}

/*
PostOutboundAttemptlimitsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostOutboundAttemptlimitsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post outbound attemptlimits gateway timeout response has a 2xx status code
func (o *PostOutboundAttemptlimitsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post outbound attemptlimits gateway timeout response has a 3xx status code
func (o *PostOutboundAttemptlimitsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post outbound attemptlimits gateway timeout response has a 4xx status code
func (o *PostOutboundAttemptlimitsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post outbound attemptlimits gateway timeout response has a 5xx status code
func (o *PostOutboundAttemptlimitsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post outbound attemptlimits gateway timeout response a status code equal to that given
func (o *PostOutboundAttemptlimitsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostOutboundAttemptlimitsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostOutboundAttemptlimitsGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/outbound/attemptlimits][%d] postOutboundAttemptlimitsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostOutboundAttemptlimitsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostOutboundAttemptlimitsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

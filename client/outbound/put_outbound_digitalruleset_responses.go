// Code generated by go-swagger; DO NOT EDIT.

package outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutOutboundDigitalrulesetReader is a Reader for the PutOutboundDigitalruleset structure.
type PutOutboundDigitalrulesetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutOutboundDigitalrulesetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutOutboundDigitalrulesetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutOutboundDigitalrulesetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutOutboundDigitalrulesetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutOutboundDigitalrulesetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutOutboundDigitalrulesetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutOutboundDigitalrulesetRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutOutboundDigitalrulesetConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutOutboundDigitalrulesetRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutOutboundDigitalrulesetUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutOutboundDigitalrulesetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutOutboundDigitalrulesetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutOutboundDigitalrulesetServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutOutboundDigitalrulesetGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutOutboundDigitalrulesetOK creates a PutOutboundDigitalrulesetOK with default headers values
func NewPutOutboundDigitalrulesetOK() *PutOutboundDigitalrulesetOK {
	return &PutOutboundDigitalrulesetOK{}
}

/*PutOutboundDigitalrulesetOK handles this case with default header values.

successful operation
*/
type PutOutboundDigitalrulesetOK struct {
	Payload *models.DigitalRuleSet
}

func (o *PutOutboundDigitalrulesetOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] putOutboundDigitalrulesetOK  %+v", 200, o.Payload)
}

func (o *PutOutboundDigitalrulesetOK) GetPayload() *models.DigitalRuleSet {
	return o.Payload
}

func (o *PutOutboundDigitalrulesetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DigitalRuleSet)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundDigitalrulesetBadRequest creates a PutOutboundDigitalrulesetBadRequest with default headers values
func NewPutOutboundDigitalrulesetBadRequest() *PutOutboundDigitalrulesetBadRequest {
	return &PutOutboundDigitalrulesetBadRequest{}
}

/*PutOutboundDigitalrulesetBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutOutboundDigitalrulesetBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundDigitalrulesetBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] putOutboundDigitalrulesetBadRequest  %+v", 400, o.Payload)
}

func (o *PutOutboundDigitalrulesetBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundDigitalrulesetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundDigitalrulesetUnauthorized creates a PutOutboundDigitalrulesetUnauthorized with default headers values
func NewPutOutboundDigitalrulesetUnauthorized() *PutOutboundDigitalrulesetUnauthorized {
	return &PutOutboundDigitalrulesetUnauthorized{}
}

/*PutOutboundDigitalrulesetUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutOutboundDigitalrulesetUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundDigitalrulesetUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] putOutboundDigitalrulesetUnauthorized  %+v", 401, o.Payload)
}

func (o *PutOutboundDigitalrulesetUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundDigitalrulesetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundDigitalrulesetForbidden creates a PutOutboundDigitalrulesetForbidden with default headers values
func NewPutOutboundDigitalrulesetForbidden() *PutOutboundDigitalrulesetForbidden {
	return &PutOutboundDigitalrulesetForbidden{}
}

/*PutOutboundDigitalrulesetForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutOutboundDigitalrulesetForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundDigitalrulesetForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] putOutboundDigitalrulesetForbidden  %+v", 403, o.Payload)
}

func (o *PutOutboundDigitalrulesetForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundDigitalrulesetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundDigitalrulesetNotFound creates a PutOutboundDigitalrulesetNotFound with default headers values
func NewPutOutboundDigitalrulesetNotFound() *PutOutboundDigitalrulesetNotFound {
	return &PutOutboundDigitalrulesetNotFound{}
}

/*PutOutboundDigitalrulesetNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutOutboundDigitalrulesetNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundDigitalrulesetNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] putOutboundDigitalrulesetNotFound  %+v", 404, o.Payload)
}

func (o *PutOutboundDigitalrulesetNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundDigitalrulesetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundDigitalrulesetRequestTimeout creates a PutOutboundDigitalrulesetRequestTimeout with default headers values
func NewPutOutboundDigitalrulesetRequestTimeout() *PutOutboundDigitalrulesetRequestTimeout {
	return &PutOutboundDigitalrulesetRequestTimeout{}
}

/*PutOutboundDigitalrulesetRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutOutboundDigitalrulesetRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundDigitalrulesetRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] putOutboundDigitalrulesetRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutOutboundDigitalrulesetRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundDigitalrulesetRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundDigitalrulesetConflict creates a PutOutboundDigitalrulesetConflict with default headers values
func NewPutOutboundDigitalrulesetConflict() *PutOutboundDigitalrulesetConflict {
	return &PutOutboundDigitalrulesetConflict{}
}

/*PutOutboundDigitalrulesetConflict handles this case with default header values.

Conflict.
*/
type PutOutboundDigitalrulesetConflict struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundDigitalrulesetConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] putOutboundDigitalrulesetConflict  %+v", 409, o.Payload)
}

func (o *PutOutboundDigitalrulesetConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundDigitalrulesetConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundDigitalrulesetRequestEntityTooLarge creates a PutOutboundDigitalrulesetRequestEntityTooLarge with default headers values
func NewPutOutboundDigitalrulesetRequestEntityTooLarge() *PutOutboundDigitalrulesetRequestEntityTooLarge {
	return &PutOutboundDigitalrulesetRequestEntityTooLarge{}
}

/*PutOutboundDigitalrulesetRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutOutboundDigitalrulesetRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundDigitalrulesetRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] putOutboundDigitalrulesetRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutOutboundDigitalrulesetRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundDigitalrulesetRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundDigitalrulesetUnsupportedMediaType creates a PutOutboundDigitalrulesetUnsupportedMediaType with default headers values
func NewPutOutboundDigitalrulesetUnsupportedMediaType() *PutOutboundDigitalrulesetUnsupportedMediaType {
	return &PutOutboundDigitalrulesetUnsupportedMediaType{}
}

/*PutOutboundDigitalrulesetUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutOutboundDigitalrulesetUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundDigitalrulesetUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] putOutboundDigitalrulesetUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutOutboundDigitalrulesetUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundDigitalrulesetUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundDigitalrulesetTooManyRequests creates a PutOutboundDigitalrulesetTooManyRequests with default headers values
func NewPutOutboundDigitalrulesetTooManyRequests() *PutOutboundDigitalrulesetTooManyRequests {
	return &PutOutboundDigitalrulesetTooManyRequests{}
}

/*PutOutboundDigitalrulesetTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutOutboundDigitalrulesetTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundDigitalrulesetTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] putOutboundDigitalrulesetTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutOutboundDigitalrulesetTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundDigitalrulesetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundDigitalrulesetInternalServerError creates a PutOutboundDigitalrulesetInternalServerError with default headers values
func NewPutOutboundDigitalrulesetInternalServerError() *PutOutboundDigitalrulesetInternalServerError {
	return &PutOutboundDigitalrulesetInternalServerError{}
}

/*PutOutboundDigitalrulesetInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutOutboundDigitalrulesetInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundDigitalrulesetInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] putOutboundDigitalrulesetInternalServerError  %+v", 500, o.Payload)
}

func (o *PutOutboundDigitalrulesetInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundDigitalrulesetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundDigitalrulesetServiceUnavailable creates a PutOutboundDigitalrulesetServiceUnavailable with default headers values
func NewPutOutboundDigitalrulesetServiceUnavailable() *PutOutboundDigitalrulesetServiceUnavailable {
	return &PutOutboundDigitalrulesetServiceUnavailable{}
}

/*PutOutboundDigitalrulesetServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutOutboundDigitalrulesetServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundDigitalrulesetServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] putOutboundDigitalrulesetServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutOutboundDigitalrulesetServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundDigitalrulesetServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOutboundDigitalrulesetGatewayTimeout creates a PutOutboundDigitalrulesetGatewayTimeout with default headers values
func NewPutOutboundDigitalrulesetGatewayTimeout() *PutOutboundDigitalrulesetGatewayTimeout {
	return &PutOutboundDigitalrulesetGatewayTimeout{}
}

/*PutOutboundDigitalrulesetGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutOutboundDigitalrulesetGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutOutboundDigitalrulesetGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/outbound/digitalrulesets/{digitalRuleSetId}][%d] putOutboundDigitalrulesetGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutOutboundDigitalrulesetGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOutboundDigitalrulesetGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

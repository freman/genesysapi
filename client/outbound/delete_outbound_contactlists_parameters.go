// Code generated by go-swagger; DO NOT EDIT.

package outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteOutboundContactlistsParams creates a new DeleteOutboundContactlistsParams object
// with the default values initialized.
func NewDeleteOutboundContactlistsParams() *DeleteOutboundContactlistsParams {
	var ()
	return &DeleteOutboundContactlistsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteOutboundContactlistsParamsWithTimeout creates a new DeleteOutboundContactlistsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteOutboundContactlistsParamsWithTimeout(timeout time.Duration) *DeleteOutboundContactlistsParams {
	var ()
	return &DeleteOutboundContactlistsParams{

		timeout: timeout,
	}
}

// NewDeleteOutboundContactlistsParamsWithContext creates a new DeleteOutboundContactlistsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteOutboundContactlistsParamsWithContext(ctx context.Context) *DeleteOutboundContactlistsParams {
	var ()
	return &DeleteOutboundContactlistsParams{

		Context: ctx,
	}
}

// NewDeleteOutboundContactlistsParamsWithHTTPClient creates a new DeleteOutboundContactlistsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteOutboundContactlistsParamsWithHTTPClient(client *http.Client) *DeleteOutboundContactlistsParams {
	var ()
	return &DeleteOutboundContactlistsParams{
		HTTPClient: client,
	}
}

/*DeleteOutboundContactlistsParams contains all the parameters to send to the API endpoint
for the delete outbound contactlists operation typically these are written to a http.Request
*/
type DeleteOutboundContactlistsParams struct {

	/*ID
	  contact list id(s) to delete

	*/
	ID []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete outbound contactlists params
func (o *DeleteOutboundContactlistsParams) WithTimeout(timeout time.Duration) *DeleteOutboundContactlistsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete outbound contactlists params
func (o *DeleteOutboundContactlistsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete outbound contactlists params
func (o *DeleteOutboundContactlistsParams) WithContext(ctx context.Context) *DeleteOutboundContactlistsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete outbound contactlists params
func (o *DeleteOutboundContactlistsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete outbound contactlists params
func (o *DeleteOutboundContactlistsParams) WithHTTPClient(client *http.Client) *DeleteOutboundContactlistsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete outbound contactlists params
func (o *DeleteOutboundContactlistsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the delete outbound contactlists params
func (o *DeleteOutboundContactlistsParams) WithID(id []string) *DeleteOutboundContactlistsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the delete outbound contactlists params
func (o *DeleteOutboundContactlistsParams) SetID(id []string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteOutboundContactlistsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesID := o.ID

	joinedID := swag.JoinByFormat(valuesID, "multi")
	// query array param id
	if err := r.SetQueryParam("id", joinedID...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

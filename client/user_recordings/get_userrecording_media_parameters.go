// Code generated by go-swagger; DO NOT EDIT.

package user_recordings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetUserrecordingMediaParams creates a new GetUserrecordingMediaParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetUserrecordingMediaParams() *GetUserrecordingMediaParams {
	return &GetUserrecordingMediaParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetUserrecordingMediaParamsWithTimeout creates a new GetUserrecordingMediaParams object
// with the ability to set a timeout on a request.
func NewGetUserrecordingMediaParamsWithTimeout(timeout time.Duration) *GetUserrecordingMediaParams {
	return &GetUserrecordingMediaParams{
		timeout: timeout,
	}
}

// NewGetUserrecordingMediaParamsWithContext creates a new GetUserrecordingMediaParams object
// with the ability to set a context for a request.
func NewGetUserrecordingMediaParamsWithContext(ctx context.Context) *GetUserrecordingMediaParams {
	return &GetUserrecordingMediaParams{
		Context: ctx,
	}
}

// NewGetUserrecordingMediaParamsWithHTTPClient creates a new GetUserrecordingMediaParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetUserrecordingMediaParamsWithHTTPClient(client *http.Client) *GetUserrecordingMediaParams {
	return &GetUserrecordingMediaParams{
		HTTPClient: client,
	}
}

/*
GetUserrecordingMediaParams contains all the parameters to send to the API endpoint

	for the get userrecording media operation.

	Typically these are written to a http.Request.
*/
type GetUserrecordingMediaParams struct {

	/* Async.

	   When set to true, api will return 202 response until the recording is ready for download
	*/
	Async *bool

	/* FormatID.

	   The desired media format.

	   Default: "WEBM"
	*/
	FormatID *string

	/* RecordingID.

	   User Recording ID
	*/
	RecordingID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get userrecording media params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUserrecordingMediaParams) WithDefaults() *GetUserrecordingMediaParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get userrecording media params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUserrecordingMediaParams) SetDefaults() {
	var (
		formatIDDefault = string("WEBM")
	)

	val := GetUserrecordingMediaParams{
		FormatID: &formatIDDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get userrecording media params
func (o *GetUserrecordingMediaParams) WithTimeout(timeout time.Duration) *GetUserrecordingMediaParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get userrecording media params
func (o *GetUserrecordingMediaParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get userrecording media params
func (o *GetUserrecordingMediaParams) WithContext(ctx context.Context) *GetUserrecordingMediaParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get userrecording media params
func (o *GetUserrecordingMediaParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get userrecording media params
func (o *GetUserrecordingMediaParams) WithHTTPClient(client *http.Client) *GetUserrecordingMediaParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get userrecording media params
func (o *GetUserrecordingMediaParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAsync adds the async to the get userrecording media params
func (o *GetUserrecordingMediaParams) WithAsync(async *bool) *GetUserrecordingMediaParams {
	o.SetAsync(async)
	return o
}

// SetAsync adds the async to the get userrecording media params
func (o *GetUserrecordingMediaParams) SetAsync(async *bool) {
	o.Async = async
}

// WithFormatID adds the formatID to the get userrecording media params
func (o *GetUserrecordingMediaParams) WithFormatID(formatID *string) *GetUserrecordingMediaParams {
	o.SetFormatID(formatID)
	return o
}

// SetFormatID adds the formatId to the get userrecording media params
func (o *GetUserrecordingMediaParams) SetFormatID(formatID *string) {
	o.FormatID = formatID
}

// WithRecordingID adds the recordingID to the get userrecording media params
func (o *GetUserrecordingMediaParams) WithRecordingID(recordingID string) *GetUserrecordingMediaParams {
	o.SetRecordingID(recordingID)
	return o
}

// SetRecordingID adds the recordingId to the get userrecording media params
func (o *GetUserrecordingMediaParams) SetRecordingID(recordingID string) {
	o.RecordingID = recordingID
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserrecordingMediaParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Async != nil {

		// query param async
		var qrAsync bool

		if o.Async != nil {
			qrAsync = *o.Async
		}
		qAsync := swag.FormatBool(qrAsync)
		if qAsync != "" {

			if err := r.SetQueryParam("async", qAsync); err != nil {
				return err
			}
		}
	}

	if o.FormatID != nil {

		// query param formatId
		var qrFormatID string

		if o.FormatID != nil {
			qrFormatID = *o.FormatID
		}
		qFormatID := qrFormatID
		if qFormatID != "" {

			if err := r.SetQueryParam("formatId", qFormatID); err != nil {
				return err
			}
		}
	}

	// path param recordingId
	if err := r.SetPathParam("recordingId", o.RecordingID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package user_recordings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the user recordings client
type API interface {
	/*
	   DeleteUserrecording deletes a user recording
	*/
	DeleteUserrecording(ctx context.Context, params *DeleteUserrecordingParams) (*DeleteUserrecordingAccepted, error)
	/*
	   GetUserrecording gets a user recording
	*/
	GetUserrecording(ctx context.Context, params *GetUserrecordingParams) (*GetUserrecordingOK, error)
	/*
	   GetUserrecordingMedia downloads a user recording
	*/
	GetUserrecordingMedia(ctx context.Context, params *GetUserrecordingMediaParams) (*GetUserrecordingMediaOK, error)
	/*
	   GetUserrecordings gets a list of user recordings
	*/
	GetUserrecordings(ctx context.Context, params *GetUserrecordingsParams) (*GetUserrecordingsOK, error)
	/*
	   GetUserrecordingsSummary gets user recording summary
	*/
	GetUserrecordingsSummary(ctx context.Context, params *GetUserrecordingsSummaryParams) (*GetUserrecordingsSummaryOK, error)
	/*
	   PutUserrecording updates a user recording
	*/
	PutUserrecording(ctx context.Context, params *PutUserrecordingParams) (*PutUserrecordingOK, error)
}

// New creates a new user recordings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for user recordings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteUserrecording deletes a user recording
*/
func (a *Client) DeleteUserrecording(ctx context.Context, params *DeleteUserrecordingParams) (*DeleteUserrecordingAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserrecording",
		Method:             "DELETE",
		PathPattern:        "/api/v2/userrecordings/{recordingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserrecordingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserrecordingAccepted), nil

}

/*
GetUserrecording gets a user recording
*/
func (a *Client) GetUserrecording(ctx context.Context, params *GetUserrecordingParams) (*GetUserrecordingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserrecording",
		Method:             "GET",
		PathPattern:        "/api/v2/userrecordings/{recordingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserrecordingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserrecordingOK), nil

}

/*
GetUserrecordingMedia downloads a user recording
*/
func (a *Client) GetUserrecordingMedia(ctx context.Context, params *GetUserrecordingMediaParams) (*GetUserrecordingMediaOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserrecordingMedia",
		Method:             "GET",
		PathPattern:        "/api/v2/userrecordings/{recordingId}/media",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserrecordingMediaReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserrecordingMediaOK), nil

}

/*
GetUserrecordings gets a list of user recordings
*/
func (a *Client) GetUserrecordings(ctx context.Context, params *GetUserrecordingsParams) (*GetUserrecordingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserrecordings",
		Method:             "GET",
		PathPattern:        "/api/v2/userrecordings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserrecordingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserrecordingsOK), nil

}

/*
GetUserrecordingsSummary gets user recording summary
*/
func (a *Client) GetUserrecordingsSummary(ctx context.Context, params *GetUserrecordingsSummaryParams) (*GetUserrecordingsSummaryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserrecordingsSummary",
		Method:             "GET",
		PathPattern:        "/api/v2/userrecordings/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserrecordingsSummaryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserrecordingsSummaryOK), nil

}

/*
PutUserrecording updates a user recording
*/
func (a *Client) PutUserrecording(ctx context.Context, params *PutUserrecordingParams) (*PutUserrecordingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUserrecording",
		Method:             "PUT",
		PathPattern:        "/api/v2/userrecordings/{recordingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserrecordingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUserrecordingOK), nil

}

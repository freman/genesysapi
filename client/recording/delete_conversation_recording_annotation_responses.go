// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteConversationRecordingAnnotationReader is a Reader for the DeleteConversationRecordingAnnotation structure.
type DeleteConversationRecordingAnnotationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteConversationRecordingAnnotationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewDeleteConversationRecordingAnnotationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteConversationRecordingAnnotationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteConversationRecordingAnnotationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteConversationRecordingAnnotationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteConversationRecordingAnnotationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteConversationRecordingAnnotationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteConversationRecordingAnnotationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteConversationRecordingAnnotationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteConversationRecordingAnnotationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteConversationRecordingAnnotationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteConversationRecordingAnnotationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteConversationRecordingAnnotationBadRequest creates a DeleteConversationRecordingAnnotationBadRequest with default headers values
func NewDeleteConversationRecordingAnnotationBadRequest() *DeleteConversationRecordingAnnotationBadRequest {
	return &DeleteConversationRecordingAnnotationBadRequest{}
}

/*DeleteConversationRecordingAnnotationBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteConversationRecordingAnnotationBadRequest struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationRecordingAnnotationBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}][%d] deleteConversationRecordingAnnotationBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteConversationRecordingAnnotationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationRecordingAnnotationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationRecordingAnnotationUnauthorized creates a DeleteConversationRecordingAnnotationUnauthorized with default headers values
func NewDeleteConversationRecordingAnnotationUnauthorized() *DeleteConversationRecordingAnnotationUnauthorized {
	return &DeleteConversationRecordingAnnotationUnauthorized{}
}

/*DeleteConversationRecordingAnnotationUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteConversationRecordingAnnotationUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationRecordingAnnotationUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}][%d] deleteConversationRecordingAnnotationUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteConversationRecordingAnnotationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationRecordingAnnotationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationRecordingAnnotationForbidden creates a DeleteConversationRecordingAnnotationForbidden with default headers values
func NewDeleteConversationRecordingAnnotationForbidden() *DeleteConversationRecordingAnnotationForbidden {
	return &DeleteConversationRecordingAnnotationForbidden{}
}

/*DeleteConversationRecordingAnnotationForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type DeleteConversationRecordingAnnotationForbidden struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationRecordingAnnotationForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}][%d] deleteConversationRecordingAnnotationForbidden  %+v", 403, o.Payload)
}

func (o *DeleteConversationRecordingAnnotationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationRecordingAnnotationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationRecordingAnnotationNotFound creates a DeleteConversationRecordingAnnotationNotFound with default headers values
func NewDeleteConversationRecordingAnnotationNotFound() *DeleteConversationRecordingAnnotationNotFound {
	return &DeleteConversationRecordingAnnotationNotFound{}
}

/*DeleteConversationRecordingAnnotationNotFound handles this case with default header values.

The requested resource was not found.
*/
type DeleteConversationRecordingAnnotationNotFound struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationRecordingAnnotationNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}][%d] deleteConversationRecordingAnnotationNotFound  %+v", 404, o.Payload)
}

func (o *DeleteConversationRecordingAnnotationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationRecordingAnnotationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationRecordingAnnotationRequestEntityTooLarge creates a DeleteConversationRecordingAnnotationRequestEntityTooLarge with default headers values
func NewDeleteConversationRecordingAnnotationRequestEntityTooLarge() *DeleteConversationRecordingAnnotationRequestEntityTooLarge {
	return &DeleteConversationRecordingAnnotationRequestEntityTooLarge{}
}

/*DeleteConversationRecordingAnnotationRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type DeleteConversationRecordingAnnotationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationRecordingAnnotationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}][%d] deleteConversationRecordingAnnotationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteConversationRecordingAnnotationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationRecordingAnnotationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationRecordingAnnotationUnsupportedMediaType creates a DeleteConversationRecordingAnnotationUnsupportedMediaType with default headers values
func NewDeleteConversationRecordingAnnotationUnsupportedMediaType() *DeleteConversationRecordingAnnotationUnsupportedMediaType {
	return &DeleteConversationRecordingAnnotationUnsupportedMediaType{}
}

/*DeleteConversationRecordingAnnotationUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteConversationRecordingAnnotationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationRecordingAnnotationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}][%d] deleteConversationRecordingAnnotationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteConversationRecordingAnnotationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationRecordingAnnotationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationRecordingAnnotationTooManyRequests creates a DeleteConversationRecordingAnnotationTooManyRequests with default headers values
func NewDeleteConversationRecordingAnnotationTooManyRequests() *DeleteConversationRecordingAnnotationTooManyRequests {
	return &DeleteConversationRecordingAnnotationTooManyRequests{}
}

/*DeleteConversationRecordingAnnotationTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type DeleteConversationRecordingAnnotationTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationRecordingAnnotationTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}][%d] deleteConversationRecordingAnnotationTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteConversationRecordingAnnotationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationRecordingAnnotationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationRecordingAnnotationInternalServerError creates a DeleteConversationRecordingAnnotationInternalServerError with default headers values
func NewDeleteConversationRecordingAnnotationInternalServerError() *DeleteConversationRecordingAnnotationInternalServerError {
	return &DeleteConversationRecordingAnnotationInternalServerError{}
}

/*DeleteConversationRecordingAnnotationInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteConversationRecordingAnnotationInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationRecordingAnnotationInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}][%d] deleteConversationRecordingAnnotationInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteConversationRecordingAnnotationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationRecordingAnnotationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationRecordingAnnotationServiceUnavailable creates a DeleteConversationRecordingAnnotationServiceUnavailable with default headers values
func NewDeleteConversationRecordingAnnotationServiceUnavailable() *DeleteConversationRecordingAnnotationServiceUnavailable {
	return &DeleteConversationRecordingAnnotationServiceUnavailable{}
}

/*DeleteConversationRecordingAnnotationServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteConversationRecordingAnnotationServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationRecordingAnnotationServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}][%d] deleteConversationRecordingAnnotationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteConversationRecordingAnnotationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationRecordingAnnotationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationRecordingAnnotationGatewayTimeout creates a DeleteConversationRecordingAnnotationGatewayTimeout with default headers values
func NewDeleteConversationRecordingAnnotationGatewayTimeout() *DeleteConversationRecordingAnnotationGatewayTimeout {
	return &DeleteConversationRecordingAnnotationGatewayTimeout{}
}

/*DeleteConversationRecordingAnnotationGatewayTimeout handles this case with default header values.

The request timed out.
*/
type DeleteConversationRecordingAnnotationGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationRecordingAnnotationGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}][%d] deleteConversationRecordingAnnotationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteConversationRecordingAnnotationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationRecordingAnnotationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationRecordingAnnotationDefault creates a DeleteConversationRecordingAnnotationDefault with default headers values
func NewDeleteConversationRecordingAnnotationDefault(code int) *DeleteConversationRecordingAnnotationDefault {
	return &DeleteConversationRecordingAnnotationDefault{
		_statusCode: code,
	}
}

/*DeleteConversationRecordingAnnotationDefault handles this case with default header values.

successful operation
*/
type DeleteConversationRecordingAnnotationDefault struct {
	_statusCode int
}

// Code gets the status code for the delete conversation recording annotation default response
func (o *DeleteConversationRecordingAnnotationDefault) Code() int {
	return o._statusCode
}

func (o *DeleteConversationRecordingAnnotationDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}][%d] deleteConversationRecordingAnnotation default ", o._statusCode)
}

func (o *DeleteConversationRecordingAnnotationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

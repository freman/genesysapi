// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRecordingRecordingkeysReader is a Reader for the GetRecordingRecordingkeys structure.
type GetRecordingRecordingkeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRecordingRecordingkeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRecordingRecordingkeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRecordingRecordingkeysBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRecordingRecordingkeysUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRecordingRecordingkeysForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRecordingRecordingkeysNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRecordingRecordingkeysRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRecordingRecordingkeysRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRecordingRecordingkeysUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRecordingRecordingkeysTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRecordingRecordingkeysInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRecordingRecordingkeysServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRecordingRecordingkeysGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRecordingRecordingkeysOK creates a GetRecordingRecordingkeysOK with default headers values
func NewGetRecordingRecordingkeysOK() *GetRecordingRecordingkeysOK {
	return &GetRecordingRecordingkeysOK{}
}

/*GetRecordingRecordingkeysOK handles this case with default header values.

successful operation
*/
type GetRecordingRecordingkeysOK struct {
	Payload *models.EncryptionKeyEntityListing
}

func (o *GetRecordingRecordingkeysOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/recordingkeys][%d] getRecordingRecordingkeysOK  %+v", 200, o.Payload)
}

func (o *GetRecordingRecordingkeysOK) GetPayload() *models.EncryptionKeyEntityListing {
	return o.Payload
}

func (o *GetRecordingRecordingkeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EncryptionKeyEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingRecordingkeysBadRequest creates a GetRecordingRecordingkeysBadRequest with default headers values
func NewGetRecordingRecordingkeysBadRequest() *GetRecordingRecordingkeysBadRequest {
	return &GetRecordingRecordingkeysBadRequest{}
}

/*GetRecordingRecordingkeysBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRecordingRecordingkeysBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingRecordingkeysBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/recordingkeys][%d] getRecordingRecordingkeysBadRequest  %+v", 400, o.Payload)
}

func (o *GetRecordingRecordingkeysBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingRecordingkeysBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingRecordingkeysUnauthorized creates a GetRecordingRecordingkeysUnauthorized with default headers values
func NewGetRecordingRecordingkeysUnauthorized() *GetRecordingRecordingkeysUnauthorized {
	return &GetRecordingRecordingkeysUnauthorized{}
}

/*GetRecordingRecordingkeysUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRecordingRecordingkeysUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingRecordingkeysUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/recordingkeys][%d] getRecordingRecordingkeysUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRecordingRecordingkeysUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingRecordingkeysUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingRecordingkeysForbidden creates a GetRecordingRecordingkeysForbidden with default headers values
func NewGetRecordingRecordingkeysForbidden() *GetRecordingRecordingkeysForbidden {
	return &GetRecordingRecordingkeysForbidden{}
}

/*GetRecordingRecordingkeysForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetRecordingRecordingkeysForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingRecordingkeysForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/recordingkeys][%d] getRecordingRecordingkeysForbidden  %+v", 403, o.Payload)
}

func (o *GetRecordingRecordingkeysForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingRecordingkeysForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingRecordingkeysNotFound creates a GetRecordingRecordingkeysNotFound with default headers values
func NewGetRecordingRecordingkeysNotFound() *GetRecordingRecordingkeysNotFound {
	return &GetRecordingRecordingkeysNotFound{}
}

/*GetRecordingRecordingkeysNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetRecordingRecordingkeysNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingRecordingkeysNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/recordingkeys][%d] getRecordingRecordingkeysNotFound  %+v", 404, o.Payload)
}

func (o *GetRecordingRecordingkeysNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingRecordingkeysNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingRecordingkeysRequestTimeout creates a GetRecordingRecordingkeysRequestTimeout with default headers values
func NewGetRecordingRecordingkeysRequestTimeout() *GetRecordingRecordingkeysRequestTimeout {
	return &GetRecordingRecordingkeysRequestTimeout{}
}

/*GetRecordingRecordingkeysRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRecordingRecordingkeysRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingRecordingkeysRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/recordingkeys][%d] getRecordingRecordingkeysRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRecordingRecordingkeysRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingRecordingkeysRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingRecordingkeysRequestEntityTooLarge creates a GetRecordingRecordingkeysRequestEntityTooLarge with default headers values
func NewGetRecordingRecordingkeysRequestEntityTooLarge() *GetRecordingRecordingkeysRequestEntityTooLarge {
	return &GetRecordingRecordingkeysRequestEntityTooLarge{}
}

/*GetRecordingRecordingkeysRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetRecordingRecordingkeysRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingRecordingkeysRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/recordingkeys][%d] getRecordingRecordingkeysRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRecordingRecordingkeysRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingRecordingkeysRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingRecordingkeysUnsupportedMediaType creates a GetRecordingRecordingkeysUnsupportedMediaType with default headers values
func NewGetRecordingRecordingkeysUnsupportedMediaType() *GetRecordingRecordingkeysUnsupportedMediaType {
	return &GetRecordingRecordingkeysUnsupportedMediaType{}
}

/*GetRecordingRecordingkeysUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRecordingRecordingkeysUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingRecordingkeysUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/recordingkeys][%d] getRecordingRecordingkeysUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRecordingRecordingkeysUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingRecordingkeysUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingRecordingkeysTooManyRequests creates a GetRecordingRecordingkeysTooManyRequests with default headers values
func NewGetRecordingRecordingkeysTooManyRequests() *GetRecordingRecordingkeysTooManyRequests {
	return &GetRecordingRecordingkeysTooManyRequests{}
}

/*GetRecordingRecordingkeysTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRecordingRecordingkeysTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingRecordingkeysTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/recordingkeys][%d] getRecordingRecordingkeysTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRecordingRecordingkeysTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingRecordingkeysTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingRecordingkeysInternalServerError creates a GetRecordingRecordingkeysInternalServerError with default headers values
func NewGetRecordingRecordingkeysInternalServerError() *GetRecordingRecordingkeysInternalServerError {
	return &GetRecordingRecordingkeysInternalServerError{}
}

/*GetRecordingRecordingkeysInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRecordingRecordingkeysInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingRecordingkeysInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/recordingkeys][%d] getRecordingRecordingkeysInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRecordingRecordingkeysInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingRecordingkeysInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingRecordingkeysServiceUnavailable creates a GetRecordingRecordingkeysServiceUnavailable with default headers values
func NewGetRecordingRecordingkeysServiceUnavailable() *GetRecordingRecordingkeysServiceUnavailable {
	return &GetRecordingRecordingkeysServiceUnavailable{}
}

/*GetRecordingRecordingkeysServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRecordingRecordingkeysServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingRecordingkeysServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/recordingkeys][%d] getRecordingRecordingkeysServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRecordingRecordingkeysServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingRecordingkeysServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingRecordingkeysGatewayTimeout creates a GetRecordingRecordingkeysGatewayTimeout with default headers values
func NewGetRecordingRecordingkeysGatewayTimeout() *GetRecordingRecordingkeysGatewayTimeout {
	return &GetRecordingRecordingkeysGatewayTimeout{}
}

/*GetRecordingRecordingkeysGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetRecordingRecordingkeysGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingRecordingkeysGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/recordingkeys][%d] getRecordingRecordingkeysGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRecordingRecordingkeysGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingRecordingkeysGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

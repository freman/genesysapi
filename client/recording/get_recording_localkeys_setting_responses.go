// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRecordingLocalkeysSettingReader is a Reader for the GetRecordingLocalkeysSetting structure.
type GetRecordingLocalkeysSettingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRecordingLocalkeysSettingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRecordingLocalkeysSettingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRecordingLocalkeysSettingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRecordingLocalkeysSettingUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRecordingLocalkeysSettingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRecordingLocalkeysSettingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRecordingLocalkeysSettingRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRecordingLocalkeysSettingRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRecordingLocalkeysSettingUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRecordingLocalkeysSettingTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRecordingLocalkeysSettingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRecordingLocalkeysSettingServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRecordingLocalkeysSettingGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRecordingLocalkeysSettingOK creates a GetRecordingLocalkeysSettingOK with default headers values
func NewGetRecordingLocalkeysSettingOK() *GetRecordingLocalkeysSettingOK {
	return &GetRecordingLocalkeysSettingOK{}
}

/*
GetRecordingLocalkeysSettingOK describes a response with status code 200, with default header values.

successful operation
*/
type GetRecordingLocalkeysSettingOK struct {
	Payload *models.LocalEncryptionConfiguration
}

// IsSuccess returns true when this get recording localkeys setting o k response has a 2xx status code
func (o *GetRecordingLocalkeysSettingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get recording localkeys setting o k response has a 3xx status code
func (o *GetRecordingLocalkeysSettingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording localkeys setting o k response has a 4xx status code
func (o *GetRecordingLocalkeysSettingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording localkeys setting o k response has a 5xx status code
func (o *GetRecordingLocalkeysSettingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording localkeys setting o k response a status code equal to that given
func (o *GetRecordingLocalkeysSettingOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRecordingLocalkeysSettingOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingOK  %+v", 200, o.Payload)
}

func (o *GetRecordingLocalkeysSettingOK) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingOK  %+v", 200, o.Payload)
}

func (o *GetRecordingLocalkeysSettingOK) GetPayload() *models.LocalEncryptionConfiguration {
	return o.Payload
}

func (o *GetRecordingLocalkeysSettingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LocalEncryptionConfiguration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingLocalkeysSettingBadRequest creates a GetRecordingLocalkeysSettingBadRequest with default headers values
func NewGetRecordingLocalkeysSettingBadRequest() *GetRecordingLocalkeysSettingBadRequest {
	return &GetRecordingLocalkeysSettingBadRequest{}
}

/*
GetRecordingLocalkeysSettingBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRecordingLocalkeysSettingBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording localkeys setting bad request response has a 2xx status code
func (o *GetRecordingLocalkeysSettingBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording localkeys setting bad request response has a 3xx status code
func (o *GetRecordingLocalkeysSettingBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording localkeys setting bad request response has a 4xx status code
func (o *GetRecordingLocalkeysSettingBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording localkeys setting bad request response has a 5xx status code
func (o *GetRecordingLocalkeysSettingBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording localkeys setting bad request response a status code equal to that given
func (o *GetRecordingLocalkeysSettingBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetRecordingLocalkeysSettingBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingBadRequest  %+v", 400, o.Payload)
}

func (o *GetRecordingLocalkeysSettingBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingBadRequest  %+v", 400, o.Payload)
}

func (o *GetRecordingLocalkeysSettingBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingLocalkeysSettingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingLocalkeysSettingUnauthorized creates a GetRecordingLocalkeysSettingUnauthorized with default headers values
func NewGetRecordingLocalkeysSettingUnauthorized() *GetRecordingLocalkeysSettingUnauthorized {
	return &GetRecordingLocalkeysSettingUnauthorized{}
}

/*
GetRecordingLocalkeysSettingUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRecordingLocalkeysSettingUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording localkeys setting unauthorized response has a 2xx status code
func (o *GetRecordingLocalkeysSettingUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording localkeys setting unauthorized response has a 3xx status code
func (o *GetRecordingLocalkeysSettingUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording localkeys setting unauthorized response has a 4xx status code
func (o *GetRecordingLocalkeysSettingUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording localkeys setting unauthorized response has a 5xx status code
func (o *GetRecordingLocalkeysSettingUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording localkeys setting unauthorized response a status code equal to that given
func (o *GetRecordingLocalkeysSettingUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetRecordingLocalkeysSettingUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRecordingLocalkeysSettingUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRecordingLocalkeysSettingUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingLocalkeysSettingUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingLocalkeysSettingForbidden creates a GetRecordingLocalkeysSettingForbidden with default headers values
func NewGetRecordingLocalkeysSettingForbidden() *GetRecordingLocalkeysSettingForbidden {
	return &GetRecordingLocalkeysSettingForbidden{}
}

/*
GetRecordingLocalkeysSettingForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetRecordingLocalkeysSettingForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording localkeys setting forbidden response has a 2xx status code
func (o *GetRecordingLocalkeysSettingForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording localkeys setting forbidden response has a 3xx status code
func (o *GetRecordingLocalkeysSettingForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording localkeys setting forbidden response has a 4xx status code
func (o *GetRecordingLocalkeysSettingForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording localkeys setting forbidden response has a 5xx status code
func (o *GetRecordingLocalkeysSettingForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording localkeys setting forbidden response a status code equal to that given
func (o *GetRecordingLocalkeysSettingForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetRecordingLocalkeysSettingForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingForbidden  %+v", 403, o.Payload)
}

func (o *GetRecordingLocalkeysSettingForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingForbidden  %+v", 403, o.Payload)
}

func (o *GetRecordingLocalkeysSettingForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingLocalkeysSettingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingLocalkeysSettingNotFound creates a GetRecordingLocalkeysSettingNotFound with default headers values
func NewGetRecordingLocalkeysSettingNotFound() *GetRecordingLocalkeysSettingNotFound {
	return &GetRecordingLocalkeysSettingNotFound{}
}

/*
GetRecordingLocalkeysSettingNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetRecordingLocalkeysSettingNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording localkeys setting not found response has a 2xx status code
func (o *GetRecordingLocalkeysSettingNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording localkeys setting not found response has a 3xx status code
func (o *GetRecordingLocalkeysSettingNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording localkeys setting not found response has a 4xx status code
func (o *GetRecordingLocalkeysSettingNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording localkeys setting not found response has a 5xx status code
func (o *GetRecordingLocalkeysSettingNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording localkeys setting not found response a status code equal to that given
func (o *GetRecordingLocalkeysSettingNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRecordingLocalkeysSettingNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingNotFound  %+v", 404, o.Payload)
}

func (o *GetRecordingLocalkeysSettingNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingNotFound  %+v", 404, o.Payload)
}

func (o *GetRecordingLocalkeysSettingNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingLocalkeysSettingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingLocalkeysSettingRequestTimeout creates a GetRecordingLocalkeysSettingRequestTimeout with default headers values
func NewGetRecordingLocalkeysSettingRequestTimeout() *GetRecordingLocalkeysSettingRequestTimeout {
	return &GetRecordingLocalkeysSettingRequestTimeout{}
}

/*
GetRecordingLocalkeysSettingRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRecordingLocalkeysSettingRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording localkeys setting request timeout response has a 2xx status code
func (o *GetRecordingLocalkeysSettingRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording localkeys setting request timeout response has a 3xx status code
func (o *GetRecordingLocalkeysSettingRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording localkeys setting request timeout response has a 4xx status code
func (o *GetRecordingLocalkeysSettingRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording localkeys setting request timeout response has a 5xx status code
func (o *GetRecordingLocalkeysSettingRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording localkeys setting request timeout response a status code equal to that given
func (o *GetRecordingLocalkeysSettingRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetRecordingLocalkeysSettingRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRecordingLocalkeysSettingRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRecordingLocalkeysSettingRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingLocalkeysSettingRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingLocalkeysSettingRequestEntityTooLarge creates a GetRecordingLocalkeysSettingRequestEntityTooLarge with default headers values
func NewGetRecordingLocalkeysSettingRequestEntityTooLarge() *GetRecordingLocalkeysSettingRequestEntityTooLarge {
	return &GetRecordingLocalkeysSettingRequestEntityTooLarge{}
}

/*
GetRecordingLocalkeysSettingRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetRecordingLocalkeysSettingRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording localkeys setting request entity too large response has a 2xx status code
func (o *GetRecordingLocalkeysSettingRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording localkeys setting request entity too large response has a 3xx status code
func (o *GetRecordingLocalkeysSettingRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording localkeys setting request entity too large response has a 4xx status code
func (o *GetRecordingLocalkeysSettingRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording localkeys setting request entity too large response has a 5xx status code
func (o *GetRecordingLocalkeysSettingRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording localkeys setting request entity too large response a status code equal to that given
func (o *GetRecordingLocalkeysSettingRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetRecordingLocalkeysSettingRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRecordingLocalkeysSettingRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRecordingLocalkeysSettingRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingLocalkeysSettingRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingLocalkeysSettingUnsupportedMediaType creates a GetRecordingLocalkeysSettingUnsupportedMediaType with default headers values
func NewGetRecordingLocalkeysSettingUnsupportedMediaType() *GetRecordingLocalkeysSettingUnsupportedMediaType {
	return &GetRecordingLocalkeysSettingUnsupportedMediaType{}
}

/*
GetRecordingLocalkeysSettingUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRecordingLocalkeysSettingUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording localkeys setting unsupported media type response has a 2xx status code
func (o *GetRecordingLocalkeysSettingUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording localkeys setting unsupported media type response has a 3xx status code
func (o *GetRecordingLocalkeysSettingUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording localkeys setting unsupported media type response has a 4xx status code
func (o *GetRecordingLocalkeysSettingUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording localkeys setting unsupported media type response has a 5xx status code
func (o *GetRecordingLocalkeysSettingUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording localkeys setting unsupported media type response a status code equal to that given
func (o *GetRecordingLocalkeysSettingUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetRecordingLocalkeysSettingUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRecordingLocalkeysSettingUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRecordingLocalkeysSettingUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingLocalkeysSettingUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingLocalkeysSettingTooManyRequests creates a GetRecordingLocalkeysSettingTooManyRequests with default headers values
func NewGetRecordingLocalkeysSettingTooManyRequests() *GetRecordingLocalkeysSettingTooManyRequests {
	return &GetRecordingLocalkeysSettingTooManyRequests{}
}

/*
GetRecordingLocalkeysSettingTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRecordingLocalkeysSettingTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording localkeys setting too many requests response has a 2xx status code
func (o *GetRecordingLocalkeysSettingTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording localkeys setting too many requests response has a 3xx status code
func (o *GetRecordingLocalkeysSettingTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording localkeys setting too many requests response has a 4xx status code
func (o *GetRecordingLocalkeysSettingTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording localkeys setting too many requests response has a 5xx status code
func (o *GetRecordingLocalkeysSettingTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording localkeys setting too many requests response a status code equal to that given
func (o *GetRecordingLocalkeysSettingTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetRecordingLocalkeysSettingTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRecordingLocalkeysSettingTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRecordingLocalkeysSettingTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingLocalkeysSettingTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingLocalkeysSettingInternalServerError creates a GetRecordingLocalkeysSettingInternalServerError with default headers values
func NewGetRecordingLocalkeysSettingInternalServerError() *GetRecordingLocalkeysSettingInternalServerError {
	return &GetRecordingLocalkeysSettingInternalServerError{}
}

/*
GetRecordingLocalkeysSettingInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRecordingLocalkeysSettingInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording localkeys setting internal server error response has a 2xx status code
func (o *GetRecordingLocalkeysSettingInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording localkeys setting internal server error response has a 3xx status code
func (o *GetRecordingLocalkeysSettingInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording localkeys setting internal server error response has a 4xx status code
func (o *GetRecordingLocalkeysSettingInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording localkeys setting internal server error response has a 5xx status code
func (o *GetRecordingLocalkeysSettingInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get recording localkeys setting internal server error response a status code equal to that given
func (o *GetRecordingLocalkeysSettingInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRecordingLocalkeysSettingInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRecordingLocalkeysSettingInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRecordingLocalkeysSettingInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingLocalkeysSettingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingLocalkeysSettingServiceUnavailable creates a GetRecordingLocalkeysSettingServiceUnavailable with default headers values
func NewGetRecordingLocalkeysSettingServiceUnavailable() *GetRecordingLocalkeysSettingServiceUnavailable {
	return &GetRecordingLocalkeysSettingServiceUnavailable{}
}

/*
GetRecordingLocalkeysSettingServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRecordingLocalkeysSettingServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording localkeys setting service unavailable response has a 2xx status code
func (o *GetRecordingLocalkeysSettingServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording localkeys setting service unavailable response has a 3xx status code
func (o *GetRecordingLocalkeysSettingServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording localkeys setting service unavailable response has a 4xx status code
func (o *GetRecordingLocalkeysSettingServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording localkeys setting service unavailable response has a 5xx status code
func (o *GetRecordingLocalkeysSettingServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get recording localkeys setting service unavailable response a status code equal to that given
func (o *GetRecordingLocalkeysSettingServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetRecordingLocalkeysSettingServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRecordingLocalkeysSettingServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRecordingLocalkeysSettingServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingLocalkeysSettingServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingLocalkeysSettingGatewayTimeout creates a GetRecordingLocalkeysSettingGatewayTimeout with default headers values
func NewGetRecordingLocalkeysSettingGatewayTimeout() *GetRecordingLocalkeysSettingGatewayTimeout {
	return &GetRecordingLocalkeysSettingGatewayTimeout{}
}

/*
GetRecordingLocalkeysSettingGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetRecordingLocalkeysSettingGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording localkeys setting gateway timeout response has a 2xx status code
func (o *GetRecordingLocalkeysSettingGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording localkeys setting gateway timeout response has a 3xx status code
func (o *GetRecordingLocalkeysSettingGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording localkeys setting gateway timeout response has a 4xx status code
func (o *GetRecordingLocalkeysSettingGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording localkeys setting gateway timeout response has a 5xx status code
func (o *GetRecordingLocalkeysSettingGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get recording localkeys setting gateway timeout response a status code equal to that given
func (o *GetRecordingLocalkeysSettingGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetRecordingLocalkeysSettingGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRecordingLocalkeysSettingGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/localkeys/settings/{settingsId}][%d] getRecordingLocalkeysSettingGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRecordingLocalkeysSettingGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingLocalkeysSettingGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

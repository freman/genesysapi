// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRecordingUploadsReportReader is a Reader for the GetRecordingUploadsReport structure.
type GetRecordingUploadsReportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRecordingUploadsReportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRecordingUploadsReportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRecordingUploadsReportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRecordingUploadsReportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRecordingUploadsReportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRecordingUploadsReportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRecordingUploadsReportRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRecordingUploadsReportRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRecordingUploadsReportUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRecordingUploadsReportTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRecordingUploadsReportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRecordingUploadsReportServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRecordingUploadsReportGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRecordingUploadsReportOK creates a GetRecordingUploadsReportOK with default headers values
func NewGetRecordingUploadsReportOK() *GetRecordingUploadsReportOK {
	return &GetRecordingUploadsReportOK{}
}

/*
GetRecordingUploadsReportOK describes a response with status code 200, with default header values.

successful operation
*/
type GetRecordingUploadsReportOK struct {
	Payload *models.RecordingUploadReport
}

// IsSuccess returns true when this get recording uploads report o k response has a 2xx status code
func (o *GetRecordingUploadsReportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get recording uploads report o k response has a 3xx status code
func (o *GetRecordingUploadsReportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording uploads report o k response has a 4xx status code
func (o *GetRecordingUploadsReportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording uploads report o k response has a 5xx status code
func (o *GetRecordingUploadsReportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording uploads report o k response a status code equal to that given
func (o *GetRecordingUploadsReportOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRecordingUploadsReportOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportOK  %+v", 200, o.Payload)
}

func (o *GetRecordingUploadsReportOK) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportOK  %+v", 200, o.Payload)
}

func (o *GetRecordingUploadsReportOK) GetPayload() *models.RecordingUploadReport {
	return o.Payload
}

func (o *GetRecordingUploadsReportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RecordingUploadReport)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingUploadsReportBadRequest creates a GetRecordingUploadsReportBadRequest with default headers values
func NewGetRecordingUploadsReportBadRequest() *GetRecordingUploadsReportBadRequest {
	return &GetRecordingUploadsReportBadRequest{}
}

/*
GetRecordingUploadsReportBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRecordingUploadsReportBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording uploads report bad request response has a 2xx status code
func (o *GetRecordingUploadsReportBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording uploads report bad request response has a 3xx status code
func (o *GetRecordingUploadsReportBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording uploads report bad request response has a 4xx status code
func (o *GetRecordingUploadsReportBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording uploads report bad request response has a 5xx status code
func (o *GetRecordingUploadsReportBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording uploads report bad request response a status code equal to that given
func (o *GetRecordingUploadsReportBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetRecordingUploadsReportBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportBadRequest  %+v", 400, o.Payload)
}

func (o *GetRecordingUploadsReportBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportBadRequest  %+v", 400, o.Payload)
}

func (o *GetRecordingUploadsReportBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingUploadsReportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingUploadsReportUnauthorized creates a GetRecordingUploadsReportUnauthorized with default headers values
func NewGetRecordingUploadsReportUnauthorized() *GetRecordingUploadsReportUnauthorized {
	return &GetRecordingUploadsReportUnauthorized{}
}

/*
GetRecordingUploadsReportUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRecordingUploadsReportUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording uploads report unauthorized response has a 2xx status code
func (o *GetRecordingUploadsReportUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording uploads report unauthorized response has a 3xx status code
func (o *GetRecordingUploadsReportUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording uploads report unauthorized response has a 4xx status code
func (o *GetRecordingUploadsReportUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording uploads report unauthorized response has a 5xx status code
func (o *GetRecordingUploadsReportUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording uploads report unauthorized response a status code equal to that given
func (o *GetRecordingUploadsReportUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetRecordingUploadsReportUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRecordingUploadsReportUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRecordingUploadsReportUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingUploadsReportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingUploadsReportForbidden creates a GetRecordingUploadsReportForbidden with default headers values
func NewGetRecordingUploadsReportForbidden() *GetRecordingUploadsReportForbidden {
	return &GetRecordingUploadsReportForbidden{}
}

/*
GetRecordingUploadsReportForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetRecordingUploadsReportForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording uploads report forbidden response has a 2xx status code
func (o *GetRecordingUploadsReportForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording uploads report forbidden response has a 3xx status code
func (o *GetRecordingUploadsReportForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording uploads report forbidden response has a 4xx status code
func (o *GetRecordingUploadsReportForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording uploads report forbidden response has a 5xx status code
func (o *GetRecordingUploadsReportForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording uploads report forbidden response a status code equal to that given
func (o *GetRecordingUploadsReportForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetRecordingUploadsReportForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportForbidden  %+v", 403, o.Payload)
}

func (o *GetRecordingUploadsReportForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportForbidden  %+v", 403, o.Payload)
}

func (o *GetRecordingUploadsReportForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingUploadsReportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingUploadsReportNotFound creates a GetRecordingUploadsReportNotFound with default headers values
func NewGetRecordingUploadsReportNotFound() *GetRecordingUploadsReportNotFound {
	return &GetRecordingUploadsReportNotFound{}
}

/*
GetRecordingUploadsReportNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetRecordingUploadsReportNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording uploads report not found response has a 2xx status code
func (o *GetRecordingUploadsReportNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording uploads report not found response has a 3xx status code
func (o *GetRecordingUploadsReportNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording uploads report not found response has a 4xx status code
func (o *GetRecordingUploadsReportNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording uploads report not found response has a 5xx status code
func (o *GetRecordingUploadsReportNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording uploads report not found response a status code equal to that given
func (o *GetRecordingUploadsReportNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRecordingUploadsReportNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportNotFound  %+v", 404, o.Payload)
}

func (o *GetRecordingUploadsReportNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportNotFound  %+v", 404, o.Payload)
}

func (o *GetRecordingUploadsReportNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingUploadsReportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingUploadsReportRequestTimeout creates a GetRecordingUploadsReportRequestTimeout with default headers values
func NewGetRecordingUploadsReportRequestTimeout() *GetRecordingUploadsReportRequestTimeout {
	return &GetRecordingUploadsReportRequestTimeout{}
}

/*
GetRecordingUploadsReportRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRecordingUploadsReportRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording uploads report request timeout response has a 2xx status code
func (o *GetRecordingUploadsReportRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording uploads report request timeout response has a 3xx status code
func (o *GetRecordingUploadsReportRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording uploads report request timeout response has a 4xx status code
func (o *GetRecordingUploadsReportRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording uploads report request timeout response has a 5xx status code
func (o *GetRecordingUploadsReportRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording uploads report request timeout response a status code equal to that given
func (o *GetRecordingUploadsReportRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetRecordingUploadsReportRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRecordingUploadsReportRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRecordingUploadsReportRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingUploadsReportRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingUploadsReportRequestEntityTooLarge creates a GetRecordingUploadsReportRequestEntityTooLarge with default headers values
func NewGetRecordingUploadsReportRequestEntityTooLarge() *GetRecordingUploadsReportRequestEntityTooLarge {
	return &GetRecordingUploadsReportRequestEntityTooLarge{}
}

/*
GetRecordingUploadsReportRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetRecordingUploadsReportRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording uploads report request entity too large response has a 2xx status code
func (o *GetRecordingUploadsReportRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording uploads report request entity too large response has a 3xx status code
func (o *GetRecordingUploadsReportRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording uploads report request entity too large response has a 4xx status code
func (o *GetRecordingUploadsReportRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording uploads report request entity too large response has a 5xx status code
func (o *GetRecordingUploadsReportRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording uploads report request entity too large response a status code equal to that given
func (o *GetRecordingUploadsReportRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetRecordingUploadsReportRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRecordingUploadsReportRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRecordingUploadsReportRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingUploadsReportRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingUploadsReportUnsupportedMediaType creates a GetRecordingUploadsReportUnsupportedMediaType with default headers values
func NewGetRecordingUploadsReportUnsupportedMediaType() *GetRecordingUploadsReportUnsupportedMediaType {
	return &GetRecordingUploadsReportUnsupportedMediaType{}
}

/*
GetRecordingUploadsReportUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRecordingUploadsReportUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording uploads report unsupported media type response has a 2xx status code
func (o *GetRecordingUploadsReportUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording uploads report unsupported media type response has a 3xx status code
func (o *GetRecordingUploadsReportUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording uploads report unsupported media type response has a 4xx status code
func (o *GetRecordingUploadsReportUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording uploads report unsupported media type response has a 5xx status code
func (o *GetRecordingUploadsReportUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording uploads report unsupported media type response a status code equal to that given
func (o *GetRecordingUploadsReportUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetRecordingUploadsReportUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRecordingUploadsReportUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRecordingUploadsReportUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingUploadsReportUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingUploadsReportTooManyRequests creates a GetRecordingUploadsReportTooManyRequests with default headers values
func NewGetRecordingUploadsReportTooManyRequests() *GetRecordingUploadsReportTooManyRequests {
	return &GetRecordingUploadsReportTooManyRequests{}
}

/*
GetRecordingUploadsReportTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRecordingUploadsReportTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording uploads report too many requests response has a 2xx status code
func (o *GetRecordingUploadsReportTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording uploads report too many requests response has a 3xx status code
func (o *GetRecordingUploadsReportTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording uploads report too many requests response has a 4xx status code
func (o *GetRecordingUploadsReportTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording uploads report too many requests response has a 5xx status code
func (o *GetRecordingUploadsReportTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording uploads report too many requests response a status code equal to that given
func (o *GetRecordingUploadsReportTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetRecordingUploadsReportTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRecordingUploadsReportTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRecordingUploadsReportTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingUploadsReportTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingUploadsReportInternalServerError creates a GetRecordingUploadsReportInternalServerError with default headers values
func NewGetRecordingUploadsReportInternalServerError() *GetRecordingUploadsReportInternalServerError {
	return &GetRecordingUploadsReportInternalServerError{}
}

/*
GetRecordingUploadsReportInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRecordingUploadsReportInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording uploads report internal server error response has a 2xx status code
func (o *GetRecordingUploadsReportInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording uploads report internal server error response has a 3xx status code
func (o *GetRecordingUploadsReportInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording uploads report internal server error response has a 4xx status code
func (o *GetRecordingUploadsReportInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording uploads report internal server error response has a 5xx status code
func (o *GetRecordingUploadsReportInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get recording uploads report internal server error response a status code equal to that given
func (o *GetRecordingUploadsReportInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRecordingUploadsReportInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRecordingUploadsReportInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRecordingUploadsReportInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingUploadsReportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingUploadsReportServiceUnavailable creates a GetRecordingUploadsReportServiceUnavailable with default headers values
func NewGetRecordingUploadsReportServiceUnavailable() *GetRecordingUploadsReportServiceUnavailable {
	return &GetRecordingUploadsReportServiceUnavailable{}
}

/*
GetRecordingUploadsReportServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRecordingUploadsReportServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording uploads report service unavailable response has a 2xx status code
func (o *GetRecordingUploadsReportServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording uploads report service unavailable response has a 3xx status code
func (o *GetRecordingUploadsReportServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording uploads report service unavailable response has a 4xx status code
func (o *GetRecordingUploadsReportServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording uploads report service unavailable response has a 5xx status code
func (o *GetRecordingUploadsReportServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get recording uploads report service unavailable response a status code equal to that given
func (o *GetRecordingUploadsReportServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetRecordingUploadsReportServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRecordingUploadsReportServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRecordingUploadsReportServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingUploadsReportServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingUploadsReportGatewayTimeout creates a GetRecordingUploadsReportGatewayTimeout with default headers values
func NewGetRecordingUploadsReportGatewayTimeout() *GetRecordingUploadsReportGatewayTimeout {
	return &GetRecordingUploadsReportGatewayTimeout{}
}

/*
GetRecordingUploadsReportGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetRecordingUploadsReportGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording uploads report gateway timeout response has a 2xx status code
func (o *GetRecordingUploadsReportGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording uploads report gateway timeout response has a 3xx status code
func (o *GetRecordingUploadsReportGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording uploads report gateway timeout response has a 4xx status code
func (o *GetRecordingUploadsReportGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording uploads report gateway timeout response has a 5xx status code
func (o *GetRecordingUploadsReportGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get recording uploads report gateway timeout response a status code equal to that given
func (o *GetRecordingUploadsReportGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetRecordingUploadsReportGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRecordingUploadsReportGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/uploads/reports/{reportId}][%d] getRecordingUploadsReportGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRecordingUploadsReportGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingUploadsReportGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

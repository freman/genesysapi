// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostRecordingLocalkeysReader is a Reader for the PostRecordingLocalkeys structure.
type PostRecordingLocalkeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRecordingLocalkeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostRecordingLocalkeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRecordingLocalkeysBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostRecordingLocalkeysUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostRecordingLocalkeysForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRecordingLocalkeysNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostRecordingLocalkeysRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostRecordingLocalkeysRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostRecordingLocalkeysUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostRecordingLocalkeysTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostRecordingLocalkeysInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostRecordingLocalkeysServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostRecordingLocalkeysGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRecordingLocalkeysOK creates a PostRecordingLocalkeysOK with default headers values
func NewPostRecordingLocalkeysOK() *PostRecordingLocalkeysOK {
	return &PostRecordingLocalkeysOK{}
}

/*PostRecordingLocalkeysOK handles this case with default header values.

successful operation
*/
type PostRecordingLocalkeysOK struct {
	Payload *models.EncryptionKey
}

func (o *PostRecordingLocalkeysOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys][%d] postRecordingLocalkeysOK  %+v", 200, o.Payload)
}

func (o *PostRecordingLocalkeysOK) GetPayload() *models.EncryptionKey {
	return o.Payload
}

func (o *PostRecordingLocalkeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EncryptionKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysBadRequest creates a PostRecordingLocalkeysBadRequest with default headers values
func NewPostRecordingLocalkeysBadRequest() *PostRecordingLocalkeysBadRequest {
	return &PostRecordingLocalkeysBadRequest{}
}

/*PostRecordingLocalkeysBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostRecordingLocalkeysBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys][%d] postRecordingLocalkeysBadRequest  %+v", 400, o.Payload)
}

func (o *PostRecordingLocalkeysBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysUnauthorized creates a PostRecordingLocalkeysUnauthorized with default headers values
func NewPostRecordingLocalkeysUnauthorized() *PostRecordingLocalkeysUnauthorized {
	return &PostRecordingLocalkeysUnauthorized{}
}

/*PostRecordingLocalkeysUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostRecordingLocalkeysUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys][%d] postRecordingLocalkeysUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRecordingLocalkeysUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysForbidden creates a PostRecordingLocalkeysForbidden with default headers values
func NewPostRecordingLocalkeysForbidden() *PostRecordingLocalkeysForbidden {
	return &PostRecordingLocalkeysForbidden{}
}

/*PostRecordingLocalkeysForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostRecordingLocalkeysForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys][%d] postRecordingLocalkeysForbidden  %+v", 403, o.Payload)
}

func (o *PostRecordingLocalkeysForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysNotFound creates a PostRecordingLocalkeysNotFound with default headers values
func NewPostRecordingLocalkeysNotFound() *PostRecordingLocalkeysNotFound {
	return &PostRecordingLocalkeysNotFound{}
}

/*PostRecordingLocalkeysNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostRecordingLocalkeysNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys][%d] postRecordingLocalkeysNotFound  %+v", 404, o.Payload)
}

func (o *PostRecordingLocalkeysNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysRequestTimeout creates a PostRecordingLocalkeysRequestTimeout with default headers values
func NewPostRecordingLocalkeysRequestTimeout() *PostRecordingLocalkeysRequestTimeout {
	return &PostRecordingLocalkeysRequestTimeout{}
}

/*PostRecordingLocalkeysRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostRecordingLocalkeysRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys][%d] postRecordingLocalkeysRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostRecordingLocalkeysRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysRequestEntityTooLarge creates a PostRecordingLocalkeysRequestEntityTooLarge with default headers values
func NewPostRecordingLocalkeysRequestEntityTooLarge() *PostRecordingLocalkeysRequestEntityTooLarge {
	return &PostRecordingLocalkeysRequestEntityTooLarge{}
}

/*PostRecordingLocalkeysRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostRecordingLocalkeysRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys][%d] postRecordingLocalkeysRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostRecordingLocalkeysRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysUnsupportedMediaType creates a PostRecordingLocalkeysUnsupportedMediaType with default headers values
func NewPostRecordingLocalkeysUnsupportedMediaType() *PostRecordingLocalkeysUnsupportedMediaType {
	return &PostRecordingLocalkeysUnsupportedMediaType{}
}

/*PostRecordingLocalkeysUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostRecordingLocalkeysUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys][%d] postRecordingLocalkeysUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostRecordingLocalkeysUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysTooManyRequests creates a PostRecordingLocalkeysTooManyRequests with default headers values
func NewPostRecordingLocalkeysTooManyRequests() *PostRecordingLocalkeysTooManyRequests {
	return &PostRecordingLocalkeysTooManyRequests{}
}

/*PostRecordingLocalkeysTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostRecordingLocalkeysTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys][%d] postRecordingLocalkeysTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostRecordingLocalkeysTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysInternalServerError creates a PostRecordingLocalkeysInternalServerError with default headers values
func NewPostRecordingLocalkeysInternalServerError() *PostRecordingLocalkeysInternalServerError {
	return &PostRecordingLocalkeysInternalServerError{}
}

/*PostRecordingLocalkeysInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostRecordingLocalkeysInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys][%d] postRecordingLocalkeysInternalServerError  %+v", 500, o.Payload)
}

func (o *PostRecordingLocalkeysInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysServiceUnavailable creates a PostRecordingLocalkeysServiceUnavailable with default headers values
func NewPostRecordingLocalkeysServiceUnavailable() *PostRecordingLocalkeysServiceUnavailable {
	return &PostRecordingLocalkeysServiceUnavailable{}
}

/*PostRecordingLocalkeysServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostRecordingLocalkeysServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys][%d] postRecordingLocalkeysServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostRecordingLocalkeysServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysGatewayTimeout creates a PostRecordingLocalkeysGatewayTimeout with default headers values
func NewPostRecordingLocalkeysGatewayTimeout() *PostRecordingLocalkeysGatewayTimeout {
	return &PostRecordingLocalkeysGatewayTimeout{}
}

/*PostRecordingLocalkeysGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostRecordingLocalkeysGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys][%d] postRecordingLocalkeysGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostRecordingLocalkeysGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

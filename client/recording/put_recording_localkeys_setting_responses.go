// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutRecordingLocalkeysSettingReader is a Reader for the PutRecordingLocalkeysSetting structure.
type PutRecordingLocalkeysSettingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRecordingLocalkeysSettingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRecordingLocalkeysSettingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRecordingLocalkeysSettingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRecordingLocalkeysSettingUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRecordingLocalkeysSettingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRecordingLocalkeysSettingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutRecordingLocalkeysSettingRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutRecordingLocalkeysSettingRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutRecordingLocalkeysSettingUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutRecordingLocalkeysSettingTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutRecordingLocalkeysSettingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutRecordingLocalkeysSettingServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutRecordingLocalkeysSettingGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRecordingLocalkeysSettingOK creates a PutRecordingLocalkeysSettingOK with default headers values
func NewPutRecordingLocalkeysSettingOK() *PutRecordingLocalkeysSettingOK {
	return &PutRecordingLocalkeysSettingOK{}
}

/*PutRecordingLocalkeysSettingOK handles this case with default header values.

successful operation
*/
type PutRecordingLocalkeysSettingOK struct {
	Payload *models.LocalEncryptionConfiguration
}

func (o *PutRecordingLocalkeysSettingOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/localkeys/settings/{settingsId}][%d] putRecordingLocalkeysSettingOK  %+v", 200, o.Payload)
}

func (o *PutRecordingLocalkeysSettingOK) GetPayload() *models.LocalEncryptionConfiguration {
	return o.Payload
}

func (o *PutRecordingLocalkeysSettingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LocalEncryptionConfiguration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingLocalkeysSettingBadRequest creates a PutRecordingLocalkeysSettingBadRequest with default headers values
func NewPutRecordingLocalkeysSettingBadRequest() *PutRecordingLocalkeysSettingBadRequest {
	return &PutRecordingLocalkeysSettingBadRequest{}
}

/*PutRecordingLocalkeysSettingBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutRecordingLocalkeysSettingBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingLocalkeysSettingBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/localkeys/settings/{settingsId}][%d] putRecordingLocalkeysSettingBadRequest  %+v", 400, o.Payload)
}

func (o *PutRecordingLocalkeysSettingBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingLocalkeysSettingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingLocalkeysSettingUnauthorized creates a PutRecordingLocalkeysSettingUnauthorized with default headers values
func NewPutRecordingLocalkeysSettingUnauthorized() *PutRecordingLocalkeysSettingUnauthorized {
	return &PutRecordingLocalkeysSettingUnauthorized{}
}

/*PutRecordingLocalkeysSettingUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutRecordingLocalkeysSettingUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingLocalkeysSettingUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/localkeys/settings/{settingsId}][%d] putRecordingLocalkeysSettingUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRecordingLocalkeysSettingUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingLocalkeysSettingUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingLocalkeysSettingForbidden creates a PutRecordingLocalkeysSettingForbidden with default headers values
func NewPutRecordingLocalkeysSettingForbidden() *PutRecordingLocalkeysSettingForbidden {
	return &PutRecordingLocalkeysSettingForbidden{}
}

/*PutRecordingLocalkeysSettingForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutRecordingLocalkeysSettingForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingLocalkeysSettingForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/localkeys/settings/{settingsId}][%d] putRecordingLocalkeysSettingForbidden  %+v", 403, o.Payload)
}

func (o *PutRecordingLocalkeysSettingForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingLocalkeysSettingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingLocalkeysSettingNotFound creates a PutRecordingLocalkeysSettingNotFound with default headers values
func NewPutRecordingLocalkeysSettingNotFound() *PutRecordingLocalkeysSettingNotFound {
	return &PutRecordingLocalkeysSettingNotFound{}
}

/*PutRecordingLocalkeysSettingNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutRecordingLocalkeysSettingNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingLocalkeysSettingNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/localkeys/settings/{settingsId}][%d] putRecordingLocalkeysSettingNotFound  %+v", 404, o.Payload)
}

func (o *PutRecordingLocalkeysSettingNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingLocalkeysSettingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingLocalkeysSettingRequestTimeout creates a PutRecordingLocalkeysSettingRequestTimeout with default headers values
func NewPutRecordingLocalkeysSettingRequestTimeout() *PutRecordingLocalkeysSettingRequestTimeout {
	return &PutRecordingLocalkeysSettingRequestTimeout{}
}

/*PutRecordingLocalkeysSettingRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutRecordingLocalkeysSettingRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingLocalkeysSettingRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/localkeys/settings/{settingsId}][%d] putRecordingLocalkeysSettingRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutRecordingLocalkeysSettingRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingLocalkeysSettingRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingLocalkeysSettingRequestEntityTooLarge creates a PutRecordingLocalkeysSettingRequestEntityTooLarge with default headers values
func NewPutRecordingLocalkeysSettingRequestEntityTooLarge() *PutRecordingLocalkeysSettingRequestEntityTooLarge {
	return &PutRecordingLocalkeysSettingRequestEntityTooLarge{}
}

/*PutRecordingLocalkeysSettingRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutRecordingLocalkeysSettingRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingLocalkeysSettingRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/localkeys/settings/{settingsId}][%d] putRecordingLocalkeysSettingRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutRecordingLocalkeysSettingRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingLocalkeysSettingRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingLocalkeysSettingUnsupportedMediaType creates a PutRecordingLocalkeysSettingUnsupportedMediaType with default headers values
func NewPutRecordingLocalkeysSettingUnsupportedMediaType() *PutRecordingLocalkeysSettingUnsupportedMediaType {
	return &PutRecordingLocalkeysSettingUnsupportedMediaType{}
}

/*PutRecordingLocalkeysSettingUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutRecordingLocalkeysSettingUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingLocalkeysSettingUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/localkeys/settings/{settingsId}][%d] putRecordingLocalkeysSettingUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutRecordingLocalkeysSettingUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingLocalkeysSettingUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingLocalkeysSettingTooManyRequests creates a PutRecordingLocalkeysSettingTooManyRequests with default headers values
func NewPutRecordingLocalkeysSettingTooManyRequests() *PutRecordingLocalkeysSettingTooManyRequests {
	return &PutRecordingLocalkeysSettingTooManyRequests{}
}

/*PutRecordingLocalkeysSettingTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutRecordingLocalkeysSettingTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingLocalkeysSettingTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/localkeys/settings/{settingsId}][%d] putRecordingLocalkeysSettingTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutRecordingLocalkeysSettingTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingLocalkeysSettingTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingLocalkeysSettingInternalServerError creates a PutRecordingLocalkeysSettingInternalServerError with default headers values
func NewPutRecordingLocalkeysSettingInternalServerError() *PutRecordingLocalkeysSettingInternalServerError {
	return &PutRecordingLocalkeysSettingInternalServerError{}
}

/*PutRecordingLocalkeysSettingInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutRecordingLocalkeysSettingInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingLocalkeysSettingInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/localkeys/settings/{settingsId}][%d] putRecordingLocalkeysSettingInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRecordingLocalkeysSettingInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingLocalkeysSettingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingLocalkeysSettingServiceUnavailable creates a PutRecordingLocalkeysSettingServiceUnavailable with default headers values
func NewPutRecordingLocalkeysSettingServiceUnavailable() *PutRecordingLocalkeysSettingServiceUnavailable {
	return &PutRecordingLocalkeysSettingServiceUnavailable{}
}

/*PutRecordingLocalkeysSettingServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutRecordingLocalkeysSettingServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingLocalkeysSettingServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/localkeys/settings/{settingsId}][%d] putRecordingLocalkeysSettingServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutRecordingLocalkeysSettingServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingLocalkeysSettingServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingLocalkeysSettingGatewayTimeout creates a PutRecordingLocalkeysSettingGatewayTimeout with default headers values
func NewPutRecordingLocalkeysSettingGatewayTimeout() *PutRecordingLocalkeysSettingGatewayTimeout {
	return &PutRecordingLocalkeysSettingGatewayTimeout{}
}

/*PutRecordingLocalkeysSettingGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutRecordingLocalkeysSettingGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingLocalkeysSettingGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/localkeys/settings/{settingsId}][%d] putRecordingLocalkeysSettingGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutRecordingLocalkeysSettingGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingLocalkeysSettingGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

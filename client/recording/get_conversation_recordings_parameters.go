// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetConversationRecordingsParams creates a new GetConversationRecordingsParams object
// with the default values initialized.
func NewGetConversationRecordingsParams() *GetConversationRecordingsParams {
	var (
		formatIDDefault  = string("WEBM")
		maxWaitMsDefault = int32(5000)
	)
	return &GetConversationRecordingsParams{
		FormatID:  &formatIDDefault,
		MaxWaitMs: &maxWaitMsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetConversationRecordingsParamsWithTimeout creates a new GetConversationRecordingsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetConversationRecordingsParamsWithTimeout(timeout time.Duration) *GetConversationRecordingsParams {
	var (
		formatIDDefault  = string("WEBM")
		maxWaitMsDefault = int32(5000)
	)
	return &GetConversationRecordingsParams{
		FormatID:  &formatIDDefault,
		MaxWaitMs: &maxWaitMsDefault,

		timeout: timeout,
	}
}

// NewGetConversationRecordingsParamsWithContext creates a new GetConversationRecordingsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetConversationRecordingsParamsWithContext(ctx context.Context) *GetConversationRecordingsParams {
	var (
		formatIdDefault  = string("WEBM")
		maxWaitMsDefault = int32(5000)
	)
	return &GetConversationRecordingsParams{
		FormatID:  &formatIdDefault,
		MaxWaitMs: &maxWaitMsDefault,

		Context: ctx,
	}
}

// NewGetConversationRecordingsParamsWithHTTPClient creates a new GetConversationRecordingsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetConversationRecordingsParamsWithHTTPClient(client *http.Client) *GetConversationRecordingsParams {
	var (
		formatIdDefault  = string("WEBM")
		maxWaitMsDefault = int32(5000)
	)
	return &GetConversationRecordingsParams{
		FormatID:   &formatIdDefault,
		MaxWaitMs:  &maxWaitMsDefault,
		HTTPClient: client,
	}
}

/*GetConversationRecordingsParams contains all the parameters to send to the API endpoint
for the get conversation recordings operation typically these are written to a http.Request
*/
type GetConversationRecordingsParams struct {

	/*ConversationID
	  Conversation ID

	*/
	ConversationID string
	/*FormatID
	  The desired media format. Possible values: NONE, MP3, WAV, or WEBM

	*/
	FormatID *string
	/*MaxWaitMs
	  The maximum number of milliseconds to wait for the recording to be ready. Must be a positive value.

	*/
	MaxWaitMs *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get conversation recordings params
func (o *GetConversationRecordingsParams) WithTimeout(timeout time.Duration) *GetConversationRecordingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get conversation recordings params
func (o *GetConversationRecordingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get conversation recordings params
func (o *GetConversationRecordingsParams) WithContext(ctx context.Context) *GetConversationRecordingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get conversation recordings params
func (o *GetConversationRecordingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get conversation recordings params
func (o *GetConversationRecordingsParams) WithHTTPClient(client *http.Client) *GetConversationRecordingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get conversation recordings params
func (o *GetConversationRecordingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConversationID adds the conversationID to the get conversation recordings params
func (o *GetConversationRecordingsParams) WithConversationID(conversationID string) *GetConversationRecordingsParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the get conversation recordings params
func (o *GetConversationRecordingsParams) SetConversationID(conversationID string) {
	o.ConversationID = conversationID
}

// WithFormatID adds the formatID to the get conversation recordings params
func (o *GetConversationRecordingsParams) WithFormatID(formatID *string) *GetConversationRecordingsParams {
	o.SetFormatID(formatID)
	return o
}

// SetFormatID adds the formatId to the get conversation recordings params
func (o *GetConversationRecordingsParams) SetFormatID(formatID *string) {
	o.FormatID = formatID
}

// WithMaxWaitMs adds the maxWaitMs to the get conversation recordings params
func (o *GetConversationRecordingsParams) WithMaxWaitMs(maxWaitMs *int32) *GetConversationRecordingsParams {
	o.SetMaxWaitMs(maxWaitMs)
	return o
}

// SetMaxWaitMs adds the maxWaitMs to the get conversation recordings params
func (o *GetConversationRecordingsParams) SetMaxWaitMs(maxWaitMs *int32) {
	o.MaxWaitMs = maxWaitMs
}

// WriteToRequest writes these params to a swagger request
func (o *GetConversationRecordingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param conversationId
	if err := r.SetPathParam("conversationId", o.ConversationID); err != nil {
		return err
	}

	if o.FormatID != nil {

		// query param formatId
		var qrFormatID string
		if o.FormatID != nil {
			qrFormatID = *o.FormatID
		}
		qFormatID := qrFormatID
		if qFormatID != "" {
			if err := r.SetQueryParam("formatId", qFormatID); err != nil {
				return err
			}
		}

	}

	if o.MaxWaitMs != nil {

		// query param maxWaitMs
		var qrMaxWaitMs int32
		if o.MaxWaitMs != nil {
			qrMaxWaitMs = *o.MaxWaitMs
		}
		qMaxWaitMs := swag.FormatInt32(qrMaxWaitMs)
		if qMaxWaitMs != "" {
			if err := r.SetQueryParam("maxWaitMs", qMaxWaitMs); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

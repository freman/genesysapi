// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchRecordingsScreensessionReader is a Reader for the PatchRecordingsScreensession structure.
type PatchRecordingsScreensessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchRecordingsScreensessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewPatchRecordingsScreensessionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchRecordingsScreensessionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchRecordingsScreensessionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchRecordingsScreensessionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchRecordingsScreensessionRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchRecordingsScreensessionRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchRecordingsScreensessionUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchRecordingsScreensessionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchRecordingsScreensessionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchRecordingsScreensessionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchRecordingsScreensessionGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchRecordingsScreensessionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchRecordingsScreensessionBadRequest creates a PatchRecordingsScreensessionBadRequest with default headers values
func NewPatchRecordingsScreensessionBadRequest() *PatchRecordingsScreensessionBadRequest {
	return &PatchRecordingsScreensessionBadRequest{}
}

/*
PatchRecordingsScreensessionBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchRecordingsScreensessionBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recordings screensession bad request response has a 2xx status code
func (o *PatchRecordingsScreensessionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recordings screensession bad request response has a 3xx status code
func (o *PatchRecordingsScreensessionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recordings screensession bad request response has a 4xx status code
func (o *PatchRecordingsScreensessionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recordings screensession bad request response has a 5xx status code
func (o *PatchRecordingsScreensessionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recordings screensession bad request response a status code equal to that given
func (o *PatchRecordingsScreensessionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchRecordingsScreensessionBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRecordingsScreensessionBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRecordingsScreensessionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingsScreensessionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingsScreensessionUnauthorized creates a PatchRecordingsScreensessionUnauthorized with default headers values
func NewPatchRecordingsScreensessionUnauthorized() *PatchRecordingsScreensessionUnauthorized {
	return &PatchRecordingsScreensessionUnauthorized{}
}

/*
PatchRecordingsScreensessionUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchRecordingsScreensessionUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recordings screensession unauthorized response has a 2xx status code
func (o *PatchRecordingsScreensessionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recordings screensession unauthorized response has a 3xx status code
func (o *PatchRecordingsScreensessionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recordings screensession unauthorized response has a 4xx status code
func (o *PatchRecordingsScreensessionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recordings screensession unauthorized response has a 5xx status code
func (o *PatchRecordingsScreensessionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recordings screensession unauthorized response a status code equal to that given
func (o *PatchRecordingsScreensessionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchRecordingsScreensessionUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRecordingsScreensessionUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRecordingsScreensessionUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingsScreensessionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingsScreensessionForbidden creates a PatchRecordingsScreensessionForbidden with default headers values
func NewPatchRecordingsScreensessionForbidden() *PatchRecordingsScreensessionForbidden {
	return &PatchRecordingsScreensessionForbidden{}
}

/*
PatchRecordingsScreensessionForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchRecordingsScreensessionForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recordings screensession forbidden response has a 2xx status code
func (o *PatchRecordingsScreensessionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recordings screensession forbidden response has a 3xx status code
func (o *PatchRecordingsScreensessionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recordings screensession forbidden response has a 4xx status code
func (o *PatchRecordingsScreensessionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recordings screensession forbidden response has a 5xx status code
func (o *PatchRecordingsScreensessionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recordings screensession forbidden response a status code equal to that given
func (o *PatchRecordingsScreensessionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchRecordingsScreensessionForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionForbidden  %+v", 403, o.Payload)
}

func (o *PatchRecordingsScreensessionForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionForbidden  %+v", 403, o.Payload)
}

func (o *PatchRecordingsScreensessionForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingsScreensessionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingsScreensessionNotFound creates a PatchRecordingsScreensessionNotFound with default headers values
func NewPatchRecordingsScreensessionNotFound() *PatchRecordingsScreensessionNotFound {
	return &PatchRecordingsScreensessionNotFound{}
}

/*
PatchRecordingsScreensessionNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchRecordingsScreensessionNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recordings screensession not found response has a 2xx status code
func (o *PatchRecordingsScreensessionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recordings screensession not found response has a 3xx status code
func (o *PatchRecordingsScreensessionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recordings screensession not found response has a 4xx status code
func (o *PatchRecordingsScreensessionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recordings screensession not found response has a 5xx status code
func (o *PatchRecordingsScreensessionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recordings screensession not found response a status code equal to that given
func (o *PatchRecordingsScreensessionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchRecordingsScreensessionNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionNotFound  %+v", 404, o.Payload)
}

func (o *PatchRecordingsScreensessionNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionNotFound  %+v", 404, o.Payload)
}

func (o *PatchRecordingsScreensessionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingsScreensessionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingsScreensessionRequestTimeout creates a PatchRecordingsScreensessionRequestTimeout with default headers values
func NewPatchRecordingsScreensessionRequestTimeout() *PatchRecordingsScreensessionRequestTimeout {
	return &PatchRecordingsScreensessionRequestTimeout{}
}

/*
PatchRecordingsScreensessionRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchRecordingsScreensessionRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recordings screensession request timeout response has a 2xx status code
func (o *PatchRecordingsScreensessionRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recordings screensession request timeout response has a 3xx status code
func (o *PatchRecordingsScreensessionRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recordings screensession request timeout response has a 4xx status code
func (o *PatchRecordingsScreensessionRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recordings screensession request timeout response has a 5xx status code
func (o *PatchRecordingsScreensessionRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recordings screensession request timeout response a status code equal to that given
func (o *PatchRecordingsScreensessionRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchRecordingsScreensessionRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchRecordingsScreensessionRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchRecordingsScreensessionRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingsScreensessionRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingsScreensessionRequestEntityTooLarge creates a PatchRecordingsScreensessionRequestEntityTooLarge with default headers values
func NewPatchRecordingsScreensessionRequestEntityTooLarge() *PatchRecordingsScreensessionRequestEntityTooLarge {
	return &PatchRecordingsScreensessionRequestEntityTooLarge{}
}

/*
PatchRecordingsScreensessionRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchRecordingsScreensessionRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recordings screensession request entity too large response has a 2xx status code
func (o *PatchRecordingsScreensessionRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recordings screensession request entity too large response has a 3xx status code
func (o *PatchRecordingsScreensessionRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recordings screensession request entity too large response has a 4xx status code
func (o *PatchRecordingsScreensessionRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recordings screensession request entity too large response has a 5xx status code
func (o *PatchRecordingsScreensessionRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recordings screensession request entity too large response a status code equal to that given
func (o *PatchRecordingsScreensessionRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchRecordingsScreensessionRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRecordingsScreensessionRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRecordingsScreensessionRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingsScreensessionRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingsScreensessionUnsupportedMediaType creates a PatchRecordingsScreensessionUnsupportedMediaType with default headers values
func NewPatchRecordingsScreensessionUnsupportedMediaType() *PatchRecordingsScreensessionUnsupportedMediaType {
	return &PatchRecordingsScreensessionUnsupportedMediaType{}
}

/*
PatchRecordingsScreensessionUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchRecordingsScreensessionUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recordings screensession unsupported media type response has a 2xx status code
func (o *PatchRecordingsScreensessionUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recordings screensession unsupported media type response has a 3xx status code
func (o *PatchRecordingsScreensessionUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recordings screensession unsupported media type response has a 4xx status code
func (o *PatchRecordingsScreensessionUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recordings screensession unsupported media type response has a 5xx status code
func (o *PatchRecordingsScreensessionUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recordings screensession unsupported media type response a status code equal to that given
func (o *PatchRecordingsScreensessionUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchRecordingsScreensessionUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRecordingsScreensessionUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRecordingsScreensessionUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingsScreensessionUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingsScreensessionTooManyRequests creates a PatchRecordingsScreensessionTooManyRequests with default headers values
func NewPatchRecordingsScreensessionTooManyRequests() *PatchRecordingsScreensessionTooManyRequests {
	return &PatchRecordingsScreensessionTooManyRequests{}
}

/*
PatchRecordingsScreensessionTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchRecordingsScreensessionTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recordings screensession too many requests response has a 2xx status code
func (o *PatchRecordingsScreensessionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recordings screensession too many requests response has a 3xx status code
func (o *PatchRecordingsScreensessionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recordings screensession too many requests response has a 4xx status code
func (o *PatchRecordingsScreensessionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recordings screensession too many requests response has a 5xx status code
func (o *PatchRecordingsScreensessionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recordings screensession too many requests response a status code equal to that given
func (o *PatchRecordingsScreensessionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchRecordingsScreensessionTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRecordingsScreensessionTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRecordingsScreensessionTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingsScreensessionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingsScreensessionInternalServerError creates a PatchRecordingsScreensessionInternalServerError with default headers values
func NewPatchRecordingsScreensessionInternalServerError() *PatchRecordingsScreensessionInternalServerError {
	return &PatchRecordingsScreensessionInternalServerError{}
}

/*
PatchRecordingsScreensessionInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchRecordingsScreensessionInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recordings screensession internal server error response has a 2xx status code
func (o *PatchRecordingsScreensessionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recordings screensession internal server error response has a 3xx status code
func (o *PatchRecordingsScreensessionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recordings screensession internal server error response has a 4xx status code
func (o *PatchRecordingsScreensessionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch recordings screensession internal server error response has a 5xx status code
func (o *PatchRecordingsScreensessionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch recordings screensession internal server error response a status code equal to that given
func (o *PatchRecordingsScreensessionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchRecordingsScreensessionInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRecordingsScreensessionInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRecordingsScreensessionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingsScreensessionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingsScreensessionServiceUnavailable creates a PatchRecordingsScreensessionServiceUnavailable with default headers values
func NewPatchRecordingsScreensessionServiceUnavailable() *PatchRecordingsScreensessionServiceUnavailable {
	return &PatchRecordingsScreensessionServiceUnavailable{}
}

/*
PatchRecordingsScreensessionServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchRecordingsScreensessionServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recordings screensession service unavailable response has a 2xx status code
func (o *PatchRecordingsScreensessionServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recordings screensession service unavailable response has a 3xx status code
func (o *PatchRecordingsScreensessionServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recordings screensession service unavailable response has a 4xx status code
func (o *PatchRecordingsScreensessionServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch recordings screensession service unavailable response has a 5xx status code
func (o *PatchRecordingsScreensessionServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch recordings screensession service unavailable response a status code equal to that given
func (o *PatchRecordingsScreensessionServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchRecordingsScreensessionServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRecordingsScreensessionServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRecordingsScreensessionServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingsScreensessionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingsScreensessionGatewayTimeout creates a PatchRecordingsScreensessionGatewayTimeout with default headers values
func NewPatchRecordingsScreensessionGatewayTimeout() *PatchRecordingsScreensessionGatewayTimeout {
	return &PatchRecordingsScreensessionGatewayTimeout{}
}

/*
PatchRecordingsScreensessionGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchRecordingsScreensessionGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recordings screensession gateway timeout response has a 2xx status code
func (o *PatchRecordingsScreensessionGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recordings screensession gateway timeout response has a 3xx status code
func (o *PatchRecordingsScreensessionGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recordings screensession gateway timeout response has a 4xx status code
func (o *PatchRecordingsScreensessionGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch recordings screensession gateway timeout response has a 5xx status code
func (o *PatchRecordingsScreensessionGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch recordings screensession gateway timeout response a status code equal to that given
func (o *PatchRecordingsScreensessionGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchRecordingsScreensessionGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRecordingsScreensessionGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensessionGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRecordingsScreensessionGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingsScreensessionGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingsScreensessionDefault creates a PatchRecordingsScreensessionDefault with default headers values
func NewPatchRecordingsScreensessionDefault(code int) *PatchRecordingsScreensessionDefault {
	return &PatchRecordingsScreensessionDefault{
		_statusCode: code,
	}
}

/*
PatchRecordingsScreensessionDefault describes a response with status code -1, with default header values.

successful operation
*/
type PatchRecordingsScreensessionDefault struct {
	_statusCode int
}

// Code gets the status code for the patch recordings screensession default response
func (o *PatchRecordingsScreensessionDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this patch recordings screensession default response has a 2xx status code
func (o *PatchRecordingsScreensessionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this patch recordings screensession default response has a 3xx status code
func (o *PatchRecordingsScreensessionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this patch recordings screensession default response has a 4xx status code
func (o *PatchRecordingsScreensessionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this patch recordings screensession default response has a 5xx status code
func (o *PatchRecordingsScreensessionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this patch recordings screensession default response a status code equal to that given
func (o *PatchRecordingsScreensessionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *PatchRecordingsScreensessionDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensession default ", o._statusCode)
}

func (o *PatchRecordingsScreensessionDefault) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recordings/screensessions/{recordingSessionId}][%d] patchRecordingsScreensession default ", o._statusCode)
}

func (o *PatchRecordingsScreensessionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

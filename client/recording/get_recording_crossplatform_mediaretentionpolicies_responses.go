// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRecordingCrossplatformMediaretentionpoliciesReader is a Reader for the GetRecordingCrossplatformMediaretentionpolicies structure.
type GetRecordingCrossplatformMediaretentionpoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRecordingCrossplatformMediaretentionpoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRecordingCrossplatformMediaretentionpoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRecordingCrossplatformMediaretentionpoliciesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRecordingCrossplatformMediaretentionpoliciesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRecordingCrossplatformMediaretentionpoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRecordingCrossplatformMediaretentionpoliciesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRecordingCrossplatformMediaretentionpoliciesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRecordingCrossplatformMediaretentionpoliciesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRecordingCrossplatformMediaretentionpoliciesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRecordingCrossplatformMediaretentionpoliciesOK creates a GetRecordingCrossplatformMediaretentionpoliciesOK with default headers values
func NewGetRecordingCrossplatformMediaretentionpoliciesOK() *GetRecordingCrossplatformMediaretentionpoliciesOK {
	return &GetRecordingCrossplatformMediaretentionpoliciesOK{}
}

/*
GetRecordingCrossplatformMediaretentionpoliciesOK describes a response with status code 200, with default header values.

successful operation
*/
type GetRecordingCrossplatformMediaretentionpoliciesOK struct {
	Payload *models.PolicyEntityListing
}

// IsSuccess returns true when this get recording crossplatform mediaretentionpolicies o k response has a 2xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get recording crossplatform mediaretentionpolicies o k response has a 3xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording crossplatform mediaretentionpolicies o k response has a 4xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording crossplatform mediaretentionpolicies o k response has a 5xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording crossplatform mediaretentionpolicies o k response a status code equal to that given
func (o *GetRecordingCrossplatformMediaretentionpoliciesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesOK  %+v", 200, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesOK) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesOK  %+v", 200, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesOK) GetPayload() *models.PolicyEntityListing {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PolicyEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpoliciesBadRequest creates a GetRecordingCrossplatformMediaretentionpoliciesBadRequest with default headers values
func NewGetRecordingCrossplatformMediaretentionpoliciesBadRequest() *GetRecordingCrossplatformMediaretentionpoliciesBadRequest {
	return &GetRecordingCrossplatformMediaretentionpoliciesBadRequest{}
}

/*
GetRecordingCrossplatformMediaretentionpoliciesBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRecordingCrossplatformMediaretentionpoliciesBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording crossplatform mediaretentionpolicies bad request response has a 2xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording crossplatform mediaretentionpolicies bad request response has a 3xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording crossplatform mediaretentionpolicies bad request response has a 4xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording crossplatform mediaretentionpolicies bad request response has a 5xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording crossplatform mediaretentionpolicies bad request response a status code equal to that given
func (o *GetRecordingCrossplatformMediaretentionpoliciesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpoliciesUnauthorized creates a GetRecordingCrossplatformMediaretentionpoliciesUnauthorized with default headers values
func NewGetRecordingCrossplatformMediaretentionpoliciesUnauthorized() *GetRecordingCrossplatformMediaretentionpoliciesUnauthorized {
	return &GetRecordingCrossplatformMediaretentionpoliciesUnauthorized{}
}

/*
GetRecordingCrossplatformMediaretentionpoliciesUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRecordingCrossplatformMediaretentionpoliciesUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording crossplatform mediaretentionpolicies unauthorized response has a 2xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording crossplatform mediaretentionpolicies unauthorized response has a 3xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording crossplatform mediaretentionpolicies unauthorized response has a 4xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording crossplatform mediaretentionpolicies unauthorized response has a 5xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording crossplatform mediaretentionpolicies unauthorized response a status code equal to that given
func (o *GetRecordingCrossplatformMediaretentionpoliciesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpoliciesForbidden creates a GetRecordingCrossplatformMediaretentionpoliciesForbidden with default headers values
func NewGetRecordingCrossplatformMediaretentionpoliciesForbidden() *GetRecordingCrossplatformMediaretentionpoliciesForbidden {
	return &GetRecordingCrossplatformMediaretentionpoliciesForbidden{}
}

/*
GetRecordingCrossplatformMediaretentionpoliciesForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetRecordingCrossplatformMediaretentionpoliciesForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording crossplatform mediaretentionpolicies forbidden response has a 2xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording crossplatform mediaretentionpolicies forbidden response has a 3xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording crossplatform mediaretentionpolicies forbidden response has a 4xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording crossplatform mediaretentionpolicies forbidden response has a 5xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording crossplatform mediaretentionpolicies forbidden response a status code equal to that given
func (o *GetRecordingCrossplatformMediaretentionpoliciesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesForbidden  %+v", 403, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesForbidden  %+v", 403, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpoliciesNotFound creates a GetRecordingCrossplatformMediaretentionpoliciesNotFound with default headers values
func NewGetRecordingCrossplatformMediaretentionpoliciesNotFound() *GetRecordingCrossplatformMediaretentionpoliciesNotFound {
	return &GetRecordingCrossplatformMediaretentionpoliciesNotFound{}
}

/*
GetRecordingCrossplatformMediaretentionpoliciesNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetRecordingCrossplatformMediaretentionpoliciesNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording crossplatform mediaretentionpolicies not found response has a 2xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording crossplatform mediaretentionpolicies not found response has a 3xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording crossplatform mediaretentionpolicies not found response has a 4xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording crossplatform mediaretentionpolicies not found response has a 5xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording crossplatform mediaretentionpolicies not found response a status code equal to that given
func (o *GetRecordingCrossplatformMediaretentionpoliciesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesNotFound  %+v", 404, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesNotFound  %+v", 404, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpoliciesRequestTimeout creates a GetRecordingCrossplatformMediaretentionpoliciesRequestTimeout with default headers values
func NewGetRecordingCrossplatformMediaretentionpoliciesRequestTimeout() *GetRecordingCrossplatformMediaretentionpoliciesRequestTimeout {
	return &GetRecordingCrossplatformMediaretentionpoliciesRequestTimeout{}
}

/*
GetRecordingCrossplatformMediaretentionpoliciesRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRecordingCrossplatformMediaretentionpoliciesRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording crossplatform mediaretentionpolicies request timeout response has a 2xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording crossplatform mediaretentionpolicies request timeout response has a 3xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording crossplatform mediaretentionpolicies request timeout response has a 4xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording crossplatform mediaretentionpolicies request timeout response has a 5xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording crossplatform mediaretentionpolicies request timeout response a status code equal to that given
func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge creates a GetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge with default headers values
func NewGetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge() *GetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge {
	return &GetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge{}
}

/*
GetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording crossplatform mediaretentionpolicies request entity too large response has a 2xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording crossplatform mediaretentionpolicies request entity too large response has a 3xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording crossplatform mediaretentionpolicies request entity too large response has a 4xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording crossplatform mediaretentionpolicies request entity too large response has a 5xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording crossplatform mediaretentionpolicies request entity too large response a status code equal to that given
func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType creates a GetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType with default headers values
func NewGetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType() *GetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType {
	return &GetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType{}
}

/*
GetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording crossplatform mediaretentionpolicies unsupported media type response has a 2xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording crossplatform mediaretentionpolicies unsupported media type response has a 3xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording crossplatform mediaretentionpolicies unsupported media type response has a 4xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording crossplatform mediaretentionpolicies unsupported media type response has a 5xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording crossplatform mediaretentionpolicies unsupported media type response a status code equal to that given
func (o *GetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpoliciesTooManyRequests creates a GetRecordingCrossplatformMediaretentionpoliciesTooManyRequests with default headers values
func NewGetRecordingCrossplatformMediaretentionpoliciesTooManyRequests() *GetRecordingCrossplatformMediaretentionpoliciesTooManyRequests {
	return &GetRecordingCrossplatformMediaretentionpoliciesTooManyRequests{}
}

/*
GetRecordingCrossplatformMediaretentionpoliciesTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRecordingCrossplatformMediaretentionpoliciesTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording crossplatform mediaretentionpolicies too many requests response has a 2xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording crossplatform mediaretentionpolicies too many requests response has a 3xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording crossplatform mediaretentionpolicies too many requests response has a 4xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording crossplatform mediaretentionpolicies too many requests response has a 5xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording crossplatform mediaretentionpolicies too many requests response a status code equal to that given
func (o *GetRecordingCrossplatformMediaretentionpoliciesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpoliciesInternalServerError creates a GetRecordingCrossplatformMediaretentionpoliciesInternalServerError with default headers values
func NewGetRecordingCrossplatformMediaretentionpoliciesInternalServerError() *GetRecordingCrossplatformMediaretentionpoliciesInternalServerError {
	return &GetRecordingCrossplatformMediaretentionpoliciesInternalServerError{}
}

/*
GetRecordingCrossplatformMediaretentionpoliciesInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRecordingCrossplatformMediaretentionpoliciesInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording crossplatform mediaretentionpolicies internal server error response has a 2xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording crossplatform mediaretentionpolicies internal server error response has a 3xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording crossplatform mediaretentionpolicies internal server error response has a 4xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording crossplatform mediaretentionpolicies internal server error response has a 5xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get recording crossplatform mediaretentionpolicies internal server error response a status code equal to that given
func (o *GetRecordingCrossplatformMediaretentionpoliciesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable creates a GetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable with default headers values
func NewGetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable() *GetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable {
	return &GetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable{}
}

/*
GetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording crossplatform mediaretentionpolicies service unavailable response has a 2xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording crossplatform mediaretentionpolicies service unavailable response has a 3xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording crossplatform mediaretentionpolicies service unavailable response has a 4xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording crossplatform mediaretentionpolicies service unavailable response has a 5xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get recording crossplatform mediaretentionpolicies service unavailable response a status code equal to that given
func (o *GetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout creates a GetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout with default headers values
func NewGetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout() *GetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout {
	return &GetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout{}
}

/*
GetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording crossplatform mediaretentionpolicies gateway timeout response has a 2xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording crossplatform mediaretentionpolicies gateway timeout response has a 3xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording crossplatform mediaretentionpolicies gateway timeout response has a 4xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording crossplatform mediaretentionpolicies gateway timeout response has a 5xx status code
func (o *GetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get recording crossplatform mediaretentionpolicies gateway timeout response a status code equal to that given
func (o *GetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies][%d] getRecordingCrossplatformMediaretentionpoliciesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRecordingJobReader is a Reader for the GetRecordingJob structure.
type GetRecordingJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRecordingJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRecordingJobOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRecordingJobBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRecordingJobUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRecordingJobForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRecordingJobNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRecordingJobRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRecordingJobRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRecordingJobUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRecordingJobTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRecordingJobInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRecordingJobServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRecordingJobGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRecordingJobOK creates a GetRecordingJobOK with default headers values
func NewGetRecordingJobOK() *GetRecordingJobOK {
	return &GetRecordingJobOK{}
}

/*GetRecordingJobOK handles this case with default header values.

successful operation
*/
type GetRecordingJobOK struct {
	Payload *models.RecordingJob
}

func (o *GetRecordingJobOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/jobs/{jobId}][%d] getRecordingJobOK  %+v", 200, o.Payload)
}

func (o *GetRecordingJobOK) GetPayload() *models.RecordingJob {
	return o.Payload
}

func (o *GetRecordingJobOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RecordingJob)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingJobBadRequest creates a GetRecordingJobBadRequest with default headers values
func NewGetRecordingJobBadRequest() *GetRecordingJobBadRequest {
	return &GetRecordingJobBadRequest{}
}

/*GetRecordingJobBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRecordingJobBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingJobBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/jobs/{jobId}][%d] getRecordingJobBadRequest  %+v", 400, o.Payload)
}

func (o *GetRecordingJobBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingJobBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingJobUnauthorized creates a GetRecordingJobUnauthorized with default headers values
func NewGetRecordingJobUnauthorized() *GetRecordingJobUnauthorized {
	return &GetRecordingJobUnauthorized{}
}

/*GetRecordingJobUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRecordingJobUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingJobUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/jobs/{jobId}][%d] getRecordingJobUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRecordingJobUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingJobUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingJobForbidden creates a GetRecordingJobForbidden with default headers values
func NewGetRecordingJobForbidden() *GetRecordingJobForbidden {
	return &GetRecordingJobForbidden{}
}

/*GetRecordingJobForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetRecordingJobForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingJobForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/jobs/{jobId}][%d] getRecordingJobForbidden  %+v", 403, o.Payload)
}

func (o *GetRecordingJobForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingJobForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingJobNotFound creates a GetRecordingJobNotFound with default headers values
func NewGetRecordingJobNotFound() *GetRecordingJobNotFound {
	return &GetRecordingJobNotFound{}
}

/*GetRecordingJobNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetRecordingJobNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingJobNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/jobs/{jobId}][%d] getRecordingJobNotFound  %+v", 404, o.Payload)
}

func (o *GetRecordingJobNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingJobNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingJobRequestTimeout creates a GetRecordingJobRequestTimeout with default headers values
func NewGetRecordingJobRequestTimeout() *GetRecordingJobRequestTimeout {
	return &GetRecordingJobRequestTimeout{}
}

/*GetRecordingJobRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRecordingJobRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingJobRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/jobs/{jobId}][%d] getRecordingJobRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRecordingJobRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingJobRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingJobRequestEntityTooLarge creates a GetRecordingJobRequestEntityTooLarge with default headers values
func NewGetRecordingJobRequestEntityTooLarge() *GetRecordingJobRequestEntityTooLarge {
	return &GetRecordingJobRequestEntityTooLarge{}
}

/*GetRecordingJobRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetRecordingJobRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingJobRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/jobs/{jobId}][%d] getRecordingJobRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRecordingJobRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingJobRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingJobUnsupportedMediaType creates a GetRecordingJobUnsupportedMediaType with default headers values
func NewGetRecordingJobUnsupportedMediaType() *GetRecordingJobUnsupportedMediaType {
	return &GetRecordingJobUnsupportedMediaType{}
}

/*GetRecordingJobUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRecordingJobUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingJobUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/jobs/{jobId}][%d] getRecordingJobUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRecordingJobUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingJobUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingJobTooManyRequests creates a GetRecordingJobTooManyRequests with default headers values
func NewGetRecordingJobTooManyRequests() *GetRecordingJobTooManyRequests {
	return &GetRecordingJobTooManyRequests{}
}

/*GetRecordingJobTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRecordingJobTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingJobTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/jobs/{jobId}][%d] getRecordingJobTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRecordingJobTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingJobTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingJobInternalServerError creates a GetRecordingJobInternalServerError with default headers values
func NewGetRecordingJobInternalServerError() *GetRecordingJobInternalServerError {
	return &GetRecordingJobInternalServerError{}
}

/*GetRecordingJobInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRecordingJobInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingJobInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/jobs/{jobId}][%d] getRecordingJobInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRecordingJobInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingJobInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingJobServiceUnavailable creates a GetRecordingJobServiceUnavailable with default headers values
func NewGetRecordingJobServiceUnavailable() *GetRecordingJobServiceUnavailable {
	return &GetRecordingJobServiceUnavailable{}
}

/*GetRecordingJobServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRecordingJobServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingJobServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/jobs/{jobId}][%d] getRecordingJobServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRecordingJobServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingJobServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingJobGatewayTimeout creates a GetRecordingJobGatewayTimeout with default headers values
func NewGetRecordingJobGatewayTimeout() *GetRecordingJobGatewayTimeout {
	return &GetRecordingJobGatewayTimeout{}
}

/*GetRecordingJobGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetRecordingJobGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingJobGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/jobs/{jobId}][%d] getRecordingJobGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRecordingJobGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingJobGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

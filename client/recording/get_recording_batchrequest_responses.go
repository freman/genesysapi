// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRecordingBatchrequestReader is a Reader for the GetRecordingBatchrequest structure.
type GetRecordingBatchrequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRecordingBatchrequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRecordingBatchrequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRecordingBatchrequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRecordingBatchrequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRecordingBatchrequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRecordingBatchrequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRecordingBatchrequestRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRecordingBatchrequestRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRecordingBatchrequestUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRecordingBatchrequestTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRecordingBatchrequestInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRecordingBatchrequestServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRecordingBatchrequestGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRecordingBatchrequestOK creates a GetRecordingBatchrequestOK with default headers values
func NewGetRecordingBatchrequestOK() *GetRecordingBatchrequestOK {
	return &GetRecordingBatchrequestOK{}
}

/*
GetRecordingBatchrequestOK describes a response with status code 200, with default header values.

successful operation
*/
type GetRecordingBatchrequestOK struct {
	Payload *models.BatchDownloadJobStatusResult
}

// IsSuccess returns true when this get recording batchrequest o k response has a 2xx status code
func (o *GetRecordingBatchrequestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get recording batchrequest o k response has a 3xx status code
func (o *GetRecordingBatchrequestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording batchrequest o k response has a 4xx status code
func (o *GetRecordingBatchrequestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording batchrequest o k response has a 5xx status code
func (o *GetRecordingBatchrequestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording batchrequest o k response a status code equal to that given
func (o *GetRecordingBatchrequestOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRecordingBatchrequestOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestOK  %+v", 200, o.Payload)
}

func (o *GetRecordingBatchrequestOK) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestOK  %+v", 200, o.Payload)
}

func (o *GetRecordingBatchrequestOK) GetPayload() *models.BatchDownloadJobStatusResult {
	return o.Payload
}

func (o *GetRecordingBatchrequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BatchDownloadJobStatusResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingBatchrequestBadRequest creates a GetRecordingBatchrequestBadRequest with default headers values
func NewGetRecordingBatchrequestBadRequest() *GetRecordingBatchrequestBadRequest {
	return &GetRecordingBatchrequestBadRequest{}
}

/*
GetRecordingBatchrequestBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRecordingBatchrequestBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording batchrequest bad request response has a 2xx status code
func (o *GetRecordingBatchrequestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording batchrequest bad request response has a 3xx status code
func (o *GetRecordingBatchrequestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording batchrequest bad request response has a 4xx status code
func (o *GetRecordingBatchrequestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording batchrequest bad request response has a 5xx status code
func (o *GetRecordingBatchrequestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording batchrequest bad request response a status code equal to that given
func (o *GetRecordingBatchrequestBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetRecordingBatchrequestBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestBadRequest  %+v", 400, o.Payload)
}

func (o *GetRecordingBatchrequestBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestBadRequest  %+v", 400, o.Payload)
}

func (o *GetRecordingBatchrequestBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingBatchrequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingBatchrequestUnauthorized creates a GetRecordingBatchrequestUnauthorized with default headers values
func NewGetRecordingBatchrequestUnauthorized() *GetRecordingBatchrequestUnauthorized {
	return &GetRecordingBatchrequestUnauthorized{}
}

/*
GetRecordingBatchrequestUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRecordingBatchrequestUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording batchrequest unauthorized response has a 2xx status code
func (o *GetRecordingBatchrequestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording batchrequest unauthorized response has a 3xx status code
func (o *GetRecordingBatchrequestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording batchrequest unauthorized response has a 4xx status code
func (o *GetRecordingBatchrequestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording batchrequest unauthorized response has a 5xx status code
func (o *GetRecordingBatchrequestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording batchrequest unauthorized response a status code equal to that given
func (o *GetRecordingBatchrequestUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetRecordingBatchrequestUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRecordingBatchrequestUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRecordingBatchrequestUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingBatchrequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingBatchrequestForbidden creates a GetRecordingBatchrequestForbidden with default headers values
func NewGetRecordingBatchrequestForbidden() *GetRecordingBatchrequestForbidden {
	return &GetRecordingBatchrequestForbidden{}
}

/*
GetRecordingBatchrequestForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetRecordingBatchrequestForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording batchrequest forbidden response has a 2xx status code
func (o *GetRecordingBatchrequestForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording batchrequest forbidden response has a 3xx status code
func (o *GetRecordingBatchrequestForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording batchrequest forbidden response has a 4xx status code
func (o *GetRecordingBatchrequestForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording batchrequest forbidden response has a 5xx status code
func (o *GetRecordingBatchrequestForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording batchrequest forbidden response a status code equal to that given
func (o *GetRecordingBatchrequestForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetRecordingBatchrequestForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestForbidden  %+v", 403, o.Payload)
}

func (o *GetRecordingBatchrequestForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestForbidden  %+v", 403, o.Payload)
}

func (o *GetRecordingBatchrequestForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingBatchrequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingBatchrequestNotFound creates a GetRecordingBatchrequestNotFound with default headers values
func NewGetRecordingBatchrequestNotFound() *GetRecordingBatchrequestNotFound {
	return &GetRecordingBatchrequestNotFound{}
}

/*
GetRecordingBatchrequestNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetRecordingBatchrequestNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording batchrequest not found response has a 2xx status code
func (o *GetRecordingBatchrequestNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording batchrequest not found response has a 3xx status code
func (o *GetRecordingBatchrequestNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording batchrequest not found response has a 4xx status code
func (o *GetRecordingBatchrequestNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording batchrequest not found response has a 5xx status code
func (o *GetRecordingBatchrequestNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording batchrequest not found response a status code equal to that given
func (o *GetRecordingBatchrequestNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRecordingBatchrequestNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestNotFound  %+v", 404, o.Payload)
}

func (o *GetRecordingBatchrequestNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestNotFound  %+v", 404, o.Payload)
}

func (o *GetRecordingBatchrequestNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingBatchrequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingBatchrequestRequestTimeout creates a GetRecordingBatchrequestRequestTimeout with default headers values
func NewGetRecordingBatchrequestRequestTimeout() *GetRecordingBatchrequestRequestTimeout {
	return &GetRecordingBatchrequestRequestTimeout{}
}

/*
GetRecordingBatchrequestRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRecordingBatchrequestRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording batchrequest request timeout response has a 2xx status code
func (o *GetRecordingBatchrequestRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording batchrequest request timeout response has a 3xx status code
func (o *GetRecordingBatchrequestRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording batchrequest request timeout response has a 4xx status code
func (o *GetRecordingBatchrequestRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording batchrequest request timeout response has a 5xx status code
func (o *GetRecordingBatchrequestRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording batchrequest request timeout response a status code equal to that given
func (o *GetRecordingBatchrequestRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetRecordingBatchrequestRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRecordingBatchrequestRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRecordingBatchrequestRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingBatchrequestRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingBatchrequestRequestEntityTooLarge creates a GetRecordingBatchrequestRequestEntityTooLarge with default headers values
func NewGetRecordingBatchrequestRequestEntityTooLarge() *GetRecordingBatchrequestRequestEntityTooLarge {
	return &GetRecordingBatchrequestRequestEntityTooLarge{}
}

/*
GetRecordingBatchrequestRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetRecordingBatchrequestRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording batchrequest request entity too large response has a 2xx status code
func (o *GetRecordingBatchrequestRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording batchrequest request entity too large response has a 3xx status code
func (o *GetRecordingBatchrequestRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording batchrequest request entity too large response has a 4xx status code
func (o *GetRecordingBatchrequestRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording batchrequest request entity too large response has a 5xx status code
func (o *GetRecordingBatchrequestRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording batchrequest request entity too large response a status code equal to that given
func (o *GetRecordingBatchrequestRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetRecordingBatchrequestRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRecordingBatchrequestRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRecordingBatchrequestRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingBatchrequestRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingBatchrequestUnsupportedMediaType creates a GetRecordingBatchrequestUnsupportedMediaType with default headers values
func NewGetRecordingBatchrequestUnsupportedMediaType() *GetRecordingBatchrequestUnsupportedMediaType {
	return &GetRecordingBatchrequestUnsupportedMediaType{}
}

/*
GetRecordingBatchrequestUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRecordingBatchrequestUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording batchrequest unsupported media type response has a 2xx status code
func (o *GetRecordingBatchrequestUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording batchrequest unsupported media type response has a 3xx status code
func (o *GetRecordingBatchrequestUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording batchrequest unsupported media type response has a 4xx status code
func (o *GetRecordingBatchrequestUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording batchrequest unsupported media type response has a 5xx status code
func (o *GetRecordingBatchrequestUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording batchrequest unsupported media type response a status code equal to that given
func (o *GetRecordingBatchrequestUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetRecordingBatchrequestUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRecordingBatchrequestUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRecordingBatchrequestUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingBatchrequestUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingBatchrequestTooManyRequests creates a GetRecordingBatchrequestTooManyRequests with default headers values
func NewGetRecordingBatchrequestTooManyRequests() *GetRecordingBatchrequestTooManyRequests {
	return &GetRecordingBatchrequestTooManyRequests{}
}

/*
GetRecordingBatchrequestTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRecordingBatchrequestTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording batchrequest too many requests response has a 2xx status code
func (o *GetRecordingBatchrequestTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording batchrequest too many requests response has a 3xx status code
func (o *GetRecordingBatchrequestTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording batchrequest too many requests response has a 4xx status code
func (o *GetRecordingBatchrequestTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording batchrequest too many requests response has a 5xx status code
func (o *GetRecordingBatchrequestTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording batchrequest too many requests response a status code equal to that given
func (o *GetRecordingBatchrequestTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetRecordingBatchrequestTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRecordingBatchrequestTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRecordingBatchrequestTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingBatchrequestTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingBatchrequestInternalServerError creates a GetRecordingBatchrequestInternalServerError with default headers values
func NewGetRecordingBatchrequestInternalServerError() *GetRecordingBatchrequestInternalServerError {
	return &GetRecordingBatchrequestInternalServerError{}
}

/*
GetRecordingBatchrequestInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRecordingBatchrequestInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording batchrequest internal server error response has a 2xx status code
func (o *GetRecordingBatchrequestInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording batchrequest internal server error response has a 3xx status code
func (o *GetRecordingBatchrequestInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording batchrequest internal server error response has a 4xx status code
func (o *GetRecordingBatchrequestInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording batchrequest internal server error response has a 5xx status code
func (o *GetRecordingBatchrequestInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get recording batchrequest internal server error response a status code equal to that given
func (o *GetRecordingBatchrequestInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRecordingBatchrequestInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRecordingBatchrequestInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRecordingBatchrequestInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingBatchrequestInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingBatchrequestServiceUnavailable creates a GetRecordingBatchrequestServiceUnavailable with default headers values
func NewGetRecordingBatchrequestServiceUnavailable() *GetRecordingBatchrequestServiceUnavailable {
	return &GetRecordingBatchrequestServiceUnavailable{}
}

/*
GetRecordingBatchrequestServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRecordingBatchrequestServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording batchrequest service unavailable response has a 2xx status code
func (o *GetRecordingBatchrequestServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording batchrequest service unavailable response has a 3xx status code
func (o *GetRecordingBatchrequestServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording batchrequest service unavailable response has a 4xx status code
func (o *GetRecordingBatchrequestServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording batchrequest service unavailable response has a 5xx status code
func (o *GetRecordingBatchrequestServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get recording batchrequest service unavailable response a status code equal to that given
func (o *GetRecordingBatchrequestServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetRecordingBatchrequestServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRecordingBatchrequestServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRecordingBatchrequestServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingBatchrequestServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingBatchrequestGatewayTimeout creates a GetRecordingBatchrequestGatewayTimeout with default headers values
func NewGetRecordingBatchrequestGatewayTimeout() *GetRecordingBatchrequestGatewayTimeout {
	return &GetRecordingBatchrequestGatewayTimeout{}
}

/*
GetRecordingBatchrequestGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetRecordingBatchrequestGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording batchrequest gateway timeout response has a 2xx status code
func (o *GetRecordingBatchrequestGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording batchrequest gateway timeout response has a 3xx status code
func (o *GetRecordingBatchrequestGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording batchrequest gateway timeout response has a 4xx status code
func (o *GetRecordingBatchrequestGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording batchrequest gateway timeout response has a 5xx status code
func (o *GetRecordingBatchrequestGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get recording batchrequest gateway timeout response a status code equal to that given
func (o *GetRecordingBatchrequestGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetRecordingBatchrequestGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRecordingBatchrequestGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/batchrequests/{jobId}][%d] getRecordingBatchrequestGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRecordingBatchrequestGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingBatchrequestGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

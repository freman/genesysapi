// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRecordingKeyconfigurationReader is a Reader for the GetRecordingKeyconfiguration structure.
type GetRecordingKeyconfigurationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRecordingKeyconfigurationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRecordingKeyconfigurationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRecordingKeyconfigurationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRecordingKeyconfigurationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRecordingKeyconfigurationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRecordingKeyconfigurationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRecordingKeyconfigurationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRecordingKeyconfigurationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRecordingKeyconfigurationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRecordingKeyconfigurationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRecordingKeyconfigurationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRecordingKeyconfigurationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRecordingKeyconfigurationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRecordingKeyconfigurationOK creates a GetRecordingKeyconfigurationOK with default headers values
func NewGetRecordingKeyconfigurationOK() *GetRecordingKeyconfigurationOK {
	return &GetRecordingKeyconfigurationOK{}
}

/*
GetRecordingKeyconfigurationOK describes a response with status code 200, with default header values.

successful operation
*/
type GetRecordingKeyconfigurationOK struct {
	Payload *models.RecordingEncryptionConfiguration
}

// IsSuccess returns true when this get recording keyconfiguration o k response has a 2xx status code
func (o *GetRecordingKeyconfigurationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get recording keyconfiguration o k response has a 3xx status code
func (o *GetRecordingKeyconfigurationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording keyconfiguration o k response has a 4xx status code
func (o *GetRecordingKeyconfigurationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording keyconfiguration o k response has a 5xx status code
func (o *GetRecordingKeyconfigurationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording keyconfiguration o k response a status code equal to that given
func (o *GetRecordingKeyconfigurationOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRecordingKeyconfigurationOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationOK  %+v", 200, o.Payload)
}

func (o *GetRecordingKeyconfigurationOK) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationOK  %+v", 200, o.Payload)
}

func (o *GetRecordingKeyconfigurationOK) GetPayload() *models.RecordingEncryptionConfiguration {
	return o.Payload
}

func (o *GetRecordingKeyconfigurationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RecordingEncryptionConfiguration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingKeyconfigurationBadRequest creates a GetRecordingKeyconfigurationBadRequest with default headers values
func NewGetRecordingKeyconfigurationBadRequest() *GetRecordingKeyconfigurationBadRequest {
	return &GetRecordingKeyconfigurationBadRequest{}
}

/*
GetRecordingKeyconfigurationBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRecordingKeyconfigurationBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording keyconfiguration bad request response has a 2xx status code
func (o *GetRecordingKeyconfigurationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording keyconfiguration bad request response has a 3xx status code
func (o *GetRecordingKeyconfigurationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording keyconfiguration bad request response has a 4xx status code
func (o *GetRecordingKeyconfigurationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording keyconfiguration bad request response has a 5xx status code
func (o *GetRecordingKeyconfigurationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording keyconfiguration bad request response a status code equal to that given
func (o *GetRecordingKeyconfigurationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetRecordingKeyconfigurationBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationBadRequest  %+v", 400, o.Payload)
}

func (o *GetRecordingKeyconfigurationBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationBadRequest  %+v", 400, o.Payload)
}

func (o *GetRecordingKeyconfigurationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingKeyconfigurationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingKeyconfigurationUnauthorized creates a GetRecordingKeyconfigurationUnauthorized with default headers values
func NewGetRecordingKeyconfigurationUnauthorized() *GetRecordingKeyconfigurationUnauthorized {
	return &GetRecordingKeyconfigurationUnauthorized{}
}

/*
GetRecordingKeyconfigurationUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRecordingKeyconfigurationUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording keyconfiguration unauthorized response has a 2xx status code
func (o *GetRecordingKeyconfigurationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording keyconfiguration unauthorized response has a 3xx status code
func (o *GetRecordingKeyconfigurationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording keyconfiguration unauthorized response has a 4xx status code
func (o *GetRecordingKeyconfigurationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording keyconfiguration unauthorized response has a 5xx status code
func (o *GetRecordingKeyconfigurationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording keyconfiguration unauthorized response a status code equal to that given
func (o *GetRecordingKeyconfigurationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetRecordingKeyconfigurationUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRecordingKeyconfigurationUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRecordingKeyconfigurationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingKeyconfigurationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingKeyconfigurationForbidden creates a GetRecordingKeyconfigurationForbidden with default headers values
func NewGetRecordingKeyconfigurationForbidden() *GetRecordingKeyconfigurationForbidden {
	return &GetRecordingKeyconfigurationForbidden{}
}

/*
GetRecordingKeyconfigurationForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetRecordingKeyconfigurationForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording keyconfiguration forbidden response has a 2xx status code
func (o *GetRecordingKeyconfigurationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording keyconfiguration forbidden response has a 3xx status code
func (o *GetRecordingKeyconfigurationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording keyconfiguration forbidden response has a 4xx status code
func (o *GetRecordingKeyconfigurationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording keyconfiguration forbidden response has a 5xx status code
func (o *GetRecordingKeyconfigurationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording keyconfiguration forbidden response a status code equal to that given
func (o *GetRecordingKeyconfigurationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetRecordingKeyconfigurationForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationForbidden  %+v", 403, o.Payload)
}

func (o *GetRecordingKeyconfigurationForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationForbidden  %+v", 403, o.Payload)
}

func (o *GetRecordingKeyconfigurationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingKeyconfigurationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingKeyconfigurationNotFound creates a GetRecordingKeyconfigurationNotFound with default headers values
func NewGetRecordingKeyconfigurationNotFound() *GetRecordingKeyconfigurationNotFound {
	return &GetRecordingKeyconfigurationNotFound{}
}

/*
GetRecordingKeyconfigurationNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetRecordingKeyconfigurationNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording keyconfiguration not found response has a 2xx status code
func (o *GetRecordingKeyconfigurationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording keyconfiguration not found response has a 3xx status code
func (o *GetRecordingKeyconfigurationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording keyconfiguration not found response has a 4xx status code
func (o *GetRecordingKeyconfigurationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording keyconfiguration not found response has a 5xx status code
func (o *GetRecordingKeyconfigurationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording keyconfiguration not found response a status code equal to that given
func (o *GetRecordingKeyconfigurationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRecordingKeyconfigurationNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationNotFound  %+v", 404, o.Payload)
}

func (o *GetRecordingKeyconfigurationNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationNotFound  %+v", 404, o.Payload)
}

func (o *GetRecordingKeyconfigurationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingKeyconfigurationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingKeyconfigurationRequestTimeout creates a GetRecordingKeyconfigurationRequestTimeout with default headers values
func NewGetRecordingKeyconfigurationRequestTimeout() *GetRecordingKeyconfigurationRequestTimeout {
	return &GetRecordingKeyconfigurationRequestTimeout{}
}

/*
GetRecordingKeyconfigurationRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRecordingKeyconfigurationRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording keyconfiguration request timeout response has a 2xx status code
func (o *GetRecordingKeyconfigurationRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording keyconfiguration request timeout response has a 3xx status code
func (o *GetRecordingKeyconfigurationRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording keyconfiguration request timeout response has a 4xx status code
func (o *GetRecordingKeyconfigurationRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording keyconfiguration request timeout response has a 5xx status code
func (o *GetRecordingKeyconfigurationRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording keyconfiguration request timeout response a status code equal to that given
func (o *GetRecordingKeyconfigurationRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetRecordingKeyconfigurationRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRecordingKeyconfigurationRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRecordingKeyconfigurationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingKeyconfigurationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingKeyconfigurationRequestEntityTooLarge creates a GetRecordingKeyconfigurationRequestEntityTooLarge with default headers values
func NewGetRecordingKeyconfigurationRequestEntityTooLarge() *GetRecordingKeyconfigurationRequestEntityTooLarge {
	return &GetRecordingKeyconfigurationRequestEntityTooLarge{}
}

/*
GetRecordingKeyconfigurationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetRecordingKeyconfigurationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording keyconfiguration request entity too large response has a 2xx status code
func (o *GetRecordingKeyconfigurationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording keyconfiguration request entity too large response has a 3xx status code
func (o *GetRecordingKeyconfigurationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording keyconfiguration request entity too large response has a 4xx status code
func (o *GetRecordingKeyconfigurationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording keyconfiguration request entity too large response has a 5xx status code
func (o *GetRecordingKeyconfigurationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording keyconfiguration request entity too large response a status code equal to that given
func (o *GetRecordingKeyconfigurationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetRecordingKeyconfigurationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRecordingKeyconfigurationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRecordingKeyconfigurationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingKeyconfigurationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingKeyconfigurationUnsupportedMediaType creates a GetRecordingKeyconfigurationUnsupportedMediaType with default headers values
func NewGetRecordingKeyconfigurationUnsupportedMediaType() *GetRecordingKeyconfigurationUnsupportedMediaType {
	return &GetRecordingKeyconfigurationUnsupportedMediaType{}
}

/*
GetRecordingKeyconfigurationUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRecordingKeyconfigurationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording keyconfiguration unsupported media type response has a 2xx status code
func (o *GetRecordingKeyconfigurationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording keyconfiguration unsupported media type response has a 3xx status code
func (o *GetRecordingKeyconfigurationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording keyconfiguration unsupported media type response has a 4xx status code
func (o *GetRecordingKeyconfigurationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording keyconfiguration unsupported media type response has a 5xx status code
func (o *GetRecordingKeyconfigurationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording keyconfiguration unsupported media type response a status code equal to that given
func (o *GetRecordingKeyconfigurationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetRecordingKeyconfigurationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRecordingKeyconfigurationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRecordingKeyconfigurationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingKeyconfigurationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingKeyconfigurationTooManyRequests creates a GetRecordingKeyconfigurationTooManyRequests with default headers values
func NewGetRecordingKeyconfigurationTooManyRequests() *GetRecordingKeyconfigurationTooManyRequests {
	return &GetRecordingKeyconfigurationTooManyRequests{}
}

/*
GetRecordingKeyconfigurationTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRecordingKeyconfigurationTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording keyconfiguration too many requests response has a 2xx status code
func (o *GetRecordingKeyconfigurationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording keyconfiguration too many requests response has a 3xx status code
func (o *GetRecordingKeyconfigurationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording keyconfiguration too many requests response has a 4xx status code
func (o *GetRecordingKeyconfigurationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recording keyconfiguration too many requests response has a 5xx status code
func (o *GetRecordingKeyconfigurationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get recording keyconfiguration too many requests response a status code equal to that given
func (o *GetRecordingKeyconfigurationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetRecordingKeyconfigurationTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRecordingKeyconfigurationTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRecordingKeyconfigurationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingKeyconfigurationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingKeyconfigurationInternalServerError creates a GetRecordingKeyconfigurationInternalServerError with default headers values
func NewGetRecordingKeyconfigurationInternalServerError() *GetRecordingKeyconfigurationInternalServerError {
	return &GetRecordingKeyconfigurationInternalServerError{}
}

/*
GetRecordingKeyconfigurationInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRecordingKeyconfigurationInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording keyconfiguration internal server error response has a 2xx status code
func (o *GetRecordingKeyconfigurationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording keyconfiguration internal server error response has a 3xx status code
func (o *GetRecordingKeyconfigurationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording keyconfiguration internal server error response has a 4xx status code
func (o *GetRecordingKeyconfigurationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording keyconfiguration internal server error response has a 5xx status code
func (o *GetRecordingKeyconfigurationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get recording keyconfiguration internal server error response a status code equal to that given
func (o *GetRecordingKeyconfigurationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRecordingKeyconfigurationInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRecordingKeyconfigurationInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRecordingKeyconfigurationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingKeyconfigurationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingKeyconfigurationServiceUnavailable creates a GetRecordingKeyconfigurationServiceUnavailable with default headers values
func NewGetRecordingKeyconfigurationServiceUnavailable() *GetRecordingKeyconfigurationServiceUnavailable {
	return &GetRecordingKeyconfigurationServiceUnavailable{}
}

/*
GetRecordingKeyconfigurationServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRecordingKeyconfigurationServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording keyconfiguration service unavailable response has a 2xx status code
func (o *GetRecordingKeyconfigurationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording keyconfiguration service unavailable response has a 3xx status code
func (o *GetRecordingKeyconfigurationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording keyconfiguration service unavailable response has a 4xx status code
func (o *GetRecordingKeyconfigurationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording keyconfiguration service unavailable response has a 5xx status code
func (o *GetRecordingKeyconfigurationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get recording keyconfiguration service unavailable response a status code equal to that given
func (o *GetRecordingKeyconfigurationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetRecordingKeyconfigurationServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRecordingKeyconfigurationServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRecordingKeyconfigurationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingKeyconfigurationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingKeyconfigurationGatewayTimeout creates a GetRecordingKeyconfigurationGatewayTimeout with default headers values
func NewGetRecordingKeyconfigurationGatewayTimeout() *GetRecordingKeyconfigurationGatewayTimeout {
	return &GetRecordingKeyconfigurationGatewayTimeout{}
}

/*
GetRecordingKeyconfigurationGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetRecordingKeyconfigurationGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get recording keyconfiguration gateway timeout response has a 2xx status code
func (o *GetRecordingKeyconfigurationGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recording keyconfiguration gateway timeout response has a 3xx status code
func (o *GetRecordingKeyconfigurationGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recording keyconfiguration gateway timeout response has a 4xx status code
func (o *GetRecordingKeyconfigurationGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recording keyconfiguration gateway timeout response has a 5xx status code
func (o *GetRecordingKeyconfigurationGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get recording keyconfiguration gateway timeout response a status code equal to that given
func (o *GetRecordingKeyconfigurationGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetRecordingKeyconfigurationGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRecordingKeyconfigurationGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] getRecordingKeyconfigurationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRecordingKeyconfigurationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingKeyconfigurationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

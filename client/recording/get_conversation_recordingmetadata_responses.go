// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetConversationRecordingmetadataReader is a Reader for the GetConversationRecordingmetadata structure.
type GetConversationRecordingmetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConversationRecordingmetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConversationRecordingmetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConversationRecordingmetadataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetConversationRecordingmetadataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConversationRecordingmetadataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConversationRecordingmetadataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetConversationRecordingmetadataRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetConversationRecordingmetadataUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetConversationRecordingmetadataTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetConversationRecordingmetadataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetConversationRecordingmetadataServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetConversationRecordingmetadataGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetConversationRecordingmetadataOK creates a GetConversationRecordingmetadataOK with default headers values
func NewGetConversationRecordingmetadataOK() *GetConversationRecordingmetadataOK {
	return &GetConversationRecordingmetadataOK{}
}

/*GetConversationRecordingmetadataOK handles this case with default header values.

successful operation
*/
type GetConversationRecordingmetadataOK struct {
	Payload []*models.RecordingMetadata
}

func (o *GetConversationRecordingmetadataOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/{conversationId}/recordingmetadata][%d] getConversationRecordingmetadataOK  %+v", 200, o.Payload)
}

func (o *GetConversationRecordingmetadataOK) GetPayload() []*models.RecordingMetadata {
	return o.Payload
}

func (o *GetConversationRecordingmetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationRecordingmetadataBadRequest creates a GetConversationRecordingmetadataBadRequest with default headers values
func NewGetConversationRecordingmetadataBadRequest() *GetConversationRecordingmetadataBadRequest {
	return &GetConversationRecordingmetadataBadRequest{}
}

/*GetConversationRecordingmetadataBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetConversationRecordingmetadataBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetConversationRecordingmetadataBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/{conversationId}/recordingmetadata][%d] getConversationRecordingmetadataBadRequest  %+v", 400, o.Payload)
}

func (o *GetConversationRecordingmetadataBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationRecordingmetadataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationRecordingmetadataUnauthorized creates a GetConversationRecordingmetadataUnauthorized with default headers values
func NewGetConversationRecordingmetadataUnauthorized() *GetConversationRecordingmetadataUnauthorized {
	return &GetConversationRecordingmetadataUnauthorized{}
}

/*GetConversationRecordingmetadataUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetConversationRecordingmetadataUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetConversationRecordingmetadataUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/{conversationId}/recordingmetadata][%d] getConversationRecordingmetadataUnauthorized  %+v", 401, o.Payload)
}

func (o *GetConversationRecordingmetadataUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationRecordingmetadataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationRecordingmetadataForbidden creates a GetConversationRecordingmetadataForbidden with default headers values
func NewGetConversationRecordingmetadataForbidden() *GetConversationRecordingmetadataForbidden {
	return &GetConversationRecordingmetadataForbidden{}
}

/*GetConversationRecordingmetadataForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetConversationRecordingmetadataForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetConversationRecordingmetadataForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/{conversationId}/recordingmetadata][%d] getConversationRecordingmetadataForbidden  %+v", 403, o.Payload)
}

func (o *GetConversationRecordingmetadataForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationRecordingmetadataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationRecordingmetadataNotFound creates a GetConversationRecordingmetadataNotFound with default headers values
func NewGetConversationRecordingmetadataNotFound() *GetConversationRecordingmetadataNotFound {
	return &GetConversationRecordingmetadataNotFound{}
}

/*GetConversationRecordingmetadataNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetConversationRecordingmetadataNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetConversationRecordingmetadataNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/{conversationId}/recordingmetadata][%d] getConversationRecordingmetadataNotFound  %+v", 404, o.Payload)
}

func (o *GetConversationRecordingmetadataNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationRecordingmetadataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationRecordingmetadataRequestEntityTooLarge creates a GetConversationRecordingmetadataRequestEntityTooLarge with default headers values
func NewGetConversationRecordingmetadataRequestEntityTooLarge() *GetConversationRecordingmetadataRequestEntityTooLarge {
	return &GetConversationRecordingmetadataRequestEntityTooLarge{}
}

/*GetConversationRecordingmetadataRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetConversationRecordingmetadataRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetConversationRecordingmetadataRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/{conversationId}/recordingmetadata][%d] getConversationRecordingmetadataRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetConversationRecordingmetadataRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationRecordingmetadataRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationRecordingmetadataUnsupportedMediaType creates a GetConversationRecordingmetadataUnsupportedMediaType with default headers values
func NewGetConversationRecordingmetadataUnsupportedMediaType() *GetConversationRecordingmetadataUnsupportedMediaType {
	return &GetConversationRecordingmetadataUnsupportedMediaType{}
}

/*GetConversationRecordingmetadataUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetConversationRecordingmetadataUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetConversationRecordingmetadataUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/{conversationId}/recordingmetadata][%d] getConversationRecordingmetadataUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetConversationRecordingmetadataUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationRecordingmetadataUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationRecordingmetadataTooManyRequests creates a GetConversationRecordingmetadataTooManyRequests with default headers values
func NewGetConversationRecordingmetadataTooManyRequests() *GetConversationRecordingmetadataTooManyRequests {
	return &GetConversationRecordingmetadataTooManyRequests{}
}

/*GetConversationRecordingmetadataTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type GetConversationRecordingmetadataTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetConversationRecordingmetadataTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/{conversationId}/recordingmetadata][%d] getConversationRecordingmetadataTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetConversationRecordingmetadataTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationRecordingmetadataTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationRecordingmetadataInternalServerError creates a GetConversationRecordingmetadataInternalServerError with default headers values
func NewGetConversationRecordingmetadataInternalServerError() *GetConversationRecordingmetadataInternalServerError {
	return &GetConversationRecordingmetadataInternalServerError{}
}

/*GetConversationRecordingmetadataInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetConversationRecordingmetadataInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetConversationRecordingmetadataInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/{conversationId}/recordingmetadata][%d] getConversationRecordingmetadataInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConversationRecordingmetadataInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationRecordingmetadataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationRecordingmetadataServiceUnavailable creates a GetConversationRecordingmetadataServiceUnavailable with default headers values
func NewGetConversationRecordingmetadataServiceUnavailable() *GetConversationRecordingmetadataServiceUnavailable {
	return &GetConversationRecordingmetadataServiceUnavailable{}
}

/*GetConversationRecordingmetadataServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetConversationRecordingmetadataServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetConversationRecordingmetadataServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/{conversationId}/recordingmetadata][%d] getConversationRecordingmetadataServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetConversationRecordingmetadataServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationRecordingmetadataServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationRecordingmetadataGatewayTimeout creates a GetConversationRecordingmetadataGatewayTimeout with default headers values
func NewGetConversationRecordingmetadataGatewayTimeout() *GetConversationRecordingmetadataGatewayTimeout {
	return &GetConversationRecordingmetadataGatewayTimeout{}
}

/*GetConversationRecordingmetadataGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetConversationRecordingmetadataGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetConversationRecordingmetadataGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/{conversationId}/recordingmetadata][%d] getConversationRecordingmetadataGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetConversationRecordingmetadataGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationRecordingmetadataGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

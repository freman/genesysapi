// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutRecordingKeyconfigurationReader is a Reader for the PutRecordingKeyconfiguration structure.
type PutRecordingKeyconfigurationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRecordingKeyconfigurationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRecordingKeyconfigurationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRecordingKeyconfigurationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRecordingKeyconfigurationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRecordingKeyconfigurationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRecordingKeyconfigurationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutRecordingKeyconfigurationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutRecordingKeyconfigurationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutRecordingKeyconfigurationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutRecordingKeyconfigurationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutRecordingKeyconfigurationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutRecordingKeyconfigurationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutRecordingKeyconfigurationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRecordingKeyconfigurationOK creates a PutRecordingKeyconfigurationOK with default headers values
func NewPutRecordingKeyconfigurationOK() *PutRecordingKeyconfigurationOK {
	return &PutRecordingKeyconfigurationOK{}
}

/*PutRecordingKeyconfigurationOK handles this case with default header values.

successful operation
*/
type PutRecordingKeyconfigurationOK struct {
	Payload *models.RecordingEncryptionConfiguration
}

func (o *PutRecordingKeyconfigurationOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationOK  %+v", 200, o.Payload)
}

func (o *PutRecordingKeyconfigurationOK) GetPayload() *models.RecordingEncryptionConfiguration {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RecordingEncryptionConfiguration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationBadRequest creates a PutRecordingKeyconfigurationBadRequest with default headers values
func NewPutRecordingKeyconfigurationBadRequest() *PutRecordingKeyconfigurationBadRequest {
	return &PutRecordingKeyconfigurationBadRequest{}
}

/*PutRecordingKeyconfigurationBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutRecordingKeyconfigurationBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingKeyconfigurationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationBadRequest  %+v", 400, o.Payload)
}

func (o *PutRecordingKeyconfigurationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationUnauthorized creates a PutRecordingKeyconfigurationUnauthorized with default headers values
func NewPutRecordingKeyconfigurationUnauthorized() *PutRecordingKeyconfigurationUnauthorized {
	return &PutRecordingKeyconfigurationUnauthorized{}
}

/*PutRecordingKeyconfigurationUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutRecordingKeyconfigurationUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingKeyconfigurationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRecordingKeyconfigurationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationForbidden creates a PutRecordingKeyconfigurationForbidden with default headers values
func NewPutRecordingKeyconfigurationForbidden() *PutRecordingKeyconfigurationForbidden {
	return &PutRecordingKeyconfigurationForbidden{}
}

/*PutRecordingKeyconfigurationForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutRecordingKeyconfigurationForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingKeyconfigurationForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationForbidden  %+v", 403, o.Payload)
}

func (o *PutRecordingKeyconfigurationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationNotFound creates a PutRecordingKeyconfigurationNotFound with default headers values
func NewPutRecordingKeyconfigurationNotFound() *PutRecordingKeyconfigurationNotFound {
	return &PutRecordingKeyconfigurationNotFound{}
}

/*PutRecordingKeyconfigurationNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutRecordingKeyconfigurationNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingKeyconfigurationNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationNotFound  %+v", 404, o.Payload)
}

func (o *PutRecordingKeyconfigurationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationRequestTimeout creates a PutRecordingKeyconfigurationRequestTimeout with default headers values
func NewPutRecordingKeyconfigurationRequestTimeout() *PutRecordingKeyconfigurationRequestTimeout {
	return &PutRecordingKeyconfigurationRequestTimeout{}
}

/*PutRecordingKeyconfigurationRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutRecordingKeyconfigurationRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingKeyconfigurationRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutRecordingKeyconfigurationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationRequestEntityTooLarge creates a PutRecordingKeyconfigurationRequestEntityTooLarge with default headers values
func NewPutRecordingKeyconfigurationRequestEntityTooLarge() *PutRecordingKeyconfigurationRequestEntityTooLarge {
	return &PutRecordingKeyconfigurationRequestEntityTooLarge{}
}

/*PutRecordingKeyconfigurationRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutRecordingKeyconfigurationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingKeyconfigurationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutRecordingKeyconfigurationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationUnsupportedMediaType creates a PutRecordingKeyconfigurationUnsupportedMediaType with default headers values
func NewPutRecordingKeyconfigurationUnsupportedMediaType() *PutRecordingKeyconfigurationUnsupportedMediaType {
	return &PutRecordingKeyconfigurationUnsupportedMediaType{}
}

/*PutRecordingKeyconfigurationUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutRecordingKeyconfigurationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingKeyconfigurationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutRecordingKeyconfigurationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationTooManyRequests creates a PutRecordingKeyconfigurationTooManyRequests with default headers values
func NewPutRecordingKeyconfigurationTooManyRequests() *PutRecordingKeyconfigurationTooManyRequests {
	return &PutRecordingKeyconfigurationTooManyRequests{}
}

/*PutRecordingKeyconfigurationTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutRecordingKeyconfigurationTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingKeyconfigurationTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutRecordingKeyconfigurationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationInternalServerError creates a PutRecordingKeyconfigurationInternalServerError with default headers values
func NewPutRecordingKeyconfigurationInternalServerError() *PutRecordingKeyconfigurationInternalServerError {
	return &PutRecordingKeyconfigurationInternalServerError{}
}

/*PutRecordingKeyconfigurationInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutRecordingKeyconfigurationInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingKeyconfigurationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRecordingKeyconfigurationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationServiceUnavailable creates a PutRecordingKeyconfigurationServiceUnavailable with default headers values
func NewPutRecordingKeyconfigurationServiceUnavailable() *PutRecordingKeyconfigurationServiceUnavailable {
	return &PutRecordingKeyconfigurationServiceUnavailable{}
}

/*PutRecordingKeyconfigurationServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutRecordingKeyconfigurationServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingKeyconfigurationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutRecordingKeyconfigurationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationGatewayTimeout creates a PutRecordingKeyconfigurationGatewayTimeout with default headers values
func NewPutRecordingKeyconfigurationGatewayTimeout() *PutRecordingKeyconfigurationGatewayTimeout {
	return &PutRecordingKeyconfigurationGatewayTimeout{}
}

/*PutRecordingKeyconfigurationGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutRecordingKeyconfigurationGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingKeyconfigurationGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutRecordingKeyconfigurationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

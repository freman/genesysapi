// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutRecordingKeyconfigurationReader is a Reader for the PutRecordingKeyconfiguration structure.
type PutRecordingKeyconfigurationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRecordingKeyconfigurationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRecordingKeyconfigurationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRecordingKeyconfigurationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRecordingKeyconfigurationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRecordingKeyconfigurationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRecordingKeyconfigurationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutRecordingKeyconfigurationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutRecordingKeyconfigurationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutRecordingKeyconfigurationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutRecordingKeyconfigurationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutRecordingKeyconfigurationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutRecordingKeyconfigurationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutRecordingKeyconfigurationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRecordingKeyconfigurationOK creates a PutRecordingKeyconfigurationOK with default headers values
func NewPutRecordingKeyconfigurationOK() *PutRecordingKeyconfigurationOK {
	return &PutRecordingKeyconfigurationOK{}
}

/*
PutRecordingKeyconfigurationOK describes a response with status code 200, with default header values.

successful operation
*/
type PutRecordingKeyconfigurationOK struct {
	Payload *models.RecordingEncryptionConfiguration
}

// IsSuccess returns true when this put recording keyconfiguration o k response has a 2xx status code
func (o *PutRecordingKeyconfigurationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put recording keyconfiguration o k response has a 3xx status code
func (o *PutRecordingKeyconfigurationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording keyconfiguration o k response has a 4xx status code
func (o *PutRecordingKeyconfigurationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put recording keyconfiguration o k response has a 5xx status code
func (o *PutRecordingKeyconfigurationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording keyconfiguration o k response a status code equal to that given
func (o *PutRecordingKeyconfigurationOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutRecordingKeyconfigurationOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationOK  %+v", 200, o.Payload)
}

func (o *PutRecordingKeyconfigurationOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationOK  %+v", 200, o.Payload)
}

func (o *PutRecordingKeyconfigurationOK) GetPayload() *models.RecordingEncryptionConfiguration {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RecordingEncryptionConfiguration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationBadRequest creates a PutRecordingKeyconfigurationBadRequest with default headers values
func NewPutRecordingKeyconfigurationBadRequest() *PutRecordingKeyconfigurationBadRequest {
	return &PutRecordingKeyconfigurationBadRequest{}
}

/*
PutRecordingKeyconfigurationBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutRecordingKeyconfigurationBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording keyconfiguration bad request response has a 2xx status code
func (o *PutRecordingKeyconfigurationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording keyconfiguration bad request response has a 3xx status code
func (o *PutRecordingKeyconfigurationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording keyconfiguration bad request response has a 4xx status code
func (o *PutRecordingKeyconfigurationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording keyconfiguration bad request response has a 5xx status code
func (o *PutRecordingKeyconfigurationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording keyconfiguration bad request response a status code equal to that given
func (o *PutRecordingKeyconfigurationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutRecordingKeyconfigurationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationBadRequest  %+v", 400, o.Payload)
}

func (o *PutRecordingKeyconfigurationBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationBadRequest  %+v", 400, o.Payload)
}

func (o *PutRecordingKeyconfigurationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationUnauthorized creates a PutRecordingKeyconfigurationUnauthorized with default headers values
func NewPutRecordingKeyconfigurationUnauthorized() *PutRecordingKeyconfigurationUnauthorized {
	return &PutRecordingKeyconfigurationUnauthorized{}
}

/*
PutRecordingKeyconfigurationUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutRecordingKeyconfigurationUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording keyconfiguration unauthorized response has a 2xx status code
func (o *PutRecordingKeyconfigurationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording keyconfiguration unauthorized response has a 3xx status code
func (o *PutRecordingKeyconfigurationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording keyconfiguration unauthorized response has a 4xx status code
func (o *PutRecordingKeyconfigurationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording keyconfiguration unauthorized response has a 5xx status code
func (o *PutRecordingKeyconfigurationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording keyconfiguration unauthorized response a status code equal to that given
func (o *PutRecordingKeyconfigurationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutRecordingKeyconfigurationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRecordingKeyconfigurationUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRecordingKeyconfigurationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationForbidden creates a PutRecordingKeyconfigurationForbidden with default headers values
func NewPutRecordingKeyconfigurationForbidden() *PutRecordingKeyconfigurationForbidden {
	return &PutRecordingKeyconfigurationForbidden{}
}

/*
PutRecordingKeyconfigurationForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutRecordingKeyconfigurationForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording keyconfiguration forbidden response has a 2xx status code
func (o *PutRecordingKeyconfigurationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording keyconfiguration forbidden response has a 3xx status code
func (o *PutRecordingKeyconfigurationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording keyconfiguration forbidden response has a 4xx status code
func (o *PutRecordingKeyconfigurationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording keyconfiguration forbidden response has a 5xx status code
func (o *PutRecordingKeyconfigurationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording keyconfiguration forbidden response a status code equal to that given
func (o *PutRecordingKeyconfigurationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutRecordingKeyconfigurationForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationForbidden  %+v", 403, o.Payload)
}

func (o *PutRecordingKeyconfigurationForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationForbidden  %+v", 403, o.Payload)
}

func (o *PutRecordingKeyconfigurationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationNotFound creates a PutRecordingKeyconfigurationNotFound with default headers values
func NewPutRecordingKeyconfigurationNotFound() *PutRecordingKeyconfigurationNotFound {
	return &PutRecordingKeyconfigurationNotFound{}
}

/*
PutRecordingKeyconfigurationNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutRecordingKeyconfigurationNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording keyconfiguration not found response has a 2xx status code
func (o *PutRecordingKeyconfigurationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording keyconfiguration not found response has a 3xx status code
func (o *PutRecordingKeyconfigurationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording keyconfiguration not found response has a 4xx status code
func (o *PutRecordingKeyconfigurationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording keyconfiguration not found response has a 5xx status code
func (o *PutRecordingKeyconfigurationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording keyconfiguration not found response a status code equal to that given
func (o *PutRecordingKeyconfigurationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutRecordingKeyconfigurationNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationNotFound  %+v", 404, o.Payload)
}

func (o *PutRecordingKeyconfigurationNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationNotFound  %+v", 404, o.Payload)
}

func (o *PutRecordingKeyconfigurationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationRequestTimeout creates a PutRecordingKeyconfigurationRequestTimeout with default headers values
func NewPutRecordingKeyconfigurationRequestTimeout() *PutRecordingKeyconfigurationRequestTimeout {
	return &PutRecordingKeyconfigurationRequestTimeout{}
}

/*
PutRecordingKeyconfigurationRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutRecordingKeyconfigurationRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording keyconfiguration request timeout response has a 2xx status code
func (o *PutRecordingKeyconfigurationRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording keyconfiguration request timeout response has a 3xx status code
func (o *PutRecordingKeyconfigurationRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording keyconfiguration request timeout response has a 4xx status code
func (o *PutRecordingKeyconfigurationRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording keyconfiguration request timeout response has a 5xx status code
func (o *PutRecordingKeyconfigurationRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording keyconfiguration request timeout response a status code equal to that given
func (o *PutRecordingKeyconfigurationRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutRecordingKeyconfigurationRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutRecordingKeyconfigurationRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutRecordingKeyconfigurationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationRequestEntityTooLarge creates a PutRecordingKeyconfigurationRequestEntityTooLarge with default headers values
func NewPutRecordingKeyconfigurationRequestEntityTooLarge() *PutRecordingKeyconfigurationRequestEntityTooLarge {
	return &PutRecordingKeyconfigurationRequestEntityTooLarge{}
}

/*
PutRecordingKeyconfigurationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PutRecordingKeyconfigurationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording keyconfiguration request entity too large response has a 2xx status code
func (o *PutRecordingKeyconfigurationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording keyconfiguration request entity too large response has a 3xx status code
func (o *PutRecordingKeyconfigurationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording keyconfiguration request entity too large response has a 4xx status code
func (o *PutRecordingKeyconfigurationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording keyconfiguration request entity too large response has a 5xx status code
func (o *PutRecordingKeyconfigurationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording keyconfiguration request entity too large response a status code equal to that given
func (o *PutRecordingKeyconfigurationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutRecordingKeyconfigurationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutRecordingKeyconfigurationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutRecordingKeyconfigurationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationUnsupportedMediaType creates a PutRecordingKeyconfigurationUnsupportedMediaType with default headers values
func NewPutRecordingKeyconfigurationUnsupportedMediaType() *PutRecordingKeyconfigurationUnsupportedMediaType {
	return &PutRecordingKeyconfigurationUnsupportedMediaType{}
}

/*
PutRecordingKeyconfigurationUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutRecordingKeyconfigurationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording keyconfiguration unsupported media type response has a 2xx status code
func (o *PutRecordingKeyconfigurationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording keyconfiguration unsupported media type response has a 3xx status code
func (o *PutRecordingKeyconfigurationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording keyconfiguration unsupported media type response has a 4xx status code
func (o *PutRecordingKeyconfigurationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording keyconfiguration unsupported media type response has a 5xx status code
func (o *PutRecordingKeyconfigurationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording keyconfiguration unsupported media type response a status code equal to that given
func (o *PutRecordingKeyconfigurationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutRecordingKeyconfigurationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutRecordingKeyconfigurationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutRecordingKeyconfigurationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationTooManyRequests creates a PutRecordingKeyconfigurationTooManyRequests with default headers values
func NewPutRecordingKeyconfigurationTooManyRequests() *PutRecordingKeyconfigurationTooManyRequests {
	return &PutRecordingKeyconfigurationTooManyRequests{}
}

/*
PutRecordingKeyconfigurationTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutRecordingKeyconfigurationTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording keyconfiguration too many requests response has a 2xx status code
func (o *PutRecordingKeyconfigurationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording keyconfiguration too many requests response has a 3xx status code
func (o *PutRecordingKeyconfigurationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording keyconfiguration too many requests response has a 4xx status code
func (o *PutRecordingKeyconfigurationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording keyconfiguration too many requests response has a 5xx status code
func (o *PutRecordingKeyconfigurationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording keyconfiguration too many requests response a status code equal to that given
func (o *PutRecordingKeyconfigurationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutRecordingKeyconfigurationTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutRecordingKeyconfigurationTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutRecordingKeyconfigurationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationInternalServerError creates a PutRecordingKeyconfigurationInternalServerError with default headers values
func NewPutRecordingKeyconfigurationInternalServerError() *PutRecordingKeyconfigurationInternalServerError {
	return &PutRecordingKeyconfigurationInternalServerError{}
}

/*
PutRecordingKeyconfigurationInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutRecordingKeyconfigurationInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording keyconfiguration internal server error response has a 2xx status code
func (o *PutRecordingKeyconfigurationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording keyconfiguration internal server error response has a 3xx status code
func (o *PutRecordingKeyconfigurationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording keyconfiguration internal server error response has a 4xx status code
func (o *PutRecordingKeyconfigurationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put recording keyconfiguration internal server error response has a 5xx status code
func (o *PutRecordingKeyconfigurationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put recording keyconfiguration internal server error response a status code equal to that given
func (o *PutRecordingKeyconfigurationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutRecordingKeyconfigurationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRecordingKeyconfigurationInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRecordingKeyconfigurationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationServiceUnavailable creates a PutRecordingKeyconfigurationServiceUnavailable with default headers values
func NewPutRecordingKeyconfigurationServiceUnavailable() *PutRecordingKeyconfigurationServiceUnavailable {
	return &PutRecordingKeyconfigurationServiceUnavailable{}
}

/*
PutRecordingKeyconfigurationServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutRecordingKeyconfigurationServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording keyconfiguration service unavailable response has a 2xx status code
func (o *PutRecordingKeyconfigurationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording keyconfiguration service unavailable response has a 3xx status code
func (o *PutRecordingKeyconfigurationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording keyconfiguration service unavailable response has a 4xx status code
func (o *PutRecordingKeyconfigurationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put recording keyconfiguration service unavailable response has a 5xx status code
func (o *PutRecordingKeyconfigurationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put recording keyconfiguration service unavailable response a status code equal to that given
func (o *PutRecordingKeyconfigurationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutRecordingKeyconfigurationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutRecordingKeyconfigurationServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutRecordingKeyconfigurationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingKeyconfigurationGatewayTimeout creates a PutRecordingKeyconfigurationGatewayTimeout with default headers values
func NewPutRecordingKeyconfigurationGatewayTimeout() *PutRecordingKeyconfigurationGatewayTimeout {
	return &PutRecordingKeyconfigurationGatewayTimeout{}
}

/*
PutRecordingKeyconfigurationGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutRecordingKeyconfigurationGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording keyconfiguration gateway timeout response has a 2xx status code
func (o *PutRecordingKeyconfigurationGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording keyconfiguration gateway timeout response has a 3xx status code
func (o *PutRecordingKeyconfigurationGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording keyconfiguration gateway timeout response has a 4xx status code
func (o *PutRecordingKeyconfigurationGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put recording keyconfiguration gateway timeout response has a 5xx status code
func (o *PutRecordingKeyconfigurationGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put recording keyconfiguration gateway timeout response a status code equal to that given
func (o *PutRecordingKeyconfigurationGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutRecordingKeyconfigurationGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutRecordingKeyconfigurationGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}][%d] putRecordingKeyconfigurationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutRecordingKeyconfigurationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingKeyconfigurationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrphanrecordingMediaParams creates a new GetOrphanrecordingMediaParams object
// with the default values initialized.
func NewGetOrphanrecordingMediaParams() *GetOrphanrecordingMediaParams {
	var (
		chatFormatIDDefault    = string("ZIP")
		downloadDefault        = bool(false)
		emailFormatIDDefault   = string("EML")
		formatIDDefault        = string("WEBM")
		messageFormatIDDefault = string("ZIP")
	)
	return &GetOrphanrecordingMediaParams{
		ChatFormatID:    &chatFormatIDDefault,
		Download:        &downloadDefault,
		EmailFormatID:   &emailFormatIDDefault,
		FormatID:        &formatIDDefault,
		MessageFormatID: &messageFormatIDDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrphanrecordingMediaParamsWithTimeout creates a new GetOrphanrecordingMediaParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOrphanrecordingMediaParamsWithTimeout(timeout time.Duration) *GetOrphanrecordingMediaParams {
	var (
		chatFormatIDDefault    = string("ZIP")
		downloadDefault        = bool(false)
		emailFormatIDDefault   = string("EML")
		formatIDDefault        = string("WEBM")
		messageFormatIDDefault = string("ZIP")
	)
	return &GetOrphanrecordingMediaParams{
		ChatFormatID:    &chatFormatIDDefault,
		Download:        &downloadDefault,
		EmailFormatID:   &emailFormatIDDefault,
		FormatID:        &formatIDDefault,
		MessageFormatID: &messageFormatIDDefault,

		timeout: timeout,
	}
}

// NewGetOrphanrecordingMediaParamsWithContext creates a new GetOrphanrecordingMediaParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOrphanrecordingMediaParamsWithContext(ctx context.Context) *GetOrphanrecordingMediaParams {
	var (
		chatFormatIdDefault    = string("ZIP")
		downloadDefault        = bool(false)
		emailFormatIdDefault   = string("EML")
		formatIdDefault        = string("WEBM")
		messageFormatIdDefault = string("ZIP")
	)
	return &GetOrphanrecordingMediaParams{
		ChatFormatID:    &chatFormatIdDefault,
		Download:        &downloadDefault,
		EmailFormatID:   &emailFormatIdDefault,
		FormatID:        &formatIdDefault,
		MessageFormatID: &messageFormatIdDefault,

		Context: ctx,
	}
}

// NewGetOrphanrecordingMediaParamsWithHTTPClient creates a new GetOrphanrecordingMediaParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOrphanrecordingMediaParamsWithHTTPClient(client *http.Client) *GetOrphanrecordingMediaParams {
	var (
		chatFormatIdDefault    = string("ZIP")
		downloadDefault        = bool(false)
		emailFormatIdDefault   = string("EML")
		formatIdDefault        = string("WEBM")
		messageFormatIdDefault = string("ZIP")
	)
	return &GetOrphanrecordingMediaParams{
		ChatFormatID:    &chatFormatIdDefault,
		Download:        &downloadDefault,
		EmailFormatID:   &emailFormatIdDefault,
		FormatID:        &formatIdDefault,
		MessageFormatID: &messageFormatIdDefault,
		HTTPClient:      client,
	}
}

/*GetOrphanrecordingMediaParams contains all the parameters to send to the API endpoint
for the get orphanrecording media operation typically these are written to a http.Request
*/
type GetOrphanrecordingMediaParams struct {

	/*ChatFormatID
	  The desired media format when downloading a chat recording.

	*/
	ChatFormatID *string
	/*Download
	  requesting a download format of the recording

	*/
	Download *bool
	/*EmailFormatID
	  The desired media format when downloading an email recording.

	*/
	EmailFormatID *string
	/*FileName
	  the name of the downloaded fileName

	*/
	FileName *string
	/*FormatID
	  The desired media format.

	*/
	FormatID *string
	/*Locale
	  The locale for the requested file when downloading, as an ISO 639-1 code

	*/
	Locale *string
	/*MessageFormatID
	  The desired media format when downloading a message recording.

	*/
	MessageFormatID *string
	/*OrphanID
	  Orphan ID

	*/
	OrphanID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) WithTimeout(timeout time.Duration) *GetOrphanrecordingMediaParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) WithContext(ctx context.Context) *GetOrphanrecordingMediaParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) WithHTTPClient(client *http.Client) *GetOrphanrecordingMediaParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChatFormatID adds the chatFormatID to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) WithChatFormatID(chatFormatID *string) *GetOrphanrecordingMediaParams {
	o.SetChatFormatID(chatFormatID)
	return o
}

// SetChatFormatID adds the chatFormatId to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) SetChatFormatID(chatFormatID *string) {
	o.ChatFormatID = chatFormatID
}

// WithDownload adds the download to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) WithDownload(download *bool) *GetOrphanrecordingMediaParams {
	o.SetDownload(download)
	return o
}

// SetDownload adds the download to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) SetDownload(download *bool) {
	o.Download = download
}

// WithEmailFormatID adds the emailFormatID to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) WithEmailFormatID(emailFormatID *string) *GetOrphanrecordingMediaParams {
	o.SetEmailFormatID(emailFormatID)
	return o
}

// SetEmailFormatID adds the emailFormatId to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) SetEmailFormatID(emailFormatID *string) {
	o.EmailFormatID = emailFormatID
}

// WithFileName adds the fileName to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) WithFileName(fileName *string) *GetOrphanrecordingMediaParams {
	o.SetFileName(fileName)
	return o
}

// SetFileName adds the fileName to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) SetFileName(fileName *string) {
	o.FileName = fileName
}

// WithFormatID adds the formatID to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) WithFormatID(formatID *string) *GetOrphanrecordingMediaParams {
	o.SetFormatID(formatID)
	return o
}

// SetFormatID adds the formatId to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) SetFormatID(formatID *string) {
	o.FormatID = formatID
}

// WithLocale adds the locale to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) WithLocale(locale *string) *GetOrphanrecordingMediaParams {
	o.SetLocale(locale)
	return o
}

// SetLocale adds the locale to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) SetLocale(locale *string) {
	o.Locale = locale
}

// WithMessageFormatID adds the messageFormatID to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) WithMessageFormatID(messageFormatID *string) *GetOrphanrecordingMediaParams {
	o.SetMessageFormatID(messageFormatID)
	return o
}

// SetMessageFormatID adds the messageFormatId to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) SetMessageFormatID(messageFormatID *string) {
	o.MessageFormatID = messageFormatID
}

// WithOrphanID adds the orphanID to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) WithOrphanID(orphanID string) *GetOrphanrecordingMediaParams {
	o.SetOrphanID(orphanID)
	return o
}

// SetOrphanID adds the orphanId to the get orphanrecording media params
func (o *GetOrphanrecordingMediaParams) SetOrphanID(orphanID string) {
	o.OrphanID = orphanID
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrphanrecordingMediaParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ChatFormatID != nil {

		// query param chatFormatId
		var qrChatFormatID string
		if o.ChatFormatID != nil {
			qrChatFormatID = *o.ChatFormatID
		}
		qChatFormatID := qrChatFormatID
		if qChatFormatID != "" {
			if err := r.SetQueryParam("chatFormatId", qChatFormatID); err != nil {
				return err
			}
		}

	}

	if o.Download != nil {

		// query param download
		var qrDownload bool
		if o.Download != nil {
			qrDownload = *o.Download
		}
		qDownload := swag.FormatBool(qrDownload)
		if qDownload != "" {
			if err := r.SetQueryParam("download", qDownload); err != nil {
				return err
			}
		}

	}

	if o.EmailFormatID != nil {

		// query param emailFormatId
		var qrEmailFormatID string
		if o.EmailFormatID != nil {
			qrEmailFormatID = *o.EmailFormatID
		}
		qEmailFormatID := qrEmailFormatID
		if qEmailFormatID != "" {
			if err := r.SetQueryParam("emailFormatId", qEmailFormatID); err != nil {
				return err
			}
		}

	}

	if o.FileName != nil {

		// query param fileName
		var qrFileName string
		if o.FileName != nil {
			qrFileName = *o.FileName
		}
		qFileName := qrFileName
		if qFileName != "" {
			if err := r.SetQueryParam("fileName", qFileName); err != nil {
				return err
			}
		}

	}

	if o.FormatID != nil {

		// query param formatId
		var qrFormatID string
		if o.FormatID != nil {
			qrFormatID = *o.FormatID
		}
		qFormatID := qrFormatID
		if qFormatID != "" {
			if err := r.SetQueryParam("formatId", qFormatID); err != nil {
				return err
			}
		}

	}

	if o.Locale != nil {

		// query param locale
		var qrLocale string
		if o.Locale != nil {
			qrLocale = *o.Locale
		}
		qLocale := qrLocale
		if qLocale != "" {
			if err := r.SetQueryParam("locale", qLocale); err != nil {
				return err
			}
		}

	}

	if o.MessageFormatID != nil {

		// query param messageFormatId
		var qrMessageFormatID string
		if o.MessageFormatID != nil {
			qrMessageFormatID = *o.MessageFormatID
		}
		qMessageFormatID := qrMessageFormatID
		if qMessageFormatID != "" {
			if err := r.SetQueryParam("messageFormatId", qMessageFormatID); err != nil {
				return err
			}
		}

	}

	// path param orphanId
	if err := r.SetPathParam("orphanId", o.OrphanID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

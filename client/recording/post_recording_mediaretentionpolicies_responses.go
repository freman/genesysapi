// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostRecordingMediaretentionpoliciesReader is a Reader for the PostRecordingMediaretentionpolicies structure.
type PostRecordingMediaretentionpoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRecordingMediaretentionpoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostRecordingMediaretentionpoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRecordingMediaretentionpoliciesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostRecordingMediaretentionpoliciesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostRecordingMediaretentionpoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRecordingMediaretentionpoliciesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostRecordingMediaretentionpoliciesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostRecordingMediaretentionpoliciesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostRecordingMediaretentionpoliciesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostRecordingMediaretentionpoliciesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostRecordingMediaretentionpoliciesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostRecordingMediaretentionpoliciesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostRecordingMediaretentionpoliciesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRecordingMediaretentionpoliciesOK creates a PostRecordingMediaretentionpoliciesOK with default headers values
func NewPostRecordingMediaretentionpoliciesOK() *PostRecordingMediaretentionpoliciesOK {
	return &PostRecordingMediaretentionpoliciesOK{}
}

/*
PostRecordingMediaretentionpoliciesOK describes a response with status code 200, with default header values.

successful operation
*/
type PostRecordingMediaretentionpoliciesOK struct {
	Payload *models.Policy
}

// IsSuccess returns true when this post recording mediaretentionpolicies o k response has a 2xx status code
func (o *PostRecordingMediaretentionpoliciesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post recording mediaretentionpolicies o k response has a 3xx status code
func (o *PostRecordingMediaretentionpoliciesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording mediaretentionpolicies o k response has a 4xx status code
func (o *PostRecordingMediaretentionpoliciesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post recording mediaretentionpolicies o k response has a 5xx status code
func (o *PostRecordingMediaretentionpoliciesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording mediaretentionpolicies o k response a status code equal to that given
func (o *PostRecordingMediaretentionpoliciesOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostRecordingMediaretentionpoliciesOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesOK  %+v", 200, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesOK) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesOK  %+v", 200, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesOK) GetPayload() *models.Policy {
	return o.Payload
}

func (o *PostRecordingMediaretentionpoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Policy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingMediaretentionpoliciesBadRequest creates a PostRecordingMediaretentionpoliciesBadRequest with default headers values
func NewPostRecordingMediaretentionpoliciesBadRequest() *PostRecordingMediaretentionpoliciesBadRequest {
	return &PostRecordingMediaretentionpoliciesBadRequest{}
}

/*
PostRecordingMediaretentionpoliciesBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostRecordingMediaretentionpoliciesBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording mediaretentionpolicies bad request response has a 2xx status code
func (o *PostRecordingMediaretentionpoliciesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording mediaretentionpolicies bad request response has a 3xx status code
func (o *PostRecordingMediaretentionpoliciesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording mediaretentionpolicies bad request response has a 4xx status code
func (o *PostRecordingMediaretentionpoliciesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording mediaretentionpolicies bad request response has a 5xx status code
func (o *PostRecordingMediaretentionpoliciesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording mediaretentionpolicies bad request response a status code equal to that given
func (o *PostRecordingMediaretentionpoliciesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostRecordingMediaretentionpoliciesBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingMediaretentionpoliciesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingMediaretentionpoliciesUnauthorized creates a PostRecordingMediaretentionpoliciesUnauthorized with default headers values
func NewPostRecordingMediaretentionpoliciesUnauthorized() *PostRecordingMediaretentionpoliciesUnauthorized {
	return &PostRecordingMediaretentionpoliciesUnauthorized{}
}

/*
PostRecordingMediaretentionpoliciesUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostRecordingMediaretentionpoliciesUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording mediaretentionpolicies unauthorized response has a 2xx status code
func (o *PostRecordingMediaretentionpoliciesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording mediaretentionpolicies unauthorized response has a 3xx status code
func (o *PostRecordingMediaretentionpoliciesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording mediaretentionpolicies unauthorized response has a 4xx status code
func (o *PostRecordingMediaretentionpoliciesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording mediaretentionpolicies unauthorized response has a 5xx status code
func (o *PostRecordingMediaretentionpoliciesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording mediaretentionpolicies unauthorized response a status code equal to that given
func (o *PostRecordingMediaretentionpoliciesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostRecordingMediaretentionpoliciesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingMediaretentionpoliciesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingMediaretentionpoliciesForbidden creates a PostRecordingMediaretentionpoliciesForbidden with default headers values
func NewPostRecordingMediaretentionpoliciesForbidden() *PostRecordingMediaretentionpoliciesForbidden {
	return &PostRecordingMediaretentionpoliciesForbidden{}
}

/*
PostRecordingMediaretentionpoliciesForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostRecordingMediaretentionpoliciesForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording mediaretentionpolicies forbidden response has a 2xx status code
func (o *PostRecordingMediaretentionpoliciesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording mediaretentionpolicies forbidden response has a 3xx status code
func (o *PostRecordingMediaretentionpoliciesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording mediaretentionpolicies forbidden response has a 4xx status code
func (o *PostRecordingMediaretentionpoliciesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording mediaretentionpolicies forbidden response has a 5xx status code
func (o *PostRecordingMediaretentionpoliciesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording mediaretentionpolicies forbidden response a status code equal to that given
func (o *PostRecordingMediaretentionpoliciesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostRecordingMediaretentionpoliciesForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesForbidden  %+v", 403, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesForbidden  %+v", 403, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingMediaretentionpoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingMediaretentionpoliciesNotFound creates a PostRecordingMediaretentionpoliciesNotFound with default headers values
func NewPostRecordingMediaretentionpoliciesNotFound() *PostRecordingMediaretentionpoliciesNotFound {
	return &PostRecordingMediaretentionpoliciesNotFound{}
}

/*
PostRecordingMediaretentionpoliciesNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostRecordingMediaretentionpoliciesNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording mediaretentionpolicies not found response has a 2xx status code
func (o *PostRecordingMediaretentionpoliciesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording mediaretentionpolicies not found response has a 3xx status code
func (o *PostRecordingMediaretentionpoliciesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording mediaretentionpolicies not found response has a 4xx status code
func (o *PostRecordingMediaretentionpoliciesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording mediaretentionpolicies not found response has a 5xx status code
func (o *PostRecordingMediaretentionpoliciesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording mediaretentionpolicies not found response a status code equal to that given
func (o *PostRecordingMediaretentionpoliciesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostRecordingMediaretentionpoliciesNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesNotFound  %+v", 404, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesNotFound  %+v", 404, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingMediaretentionpoliciesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingMediaretentionpoliciesRequestTimeout creates a PostRecordingMediaretentionpoliciesRequestTimeout with default headers values
func NewPostRecordingMediaretentionpoliciesRequestTimeout() *PostRecordingMediaretentionpoliciesRequestTimeout {
	return &PostRecordingMediaretentionpoliciesRequestTimeout{}
}

/*
PostRecordingMediaretentionpoliciesRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostRecordingMediaretentionpoliciesRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording mediaretentionpolicies request timeout response has a 2xx status code
func (o *PostRecordingMediaretentionpoliciesRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording mediaretentionpolicies request timeout response has a 3xx status code
func (o *PostRecordingMediaretentionpoliciesRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording mediaretentionpolicies request timeout response has a 4xx status code
func (o *PostRecordingMediaretentionpoliciesRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording mediaretentionpolicies request timeout response has a 5xx status code
func (o *PostRecordingMediaretentionpoliciesRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording mediaretentionpolicies request timeout response a status code equal to that given
func (o *PostRecordingMediaretentionpoliciesRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostRecordingMediaretentionpoliciesRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingMediaretentionpoliciesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingMediaretentionpoliciesRequestEntityTooLarge creates a PostRecordingMediaretentionpoliciesRequestEntityTooLarge with default headers values
func NewPostRecordingMediaretentionpoliciesRequestEntityTooLarge() *PostRecordingMediaretentionpoliciesRequestEntityTooLarge {
	return &PostRecordingMediaretentionpoliciesRequestEntityTooLarge{}
}

/*
PostRecordingMediaretentionpoliciesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PostRecordingMediaretentionpoliciesRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording mediaretentionpolicies request entity too large response has a 2xx status code
func (o *PostRecordingMediaretentionpoliciesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording mediaretentionpolicies request entity too large response has a 3xx status code
func (o *PostRecordingMediaretentionpoliciesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording mediaretentionpolicies request entity too large response has a 4xx status code
func (o *PostRecordingMediaretentionpoliciesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording mediaretentionpolicies request entity too large response has a 5xx status code
func (o *PostRecordingMediaretentionpoliciesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording mediaretentionpolicies request entity too large response a status code equal to that given
func (o *PostRecordingMediaretentionpoliciesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostRecordingMediaretentionpoliciesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingMediaretentionpoliciesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingMediaretentionpoliciesUnsupportedMediaType creates a PostRecordingMediaretentionpoliciesUnsupportedMediaType with default headers values
func NewPostRecordingMediaretentionpoliciesUnsupportedMediaType() *PostRecordingMediaretentionpoliciesUnsupportedMediaType {
	return &PostRecordingMediaretentionpoliciesUnsupportedMediaType{}
}

/*
PostRecordingMediaretentionpoliciesUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostRecordingMediaretentionpoliciesUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording mediaretentionpolicies unsupported media type response has a 2xx status code
func (o *PostRecordingMediaretentionpoliciesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording mediaretentionpolicies unsupported media type response has a 3xx status code
func (o *PostRecordingMediaretentionpoliciesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording mediaretentionpolicies unsupported media type response has a 4xx status code
func (o *PostRecordingMediaretentionpoliciesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording mediaretentionpolicies unsupported media type response has a 5xx status code
func (o *PostRecordingMediaretentionpoliciesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording mediaretentionpolicies unsupported media type response a status code equal to that given
func (o *PostRecordingMediaretentionpoliciesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostRecordingMediaretentionpoliciesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingMediaretentionpoliciesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingMediaretentionpoliciesTooManyRequests creates a PostRecordingMediaretentionpoliciesTooManyRequests with default headers values
func NewPostRecordingMediaretentionpoliciesTooManyRequests() *PostRecordingMediaretentionpoliciesTooManyRequests {
	return &PostRecordingMediaretentionpoliciesTooManyRequests{}
}

/*
PostRecordingMediaretentionpoliciesTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostRecordingMediaretentionpoliciesTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording mediaretentionpolicies too many requests response has a 2xx status code
func (o *PostRecordingMediaretentionpoliciesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording mediaretentionpolicies too many requests response has a 3xx status code
func (o *PostRecordingMediaretentionpoliciesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording mediaretentionpolicies too many requests response has a 4xx status code
func (o *PostRecordingMediaretentionpoliciesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording mediaretentionpolicies too many requests response has a 5xx status code
func (o *PostRecordingMediaretentionpoliciesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording mediaretentionpolicies too many requests response a status code equal to that given
func (o *PostRecordingMediaretentionpoliciesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostRecordingMediaretentionpoliciesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingMediaretentionpoliciesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingMediaretentionpoliciesInternalServerError creates a PostRecordingMediaretentionpoliciesInternalServerError with default headers values
func NewPostRecordingMediaretentionpoliciesInternalServerError() *PostRecordingMediaretentionpoliciesInternalServerError {
	return &PostRecordingMediaretentionpoliciesInternalServerError{}
}

/*
PostRecordingMediaretentionpoliciesInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostRecordingMediaretentionpoliciesInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording mediaretentionpolicies internal server error response has a 2xx status code
func (o *PostRecordingMediaretentionpoliciesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording mediaretentionpolicies internal server error response has a 3xx status code
func (o *PostRecordingMediaretentionpoliciesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording mediaretentionpolicies internal server error response has a 4xx status code
func (o *PostRecordingMediaretentionpoliciesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post recording mediaretentionpolicies internal server error response has a 5xx status code
func (o *PostRecordingMediaretentionpoliciesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post recording mediaretentionpolicies internal server error response a status code equal to that given
func (o *PostRecordingMediaretentionpoliciesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostRecordingMediaretentionpoliciesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingMediaretentionpoliciesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingMediaretentionpoliciesServiceUnavailable creates a PostRecordingMediaretentionpoliciesServiceUnavailable with default headers values
func NewPostRecordingMediaretentionpoliciesServiceUnavailable() *PostRecordingMediaretentionpoliciesServiceUnavailable {
	return &PostRecordingMediaretentionpoliciesServiceUnavailable{}
}

/*
PostRecordingMediaretentionpoliciesServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostRecordingMediaretentionpoliciesServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording mediaretentionpolicies service unavailable response has a 2xx status code
func (o *PostRecordingMediaretentionpoliciesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording mediaretentionpolicies service unavailable response has a 3xx status code
func (o *PostRecordingMediaretentionpoliciesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording mediaretentionpolicies service unavailable response has a 4xx status code
func (o *PostRecordingMediaretentionpoliciesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post recording mediaretentionpolicies service unavailable response has a 5xx status code
func (o *PostRecordingMediaretentionpoliciesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post recording mediaretentionpolicies service unavailable response a status code equal to that given
func (o *PostRecordingMediaretentionpoliciesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostRecordingMediaretentionpoliciesServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingMediaretentionpoliciesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingMediaretentionpoliciesGatewayTimeout creates a PostRecordingMediaretentionpoliciesGatewayTimeout with default headers values
func NewPostRecordingMediaretentionpoliciesGatewayTimeout() *PostRecordingMediaretentionpoliciesGatewayTimeout {
	return &PostRecordingMediaretentionpoliciesGatewayTimeout{}
}

/*
PostRecordingMediaretentionpoliciesGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostRecordingMediaretentionpoliciesGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording mediaretentionpolicies gateway timeout response has a 2xx status code
func (o *PostRecordingMediaretentionpoliciesGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording mediaretentionpolicies gateway timeout response has a 3xx status code
func (o *PostRecordingMediaretentionpoliciesGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording mediaretentionpolicies gateway timeout response has a 4xx status code
func (o *PostRecordingMediaretentionpoliciesGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post recording mediaretentionpolicies gateway timeout response has a 5xx status code
func (o *PostRecordingMediaretentionpoliciesGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post recording mediaretentionpolicies gateway timeout response a status code equal to that given
func (o *PostRecordingMediaretentionpoliciesGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostRecordingMediaretentionpoliciesGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/mediaretentionpolicies][%d] postRecordingMediaretentionpoliciesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostRecordingMediaretentionpoliciesGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingMediaretentionpoliciesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

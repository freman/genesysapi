// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutRecordingRecordingkeysRotationscheduleReader is a Reader for the PutRecordingRecordingkeysRotationschedule structure.
type PutRecordingRecordingkeysRotationscheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRecordingRecordingkeysRotationscheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRecordingRecordingkeysRotationscheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRecordingRecordingkeysRotationscheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRecordingRecordingkeysRotationscheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRecordingRecordingkeysRotationscheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRecordingRecordingkeysRotationscheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutRecordingRecordingkeysRotationscheduleUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutRecordingRecordingkeysRotationscheduleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutRecordingRecordingkeysRotationscheduleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutRecordingRecordingkeysRotationscheduleServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutRecordingRecordingkeysRotationscheduleGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRecordingRecordingkeysRotationscheduleOK creates a PutRecordingRecordingkeysRotationscheduleOK with default headers values
func NewPutRecordingRecordingkeysRotationscheduleOK() *PutRecordingRecordingkeysRotationscheduleOK {
	return &PutRecordingRecordingkeysRotationscheduleOK{}
}

/*PutRecordingRecordingkeysRotationscheduleOK handles this case with default header values.

successful operation
*/
type PutRecordingRecordingkeysRotationscheduleOK struct {
	Payload *models.KeyRotationSchedule
}

func (o *PutRecordingRecordingkeysRotationscheduleOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleOK  %+v", 200, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleOK) GetPayload() *models.KeyRotationSchedule {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KeyRotationSchedule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleBadRequest creates a PutRecordingRecordingkeysRotationscheduleBadRequest with default headers values
func NewPutRecordingRecordingkeysRotationscheduleBadRequest() *PutRecordingRecordingkeysRotationscheduleBadRequest {
	return &PutRecordingRecordingkeysRotationscheduleBadRequest{}
}

/*PutRecordingRecordingkeysRotationscheduleBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutRecordingRecordingkeysRotationscheduleBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingRecordingkeysRotationscheduleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleBadRequest  %+v", 400, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleUnauthorized creates a PutRecordingRecordingkeysRotationscheduleUnauthorized with default headers values
func NewPutRecordingRecordingkeysRotationscheduleUnauthorized() *PutRecordingRecordingkeysRotationscheduleUnauthorized {
	return &PutRecordingRecordingkeysRotationscheduleUnauthorized{}
}

/*PutRecordingRecordingkeysRotationscheduleUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutRecordingRecordingkeysRotationscheduleUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingRecordingkeysRotationscheduleUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleForbidden creates a PutRecordingRecordingkeysRotationscheduleForbidden with default headers values
func NewPutRecordingRecordingkeysRotationscheduleForbidden() *PutRecordingRecordingkeysRotationscheduleForbidden {
	return &PutRecordingRecordingkeysRotationscheduleForbidden{}
}

/*PutRecordingRecordingkeysRotationscheduleForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutRecordingRecordingkeysRotationscheduleForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingRecordingkeysRotationscheduleForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleForbidden  %+v", 403, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleNotFound creates a PutRecordingRecordingkeysRotationscheduleNotFound with default headers values
func NewPutRecordingRecordingkeysRotationscheduleNotFound() *PutRecordingRecordingkeysRotationscheduleNotFound {
	return &PutRecordingRecordingkeysRotationscheduleNotFound{}
}

/*PutRecordingRecordingkeysRotationscheduleNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutRecordingRecordingkeysRotationscheduleNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingRecordingkeysRotationscheduleNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleNotFound  %+v", 404, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge creates a PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge with default headers values
func NewPutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge() *PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge {
	return &PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge{}
}

/*PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleUnsupportedMediaType creates a PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType with default headers values
func NewPutRecordingRecordingkeysRotationscheduleUnsupportedMediaType() *PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType {
	return &PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType{}
}

/*PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleTooManyRequests creates a PutRecordingRecordingkeysRotationscheduleTooManyRequests with default headers values
func NewPutRecordingRecordingkeysRotationscheduleTooManyRequests() *PutRecordingRecordingkeysRotationscheduleTooManyRequests {
	return &PutRecordingRecordingkeysRotationscheduleTooManyRequests{}
}

/*PutRecordingRecordingkeysRotationscheduleTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PutRecordingRecordingkeysRotationscheduleTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingRecordingkeysRotationscheduleTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleInternalServerError creates a PutRecordingRecordingkeysRotationscheduleInternalServerError with default headers values
func NewPutRecordingRecordingkeysRotationscheduleInternalServerError() *PutRecordingRecordingkeysRotationscheduleInternalServerError {
	return &PutRecordingRecordingkeysRotationscheduleInternalServerError{}
}

/*PutRecordingRecordingkeysRotationscheduleInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutRecordingRecordingkeysRotationscheduleInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingRecordingkeysRotationscheduleInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleServiceUnavailable creates a PutRecordingRecordingkeysRotationscheduleServiceUnavailable with default headers values
func NewPutRecordingRecordingkeysRotationscheduleServiceUnavailable() *PutRecordingRecordingkeysRotationscheduleServiceUnavailable {
	return &PutRecordingRecordingkeysRotationscheduleServiceUnavailable{}
}

/*PutRecordingRecordingkeysRotationscheduleServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutRecordingRecordingkeysRotationscheduleServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingRecordingkeysRotationscheduleServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleGatewayTimeout creates a PutRecordingRecordingkeysRotationscheduleGatewayTimeout with default headers values
func NewPutRecordingRecordingkeysRotationscheduleGatewayTimeout() *PutRecordingRecordingkeysRotationscheduleGatewayTimeout {
	return &PutRecordingRecordingkeysRotationscheduleGatewayTimeout{}
}

/*PutRecordingRecordingkeysRotationscheduleGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutRecordingRecordingkeysRotationscheduleGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingRecordingkeysRotationscheduleGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutRecordingRecordingkeysRotationscheduleReader is a Reader for the PutRecordingRecordingkeysRotationschedule structure.
type PutRecordingRecordingkeysRotationscheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRecordingRecordingkeysRotationscheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRecordingRecordingkeysRotationscheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRecordingRecordingkeysRotationscheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRecordingRecordingkeysRotationscheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRecordingRecordingkeysRotationscheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRecordingRecordingkeysRotationscheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutRecordingRecordingkeysRotationscheduleRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutRecordingRecordingkeysRotationscheduleUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutRecordingRecordingkeysRotationscheduleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutRecordingRecordingkeysRotationscheduleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutRecordingRecordingkeysRotationscheduleServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutRecordingRecordingkeysRotationscheduleGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRecordingRecordingkeysRotationscheduleOK creates a PutRecordingRecordingkeysRotationscheduleOK with default headers values
func NewPutRecordingRecordingkeysRotationscheduleOK() *PutRecordingRecordingkeysRotationscheduleOK {
	return &PutRecordingRecordingkeysRotationscheduleOK{}
}

/*
PutRecordingRecordingkeysRotationscheduleOK describes a response with status code 200, with default header values.

successful operation
*/
type PutRecordingRecordingkeysRotationscheduleOK struct {
	Payload *models.KeyRotationSchedule
}

// IsSuccess returns true when this put recording recordingkeys rotationschedule o k response has a 2xx status code
func (o *PutRecordingRecordingkeysRotationscheduleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put recording recordingkeys rotationschedule o k response has a 3xx status code
func (o *PutRecordingRecordingkeysRotationscheduleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording recordingkeys rotationschedule o k response has a 4xx status code
func (o *PutRecordingRecordingkeysRotationscheduleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put recording recordingkeys rotationschedule o k response has a 5xx status code
func (o *PutRecordingRecordingkeysRotationscheduleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording recordingkeys rotationschedule o k response a status code equal to that given
func (o *PutRecordingRecordingkeysRotationscheduleOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutRecordingRecordingkeysRotationscheduleOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleOK  %+v", 200, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleOK  %+v", 200, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleOK) GetPayload() *models.KeyRotationSchedule {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KeyRotationSchedule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleBadRequest creates a PutRecordingRecordingkeysRotationscheduleBadRequest with default headers values
func NewPutRecordingRecordingkeysRotationscheduleBadRequest() *PutRecordingRecordingkeysRotationscheduleBadRequest {
	return &PutRecordingRecordingkeysRotationscheduleBadRequest{}
}

/*
PutRecordingRecordingkeysRotationscheduleBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutRecordingRecordingkeysRotationscheduleBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording recordingkeys rotationschedule bad request response has a 2xx status code
func (o *PutRecordingRecordingkeysRotationscheduleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording recordingkeys rotationschedule bad request response has a 3xx status code
func (o *PutRecordingRecordingkeysRotationscheduleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording recordingkeys rotationschedule bad request response has a 4xx status code
func (o *PutRecordingRecordingkeysRotationscheduleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording recordingkeys rotationschedule bad request response has a 5xx status code
func (o *PutRecordingRecordingkeysRotationscheduleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording recordingkeys rotationschedule bad request response a status code equal to that given
func (o *PutRecordingRecordingkeysRotationscheduleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutRecordingRecordingkeysRotationscheduleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleBadRequest  %+v", 400, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleBadRequest  %+v", 400, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleUnauthorized creates a PutRecordingRecordingkeysRotationscheduleUnauthorized with default headers values
func NewPutRecordingRecordingkeysRotationscheduleUnauthorized() *PutRecordingRecordingkeysRotationscheduleUnauthorized {
	return &PutRecordingRecordingkeysRotationscheduleUnauthorized{}
}

/*
PutRecordingRecordingkeysRotationscheduleUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutRecordingRecordingkeysRotationscheduleUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording recordingkeys rotationschedule unauthorized response has a 2xx status code
func (o *PutRecordingRecordingkeysRotationscheduleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording recordingkeys rotationschedule unauthorized response has a 3xx status code
func (o *PutRecordingRecordingkeysRotationscheduleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording recordingkeys rotationschedule unauthorized response has a 4xx status code
func (o *PutRecordingRecordingkeysRotationscheduleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording recordingkeys rotationschedule unauthorized response has a 5xx status code
func (o *PutRecordingRecordingkeysRotationscheduleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording recordingkeys rotationschedule unauthorized response a status code equal to that given
func (o *PutRecordingRecordingkeysRotationscheduleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutRecordingRecordingkeysRotationscheduleUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleForbidden creates a PutRecordingRecordingkeysRotationscheduleForbidden with default headers values
func NewPutRecordingRecordingkeysRotationscheduleForbidden() *PutRecordingRecordingkeysRotationscheduleForbidden {
	return &PutRecordingRecordingkeysRotationscheduleForbidden{}
}

/*
PutRecordingRecordingkeysRotationscheduleForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutRecordingRecordingkeysRotationscheduleForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording recordingkeys rotationschedule forbidden response has a 2xx status code
func (o *PutRecordingRecordingkeysRotationscheduleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording recordingkeys rotationschedule forbidden response has a 3xx status code
func (o *PutRecordingRecordingkeysRotationscheduleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording recordingkeys rotationschedule forbidden response has a 4xx status code
func (o *PutRecordingRecordingkeysRotationscheduleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording recordingkeys rotationschedule forbidden response has a 5xx status code
func (o *PutRecordingRecordingkeysRotationscheduleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording recordingkeys rotationschedule forbidden response a status code equal to that given
func (o *PutRecordingRecordingkeysRotationscheduleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutRecordingRecordingkeysRotationscheduleForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleForbidden  %+v", 403, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleForbidden  %+v", 403, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleNotFound creates a PutRecordingRecordingkeysRotationscheduleNotFound with default headers values
func NewPutRecordingRecordingkeysRotationscheduleNotFound() *PutRecordingRecordingkeysRotationscheduleNotFound {
	return &PutRecordingRecordingkeysRotationscheduleNotFound{}
}

/*
PutRecordingRecordingkeysRotationscheduleNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutRecordingRecordingkeysRotationscheduleNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording recordingkeys rotationschedule not found response has a 2xx status code
func (o *PutRecordingRecordingkeysRotationscheduleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording recordingkeys rotationschedule not found response has a 3xx status code
func (o *PutRecordingRecordingkeysRotationscheduleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording recordingkeys rotationschedule not found response has a 4xx status code
func (o *PutRecordingRecordingkeysRotationscheduleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording recordingkeys rotationschedule not found response has a 5xx status code
func (o *PutRecordingRecordingkeysRotationscheduleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording recordingkeys rotationschedule not found response a status code equal to that given
func (o *PutRecordingRecordingkeysRotationscheduleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutRecordingRecordingkeysRotationscheduleNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleNotFound  %+v", 404, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleNotFound  %+v", 404, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleRequestTimeout creates a PutRecordingRecordingkeysRotationscheduleRequestTimeout with default headers values
func NewPutRecordingRecordingkeysRotationscheduleRequestTimeout() *PutRecordingRecordingkeysRotationscheduleRequestTimeout {
	return &PutRecordingRecordingkeysRotationscheduleRequestTimeout{}
}

/*
PutRecordingRecordingkeysRotationscheduleRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutRecordingRecordingkeysRotationscheduleRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording recordingkeys rotationschedule request timeout response has a 2xx status code
func (o *PutRecordingRecordingkeysRotationscheduleRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording recordingkeys rotationschedule request timeout response has a 3xx status code
func (o *PutRecordingRecordingkeysRotationscheduleRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording recordingkeys rotationschedule request timeout response has a 4xx status code
func (o *PutRecordingRecordingkeysRotationscheduleRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording recordingkeys rotationschedule request timeout response has a 5xx status code
func (o *PutRecordingRecordingkeysRotationscheduleRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording recordingkeys rotationschedule request timeout response a status code equal to that given
func (o *PutRecordingRecordingkeysRotationscheduleRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutRecordingRecordingkeysRotationscheduleRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge creates a PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge with default headers values
func NewPutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge() *PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge {
	return &PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge{}
}

/*
PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording recordingkeys rotationschedule request entity too large response has a 2xx status code
func (o *PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording recordingkeys rotationschedule request entity too large response has a 3xx status code
func (o *PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording recordingkeys rotationschedule request entity too large response has a 4xx status code
func (o *PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording recordingkeys rotationschedule request entity too large response has a 5xx status code
func (o *PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording recordingkeys rotationschedule request entity too large response a status code equal to that given
func (o *PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleUnsupportedMediaType creates a PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType with default headers values
func NewPutRecordingRecordingkeysRotationscheduleUnsupportedMediaType() *PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType {
	return &PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType{}
}

/*
PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording recordingkeys rotationschedule unsupported media type response has a 2xx status code
func (o *PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording recordingkeys rotationschedule unsupported media type response has a 3xx status code
func (o *PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording recordingkeys rotationschedule unsupported media type response has a 4xx status code
func (o *PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording recordingkeys rotationschedule unsupported media type response has a 5xx status code
func (o *PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording recordingkeys rotationschedule unsupported media type response a status code equal to that given
func (o *PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleTooManyRequests creates a PutRecordingRecordingkeysRotationscheduleTooManyRequests with default headers values
func NewPutRecordingRecordingkeysRotationscheduleTooManyRequests() *PutRecordingRecordingkeysRotationscheduleTooManyRequests {
	return &PutRecordingRecordingkeysRotationscheduleTooManyRequests{}
}

/*
PutRecordingRecordingkeysRotationscheduleTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutRecordingRecordingkeysRotationscheduleTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording recordingkeys rotationschedule too many requests response has a 2xx status code
func (o *PutRecordingRecordingkeysRotationscheduleTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording recordingkeys rotationschedule too many requests response has a 3xx status code
func (o *PutRecordingRecordingkeysRotationscheduleTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording recordingkeys rotationschedule too many requests response has a 4xx status code
func (o *PutRecordingRecordingkeysRotationscheduleTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording recordingkeys rotationschedule too many requests response has a 5xx status code
func (o *PutRecordingRecordingkeysRotationscheduleTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording recordingkeys rotationschedule too many requests response a status code equal to that given
func (o *PutRecordingRecordingkeysRotationscheduleTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutRecordingRecordingkeysRotationscheduleTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleInternalServerError creates a PutRecordingRecordingkeysRotationscheduleInternalServerError with default headers values
func NewPutRecordingRecordingkeysRotationscheduleInternalServerError() *PutRecordingRecordingkeysRotationscheduleInternalServerError {
	return &PutRecordingRecordingkeysRotationscheduleInternalServerError{}
}

/*
PutRecordingRecordingkeysRotationscheduleInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutRecordingRecordingkeysRotationscheduleInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording recordingkeys rotationschedule internal server error response has a 2xx status code
func (o *PutRecordingRecordingkeysRotationscheduleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording recordingkeys rotationschedule internal server error response has a 3xx status code
func (o *PutRecordingRecordingkeysRotationscheduleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording recordingkeys rotationschedule internal server error response has a 4xx status code
func (o *PutRecordingRecordingkeysRotationscheduleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put recording recordingkeys rotationschedule internal server error response has a 5xx status code
func (o *PutRecordingRecordingkeysRotationscheduleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put recording recordingkeys rotationschedule internal server error response a status code equal to that given
func (o *PutRecordingRecordingkeysRotationscheduleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutRecordingRecordingkeysRotationscheduleInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleServiceUnavailable creates a PutRecordingRecordingkeysRotationscheduleServiceUnavailable with default headers values
func NewPutRecordingRecordingkeysRotationscheduleServiceUnavailable() *PutRecordingRecordingkeysRotationscheduleServiceUnavailable {
	return &PutRecordingRecordingkeysRotationscheduleServiceUnavailable{}
}

/*
PutRecordingRecordingkeysRotationscheduleServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutRecordingRecordingkeysRotationscheduleServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording recordingkeys rotationschedule service unavailable response has a 2xx status code
func (o *PutRecordingRecordingkeysRotationscheduleServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording recordingkeys rotationschedule service unavailable response has a 3xx status code
func (o *PutRecordingRecordingkeysRotationscheduleServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording recordingkeys rotationschedule service unavailable response has a 4xx status code
func (o *PutRecordingRecordingkeysRotationscheduleServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put recording recordingkeys rotationschedule service unavailable response has a 5xx status code
func (o *PutRecordingRecordingkeysRotationscheduleServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put recording recordingkeys rotationschedule service unavailable response a status code equal to that given
func (o *PutRecordingRecordingkeysRotationscheduleServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutRecordingRecordingkeysRotationscheduleServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingRecordingkeysRotationscheduleGatewayTimeout creates a PutRecordingRecordingkeysRotationscheduleGatewayTimeout with default headers values
func NewPutRecordingRecordingkeysRotationscheduleGatewayTimeout() *PutRecordingRecordingkeysRotationscheduleGatewayTimeout {
	return &PutRecordingRecordingkeysRotationscheduleGatewayTimeout{}
}

/*
PutRecordingRecordingkeysRotationscheduleGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutRecordingRecordingkeysRotationscheduleGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording recordingkeys rotationschedule gateway timeout response has a 2xx status code
func (o *PutRecordingRecordingkeysRotationscheduleGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording recordingkeys rotationschedule gateway timeout response has a 3xx status code
func (o *PutRecordingRecordingkeysRotationscheduleGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording recordingkeys rotationschedule gateway timeout response has a 4xx status code
func (o *PutRecordingRecordingkeysRotationscheduleGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put recording recordingkeys rotationschedule gateway timeout response has a 5xx status code
func (o *PutRecordingRecordingkeysRotationscheduleGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put recording recordingkeys rotationschedule gateway timeout response a status code equal to that given
func (o *PutRecordingRecordingkeysRotationscheduleGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutRecordingRecordingkeysRotationscheduleGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/recordingkeys/rotationschedule][%d] putRecordingRecordingkeysRotationscheduleGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutRecordingRecordingkeysRotationscheduleGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingRecordingkeysRotationscheduleGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

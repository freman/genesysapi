// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/freman/genesysapi/models"
)

// NewPutRecordingsDeletionprotectionParams creates a new PutRecordingsDeletionprotectionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPutRecordingsDeletionprotectionParams() *PutRecordingsDeletionprotectionParams {
	return &PutRecordingsDeletionprotectionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPutRecordingsDeletionprotectionParamsWithTimeout creates a new PutRecordingsDeletionprotectionParams object
// with the ability to set a timeout on a request.
func NewPutRecordingsDeletionprotectionParamsWithTimeout(timeout time.Duration) *PutRecordingsDeletionprotectionParams {
	return &PutRecordingsDeletionprotectionParams{
		timeout: timeout,
	}
}

// NewPutRecordingsDeletionprotectionParamsWithContext creates a new PutRecordingsDeletionprotectionParams object
// with the ability to set a context for a request.
func NewPutRecordingsDeletionprotectionParamsWithContext(ctx context.Context) *PutRecordingsDeletionprotectionParams {
	return &PutRecordingsDeletionprotectionParams{
		Context: ctx,
	}
}

// NewPutRecordingsDeletionprotectionParamsWithHTTPClient creates a new PutRecordingsDeletionprotectionParams object
// with the ability to set a custom HTTPClient for a request.
func NewPutRecordingsDeletionprotectionParamsWithHTTPClient(client *http.Client) *PutRecordingsDeletionprotectionParams {
	return &PutRecordingsDeletionprotectionParams{
		HTTPClient: client,
	}
}

/*
PutRecordingsDeletionprotectionParams contains all the parameters to send to the API endpoint

	for the put recordings deletionprotection operation.

	Typically these are written to a http.Request.
*/
type PutRecordingsDeletionprotectionParams struct {

	// Body.
	Body *models.ConversationDeletionProtectionQuery

	/* Protect.

	   Check for apply, uncheck for revoke (each action requires the respective permission)

	   Default: true
	*/
	Protect *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the put recordings deletionprotection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutRecordingsDeletionprotectionParams) WithDefaults() *PutRecordingsDeletionprotectionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the put recordings deletionprotection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutRecordingsDeletionprotectionParams) SetDefaults() {
	var (
		protectDefault = bool(true)
	)

	val := PutRecordingsDeletionprotectionParams{
		Protect: &protectDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the put recordings deletionprotection params
func (o *PutRecordingsDeletionprotectionParams) WithTimeout(timeout time.Duration) *PutRecordingsDeletionprotectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put recordings deletionprotection params
func (o *PutRecordingsDeletionprotectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put recordings deletionprotection params
func (o *PutRecordingsDeletionprotectionParams) WithContext(ctx context.Context) *PutRecordingsDeletionprotectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put recordings deletionprotection params
func (o *PutRecordingsDeletionprotectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put recordings deletionprotection params
func (o *PutRecordingsDeletionprotectionParams) WithHTTPClient(client *http.Client) *PutRecordingsDeletionprotectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put recordings deletionprotection params
func (o *PutRecordingsDeletionprotectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the put recordings deletionprotection params
func (o *PutRecordingsDeletionprotectionParams) WithBody(body *models.ConversationDeletionProtectionQuery) *PutRecordingsDeletionprotectionParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the put recordings deletionprotection params
func (o *PutRecordingsDeletionprotectionParams) SetBody(body *models.ConversationDeletionProtectionQuery) {
	o.Body = body
}

// WithProtect adds the protect to the put recordings deletionprotection params
func (o *PutRecordingsDeletionprotectionParams) WithProtect(protect *bool) *PutRecordingsDeletionprotectionParams {
	o.SetProtect(protect)
	return o
}

// SetProtect adds the protect to the put recordings deletionprotection params
func (o *PutRecordingsDeletionprotectionParams) SetProtect(protect *bool) {
	o.Protect = protect
}

// WriteToRequest writes these params to a swagger request
func (o *PutRecordingsDeletionprotectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Protect != nil {

		// query param protect
		var qrProtect bool

		if o.Protect != nil {
			qrProtect = *o.Protect
		}
		qProtect := swag.FormatBool(qrProtect)
		if qProtect != "" {

			if err := r.SetQueryParam("protect", qProtect); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

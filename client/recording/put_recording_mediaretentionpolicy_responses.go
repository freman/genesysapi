// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutRecordingMediaretentionpolicyReader is a Reader for the PutRecordingMediaretentionpolicy structure.
type PutRecordingMediaretentionpolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRecordingMediaretentionpolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRecordingMediaretentionpolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRecordingMediaretentionpolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRecordingMediaretentionpolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRecordingMediaretentionpolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRecordingMediaretentionpolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutRecordingMediaretentionpolicyRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutRecordingMediaretentionpolicyRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutRecordingMediaretentionpolicyUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutRecordingMediaretentionpolicyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutRecordingMediaretentionpolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutRecordingMediaretentionpolicyServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutRecordingMediaretentionpolicyGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRecordingMediaretentionpolicyOK creates a PutRecordingMediaretentionpolicyOK with default headers values
func NewPutRecordingMediaretentionpolicyOK() *PutRecordingMediaretentionpolicyOK {
	return &PutRecordingMediaretentionpolicyOK{}
}

/*
PutRecordingMediaretentionpolicyOK describes a response with status code 200, with default header values.

successful operation
*/
type PutRecordingMediaretentionpolicyOK struct {
	Payload *models.Policy
}

// IsSuccess returns true when this put recording mediaretentionpolicy o k response has a 2xx status code
func (o *PutRecordingMediaretentionpolicyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put recording mediaretentionpolicy o k response has a 3xx status code
func (o *PutRecordingMediaretentionpolicyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording mediaretentionpolicy o k response has a 4xx status code
func (o *PutRecordingMediaretentionpolicyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put recording mediaretentionpolicy o k response has a 5xx status code
func (o *PutRecordingMediaretentionpolicyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording mediaretentionpolicy o k response a status code equal to that given
func (o *PutRecordingMediaretentionpolicyOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutRecordingMediaretentionpolicyOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyOK  %+v", 200, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyOK  %+v", 200, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyOK) GetPayload() *models.Policy {
	return o.Payload
}

func (o *PutRecordingMediaretentionpolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Policy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingMediaretentionpolicyBadRequest creates a PutRecordingMediaretentionpolicyBadRequest with default headers values
func NewPutRecordingMediaretentionpolicyBadRequest() *PutRecordingMediaretentionpolicyBadRequest {
	return &PutRecordingMediaretentionpolicyBadRequest{}
}

/*
PutRecordingMediaretentionpolicyBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutRecordingMediaretentionpolicyBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording mediaretentionpolicy bad request response has a 2xx status code
func (o *PutRecordingMediaretentionpolicyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording mediaretentionpolicy bad request response has a 3xx status code
func (o *PutRecordingMediaretentionpolicyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording mediaretentionpolicy bad request response has a 4xx status code
func (o *PutRecordingMediaretentionpolicyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording mediaretentionpolicy bad request response has a 5xx status code
func (o *PutRecordingMediaretentionpolicyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording mediaretentionpolicy bad request response a status code equal to that given
func (o *PutRecordingMediaretentionpolicyBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutRecordingMediaretentionpolicyBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyBadRequest  %+v", 400, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyBadRequest  %+v", 400, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingMediaretentionpolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingMediaretentionpolicyUnauthorized creates a PutRecordingMediaretentionpolicyUnauthorized with default headers values
func NewPutRecordingMediaretentionpolicyUnauthorized() *PutRecordingMediaretentionpolicyUnauthorized {
	return &PutRecordingMediaretentionpolicyUnauthorized{}
}

/*
PutRecordingMediaretentionpolicyUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutRecordingMediaretentionpolicyUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording mediaretentionpolicy unauthorized response has a 2xx status code
func (o *PutRecordingMediaretentionpolicyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording mediaretentionpolicy unauthorized response has a 3xx status code
func (o *PutRecordingMediaretentionpolicyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording mediaretentionpolicy unauthorized response has a 4xx status code
func (o *PutRecordingMediaretentionpolicyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording mediaretentionpolicy unauthorized response has a 5xx status code
func (o *PutRecordingMediaretentionpolicyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording mediaretentionpolicy unauthorized response a status code equal to that given
func (o *PutRecordingMediaretentionpolicyUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutRecordingMediaretentionpolicyUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingMediaretentionpolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingMediaretentionpolicyForbidden creates a PutRecordingMediaretentionpolicyForbidden with default headers values
func NewPutRecordingMediaretentionpolicyForbidden() *PutRecordingMediaretentionpolicyForbidden {
	return &PutRecordingMediaretentionpolicyForbidden{}
}

/*
PutRecordingMediaretentionpolicyForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutRecordingMediaretentionpolicyForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording mediaretentionpolicy forbidden response has a 2xx status code
func (o *PutRecordingMediaretentionpolicyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording mediaretentionpolicy forbidden response has a 3xx status code
func (o *PutRecordingMediaretentionpolicyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording mediaretentionpolicy forbidden response has a 4xx status code
func (o *PutRecordingMediaretentionpolicyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording mediaretentionpolicy forbidden response has a 5xx status code
func (o *PutRecordingMediaretentionpolicyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording mediaretentionpolicy forbidden response a status code equal to that given
func (o *PutRecordingMediaretentionpolicyForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutRecordingMediaretentionpolicyForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyForbidden  %+v", 403, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyForbidden  %+v", 403, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingMediaretentionpolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingMediaretentionpolicyNotFound creates a PutRecordingMediaretentionpolicyNotFound with default headers values
func NewPutRecordingMediaretentionpolicyNotFound() *PutRecordingMediaretentionpolicyNotFound {
	return &PutRecordingMediaretentionpolicyNotFound{}
}

/*
PutRecordingMediaretentionpolicyNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutRecordingMediaretentionpolicyNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording mediaretentionpolicy not found response has a 2xx status code
func (o *PutRecordingMediaretentionpolicyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording mediaretentionpolicy not found response has a 3xx status code
func (o *PutRecordingMediaretentionpolicyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording mediaretentionpolicy not found response has a 4xx status code
func (o *PutRecordingMediaretentionpolicyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording mediaretentionpolicy not found response has a 5xx status code
func (o *PutRecordingMediaretentionpolicyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording mediaretentionpolicy not found response a status code equal to that given
func (o *PutRecordingMediaretentionpolicyNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutRecordingMediaretentionpolicyNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyNotFound  %+v", 404, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyNotFound  %+v", 404, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingMediaretentionpolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingMediaretentionpolicyRequestTimeout creates a PutRecordingMediaretentionpolicyRequestTimeout with default headers values
func NewPutRecordingMediaretentionpolicyRequestTimeout() *PutRecordingMediaretentionpolicyRequestTimeout {
	return &PutRecordingMediaretentionpolicyRequestTimeout{}
}

/*
PutRecordingMediaretentionpolicyRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutRecordingMediaretentionpolicyRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording mediaretentionpolicy request timeout response has a 2xx status code
func (o *PutRecordingMediaretentionpolicyRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording mediaretentionpolicy request timeout response has a 3xx status code
func (o *PutRecordingMediaretentionpolicyRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording mediaretentionpolicy request timeout response has a 4xx status code
func (o *PutRecordingMediaretentionpolicyRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording mediaretentionpolicy request timeout response has a 5xx status code
func (o *PutRecordingMediaretentionpolicyRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording mediaretentionpolicy request timeout response a status code equal to that given
func (o *PutRecordingMediaretentionpolicyRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutRecordingMediaretentionpolicyRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingMediaretentionpolicyRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingMediaretentionpolicyRequestEntityTooLarge creates a PutRecordingMediaretentionpolicyRequestEntityTooLarge with default headers values
func NewPutRecordingMediaretentionpolicyRequestEntityTooLarge() *PutRecordingMediaretentionpolicyRequestEntityTooLarge {
	return &PutRecordingMediaretentionpolicyRequestEntityTooLarge{}
}

/*
PutRecordingMediaretentionpolicyRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PutRecordingMediaretentionpolicyRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording mediaretentionpolicy request entity too large response has a 2xx status code
func (o *PutRecordingMediaretentionpolicyRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording mediaretentionpolicy request entity too large response has a 3xx status code
func (o *PutRecordingMediaretentionpolicyRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording mediaretentionpolicy request entity too large response has a 4xx status code
func (o *PutRecordingMediaretentionpolicyRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording mediaretentionpolicy request entity too large response has a 5xx status code
func (o *PutRecordingMediaretentionpolicyRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording mediaretentionpolicy request entity too large response a status code equal to that given
func (o *PutRecordingMediaretentionpolicyRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutRecordingMediaretentionpolicyRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingMediaretentionpolicyRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingMediaretentionpolicyUnsupportedMediaType creates a PutRecordingMediaretentionpolicyUnsupportedMediaType with default headers values
func NewPutRecordingMediaretentionpolicyUnsupportedMediaType() *PutRecordingMediaretentionpolicyUnsupportedMediaType {
	return &PutRecordingMediaretentionpolicyUnsupportedMediaType{}
}

/*
PutRecordingMediaretentionpolicyUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutRecordingMediaretentionpolicyUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording mediaretentionpolicy unsupported media type response has a 2xx status code
func (o *PutRecordingMediaretentionpolicyUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording mediaretentionpolicy unsupported media type response has a 3xx status code
func (o *PutRecordingMediaretentionpolicyUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording mediaretentionpolicy unsupported media type response has a 4xx status code
func (o *PutRecordingMediaretentionpolicyUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording mediaretentionpolicy unsupported media type response has a 5xx status code
func (o *PutRecordingMediaretentionpolicyUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording mediaretentionpolicy unsupported media type response a status code equal to that given
func (o *PutRecordingMediaretentionpolicyUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutRecordingMediaretentionpolicyUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingMediaretentionpolicyUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingMediaretentionpolicyTooManyRequests creates a PutRecordingMediaretentionpolicyTooManyRequests with default headers values
func NewPutRecordingMediaretentionpolicyTooManyRequests() *PutRecordingMediaretentionpolicyTooManyRequests {
	return &PutRecordingMediaretentionpolicyTooManyRequests{}
}

/*
PutRecordingMediaretentionpolicyTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutRecordingMediaretentionpolicyTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording mediaretentionpolicy too many requests response has a 2xx status code
func (o *PutRecordingMediaretentionpolicyTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording mediaretentionpolicy too many requests response has a 3xx status code
func (o *PutRecordingMediaretentionpolicyTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording mediaretentionpolicy too many requests response has a 4xx status code
func (o *PutRecordingMediaretentionpolicyTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put recording mediaretentionpolicy too many requests response has a 5xx status code
func (o *PutRecordingMediaretentionpolicyTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put recording mediaretentionpolicy too many requests response a status code equal to that given
func (o *PutRecordingMediaretentionpolicyTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutRecordingMediaretentionpolicyTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingMediaretentionpolicyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingMediaretentionpolicyInternalServerError creates a PutRecordingMediaretentionpolicyInternalServerError with default headers values
func NewPutRecordingMediaretentionpolicyInternalServerError() *PutRecordingMediaretentionpolicyInternalServerError {
	return &PutRecordingMediaretentionpolicyInternalServerError{}
}

/*
PutRecordingMediaretentionpolicyInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutRecordingMediaretentionpolicyInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording mediaretentionpolicy internal server error response has a 2xx status code
func (o *PutRecordingMediaretentionpolicyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording mediaretentionpolicy internal server error response has a 3xx status code
func (o *PutRecordingMediaretentionpolicyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording mediaretentionpolicy internal server error response has a 4xx status code
func (o *PutRecordingMediaretentionpolicyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put recording mediaretentionpolicy internal server error response has a 5xx status code
func (o *PutRecordingMediaretentionpolicyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put recording mediaretentionpolicy internal server error response a status code equal to that given
func (o *PutRecordingMediaretentionpolicyInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutRecordingMediaretentionpolicyInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingMediaretentionpolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingMediaretentionpolicyServiceUnavailable creates a PutRecordingMediaretentionpolicyServiceUnavailable with default headers values
func NewPutRecordingMediaretentionpolicyServiceUnavailable() *PutRecordingMediaretentionpolicyServiceUnavailable {
	return &PutRecordingMediaretentionpolicyServiceUnavailable{}
}

/*
PutRecordingMediaretentionpolicyServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutRecordingMediaretentionpolicyServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording mediaretentionpolicy service unavailable response has a 2xx status code
func (o *PutRecordingMediaretentionpolicyServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording mediaretentionpolicy service unavailable response has a 3xx status code
func (o *PutRecordingMediaretentionpolicyServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording mediaretentionpolicy service unavailable response has a 4xx status code
func (o *PutRecordingMediaretentionpolicyServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put recording mediaretentionpolicy service unavailable response has a 5xx status code
func (o *PutRecordingMediaretentionpolicyServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put recording mediaretentionpolicy service unavailable response a status code equal to that given
func (o *PutRecordingMediaretentionpolicyServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutRecordingMediaretentionpolicyServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingMediaretentionpolicyServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingMediaretentionpolicyGatewayTimeout creates a PutRecordingMediaretentionpolicyGatewayTimeout with default headers values
func NewPutRecordingMediaretentionpolicyGatewayTimeout() *PutRecordingMediaretentionpolicyGatewayTimeout {
	return &PutRecordingMediaretentionpolicyGatewayTimeout{}
}

/*
PutRecordingMediaretentionpolicyGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutRecordingMediaretentionpolicyGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put recording mediaretentionpolicy gateway timeout response has a 2xx status code
func (o *PutRecordingMediaretentionpolicyGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put recording mediaretentionpolicy gateway timeout response has a 3xx status code
func (o *PutRecordingMediaretentionpolicyGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put recording mediaretentionpolicy gateway timeout response has a 4xx status code
func (o *PutRecordingMediaretentionpolicyGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put recording mediaretentionpolicy gateway timeout response has a 5xx status code
func (o *PutRecordingMediaretentionpolicyGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put recording mediaretentionpolicy gateway timeout response a status code equal to that given
func (o *PutRecordingMediaretentionpolicyGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutRecordingMediaretentionpolicyGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/recording/mediaretentionpolicies/{policyId}][%d] putRecordingMediaretentionpolicyGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutRecordingMediaretentionpolicyGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingMediaretentionpolicyGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

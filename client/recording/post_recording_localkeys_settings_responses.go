// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostRecordingLocalkeysSettingsReader is a Reader for the PostRecordingLocalkeysSettings structure.
type PostRecordingLocalkeysSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRecordingLocalkeysSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostRecordingLocalkeysSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRecordingLocalkeysSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostRecordingLocalkeysSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostRecordingLocalkeysSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRecordingLocalkeysSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostRecordingLocalkeysSettingsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostRecordingLocalkeysSettingsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostRecordingLocalkeysSettingsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostRecordingLocalkeysSettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostRecordingLocalkeysSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostRecordingLocalkeysSettingsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostRecordingLocalkeysSettingsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRecordingLocalkeysSettingsOK creates a PostRecordingLocalkeysSettingsOK with default headers values
func NewPostRecordingLocalkeysSettingsOK() *PostRecordingLocalkeysSettingsOK {
	return &PostRecordingLocalkeysSettingsOK{}
}

/*PostRecordingLocalkeysSettingsOK handles this case with default header values.

successful operation
*/
type PostRecordingLocalkeysSettingsOK struct {
	Payload *models.LocalEncryptionConfiguration
}

func (o *PostRecordingLocalkeysSettingsOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys/settings][%d] postRecordingLocalkeysSettingsOK  %+v", 200, o.Payload)
}

func (o *PostRecordingLocalkeysSettingsOK) GetPayload() *models.LocalEncryptionConfiguration {
	return o.Payload
}

func (o *PostRecordingLocalkeysSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LocalEncryptionConfiguration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysSettingsBadRequest creates a PostRecordingLocalkeysSettingsBadRequest with default headers values
func NewPostRecordingLocalkeysSettingsBadRequest() *PostRecordingLocalkeysSettingsBadRequest {
	return &PostRecordingLocalkeysSettingsBadRequest{}
}

/*PostRecordingLocalkeysSettingsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostRecordingLocalkeysSettingsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysSettingsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys/settings][%d] postRecordingLocalkeysSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PostRecordingLocalkeysSettingsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysSettingsUnauthorized creates a PostRecordingLocalkeysSettingsUnauthorized with default headers values
func NewPostRecordingLocalkeysSettingsUnauthorized() *PostRecordingLocalkeysSettingsUnauthorized {
	return &PostRecordingLocalkeysSettingsUnauthorized{}
}

/*PostRecordingLocalkeysSettingsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostRecordingLocalkeysSettingsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys/settings][%d] postRecordingLocalkeysSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRecordingLocalkeysSettingsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysSettingsForbidden creates a PostRecordingLocalkeysSettingsForbidden with default headers values
func NewPostRecordingLocalkeysSettingsForbidden() *PostRecordingLocalkeysSettingsForbidden {
	return &PostRecordingLocalkeysSettingsForbidden{}
}

/*PostRecordingLocalkeysSettingsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostRecordingLocalkeysSettingsForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysSettingsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys/settings][%d] postRecordingLocalkeysSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PostRecordingLocalkeysSettingsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysSettingsNotFound creates a PostRecordingLocalkeysSettingsNotFound with default headers values
func NewPostRecordingLocalkeysSettingsNotFound() *PostRecordingLocalkeysSettingsNotFound {
	return &PostRecordingLocalkeysSettingsNotFound{}
}

/*PostRecordingLocalkeysSettingsNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostRecordingLocalkeysSettingsNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysSettingsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys/settings][%d] postRecordingLocalkeysSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PostRecordingLocalkeysSettingsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysSettingsRequestTimeout creates a PostRecordingLocalkeysSettingsRequestTimeout with default headers values
func NewPostRecordingLocalkeysSettingsRequestTimeout() *PostRecordingLocalkeysSettingsRequestTimeout {
	return &PostRecordingLocalkeysSettingsRequestTimeout{}
}

/*PostRecordingLocalkeysSettingsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostRecordingLocalkeysSettingsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysSettingsRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys/settings][%d] postRecordingLocalkeysSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostRecordingLocalkeysSettingsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysSettingsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysSettingsRequestEntityTooLarge creates a PostRecordingLocalkeysSettingsRequestEntityTooLarge with default headers values
func NewPostRecordingLocalkeysSettingsRequestEntityTooLarge() *PostRecordingLocalkeysSettingsRequestEntityTooLarge {
	return &PostRecordingLocalkeysSettingsRequestEntityTooLarge{}
}

/*PostRecordingLocalkeysSettingsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PostRecordingLocalkeysSettingsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysSettingsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys/settings][%d] postRecordingLocalkeysSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostRecordingLocalkeysSettingsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysSettingsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysSettingsUnsupportedMediaType creates a PostRecordingLocalkeysSettingsUnsupportedMediaType with default headers values
func NewPostRecordingLocalkeysSettingsUnsupportedMediaType() *PostRecordingLocalkeysSettingsUnsupportedMediaType {
	return &PostRecordingLocalkeysSettingsUnsupportedMediaType{}
}

/*PostRecordingLocalkeysSettingsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostRecordingLocalkeysSettingsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysSettingsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys/settings][%d] postRecordingLocalkeysSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostRecordingLocalkeysSettingsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysSettingsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysSettingsTooManyRequests creates a PostRecordingLocalkeysSettingsTooManyRequests with default headers values
func NewPostRecordingLocalkeysSettingsTooManyRequests() *PostRecordingLocalkeysSettingsTooManyRequests {
	return &PostRecordingLocalkeysSettingsTooManyRequests{}
}

/*PostRecordingLocalkeysSettingsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostRecordingLocalkeysSettingsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysSettingsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys/settings][%d] postRecordingLocalkeysSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostRecordingLocalkeysSettingsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysSettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysSettingsInternalServerError creates a PostRecordingLocalkeysSettingsInternalServerError with default headers values
func NewPostRecordingLocalkeysSettingsInternalServerError() *PostRecordingLocalkeysSettingsInternalServerError {
	return &PostRecordingLocalkeysSettingsInternalServerError{}
}

/*PostRecordingLocalkeysSettingsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostRecordingLocalkeysSettingsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys/settings][%d] postRecordingLocalkeysSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostRecordingLocalkeysSettingsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysSettingsServiceUnavailable creates a PostRecordingLocalkeysSettingsServiceUnavailable with default headers values
func NewPostRecordingLocalkeysSettingsServiceUnavailable() *PostRecordingLocalkeysSettingsServiceUnavailable {
	return &PostRecordingLocalkeysSettingsServiceUnavailable{}
}

/*PostRecordingLocalkeysSettingsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostRecordingLocalkeysSettingsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysSettingsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys/settings][%d] postRecordingLocalkeysSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostRecordingLocalkeysSettingsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysSettingsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingLocalkeysSettingsGatewayTimeout creates a PostRecordingLocalkeysSettingsGatewayTimeout with default headers values
func NewPostRecordingLocalkeysSettingsGatewayTimeout() *PostRecordingLocalkeysSettingsGatewayTimeout {
	return &PostRecordingLocalkeysSettingsGatewayTimeout{}
}

/*PostRecordingLocalkeysSettingsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostRecordingLocalkeysSettingsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingLocalkeysSettingsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/localkeys/settings][%d] postRecordingLocalkeysSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostRecordingLocalkeysSettingsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingLocalkeysSettingsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostRecordingCrossplatformMediaretentionpoliciesReader is a Reader for the PostRecordingCrossplatformMediaretentionpolicies structure.
type PostRecordingCrossplatformMediaretentionpoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRecordingCrossplatformMediaretentionpoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostRecordingCrossplatformMediaretentionpoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRecordingCrossplatformMediaretentionpoliciesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostRecordingCrossplatformMediaretentionpoliciesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostRecordingCrossplatformMediaretentionpoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRecordingCrossplatformMediaretentionpoliciesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostRecordingCrossplatformMediaretentionpoliciesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostRecordingCrossplatformMediaretentionpoliciesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostRecordingCrossplatformMediaretentionpoliciesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRecordingCrossplatformMediaretentionpoliciesOK creates a PostRecordingCrossplatformMediaretentionpoliciesOK with default headers values
func NewPostRecordingCrossplatformMediaretentionpoliciesOK() *PostRecordingCrossplatformMediaretentionpoliciesOK {
	return &PostRecordingCrossplatformMediaretentionpoliciesOK{}
}

/*
PostRecordingCrossplatformMediaretentionpoliciesOK describes a response with status code 200, with default header values.

successful operation
*/
type PostRecordingCrossplatformMediaretentionpoliciesOK struct {
	Payload *models.CrossPlatformPolicy
}

// IsSuccess returns true when this post recording crossplatform mediaretentionpolicies o k response has a 2xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post recording crossplatform mediaretentionpolicies o k response has a 3xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording crossplatform mediaretentionpolicies o k response has a 4xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post recording crossplatform mediaretentionpolicies o k response has a 5xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording crossplatform mediaretentionpolicies o k response a status code equal to that given
func (o *PostRecordingCrossplatformMediaretentionpoliciesOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesOK  %+v", 200, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesOK) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesOK  %+v", 200, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesOK) GetPayload() *models.CrossPlatformPolicy {
	return o.Payload
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CrossPlatformPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingCrossplatformMediaretentionpoliciesBadRequest creates a PostRecordingCrossplatformMediaretentionpoliciesBadRequest with default headers values
func NewPostRecordingCrossplatformMediaretentionpoliciesBadRequest() *PostRecordingCrossplatformMediaretentionpoliciesBadRequest {
	return &PostRecordingCrossplatformMediaretentionpoliciesBadRequest{}
}

/*
PostRecordingCrossplatformMediaretentionpoliciesBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostRecordingCrossplatformMediaretentionpoliciesBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording crossplatform mediaretentionpolicies bad request response has a 2xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording crossplatform mediaretentionpolicies bad request response has a 3xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording crossplatform mediaretentionpolicies bad request response has a 4xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording crossplatform mediaretentionpolicies bad request response has a 5xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording crossplatform mediaretentionpolicies bad request response a status code equal to that given
func (o *PostRecordingCrossplatformMediaretentionpoliciesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingCrossplatformMediaretentionpoliciesUnauthorized creates a PostRecordingCrossplatformMediaretentionpoliciesUnauthorized with default headers values
func NewPostRecordingCrossplatformMediaretentionpoliciesUnauthorized() *PostRecordingCrossplatformMediaretentionpoliciesUnauthorized {
	return &PostRecordingCrossplatformMediaretentionpoliciesUnauthorized{}
}

/*
PostRecordingCrossplatformMediaretentionpoliciesUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostRecordingCrossplatformMediaretentionpoliciesUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording crossplatform mediaretentionpolicies unauthorized response has a 2xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording crossplatform mediaretentionpolicies unauthorized response has a 3xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording crossplatform mediaretentionpolicies unauthorized response has a 4xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording crossplatform mediaretentionpolicies unauthorized response has a 5xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording crossplatform mediaretentionpolicies unauthorized response a status code equal to that given
func (o *PostRecordingCrossplatformMediaretentionpoliciesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingCrossplatformMediaretentionpoliciesForbidden creates a PostRecordingCrossplatformMediaretentionpoliciesForbidden with default headers values
func NewPostRecordingCrossplatformMediaretentionpoliciesForbidden() *PostRecordingCrossplatformMediaretentionpoliciesForbidden {
	return &PostRecordingCrossplatformMediaretentionpoliciesForbidden{}
}

/*
PostRecordingCrossplatformMediaretentionpoliciesForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostRecordingCrossplatformMediaretentionpoliciesForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording crossplatform mediaretentionpolicies forbidden response has a 2xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording crossplatform mediaretentionpolicies forbidden response has a 3xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording crossplatform mediaretentionpolicies forbidden response has a 4xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording crossplatform mediaretentionpolicies forbidden response has a 5xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording crossplatform mediaretentionpolicies forbidden response a status code equal to that given
func (o *PostRecordingCrossplatformMediaretentionpoliciesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesForbidden  %+v", 403, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesForbidden  %+v", 403, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingCrossplatformMediaretentionpoliciesNotFound creates a PostRecordingCrossplatformMediaretentionpoliciesNotFound with default headers values
func NewPostRecordingCrossplatformMediaretentionpoliciesNotFound() *PostRecordingCrossplatformMediaretentionpoliciesNotFound {
	return &PostRecordingCrossplatformMediaretentionpoliciesNotFound{}
}

/*
PostRecordingCrossplatformMediaretentionpoliciesNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostRecordingCrossplatformMediaretentionpoliciesNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording crossplatform mediaretentionpolicies not found response has a 2xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording crossplatform mediaretentionpolicies not found response has a 3xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording crossplatform mediaretentionpolicies not found response has a 4xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording crossplatform mediaretentionpolicies not found response has a 5xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording crossplatform mediaretentionpolicies not found response a status code equal to that given
func (o *PostRecordingCrossplatformMediaretentionpoliciesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesNotFound  %+v", 404, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesNotFound  %+v", 404, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingCrossplatformMediaretentionpoliciesRequestTimeout creates a PostRecordingCrossplatformMediaretentionpoliciesRequestTimeout with default headers values
func NewPostRecordingCrossplatformMediaretentionpoliciesRequestTimeout() *PostRecordingCrossplatformMediaretentionpoliciesRequestTimeout {
	return &PostRecordingCrossplatformMediaretentionpoliciesRequestTimeout{}
}

/*
PostRecordingCrossplatformMediaretentionpoliciesRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostRecordingCrossplatformMediaretentionpoliciesRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording crossplatform mediaretentionpolicies request timeout response has a 2xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording crossplatform mediaretentionpolicies request timeout response has a 3xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording crossplatform mediaretentionpolicies request timeout response has a 4xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording crossplatform mediaretentionpolicies request timeout response has a 5xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording crossplatform mediaretentionpolicies request timeout response a status code equal to that given
func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge creates a PostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge with default headers values
func NewPostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge() *PostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge {
	return &PostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge{}
}

/*
PostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording crossplatform mediaretentionpolicies request entity too large response has a 2xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording crossplatform mediaretentionpolicies request entity too large response has a 3xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording crossplatform mediaretentionpolicies request entity too large response has a 4xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording crossplatform mediaretentionpolicies request entity too large response has a 5xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording crossplatform mediaretentionpolicies request entity too large response a status code equal to that given
func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType creates a PostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType with default headers values
func NewPostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType() *PostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType {
	return &PostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType{}
}

/*
PostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording crossplatform mediaretentionpolicies unsupported media type response has a 2xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording crossplatform mediaretentionpolicies unsupported media type response has a 3xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording crossplatform mediaretentionpolicies unsupported media type response has a 4xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording crossplatform mediaretentionpolicies unsupported media type response has a 5xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording crossplatform mediaretentionpolicies unsupported media type response a status code equal to that given
func (o *PostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingCrossplatformMediaretentionpoliciesTooManyRequests creates a PostRecordingCrossplatformMediaretentionpoliciesTooManyRequests with default headers values
func NewPostRecordingCrossplatformMediaretentionpoliciesTooManyRequests() *PostRecordingCrossplatformMediaretentionpoliciesTooManyRequests {
	return &PostRecordingCrossplatformMediaretentionpoliciesTooManyRequests{}
}

/*
PostRecordingCrossplatformMediaretentionpoliciesTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostRecordingCrossplatformMediaretentionpoliciesTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording crossplatform mediaretentionpolicies too many requests response has a 2xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording crossplatform mediaretentionpolicies too many requests response has a 3xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording crossplatform mediaretentionpolicies too many requests response has a 4xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recording crossplatform mediaretentionpolicies too many requests response has a 5xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post recording crossplatform mediaretentionpolicies too many requests response a status code equal to that given
func (o *PostRecordingCrossplatformMediaretentionpoliciesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingCrossplatformMediaretentionpoliciesInternalServerError creates a PostRecordingCrossplatformMediaretentionpoliciesInternalServerError with default headers values
func NewPostRecordingCrossplatformMediaretentionpoliciesInternalServerError() *PostRecordingCrossplatformMediaretentionpoliciesInternalServerError {
	return &PostRecordingCrossplatformMediaretentionpoliciesInternalServerError{}
}

/*
PostRecordingCrossplatformMediaretentionpoliciesInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostRecordingCrossplatformMediaretentionpoliciesInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording crossplatform mediaretentionpolicies internal server error response has a 2xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording crossplatform mediaretentionpolicies internal server error response has a 3xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording crossplatform mediaretentionpolicies internal server error response has a 4xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post recording crossplatform mediaretentionpolicies internal server error response has a 5xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post recording crossplatform mediaretentionpolicies internal server error response a status code equal to that given
func (o *PostRecordingCrossplatformMediaretentionpoliciesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable creates a PostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable with default headers values
func NewPostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable() *PostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable {
	return &PostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable{}
}

/*
PostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording crossplatform mediaretentionpolicies service unavailable response has a 2xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording crossplatform mediaretentionpolicies service unavailable response has a 3xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording crossplatform mediaretentionpolicies service unavailable response has a 4xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post recording crossplatform mediaretentionpolicies service unavailable response has a 5xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post recording crossplatform mediaretentionpolicies service unavailable response a status code equal to that given
func (o *PostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout creates a PostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout with default headers values
func NewPostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout() *PostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout {
	return &PostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout{}
}

/*
PostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post recording crossplatform mediaretentionpolicies gateway timeout response has a 2xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recording crossplatform mediaretentionpolicies gateway timeout response has a 3xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recording crossplatform mediaretentionpolicies gateway timeout response has a 4xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post recording crossplatform mediaretentionpolicies gateway timeout response has a 5xx status code
func (o *PostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post recording crossplatform mediaretentionpolicies gateway timeout response a status code equal to that given
func (o *PostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/recording/crossplatform/mediaretentionpolicies][%d] postRecordingCrossplatformMediaretentionpoliciesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingCrossplatformMediaretentionpoliciesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

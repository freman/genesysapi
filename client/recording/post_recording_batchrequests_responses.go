// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostRecordingBatchrequestsReader is a Reader for the PostRecordingBatchrequests structure.
type PostRecordingBatchrequestsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRecordingBatchrequestsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostRecordingBatchrequestsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRecordingBatchrequestsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostRecordingBatchrequestsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostRecordingBatchrequestsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRecordingBatchrequestsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostRecordingBatchrequestsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostRecordingBatchrequestsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostRecordingBatchrequestsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostRecordingBatchrequestsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostRecordingBatchrequestsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostRecordingBatchrequestsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRecordingBatchrequestsOK creates a PostRecordingBatchrequestsOK with default headers values
func NewPostRecordingBatchrequestsOK() *PostRecordingBatchrequestsOK {
	return &PostRecordingBatchrequestsOK{}
}

/*PostRecordingBatchrequestsOK handles this case with default header values.

successful operation
*/
type PostRecordingBatchrequestsOK struct {
	Payload *models.BatchDownloadJobSubmissionResult
}

func (o *PostRecordingBatchrequestsOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/batchrequests][%d] postRecordingBatchrequestsOK  %+v", 200, o.Payload)
}

func (o *PostRecordingBatchrequestsOK) GetPayload() *models.BatchDownloadJobSubmissionResult {
	return o.Payload
}

func (o *PostRecordingBatchrequestsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BatchDownloadJobSubmissionResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingBatchrequestsBadRequest creates a PostRecordingBatchrequestsBadRequest with default headers values
func NewPostRecordingBatchrequestsBadRequest() *PostRecordingBatchrequestsBadRequest {
	return &PostRecordingBatchrequestsBadRequest{}
}

/*PostRecordingBatchrequestsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostRecordingBatchrequestsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingBatchrequestsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/batchrequests][%d] postRecordingBatchrequestsBadRequest  %+v", 400, o.Payload)
}

func (o *PostRecordingBatchrequestsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingBatchrequestsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingBatchrequestsUnauthorized creates a PostRecordingBatchrequestsUnauthorized with default headers values
func NewPostRecordingBatchrequestsUnauthorized() *PostRecordingBatchrequestsUnauthorized {
	return &PostRecordingBatchrequestsUnauthorized{}
}

/*PostRecordingBatchrequestsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostRecordingBatchrequestsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingBatchrequestsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/batchrequests][%d] postRecordingBatchrequestsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRecordingBatchrequestsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingBatchrequestsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingBatchrequestsForbidden creates a PostRecordingBatchrequestsForbidden with default headers values
func NewPostRecordingBatchrequestsForbidden() *PostRecordingBatchrequestsForbidden {
	return &PostRecordingBatchrequestsForbidden{}
}

/*PostRecordingBatchrequestsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostRecordingBatchrequestsForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingBatchrequestsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/batchrequests][%d] postRecordingBatchrequestsForbidden  %+v", 403, o.Payload)
}

func (o *PostRecordingBatchrequestsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingBatchrequestsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingBatchrequestsNotFound creates a PostRecordingBatchrequestsNotFound with default headers values
func NewPostRecordingBatchrequestsNotFound() *PostRecordingBatchrequestsNotFound {
	return &PostRecordingBatchrequestsNotFound{}
}

/*PostRecordingBatchrequestsNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostRecordingBatchrequestsNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingBatchrequestsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/batchrequests][%d] postRecordingBatchrequestsNotFound  %+v", 404, o.Payload)
}

func (o *PostRecordingBatchrequestsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingBatchrequestsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingBatchrequestsRequestEntityTooLarge creates a PostRecordingBatchrequestsRequestEntityTooLarge with default headers values
func NewPostRecordingBatchrequestsRequestEntityTooLarge() *PostRecordingBatchrequestsRequestEntityTooLarge {
	return &PostRecordingBatchrequestsRequestEntityTooLarge{}
}

/*PostRecordingBatchrequestsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PostRecordingBatchrequestsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingBatchrequestsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/batchrequests][%d] postRecordingBatchrequestsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostRecordingBatchrequestsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingBatchrequestsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingBatchrequestsUnsupportedMediaType creates a PostRecordingBatchrequestsUnsupportedMediaType with default headers values
func NewPostRecordingBatchrequestsUnsupportedMediaType() *PostRecordingBatchrequestsUnsupportedMediaType {
	return &PostRecordingBatchrequestsUnsupportedMediaType{}
}

/*PostRecordingBatchrequestsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostRecordingBatchrequestsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingBatchrequestsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/batchrequests][%d] postRecordingBatchrequestsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostRecordingBatchrequestsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingBatchrequestsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingBatchrequestsTooManyRequests creates a PostRecordingBatchrequestsTooManyRequests with default headers values
func NewPostRecordingBatchrequestsTooManyRequests() *PostRecordingBatchrequestsTooManyRequests {
	return &PostRecordingBatchrequestsTooManyRequests{}
}

/*PostRecordingBatchrequestsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PostRecordingBatchrequestsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingBatchrequestsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/batchrequests][%d] postRecordingBatchrequestsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostRecordingBatchrequestsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingBatchrequestsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingBatchrequestsInternalServerError creates a PostRecordingBatchrequestsInternalServerError with default headers values
func NewPostRecordingBatchrequestsInternalServerError() *PostRecordingBatchrequestsInternalServerError {
	return &PostRecordingBatchrequestsInternalServerError{}
}

/*PostRecordingBatchrequestsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostRecordingBatchrequestsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingBatchrequestsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/batchrequests][%d] postRecordingBatchrequestsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostRecordingBatchrequestsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingBatchrequestsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingBatchrequestsServiceUnavailable creates a PostRecordingBatchrequestsServiceUnavailable with default headers values
func NewPostRecordingBatchrequestsServiceUnavailable() *PostRecordingBatchrequestsServiceUnavailable {
	return &PostRecordingBatchrequestsServiceUnavailable{}
}

/*PostRecordingBatchrequestsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostRecordingBatchrequestsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingBatchrequestsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/batchrequests][%d] postRecordingBatchrequestsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostRecordingBatchrequestsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingBatchrequestsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecordingBatchrequestsGatewayTimeout creates a PostRecordingBatchrequestsGatewayTimeout with default headers values
func NewPostRecordingBatchrequestsGatewayTimeout() *PostRecordingBatchrequestsGatewayTimeout {
	return &PostRecordingBatchrequestsGatewayTimeout{}
}

/*PostRecordingBatchrequestsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostRecordingBatchrequestsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostRecordingBatchrequestsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/recording/batchrequests][%d] postRecordingBatchrequestsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostRecordingBatchrequestsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRecordingBatchrequestsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutOrphanrecordingReader is a Reader for the PutOrphanrecording structure.
type PutOrphanrecordingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutOrphanrecordingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutOrphanrecordingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutOrphanrecordingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutOrphanrecordingUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutOrphanrecordingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutOrphanrecordingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutOrphanrecordingRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutOrphanrecordingUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutOrphanrecordingTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutOrphanrecordingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutOrphanrecordingServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutOrphanrecordingGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutOrphanrecordingOK creates a PutOrphanrecordingOK with default headers values
func NewPutOrphanrecordingOK() *PutOrphanrecordingOK {
	return &PutOrphanrecordingOK{}
}

/*PutOrphanrecordingOK handles this case with default header values.

successful operation
*/
type PutOrphanrecordingOK struct {
	Payload *models.Recording
}

func (o *PutOrphanrecordingOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/orphanrecordings/{orphanId}][%d] putOrphanrecordingOK  %+v", 200, o.Payload)
}

func (o *PutOrphanrecordingOK) GetPayload() *models.Recording {
	return o.Payload
}

func (o *PutOrphanrecordingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Recording)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOrphanrecordingBadRequest creates a PutOrphanrecordingBadRequest with default headers values
func NewPutOrphanrecordingBadRequest() *PutOrphanrecordingBadRequest {
	return &PutOrphanrecordingBadRequest{}
}

/*PutOrphanrecordingBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutOrphanrecordingBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutOrphanrecordingBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/orphanrecordings/{orphanId}][%d] putOrphanrecordingBadRequest  %+v", 400, o.Payload)
}

func (o *PutOrphanrecordingBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOrphanrecordingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOrphanrecordingUnauthorized creates a PutOrphanrecordingUnauthorized with default headers values
func NewPutOrphanrecordingUnauthorized() *PutOrphanrecordingUnauthorized {
	return &PutOrphanrecordingUnauthorized{}
}

/*PutOrphanrecordingUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutOrphanrecordingUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutOrphanrecordingUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/orphanrecordings/{orphanId}][%d] putOrphanrecordingUnauthorized  %+v", 401, o.Payload)
}

func (o *PutOrphanrecordingUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOrphanrecordingUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOrphanrecordingForbidden creates a PutOrphanrecordingForbidden with default headers values
func NewPutOrphanrecordingForbidden() *PutOrphanrecordingForbidden {
	return &PutOrphanrecordingForbidden{}
}

/*PutOrphanrecordingForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutOrphanrecordingForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutOrphanrecordingForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/orphanrecordings/{orphanId}][%d] putOrphanrecordingForbidden  %+v", 403, o.Payload)
}

func (o *PutOrphanrecordingForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOrphanrecordingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOrphanrecordingNotFound creates a PutOrphanrecordingNotFound with default headers values
func NewPutOrphanrecordingNotFound() *PutOrphanrecordingNotFound {
	return &PutOrphanrecordingNotFound{}
}

/*PutOrphanrecordingNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutOrphanrecordingNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutOrphanrecordingNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/orphanrecordings/{orphanId}][%d] putOrphanrecordingNotFound  %+v", 404, o.Payload)
}

func (o *PutOrphanrecordingNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOrphanrecordingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOrphanrecordingRequestEntityTooLarge creates a PutOrphanrecordingRequestEntityTooLarge with default headers values
func NewPutOrphanrecordingRequestEntityTooLarge() *PutOrphanrecordingRequestEntityTooLarge {
	return &PutOrphanrecordingRequestEntityTooLarge{}
}

/*PutOrphanrecordingRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PutOrphanrecordingRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutOrphanrecordingRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/orphanrecordings/{orphanId}][%d] putOrphanrecordingRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutOrphanrecordingRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOrphanrecordingRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOrphanrecordingUnsupportedMediaType creates a PutOrphanrecordingUnsupportedMediaType with default headers values
func NewPutOrphanrecordingUnsupportedMediaType() *PutOrphanrecordingUnsupportedMediaType {
	return &PutOrphanrecordingUnsupportedMediaType{}
}

/*PutOrphanrecordingUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutOrphanrecordingUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutOrphanrecordingUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/orphanrecordings/{orphanId}][%d] putOrphanrecordingUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutOrphanrecordingUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOrphanrecordingUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOrphanrecordingTooManyRequests creates a PutOrphanrecordingTooManyRequests with default headers values
func NewPutOrphanrecordingTooManyRequests() *PutOrphanrecordingTooManyRequests {
	return &PutOrphanrecordingTooManyRequests{}
}

/*PutOrphanrecordingTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PutOrphanrecordingTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutOrphanrecordingTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/orphanrecordings/{orphanId}][%d] putOrphanrecordingTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutOrphanrecordingTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOrphanrecordingTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOrphanrecordingInternalServerError creates a PutOrphanrecordingInternalServerError with default headers values
func NewPutOrphanrecordingInternalServerError() *PutOrphanrecordingInternalServerError {
	return &PutOrphanrecordingInternalServerError{}
}

/*PutOrphanrecordingInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutOrphanrecordingInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutOrphanrecordingInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/orphanrecordings/{orphanId}][%d] putOrphanrecordingInternalServerError  %+v", 500, o.Payload)
}

func (o *PutOrphanrecordingInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOrphanrecordingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOrphanrecordingServiceUnavailable creates a PutOrphanrecordingServiceUnavailable with default headers values
func NewPutOrphanrecordingServiceUnavailable() *PutOrphanrecordingServiceUnavailable {
	return &PutOrphanrecordingServiceUnavailable{}
}

/*PutOrphanrecordingServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutOrphanrecordingServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutOrphanrecordingServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/orphanrecordings/{orphanId}][%d] putOrphanrecordingServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutOrphanrecordingServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOrphanrecordingServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOrphanrecordingGatewayTimeout creates a PutOrphanrecordingGatewayTimeout with default headers values
func NewPutOrphanrecordingGatewayTimeout() *PutOrphanrecordingGatewayTimeout {
	return &PutOrphanrecordingGatewayTimeout{}
}

/*PutOrphanrecordingGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutOrphanrecordingGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutOrphanrecordingGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/orphanrecordings/{orphanId}][%d] putOrphanrecordingGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutOrphanrecordingGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutOrphanrecordingGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

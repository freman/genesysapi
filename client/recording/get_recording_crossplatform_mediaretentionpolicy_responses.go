// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRecordingCrossplatformMediaretentionpolicyReader is a Reader for the GetRecordingCrossplatformMediaretentionpolicy structure.
type GetRecordingCrossplatformMediaretentionpolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRecordingCrossplatformMediaretentionpolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRecordingCrossplatformMediaretentionpolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRecordingCrossplatformMediaretentionpolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRecordingCrossplatformMediaretentionpolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRecordingCrossplatformMediaretentionpolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRecordingCrossplatformMediaretentionpolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRecordingCrossplatformMediaretentionpolicyRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRecordingCrossplatformMediaretentionpolicyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRecordingCrossplatformMediaretentionpolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRecordingCrossplatformMediaretentionpolicyServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRecordingCrossplatformMediaretentionpolicyGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRecordingCrossplatformMediaretentionpolicyOK creates a GetRecordingCrossplatformMediaretentionpolicyOK with default headers values
func NewGetRecordingCrossplatformMediaretentionpolicyOK() *GetRecordingCrossplatformMediaretentionpolicyOK {
	return &GetRecordingCrossplatformMediaretentionpolicyOK{}
}

/*GetRecordingCrossplatformMediaretentionpolicyOK handles this case with default header values.

successful operation
*/
type GetRecordingCrossplatformMediaretentionpolicyOK struct {
	Payload *models.CrossPlatformPolicy
}

func (o *GetRecordingCrossplatformMediaretentionpolicyOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] getRecordingCrossplatformMediaretentionpolicyOK  %+v", 200, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpolicyOK) GetPayload() *models.CrossPlatformPolicy {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CrossPlatformPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpolicyBadRequest creates a GetRecordingCrossplatformMediaretentionpolicyBadRequest with default headers values
func NewGetRecordingCrossplatformMediaretentionpolicyBadRequest() *GetRecordingCrossplatformMediaretentionpolicyBadRequest {
	return &GetRecordingCrossplatformMediaretentionpolicyBadRequest{}
}

/*GetRecordingCrossplatformMediaretentionpolicyBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRecordingCrossplatformMediaretentionpolicyBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingCrossplatformMediaretentionpolicyBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] getRecordingCrossplatformMediaretentionpolicyBadRequest  %+v", 400, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpolicyBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpolicyUnauthorized creates a GetRecordingCrossplatformMediaretentionpolicyUnauthorized with default headers values
func NewGetRecordingCrossplatformMediaretentionpolicyUnauthorized() *GetRecordingCrossplatformMediaretentionpolicyUnauthorized {
	return &GetRecordingCrossplatformMediaretentionpolicyUnauthorized{}
}

/*GetRecordingCrossplatformMediaretentionpolicyUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRecordingCrossplatformMediaretentionpolicyUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingCrossplatformMediaretentionpolicyUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] getRecordingCrossplatformMediaretentionpolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpolicyUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpolicyForbidden creates a GetRecordingCrossplatformMediaretentionpolicyForbidden with default headers values
func NewGetRecordingCrossplatformMediaretentionpolicyForbidden() *GetRecordingCrossplatformMediaretentionpolicyForbidden {
	return &GetRecordingCrossplatformMediaretentionpolicyForbidden{}
}

/*GetRecordingCrossplatformMediaretentionpolicyForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetRecordingCrossplatformMediaretentionpolicyForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingCrossplatformMediaretentionpolicyForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] getRecordingCrossplatformMediaretentionpolicyForbidden  %+v", 403, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpolicyForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpolicyNotFound creates a GetRecordingCrossplatformMediaretentionpolicyNotFound with default headers values
func NewGetRecordingCrossplatformMediaretentionpolicyNotFound() *GetRecordingCrossplatformMediaretentionpolicyNotFound {
	return &GetRecordingCrossplatformMediaretentionpolicyNotFound{}
}

/*GetRecordingCrossplatformMediaretentionpolicyNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetRecordingCrossplatformMediaretentionpolicyNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingCrossplatformMediaretentionpolicyNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] getRecordingCrossplatformMediaretentionpolicyNotFound  %+v", 404, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpolicyNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpolicyRequestTimeout creates a GetRecordingCrossplatformMediaretentionpolicyRequestTimeout with default headers values
func NewGetRecordingCrossplatformMediaretentionpolicyRequestTimeout() *GetRecordingCrossplatformMediaretentionpolicyRequestTimeout {
	return &GetRecordingCrossplatformMediaretentionpolicyRequestTimeout{}
}

/*GetRecordingCrossplatformMediaretentionpolicyRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRecordingCrossplatformMediaretentionpolicyRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingCrossplatformMediaretentionpolicyRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] getRecordingCrossplatformMediaretentionpolicyRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpolicyRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpolicyRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge creates a GetRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge with default headers values
func NewGetRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge() *GetRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge {
	return &GetRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge{}
}

/*GetRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] getRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType creates a GetRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType with default headers values
func NewGetRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType() *GetRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType {
	return &GetRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType{}
}

/*GetRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] getRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpolicyTooManyRequests creates a GetRecordingCrossplatformMediaretentionpolicyTooManyRequests with default headers values
func NewGetRecordingCrossplatformMediaretentionpolicyTooManyRequests() *GetRecordingCrossplatformMediaretentionpolicyTooManyRequests {
	return &GetRecordingCrossplatformMediaretentionpolicyTooManyRequests{}
}

/*GetRecordingCrossplatformMediaretentionpolicyTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRecordingCrossplatformMediaretentionpolicyTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingCrossplatformMediaretentionpolicyTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] getRecordingCrossplatformMediaretentionpolicyTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpolicyTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpolicyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpolicyInternalServerError creates a GetRecordingCrossplatformMediaretentionpolicyInternalServerError with default headers values
func NewGetRecordingCrossplatformMediaretentionpolicyInternalServerError() *GetRecordingCrossplatformMediaretentionpolicyInternalServerError {
	return &GetRecordingCrossplatformMediaretentionpolicyInternalServerError{}
}

/*GetRecordingCrossplatformMediaretentionpolicyInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRecordingCrossplatformMediaretentionpolicyInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingCrossplatformMediaretentionpolicyInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] getRecordingCrossplatformMediaretentionpolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpolicyInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpolicyServiceUnavailable creates a GetRecordingCrossplatformMediaretentionpolicyServiceUnavailable with default headers values
func NewGetRecordingCrossplatformMediaretentionpolicyServiceUnavailable() *GetRecordingCrossplatformMediaretentionpolicyServiceUnavailable {
	return &GetRecordingCrossplatformMediaretentionpolicyServiceUnavailable{}
}

/*GetRecordingCrossplatformMediaretentionpolicyServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRecordingCrossplatformMediaretentionpolicyServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingCrossplatformMediaretentionpolicyServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] getRecordingCrossplatformMediaretentionpolicyServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpolicyServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpolicyServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingCrossplatformMediaretentionpolicyGatewayTimeout creates a GetRecordingCrossplatformMediaretentionpolicyGatewayTimeout with default headers values
func NewGetRecordingCrossplatformMediaretentionpolicyGatewayTimeout() *GetRecordingCrossplatformMediaretentionpolicyGatewayTimeout {
	return &GetRecordingCrossplatformMediaretentionpolicyGatewayTimeout{}
}

/*GetRecordingCrossplatformMediaretentionpolicyGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetRecordingCrossplatformMediaretentionpolicyGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetRecordingCrossplatformMediaretentionpolicyGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] getRecordingCrossplatformMediaretentionpolicyGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRecordingCrossplatformMediaretentionpolicyGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRecordingCrossplatformMediaretentionpolicyGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchRecordingCrossplatformMediaretentionpolicyReader is a Reader for the PatchRecordingCrossplatformMediaretentionpolicy structure.
type PatchRecordingCrossplatformMediaretentionpolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchRecordingCrossplatformMediaretentionpolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchRecordingCrossplatformMediaretentionpolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchRecordingCrossplatformMediaretentionpolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchRecordingCrossplatformMediaretentionpolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchRecordingCrossplatformMediaretentionpolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchRecordingCrossplatformMediaretentionpolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchRecordingCrossplatformMediaretentionpolicyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchRecordingCrossplatformMediaretentionpolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchRecordingCrossplatformMediaretentionpolicyServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchRecordingCrossplatformMediaretentionpolicyGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchRecordingCrossplatformMediaretentionpolicyOK creates a PatchRecordingCrossplatformMediaretentionpolicyOK with default headers values
func NewPatchRecordingCrossplatformMediaretentionpolicyOK() *PatchRecordingCrossplatformMediaretentionpolicyOK {
	return &PatchRecordingCrossplatformMediaretentionpolicyOK{}
}

/*PatchRecordingCrossplatformMediaretentionpolicyOK handles this case with default header values.

successful operation
*/
type PatchRecordingCrossplatformMediaretentionpolicyOK struct {
	Payload *models.CrossPlatformPolicy
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] patchRecordingCrossplatformMediaretentionpolicyOK  %+v", 200, o.Payload)
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyOK) GetPayload() *models.CrossPlatformPolicy {
	return o.Payload
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CrossPlatformPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingCrossplatformMediaretentionpolicyBadRequest creates a PatchRecordingCrossplatformMediaretentionpolicyBadRequest with default headers values
func NewPatchRecordingCrossplatformMediaretentionpolicyBadRequest() *PatchRecordingCrossplatformMediaretentionpolicyBadRequest {
	return &PatchRecordingCrossplatformMediaretentionpolicyBadRequest{}
}

/*PatchRecordingCrossplatformMediaretentionpolicyBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchRecordingCrossplatformMediaretentionpolicyBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] patchRecordingCrossplatformMediaretentionpolicyBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingCrossplatformMediaretentionpolicyUnauthorized creates a PatchRecordingCrossplatformMediaretentionpolicyUnauthorized with default headers values
func NewPatchRecordingCrossplatformMediaretentionpolicyUnauthorized() *PatchRecordingCrossplatformMediaretentionpolicyUnauthorized {
	return &PatchRecordingCrossplatformMediaretentionpolicyUnauthorized{}
}

/*PatchRecordingCrossplatformMediaretentionpolicyUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchRecordingCrossplatformMediaretentionpolicyUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] patchRecordingCrossplatformMediaretentionpolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingCrossplatformMediaretentionpolicyForbidden creates a PatchRecordingCrossplatformMediaretentionpolicyForbidden with default headers values
func NewPatchRecordingCrossplatformMediaretentionpolicyForbidden() *PatchRecordingCrossplatformMediaretentionpolicyForbidden {
	return &PatchRecordingCrossplatformMediaretentionpolicyForbidden{}
}

/*PatchRecordingCrossplatformMediaretentionpolicyForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchRecordingCrossplatformMediaretentionpolicyForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] patchRecordingCrossplatformMediaretentionpolicyForbidden  %+v", 403, o.Payload)
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingCrossplatformMediaretentionpolicyNotFound creates a PatchRecordingCrossplatformMediaretentionpolicyNotFound with default headers values
func NewPatchRecordingCrossplatformMediaretentionpolicyNotFound() *PatchRecordingCrossplatformMediaretentionpolicyNotFound {
	return &PatchRecordingCrossplatformMediaretentionpolicyNotFound{}
}

/*PatchRecordingCrossplatformMediaretentionpolicyNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchRecordingCrossplatformMediaretentionpolicyNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] patchRecordingCrossplatformMediaretentionpolicyNotFound  %+v", 404, o.Payload)
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge creates a PatchRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge with default headers values
func NewPatchRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge() *PatchRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge {
	return &PatchRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge{}
}

/*PatchRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PatchRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] patchRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType creates a PatchRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType with default headers values
func NewPatchRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType() *PatchRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType {
	return &PatchRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType{}
}

/*PatchRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] patchRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingCrossplatformMediaretentionpolicyTooManyRequests creates a PatchRecordingCrossplatformMediaretentionpolicyTooManyRequests with default headers values
func NewPatchRecordingCrossplatformMediaretentionpolicyTooManyRequests() *PatchRecordingCrossplatformMediaretentionpolicyTooManyRequests {
	return &PatchRecordingCrossplatformMediaretentionpolicyTooManyRequests{}
}

/*PatchRecordingCrossplatformMediaretentionpolicyTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PatchRecordingCrossplatformMediaretentionpolicyTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] patchRecordingCrossplatformMediaretentionpolicyTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingCrossplatformMediaretentionpolicyInternalServerError creates a PatchRecordingCrossplatformMediaretentionpolicyInternalServerError with default headers values
func NewPatchRecordingCrossplatformMediaretentionpolicyInternalServerError() *PatchRecordingCrossplatformMediaretentionpolicyInternalServerError {
	return &PatchRecordingCrossplatformMediaretentionpolicyInternalServerError{}
}

/*PatchRecordingCrossplatformMediaretentionpolicyInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchRecordingCrossplatformMediaretentionpolicyInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] patchRecordingCrossplatformMediaretentionpolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingCrossplatformMediaretentionpolicyServiceUnavailable creates a PatchRecordingCrossplatformMediaretentionpolicyServiceUnavailable with default headers values
func NewPatchRecordingCrossplatformMediaretentionpolicyServiceUnavailable() *PatchRecordingCrossplatformMediaretentionpolicyServiceUnavailable {
	return &PatchRecordingCrossplatformMediaretentionpolicyServiceUnavailable{}
}

/*PatchRecordingCrossplatformMediaretentionpolicyServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchRecordingCrossplatformMediaretentionpolicyServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] patchRecordingCrossplatformMediaretentionpolicyServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingCrossplatformMediaretentionpolicyGatewayTimeout creates a PatchRecordingCrossplatformMediaretentionpolicyGatewayTimeout with default headers values
func NewPatchRecordingCrossplatformMediaretentionpolicyGatewayTimeout() *PatchRecordingCrossplatformMediaretentionpolicyGatewayTimeout {
	return &PatchRecordingCrossplatformMediaretentionpolicyGatewayTimeout{}
}

/*PatchRecordingCrossplatformMediaretentionpolicyGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchRecordingCrossplatformMediaretentionpolicyGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] patchRecordingCrossplatformMediaretentionpolicyGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingCrossplatformMediaretentionpolicyGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

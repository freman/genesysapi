// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteRecordingCrossplatformMediaretentionpolicyReader is a Reader for the DeleteRecordingCrossplatformMediaretentionpolicy structure.
type DeleteRecordingCrossplatformMediaretentionpolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRecordingCrossplatformMediaretentionpolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyOK creates a DeleteRecordingCrossplatformMediaretentionpolicyOK with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyOK() *DeleteRecordingCrossplatformMediaretentionpolicyOK {
	return &DeleteRecordingCrossplatformMediaretentionpolicyOK{}
}

/*
DeleteRecordingCrossplatformMediaretentionpolicyOK describes a response with status code 200, with default header values.

Operation was successful.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyOK struct {
}

// IsSuccess returns true when this delete recording crossplatform mediaretentionpolicy o k response has a 2xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete recording crossplatform mediaretentionpolicy o k response has a 3xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording crossplatform mediaretentionpolicy o k response has a 4xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete recording crossplatform mediaretentionpolicy o k response has a 5xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete recording crossplatform mediaretentionpolicy o k response a status code equal to that given
func (o *DeleteRecordingCrossplatformMediaretentionpolicyOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyOK ", 200)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyOK) String() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyOK ", 200)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyBadRequest creates a DeleteRecordingCrossplatformMediaretentionpolicyBadRequest with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyBadRequest() *DeleteRecordingCrossplatformMediaretentionpolicyBadRequest {
	return &DeleteRecordingCrossplatformMediaretentionpolicyBadRequest{}
}

/*
DeleteRecordingCrossplatformMediaretentionpolicyBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete recording crossplatform mediaretentionpolicy bad request response has a 2xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete recording crossplatform mediaretentionpolicy bad request response has a 3xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording crossplatform mediaretentionpolicy bad request response has a 4xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete recording crossplatform mediaretentionpolicy bad request response has a 5xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete recording crossplatform mediaretentionpolicy bad request response a status code equal to that given
func (o *DeleteRecordingCrossplatformMediaretentionpolicyBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyUnauthorized creates a DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyUnauthorized() *DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized {
	return &DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized{}
}

/*
DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete recording crossplatform mediaretentionpolicy unauthorized response has a 2xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete recording crossplatform mediaretentionpolicy unauthorized response has a 3xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording crossplatform mediaretentionpolicy unauthorized response has a 4xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete recording crossplatform mediaretentionpolicy unauthorized response has a 5xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete recording crossplatform mediaretentionpolicy unauthorized response a status code equal to that given
func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyForbidden creates a DeleteRecordingCrossplatformMediaretentionpolicyForbidden with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyForbidden() *DeleteRecordingCrossplatformMediaretentionpolicyForbidden {
	return &DeleteRecordingCrossplatformMediaretentionpolicyForbidden{}
}

/*
DeleteRecordingCrossplatformMediaretentionpolicyForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete recording crossplatform mediaretentionpolicy forbidden response has a 2xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete recording crossplatform mediaretentionpolicy forbidden response has a 3xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording crossplatform mediaretentionpolicy forbidden response has a 4xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete recording crossplatform mediaretentionpolicy forbidden response has a 5xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete recording crossplatform mediaretentionpolicy forbidden response a status code equal to that given
func (o *DeleteRecordingCrossplatformMediaretentionpolicyForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyForbidden  %+v", 403, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyForbidden  %+v", 403, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyNotFound creates a DeleteRecordingCrossplatformMediaretentionpolicyNotFound with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyNotFound() *DeleteRecordingCrossplatformMediaretentionpolicyNotFound {
	return &DeleteRecordingCrossplatformMediaretentionpolicyNotFound{}
}

/*
DeleteRecordingCrossplatformMediaretentionpolicyNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete recording crossplatform mediaretentionpolicy not found response has a 2xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete recording crossplatform mediaretentionpolicy not found response has a 3xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording crossplatform mediaretentionpolicy not found response has a 4xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete recording crossplatform mediaretentionpolicy not found response has a 5xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete recording crossplatform mediaretentionpolicy not found response a status code equal to that given
func (o *DeleteRecordingCrossplatformMediaretentionpolicyNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout creates a DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout() *DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout {
	return &DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout{}
}

/*
DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete recording crossplatform mediaretentionpolicy request timeout response has a 2xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete recording crossplatform mediaretentionpolicy request timeout response has a 3xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording crossplatform mediaretentionpolicy request timeout response has a 4xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete recording crossplatform mediaretentionpolicy request timeout response has a 5xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this delete recording crossplatform mediaretentionpolicy request timeout response a status code equal to that given
func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge creates a DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge() *DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge {
	return &DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge{}
}

/*
DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete recording crossplatform mediaretentionpolicy request entity too large response has a 2xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete recording crossplatform mediaretentionpolicy request entity too large response has a 3xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording crossplatform mediaretentionpolicy request entity too large response has a 4xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete recording crossplatform mediaretentionpolicy request entity too large response has a 5xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this delete recording crossplatform mediaretentionpolicy request entity too large response a status code equal to that given
func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType creates a DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType() *DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType {
	return &DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType{}
}

/*
DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete recording crossplatform mediaretentionpolicy unsupported media type response has a 2xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete recording crossplatform mediaretentionpolicy unsupported media type response has a 3xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording crossplatform mediaretentionpolicy unsupported media type response has a 4xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete recording crossplatform mediaretentionpolicy unsupported media type response has a 5xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this delete recording crossplatform mediaretentionpolicy unsupported media type response a status code equal to that given
func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests creates a DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests() *DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests {
	return &DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests{}
}

/*
DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete recording crossplatform mediaretentionpolicy too many requests response has a 2xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete recording crossplatform mediaretentionpolicy too many requests response has a 3xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording crossplatform mediaretentionpolicy too many requests response has a 4xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete recording crossplatform mediaretentionpolicy too many requests response has a 5xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete recording crossplatform mediaretentionpolicy too many requests response a status code equal to that given
func (o *DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyInternalServerError creates a DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyInternalServerError() *DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError {
	return &DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError{}
}

/*
DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete recording crossplatform mediaretentionpolicy internal server error response has a 2xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete recording crossplatform mediaretentionpolicy internal server error response has a 3xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording crossplatform mediaretentionpolicy internal server error response has a 4xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete recording crossplatform mediaretentionpolicy internal server error response has a 5xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete recording crossplatform mediaretentionpolicy internal server error response a status code equal to that given
func (o *DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable creates a DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable() *DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable {
	return &DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable{}
}

/*
DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete recording crossplatform mediaretentionpolicy service unavailable response has a 2xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete recording crossplatform mediaretentionpolicy service unavailable response has a 3xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording crossplatform mediaretentionpolicy service unavailable response has a 4xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete recording crossplatform mediaretentionpolicy service unavailable response has a 5xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete recording crossplatform mediaretentionpolicy service unavailable response a status code equal to that given
func (o *DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout creates a DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout() *DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout {
	return &DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout{}
}

/*
DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete recording crossplatform mediaretentionpolicy gateway timeout response has a 2xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete recording crossplatform mediaretentionpolicy gateway timeout response has a 3xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording crossplatform mediaretentionpolicy gateway timeout response has a 4xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete recording crossplatform mediaretentionpolicy gateway timeout response has a 5xx status code
func (o *DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this delete recording crossplatform mediaretentionpolicy gateway timeout response a status code equal to that given
func (o *DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

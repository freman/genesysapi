// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteRecordingCrossplatformMediaretentionpolicyReader is a Reader for the DeleteRecordingCrossplatformMediaretentionpolicy structure.
type DeleteRecordingCrossplatformMediaretentionpolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRecordingCrossplatformMediaretentionpolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyOK creates a DeleteRecordingCrossplatformMediaretentionpolicyOK with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyOK() *DeleteRecordingCrossplatformMediaretentionpolicyOK {
	return &DeleteRecordingCrossplatformMediaretentionpolicyOK{}
}

/*DeleteRecordingCrossplatformMediaretentionpolicyOK handles this case with default header values.

Operation was successful.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyOK struct {
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyOK ", 200)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyBadRequest creates a DeleteRecordingCrossplatformMediaretentionpolicyBadRequest with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyBadRequest() *DeleteRecordingCrossplatformMediaretentionpolicyBadRequest {
	return &DeleteRecordingCrossplatformMediaretentionpolicyBadRequest{}
}

/*DeleteRecordingCrossplatformMediaretentionpolicyBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyBadRequest struct {
	Payload *models.ErrorBody
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyUnauthorized creates a DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyUnauthorized() *DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized {
	return &DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized{}
}

/*DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyForbidden creates a DeleteRecordingCrossplatformMediaretentionpolicyForbidden with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyForbidden() *DeleteRecordingCrossplatformMediaretentionpolicyForbidden {
	return &DeleteRecordingCrossplatformMediaretentionpolicyForbidden{}
}

/*DeleteRecordingCrossplatformMediaretentionpolicyForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyForbidden struct {
	Payload *models.ErrorBody
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyForbidden  %+v", 403, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyNotFound creates a DeleteRecordingCrossplatformMediaretentionpolicyNotFound with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyNotFound() *DeleteRecordingCrossplatformMediaretentionpolicyNotFound {
	return &DeleteRecordingCrossplatformMediaretentionpolicyNotFound{}
}

/*DeleteRecordingCrossplatformMediaretentionpolicyNotFound handles this case with default header values.

The requested resource was not found.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyNotFound struct {
	Payload *models.ErrorBody
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout creates a DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout() *DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout {
	return &DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout{}
}

/*DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge creates a DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge() *DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge {
	return &DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge{}
}

/*DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType creates a DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType() *DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType {
	return &DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType{}
}

/*DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests creates a DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests() *DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests {
	return &DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests{}
}

/*DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyInternalServerError creates a DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyInternalServerError() *DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError {
	return &DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError{}
}

/*DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable creates a DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable() *DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable {
	return &DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable{}
}

/*DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout creates a DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout with default headers values
func NewDeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout() *DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout {
	return &DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout{}
}

/*DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout handles this case with default header values.

The request timed out.
*/
type DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}][%d] deleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRecordingCrossplatformMediaretentionpolicyGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

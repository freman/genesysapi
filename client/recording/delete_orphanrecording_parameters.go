// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteOrphanrecordingParams creates a new DeleteOrphanrecordingParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteOrphanrecordingParams() *DeleteOrphanrecordingParams {
	return &DeleteOrphanrecordingParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteOrphanrecordingParamsWithTimeout creates a new DeleteOrphanrecordingParams object
// with the ability to set a timeout on a request.
func NewDeleteOrphanrecordingParamsWithTimeout(timeout time.Duration) *DeleteOrphanrecordingParams {
	return &DeleteOrphanrecordingParams{
		timeout: timeout,
	}
}

// NewDeleteOrphanrecordingParamsWithContext creates a new DeleteOrphanrecordingParams object
// with the ability to set a context for a request.
func NewDeleteOrphanrecordingParamsWithContext(ctx context.Context) *DeleteOrphanrecordingParams {
	return &DeleteOrphanrecordingParams{
		Context: ctx,
	}
}

// NewDeleteOrphanrecordingParamsWithHTTPClient creates a new DeleteOrphanrecordingParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteOrphanrecordingParamsWithHTTPClient(client *http.Client) *DeleteOrphanrecordingParams {
	return &DeleteOrphanrecordingParams{
		HTTPClient: client,
	}
}

/*
DeleteOrphanrecordingParams contains all the parameters to send to the API endpoint

	for the delete orphanrecording operation.

	Typically these are written to a http.Request.
*/
type DeleteOrphanrecordingParams struct {

	/* OrphanID.

	   Orphan ID
	*/
	OrphanID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete orphanrecording params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteOrphanrecordingParams) WithDefaults() *DeleteOrphanrecordingParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete orphanrecording params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteOrphanrecordingParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete orphanrecording params
func (o *DeleteOrphanrecordingParams) WithTimeout(timeout time.Duration) *DeleteOrphanrecordingParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete orphanrecording params
func (o *DeleteOrphanrecordingParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete orphanrecording params
func (o *DeleteOrphanrecordingParams) WithContext(ctx context.Context) *DeleteOrphanrecordingParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete orphanrecording params
func (o *DeleteOrphanrecordingParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete orphanrecording params
func (o *DeleteOrphanrecordingParams) WithHTTPClient(client *http.Client) *DeleteOrphanrecordingParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete orphanrecording params
func (o *DeleteOrphanrecordingParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrphanID adds the orphanID to the delete orphanrecording params
func (o *DeleteOrphanrecordingParams) WithOrphanID(orphanID string) *DeleteOrphanrecordingParams {
	o.SetOrphanID(orphanID)
	return o
}

// SetOrphanID adds the orphanId to the delete orphanrecording params
func (o *DeleteOrphanrecordingParams) SetOrphanID(orphanID string) {
	o.OrphanID = orphanID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteOrphanrecordingParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param orphanId
	if err := r.SetPathParam("orphanId", o.OrphanID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

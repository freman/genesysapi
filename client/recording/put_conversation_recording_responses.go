// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutConversationRecordingReader is a Reader for the PutConversationRecording structure.
type PutConversationRecordingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutConversationRecordingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutConversationRecordingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutConversationRecordingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutConversationRecordingUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutConversationRecordingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutConversationRecordingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutConversationRecordingRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutConversationRecordingRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutConversationRecordingUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutConversationRecordingTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutConversationRecordingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutConversationRecordingServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutConversationRecordingGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutConversationRecordingOK creates a PutConversationRecordingOK with default headers values
func NewPutConversationRecordingOK() *PutConversationRecordingOK {
	return &PutConversationRecordingOK{}
}

/*
PutConversationRecordingOK describes a response with status code 200, with default header values.

successful operation
*/
type PutConversationRecordingOK struct {
	Payload *models.Recording
}

// IsSuccess returns true when this put conversation recording o k response has a 2xx status code
func (o *PutConversationRecordingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put conversation recording o k response has a 3xx status code
func (o *PutConversationRecordingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation recording o k response has a 4xx status code
func (o *PutConversationRecordingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put conversation recording o k response has a 5xx status code
func (o *PutConversationRecordingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation recording o k response a status code equal to that given
func (o *PutConversationRecordingOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutConversationRecordingOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingOK  %+v", 200, o.Payload)
}

func (o *PutConversationRecordingOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingOK  %+v", 200, o.Payload)
}

func (o *PutConversationRecordingOK) GetPayload() *models.Recording {
	return o.Payload
}

func (o *PutConversationRecordingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Recording)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationRecordingBadRequest creates a PutConversationRecordingBadRequest with default headers values
func NewPutConversationRecordingBadRequest() *PutConversationRecordingBadRequest {
	return &PutConversationRecordingBadRequest{}
}

/*
PutConversationRecordingBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutConversationRecordingBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation recording bad request response has a 2xx status code
func (o *PutConversationRecordingBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation recording bad request response has a 3xx status code
func (o *PutConversationRecordingBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation recording bad request response has a 4xx status code
func (o *PutConversationRecordingBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation recording bad request response has a 5xx status code
func (o *PutConversationRecordingBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation recording bad request response a status code equal to that given
func (o *PutConversationRecordingBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutConversationRecordingBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingBadRequest  %+v", 400, o.Payload)
}

func (o *PutConversationRecordingBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingBadRequest  %+v", 400, o.Payload)
}

func (o *PutConversationRecordingBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationRecordingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationRecordingUnauthorized creates a PutConversationRecordingUnauthorized with default headers values
func NewPutConversationRecordingUnauthorized() *PutConversationRecordingUnauthorized {
	return &PutConversationRecordingUnauthorized{}
}

/*
PutConversationRecordingUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutConversationRecordingUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation recording unauthorized response has a 2xx status code
func (o *PutConversationRecordingUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation recording unauthorized response has a 3xx status code
func (o *PutConversationRecordingUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation recording unauthorized response has a 4xx status code
func (o *PutConversationRecordingUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation recording unauthorized response has a 5xx status code
func (o *PutConversationRecordingUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation recording unauthorized response a status code equal to that given
func (o *PutConversationRecordingUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutConversationRecordingUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingUnauthorized  %+v", 401, o.Payload)
}

func (o *PutConversationRecordingUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingUnauthorized  %+v", 401, o.Payload)
}

func (o *PutConversationRecordingUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationRecordingUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationRecordingForbidden creates a PutConversationRecordingForbidden with default headers values
func NewPutConversationRecordingForbidden() *PutConversationRecordingForbidden {
	return &PutConversationRecordingForbidden{}
}

/*
PutConversationRecordingForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutConversationRecordingForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation recording forbidden response has a 2xx status code
func (o *PutConversationRecordingForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation recording forbidden response has a 3xx status code
func (o *PutConversationRecordingForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation recording forbidden response has a 4xx status code
func (o *PutConversationRecordingForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation recording forbidden response has a 5xx status code
func (o *PutConversationRecordingForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation recording forbidden response a status code equal to that given
func (o *PutConversationRecordingForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutConversationRecordingForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingForbidden  %+v", 403, o.Payload)
}

func (o *PutConversationRecordingForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingForbidden  %+v", 403, o.Payload)
}

func (o *PutConversationRecordingForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationRecordingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationRecordingNotFound creates a PutConversationRecordingNotFound with default headers values
func NewPutConversationRecordingNotFound() *PutConversationRecordingNotFound {
	return &PutConversationRecordingNotFound{}
}

/*
PutConversationRecordingNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutConversationRecordingNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation recording not found response has a 2xx status code
func (o *PutConversationRecordingNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation recording not found response has a 3xx status code
func (o *PutConversationRecordingNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation recording not found response has a 4xx status code
func (o *PutConversationRecordingNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation recording not found response has a 5xx status code
func (o *PutConversationRecordingNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation recording not found response a status code equal to that given
func (o *PutConversationRecordingNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutConversationRecordingNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingNotFound  %+v", 404, o.Payload)
}

func (o *PutConversationRecordingNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingNotFound  %+v", 404, o.Payload)
}

func (o *PutConversationRecordingNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationRecordingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationRecordingRequestTimeout creates a PutConversationRecordingRequestTimeout with default headers values
func NewPutConversationRecordingRequestTimeout() *PutConversationRecordingRequestTimeout {
	return &PutConversationRecordingRequestTimeout{}
}

/*
PutConversationRecordingRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutConversationRecordingRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation recording request timeout response has a 2xx status code
func (o *PutConversationRecordingRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation recording request timeout response has a 3xx status code
func (o *PutConversationRecordingRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation recording request timeout response has a 4xx status code
func (o *PutConversationRecordingRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation recording request timeout response has a 5xx status code
func (o *PutConversationRecordingRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation recording request timeout response a status code equal to that given
func (o *PutConversationRecordingRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutConversationRecordingRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutConversationRecordingRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutConversationRecordingRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationRecordingRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationRecordingRequestEntityTooLarge creates a PutConversationRecordingRequestEntityTooLarge with default headers values
func NewPutConversationRecordingRequestEntityTooLarge() *PutConversationRecordingRequestEntityTooLarge {
	return &PutConversationRecordingRequestEntityTooLarge{}
}

/*
PutConversationRecordingRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutConversationRecordingRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation recording request entity too large response has a 2xx status code
func (o *PutConversationRecordingRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation recording request entity too large response has a 3xx status code
func (o *PutConversationRecordingRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation recording request entity too large response has a 4xx status code
func (o *PutConversationRecordingRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation recording request entity too large response has a 5xx status code
func (o *PutConversationRecordingRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation recording request entity too large response a status code equal to that given
func (o *PutConversationRecordingRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutConversationRecordingRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutConversationRecordingRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutConversationRecordingRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationRecordingRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationRecordingUnsupportedMediaType creates a PutConversationRecordingUnsupportedMediaType with default headers values
func NewPutConversationRecordingUnsupportedMediaType() *PutConversationRecordingUnsupportedMediaType {
	return &PutConversationRecordingUnsupportedMediaType{}
}

/*
PutConversationRecordingUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutConversationRecordingUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation recording unsupported media type response has a 2xx status code
func (o *PutConversationRecordingUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation recording unsupported media type response has a 3xx status code
func (o *PutConversationRecordingUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation recording unsupported media type response has a 4xx status code
func (o *PutConversationRecordingUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation recording unsupported media type response has a 5xx status code
func (o *PutConversationRecordingUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation recording unsupported media type response a status code equal to that given
func (o *PutConversationRecordingUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutConversationRecordingUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutConversationRecordingUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutConversationRecordingUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationRecordingUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationRecordingTooManyRequests creates a PutConversationRecordingTooManyRequests with default headers values
func NewPutConversationRecordingTooManyRequests() *PutConversationRecordingTooManyRequests {
	return &PutConversationRecordingTooManyRequests{}
}

/*
PutConversationRecordingTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutConversationRecordingTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation recording too many requests response has a 2xx status code
func (o *PutConversationRecordingTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation recording too many requests response has a 3xx status code
func (o *PutConversationRecordingTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation recording too many requests response has a 4xx status code
func (o *PutConversationRecordingTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation recording too many requests response has a 5xx status code
func (o *PutConversationRecordingTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation recording too many requests response a status code equal to that given
func (o *PutConversationRecordingTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutConversationRecordingTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutConversationRecordingTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutConversationRecordingTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationRecordingTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationRecordingInternalServerError creates a PutConversationRecordingInternalServerError with default headers values
func NewPutConversationRecordingInternalServerError() *PutConversationRecordingInternalServerError {
	return &PutConversationRecordingInternalServerError{}
}

/*
PutConversationRecordingInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutConversationRecordingInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation recording internal server error response has a 2xx status code
func (o *PutConversationRecordingInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation recording internal server error response has a 3xx status code
func (o *PutConversationRecordingInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation recording internal server error response has a 4xx status code
func (o *PutConversationRecordingInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put conversation recording internal server error response has a 5xx status code
func (o *PutConversationRecordingInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put conversation recording internal server error response a status code equal to that given
func (o *PutConversationRecordingInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutConversationRecordingInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingInternalServerError  %+v", 500, o.Payload)
}

func (o *PutConversationRecordingInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingInternalServerError  %+v", 500, o.Payload)
}

func (o *PutConversationRecordingInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationRecordingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationRecordingServiceUnavailable creates a PutConversationRecordingServiceUnavailable with default headers values
func NewPutConversationRecordingServiceUnavailable() *PutConversationRecordingServiceUnavailable {
	return &PutConversationRecordingServiceUnavailable{}
}

/*
PutConversationRecordingServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutConversationRecordingServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation recording service unavailable response has a 2xx status code
func (o *PutConversationRecordingServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation recording service unavailable response has a 3xx status code
func (o *PutConversationRecordingServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation recording service unavailable response has a 4xx status code
func (o *PutConversationRecordingServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put conversation recording service unavailable response has a 5xx status code
func (o *PutConversationRecordingServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put conversation recording service unavailable response a status code equal to that given
func (o *PutConversationRecordingServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutConversationRecordingServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutConversationRecordingServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutConversationRecordingServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationRecordingServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationRecordingGatewayTimeout creates a PutConversationRecordingGatewayTimeout with default headers values
func NewPutConversationRecordingGatewayTimeout() *PutConversationRecordingGatewayTimeout {
	return &PutConversationRecordingGatewayTimeout{}
}

/*
PutConversationRecordingGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutConversationRecordingGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation recording gateway timeout response has a 2xx status code
func (o *PutConversationRecordingGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation recording gateway timeout response has a 3xx status code
func (o *PutConversationRecordingGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation recording gateway timeout response has a 4xx status code
func (o *PutConversationRecordingGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put conversation recording gateway timeout response has a 5xx status code
func (o *PutConversationRecordingGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put conversation recording gateway timeout response a status code equal to that given
func (o *PutConversationRecordingGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutConversationRecordingGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutConversationRecordingGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}][%d] putConversationRecordingGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutConversationRecordingGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationRecordingGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

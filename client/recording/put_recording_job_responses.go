// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutRecordingJobReader is a Reader for the PutRecordingJob structure.
type PutRecordingJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRecordingJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRecordingJobOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRecordingJobBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRecordingJobUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRecordingJobForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRecordingJobNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutRecordingJobRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutRecordingJobRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutRecordingJobUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutRecordingJobTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutRecordingJobInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutRecordingJobServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutRecordingJobGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRecordingJobOK creates a PutRecordingJobOK with default headers values
func NewPutRecordingJobOK() *PutRecordingJobOK {
	return &PutRecordingJobOK{}
}

/*PutRecordingJobOK handles this case with default header values.

successful operation
*/
type PutRecordingJobOK struct {
	Payload *models.RecordingJob
}

func (o *PutRecordingJobOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/jobs/{jobId}][%d] putRecordingJobOK  %+v", 200, o.Payload)
}

func (o *PutRecordingJobOK) GetPayload() *models.RecordingJob {
	return o.Payload
}

func (o *PutRecordingJobOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RecordingJob)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingJobBadRequest creates a PutRecordingJobBadRequest with default headers values
func NewPutRecordingJobBadRequest() *PutRecordingJobBadRequest {
	return &PutRecordingJobBadRequest{}
}

/*PutRecordingJobBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutRecordingJobBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingJobBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/jobs/{jobId}][%d] putRecordingJobBadRequest  %+v", 400, o.Payload)
}

func (o *PutRecordingJobBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingJobBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingJobUnauthorized creates a PutRecordingJobUnauthorized with default headers values
func NewPutRecordingJobUnauthorized() *PutRecordingJobUnauthorized {
	return &PutRecordingJobUnauthorized{}
}

/*PutRecordingJobUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutRecordingJobUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingJobUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/jobs/{jobId}][%d] putRecordingJobUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRecordingJobUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingJobUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingJobForbidden creates a PutRecordingJobForbidden with default headers values
func NewPutRecordingJobForbidden() *PutRecordingJobForbidden {
	return &PutRecordingJobForbidden{}
}

/*PutRecordingJobForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutRecordingJobForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingJobForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/jobs/{jobId}][%d] putRecordingJobForbidden  %+v", 403, o.Payload)
}

func (o *PutRecordingJobForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingJobForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingJobNotFound creates a PutRecordingJobNotFound with default headers values
func NewPutRecordingJobNotFound() *PutRecordingJobNotFound {
	return &PutRecordingJobNotFound{}
}

/*PutRecordingJobNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutRecordingJobNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingJobNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/jobs/{jobId}][%d] putRecordingJobNotFound  %+v", 404, o.Payload)
}

func (o *PutRecordingJobNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingJobNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingJobRequestTimeout creates a PutRecordingJobRequestTimeout with default headers values
func NewPutRecordingJobRequestTimeout() *PutRecordingJobRequestTimeout {
	return &PutRecordingJobRequestTimeout{}
}

/*PutRecordingJobRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutRecordingJobRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingJobRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/jobs/{jobId}][%d] putRecordingJobRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutRecordingJobRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingJobRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingJobRequestEntityTooLarge creates a PutRecordingJobRequestEntityTooLarge with default headers values
func NewPutRecordingJobRequestEntityTooLarge() *PutRecordingJobRequestEntityTooLarge {
	return &PutRecordingJobRequestEntityTooLarge{}
}

/*PutRecordingJobRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PutRecordingJobRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingJobRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/jobs/{jobId}][%d] putRecordingJobRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutRecordingJobRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingJobRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingJobUnsupportedMediaType creates a PutRecordingJobUnsupportedMediaType with default headers values
func NewPutRecordingJobUnsupportedMediaType() *PutRecordingJobUnsupportedMediaType {
	return &PutRecordingJobUnsupportedMediaType{}
}

/*PutRecordingJobUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutRecordingJobUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingJobUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/jobs/{jobId}][%d] putRecordingJobUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutRecordingJobUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingJobUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingJobTooManyRequests creates a PutRecordingJobTooManyRequests with default headers values
func NewPutRecordingJobTooManyRequests() *PutRecordingJobTooManyRequests {
	return &PutRecordingJobTooManyRequests{}
}

/*PutRecordingJobTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutRecordingJobTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingJobTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/jobs/{jobId}][%d] putRecordingJobTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutRecordingJobTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingJobTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingJobInternalServerError creates a PutRecordingJobInternalServerError with default headers values
func NewPutRecordingJobInternalServerError() *PutRecordingJobInternalServerError {
	return &PutRecordingJobInternalServerError{}
}

/*PutRecordingJobInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutRecordingJobInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingJobInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/jobs/{jobId}][%d] putRecordingJobInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRecordingJobInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingJobInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingJobServiceUnavailable creates a PutRecordingJobServiceUnavailable with default headers values
func NewPutRecordingJobServiceUnavailable() *PutRecordingJobServiceUnavailable {
	return &PutRecordingJobServiceUnavailable{}
}

/*PutRecordingJobServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutRecordingJobServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingJobServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/jobs/{jobId}][%d] putRecordingJobServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutRecordingJobServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingJobServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRecordingJobGatewayTimeout creates a PutRecordingJobGatewayTimeout with default headers values
func NewPutRecordingJobGatewayTimeout() *PutRecordingJobGatewayTimeout {
	return &PutRecordingJobGatewayTimeout{}
}

/*PutRecordingJobGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutRecordingJobGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutRecordingJobGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/recording/jobs/{jobId}][%d] putRecordingJobGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutRecordingJobGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRecordingJobGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package recording

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchRecordingMediaretentionpolicyReader is a Reader for the PatchRecordingMediaretentionpolicy structure.
type PatchRecordingMediaretentionpolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchRecordingMediaretentionpolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchRecordingMediaretentionpolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchRecordingMediaretentionpolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchRecordingMediaretentionpolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchRecordingMediaretentionpolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchRecordingMediaretentionpolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchRecordingMediaretentionpolicyRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchRecordingMediaretentionpolicyRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchRecordingMediaretentionpolicyUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchRecordingMediaretentionpolicyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchRecordingMediaretentionpolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchRecordingMediaretentionpolicyServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchRecordingMediaretentionpolicyGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchRecordingMediaretentionpolicyOK creates a PatchRecordingMediaretentionpolicyOK with default headers values
func NewPatchRecordingMediaretentionpolicyOK() *PatchRecordingMediaretentionpolicyOK {
	return &PatchRecordingMediaretentionpolicyOK{}
}

/*
PatchRecordingMediaretentionpolicyOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchRecordingMediaretentionpolicyOK struct {
	Payload *models.Policy
}

// IsSuccess returns true when this patch recording mediaretentionpolicy o k response has a 2xx status code
func (o *PatchRecordingMediaretentionpolicyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch recording mediaretentionpolicy o k response has a 3xx status code
func (o *PatchRecordingMediaretentionpolicyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recording mediaretentionpolicy o k response has a 4xx status code
func (o *PatchRecordingMediaretentionpolicyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch recording mediaretentionpolicy o k response has a 5xx status code
func (o *PatchRecordingMediaretentionpolicyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recording mediaretentionpolicy o k response a status code equal to that given
func (o *PatchRecordingMediaretentionpolicyOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchRecordingMediaretentionpolicyOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyOK  %+v", 200, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyOK  %+v", 200, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyOK) GetPayload() *models.Policy {
	return o.Payload
}

func (o *PatchRecordingMediaretentionpolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Policy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingMediaretentionpolicyBadRequest creates a PatchRecordingMediaretentionpolicyBadRequest with default headers values
func NewPatchRecordingMediaretentionpolicyBadRequest() *PatchRecordingMediaretentionpolicyBadRequest {
	return &PatchRecordingMediaretentionpolicyBadRequest{}
}

/*
PatchRecordingMediaretentionpolicyBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchRecordingMediaretentionpolicyBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recording mediaretentionpolicy bad request response has a 2xx status code
func (o *PatchRecordingMediaretentionpolicyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recording mediaretentionpolicy bad request response has a 3xx status code
func (o *PatchRecordingMediaretentionpolicyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recording mediaretentionpolicy bad request response has a 4xx status code
func (o *PatchRecordingMediaretentionpolicyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recording mediaretentionpolicy bad request response has a 5xx status code
func (o *PatchRecordingMediaretentionpolicyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recording mediaretentionpolicy bad request response a status code equal to that given
func (o *PatchRecordingMediaretentionpolicyBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchRecordingMediaretentionpolicyBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingMediaretentionpolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingMediaretentionpolicyUnauthorized creates a PatchRecordingMediaretentionpolicyUnauthorized with default headers values
func NewPatchRecordingMediaretentionpolicyUnauthorized() *PatchRecordingMediaretentionpolicyUnauthorized {
	return &PatchRecordingMediaretentionpolicyUnauthorized{}
}

/*
PatchRecordingMediaretentionpolicyUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchRecordingMediaretentionpolicyUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recording mediaretentionpolicy unauthorized response has a 2xx status code
func (o *PatchRecordingMediaretentionpolicyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recording mediaretentionpolicy unauthorized response has a 3xx status code
func (o *PatchRecordingMediaretentionpolicyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recording mediaretentionpolicy unauthorized response has a 4xx status code
func (o *PatchRecordingMediaretentionpolicyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recording mediaretentionpolicy unauthorized response has a 5xx status code
func (o *PatchRecordingMediaretentionpolicyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recording mediaretentionpolicy unauthorized response a status code equal to that given
func (o *PatchRecordingMediaretentionpolicyUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchRecordingMediaretentionpolicyUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingMediaretentionpolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingMediaretentionpolicyForbidden creates a PatchRecordingMediaretentionpolicyForbidden with default headers values
func NewPatchRecordingMediaretentionpolicyForbidden() *PatchRecordingMediaretentionpolicyForbidden {
	return &PatchRecordingMediaretentionpolicyForbidden{}
}

/*
PatchRecordingMediaretentionpolicyForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchRecordingMediaretentionpolicyForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recording mediaretentionpolicy forbidden response has a 2xx status code
func (o *PatchRecordingMediaretentionpolicyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recording mediaretentionpolicy forbidden response has a 3xx status code
func (o *PatchRecordingMediaretentionpolicyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recording mediaretentionpolicy forbidden response has a 4xx status code
func (o *PatchRecordingMediaretentionpolicyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recording mediaretentionpolicy forbidden response has a 5xx status code
func (o *PatchRecordingMediaretentionpolicyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recording mediaretentionpolicy forbidden response a status code equal to that given
func (o *PatchRecordingMediaretentionpolicyForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchRecordingMediaretentionpolicyForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyForbidden  %+v", 403, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyForbidden  %+v", 403, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingMediaretentionpolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingMediaretentionpolicyNotFound creates a PatchRecordingMediaretentionpolicyNotFound with default headers values
func NewPatchRecordingMediaretentionpolicyNotFound() *PatchRecordingMediaretentionpolicyNotFound {
	return &PatchRecordingMediaretentionpolicyNotFound{}
}

/*
PatchRecordingMediaretentionpolicyNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchRecordingMediaretentionpolicyNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recording mediaretentionpolicy not found response has a 2xx status code
func (o *PatchRecordingMediaretentionpolicyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recording mediaretentionpolicy not found response has a 3xx status code
func (o *PatchRecordingMediaretentionpolicyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recording mediaretentionpolicy not found response has a 4xx status code
func (o *PatchRecordingMediaretentionpolicyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recording mediaretentionpolicy not found response has a 5xx status code
func (o *PatchRecordingMediaretentionpolicyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recording mediaretentionpolicy not found response a status code equal to that given
func (o *PatchRecordingMediaretentionpolicyNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchRecordingMediaretentionpolicyNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyNotFound  %+v", 404, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyNotFound  %+v", 404, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingMediaretentionpolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingMediaretentionpolicyRequestTimeout creates a PatchRecordingMediaretentionpolicyRequestTimeout with default headers values
func NewPatchRecordingMediaretentionpolicyRequestTimeout() *PatchRecordingMediaretentionpolicyRequestTimeout {
	return &PatchRecordingMediaretentionpolicyRequestTimeout{}
}

/*
PatchRecordingMediaretentionpolicyRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchRecordingMediaretentionpolicyRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recording mediaretentionpolicy request timeout response has a 2xx status code
func (o *PatchRecordingMediaretentionpolicyRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recording mediaretentionpolicy request timeout response has a 3xx status code
func (o *PatchRecordingMediaretentionpolicyRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recording mediaretentionpolicy request timeout response has a 4xx status code
func (o *PatchRecordingMediaretentionpolicyRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recording mediaretentionpolicy request timeout response has a 5xx status code
func (o *PatchRecordingMediaretentionpolicyRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recording mediaretentionpolicy request timeout response a status code equal to that given
func (o *PatchRecordingMediaretentionpolicyRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchRecordingMediaretentionpolicyRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingMediaretentionpolicyRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingMediaretentionpolicyRequestEntityTooLarge creates a PatchRecordingMediaretentionpolicyRequestEntityTooLarge with default headers values
func NewPatchRecordingMediaretentionpolicyRequestEntityTooLarge() *PatchRecordingMediaretentionpolicyRequestEntityTooLarge {
	return &PatchRecordingMediaretentionpolicyRequestEntityTooLarge{}
}

/*
PatchRecordingMediaretentionpolicyRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchRecordingMediaretentionpolicyRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recording mediaretentionpolicy request entity too large response has a 2xx status code
func (o *PatchRecordingMediaretentionpolicyRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recording mediaretentionpolicy request entity too large response has a 3xx status code
func (o *PatchRecordingMediaretentionpolicyRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recording mediaretentionpolicy request entity too large response has a 4xx status code
func (o *PatchRecordingMediaretentionpolicyRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recording mediaretentionpolicy request entity too large response has a 5xx status code
func (o *PatchRecordingMediaretentionpolicyRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recording mediaretentionpolicy request entity too large response a status code equal to that given
func (o *PatchRecordingMediaretentionpolicyRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchRecordingMediaretentionpolicyRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingMediaretentionpolicyRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingMediaretentionpolicyUnsupportedMediaType creates a PatchRecordingMediaretentionpolicyUnsupportedMediaType with default headers values
func NewPatchRecordingMediaretentionpolicyUnsupportedMediaType() *PatchRecordingMediaretentionpolicyUnsupportedMediaType {
	return &PatchRecordingMediaretentionpolicyUnsupportedMediaType{}
}

/*
PatchRecordingMediaretentionpolicyUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchRecordingMediaretentionpolicyUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recording mediaretentionpolicy unsupported media type response has a 2xx status code
func (o *PatchRecordingMediaretentionpolicyUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recording mediaretentionpolicy unsupported media type response has a 3xx status code
func (o *PatchRecordingMediaretentionpolicyUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recording mediaretentionpolicy unsupported media type response has a 4xx status code
func (o *PatchRecordingMediaretentionpolicyUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recording mediaretentionpolicy unsupported media type response has a 5xx status code
func (o *PatchRecordingMediaretentionpolicyUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recording mediaretentionpolicy unsupported media type response a status code equal to that given
func (o *PatchRecordingMediaretentionpolicyUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchRecordingMediaretentionpolicyUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingMediaretentionpolicyUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingMediaretentionpolicyTooManyRequests creates a PatchRecordingMediaretentionpolicyTooManyRequests with default headers values
func NewPatchRecordingMediaretentionpolicyTooManyRequests() *PatchRecordingMediaretentionpolicyTooManyRequests {
	return &PatchRecordingMediaretentionpolicyTooManyRequests{}
}

/*
PatchRecordingMediaretentionpolicyTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchRecordingMediaretentionpolicyTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recording mediaretentionpolicy too many requests response has a 2xx status code
func (o *PatchRecordingMediaretentionpolicyTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recording mediaretentionpolicy too many requests response has a 3xx status code
func (o *PatchRecordingMediaretentionpolicyTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recording mediaretentionpolicy too many requests response has a 4xx status code
func (o *PatchRecordingMediaretentionpolicyTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recording mediaretentionpolicy too many requests response has a 5xx status code
func (o *PatchRecordingMediaretentionpolicyTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recording mediaretentionpolicy too many requests response a status code equal to that given
func (o *PatchRecordingMediaretentionpolicyTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchRecordingMediaretentionpolicyTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingMediaretentionpolicyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingMediaretentionpolicyInternalServerError creates a PatchRecordingMediaretentionpolicyInternalServerError with default headers values
func NewPatchRecordingMediaretentionpolicyInternalServerError() *PatchRecordingMediaretentionpolicyInternalServerError {
	return &PatchRecordingMediaretentionpolicyInternalServerError{}
}

/*
PatchRecordingMediaretentionpolicyInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchRecordingMediaretentionpolicyInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recording mediaretentionpolicy internal server error response has a 2xx status code
func (o *PatchRecordingMediaretentionpolicyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recording mediaretentionpolicy internal server error response has a 3xx status code
func (o *PatchRecordingMediaretentionpolicyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recording mediaretentionpolicy internal server error response has a 4xx status code
func (o *PatchRecordingMediaretentionpolicyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch recording mediaretentionpolicy internal server error response has a 5xx status code
func (o *PatchRecordingMediaretentionpolicyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch recording mediaretentionpolicy internal server error response a status code equal to that given
func (o *PatchRecordingMediaretentionpolicyInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchRecordingMediaretentionpolicyInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingMediaretentionpolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingMediaretentionpolicyServiceUnavailable creates a PatchRecordingMediaretentionpolicyServiceUnavailable with default headers values
func NewPatchRecordingMediaretentionpolicyServiceUnavailable() *PatchRecordingMediaretentionpolicyServiceUnavailable {
	return &PatchRecordingMediaretentionpolicyServiceUnavailable{}
}

/*
PatchRecordingMediaretentionpolicyServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchRecordingMediaretentionpolicyServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recording mediaretentionpolicy service unavailable response has a 2xx status code
func (o *PatchRecordingMediaretentionpolicyServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recording mediaretentionpolicy service unavailable response has a 3xx status code
func (o *PatchRecordingMediaretentionpolicyServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recording mediaretentionpolicy service unavailable response has a 4xx status code
func (o *PatchRecordingMediaretentionpolicyServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch recording mediaretentionpolicy service unavailable response has a 5xx status code
func (o *PatchRecordingMediaretentionpolicyServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch recording mediaretentionpolicy service unavailable response a status code equal to that given
func (o *PatchRecordingMediaretentionpolicyServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchRecordingMediaretentionpolicyServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingMediaretentionpolicyServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecordingMediaretentionpolicyGatewayTimeout creates a PatchRecordingMediaretentionpolicyGatewayTimeout with default headers values
func NewPatchRecordingMediaretentionpolicyGatewayTimeout() *PatchRecordingMediaretentionpolicyGatewayTimeout {
	return &PatchRecordingMediaretentionpolicyGatewayTimeout{}
}

/*
PatchRecordingMediaretentionpolicyGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchRecordingMediaretentionpolicyGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch recording mediaretentionpolicy gateway timeout response has a 2xx status code
func (o *PatchRecordingMediaretentionpolicyGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recording mediaretentionpolicy gateway timeout response has a 3xx status code
func (o *PatchRecordingMediaretentionpolicyGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recording mediaretentionpolicy gateway timeout response has a 4xx status code
func (o *PatchRecordingMediaretentionpolicyGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch recording mediaretentionpolicy gateway timeout response has a 5xx status code
func (o *PatchRecordingMediaretentionpolicyGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch recording mediaretentionpolicy gateway timeout response a status code equal to that given
func (o *PatchRecordingMediaretentionpolicyGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchRecordingMediaretentionpolicyGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/recording/mediaretentionpolicies/{policyId}][%d] patchRecordingMediaretentionpolicyGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRecordingMediaretentionpolicyGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRecordingMediaretentionpolicyGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

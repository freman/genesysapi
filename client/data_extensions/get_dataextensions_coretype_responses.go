// Code generated by go-swagger; DO NOT EDIT.

package data_extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetDataextensionsCoretypeReader is a Reader for the GetDataextensionsCoretype structure.
type GetDataextensionsCoretypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDataextensionsCoretypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDataextensionsCoretypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDataextensionsCoretypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDataextensionsCoretypeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDataextensionsCoretypeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDataextensionsCoretypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetDataextensionsCoretypeRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetDataextensionsCoretypeRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetDataextensionsCoretypeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetDataextensionsCoretypeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDataextensionsCoretypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetDataextensionsCoretypeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetDataextensionsCoretypeGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDataextensionsCoretypeOK creates a GetDataextensionsCoretypeOK with default headers values
func NewGetDataextensionsCoretypeOK() *GetDataextensionsCoretypeOK {
	return &GetDataextensionsCoretypeOK{}
}

/*GetDataextensionsCoretypeOK handles this case with default header values.

successful operation
*/
type GetDataextensionsCoretypeOK struct {
	Payload *models.Coretype
}

func (o *GetDataextensionsCoretypeOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/coretypes/{coretypeName}][%d] getDataextensionsCoretypeOK  %+v", 200, o.Payload)
}

func (o *GetDataextensionsCoretypeOK) GetPayload() *models.Coretype {
	return o.Payload
}

func (o *GetDataextensionsCoretypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Coretype)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsCoretypeBadRequest creates a GetDataextensionsCoretypeBadRequest with default headers values
func NewGetDataextensionsCoretypeBadRequest() *GetDataextensionsCoretypeBadRequest {
	return &GetDataextensionsCoretypeBadRequest{}
}

/*GetDataextensionsCoretypeBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetDataextensionsCoretypeBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsCoretypeBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/coretypes/{coretypeName}][%d] getDataextensionsCoretypeBadRequest  %+v", 400, o.Payload)
}

func (o *GetDataextensionsCoretypeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsCoretypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsCoretypeUnauthorized creates a GetDataextensionsCoretypeUnauthorized with default headers values
func NewGetDataextensionsCoretypeUnauthorized() *GetDataextensionsCoretypeUnauthorized {
	return &GetDataextensionsCoretypeUnauthorized{}
}

/*GetDataextensionsCoretypeUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetDataextensionsCoretypeUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsCoretypeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/coretypes/{coretypeName}][%d] getDataextensionsCoretypeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDataextensionsCoretypeUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsCoretypeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsCoretypeForbidden creates a GetDataextensionsCoretypeForbidden with default headers values
func NewGetDataextensionsCoretypeForbidden() *GetDataextensionsCoretypeForbidden {
	return &GetDataextensionsCoretypeForbidden{}
}

/*GetDataextensionsCoretypeForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetDataextensionsCoretypeForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsCoretypeForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/coretypes/{coretypeName}][%d] getDataextensionsCoretypeForbidden  %+v", 403, o.Payload)
}

func (o *GetDataextensionsCoretypeForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsCoretypeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsCoretypeNotFound creates a GetDataextensionsCoretypeNotFound with default headers values
func NewGetDataextensionsCoretypeNotFound() *GetDataextensionsCoretypeNotFound {
	return &GetDataextensionsCoretypeNotFound{}
}

/*GetDataextensionsCoretypeNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetDataextensionsCoretypeNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsCoretypeNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/coretypes/{coretypeName}][%d] getDataextensionsCoretypeNotFound  %+v", 404, o.Payload)
}

func (o *GetDataextensionsCoretypeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsCoretypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsCoretypeRequestTimeout creates a GetDataextensionsCoretypeRequestTimeout with default headers values
func NewGetDataextensionsCoretypeRequestTimeout() *GetDataextensionsCoretypeRequestTimeout {
	return &GetDataextensionsCoretypeRequestTimeout{}
}

/*GetDataextensionsCoretypeRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetDataextensionsCoretypeRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsCoretypeRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/coretypes/{coretypeName}][%d] getDataextensionsCoretypeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetDataextensionsCoretypeRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsCoretypeRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsCoretypeRequestEntityTooLarge creates a GetDataextensionsCoretypeRequestEntityTooLarge with default headers values
func NewGetDataextensionsCoretypeRequestEntityTooLarge() *GetDataextensionsCoretypeRequestEntityTooLarge {
	return &GetDataextensionsCoretypeRequestEntityTooLarge{}
}

/*GetDataextensionsCoretypeRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetDataextensionsCoretypeRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsCoretypeRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/coretypes/{coretypeName}][%d] getDataextensionsCoretypeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetDataextensionsCoretypeRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsCoretypeRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsCoretypeUnsupportedMediaType creates a GetDataextensionsCoretypeUnsupportedMediaType with default headers values
func NewGetDataextensionsCoretypeUnsupportedMediaType() *GetDataextensionsCoretypeUnsupportedMediaType {
	return &GetDataextensionsCoretypeUnsupportedMediaType{}
}

/*GetDataextensionsCoretypeUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetDataextensionsCoretypeUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsCoretypeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/coretypes/{coretypeName}][%d] getDataextensionsCoretypeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetDataextensionsCoretypeUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsCoretypeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsCoretypeTooManyRequests creates a GetDataextensionsCoretypeTooManyRequests with default headers values
func NewGetDataextensionsCoretypeTooManyRequests() *GetDataextensionsCoretypeTooManyRequests {
	return &GetDataextensionsCoretypeTooManyRequests{}
}

/*GetDataextensionsCoretypeTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetDataextensionsCoretypeTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsCoretypeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/coretypes/{coretypeName}][%d] getDataextensionsCoretypeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetDataextensionsCoretypeTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsCoretypeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsCoretypeInternalServerError creates a GetDataextensionsCoretypeInternalServerError with default headers values
func NewGetDataextensionsCoretypeInternalServerError() *GetDataextensionsCoretypeInternalServerError {
	return &GetDataextensionsCoretypeInternalServerError{}
}

/*GetDataextensionsCoretypeInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetDataextensionsCoretypeInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsCoretypeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/coretypes/{coretypeName}][%d] getDataextensionsCoretypeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDataextensionsCoretypeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsCoretypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsCoretypeServiceUnavailable creates a GetDataextensionsCoretypeServiceUnavailable with default headers values
func NewGetDataextensionsCoretypeServiceUnavailable() *GetDataextensionsCoretypeServiceUnavailable {
	return &GetDataextensionsCoretypeServiceUnavailable{}
}

/*GetDataextensionsCoretypeServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetDataextensionsCoretypeServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsCoretypeServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/coretypes/{coretypeName}][%d] getDataextensionsCoretypeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetDataextensionsCoretypeServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsCoretypeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsCoretypeGatewayTimeout creates a GetDataextensionsCoretypeGatewayTimeout with default headers values
func NewGetDataextensionsCoretypeGatewayTimeout() *GetDataextensionsCoretypeGatewayTimeout {
	return &GetDataextensionsCoretypeGatewayTimeout{}
}

/*GetDataextensionsCoretypeGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetDataextensionsCoretypeGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsCoretypeGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/coretypes/{coretypeName}][%d] getDataextensionsCoretypeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetDataextensionsCoretypeGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsCoretypeGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

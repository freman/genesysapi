// Code generated by go-swagger; DO NOT EDIT.

package data_extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the data extensions client
type API interface {
	/*
	   GetDataextensionsCoretype gets a specific named core type
	*/
	GetDataextensionsCoretype(ctx context.Context, params *GetDataextensionsCoretypeParams) (*GetDataextensionsCoretypeOK, error)
	/*
	   GetDataextensionsCoretypes gets the core types from which all schemas are built
	*/
	GetDataextensionsCoretypes(ctx context.Context, params *GetDataextensionsCoretypesParams) (*GetDataextensionsCoretypesOK, error)
	/*
	   GetDataextensionsLimits gets quantitative limits on schemas
	*/
	GetDataextensionsLimits(ctx context.Context, params *GetDataextensionsLimitsParams) (*GetDataextensionsLimitsOK, error)
}

// New creates a new data extensions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for data extensions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetDataextensionsCoretype gets a specific named core type
*/
func (a *Client) GetDataextensionsCoretype(ctx context.Context, params *GetDataextensionsCoretypeParams) (*GetDataextensionsCoretypeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDataextensionsCoretype",
		Method:             "GET",
		PathPattern:        "/api/v2/dataextensions/coretypes/{coretypeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataextensionsCoretypeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDataextensionsCoretypeOK), nil

}

/*
GetDataextensionsCoretypes gets the core types from which all schemas are built
*/
func (a *Client) GetDataextensionsCoretypes(ctx context.Context, params *GetDataextensionsCoretypesParams) (*GetDataextensionsCoretypesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDataextensionsCoretypes",
		Method:             "GET",
		PathPattern:        "/api/v2/dataextensions/coretypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataextensionsCoretypesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDataextensionsCoretypesOK), nil

}

/*
GetDataextensionsLimits gets quantitative limits on schemas
*/
func (a *Client) GetDataextensionsLimits(ctx context.Context, params *GetDataextensionsLimitsParams) (*GetDataextensionsLimitsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDataextensionsLimits",
		Method:             "GET",
		PathPattern:        "/api/v2/dataextensions/limits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataextensionsLimitsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDataextensionsLimitsOK), nil

}

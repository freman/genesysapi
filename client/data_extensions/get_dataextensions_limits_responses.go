// Code generated by go-swagger; DO NOT EDIT.

package data_extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetDataextensionsLimitsReader is a Reader for the GetDataextensionsLimits structure.
type GetDataextensionsLimitsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDataextensionsLimitsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDataextensionsLimitsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDataextensionsLimitsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDataextensionsLimitsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDataextensionsLimitsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDataextensionsLimitsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetDataextensionsLimitsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetDataextensionsLimitsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetDataextensionsLimitsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDataextensionsLimitsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetDataextensionsLimitsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetDataextensionsLimitsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDataextensionsLimitsOK creates a GetDataextensionsLimitsOK with default headers values
func NewGetDataextensionsLimitsOK() *GetDataextensionsLimitsOK {
	return &GetDataextensionsLimitsOK{}
}

/*GetDataextensionsLimitsOK handles this case with default header values.

successful operation
*/
type GetDataextensionsLimitsOK struct {
	Payload *models.SchemaQuantityLimits
}

func (o *GetDataextensionsLimitsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/limits][%d] getDataextensionsLimitsOK  %+v", 200, o.Payload)
}

func (o *GetDataextensionsLimitsOK) GetPayload() *models.SchemaQuantityLimits {
	return o.Payload
}

func (o *GetDataextensionsLimitsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SchemaQuantityLimits)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsLimitsBadRequest creates a GetDataextensionsLimitsBadRequest with default headers values
func NewGetDataextensionsLimitsBadRequest() *GetDataextensionsLimitsBadRequest {
	return &GetDataextensionsLimitsBadRequest{}
}

/*GetDataextensionsLimitsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetDataextensionsLimitsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsLimitsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/limits][%d] getDataextensionsLimitsBadRequest  %+v", 400, o.Payload)
}

func (o *GetDataextensionsLimitsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsLimitsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsLimitsUnauthorized creates a GetDataextensionsLimitsUnauthorized with default headers values
func NewGetDataextensionsLimitsUnauthorized() *GetDataextensionsLimitsUnauthorized {
	return &GetDataextensionsLimitsUnauthorized{}
}

/*GetDataextensionsLimitsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetDataextensionsLimitsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsLimitsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/limits][%d] getDataextensionsLimitsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDataextensionsLimitsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsLimitsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsLimitsForbidden creates a GetDataextensionsLimitsForbidden with default headers values
func NewGetDataextensionsLimitsForbidden() *GetDataextensionsLimitsForbidden {
	return &GetDataextensionsLimitsForbidden{}
}

/*GetDataextensionsLimitsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetDataextensionsLimitsForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsLimitsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/limits][%d] getDataextensionsLimitsForbidden  %+v", 403, o.Payload)
}

func (o *GetDataextensionsLimitsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsLimitsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsLimitsNotFound creates a GetDataextensionsLimitsNotFound with default headers values
func NewGetDataextensionsLimitsNotFound() *GetDataextensionsLimitsNotFound {
	return &GetDataextensionsLimitsNotFound{}
}

/*GetDataextensionsLimitsNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetDataextensionsLimitsNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsLimitsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/limits][%d] getDataextensionsLimitsNotFound  %+v", 404, o.Payload)
}

func (o *GetDataextensionsLimitsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsLimitsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsLimitsRequestEntityTooLarge creates a GetDataextensionsLimitsRequestEntityTooLarge with default headers values
func NewGetDataextensionsLimitsRequestEntityTooLarge() *GetDataextensionsLimitsRequestEntityTooLarge {
	return &GetDataextensionsLimitsRequestEntityTooLarge{}
}

/*GetDataextensionsLimitsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetDataextensionsLimitsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsLimitsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/limits][%d] getDataextensionsLimitsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetDataextensionsLimitsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsLimitsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsLimitsUnsupportedMediaType creates a GetDataextensionsLimitsUnsupportedMediaType with default headers values
func NewGetDataextensionsLimitsUnsupportedMediaType() *GetDataextensionsLimitsUnsupportedMediaType {
	return &GetDataextensionsLimitsUnsupportedMediaType{}
}

/*GetDataextensionsLimitsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetDataextensionsLimitsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsLimitsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/limits][%d] getDataextensionsLimitsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetDataextensionsLimitsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsLimitsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsLimitsTooManyRequests creates a GetDataextensionsLimitsTooManyRequests with default headers values
func NewGetDataextensionsLimitsTooManyRequests() *GetDataextensionsLimitsTooManyRequests {
	return &GetDataextensionsLimitsTooManyRequests{}
}

/*GetDataextensionsLimitsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type GetDataextensionsLimitsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsLimitsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/limits][%d] getDataextensionsLimitsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetDataextensionsLimitsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsLimitsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsLimitsInternalServerError creates a GetDataextensionsLimitsInternalServerError with default headers values
func NewGetDataextensionsLimitsInternalServerError() *GetDataextensionsLimitsInternalServerError {
	return &GetDataextensionsLimitsInternalServerError{}
}

/*GetDataextensionsLimitsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetDataextensionsLimitsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsLimitsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/limits][%d] getDataextensionsLimitsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDataextensionsLimitsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsLimitsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsLimitsServiceUnavailable creates a GetDataextensionsLimitsServiceUnavailable with default headers values
func NewGetDataextensionsLimitsServiceUnavailable() *GetDataextensionsLimitsServiceUnavailable {
	return &GetDataextensionsLimitsServiceUnavailable{}
}

/*GetDataextensionsLimitsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetDataextensionsLimitsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsLimitsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/limits][%d] getDataextensionsLimitsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetDataextensionsLimitsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsLimitsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataextensionsLimitsGatewayTimeout creates a GetDataextensionsLimitsGatewayTimeout with default headers values
func NewGetDataextensionsLimitsGatewayTimeout() *GetDataextensionsLimitsGatewayTimeout {
	return &GetDataextensionsLimitsGatewayTimeout{}
}

/*GetDataextensionsLimitsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetDataextensionsLimitsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetDataextensionsLimitsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/dataextensions/limits][%d] getDataextensionsLimitsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetDataextensionsLimitsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetDataextensionsLimitsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

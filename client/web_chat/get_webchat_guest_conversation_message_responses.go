// Code generated by go-swagger; DO NOT EDIT.

package web_chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetWebchatGuestConversationMessageReader is a Reader for the GetWebchatGuestConversationMessage structure.
type GetWebchatGuestConversationMessageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWebchatGuestConversationMessageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWebchatGuestConversationMessageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetWebchatGuestConversationMessageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetWebchatGuestConversationMessageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWebchatGuestConversationMessageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWebchatGuestConversationMessageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetWebchatGuestConversationMessageRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetWebchatGuestConversationMessageRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetWebchatGuestConversationMessageUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetWebchatGuestConversationMessageTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetWebchatGuestConversationMessageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetWebchatGuestConversationMessageServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetWebchatGuestConversationMessageGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetWebchatGuestConversationMessageOK creates a GetWebchatGuestConversationMessageOK with default headers values
func NewGetWebchatGuestConversationMessageOK() *GetWebchatGuestConversationMessageOK {
	return &GetWebchatGuestConversationMessageOK{}
}

/*
GetWebchatGuestConversationMessageOK describes a response with status code 200, with default header values.

successful operation
*/
type GetWebchatGuestConversationMessageOK struct {
	Payload *models.WebChatMessage
}

// IsSuccess returns true when this get webchat guest conversation message o k response has a 2xx status code
func (o *GetWebchatGuestConversationMessageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get webchat guest conversation message o k response has a 3xx status code
func (o *GetWebchatGuestConversationMessageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat guest conversation message o k response has a 4xx status code
func (o *GetWebchatGuestConversationMessageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get webchat guest conversation message o k response has a 5xx status code
func (o *GetWebchatGuestConversationMessageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat guest conversation message o k response a status code equal to that given
func (o *GetWebchatGuestConversationMessageOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetWebchatGuestConversationMessageOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageOK  %+v", 200, o.Payload)
}

func (o *GetWebchatGuestConversationMessageOK) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageOK  %+v", 200, o.Payload)
}

func (o *GetWebchatGuestConversationMessageOK) GetPayload() *models.WebChatMessage {
	return o.Payload
}

func (o *GetWebchatGuestConversationMessageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebChatMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMessageBadRequest creates a GetWebchatGuestConversationMessageBadRequest with default headers values
func NewGetWebchatGuestConversationMessageBadRequest() *GetWebchatGuestConversationMessageBadRequest {
	return &GetWebchatGuestConversationMessageBadRequest{}
}

/*
GetWebchatGuestConversationMessageBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetWebchatGuestConversationMessageBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat guest conversation message bad request response has a 2xx status code
func (o *GetWebchatGuestConversationMessageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat guest conversation message bad request response has a 3xx status code
func (o *GetWebchatGuestConversationMessageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat guest conversation message bad request response has a 4xx status code
func (o *GetWebchatGuestConversationMessageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat guest conversation message bad request response has a 5xx status code
func (o *GetWebchatGuestConversationMessageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat guest conversation message bad request response a status code equal to that given
func (o *GetWebchatGuestConversationMessageBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetWebchatGuestConversationMessageBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageBadRequest  %+v", 400, o.Payload)
}

func (o *GetWebchatGuestConversationMessageBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageBadRequest  %+v", 400, o.Payload)
}

func (o *GetWebchatGuestConversationMessageBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMessageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMessageUnauthorized creates a GetWebchatGuestConversationMessageUnauthorized with default headers values
func NewGetWebchatGuestConversationMessageUnauthorized() *GetWebchatGuestConversationMessageUnauthorized {
	return &GetWebchatGuestConversationMessageUnauthorized{}
}

/*
GetWebchatGuestConversationMessageUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetWebchatGuestConversationMessageUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat guest conversation message unauthorized response has a 2xx status code
func (o *GetWebchatGuestConversationMessageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat guest conversation message unauthorized response has a 3xx status code
func (o *GetWebchatGuestConversationMessageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat guest conversation message unauthorized response has a 4xx status code
func (o *GetWebchatGuestConversationMessageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat guest conversation message unauthorized response has a 5xx status code
func (o *GetWebchatGuestConversationMessageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat guest conversation message unauthorized response a status code equal to that given
func (o *GetWebchatGuestConversationMessageUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetWebchatGuestConversationMessageUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWebchatGuestConversationMessageUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWebchatGuestConversationMessageUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMessageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMessageForbidden creates a GetWebchatGuestConversationMessageForbidden with default headers values
func NewGetWebchatGuestConversationMessageForbidden() *GetWebchatGuestConversationMessageForbidden {
	return &GetWebchatGuestConversationMessageForbidden{}
}

/*
GetWebchatGuestConversationMessageForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetWebchatGuestConversationMessageForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat guest conversation message forbidden response has a 2xx status code
func (o *GetWebchatGuestConversationMessageForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat guest conversation message forbidden response has a 3xx status code
func (o *GetWebchatGuestConversationMessageForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat guest conversation message forbidden response has a 4xx status code
func (o *GetWebchatGuestConversationMessageForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat guest conversation message forbidden response has a 5xx status code
func (o *GetWebchatGuestConversationMessageForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat guest conversation message forbidden response a status code equal to that given
func (o *GetWebchatGuestConversationMessageForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetWebchatGuestConversationMessageForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageForbidden  %+v", 403, o.Payload)
}

func (o *GetWebchatGuestConversationMessageForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageForbidden  %+v", 403, o.Payload)
}

func (o *GetWebchatGuestConversationMessageForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMessageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMessageNotFound creates a GetWebchatGuestConversationMessageNotFound with default headers values
func NewGetWebchatGuestConversationMessageNotFound() *GetWebchatGuestConversationMessageNotFound {
	return &GetWebchatGuestConversationMessageNotFound{}
}

/*
GetWebchatGuestConversationMessageNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetWebchatGuestConversationMessageNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat guest conversation message not found response has a 2xx status code
func (o *GetWebchatGuestConversationMessageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat guest conversation message not found response has a 3xx status code
func (o *GetWebchatGuestConversationMessageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat guest conversation message not found response has a 4xx status code
func (o *GetWebchatGuestConversationMessageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat guest conversation message not found response has a 5xx status code
func (o *GetWebchatGuestConversationMessageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat guest conversation message not found response a status code equal to that given
func (o *GetWebchatGuestConversationMessageNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetWebchatGuestConversationMessageNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageNotFound  %+v", 404, o.Payload)
}

func (o *GetWebchatGuestConversationMessageNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageNotFound  %+v", 404, o.Payload)
}

func (o *GetWebchatGuestConversationMessageNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMessageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMessageRequestTimeout creates a GetWebchatGuestConversationMessageRequestTimeout with default headers values
func NewGetWebchatGuestConversationMessageRequestTimeout() *GetWebchatGuestConversationMessageRequestTimeout {
	return &GetWebchatGuestConversationMessageRequestTimeout{}
}

/*
GetWebchatGuestConversationMessageRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetWebchatGuestConversationMessageRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat guest conversation message request timeout response has a 2xx status code
func (o *GetWebchatGuestConversationMessageRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat guest conversation message request timeout response has a 3xx status code
func (o *GetWebchatGuestConversationMessageRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat guest conversation message request timeout response has a 4xx status code
func (o *GetWebchatGuestConversationMessageRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat guest conversation message request timeout response has a 5xx status code
func (o *GetWebchatGuestConversationMessageRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat guest conversation message request timeout response a status code equal to that given
func (o *GetWebchatGuestConversationMessageRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetWebchatGuestConversationMessageRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetWebchatGuestConversationMessageRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetWebchatGuestConversationMessageRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMessageRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMessageRequestEntityTooLarge creates a GetWebchatGuestConversationMessageRequestEntityTooLarge with default headers values
func NewGetWebchatGuestConversationMessageRequestEntityTooLarge() *GetWebchatGuestConversationMessageRequestEntityTooLarge {
	return &GetWebchatGuestConversationMessageRequestEntityTooLarge{}
}

/*
GetWebchatGuestConversationMessageRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetWebchatGuestConversationMessageRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat guest conversation message request entity too large response has a 2xx status code
func (o *GetWebchatGuestConversationMessageRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat guest conversation message request entity too large response has a 3xx status code
func (o *GetWebchatGuestConversationMessageRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat guest conversation message request entity too large response has a 4xx status code
func (o *GetWebchatGuestConversationMessageRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat guest conversation message request entity too large response has a 5xx status code
func (o *GetWebchatGuestConversationMessageRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat guest conversation message request entity too large response a status code equal to that given
func (o *GetWebchatGuestConversationMessageRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetWebchatGuestConversationMessageRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetWebchatGuestConversationMessageRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetWebchatGuestConversationMessageRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMessageRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMessageUnsupportedMediaType creates a GetWebchatGuestConversationMessageUnsupportedMediaType with default headers values
func NewGetWebchatGuestConversationMessageUnsupportedMediaType() *GetWebchatGuestConversationMessageUnsupportedMediaType {
	return &GetWebchatGuestConversationMessageUnsupportedMediaType{}
}

/*
GetWebchatGuestConversationMessageUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetWebchatGuestConversationMessageUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat guest conversation message unsupported media type response has a 2xx status code
func (o *GetWebchatGuestConversationMessageUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat guest conversation message unsupported media type response has a 3xx status code
func (o *GetWebchatGuestConversationMessageUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat guest conversation message unsupported media type response has a 4xx status code
func (o *GetWebchatGuestConversationMessageUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat guest conversation message unsupported media type response has a 5xx status code
func (o *GetWebchatGuestConversationMessageUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat guest conversation message unsupported media type response a status code equal to that given
func (o *GetWebchatGuestConversationMessageUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetWebchatGuestConversationMessageUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetWebchatGuestConversationMessageUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetWebchatGuestConversationMessageUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMessageUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMessageTooManyRequests creates a GetWebchatGuestConversationMessageTooManyRequests with default headers values
func NewGetWebchatGuestConversationMessageTooManyRequests() *GetWebchatGuestConversationMessageTooManyRequests {
	return &GetWebchatGuestConversationMessageTooManyRequests{}
}

/*
GetWebchatGuestConversationMessageTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetWebchatGuestConversationMessageTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat guest conversation message too many requests response has a 2xx status code
func (o *GetWebchatGuestConversationMessageTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat guest conversation message too many requests response has a 3xx status code
func (o *GetWebchatGuestConversationMessageTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat guest conversation message too many requests response has a 4xx status code
func (o *GetWebchatGuestConversationMessageTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat guest conversation message too many requests response has a 5xx status code
func (o *GetWebchatGuestConversationMessageTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat guest conversation message too many requests response a status code equal to that given
func (o *GetWebchatGuestConversationMessageTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetWebchatGuestConversationMessageTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetWebchatGuestConversationMessageTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetWebchatGuestConversationMessageTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMessageTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMessageInternalServerError creates a GetWebchatGuestConversationMessageInternalServerError with default headers values
func NewGetWebchatGuestConversationMessageInternalServerError() *GetWebchatGuestConversationMessageInternalServerError {
	return &GetWebchatGuestConversationMessageInternalServerError{}
}

/*
GetWebchatGuestConversationMessageInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetWebchatGuestConversationMessageInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat guest conversation message internal server error response has a 2xx status code
func (o *GetWebchatGuestConversationMessageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat guest conversation message internal server error response has a 3xx status code
func (o *GetWebchatGuestConversationMessageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat guest conversation message internal server error response has a 4xx status code
func (o *GetWebchatGuestConversationMessageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get webchat guest conversation message internal server error response has a 5xx status code
func (o *GetWebchatGuestConversationMessageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get webchat guest conversation message internal server error response a status code equal to that given
func (o *GetWebchatGuestConversationMessageInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetWebchatGuestConversationMessageInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWebchatGuestConversationMessageInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWebchatGuestConversationMessageInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMessageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMessageServiceUnavailable creates a GetWebchatGuestConversationMessageServiceUnavailable with default headers values
func NewGetWebchatGuestConversationMessageServiceUnavailable() *GetWebchatGuestConversationMessageServiceUnavailable {
	return &GetWebchatGuestConversationMessageServiceUnavailable{}
}

/*
GetWebchatGuestConversationMessageServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetWebchatGuestConversationMessageServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat guest conversation message service unavailable response has a 2xx status code
func (o *GetWebchatGuestConversationMessageServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat guest conversation message service unavailable response has a 3xx status code
func (o *GetWebchatGuestConversationMessageServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat guest conversation message service unavailable response has a 4xx status code
func (o *GetWebchatGuestConversationMessageServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get webchat guest conversation message service unavailable response has a 5xx status code
func (o *GetWebchatGuestConversationMessageServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get webchat guest conversation message service unavailable response a status code equal to that given
func (o *GetWebchatGuestConversationMessageServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetWebchatGuestConversationMessageServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetWebchatGuestConversationMessageServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetWebchatGuestConversationMessageServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMessageServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMessageGatewayTimeout creates a GetWebchatGuestConversationMessageGatewayTimeout with default headers values
func NewGetWebchatGuestConversationMessageGatewayTimeout() *GetWebchatGuestConversationMessageGatewayTimeout {
	return &GetWebchatGuestConversationMessageGatewayTimeout{}
}

/*
GetWebchatGuestConversationMessageGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetWebchatGuestConversationMessageGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat guest conversation message gateway timeout response has a 2xx status code
func (o *GetWebchatGuestConversationMessageGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat guest conversation message gateway timeout response has a 3xx status code
func (o *GetWebchatGuestConversationMessageGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat guest conversation message gateway timeout response has a 4xx status code
func (o *GetWebchatGuestConversationMessageGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get webchat guest conversation message gateway timeout response has a 5xx status code
func (o *GetWebchatGuestConversationMessageGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get webchat guest conversation message gateway timeout response a status code equal to that given
func (o *GetWebchatGuestConversationMessageGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetWebchatGuestConversationMessageGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetWebchatGuestConversationMessageGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}][%d] getWebchatGuestConversationMessageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetWebchatGuestConversationMessageGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMessageGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

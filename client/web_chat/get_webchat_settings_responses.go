// Code generated by go-swagger; DO NOT EDIT.

package web_chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetWebchatSettingsReader is a Reader for the GetWebchatSettings structure.
type GetWebchatSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWebchatSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWebchatSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetWebchatSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetWebchatSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWebchatSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWebchatSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetWebchatSettingsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetWebchatSettingsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetWebchatSettingsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetWebchatSettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetWebchatSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetWebchatSettingsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetWebchatSettingsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetWebchatSettingsOK creates a GetWebchatSettingsOK with default headers values
func NewGetWebchatSettingsOK() *GetWebchatSettingsOK {
	return &GetWebchatSettingsOK{}
}

/*
GetWebchatSettingsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetWebchatSettingsOK struct {
	Payload *models.WebChatSettings
}

// IsSuccess returns true when this get webchat settings o k response has a 2xx status code
func (o *GetWebchatSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get webchat settings o k response has a 3xx status code
func (o *GetWebchatSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat settings o k response has a 4xx status code
func (o *GetWebchatSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get webchat settings o k response has a 5xx status code
func (o *GetWebchatSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat settings o k response a status code equal to that given
func (o *GetWebchatSettingsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetWebchatSettingsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsOK  %+v", 200, o.Payload)
}

func (o *GetWebchatSettingsOK) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsOK  %+v", 200, o.Payload)
}

func (o *GetWebchatSettingsOK) GetPayload() *models.WebChatSettings {
	return o.Payload
}

func (o *GetWebchatSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebChatSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatSettingsBadRequest creates a GetWebchatSettingsBadRequest with default headers values
func NewGetWebchatSettingsBadRequest() *GetWebchatSettingsBadRequest {
	return &GetWebchatSettingsBadRequest{}
}

/*
GetWebchatSettingsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetWebchatSettingsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat settings bad request response has a 2xx status code
func (o *GetWebchatSettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat settings bad request response has a 3xx status code
func (o *GetWebchatSettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat settings bad request response has a 4xx status code
func (o *GetWebchatSettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat settings bad request response has a 5xx status code
func (o *GetWebchatSettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat settings bad request response a status code equal to that given
func (o *GetWebchatSettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetWebchatSettingsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *GetWebchatSettingsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *GetWebchatSettingsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatSettingsUnauthorized creates a GetWebchatSettingsUnauthorized with default headers values
func NewGetWebchatSettingsUnauthorized() *GetWebchatSettingsUnauthorized {
	return &GetWebchatSettingsUnauthorized{}
}

/*
GetWebchatSettingsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetWebchatSettingsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat settings unauthorized response has a 2xx status code
func (o *GetWebchatSettingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat settings unauthorized response has a 3xx status code
func (o *GetWebchatSettingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat settings unauthorized response has a 4xx status code
func (o *GetWebchatSettingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat settings unauthorized response has a 5xx status code
func (o *GetWebchatSettingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat settings unauthorized response a status code equal to that given
func (o *GetWebchatSettingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetWebchatSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWebchatSettingsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWebchatSettingsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatSettingsForbidden creates a GetWebchatSettingsForbidden with default headers values
func NewGetWebchatSettingsForbidden() *GetWebchatSettingsForbidden {
	return &GetWebchatSettingsForbidden{}
}

/*
GetWebchatSettingsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetWebchatSettingsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat settings forbidden response has a 2xx status code
func (o *GetWebchatSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat settings forbidden response has a 3xx status code
func (o *GetWebchatSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat settings forbidden response has a 4xx status code
func (o *GetWebchatSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat settings forbidden response has a 5xx status code
func (o *GetWebchatSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat settings forbidden response a status code equal to that given
func (o *GetWebchatSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetWebchatSettingsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsForbidden  %+v", 403, o.Payload)
}

func (o *GetWebchatSettingsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsForbidden  %+v", 403, o.Payload)
}

func (o *GetWebchatSettingsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatSettingsNotFound creates a GetWebchatSettingsNotFound with default headers values
func NewGetWebchatSettingsNotFound() *GetWebchatSettingsNotFound {
	return &GetWebchatSettingsNotFound{}
}

/*
GetWebchatSettingsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetWebchatSettingsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat settings not found response has a 2xx status code
func (o *GetWebchatSettingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat settings not found response has a 3xx status code
func (o *GetWebchatSettingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat settings not found response has a 4xx status code
func (o *GetWebchatSettingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat settings not found response has a 5xx status code
func (o *GetWebchatSettingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat settings not found response a status code equal to that given
func (o *GetWebchatSettingsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetWebchatSettingsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsNotFound  %+v", 404, o.Payload)
}

func (o *GetWebchatSettingsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsNotFound  %+v", 404, o.Payload)
}

func (o *GetWebchatSettingsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatSettingsRequestTimeout creates a GetWebchatSettingsRequestTimeout with default headers values
func NewGetWebchatSettingsRequestTimeout() *GetWebchatSettingsRequestTimeout {
	return &GetWebchatSettingsRequestTimeout{}
}

/*
GetWebchatSettingsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetWebchatSettingsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat settings request timeout response has a 2xx status code
func (o *GetWebchatSettingsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat settings request timeout response has a 3xx status code
func (o *GetWebchatSettingsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat settings request timeout response has a 4xx status code
func (o *GetWebchatSettingsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat settings request timeout response has a 5xx status code
func (o *GetWebchatSettingsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat settings request timeout response a status code equal to that given
func (o *GetWebchatSettingsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetWebchatSettingsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetWebchatSettingsRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetWebchatSettingsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatSettingsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatSettingsRequestEntityTooLarge creates a GetWebchatSettingsRequestEntityTooLarge with default headers values
func NewGetWebchatSettingsRequestEntityTooLarge() *GetWebchatSettingsRequestEntityTooLarge {
	return &GetWebchatSettingsRequestEntityTooLarge{}
}

/*
GetWebchatSettingsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetWebchatSettingsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat settings request entity too large response has a 2xx status code
func (o *GetWebchatSettingsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat settings request entity too large response has a 3xx status code
func (o *GetWebchatSettingsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat settings request entity too large response has a 4xx status code
func (o *GetWebchatSettingsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat settings request entity too large response has a 5xx status code
func (o *GetWebchatSettingsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat settings request entity too large response a status code equal to that given
func (o *GetWebchatSettingsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetWebchatSettingsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetWebchatSettingsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetWebchatSettingsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatSettingsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatSettingsUnsupportedMediaType creates a GetWebchatSettingsUnsupportedMediaType with default headers values
func NewGetWebchatSettingsUnsupportedMediaType() *GetWebchatSettingsUnsupportedMediaType {
	return &GetWebchatSettingsUnsupportedMediaType{}
}

/*
GetWebchatSettingsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetWebchatSettingsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat settings unsupported media type response has a 2xx status code
func (o *GetWebchatSettingsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat settings unsupported media type response has a 3xx status code
func (o *GetWebchatSettingsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat settings unsupported media type response has a 4xx status code
func (o *GetWebchatSettingsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat settings unsupported media type response has a 5xx status code
func (o *GetWebchatSettingsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat settings unsupported media type response a status code equal to that given
func (o *GetWebchatSettingsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetWebchatSettingsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetWebchatSettingsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetWebchatSettingsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatSettingsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatSettingsTooManyRequests creates a GetWebchatSettingsTooManyRequests with default headers values
func NewGetWebchatSettingsTooManyRequests() *GetWebchatSettingsTooManyRequests {
	return &GetWebchatSettingsTooManyRequests{}
}

/*
GetWebchatSettingsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetWebchatSettingsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat settings too many requests response has a 2xx status code
func (o *GetWebchatSettingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat settings too many requests response has a 3xx status code
func (o *GetWebchatSettingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat settings too many requests response has a 4xx status code
func (o *GetWebchatSettingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat settings too many requests response has a 5xx status code
func (o *GetWebchatSettingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat settings too many requests response a status code equal to that given
func (o *GetWebchatSettingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetWebchatSettingsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetWebchatSettingsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetWebchatSettingsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatSettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatSettingsInternalServerError creates a GetWebchatSettingsInternalServerError with default headers values
func NewGetWebchatSettingsInternalServerError() *GetWebchatSettingsInternalServerError {
	return &GetWebchatSettingsInternalServerError{}
}

/*
GetWebchatSettingsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetWebchatSettingsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat settings internal server error response has a 2xx status code
func (o *GetWebchatSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat settings internal server error response has a 3xx status code
func (o *GetWebchatSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat settings internal server error response has a 4xx status code
func (o *GetWebchatSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get webchat settings internal server error response has a 5xx status code
func (o *GetWebchatSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get webchat settings internal server error response a status code equal to that given
func (o *GetWebchatSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetWebchatSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWebchatSettingsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWebchatSettingsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatSettingsServiceUnavailable creates a GetWebchatSettingsServiceUnavailable with default headers values
func NewGetWebchatSettingsServiceUnavailable() *GetWebchatSettingsServiceUnavailable {
	return &GetWebchatSettingsServiceUnavailable{}
}

/*
GetWebchatSettingsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetWebchatSettingsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat settings service unavailable response has a 2xx status code
func (o *GetWebchatSettingsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat settings service unavailable response has a 3xx status code
func (o *GetWebchatSettingsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat settings service unavailable response has a 4xx status code
func (o *GetWebchatSettingsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get webchat settings service unavailable response has a 5xx status code
func (o *GetWebchatSettingsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get webchat settings service unavailable response a status code equal to that given
func (o *GetWebchatSettingsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetWebchatSettingsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetWebchatSettingsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetWebchatSettingsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatSettingsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatSettingsGatewayTimeout creates a GetWebchatSettingsGatewayTimeout with default headers values
func NewGetWebchatSettingsGatewayTimeout() *GetWebchatSettingsGatewayTimeout {
	return &GetWebchatSettingsGatewayTimeout{}
}

/*
GetWebchatSettingsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetWebchatSettingsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat settings gateway timeout response has a 2xx status code
func (o *GetWebchatSettingsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat settings gateway timeout response has a 3xx status code
func (o *GetWebchatSettingsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat settings gateway timeout response has a 4xx status code
func (o *GetWebchatSettingsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get webchat settings gateway timeout response has a 5xx status code
func (o *GetWebchatSettingsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get webchat settings gateway timeout response a status code equal to that given
func (o *GetWebchatSettingsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetWebchatSettingsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetWebchatSettingsGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/settings][%d] getWebchatSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetWebchatSettingsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatSettingsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

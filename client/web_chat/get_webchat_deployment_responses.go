// Code generated by go-swagger; DO NOT EDIT.

package web_chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetWebchatDeploymentReader is a Reader for the GetWebchatDeployment structure.
type GetWebchatDeploymentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWebchatDeploymentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWebchatDeploymentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetWebchatDeploymentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetWebchatDeploymentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWebchatDeploymentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWebchatDeploymentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetWebchatDeploymentRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetWebchatDeploymentRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetWebchatDeploymentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetWebchatDeploymentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetWebchatDeploymentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetWebchatDeploymentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetWebchatDeploymentGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetWebchatDeploymentOK creates a GetWebchatDeploymentOK with default headers values
func NewGetWebchatDeploymentOK() *GetWebchatDeploymentOK {
	return &GetWebchatDeploymentOK{}
}

/*GetWebchatDeploymentOK handles this case with default header values.

successful operation
*/
type GetWebchatDeploymentOK struct {
	Payload *models.WebChatDeployment
}

func (o *GetWebchatDeploymentOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments/{deploymentId}][%d] getWebchatDeploymentOK  %+v", 200, o.Payload)
}

func (o *GetWebchatDeploymentOK) GetPayload() *models.WebChatDeployment {
	return o.Payload
}

func (o *GetWebchatDeploymentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebChatDeployment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentBadRequest creates a GetWebchatDeploymentBadRequest with default headers values
func NewGetWebchatDeploymentBadRequest() *GetWebchatDeploymentBadRequest {
	return &GetWebchatDeploymentBadRequest{}
}

/*GetWebchatDeploymentBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetWebchatDeploymentBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatDeploymentBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments/{deploymentId}][%d] getWebchatDeploymentBadRequest  %+v", 400, o.Payload)
}

func (o *GetWebchatDeploymentBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentUnauthorized creates a GetWebchatDeploymentUnauthorized with default headers values
func NewGetWebchatDeploymentUnauthorized() *GetWebchatDeploymentUnauthorized {
	return &GetWebchatDeploymentUnauthorized{}
}

/*GetWebchatDeploymentUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetWebchatDeploymentUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatDeploymentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments/{deploymentId}][%d] getWebchatDeploymentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWebchatDeploymentUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentForbidden creates a GetWebchatDeploymentForbidden with default headers values
func NewGetWebchatDeploymentForbidden() *GetWebchatDeploymentForbidden {
	return &GetWebchatDeploymentForbidden{}
}

/*GetWebchatDeploymentForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetWebchatDeploymentForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatDeploymentForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments/{deploymentId}][%d] getWebchatDeploymentForbidden  %+v", 403, o.Payload)
}

func (o *GetWebchatDeploymentForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentNotFound creates a GetWebchatDeploymentNotFound with default headers values
func NewGetWebchatDeploymentNotFound() *GetWebchatDeploymentNotFound {
	return &GetWebchatDeploymentNotFound{}
}

/*GetWebchatDeploymentNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetWebchatDeploymentNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatDeploymentNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments/{deploymentId}][%d] getWebchatDeploymentNotFound  %+v", 404, o.Payload)
}

func (o *GetWebchatDeploymentNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentRequestTimeout creates a GetWebchatDeploymentRequestTimeout with default headers values
func NewGetWebchatDeploymentRequestTimeout() *GetWebchatDeploymentRequestTimeout {
	return &GetWebchatDeploymentRequestTimeout{}
}

/*GetWebchatDeploymentRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetWebchatDeploymentRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatDeploymentRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments/{deploymentId}][%d] getWebchatDeploymentRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetWebchatDeploymentRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentRequestEntityTooLarge creates a GetWebchatDeploymentRequestEntityTooLarge with default headers values
func NewGetWebchatDeploymentRequestEntityTooLarge() *GetWebchatDeploymentRequestEntityTooLarge {
	return &GetWebchatDeploymentRequestEntityTooLarge{}
}

/*GetWebchatDeploymentRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetWebchatDeploymentRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatDeploymentRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments/{deploymentId}][%d] getWebchatDeploymentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetWebchatDeploymentRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentUnsupportedMediaType creates a GetWebchatDeploymentUnsupportedMediaType with default headers values
func NewGetWebchatDeploymentUnsupportedMediaType() *GetWebchatDeploymentUnsupportedMediaType {
	return &GetWebchatDeploymentUnsupportedMediaType{}
}

/*GetWebchatDeploymentUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetWebchatDeploymentUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatDeploymentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments/{deploymentId}][%d] getWebchatDeploymentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetWebchatDeploymentUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentTooManyRequests creates a GetWebchatDeploymentTooManyRequests with default headers values
func NewGetWebchatDeploymentTooManyRequests() *GetWebchatDeploymentTooManyRequests {
	return &GetWebchatDeploymentTooManyRequests{}
}

/*GetWebchatDeploymentTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetWebchatDeploymentTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatDeploymentTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments/{deploymentId}][%d] getWebchatDeploymentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetWebchatDeploymentTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentInternalServerError creates a GetWebchatDeploymentInternalServerError with default headers values
func NewGetWebchatDeploymentInternalServerError() *GetWebchatDeploymentInternalServerError {
	return &GetWebchatDeploymentInternalServerError{}
}

/*GetWebchatDeploymentInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetWebchatDeploymentInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatDeploymentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments/{deploymentId}][%d] getWebchatDeploymentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWebchatDeploymentInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentServiceUnavailable creates a GetWebchatDeploymentServiceUnavailable with default headers values
func NewGetWebchatDeploymentServiceUnavailable() *GetWebchatDeploymentServiceUnavailable {
	return &GetWebchatDeploymentServiceUnavailable{}
}

/*GetWebchatDeploymentServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetWebchatDeploymentServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatDeploymentServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments/{deploymentId}][%d] getWebchatDeploymentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetWebchatDeploymentServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentGatewayTimeout creates a GetWebchatDeploymentGatewayTimeout with default headers values
func NewGetWebchatDeploymentGatewayTimeout() *GetWebchatDeploymentGatewayTimeout {
	return &GetWebchatDeploymentGatewayTimeout{}
}

/*GetWebchatDeploymentGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetWebchatDeploymentGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatDeploymentGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments/{deploymentId}][%d] getWebchatDeploymentGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetWebchatDeploymentGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

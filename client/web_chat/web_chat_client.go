// Code generated by go-swagger; DO NOT EDIT.

package web_chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the web chat client
type API interface {
	/*
	   DeleteWebchatDeployment deletes a web chat deployment
	*/
	DeleteWebchatDeployment(ctx context.Context, params *DeleteWebchatDeploymentParams) (*DeleteWebchatDeploymentNoContent, error)
	/*
	   DeleteWebchatGuestConversationMember removes a member from a chat conversation
	*/
	DeleteWebchatGuestConversationMember(ctx context.Context, params *DeleteWebchatGuestConversationMemberParams) (*DeleteWebchatGuestConversationMemberNoContent, error)
	/*
	   DeleteWebchatSettings removes web chat deployment settings
	*/
	DeleteWebchatSettings(ctx context.Context, params *DeleteWebchatSettingsParams) (*DeleteWebchatSettingsNoContent, error)
	/*
	   GetWebchatDeployment gets a web chat deployment
	*/
	GetWebchatDeployment(ctx context.Context, params *GetWebchatDeploymentParams) (*GetWebchatDeploymentOK, error)
	/*
	   GetWebchatDeployments lists web chat deployments
	*/
	GetWebchatDeployments(ctx context.Context, params *GetWebchatDeploymentsParams) (*GetWebchatDeploymentsOK, error)
	/*
	   GetWebchatGuestConversationMediarequest gets a media request in the conversation
	*/
	GetWebchatGuestConversationMediarequest(ctx context.Context, params *GetWebchatGuestConversationMediarequestParams) (*GetWebchatGuestConversationMediarequestOK, error)
	/*
	   GetWebchatGuestConversationMediarequests gets all media requests to the guest in the conversation
	*/
	GetWebchatGuestConversationMediarequests(ctx context.Context, params *GetWebchatGuestConversationMediarequestsParams) (*GetWebchatGuestConversationMediarequestsOK, error)
	/*
	   GetWebchatGuestConversationMember gets a web chat conversation member
	*/
	GetWebchatGuestConversationMember(ctx context.Context, params *GetWebchatGuestConversationMemberParams) (*GetWebchatGuestConversationMemberOK, error)
	/*
	   GetWebchatGuestConversationMembers gets the members of a chat conversation
	*/
	GetWebchatGuestConversationMembers(ctx context.Context, params *GetWebchatGuestConversationMembersParams) (*GetWebchatGuestConversationMembersOK, error)
	/*
	   GetWebchatGuestConversationMessage gets a web chat conversation message
	*/
	GetWebchatGuestConversationMessage(ctx context.Context, params *GetWebchatGuestConversationMessageParams) (*GetWebchatGuestConversationMessageOK, error)
	/*
	   GetWebchatGuestConversationMessages gets the messages of a chat conversation
	*/
	GetWebchatGuestConversationMessages(ctx context.Context, params *GetWebchatGuestConversationMessagesParams) (*GetWebchatGuestConversationMessagesOK, error)
	/*
	   GetWebchatSettings gets web chat deployment settings
	*/
	GetWebchatSettings(ctx context.Context, params *GetWebchatSettingsParams) (*GetWebchatSettingsOK, error)
	/*
	   PatchWebchatGuestConversationMediarequest updates a media request in the conversation setting the state to a c c e p t e d d e c l i n e d e r r o r e d
	*/
	PatchWebchatGuestConversationMediarequest(ctx context.Context, params *PatchWebchatGuestConversationMediarequestParams) (*PatchWebchatGuestConversationMediarequestOK, error)
	/*
	   PostWebchatDeployments creates web chat deployment
	*/
	PostWebchatDeployments(ctx context.Context, params *PostWebchatDeploymentsParams) (*PostWebchatDeploymentsOK, error)
	/*
	   PostWebchatGuestConversationMemberMessages sends a message in a chat conversation
	*/
	PostWebchatGuestConversationMemberMessages(ctx context.Context, params *PostWebchatGuestConversationMemberMessagesParams) (*PostWebchatGuestConversationMemberMessagesOK, error)
	/*
	   PostWebchatGuestConversationMemberTyping sends a typing indicator in a chat conversation
	*/
	PostWebchatGuestConversationMemberTyping(ctx context.Context, params *PostWebchatGuestConversationMemberTypingParams) (*PostWebchatGuestConversationMemberTypingOK, error)
	/*
	   PostWebchatGuestConversations creates an a c d chat conversation from an external customer
	   This endpoint will create a new ACD Chat conversation under the specified Chat Deployment.
	    The conversation will begin with a guest member in it (with a role=CUSTOMER) according to the customer information that is supplied. If the guest member is authenticated, the 'memberAuthToken' field should include his JWT as generated by the 'POST /api/v2/signeddata' resource; if the guest member is anonymous (and the Deployment permits it) this field can be omitted.
	    The returned data includes the IDs of the conversation created, along with a newly-create JWT token that you can supply to all future endpoints as authentication to perform operations against that conversation. After successfully creating a conversation, you should connect a websocket to the event stream named in the 'eventStreamUri' field of the response; the conversation is not routed until the event stream is attached.
	*/
	PostWebchatGuestConversations(ctx context.Context, params *PostWebchatGuestConversationsParams) (*PostWebchatGuestConversationsOK, error)
	/*
	   PutWebchatDeployment updates a web chat deployment
	*/
	PutWebchatDeployment(ctx context.Context, params *PutWebchatDeploymentParams) (*PutWebchatDeploymentOK, error)
	/*
	   PutWebchatSettings updates web chat deployment settings
	*/
	PutWebchatSettings(ctx context.Context, params *PutWebchatSettingsParams) (*PutWebchatSettingsOK, error)
}

// New creates a new web chat API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for web chat API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteWebchatDeployment deletes a web chat deployment
*/
func (a *Client) DeleteWebchatDeployment(ctx context.Context, params *DeleteWebchatDeploymentParams) (*DeleteWebchatDeploymentNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWebchatDeployment",
		Method:             "DELETE",
		PathPattern:        "/api/v2/webchat/deployments/{deploymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWebchatDeploymentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWebchatDeploymentNoContent), nil

}

/*
DeleteWebchatGuestConversationMember removes a member from a chat conversation
*/
func (a *Client) DeleteWebchatGuestConversationMember(ctx context.Context, params *DeleteWebchatGuestConversationMemberParams) (*DeleteWebchatGuestConversationMemberNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWebchatGuestConversationMember",
		Method:             "DELETE",
		PathPattern:        "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWebchatGuestConversationMemberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWebchatGuestConversationMemberNoContent), nil

}

/*
DeleteWebchatSettings removes web chat deployment settings
*/
func (a *Client) DeleteWebchatSettings(ctx context.Context, params *DeleteWebchatSettingsParams) (*DeleteWebchatSettingsNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWebchatSettings",
		Method:             "DELETE",
		PathPattern:        "/api/v2/webchat/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWebchatSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWebchatSettingsNoContent), nil

}

/*
GetWebchatDeployment gets a web chat deployment
*/
func (a *Client) GetWebchatDeployment(ctx context.Context, params *GetWebchatDeploymentParams) (*GetWebchatDeploymentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebchatDeployment",
		Method:             "GET",
		PathPattern:        "/api/v2/webchat/deployments/{deploymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebchatDeploymentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebchatDeploymentOK), nil

}

/*
GetWebchatDeployments lists web chat deployments
*/
func (a *Client) GetWebchatDeployments(ctx context.Context, params *GetWebchatDeploymentsParams) (*GetWebchatDeploymentsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebchatDeployments",
		Method:             "GET",
		PathPattern:        "/api/v2/webchat/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebchatDeploymentsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebchatDeploymentsOK), nil

}

/*
GetWebchatGuestConversationMediarequest gets a media request in the conversation
*/
func (a *Client) GetWebchatGuestConversationMediarequest(ctx context.Context, params *GetWebchatGuestConversationMediarequestParams) (*GetWebchatGuestConversationMediarequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebchatGuestConversationMediarequest",
		Method:             "GET",
		PathPattern:        "/api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebchatGuestConversationMediarequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebchatGuestConversationMediarequestOK), nil

}

/*
GetWebchatGuestConversationMediarequests gets all media requests to the guest in the conversation
*/
func (a *Client) GetWebchatGuestConversationMediarequests(ctx context.Context, params *GetWebchatGuestConversationMediarequestsParams) (*GetWebchatGuestConversationMediarequestsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebchatGuestConversationMediarequests",
		Method:             "GET",
		PathPattern:        "/api/v2/webchat/guest/conversations/{conversationId}/mediarequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebchatGuestConversationMediarequestsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebchatGuestConversationMediarequestsOK), nil

}

/*
GetWebchatGuestConversationMember gets a web chat conversation member
*/
func (a *Client) GetWebchatGuestConversationMember(ctx context.Context, params *GetWebchatGuestConversationMemberParams) (*GetWebchatGuestConversationMemberOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebchatGuestConversationMember",
		Method:             "GET",
		PathPattern:        "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebchatGuestConversationMemberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebchatGuestConversationMemberOK), nil

}

/*
GetWebchatGuestConversationMembers gets the members of a chat conversation
*/
func (a *Client) GetWebchatGuestConversationMembers(ctx context.Context, params *GetWebchatGuestConversationMembersParams) (*GetWebchatGuestConversationMembersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebchatGuestConversationMembers",
		Method:             "GET",
		PathPattern:        "/api/v2/webchat/guest/conversations/{conversationId}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebchatGuestConversationMembersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebchatGuestConversationMembersOK), nil

}

/*
GetWebchatGuestConversationMessage gets a web chat conversation message
*/
func (a *Client) GetWebchatGuestConversationMessage(ctx context.Context, params *GetWebchatGuestConversationMessageParams) (*GetWebchatGuestConversationMessageOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebchatGuestConversationMessage",
		Method:             "GET",
		PathPattern:        "/api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebchatGuestConversationMessageReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebchatGuestConversationMessageOK), nil

}

/*
GetWebchatGuestConversationMessages gets the messages of a chat conversation
*/
func (a *Client) GetWebchatGuestConversationMessages(ctx context.Context, params *GetWebchatGuestConversationMessagesParams) (*GetWebchatGuestConversationMessagesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebchatGuestConversationMessages",
		Method:             "GET",
		PathPattern:        "/api/v2/webchat/guest/conversations/{conversationId}/messages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebchatGuestConversationMessagesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebchatGuestConversationMessagesOK), nil

}

/*
GetWebchatSettings gets web chat deployment settings
*/
func (a *Client) GetWebchatSettings(ctx context.Context, params *GetWebchatSettingsParams) (*GetWebchatSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebchatSettings",
		Method:             "GET",
		PathPattern:        "/api/v2/webchat/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebchatSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebchatSettingsOK), nil

}

/*
PatchWebchatGuestConversationMediarequest updates a media request in the conversation setting the state to a c c e p t e d d e c l i n e d e r r o r e d
*/
func (a *Client) PatchWebchatGuestConversationMediarequest(ctx context.Context, params *PatchWebchatGuestConversationMediarequestParams) (*PatchWebchatGuestConversationMediarequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWebchatGuestConversationMediarequest",
		Method:             "PATCH",
		PathPattern:        "/api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWebchatGuestConversationMediarequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWebchatGuestConversationMediarequestOK), nil

}

/*
PostWebchatDeployments creates web chat deployment
*/
func (a *Client) PostWebchatDeployments(ctx context.Context, params *PostWebchatDeploymentsParams) (*PostWebchatDeploymentsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWebchatDeployments",
		Method:             "POST",
		PathPattern:        "/api/v2/webchat/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWebchatDeploymentsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWebchatDeploymentsOK), nil

}

/*
PostWebchatGuestConversationMemberMessages sends a message in a chat conversation
*/
func (a *Client) PostWebchatGuestConversationMemberMessages(ctx context.Context, params *PostWebchatGuestConversationMemberMessagesParams) (*PostWebchatGuestConversationMemberMessagesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWebchatGuestConversationMemberMessages",
		Method:             "POST",
		PathPattern:        "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/messages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWebchatGuestConversationMemberMessagesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWebchatGuestConversationMemberMessagesOK), nil

}

/*
PostWebchatGuestConversationMemberTyping sends a typing indicator in a chat conversation
*/
func (a *Client) PostWebchatGuestConversationMemberTyping(ctx context.Context, params *PostWebchatGuestConversationMemberTypingParams) (*PostWebchatGuestConversationMemberTypingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWebchatGuestConversationMemberTyping",
		Method:             "POST",
		PathPattern:        "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/typing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWebchatGuestConversationMemberTypingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWebchatGuestConversationMemberTypingOK), nil

}

/*
PostWebchatGuestConversations creates an a c d chat conversation from an external customer

This endpoint will create a new ACD Chat conversation under the specified Chat Deployment.

	The conversation will begin with a guest member in it (with a role=CUSTOMER) according to the customer information that is supplied. If the guest member is authenticated, the 'memberAuthToken' field should include his JWT as generated by the 'POST /api/v2/signeddata' resource; if the guest member is anonymous (and the Deployment permits it) this field can be omitted.
	The returned data includes the IDs of the conversation created, along with a newly-create JWT token that you can supply to all future endpoints as authentication to perform operations against that conversation. After successfully creating a conversation, you should connect a websocket to the event stream named in the 'eventStreamUri' field of the response; the conversation is not routed until the event stream is attached.
*/
func (a *Client) PostWebchatGuestConversations(ctx context.Context, params *PostWebchatGuestConversationsParams) (*PostWebchatGuestConversationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWebchatGuestConversations",
		Method:             "POST",
		PathPattern:        "/api/v2/webchat/guest/conversations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWebchatGuestConversationsReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWebchatGuestConversationsOK), nil

}

/*
PutWebchatDeployment updates a web chat deployment
*/
func (a *Client) PutWebchatDeployment(ctx context.Context, params *PutWebchatDeploymentParams) (*PutWebchatDeploymentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putWebchatDeployment",
		Method:             "PUT",
		PathPattern:        "/api/v2/webchat/deployments/{deploymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutWebchatDeploymentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutWebchatDeploymentOK), nil

}

/*
PutWebchatSettings updates web chat deployment settings
*/
func (a *Client) PutWebchatSettings(ctx context.Context, params *PutWebchatSettingsParams) (*PutWebchatSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putWebchatSettings",
		Method:             "PUT",
		PathPattern:        "/api/v2/webchat/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutWebchatSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutWebchatSettingsOK), nil

}

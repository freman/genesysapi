// Code generated by go-swagger; DO NOT EDIT.

package web_chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetWebchatDeploymentsReader is a Reader for the GetWebchatDeployments structure.
type GetWebchatDeploymentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWebchatDeploymentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWebchatDeploymentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetWebchatDeploymentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetWebchatDeploymentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWebchatDeploymentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWebchatDeploymentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetWebchatDeploymentsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetWebchatDeploymentsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetWebchatDeploymentsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetWebchatDeploymentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetWebchatDeploymentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetWebchatDeploymentsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetWebchatDeploymentsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetWebchatDeploymentsOK creates a GetWebchatDeploymentsOK with default headers values
func NewGetWebchatDeploymentsOK() *GetWebchatDeploymentsOK {
	return &GetWebchatDeploymentsOK{}
}

/*
GetWebchatDeploymentsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetWebchatDeploymentsOK struct {
	Payload *models.WebChatDeploymentEntityListing
}

// IsSuccess returns true when this get webchat deployments o k response has a 2xx status code
func (o *GetWebchatDeploymentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get webchat deployments o k response has a 3xx status code
func (o *GetWebchatDeploymentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat deployments o k response has a 4xx status code
func (o *GetWebchatDeploymentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get webchat deployments o k response has a 5xx status code
func (o *GetWebchatDeploymentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat deployments o k response a status code equal to that given
func (o *GetWebchatDeploymentsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetWebchatDeploymentsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsOK  %+v", 200, o.Payload)
}

func (o *GetWebchatDeploymentsOK) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsOK  %+v", 200, o.Payload)
}

func (o *GetWebchatDeploymentsOK) GetPayload() *models.WebChatDeploymentEntityListing {
	return o.Payload
}

func (o *GetWebchatDeploymentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebChatDeploymentEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentsBadRequest creates a GetWebchatDeploymentsBadRequest with default headers values
func NewGetWebchatDeploymentsBadRequest() *GetWebchatDeploymentsBadRequest {
	return &GetWebchatDeploymentsBadRequest{}
}

/*
GetWebchatDeploymentsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetWebchatDeploymentsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat deployments bad request response has a 2xx status code
func (o *GetWebchatDeploymentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat deployments bad request response has a 3xx status code
func (o *GetWebchatDeploymentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat deployments bad request response has a 4xx status code
func (o *GetWebchatDeploymentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat deployments bad request response has a 5xx status code
func (o *GetWebchatDeploymentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat deployments bad request response a status code equal to that given
func (o *GetWebchatDeploymentsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetWebchatDeploymentsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsBadRequest  %+v", 400, o.Payload)
}

func (o *GetWebchatDeploymentsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsBadRequest  %+v", 400, o.Payload)
}

func (o *GetWebchatDeploymentsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentsUnauthorized creates a GetWebchatDeploymentsUnauthorized with default headers values
func NewGetWebchatDeploymentsUnauthorized() *GetWebchatDeploymentsUnauthorized {
	return &GetWebchatDeploymentsUnauthorized{}
}

/*
GetWebchatDeploymentsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetWebchatDeploymentsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat deployments unauthorized response has a 2xx status code
func (o *GetWebchatDeploymentsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat deployments unauthorized response has a 3xx status code
func (o *GetWebchatDeploymentsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat deployments unauthorized response has a 4xx status code
func (o *GetWebchatDeploymentsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat deployments unauthorized response has a 5xx status code
func (o *GetWebchatDeploymentsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat deployments unauthorized response a status code equal to that given
func (o *GetWebchatDeploymentsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetWebchatDeploymentsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWebchatDeploymentsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWebchatDeploymentsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentsForbidden creates a GetWebchatDeploymentsForbidden with default headers values
func NewGetWebchatDeploymentsForbidden() *GetWebchatDeploymentsForbidden {
	return &GetWebchatDeploymentsForbidden{}
}

/*
GetWebchatDeploymentsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetWebchatDeploymentsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat deployments forbidden response has a 2xx status code
func (o *GetWebchatDeploymentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat deployments forbidden response has a 3xx status code
func (o *GetWebchatDeploymentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat deployments forbidden response has a 4xx status code
func (o *GetWebchatDeploymentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat deployments forbidden response has a 5xx status code
func (o *GetWebchatDeploymentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat deployments forbidden response a status code equal to that given
func (o *GetWebchatDeploymentsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetWebchatDeploymentsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsForbidden  %+v", 403, o.Payload)
}

func (o *GetWebchatDeploymentsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsForbidden  %+v", 403, o.Payload)
}

func (o *GetWebchatDeploymentsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentsNotFound creates a GetWebchatDeploymentsNotFound with default headers values
func NewGetWebchatDeploymentsNotFound() *GetWebchatDeploymentsNotFound {
	return &GetWebchatDeploymentsNotFound{}
}

/*
GetWebchatDeploymentsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetWebchatDeploymentsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat deployments not found response has a 2xx status code
func (o *GetWebchatDeploymentsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat deployments not found response has a 3xx status code
func (o *GetWebchatDeploymentsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat deployments not found response has a 4xx status code
func (o *GetWebchatDeploymentsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat deployments not found response has a 5xx status code
func (o *GetWebchatDeploymentsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat deployments not found response a status code equal to that given
func (o *GetWebchatDeploymentsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetWebchatDeploymentsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsNotFound  %+v", 404, o.Payload)
}

func (o *GetWebchatDeploymentsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsNotFound  %+v", 404, o.Payload)
}

func (o *GetWebchatDeploymentsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentsRequestTimeout creates a GetWebchatDeploymentsRequestTimeout with default headers values
func NewGetWebchatDeploymentsRequestTimeout() *GetWebchatDeploymentsRequestTimeout {
	return &GetWebchatDeploymentsRequestTimeout{}
}

/*
GetWebchatDeploymentsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetWebchatDeploymentsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat deployments request timeout response has a 2xx status code
func (o *GetWebchatDeploymentsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat deployments request timeout response has a 3xx status code
func (o *GetWebchatDeploymentsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat deployments request timeout response has a 4xx status code
func (o *GetWebchatDeploymentsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat deployments request timeout response has a 5xx status code
func (o *GetWebchatDeploymentsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat deployments request timeout response a status code equal to that given
func (o *GetWebchatDeploymentsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetWebchatDeploymentsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetWebchatDeploymentsRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetWebchatDeploymentsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentsRequestEntityTooLarge creates a GetWebchatDeploymentsRequestEntityTooLarge with default headers values
func NewGetWebchatDeploymentsRequestEntityTooLarge() *GetWebchatDeploymentsRequestEntityTooLarge {
	return &GetWebchatDeploymentsRequestEntityTooLarge{}
}

/*
GetWebchatDeploymentsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetWebchatDeploymentsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat deployments request entity too large response has a 2xx status code
func (o *GetWebchatDeploymentsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat deployments request entity too large response has a 3xx status code
func (o *GetWebchatDeploymentsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat deployments request entity too large response has a 4xx status code
func (o *GetWebchatDeploymentsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat deployments request entity too large response has a 5xx status code
func (o *GetWebchatDeploymentsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat deployments request entity too large response a status code equal to that given
func (o *GetWebchatDeploymentsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetWebchatDeploymentsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetWebchatDeploymentsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetWebchatDeploymentsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentsUnsupportedMediaType creates a GetWebchatDeploymentsUnsupportedMediaType with default headers values
func NewGetWebchatDeploymentsUnsupportedMediaType() *GetWebchatDeploymentsUnsupportedMediaType {
	return &GetWebchatDeploymentsUnsupportedMediaType{}
}

/*
GetWebchatDeploymentsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetWebchatDeploymentsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat deployments unsupported media type response has a 2xx status code
func (o *GetWebchatDeploymentsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat deployments unsupported media type response has a 3xx status code
func (o *GetWebchatDeploymentsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat deployments unsupported media type response has a 4xx status code
func (o *GetWebchatDeploymentsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat deployments unsupported media type response has a 5xx status code
func (o *GetWebchatDeploymentsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat deployments unsupported media type response a status code equal to that given
func (o *GetWebchatDeploymentsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetWebchatDeploymentsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetWebchatDeploymentsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetWebchatDeploymentsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentsTooManyRequests creates a GetWebchatDeploymentsTooManyRequests with default headers values
func NewGetWebchatDeploymentsTooManyRequests() *GetWebchatDeploymentsTooManyRequests {
	return &GetWebchatDeploymentsTooManyRequests{}
}

/*
GetWebchatDeploymentsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetWebchatDeploymentsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat deployments too many requests response has a 2xx status code
func (o *GetWebchatDeploymentsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat deployments too many requests response has a 3xx status code
func (o *GetWebchatDeploymentsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat deployments too many requests response has a 4xx status code
func (o *GetWebchatDeploymentsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webchat deployments too many requests response has a 5xx status code
func (o *GetWebchatDeploymentsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get webchat deployments too many requests response a status code equal to that given
func (o *GetWebchatDeploymentsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetWebchatDeploymentsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetWebchatDeploymentsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetWebchatDeploymentsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentsInternalServerError creates a GetWebchatDeploymentsInternalServerError with default headers values
func NewGetWebchatDeploymentsInternalServerError() *GetWebchatDeploymentsInternalServerError {
	return &GetWebchatDeploymentsInternalServerError{}
}

/*
GetWebchatDeploymentsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetWebchatDeploymentsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat deployments internal server error response has a 2xx status code
func (o *GetWebchatDeploymentsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat deployments internal server error response has a 3xx status code
func (o *GetWebchatDeploymentsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat deployments internal server error response has a 4xx status code
func (o *GetWebchatDeploymentsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get webchat deployments internal server error response has a 5xx status code
func (o *GetWebchatDeploymentsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get webchat deployments internal server error response a status code equal to that given
func (o *GetWebchatDeploymentsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetWebchatDeploymentsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWebchatDeploymentsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWebchatDeploymentsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentsServiceUnavailable creates a GetWebchatDeploymentsServiceUnavailable with default headers values
func NewGetWebchatDeploymentsServiceUnavailable() *GetWebchatDeploymentsServiceUnavailable {
	return &GetWebchatDeploymentsServiceUnavailable{}
}

/*
GetWebchatDeploymentsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetWebchatDeploymentsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat deployments service unavailable response has a 2xx status code
func (o *GetWebchatDeploymentsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat deployments service unavailable response has a 3xx status code
func (o *GetWebchatDeploymentsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat deployments service unavailable response has a 4xx status code
func (o *GetWebchatDeploymentsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get webchat deployments service unavailable response has a 5xx status code
func (o *GetWebchatDeploymentsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get webchat deployments service unavailable response a status code equal to that given
func (o *GetWebchatDeploymentsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetWebchatDeploymentsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetWebchatDeploymentsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetWebchatDeploymentsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatDeploymentsGatewayTimeout creates a GetWebchatDeploymentsGatewayTimeout with default headers values
func NewGetWebchatDeploymentsGatewayTimeout() *GetWebchatDeploymentsGatewayTimeout {
	return &GetWebchatDeploymentsGatewayTimeout{}
}

/*
GetWebchatDeploymentsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetWebchatDeploymentsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get webchat deployments gateway timeout response has a 2xx status code
func (o *GetWebchatDeploymentsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webchat deployments gateway timeout response has a 3xx status code
func (o *GetWebchatDeploymentsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webchat deployments gateway timeout response has a 4xx status code
func (o *GetWebchatDeploymentsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get webchat deployments gateway timeout response has a 5xx status code
func (o *GetWebchatDeploymentsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get webchat deployments gateway timeout response a status code equal to that given
func (o *GetWebchatDeploymentsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetWebchatDeploymentsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetWebchatDeploymentsGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/webchat/deployments][%d] getWebchatDeploymentsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetWebchatDeploymentsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatDeploymentsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

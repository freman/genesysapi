// Code generated by go-swagger; DO NOT EDIT.

package web_chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetWebchatGuestConversationMediarequestsReader is a Reader for the GetWebchatGuestConversationMediarequests structure.
type GetWebchatGuestConversationMediarequestsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWebchatGuestConversationMediarequestsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWebchatGuestConversationMediarequestsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetWebchatGuestConversationMediarequestsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetWebchatGuestConversationMediarequestsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWebchatGuestConversationMediarequestsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWebchatGuestConversationMediarequestsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetWebchatGuestConversationMediarequestsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetWebchatGuestConversationMediarequestsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetWebchatGuestConversationMediarequestsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetWebchatGuestConversationMediarequestsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetWebchatGuestConversationMediarequestsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetWebchatGuestConversationMediarequestsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetWebchatGuestConversationMediarequestsOK creates a GetWebchatGuestConversationMediarequestsOK with default headers values
func NewGetWebchatGuestConversationMediarequestsOK() *GetWebchatGuestConversationMediarequestsOK {
	return &GetWebchatGuestConversationMediarequestsOK{}
}

/*GetWebchatGuestConversationMediarequestsOK handles this case with default header values.

successful operation
*/
type GetWebchatGuestConversationMediarequestsOK struct {
	Payload *models.WebChatGuestMediaRequestEntityList
}

func (o *GetWebchatGuestConversationMediarequestsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests][%d] getWebchatGuestConversationMediarequestsOK  %+v", 200, o.Payload)
}

func (o *GetWebchatGuestConversationMediarequestsOK) GetPayload() *models.WebChatGuestMediaRequestEntityList {
	return o.Payload
}

func (o *GetWebchatGuestConversationMediarequestsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebChatGuestMediaRequestEntityList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMediarequestsBadRequest creates a GetWebchatGuestConversationMediarequestsBadRequest with default headers values
func NewGetWebchatGuestConversationMediarequestsBadRequest() *GetWebchatGuestConversationMediarequestsBadRequest {
	return &GetWebchatGuestConversationMediarequestsBadRequest{}
}

/*GetWebchatGuestConversationMediarequestsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetWebchatGuestConversationMediarequestsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMediarequestsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests][%d] getWebchatGuestConversationMediarequestsBadRequest  %+v", 400, o.Payload)
}

func (o *GetWebchatGuestConversationMediarequestsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMediarequestsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMediarequestsUnauthorized creates a GetWebchatGuestConversationMediarequestsUnauthorized with default headers values
func NewGetWebchatGuestConversationMediarequestsUnauthorized() *GetWebchatGuestConversationMediarequestsUnauthorized {
	return &GetWebchatGuestConversationMediarequestsUnauthorized{}
}

/*GetWebchatGuestConversationMediarequestsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetWebchatGuestConversationMediarequestsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMediarequestsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests][%d] getWebchatGuestConversationMediarequestsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWebchatGuestConversationMediarequestsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMediarequestsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMediarequestsForbidden creates a GetWebchatGuestConversationMediarequestsForbidden with default headers values
func NewGetWebchatGuestConversationMediarequestsForbidden() *GetWebchatGuestConversationMediarequestsForbidden {
	return &GetWebchatGuestConversationMediarequestsForbidden{}
}

/*GetWebchatGuestConversationMediarequestsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetWebchatGuestConversationMediarequestsForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMediarequestsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests][%d] getWebchatGuestConversationMediarequestsForbidden  %+v", 403, o.Payload)
}

func (o *GetWebchatGuestConversationMediarequestsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMediarequestsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMediarequestsNotFound creates a GetWebchatGuestConversationMediarequestsNotFound with default headers values
func NewGetWebchatGuestConversationMediarequestsNotFound() *GetWebchatGuestConversationMediarequestsNotFound {
	return &GetWebchatGuestConversationMediarequestsNotFound{}
}

/*GetWebchatGuestConversationMediarequestsNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetWebchatGuestConversationMediarequestsNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMediarequestsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests][%d] getWebchatGuestConversationMediarequestsNotFound  %+v", 404, o.Payload)
}

func (o *GetWebchatGuestConversationMediarequestsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMediarequestsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMediarequestsRequestEntityTooLarge creates a GetWebchatGuestConversationMediarequestsRequestEntityTooLarge with default headers values
func NewGetWebchatGuestConversationMediarequestsRequestEntityTooLarge() *GetWebchatGuestConversationMediarequestsRequestEntityTooLarge {
	return &GetWebchatGuestConversationMediarequestsRequestEntityTooLarge{}
}

/*GetWebchatGuestConversationMediarequestsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetWebchatGuestConversationMediarequestsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMediarequestsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests][%d] getWebchatGuestConversationMediarequestsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetWebchatGuestConversationMediarequestsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMediarequestsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMediarequestsUnsupportedMediaType creates a GetWebchatGuestConversationMediarequestsUnsupportedMediaType with default headers values
func NewGetWebchatGuestConversationMediarequestsUnsupportedMediaType() *GetWebchatGuestConversationMediarequestsUnsupportedMediaType {
	return &GetWebchatGuestConversationMediarequestsUnsupportedMediaType{}
}

/*GetWebchatGuestConversationMediarequestsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetWebchatGuestConversationMediarequestsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMediarequestsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests][%d] getWebchatGuestConversationMediarequestsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetWebchatGuestConversationMediarequestsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMediarequestsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMediarequestsTooManyRequests creates a GetWebchatGuestConversationMediarequestsTooManyRequests with default headers values
func NewGetWebchatGuestConversationMediarequestsTooManyRequests() *GetWebchatGuestConversationMediarequestsTooManyRequests {
	return &GetWebchatGuestConversationMediarequestsTooManyRequests{}
}

/*GetWebchatGuestConversationMediarequestsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type GetWebchatGuestConversationMediarequestsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMediarequestsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests][%d] getWebchatGuestConversationMediarequestsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetWebchatGuestConversationMediarequestsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMediarequestsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMediarequestsInternalServerError creates a GetWebchatGuestConversationMediarequestsInternalServerError with default headers values
func NewGetWebchatGuestConversationMediarequestsInternalServerError() *GetWebchatGuestConversationMediarequestsInternalServerError {
	return &GetWebchatGuestConversationMediarequestsInternalServerError{}
}

/*GetWebchatGuestConversationMediarequestsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetWebchatGuestConversationMediarequestsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMediarequestsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests][%d] getWebchatGuestConversationMediarequestsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWebchatGuestConversationMediarequestsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMediarequestsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMediarequestsServiceUnavailable creates a GetWebchatGuestConversationMediarequestsServiceUnavailable with default headers values
func NewGetWebchatGuestConversationMediarequestsServiceUnavailable() *GetWebchatGuestConversationMediarequestsServiceUnavailable {
	return &GetWebchatGuestConversationMediarequestsServiceUnavailable{}
}

/*GetWebchatGuestConversationMediarequestsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetWebchatGuestConversationMediarequestsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMediarequestsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests][%d] getWebchatGuestConversationMediarequestsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetWebchatGuestConversationMediarequestsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMediarequestsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMediarequestsGatewayTimeout creates a GetWebchatGuestConversationMediarequestsGatewayTimeout with default headers values
func NewGetWebchatGuestConversationMediarequestsGatewayTimeout() *GetWebchatGuestConversationMediarequestsGatewayTimeout {
	return &GetWebchatGuestConversationMediarequestsGatewayTimeout{}
}

/*GetWebchatGuestConversationMediarequestsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetWebchatGuestConversationMediarequestsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMediarequestsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests][%d] getWebchatGuestConversationMediarequestsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetWebchatGuestConversationMediarequestsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMediarequestsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

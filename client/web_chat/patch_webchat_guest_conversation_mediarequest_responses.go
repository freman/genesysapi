// Code generated by go-swagger; DO NOT EDIT.

package web_chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchWebchatGuestConversationMediarequestReader is a Reader for the PatchWebchatGuestConversationMediarequest structure.
type PatchWebchatGuestConversationMediarequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchWebchatGuestConversationMediarequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchWebchatGuestConversationMediarequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchWebchatGuestConversationMediarequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchWebchatGuestConversationMediarequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchWebchatGuestConversationMediarequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchWebchatGuestConversationMediarequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchWebchatGuestConversationMediarequestRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchWebchatGuestConversationMediarequestRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchWebchatGuestConversationMediarequestUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchWebchatGuestConversationMediarequestTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchWebchatGuestConversationMediarequestInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchWebchatGuestConversationMediarequestServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchWebchatGuestConversationMediarequestGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchWebchatGuestConversationMediarequestOK creates a PatchWebchatGuestConversationMediarequestOK with default headers values
func NewPatchWebchatGuestConversationMediarequestOK() *PatchWebchatGuestConversationMediarequestOK {
	return &PatchWebchatGuestConversationMediarequestOK{}
}

/*
PatchWebchatGuestConversationMediarequestOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchWebchatGuestConversationMediarequestOK struct {
	Payload *models.WebChatGuestMediaRequest
}

// IsSuccess returns true when this patch webchat guest conversation mediarequest o k response has a 2xx status code
func (o *PatchWebchatGuestConversationMediarequestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch webchat guest conversation mediarequest o k response has a 3xx status code
func (o *PatchWebchatGuestConversationMediarequestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch webchat guest conversation mediarequest o k response has a 4xx status code
func (o *PatchWebchatGuestConversationMediarequestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch webchat guest conversation mediarequest o k response has a 5xx status code
func (o *PatchWebchatGuestConversationMediarequestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch webchat guest conversation mediarequest o k response a status code equal to that given
func (o *PatchWebchatGuestConversationMediarequestOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchWebchatGuestConversationMediarequestOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestOK  %+v", 200, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestOK  %+v", 200, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestOK) GetPayload() *models.WebChatGuestMediaRequest {
	return o.Payload
}

func (o *PatchWebchatGuestConversationMediarequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebChatGuestMediaRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebchatGuestConversationMediarequestBadRequest creates a PatchWebchatGuestConversationMediarequestBadRequest with default headers values
func NewPatchWebchatGuestConversationMediarequestBadRequest() *PatchWebchatGuestConversationMediarequestBadRequest {
	return &PatchWebchatGuestConversationMediarequestBadRequest{}
}

/*
PatchWebchatGuestConversationMediarequestBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchWebchatGuestConversationMediarequestBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch webchat guest conversation mediarequest bad request response has a 2xx status code
func (o *PatchWebchatGuestConversationMediarequestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch webchat guest conversation mediarequest bad request response has a 3xx status code
func (o *PatchWebchatGuestConversationMediarequestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch webchat guest conversation mediarequest bad request response has a 4xx status code
func (o *PatchWebchatGuestConversationMediarequestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch webchat guest conversation mediarequest bad request response has a 5xx status code
func (o *PatchWebchatGuestConversationMediarequestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch webchat guest conversation mediarequest bad request response a status code equal to that given
func (o *PatchWebchatGuestConversationMediarequestBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchWebchatGuestConversationMediarequestBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestBadRequest  %+v", 400, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestBadRequest  %+v", 400, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchWebchatGuestConversationMediarequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebchatGuestConversationMediarequestUnauthorized creates a PatchWebchatGuestConversationMediarequestUnauthorized with default headers values
func NewPatchWebchatGuestConversationMediarequestUnauthorized() *PatchWebchatGuestConversationMediarequestUnauthorized {
	return &PatchWebchatGuestConversationMediarequestUnauthorized{}
}

/*
PatchWebchatGuestConversationMediarequestUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchWebchatGuestConversationMediarequestUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch webchat guest conversation mediarequest unauthorized response has a 2xx status code
func (o *PatchWebchatGuestConversationMediarequestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch webchat guest conversation mediarequest unauthorized response has a 3xx status code
func (o *PatchWebchatGuestConversationMediarequestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch webchat guest conversation mediarequest unauthorized response has a 4xx status code
func (o *PatchWebchatGuestConversationMediarequestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch webchat guest conversation mediarequest unauthorized response has a 5xx status code
func (o *PatchWebchatGuestConversationMediarequestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch webchat guest conversation mediarequest unauthorized response a status code equal to that given
func (o *PatchWebchatGuestConversationMediarequestUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchWebchatGuestConversationMediarequestUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchWebchatGuestConversationMediarequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebchatGuestConversationMediarequestForbidden creates a PatchWebchatGuestConversationMediarequestForbidden with default headers values
func NewPatchWebchatGuestConversationMediarequestForbidden() *PatchWebchatGuestConversationMediarequestForbidden {
	return &PatchWebchatGuestConversationMediarequestForbidden{}
}

/*
PatchWebchatGuestConversationMediarequestForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchWebchatGuestConversationMediarequestForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch webchat guest conversation mediarequest forbidden response has a 2xx status code
func (o *PatchWebchatGuestConversationMediarequestForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch webchat guest conversation mediarequest forbidden response has a 3xx status code
func (o *PatchWebchatGuestConversationMediarequestForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch webchat guest conversation mediarequest forbidden response has a 4xx status code
func (o *PatchWebchatGuestConversationMediarequestForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch webchat guest conversation mediarequest forbidden response has a 5xx status code
func (o *PatchWebchatGuestConversationMediarequestForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch webchat guest conversation mediarequest forbidden response a status code equal to that given
func (o *PatchWebchatGuestConversationMediarequestForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchWebchatGuestConversationMediarequestForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestForbidden  %+v", 403, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestForbidden  %+v", 403, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchWebchatGuestConversationMediarequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebchatGuestConversationMediarequestNotFound creates a PatchWebchatGuestConversationMediarequestNotFound with default headers values
func NewPatchWebchatGuestConversationMediarequestNotFound() *PatchWebchatGuestConversationMediarequestNotFound {
	return &PatchWebchatGuestConversationMediarequestNotFound{}
}

/*
PatchWebchatGuestConversationMediarequestNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchWebchatGuestConversationMediarequestNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch webchat guest conversation mediarequest not found response has a 2xx status code
func (o *PatchWebchatGuestConversationMediarequestNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch webchat guest conversation mediarequest not found response has a 3xx status code
func (o *PatchWebchatGuestConversationMediarequestNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch webchat guest conversation mediarequest not found response has a 4xx status code
func (o *PatchWebchatGuestConversationMediarequestNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch webchat guest conversation mediarequest not found response has a 5xx status code
func (o *PatchWebchatGuestConversationMediarequestNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch webchat guest conversation mediarequest not found response a status code equal to that given
func (o *PatchWebchatGuestConversationMediarequestNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchWebchatGuestConversationMediarequestNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestNotFound  %+v", 404, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestNotFound  %+v", 404, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchWebchatGuestConversationMediarequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebchatGuestConversationMediarequestRequestTimeout creates a PatchWebchatGuestConversationMediarequestRequestTimeout with default headers values
func NewPatchWebchatGuestConversationMediarequestRequestTimeout() *PatchWebchatGuestConversationMediarequestRequestTimeout {
	return &PatchWebchatGuestConversationMediarequestRequestTimeout{}
}

/*
PatchWebchatGuestConversationMediarequestRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchWebchatGuestConversationMediarequestRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch webchat guest conversation mediarequest request timeout response has a 2xx status code
func (o *PatchWebchatGuestConversationMediarequestRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch webchat guest conversation mediarequest request timeout response has a 3xx status code
func (o *PatchWebchatGuestConversationMediarequestRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch webchat guest conversation mediarequest request timeout response has a 4xx status code
func (o *PatchWebchatGuestConversationMediarequestRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch webchat guest conversation mediarequest request timeout response has a 5xx status code
func (o *PatchWebchatGuestConversationMediarequestRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch webchat guest conversation mediarequest request timeout response a status code equal to that given
func (o *PatchWebchatGuestConversationMediarequestRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchWebchatGuestConversationMediarequestRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchWebchatGuestConversationMediarequestRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebchatGuestConversationMediarequestRequestEntityTooLarge creates a PatchWebchatGuestConversationMediarequestRequestEntityTooLarge with default headers values
func NewPatchWebchatGuestConversationMediarequestRequestEntityTooLarge() *PatchWebchatGuestConversationMediarequestRequestEntityTooLarge {
	return &PatchWebchatGuestConversationMediarequestRequestEntityTooLarge{}
}

/*
PatchWebchatGuestConversationMediarequestRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchWebchatGuestConversationMediarequestRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch webchat guest conversation mediarequest request entity too large response has a 2xx status code
func (o *PatchWebchatGuestConversationMediarequestRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch webchat guest conversation mediarequest request entity too large response has a 3xx status code
func (o *PatchWebchatGuestConversationMediarequestRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch webchat guest conversation mediarequest request entity too large response has a 4xx status code
func (o *PatchWebchatGuestConversationMediarequestRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch webchat guest conversation mediarequest request entity too large response has a 5xx status code
func (o *PatchWebchatGuestConversationMediarequestRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch webchat guest conversation mediarequest request entity too large response a status code equal to that given
func (o *PatchWebchatGuestConversationMediarequestRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchWebchatGuestConversationMediarequestRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchWebchatGuestConversationMediarequestRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebchatGuestConversationMediarequestUnsupportedMediaType creates a PatchWebchatGuestConversationMediarequestUnsupportedMediaType with default headers values
func NewPatchWebchatGuestConversationMediarequestUnsupportedMediaType() *PatchWebchatGuestConversationMediarequestUnsupportedMediaType {
	return &PatchWebchatGuestConversationMediarequestUnsupportedMediaType{}
}

/*
PatchWebchatGuestConversationMediarequestUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchWebchatGuestConversationMediarequestUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch webchat guest conversation mediarequest unsupported media type response has a 2xx status code
func (o *PatchWebchatGuestConversationMediarequestUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch webchat guest conversation mediarequest unsupported media type response has a 3xx status code
func (o *PatchWebchatGuestConversationMediarequestUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch webchat guest conversation mediarequest unsupported media type response has a 4xx status code
func (o *PatchWebchatGuestConversationMediarequestUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch webchat guest conversation mediarequest unsupported media type response has a 5xx status code
func (o *PatchWebchatGuestConversationMediarequestUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch webchat guest conversation mediarequest unsupported media type response a status code equal to that given
func (o *PatchWebchatGuestConversationMediarequestUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchWebchatGuestConversationMediarequestUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchWebchatGuestConversationMediarequestUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebchatGuestConversationMediarequestTooManyRequests creates a PatchWebchatGuestConversationMediarequestTooManyRequests with default headers values
func NewPatchWebchatGuestConversationMediarequestTooManyRequests() *PatchWebchatGuestConversationMediarequestTooManyRequests {
	return &PatchWebchatGuestConversationMediarequestTooManyRequests{}
}

/*
PatchWebchatGuestConversationMediarequestTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchWebchatGuestConversationMediarequestTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch webchat guest conversation mediarequest too many requests response has a 2xx status code
func (o *PatchWebchatGuestConversationMediarequestTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch webchat guest conversation mediarequest too many requests response has a 3xx status code
func (o *PatchWebchatGuestConversationMediarequestTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch webchat guest conversation mediarequest too many requests response has a 4xx status code
func (o *PatchWebchatGuestConversationMediarequestTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch webchat guest conversation mediarequest too many requests response has a 5xx status code
func (o *PatchWebchatGuestConversationMediarequestTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch webchat guest conversation mediarequest too many requests response a status code equal to that given
func (o *PatchWebchatGuestConversationMediarequestTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchWebchatGuestConversationMediarequestTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchWebchatGuestConversationMediarequestTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebchatGuestConversationMediarequestInternalServerError creates a PatchWebchatGuestConversationMediarequestInternalServerError with default headers values
func NewPatchWebchatGuestConversationMediarequestInternalServerError() *PatchWebchatGuestConversationMediarequestInternalServerError {
	return &PatchWebchatGuestConversationMediarequestInternalServerError{}
}

/*
PatchWebchatGuestConversationMediarequestInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchWebchatGuestConversationMediarequestInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch webchat guest conversation mediarequest internal server error response has a 2xx status code
func (o *PatchWebchatGuestConversationMediarequestInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch webchat guest conversation mediarequest internal server error response has a 3xx status code
func (o *PatchWebchatGuestConversationMediarequestInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch webchat guest conversation mediarequest internal server error response has a 4xx status code
func (o *PatchWebchatGuestConversationMediarequestInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch webchat guest conversation mediarequest internal server error response has a 5xx status code
func (o *PatchWebchatGuestConversationMediarequestInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch webchat guest conversation mediarequest internal server error response a status code equal to that given
func (o *PatchWebchatGuestConversationMediarequestInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchWebchatGuestConversationMediarequestInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchWebchatGuestConversationMediarequestInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebchatGuestConversationMediarequestServiceUnavailable creates a PatchWebchatGuestConversationMediarequestServiceUnavailable with default headers values
func NewPatchWebchatGuestConversationMediarequestServiceUnavailable() *PatchWebchatGuestConversationMediarequestServiceUnavailable {
	return &PatchWebchatGuestConversationMediarequestServiceUnavailable{}
}

/*
PatchWebchatGuestConversationMediarequestServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchWebchatGuestConversationMediarequestServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch webchat guest conversation mediarequest service unavailable response has a 2xx status code
func (o *PatchWebchatGuestConversationMediarequestServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch webchat guest conversation mediarequest service unavailable response has a 3xx status code
func (o *PatchWebchatGuestConversationMediarequestServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch webchat guest conversation mediarequest service unavailable response has a 4xx status code
func (o *PatchWebchatGuestConversationMediarequestServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch webchat guest conversation mediarequest service unavailable response has a 5xx status code
func (o *PatchWebchatGuestConversationMediarequestServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch webchat guest conversation mediarequest service unavailable response a status code equal to that given
func (o *PatchWebchatGuestConversationMediarequestServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchWebchatGuestConversationMediarequestServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchWebchatGuestConversationMediarequestServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebchatGuestConversationMediarequestGatewayTimeout creates a PatchWebchatGuestConversationMediarequestGatewayTimeout with default headers values
func NewPatchWebchatGuestConversationMediarequestGatewayTimeout() *PatchWebchatGuestConversationMediarequestGatewayTimeout {
	return &PatchWebchatGuestConversationMediarequestGatewayTimeout{}
}

/*
PatchWebchatGuestConversationMediarequestGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchWebchatGuestConversationMediarequestGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch webchat guest conversation mediarequest gateway timeout response has a 2xx status code
func (o *PatchWebchatGuestConversationMediarequestGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch webchat guest conversation mediarequest gateway timeout response has a 3xx status code
func (o *PatchWebchatGuestConversationMediarequestGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch webchat guest conversation mediarequest gateway timeout response has a 4xx status code
func (o *PatchWebchatGuestConversationMediarequestGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch webchat guest conversation mediarequest gateway timeout response has a 5xx status code
func (o *PatchWebchatGuestConversationMediarequestGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch webchat guest conversation mediarequest gateway timeout response a status code equal to that given
func (o *PatchWebchatGuestConversationMediarequestGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchWebchatGuestConversationMediarequestGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}][%d] patchWebchatGuestConversationMediarequestGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchWebchatGuestConversationMediarequestGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchWebchatGuestConversationMediarequestGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package web_chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetWebchatGuestConversationMemberReader is a Reader for the GetWebchatGuestConversationMember structure.
type GetWebchatGuestConversationMemberReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWebchatGuestConversationMemberReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWebchatGuestConversationMemberOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetWebchatGuestConversationMemberBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetWebchatGuestConversationMemberUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWebchatGuestConversationMemberForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWebchatGuestConversationMemberNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetWebchatGuestConversationMemberRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetWebchatGuestConversationMemberRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetWebchatGuestConversationMemberUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetWebchatGuestConversationMemberTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetWebchatGuestConversationMemberInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetWebchatGuestConversationMemberServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetWebchatGuestConversationMemberGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetWebchatGuestConversationMemberOK creates a GetWebchatGuestConversationMemberOK with default headers values
func NewGetWebchatGuestConversationMemberOK() *GetWebchatGuestConversationMemberOK {
	return &GetWebchatGuestConversationMemberOK{}
}

/*GetWebchatGuestConversationMemberOK handles this case with default header values.

successful operation
*/
type GetWebchatGuestConversationMemberOK struct {
	Payload *models.WebChatMemberInfo
}

func (o *GetWebchatGuestConversationMemberOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}][%d] getWebchatGuestConversationMemberOK  %+v", 200, o.Payload)
}

func (o *GetWebchatGuestConversationMemberOK) GetPayload() *models.WebChatMemberInfo {
	return o.Payload
}

func (o *GetWebchatGuestConversationMemberOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebChatMemberInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMemberBadRequest creates a GetWebchatGuestConversationMemberBadRequest with default headers values
func NewGetWebchatGuestConversationMemberBadRequest() *GetWebchatGuestConversationMemberBadRequest {
	return &GetWebchatGuestConversationMemberBadRequest{}
}

/*GetWebchatGuestConversationMemberBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetWebchatGuestConversationMemberBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMemberBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}][%d] getWebchatGuestConversationMemberBadRequest  %+v", 400, o.Payload)
}

func (o *GetWebchatGuestConversationMemberBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMemberBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMemberUnauthorized creates a GetWebchatGuestConversationMemberUnauthorized with default headers values
func NewGetWebchatGuestConversationMemberUnauthorized() *GetWebchatGuestConversationMemberUnauthorized {
	return &GetWebchatGuestConversationMemberUnauthorized{}
}

/*GetWebchatGuestConversationMemberUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetWebchatGuestConversationMemberUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMemberUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}][%d] getWebchatGuestConversationMemberUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWebchatGuestConversationMemberUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMemberUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMemberForbidden creates a GetWebchatGuestConversationMemberForbidden with default headers values
func NewGetWebchatGuestConversationMemberForbidden() *GetWebchatGuestConversationMemberForbidden {
	return &GetWebchatGuestConversationMemberForbidden{}
}

/*GetWebchatGuestConversationMemberForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetWebchatGuestConversationMemberForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMemberForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}][%d] getWebchatGuestConversationMemberForbidden  %+v", 403, o.Payload)
}

func (o *GetWebchatGuestConversationMemberForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMemberForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMemberNotFound creates a GetWebchatGuestConversationMemberNotFound with default headers values
func NewGetWebchatGuestConversationMemberNotFound() *GetWebchatGuestConversationMemberNotFound {
	return &GetWebchatGuestConversationMemberNotFound{}
}

/*GetWebchatGuestConversationMemberNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetWebchatGuestConversationMemberNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMemberNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}][%d] getWebchatGuestConversationMemberNotFound  %+v", 404, o.Payload)
}

func (o *GetWebchatGuestConversationMemberNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMemberNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMemberRequestTimeout creates a GetWebchatGuestConversationMemberRequestTimeout with default headers values
func NewGetWebchatGuestConversationMemberRequestTimeout() *GetWebchatGuestConversationMemberRequestTimeout {
	return &GetWebchatGuestConversationMemberRequestTimeout{}
}

/*GetWebchatGuestConversationMemberRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetWebchatGuestConversationMemberRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMemberRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}][%d] getWebchatGuestConversationMemberRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetWebchatGuestConversationMemberRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMemberRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMemberRequestEntityTooLarge creates a GetWebchatGuestConversationMemberRequestEntityTooLarge with default headers values
func NewGetWebchatGuestConversationMemberRequestEntityTooLarge() *GetWebchatGuestConversationMemberRequestEntityTooLarge {
	return &GetWebchatGuestConversationMemberRequestEntityTooLarge{}
}

/*GetWebchatGuestConversationMemberRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetWebchatGuestConversationMemberRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMemberRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}][%d] getWebchatGuestConversationMemberRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetWebchatGuestConversationMemberRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMemberRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMemberUnsupportedMediaType creates a GetWebchatGuestConversationMemberUnsupportedMediaType with default headers values
func NewGetWebchatGuestConversationMemberUnsupportedMediaType() *GetWebchatGuestConversationMemberUnsupportedMediaType {
	return &GetWebchatGuestConversationMemberUnsupportedMediaType{}
}

/*GetWebchatGuestConversationMemberUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetWebchatGuestConversationMemberUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMemberUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}][%d] getWebchatGuestConversationMemberUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetWebchatGuestConversationMemberUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMemberUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMemberTooManyRequests creates a GetWebchatGuestConversationMemberTooManyRequests with default headers values
func NewGetWebchatGuestConversationMemberTooManyRequests() *GetWebchatGuestConversationMemberTooManyRequests {
	return &GetWebchatGuestConversationMemberTooManyRequests{}
}

/*GetWebchatGuestConversationMemberTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetWebchatGuestConversationMemberTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMemberTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}][%d] getWebchatGuestConversationMemberTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetWebchatGuestConversationMemberTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMemberTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMemberInternalServerError creates a GetWebchatGuestConversationMemberInternalServerError with default headers values
func NewGetWebchatGuestConversationMemberInternalServerError() *GetWebchatGuestConversationMemberInternalServerError {
	return &GetWebchatGuestConversationMemberInternalServerError{}
}

/*GetWebchatGuestConversationMemberInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetWebchatGuestConversationMemberInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMemberInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}][%d] getWebchatGuestConversationMemberInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWebchatGuestConversationMemberInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMemberInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMemberServiceUnavailable creates a GetWebchatGuestConversationMemberServiceUnavailable with default headers values
func NewGetWebchatGuestConversationMemberServiceUnavailable() *GetWebchatGuestConversationMemberServiceUnavailable {
	return &GetWebchatGuestConversationMemberServiceUnavailable{}
}

/*GetWebchatGuestConversationMemberServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetWebchatGuestConversationMemberServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMemberServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}][%d] getWebchatGuestConversationMemberServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetWebchatGuestConversationMemberServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMemberServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebchatGuestConversationMemberGatewayTimeout creates a GetWebchatGuestConversationMemberGatewayTimeout with default headers values
func NewGetWebchatGuestConversationMemberGatewayTimeout() *GetWebchatGuestConversationMemberGatewayTimeout {
	return &GetWebchatGuestConversationMemberGatewayTimeout{}
}

/*GetWebchatGuestConversationMemberGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetWebchatGuestConversationMemberGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetWebchatGuestConversationMemberGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}][%d] getWebchatGuestConversationMemberGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetWebchatGuestConversationMemberGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetWebchatGuestConversationMemberGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

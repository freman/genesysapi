// Code generated by go-swagger; DO NOT EDIT.

package web_chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutWebchatSettingsReader is a Reader for the PutWebchatSettings structure.
type PutWebchatSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutWebchatSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutWebchatSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutWebchatSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutWebchatSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutWebchatSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutWebchatSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutWebchatSettingsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutWebchatSettingsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutWebchatSettingsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutWebchatSettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutWebchatSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutWebchatSettingsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutWebchatSettingsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutWebchatSettingsOK creates a PutWebchatSettingsOK with default headers values
func NewPutWebchatSettingsOK() *PutWebchatSettingsOK {
	return &PutWebchatSettingsOK{}
}

/*
PutWebchatSettingsOK describes a response with status code 200, with default header values.

successful operation
*/
type PutWebchatSettingsOK struct {
	Payload *models.WebChatSettings
}

// IsSuccess returns true when this put webchat settings o k response has a 2xx status code
func (o *PutWebchatSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put webchat settings o k response has a 3xx status code
func (o *PutWebchatSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webchat settings o k response has a 4xx status code
func (o *PutWebchatSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put webchat settings o k response has a 5xx status code
func (o *PutWebchatSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put webchat settings o k response a status code equal to that given
func (o *PutWebchatSettingsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutWebchatSettingsOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsOK  %+v", 200, o.Payload)
}

func (o *PutWebchatSettingsOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsOK  %+v", 200, o.Payload)
}

func (o *PutWebchatSettingsOK) GetPayload() *models.WebChatSettings {
	return o.Payload
}

func (o *PutWebchatSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebChatSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebchatSettingsBadRequest creates a PutWebchatSettingsBadRequest with default headers values
func NewPutWebchatSettingsBadRequest() *PutWebchatSettingsBadRequest {
	return &PutWebchatSettingsBadRequest{}
}

/*
PutWebchatSettingsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutWebchatSettingsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webchat settings bad request response has a 2xx status code
func (o *PutWebchatSettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webchat settings bad request response has a 3xx status code
func (o *PutWebchatSettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webchat settings bad request response has a 4xx status code
func (o *PutWebchatSettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webchat settings bad request response has a 5xx status code
func (o *PutWebchatSettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put webchat settings bad request response a status code equal to that given
func (o *PutWebchatSettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutWebchatSettingsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PutWebchatSettingsBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PutWebchatSettingsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebchatSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebchatSettingsUnauthorized creates a PutWebchatSettingsUnauthorized with default headers values
func NewPutWebchatSettingsUnauthorized() *PutWebchatSettingsUnauthorized {
	return &PutWebchatSettingsUnauthorized{}
}

/*
PutWebchatSettingsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutWebchatSettingsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webchat settings unauthorized response has a 2xx status code
func (o *PutWebchatSettingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webchat settings unauthorized response has a 3xx status code
func (o *PutWebchatSettingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webchat settings unauthorized response has a 4xx status code
func (o *PutWebchatSettingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webchat settings unauthorized response has a 5xx status code
func (o *PutWebchatSettingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put webchat settings unauthorized response a status code equal to that given
func (o *PutWebchatSettingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutWebchatSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PutWebchatSettingsUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PutWebchatSettingsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebchatSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebchatSettingsForbidden creates a PutWebchatSettingsForbidden with default headers values
func NewPutWebchatSettingsForbidden() *PutWebchatSettingsForbidden {
	return &PutWebchatSettingsForbidden{}
}

/*
PutWebchatSettingsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutWebchatSettingsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webchat settings forbidden response has a 2xx status code
func (o *PutWebchatSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webchat settings forbidden response has a 3xx status code
func (o *PutWebchatSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webchat settings forbidden response has a 4xx status code
func (o *PutWebchatSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webchat settings forbidden response has a 5xx status code
func (o *PutWebchatSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put webchat settings forbidden response a status code equal to that given
func (o *PutWebchatSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutWebchatSettingsForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PutWebchatSettingsForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PutWebchatSettingsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebchatSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebchatSettingsNotFound creates a PutWebchatSettingsNotFound with default headers values
func NewPutWebchatSettingsNotFound() *PutWebchatSettingsNotFound {
	return &PutWebchatSettingsNotFound{}
}

/*
PutWebchatSettingsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutWebchatSettingsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webchat settings not found response has a 2xx status code
func (o *PutWebchatSettingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webchat settings not found response has a 3xx status code
func (o *PutWebchatSettingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webchat settings not found response has a 4xx status code
func (o *PutWebchatSettingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webchat settings not found response has a 5xx status code
func (o *PutWebchatSettingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put webchat settings not found response a status code equal to that given
func (o *PutWebchatSettingsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutWebchatSettingsNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PutWebchatSettingsNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PutWebchatSettingsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebchatSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebchatSettingsRequestTimeout creates a PutWebchatSettingsRequestTimeout with default headers values
func NewPutWebchatSettingsRequestTimeout() *PutWebchatSettingsRequestTimeout {
	return &PutWebchatSettingsRequestTimeout{}
}

/*
PutWebchatSettingsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutWebchatSettingsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webchat settings request timeout response has a 2xx status code
func (o *PutWebchatSettingsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webchat settings request timeout response has a 3xx status code
func (o *PutWebchatSettingsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webchat settings request timeout response has a 4xx status code
func (o *PutWebchatSettingsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webchat settings request timeout response has a 5xx status code
func (o *PutWebchatSettingsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put webchat settings request timeout response a status code equal to that given
func (o *PutWebchatSettingsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutWebchatSettingsRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutWebchatSettingsRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutWebchatSettingsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebchatSettingsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebchatSettingsRequestEntityTooLarge creates a PutWebchatSettingsRequestEntityTooLarge with default headers values
func NewPutWebchatSettingsRequestEntityTooLarge() *PutWebchatSettingsRequestEntityTooLarge {
	return &PutWebchatSettingsRequestEntityTooLarge{}
}

/*
PutWebchatSettingsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PutWebchatSettingsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webchat settings request entity too large response has a 2xx status code
func (o *PutWebchatSettingsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webchat settings request entity too large response has a 3xx status code
func (o *PutWebchatSettingsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webchat settings request entity too large response has a 4xx status code
func (o *PutWebchatSettingsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webchat settings request entity too large response has a 5xx status code
func (o *PutWebchatSettingsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put webchat settings request entity too large response a status code equal to that given
func (o *PutWebchatSettingsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutWebchatSettingsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutWebchatSettingsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutWebchatSettingsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebchatSettingsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebchatSettingsUnsupportedMediaType creates a PutWebchatSettingsUnsupportedMediaType with default headers values
func NewPutWebchatSettingsUnsupportedMediaType() *PutWebchatSettingsUnsupportedMediaType {
	return &PutWebchatSettingsUnsupportedMediaType{}
}

/*
PutWebchatSettingsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutWebchatSettingsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webchat settings unsupported media type response has a 2xx status code
func (o *PutWebchatSettingsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webchat settings unsupported media type response has a 3xx status code
func (o *PutWebchatSettingsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webchat settings unsupported media type response has a 4xx status code
func (o *PutWebchatSettingsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webchat settings unsupported media type response has a 5xx status code
func (o *PutWebchatSettingsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put webchat settings unsupported media type response a status code equal to that given
func (o *PutWebchatSettingsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutWebchatSettingsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutWebchatSettingsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutWebchatSettingsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebchatSettingsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebchatSettingsTooManyRequests creates a PutWebchatSettingsTooManyRequests with default headers values
func NewPutWebchatSettingsTooManyRequests() *PutWebchatSettingsTooManyRequests {
	return &PutWebchatSettingsTooManyRequests{}
}

/*
PutWebchatSettingsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutWebchatSettingsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webchat settings too many requests response has a 2xx status code
func (o *PutWebchatSettingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webchat settings too many requests response has a 3xx status code
func (o *PutWebchatSettingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webchat settings too many requests response has a 4xx status code
func (o *PutWebchatSettingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webchat settings too many requests response has a 5xx status code
func (o *PutWebchatSettingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put webchat settings too many requests response a status code equal to that given
func (o *PutWebchatSettingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutWebchatSettingsTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutWebchatSettingsTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutWebchatSettingsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebchatSettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebchatSettingsInternalServerError creates a PutWebchatSettingsInternalServerError with default headers values
func NewPutWebchatSettingsInternalServerError() *PutWebchatSettingsInternalServerError {
	return &PutWebchatSettingsInternalServerError{}
}

/*
PutWebchatSettingsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutWebchatSettingsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webchat settings internal server error response has a 2xx status code
func (o *PutWebchatSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webchat settings internal server error response has a 3xx status code
func (o *PutWebchatSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webchat settings internal server error response has a 4xx status code
func (o *PutWebchatSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put webchat settings internal server error response has a 5xx status code
func (o *PutWebchatSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put webchat settings internal server error response a status code equal to that given
func (o *PutWebchatSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutWebchatSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PutWebchatSettingsInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PutWebchatSettingsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebchatSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebchatSettingsServiceUnavailable creates a PutWebchatSettingsServiceUnavailable with default headers values
func NewPutWebchatSettingsServiceUnavailable() *PutWebchatSettingsServiceUnavailable {
	return &PutWebchatSettingsServiceUnavailable{}
}

/*
PutWebchatSettingsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutWebchatSettingsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webchat settings service unavailable response has a 2xx status code
func (o *PutWebchatSettingsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webchat settings service unavailable response has a 3xx status code
func (o *PutWebchatSettingsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webchat settings service unavailable response has a 4xx status code
func (o *PutWebchatSettingsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put webchat settings service unavailable response has a 5xx status code
func (o *PutWebchatSettingsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put webchat settings service unavailable response a status code equal to that given
func (o *PutWebchatSettingsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutWebchatSettingsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutWebchatSettingsServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutWebchatSettingsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebchatSettingsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebchatSettingsGatewayTimeout creates a PutWebchatSettingsGatewayTimeout with default headers values
func NewPutWebchatSettingsGatewayTimeout() *PutWebchatSettingsGatewayTimeout {
	return &PutWebchatSettingsGatewayTimeout{}
}

/*
PutWebchatSettingsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutWebchatSettingsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webchat settings gateway timeout response has a 2xx status code
func (o *PutWebchatSettingsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webchat settings gateway timeout response has a 3xx status code
func (o *PutWebchatSettingsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webchat settings gateway timeout response has a 4xx status code
func (o *PutWebchatSettingsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put webchat settings gateway timeout response has a 5xx status code
func (o *PutWebchatSettingsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put webchat settings gateway timeout response a status code equal to that given
func (o *PutWebchatSettingsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutWebchatSettingsGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutWebchatSettingsGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/webchat/settings][%d] putWebchatSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutWebchatSettingsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebchatSettingsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

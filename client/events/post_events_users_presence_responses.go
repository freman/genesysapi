// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostEventsUsersPresenceReader is a Reader for the PostEventsUsersPresence structure.
type PostEventsUsersPresenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostEventsUsersPresenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostEventsUsersPresenceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostEventsUsersPresenceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostEventsUsersPresenceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostEventsUsersPresenceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostEventsUsersPresenceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostEventsUsersPresenceRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostEventsUsersPresenceRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostEventsUsersPresenceUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostEventsUsersPresenceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostEventsUsersPresenceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostEventsUsersPresenceServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostEventsUsersPresenceGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostEventsUsersPresenceOK creates a PostEventsUsersPresenceOK with default headers values
func NewPostEventsUsersPresenceOK() *PostEventsUsersPresenceOK {
	return &PostEventsUsersPresenceOK{}
}

/*PostEventsUsersPresenceOK handles this case with default header values.

successful operation
*/
type PostEventsUsersPresenceOK struct {
	Payload *models.BatchEventResponse
}

func (o *PostEventsUsersPresenceOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/presence][%d] postEventsUsersPresenceOK  %+v", 200, o.Payload)
}

func (o *PostEventsUsersPresenceOK) GetPayload() *models.BatchEventResponse {
	return o.Payload
}

func (o *PostEventsUsersPresenceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BatchEventResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersPresenceBadRequest creates a PostEventsUsersPresenceBadRequest with default headers values
func NewPostEventsUsersPresenceBadRequest() *PostEventsUsersPresenceBadRequest {
	return &PostEventsUsersPresenceBadRequest{}
}

/*PostEventsUsersPresenceBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostEventsUsersPresenceBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostEventsUsersPresenceBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/presence][%d] postEventsUsersPresenceBadRequest  %+v", 400, o.Payload)
}

func (o *PostEventsUsersPresenceBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersPresenceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersPresenceUnauthorized creates a PostEventsUsersPresenceUnauthorized with default headers values
func NewPostEventsUsersPresenceUnauthorized() *PostEventsUsersPresenceUnauthorized {
	return &PostEventsUsersPresenceUnauthorized{}
}

/*PostEventsUsersPresenceUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostEventsUsersPresenceUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostEventsUsersPresenceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/presence][%d] postEventsUsersPresenceUnauthorized  %+v", 401, o.Payload)
}

func (o *PostEventsUsersPresenceUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersPresenceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersPresenceForbidden creates a PostEventsUsersPresenceForbidden with default headers values
func NewPostEventsUsersPresenceForbidden() *PostEventsUsersPresenceForbidden {
	return &PostEventsUsersPresenceForbidden{}
}

/*PostEventsUsersPresenceForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostEventsUsersPresenceForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostEventsUsersPresenceForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/presence][%d] postEventsUsersPresenceForbidden  %+v", 403, o.Payload)
}

func (o *PostEventsUsersPresenceForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersPresenceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersPresenceNotFound creates a PostEventsUsersPresenceNotFound with default headers values
func NewPostEventsUsersPresenceNotFound() *PostEventsUsersPresenceNotFound {
	return &PostEventsUsersPresenceNotFound{}
}

/*PostEventsUsersPresenceNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostEventsUsersPresenceNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostEventsUsersPresenceNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/presence][%d] postEventsUsersPresenceNotFound  %+v", 404, o.Payload)
}

func (o *PostEventsUsersPresenceNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersPresenceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersPresenceRequestTimeout creates a PostEventsUsersPresenceRequestTimeout with default headers values
func NewPostEventsUsersPresenceRequestTimeout() *PostEventsUsersPresenceRequestTimeout {
	return &PostEventsUsersPresenceRequestTimeout{}
}

/*PostEventsUsersPresenceRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostEventsUsersPresenceRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostEventsUsersPresenceRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/presence][%d] postEventsUsersPresenceRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostEventsUsersPresenceRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersPresenceRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersPresenceRequestEntityTooLarge creates a PostEventsUsersPresenceRequestEntityTooLarge with default headers values
func NewPostEventsUsersPresenceRequestEntityTooLarge() *PostEventsUsersPresenceRequestEntityTooLarge {
	return &PostEventsUsersPresenceRequestEntityTooLarge{}
}

/*PostEventsUsersPresenceRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostEventsUsersPresenceRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostEventsUsersPresenceRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/presence][%d] postEventsUsersPresenceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostEventsUsersPresenceRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersPresenceRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersPresenceUnsupportedMediaType creates a PostEventsUsersPresenceUnsupportedMediaType with default headers values
func NewPostEventsUsersPresenceUnsupportedMediaType() *PostEventsUsersPresenceUnsupportedMediaType {
	return &PostEventsUsersPresenceUnsupportedMediaType{}
}

/*PostEventsUsersPresenceUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostEventsUsersPresenceUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostEventsUsersPresenceUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/presence][%d] postEventsUsersPresenceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostEventsUsersPresenceUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersPresenceUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersPresenceTooManyRequests creates a PostEventsUsersPresenceTooManyRequests with default headers values
func NewPostEventsUsersPresenceTooManyRequests() *PostEventsUsersPresenceTooManyRequests {
	return &PostEventsUsersPresenceTooManyRequests{}
}

/*PostEventsUsersPresenceTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostEventsUsersPresenceTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostEventsUsersPresenceTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/presence][%d] postEventsUsersPresenceTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostEventsUsersPresenceTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersPresenceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersPresenceInternalServerError creates a PostEventsUsersPresenceInternalServerError with default headers values
func NewPostEventsUsersPresenceInternalServerError() *PostEventsUsersPresenceInternalServerError {
	return &PostEventsUsersPresenceInternalServerError{}
}

/*PostEventsUsersPresenceInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostEventsUsersPresenceInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostEventsUsersPresenceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/presence][%d] postEventsUsersPresenceInternalServerError  %+v", 500, o.Payload)
}

func (o *PostEventsUsersPresenceInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersPresenceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersPresenceServiceUnavailable creates a PostEventsUsersPresenceServiceUnavailable with default headers values
func NewPostEventsUsersPresenceServiceUnavailable() *PostEventsUsersPresenceServiceUnavailable {
	return &PostEventsUsersPresenceServiceUnavailable{}
}

/*PostEventsUsersPresenceServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostEventsUsersPresenceServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostEventsUsersPresenceServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/presence][%d] postEventsUsersPresenceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostEventsUsersPresenceServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersPresenceServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersPresenceGatewayTimeout creates a PostEventsUsersPresenceGatewayTimeout with default headers values
func NewPostEventsUsersPresenceGatewayTimeout() *PostEventsUsersPresenceGatewayTimeout {
	return &PostEventsUsersPresenceGatewayTimeout{}
}

/*PostEventsUsersPresenceGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostEventsUsersPresenceGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostEventsUsersPresenceGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/presence][%d] postEventsUsersPresenceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostEventsUsersPresenceGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersPresenceGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

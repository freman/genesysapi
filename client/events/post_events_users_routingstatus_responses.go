// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostEventsUsersRoutingstatusReader is a Reader for the PostEventsUsersRoutingstatus structure.
type PostEventsUsersRoutingstatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostEventsUsersRoutingstatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostEventsUsersRoutingstatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostEventsUsersRoutingstatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostEventsUsersRoutingstatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostEventsUsersRoutingstatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostEventsUsersRoutingstatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostEventsUsersRoutingstatusRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostEventsUsersRoutingstatusRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostEventsUsersRoutingstatusUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostEventsUsersRoutingstatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostEventsUsersRoutingstatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostEventsUsersRoutingstatusServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostEventsUsersRoutingstatusGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostEventsUsersRoutingstatusOK creates a PostEventsUsersRoutingstatusOK with default headers values
func NewPostEventsUsersRoutingstatusOK() *PostEventsUsersRoutingstatusOK {
	return &PostEventsUsersRoutingstatusOK{}
}

/*
PostEventsUsersRoutingstatusOK describes a response with status code 200, with default header values.

successful operation
*/
type PostEventsUsersRoutingstatusOK struct {
	Payload *models.BatchEventResponse
}

// IsSuccess returns true when this post events users routingstatus o k response has a 2xx status code
func (o *PostEventsUsersRoutingstatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post events users routingstatus o k response has a 3xx status code
func (o *PostEventsUsersRoutingstatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post events users routingstatus o k response has a 4xx status code
func (o *PostEventsUsersRoutingstatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post events users routingstatus o k response has a 5xx status code
func (o *PostEventsUsersRoutingstatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post events users routingstatus o k response a status code equal to that given
func (o *PostEventsUsersRoutingstatusOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostEventsUsersRoutingstatusOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusOK  %+v", 200, o.Payload)
}

func (o *PostEventsUsersRoutingstatusOK) String() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusOK  %+v", 200, o.Payload)
}

func (o *PostEventsUsersRoutingstatusOK) GetPayload() *models.BatchEventResponse {
	return o.Payload
}

func (o *PostEventsUsersRoutingstatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BatchEventResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersRoutingstatusBadRequest creates a PostEventsUsersRoutingstatusBadRequest with default headers values
func NewPostEventsUsersRoutingstatusBadRequest() *PostEventsUsersRoutingstatusBadRequest {
	return &PostEventsUsersRoutingstatusBadRequest{}
}

/*
PostEventsUsersRoutingstatusBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostEventsUsersRoutingstatusBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post events users routingstatus bad request response has a 2xx status code
func (o *PostEventsUsersRoutingstatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post events users routingstatus bad request response has a 3xx status code
func (o *PostEventsUsersRoutingstatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post events users routingstatus bad request response has a 4xx status code
func (o *PostEventsUsersRoutingstatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post events users routingstatus bad request response has a 5xx status code
func (o *PostEventsUsersRoutingstatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post events users routingstatus bad request response a status code equal to that given
func (o *PostEventsUsersRoutingstatusBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostEventsUsersRoutingstatusBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusBadRequest  %+v", 400, o.Payload)
}

func (o *PostEventsUsersRoutingstatusBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusBadRequest  %+v", 400, o.Payload)
}

func (o *PostEventsUsersRoutingstatusBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersRoutingstatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersRoutingstatusUnauthorized creates a PostEventsUsersRoutingstatusUnauthorized with default headers values
func NewPostEventsUsersRoutingstatusUnauthorized() *PostEventsUsersRoutingstatusUnauthorized {
	return &PostEventsUsersRoutingstatusUnauthorized{}
}

/*
PostEventsUsersRoutingstatusUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostEventsUsersRoutingstatusUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post events users routingstatus unauthorized response has a 2xx status code
func (o *PostEventsUsersRoutingstatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post events users routingstatus unauthorized response has a 3xx status code
func (o *PostEventsUsersRoutingstatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post events users routingstatus unauthorized response has a 4xx status code
func (o *PostEventsUsersRoutingstatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post events users routingstatus unauthorized response has a 5xx status code
func (o *PostEventsUsersRoutingstatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post events users routingstatus unauthorized response a status code equal to that given
func (o *PostEventsUsersRoutingstatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostEventsUsersRoutingstatusUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusUnauthorized  %+v", 401, o.Payload)
}

func (o *PostEventsUsersRoutingstatusUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusUnauthorized  %+v", 401, o.Payload)
}

func (o *PostEventsUsersRoutingstatusUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersRoutingstatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersRoutingstatusForbidden creates a PostEventsUsersRoutingstatusForbidden with default headers values
func NewPostEventsUsersRoutingstatusForbidden() *PostEventsUsersRoutingstatusForbidden {
	return &PostEventsUsersRoutingstatusForbidden{}
}

/*
PostEventsUsersRoutingstatusForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostEventsUsersRoutingstatusForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post events users routingstatus forbidden response has a 2xx status code
func (o *PostEventsUsersRoutingstatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post events users routingstatus forbidden response has a 3xx status code
func (o *PostEventsUsersRoutingstatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post events users routingstatus forbidden response has a 4xx status code
func (o *PostEventsUsersRoutingstatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post events users routingstatus forbidden response has a 5xx status code
func (o *PostEventsUsersRoutingstatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post events users routingstatus forbidden response a status code equal to that given
func (o *PostEventsUsersRoutingstatusForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostEventsUsersRoutingstatusForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusForbidden  %+v", 403, o.Payload)
}

func (o *PostEventsUsersRoutingstatusForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusForbidden  %+v", 403, o.Payload)
}

func (o *PostEventsUsersRoutingstatusForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersRoutingstatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersRoutingstatusNotFound creates a PostEventsUsersRoutingstatusNotFound with default headers values
func NewPostEventsUsersRoutingstatusNotFound() *PostEventsUsersRoutingstatusNotFound {
	return &PostEventsUsersRoutingstatusNotFound{}
}

/*
PostEventsUsersRoutingstatusNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostEventsUsersRoutingstatusNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post events users routingstatus not found response has a 2xx status code
func (o *PostEventsUsersRoutingstatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post events users routingstatus not found response has a 3xx status code
func (o *PostEventsUsersRoutingstatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post events users routingstatus not found response has a 4xx status code
func (o *PostEventsUsersRoutingstatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post events users routingstatus not found response has a 5xx status code
func (o *PostEventsUsersRoutingstatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post events users routingstatus not found response a status code equal to that given
func (o *PostEventsUsersRoutingstatusNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostEventsUsersRoutingstatusNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusNotFound  %+v", 404, o.Payload)
}

func (o *PostEventsUsersRoutingstatusNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusNotFound  %+v", 404, o.Payload)
}

func (o *PostEventsUsersRoutingstatusNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersRoutingstatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersRoutingstatusRequestTimeout creates a PostEventsUsersRoutingstatusRequestTimeout with default headers values
func NewPostEventsUsersRoutingstatusRequestTimeout() *PostEventsUsersRoutingstatusRequestTimeout {
	return &PostEventsUsersRoutingstatusRequestTimeout{}
}

/*
PostEventsUsersRoutingstatusRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostEventsUsersRoutingstatusRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post events users routingstatus request timeout response has a 2xx status code
func (o *PostEventsUsersRoutingstatusRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post events users routingstatus request timeout response has a 3xx status code
func (o *PostEventsUsersRoutingstatusRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post events users routingstatus request timeout response has a 4xx status code
func (o *PostEventsUsersRoutingstatusRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post events users routingstatus request timeout response has a 5xx status code
func (o *PostEventsUsersRoutingstatusRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post events users routingstatus request timeout response a status code equal to that given
func (o *PostEventsUsersRoutingstatusRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostEventsUsersRoutingstatusRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostEventsUsersRoutingstatusRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostEventsUsersRoutingstatusRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersRoutingstatusRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersRoutingstatusRequestEntityTooLarge creates a PostEventsUsersRoutingstatusRequestEntityTooLarge with default headers values
func NewPostEventsUsersRoutingstatusRequestEntityTooLarge() *PostEventsUsersRoutingstatusRequestEntityTooLarge {
	return &PostEventsUsersRoutingstatusRequestEntityTooLarge{}
}

/*
PostEventsUsersRoutingstatusRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostEventsUsersRoutingstatusRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post events users routingstatus request entity too large response has a 2xx status code
func (o *PostEventsUsersRoutingstatusRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post events users routingstatus request entity too large response has a 3xx status code
func (o *PostEventsUsersRoutingstatusRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post events users routingstatus request entity too large response has a 4xx status code
func (o *PostEventsUsersRoutingstatusRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post events users routingstatus request entity too large response has a 5xx status code
func (o *PostEventsUsersRoutingstatusRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post events users routingstatus request entity too large response a status code equal to that given
func (o *PostEventsUsersRoutingstatusRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostEventsUsersRoutingstatusRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostEventsUsersRoutingstatusRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostEventsUsersRoutingstatusRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersRoutingstatusRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersRoutingstatusUnsupportedMediaType creates a PostEventsUsersRoutingstatusUnsupportedMediaType with default headers values
func NewPostEventsUsersRoutingstatusUnsupportedMediaType() *PostEventsUsersRoutingstatusUnsupportedMediaType {
	return &PostEventsUsersRoutingstatusUnsupportedMediaType{}
}

/*
PostEventsUsersRoutingstatusUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostEventsUsersRoutingstatusUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post events users routingstatus unsupported media type response has a 2xx status code
func (o *PostEventsUsersRoutingstatusUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post events users routingstatus unsupported media type response has a 3xx status code
func (o *PostEventsUsersRoutingstatusUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post events users routingstatus unsupported media type response has a 4xx status code
func (o *PostEventsUsersRoutingstatusUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post events users routingstatus unsupported media type response has a 5xx status code
func (o *PostEventsUsersRoutingstatusUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post events users routingstatus unsupported media type response a status code equal to that given
func (o *PostEventsUsersRoutingstatusUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostEventsUsersRoutingstatusUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostEventsUsersRoutingstatusUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostEventsUsersRoutingstatusUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersRoutingstatusUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersRoutingstatusTooManyRequests creates a PostEventsUsersRoutingstatusTooManyRequests with default headers values
func NewPostEventsUsersRoutingstatusTooManyRequests() *PostEventsUsersRoutingstatusTooManyRequests {
	return &PostEventsUsersRoutingstatusTooManyRequests{}
}

/*
PostEventsUsersRoutingstatusTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostEventsUsersRoutingstatusTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post events users routingstatus too many requests response has a 2xx status code
func (o *PostEventsUsersRoutingstatusTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post events users routingstatus too many requests response has a 3xx status code
func (o *PostEventsUsersRoutingstatusTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post events users routingstatus too many requests response has a 4xx status code
func (o *PostEventsUsersRoutingstatusTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post events users routingstatus too many requests response has a 5xx status code
func (o *PostEventsUsersRoutingstatusTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post events users routingstatus too many requests response a status code equal to that given
func (o *PostEventsUsersRoutingstatusTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostEventsUsersRoutingstatusTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostEventsUsersRoutingstatusTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostEventsUsersRoutingstatusTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersRoutingstatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersRoutingstatusInternalServerError creates a PostEventsUsersRoutingstatusInternalServerError with default headers values
func NewPostEventsUsersRoutingstatusInternalServerError() *PostEventsUsersRoutingstatusInternalServerError {
	return &PostEventsUsersRoutingstatusInternalServerError{}
}

/*
PostEventsUsersRoutingstatusInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostEventsUsersRoutingstatusInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post events users routingstatus internal server error response has a 2xx status code
func (o *PostEventsUsersRoutingstatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post events users routingstatus internal server error response has a 3xx status code
func (o *PostEventsUsersRoutingstatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post events users routingstatus internal server error response has a 4xx status code
func (o *PostEventsUsersRoutingstatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post events users routingstatus internal server error response has a 5xx status code
func (o *PostEventsUsersRoutingstatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post events users routingstatus internal server error response a status code equal to that given
func (o *PostEventsUsersRoutingstatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostEventsUsersRoutingstatusInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusInternalServerError  %+v", 500, o.Payload)
}

func (o *PostEventsUsersRoutingstatusInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusInternalServerError  %+v", 500, o.Payload)
}

func (o *PostEventsUsersRoutingstatusInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersRoutingstatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersRoutingstatusServiceUnavailable creates a PostEventsUsersRoutingstatusServiceUnavailable with default headers values
func NewPostEventsUsersRoutingstatusServiceUnavailable() *PostEventsUsersRoutingstatusServiceUnavailable {
	return &PostEventsUsersRoutingstatusServiceUnavailable{}
}

/*
PostEventsUsersRoutingstatusServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostEventsUsersRoutingstatusServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post events users routingstatus service unavailable response has a 2xx status code
func (o *PostEventsUsersRoutingstatusServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post events users routingstatus service unavailable response has a 3xx status code
func (o *PostEventsUsersRoutingstatusServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post events users routingstatus service unavailable response has a 4xx status code
func (o *PostEventsUsersRoutingstatusServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post events users routingstatus service unavailable response has a 5xx status code
func (o *PostEventsUsersRoutingstatusServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post events users routingstatus service unavailable response a status code equal to that given
func (o *PostEventsUsersRoutingstatusServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostEventsUsersRoutingstatusServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostEventsUsersRoutingstatusServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostEventsUsersRoutingstatusServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersRoutingstatusServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEventsUsersRoutingstatusGatewayTimeout creates a PostEventsUsersRoutingstatusGatewayTimeout with default headers values
func NewPostEventsUsersRoutingstatusGatewayTimeout() *PostEventsUsersRoutingstatusGatewayTimeout {
	return &PostEventsUsersRoutingstatusGatewayTimeout{}
}

/*
PostEventsUsersRoutingstatusGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostEventsUsersRoutingstatusGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post events users routingstatus gateway timeout response has a 2xx status code
func (o *PostEventsUsersRoutingstatusGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post events users routingstatus gateway timeout response has a 3xx status code
func (o *PostEventsUsersRoutingstatusGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post events users routingstatus gateway timeout response has a 4xx status code
func (o *PostEventsUsersRoutingstatusGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post events users routingstatus gateway timeout response has a 5xx status code
func (o *PostEventsUsersRoutingstatusGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post events users routingstatus gateway timeout response a status code equal to that given
func (o *PostEventsUsersRoutingstatusGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostEventsUsersRoutingstatusGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostEventsUsersRoutingstatusGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/events/users/routingstatus][%d] postEventsUsersRoutingstatusGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostEventsUsersRoutingstatusGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostEventsUsersRoutingstatusGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

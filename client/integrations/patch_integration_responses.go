// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchIntegrationReader is a Reader for the PatchIntegration structure.
type PatchIntegrationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchIntegrationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchIntegrationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchIntegrationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchIntegrationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchIntegrationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchIntegrationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchIntegrationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchIntegrationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchIntegrationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchIntegrationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchIntegrationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchIntegrationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchIntegrationOK creates a PatchIntegrationOK with default headers values
func NewPatchIntegrationOK() *PatchIntegrationOK {
	return &PatchIntegrationOK{}
}

/*PatchIntegrationOK handles this case with default header values.

successful operation
*/
type PatchIntegrationOK struct {
	Payload *models.Integration
}

func (o *PatchIntegrationOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/integrations/{integrationId}][%d] patchIntegrationOK  %+v", 200, o.Payload)
}

func (o *PatchIntegrationOK) GetPayload() *models.Integration {
	return o.Payload
}

func (o *PatchIntegrationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Integration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchIntegrationBadRequest creates a PatchIntegrationBadRequest with default headers values
func NewPatchIntegrationBadRequest() *PatchIntegrationBadRequest {
	return &PatchIntegrationBadRequest{}
}

/*PatchIntegrationBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchIntegrationBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchIntegrationBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/integrations/{integrationId}][%d] patchIntegrationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchIntegrationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchIntegrationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchIntegrationUnauthorized creates a PatchIntegrationUnauthorized with default headers values
func NewPatchIntegrationUnauthorized() *PatchIntegrationUnauthorized {
	return &PatchIntegrationUnauthorized{}
}

/*PatchIntegrationUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchIntegrationUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchIntegrationUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/integrations/{integrationId}][%d] patchIntegrationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchIntegrationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchIntegrationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchIntegrationForbidden creates a PatchIntegrationForbidden with default headers values
func NewPatchIntegrationForbidden() *PatchIntegrationForbidden {
	return &PatchIntegrationForbidden{}
}

/*PatchIntegrationForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchIntegrationForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchIntegrationForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/integrations/{integrationId}][%d] patchIntegrationForbidden  %+v", 403, o.Payload)
}

func (o *PatchIntegrationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchIntegrationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchIntegrationNotFound creates a PatchIntegrationNotFound with default headers values
func NewPatchIntegrationNotFound() *PatchIntegrationNotFound {
	return &PatchIntegrationNotFound{}
}

/*PatchIntegrationNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchIntegrationNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchIntegrationNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/integrations/{integrationId}][%d] patchIntegrationNotFound  %+v", 404, o.Payload)
}

func (o *PatchIntegrationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchIntegrationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchIntegrationRequestEntityTooLarge creates a PatchIntegrationRequestEntityTooLarge with default headers values
func NewPatchIntegrationRequestEntityTooLarge() *PatchIntegrationRequestEntityTooLarge {
	return &PatchIntegrationRequestEntityTooLarge{}
}

/*PatchIntegrationRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PatchIntegrationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchIntegrationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/integrations/{integrationId}][%d] patchIntegrationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchIntegrationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchIntegrationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchIntegrationUnsupportedMediaType creates a PatchIntegrationUnsupportedMediaType with default headers values
func NewPatchIntegrationUnsupportedMediaType() *PatchIntegrationUnsupportedMediaType {
	return &PatchIntegrationUnsupportedMediaType{}
}

/*PatchIntegrationUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchIntegrationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchIntegrationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/integrations/{integrationId}][%d] patchIntegrationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchIntegrationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchIntegrationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchIntegrationTooManyRequests creates a PatchIntegrationTooManyRequests with default headers values
func NewPatchIntegrationTooManyRequests() *PatchIntegrationTooManyRequests {
	return &PatchIntegrationTooManyRequests{}
}

/*PatchIntegrationTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PatchIntegrationTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchIntegrationTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/integrations/{integrationId}][%d] patchIntegrationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchIntegrationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchIntegrationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchIntegrationInternalServerError creates a PatchIntegrationInternalServerError with default headers values
func NewPatchIntegrationInternalServerError() *PatchIntegrationInternalServerError {
	return &PatchIntegrationInternalServerError{}
}

/*PatchIntegrationInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchIntegrationInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchIntegrationInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/integrations/{integrationId}][%d] patchIntegrationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchIntegrationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchIntegrationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchIntegrationServiceUnavailable creates a PatchIntegrationServiceUnavailable with default headers values
func NewPatchIntegrationServiceUnavailable() *PatchIntegrationServiceUnavailable {
	return &PatchIntegrationServiceUnavailable{}
}

/*PatchIntegrationServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchIntegrationServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchIntegrationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/integrations/{integrationId}][%d] patchIntegrationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchIntegrationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchIntegrationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchIntegrationGatewayTimeout creates a PatchIntegrationGatewayTimeout with default headers values
func NewPatchIntegrationGatewayTimeout() *PatchIntegrationGatewayTimeout {
	return &PatchIntegrationGatewayTimeout{}
}

/*PatchIntegrationGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchIntegrationGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchIntegrationGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/integrations/{integrationId}][%d] patchIntegrationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchIntegrationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchIntegrationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetIntegrationsSpeechTtsEnginesParams creates a new GetIntegrationsSpeechTtsEnginesParams object
// with the default values initialized.
func NewGetIntegrationsSpeechTtsEnginesParams() *GetIntegrationsSpeechTtsEnginesParams {
	var (
		includeVoicesDefault = bool(false)
		pageNumberDefault    = int32(1)
		pageSizeDefault      = int32(25)
	)
	return &GetIntegrationsSpeechTtsEnginesParams{
		IncludeVoices: &includeVoicesDefault,
		PageNumber:    &pageNumberDefault,
		PageSize:      &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIntegrationsSpeechTtsEnginesParamsWithTimeout creates a new GetIntegrationsSpeechTtsEnginesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIntegrationsSpeechTtsEnginesParamsWithTimeout(timeout time.Duration) *GetIntegrationsSpeechTtsEnginesParams {
	var (
		includeVoicesDefault = bool(false)
		pageNumberDefault    = int32(1)
		pageSizeDefault      = int32(25)
	)
	return &GetIntegrationsSpeechTtsEnginesParams{
		IncludeVoices: &includeVoicesDefault,
		PageNumber:    &pageNumberDefault,
		PageSize:      &pageSizeDefault,

		timeout: timeout,
	}
}

// NewGetIntegrationsSpeechTtsEnginesParamsWithContext creates a new GetIntegrationsSpeechTtsEnginesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIntegrationsSpeechTtsEnginesParamsWithContext(ctx context.Context) *GetIntegrationsSpeechTtsEnginesParams {
	var (
		includeVoicesDefault = bool(false)
		pageNumberDefault    = int32(1)
		pageSizeDefault      = int32(25)
	)
	return &GetIntegrationsSpeechTtsEnginesParams{
		IncludeVoices: &includeVoicesDefault,
		PageNumber:    &pageNumberDefault,
		PageSize:      &pageSizeDefault,

		Context: ctx,
	}
}

// NewGetIntegrationsSpeechTtsEnginesParamsWithHTTPClient creates a new GetIntegrationsSpeechTtsEnginesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIntegrationsSpeechTtsEnginesParamsWithHTTPClient(client *http.Client) *GetIntegrationsSpeechTtsEnginesParams {
	var (
		includeVoicesDefault = bool(false)
		pageNumberDefault    = int32(1)
		pageSizeDefault      = int32(25)
	)
	return &GetIntegrationsSpeechTtsEnginesParams{
		IncludeVoices: &includeVoicesDefault,
		PageNumber:    &pageNumberDefault,
		PageSize:      &pageSizeDefault,
		HTTPClient:    client,
	}
}

/*GetIntegrationsSpeechTtsEnginesParams contains all the parameters to send to the API endpoint
for the get integrations speech tts engines operation typically these are written to a http.Request
*/
type GetIntegrationsSpeechTtsEnginesParams struct {

	/*IncludeVoices
	  Include voices for the engine

	*/
	IncludeVoices *bool
	/*Language
	  Filter on supported language. If includeVoices=true then the voices are also filtered.

	*/
	Language *string
	/*Name
	  Filter on engine name

	*/
	Name *string
	/*PageNumber
	  Page number

	*/
	PageNumber *int32
	/*PageSize
	  Page size

	*/
	PageSize *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) WithTimeout(timeout time.Duration) *GetIntegrationsSpeechTtsEnginesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) WithContext(ctx context.Context) *GetIntegrationsSpeechTtsEnginesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) WithHTTPClient(client *http.Client) *GetIntegrationsSpeechTtsEnginesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeVoices adds the includeVoices to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) WithIncludeVoices(includeVoices *bool) *GetIntegrationsSpeechTtsEnginesParams {
	o.SetIncludeVoices(includeVoices)
	return o
}

// SetIncludeVoices adds the includeVoices to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) SetIncludeVoices(includeVoices *bool) {
	o.IncludeVoices = includeVoices
}

// WithLanguage adds the language to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) WithLanguage(language *string) *GetIntegrationsSpeechTtsEnginesParams {
	o.SetLanguage(language)
	return o
}

// SetLanguage adds the language to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) SetLanguage(language *string) {
	o.Language = language
}

// WithName adds the name to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) WithName(name *string) *GetIntegrationsSpeechTtsEnginesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) SetName(name *string) {
	o.Name = name
}

// WithPageNumber adds the pageNumber to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) WithPageNumber(pageNumber *int32) *GetIntegrationsSpeechTtsEnginesParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) WithPageSize(pageSize *int32) *GetIntegrationsSpeechTtsEnginesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get integrations speech tts engines params
func (o *GetIntegrationsSpeechTtsEnginesParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *GetIntegrationsSpeechTtsEnginesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeVoices != nil {

		// query param includeVoices
		var qrIncludeVoices bool
		if o.IncludeVoices != nil {
			qrIncludeVoices = *o.IncludeVoices
		}
		qIncludeVoices := swag.FormatBool(qrIncludeVoices)
		if qIncludeVoices != "" {
			if err := r.SetQueryParam("includeVoices", qIncludeVoices); err != nil {
				return err
			}
		}

	}

	if o.Language != nil {

		// query param language
		var qrLanguage string
		if o.Language != nil {
			qrLanguage = *o.Language
		}
		qLanguage := qrLanguage
		if qLanguage != "" {
			if err := r.SetQueryParam("language", qLanguage); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

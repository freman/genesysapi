// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the integrations client
type API interface {
	/*
	   DeleteIntegration deletes integration
	*/
	DeleteIntegration(ctx context.Context, params *DeleteIntegrationParams) (*DeleteIntegrationOK, error)
	/*
	   DeleteIntegrationsAction deletes an action
	*/
	DeleteIntegrationsAction(ctx context.Context, params *DeleteIntegrationsActionParams) (*DeleteIntegrationsActionNoContent, error)
	/*
	   DeleteIntegrationsActionDraft deletes a draft
	*/
	DeleteIntegrationsActionDraft(ctx context.Context, params *DeleteIntegrationsActionDraftParams) (*DeleteIntegrationsActionDraftNoContent, error)
	/*
	   DeleteIntegrationsCredential deletes a set of credentials
	*/
	DeleteIntegrationsCredential(ctx context.Context, params *DeleteIntegrationsCredentialParams) (*DeleteIntegrationsCredentialNoContent, error)
	/*
	   GetIntegration gets integration
	*/
	GetIntegration(ctx context.Context, params *GetIntegrationParams) (*GetIntegrationOK, error)
	/*
	   GetIntegrationConfigCurrent gets integration configuration
	*/
	GetIntegrationConfigCurrent(ctx context.Context, params *GetIntegrationConfigCurrentParams) (*GetIntegrationConfigCurrentOK, error)
	/*
	   GetIntegrations lists integrations
	*/
	GetIntegrations(ctx context.Context, params *GetIntegrationsParams) (*GetIntegrationsOK, error)
	/*
	   GetIntegrationsAction retrieves a single action matching id
	*/
	GetIntegrationsAction(ctx context.Context, params *GetIntegrationsActionParams) (*GetIntegrationsActionOK, error)
	/*
	   GetIntegrationsActionDraft retrieves a draft
	*/
	GetIntegrationsActionDraft(ctx context.Context, params *GetIntegrationsActionDraftParams) (*GetIntegrationsActionDraftOK, error)
	/*
	   GetIntegrationsActionDraftSchema retrieves schema for a draft based on filename
	*/
	GetIntegrationsActionDraftSchema(ctx context.Context, params *GetIntegrationsActionDraftSchemaParams) (*GetIntegrationsActionDraftSchemaOK, error)
	/*
	   GetIntegrationsActionDraftTemplate retrieves templates for a draft based on filename
	*/
	GetIntegrationsActionDraftTemplate(ctx context.Context, params *GetIntegrationsActionDraftTemplateParams) (*GetIntegrationsActionDraftTemplateOK, error)
	/*
	   GetIntegrationsActionDraftValidation validates current draft configuration
	*/
	GetIntegrationsActionDraftValidation(ctx context.Context, params *GetIntegrationsActionDraftValidationParams) (*GetIntegrationsActionDraftValidationOK, error)
	/*
	   GetIntegrationsActionSchema retrieves schema for an action based on filename
	*/
	GetIntegrationsActionSchema(ctx context.Context, params *GetIntegrationsActionSchemaParams) (*GetIntegrationsActionSchemaOK, error)
	/*
	   GetIntegrationsActionTemplate retrieves text of templates for an action based on filename
	*/
	GetIntegrationsActionTemplate(ctx context.Context, params *GetIntegrationsActionTemplateParams) (*GetIntegrationsActionTemplateOK, error)
	/*
	   GetIntegrationsActions retrieves all actions associated with filters passed in via query param
	*/
	GetIntegrationsActions(ctx context.Context, params *GetIntegrationsActionsParams) (*GetIntegrationsActionsOK, error)
	/*
	   GetIntegrationsActionsCategories retrieves all categories of available actions
	*/
	GetIntegrationsActionsCategories(ctx context.Context, params *GetIntegrationsActionsCategoriesParams) (*GetIntegrationsActionsCategoriesOK, error)
	/*
	   GetIntegrationsActionsDrafts retrieves all action drafts associated with the filters passed in via query param
	*/
	GetIntegrationsActionsDrafts(ctx context.Context, params *GetIntegrationsActionsDraftsParams) (*GetIntegrationsActionsDraftsOK, error)
	/*
	   GetIntegrationsBotconnectorIntegrationIDBot gets a specific bot connector bot plus versions for this integration
	*/
	GetIntegrationsBotconnectorIntegrationIDBot(ctx context.Context, params *GetIntegrationsBotconnectorIntegrationIDBotParams) (*GetIntegrationsBotconnectorIntegrationIDBotOK, error)
	/*
	   GetIntegrationsBotconnectorIntegrationIDBotVersions gets a list of bot versions for a bot
	*/
	GetIntegrationsBotconnectorIntegrationIDBotVersions(ctx context.Context, params *GetIntegrationsBotconnectorIntegrationIDBotVersionsParams) (*GetIntegrationsBotconnectorIntegrationIDBotVersionsOK, error)
	/*
	   GetIntegrationsBotconnectorIntegrationIDBots gets a list of bot connector bots for this integration
	*/
	GetIntegrationsBotconnectorIntegrationIDBots(ctx context.Context, params *GetIntegrationsBotconnectorIntegrationIDBotsParams) (*GetIntegrationsBotconnectorIntegrationIDBotsOK, error)
	/*
	   GetIntegrationsBotconnectorIntegrationIDBotsSummaries gets a summary list of bot connector bots for this integration
	*/
	GetIntegrationsBotconnectorIntegrationIDBotsSummaries(ctx context.Context, params *GetIntegrationsBotconnectorIntegrationIDBotsSummariesParams) (*GetIntegrationsBotconnectorIntegrationIDBotsSummariesOK, error)
	/*
	   GetIntegrationsClientapps lists permitted client app integrations for the logged in user
	*/
	GetIntegrationsClientapps(ctx context.Context, params *GetIntegrationsClientappsParams) (*GetIntegrationsClientappsOK, error)
	/*
	   GetIntegrationsClientappsUnifiedcommunications us c integration client application configuration
	   This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled for the current organization.
	*/
	GetIntegrationsClientappsUnifiedcommunications(ctx context.Context, params *GetIntegrationsClientappsUnifiedcommunicationsParams) (*GetIntegrationsClientappsUnifiedcommunicationsOK, error)
	/*
	   GetIntegrationsCredential gets a single credential with sensitive fields redacted
	*/
	GetIntegrationsCredential(ctx context.Context, params *GetIntegrationsCredentialParams) (*GetIntegrationsCredentialOK, error)
	/*
	   GetIntegrationsCredentials lists multiple sets of credentials
	*/
	GetIntegrationsCredentials(ctx context.Context, params *GetIntegrationsCredentialsParams) (*GetIntegrationsCredentialsOK, error)
	/*
	   GetIntegrationsCredentialsTypes lists all credential types
	*/
	GetIntegrationsCredentialsTypes(ctx context.Context, params *GetIntegrationsCredentialsTypesParams) (*GetIntegrationsCredentialsTypesOK, error)
	/*
	   GetIntegrationsEventlog lists all events
	*/
	GetIntegrationsEventlog(ctx context.Context, params *GetIntegrationsEventlogParams) (*GetIntegrationsEventlogOK, error)
	/*
	   GetIntegrationsEventlogEventID gets a single event
	*/
	GetIntegrationsEventlogEventID(ctx context.Context, params *GetIntegrationsEventlogEventIDParams) (*GetIntegrationsEventlogEventIDOK, error)
	/*
	   GetIntegrationsSpeechDialogflowAgent gets details about a dialogflow agent
	*/
	GetIntegrationsSpeechDialogflowAgent(ctx context.Context, params *GetIntegrationsSpeechDialogflowAgentParams) (*GetIntegrationsSpeechDialogflowAgentOK, error)
	/*
	   GetIntegrationsSpeechDialogflowAgents gets a list of dialogflow agents in the customers google accounts
	*/
	GetIntegrationsSpeechDialogflowAgents(ctx context.Context, params *GetIntegrationsSpeechDialogflowAgentsParams) (*GetIntegrationsSpeechDialogflowAgentsOK, error)
	/*
	   GetIntegrationsSpeechLexBotAlias gets details about a lex bot alias
	*/
	GetIntegrationsSpeechLexBotAlias(ctx context.Context, params *GetIntegrationsSpeechLexBotAliasParams) (*GetIntegrationsSpeechLexBotAliasOK, error)
	/*
	   GetIntegrationsSpeechLexBotBotIDAliases gets a list of aliases for a bot in the customer s a w s accounts
	*/
	GetIntegrationsSpeechLexBotBotIDAliases(ctx context.Context, params *GetIntegrationsSpeechLexBotBotIDAliasesParams) (*GetIntegrationsSpeechLexBotBotIDAliasesOK, error)
	/*
	   GetIntegrationsSpeechLexBots gets a list of lex bots in the customers a w s accounts
	*/
	GetIntegrationsSpeechLexBots(ctx context.Context, params *GetIntegrationsSpeechLexBotsParams) (*GetIntegrationsSpeechLexBotsOK, error)
	/*
	   GetIntegrationsSpeechTtsEngine gets details about a t t s engine
	*/
	GetIntegrationsSpeechTtsEngine(ctx context.Context, params *GetIntegrationsSpeechTtsEngineParams) (*GetIntegrationsSpeechTtsEngineOK, error)
	/*
	   GetIntegrationsSpeechTtsEngineVoice gets details about a specific voice for a t t s engine
	*/
	GetIntegrationsSpeechTtsEngineVoice(ctx context.Context, params *GetIntegrationsSpeechTtsEngineVoiceParams) (*GetIntegrationsSpeechTtsEngineVoiceOK, error)
	/*
	   GetIntegrationsSpeechTtsEngineVoices gets a list of voices for a t t s engine
	*/
	GetIntegrationsSpeechTtsEngineVoices(ctx context.Context, params *GetIntegrationsSpeechTtsEngineVoicesParams) (*GetIntegrationsSpeechTtsEngineVoicesOK, error)
	/*
	   GetIntegrationsSpeechTtsEngines gets a list of t t s engines enabled for org
	*/
	GetIntegrationsSpeechTtsEngines(ctx context.Context, params *GetIntegrationsSpeechTtsEnginesParams) (*GetIntegrationsSpeechTtsEnginesOK, error)
	/*
	   GetIntegrationsSpeechTtsSettings gets t t s settings for an org
	*/
	GetIntegrationsSpeechTtsSettings(ctx context.Context, params *GetIntegrationsSpeechTtsSettingsParams) (*GetIntegrationsSpeechTtsSettingsOK, error)
	/*
	   GetIntegrationsType gets integration type
	*/
	GetIntegrationsType(ctx context.Context, params *GetIntegrationsTypeParams) (*GetIntegrationsTypeOK, error)
	/*
	   GetIntegrationsTypeConfigschema gets properties config schema for an integration type
	*/
	GetIntegrationsTypeConfigschema(ctx context.Context, params *GetIntegrationsTypeConfigschemaParams) (*GetIntegrationsTypeConfigschemaOK, error)
	/*
	   GetIntegrationsTypes lists integration types
	*/
	GetIntegrationsTypes(ctx context.Context, params *GetIntegrationsTypesParams) (*GetIntegrationsTypesOK, error)
	/*
	   GetIntegrationsUserapps lists permitted user app integrations for the logged in user
	*/
	GetIntegrationsUserapps(ctx context.Context, params *GetIntegrationsUserappsParams) (*GetIntegrationsUserappsOK, error)
	/*
	   PatchIntegration updates an integration
	*/
	PatchIntegration(ctx context.Context, params *PatchIntegrationParams) (*PatchIntegrationOK, error)
	/*
	   PatchIntegrationsAction patches an action
	*/
	PatchIntegrationsAction(ctx context.Context, params *PatchIntegrationsActionParams) (*PatchIntegrationsActionOK, error)
	/*
	   PatchIntegrationsActionDraft updates an existing draft
	*/
	PatchIntegrationsActionDraft(ctx context.Context, params *PatchIntegrationsActionDraftParams) (*PatchIntegrationsActionDraftOK, error)
	/*
	   PostIntegrations creates an integration
	*/
	PostIntegrations(ctx context.Context, params *PostIntegrationsParams) (*PostIntegrationsOK, error)
	/*
	   PostIntegrationsActionDraft creates a new draft from existing action
	*/
	PostIntegrationsActionDraft(ctx context.Context, params *PostIntegrationsActionDraftParams) (*PostIntegrationsActionDraftOK, error)
	/*
	   PostIntegrationsActionDraftPublish publishes a draft and make it the active action configuration
	*/
	PostIntegrationsActionDraftPublish(ctx context.Context, params *PostIntegrationsActionDraftPublishParams) (*PostIntegrationsActionDraftPublishOK, error)
	/*
	   PostIntegrationsActionDraftTest tests the execution of a draft responses will show execution steps broken out with intermediate results to help in debugging
	*/
	PostIntegrationsActionDraftTest(ctx context.Context, params *PostIntegrationsActionDraftTestParams) (*PostIntegrationsActionDraftTestOK, error)
	/*
	   PostIntegrationsActionExecute executes action and return response from 3rd party responses will follow the schemas defined on the action for success and error
	*/
	PostIntegrationsActionExecute(ctx context.Context, params *PostIntegrationsActionExecuteParams) (*PostIntegrationsActionExecuteOK, error)
	/*
	   PostIntegrationsActionTest tests the execution of an action responses will show execution steps broken out with intermediate results to help in debugging
	*/
	PostIntegrationsActionTest(ctx context.Context, params *PostIntegrationsActionTestParams) (*PostIntegrationsActionTestOK, error)
	/*
	   PostIntegrationsActions creates a new action
	*/
	PostIntegrationsActions(ctx context.Context, params *PostIntegrationsActionsParams) (*PostIntegrationsActionsOK, error)
	/*
	   PostIntegrationsActionsDrafts creates a new draft
	*/
	PostIntegrationsActionsDrafts(ctx context.Context, params *PostIntegrationsActionsDraftsParams) (*PostIntegrationsActionsDraftsOK, error)
	/*
	   PostIntegrationsCredentials creates a set of credentials
	*/
	PostIntegrationsCredentials(ctx context.Context, params *PostIntegrationsCredentialsParams) (*PostIntegrationsCredentialsOK, error)
	/*
	   PostIntegrationsWorkforcemanagementVendorconnection adds a vendor connection
	*/
	PostIntegrationsWorkforcemanagementVendorconnection(ctx context.Context, params *PostIntegrationsWorkforcemanagementVendorconnectionParams) (*PostIntegrationsWorkforcemanagementVendorconnectionOK, error)
	/*
	   PutIntegrationConfigCurrent updates integration configuration
	*/
	PutIntegrationConfigCurrent(ctx context.Context, params *PutIntegrationConfigCurrentParams) (*PutIntegrationConfigCurrentOK, error)
	/*
	   PutIntegrationsBotconnectorIntegrationIDBots sets a list of bot connector bots plus versions for this integration
	*/
	PutIntegrationsBotconnectorIntegrationIDBots(ctx context.Context, params *PutIntegrationsBotconnectorIntegrationIDBotsParams) (*PutIntegrationsBotconnectorIntegrationIDBotsNoContent, error)
	/*
	   PutIntegrationsCredential updates a set of credentials
	*/
	PutIntegrationsCredential(ctx context.Context, params *PutIntegrationsCredentialParams) (*PutIntegrationsCredentialOK, error)
	/*
	   PutIntegrationsSpeechTtsSettings updates t t s settings for an org
	*/
	PutIntegrationsSpeechTtsSettings(ctx context.Context, params *PutIntegrationsSpeechTtsSettingsParams) (*PutIntegrationsSpeechTtsSettingsOK, error)
}

// New creates a new integrations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for integrations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteIntegration deletes integration
*/
func (a *Client) DeleteIntegration(ctx context.Context, params *DeleteIntegrationParams) (*DeleteIntegrationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIntegration",
		Method:             "DELETE",
		PathPattern:        "/api/v2/integrations/{integrationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIntegrationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIntegrationOK), nil

}

/*
DeleteIntegrationsAction deletes an action
*/
func (a *Client) DeleteIntegrationsAction(ctx context.Context, params *DeleteIntegrationsActionParams) (*DeleteIntegrationsActionNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIntegrationsAction",
		Method:             "DELETE",
		PathPattern:        "/api/v2/integrations/actions/{actionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIntegrationsActionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIntegrationsActionNoContent), nil

}

/*
DeleteIntegrationsActionDraft deletes a draft
*/
func (a *Client) DeleteIntegrationsActionDraft(ctx context.Context, params *DeleteIntegrationsActionDraftParams) (*DeleteIntegrationsActionDraftNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIntegrationsActionDraft",
		Method:             "DELETE",
		PathPattern:        "/api/v2/integrations/actions/{actionId}/draft",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIntegrationsActionDraftReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIntegrationsActionDraftNoContent), nil

}

/*
DeleteIntegrationsCredential deletes a set of credentials
*/
func (a *Client) DeleteIntegrationsCredential(ctx context.Context, params *DeleteIntegrationsCredentialParams) (*DeleteIntegrationsCredentialNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIntegrationsCredential",
		Method:             "DELETE",
		PathPattern:        "/api/v2/integrations/credentials/{credentialId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIntegrationsCredentialReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIntegrationsCredentialNoContent), nil

}

/*
GetIntegration gets integration
*/
func (a *Client) GetIntegration(ctx context.Context, params *GetIntegrationParams) (*GetIntegrationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegration",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/{integrationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationOK), nil

}

/*
GetIntegrationConfigCurrent gets integration configuration
*/
func (a *Client) GetIntegrationConfigCurrent(ctx context.Context, params *GetIntegrationConfigCurrentParams) (*GetIntegrationConfigCurrentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationConfigCurrent",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/{integrationId}/config/current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationConfigCurrentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationConfigCurrentOK), nil

}

/*
GetIntegrations lists integrations
*/
func (a *Client) GetIntegrations(ctx context.Context, params *GetIntegrationsParams) (*GetIntegrationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrations",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsOK), nil

}

/*
GetIntegrationsAction retrieves a single action matching id
*/
func (a *Client) GetIntegrationsAction(ctx context.Context, params *GetIntegrationsActionParams) (*GetIntegrationsActionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsAction",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/actions/{actionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsActionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsActionOK), nil

}

/*
GetIntegrationsActionDraft retrieves a draft
*/
func (a *Client) GetIntegrationsActionDraft(ctx context.Context, params *GetIntegrationsActionDraftParams) (*GetIntegrationsActionDraftOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsActionDraft",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/actions/{actionId}/draft",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsActionDraftReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsActionDraftOK), nil

}

/*
GetIntegrationsActionDraftSchema retrieves schema for a draft based on filename
*/
func (a *Client) GetIntegrationsActionDraftSchema(ctx context.Context, params *GetIntegrationsActionDraftSchemaParams) (*GetIntegrationsActionDraftSchemaOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsActionDraftSchema",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/actions/{actionId}/draft/schemas/{fileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsActionDraftSchemaReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsActionDraftSchemaOK), nil

}

/*
GetIntegrationsActionDraftTemplate retrieves templates for a draft based on filename
*/
func (a *Client) GetIntegrationsActionDraftTemplate(ctx context.Context, params *GetIntegrationsActionDraftTemplateParams) (*GetIntegrationsActionDraftTemplateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsActionDraftTemplate",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/actions/{actionId}/draft/templates/{fileName}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsActionDraftTemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsActionDraftTemplateOK), nil

}

/*
GetIntegrationsActionDraftValidation validates current draft configuration
*/
func (a *Client) GetIntegrationsActionDraftValidation(ctx context.Context, params *GetIntegrationsActionDraftValidationParams) (*GetIntegrationsActionDraftValidationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsActionDraftValidation",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/actions/{actionId}/draft/validation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsActionDraftValidationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsActionDraftValidationOK), nil

}

/*
GetIntegrationsActionSchema retrieves schema for an action based on filename
*/
func (a *Client) GetIntegrationsActionSchema(ctx context.Context, params *GetIntegrationsActionSchemaParams) (*GetIntegrationsActionSchemaOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsActionSchema",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/actions/{actionId}/schemas/{fileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsActionSchemaReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsActionSchemaOK), nil

}

/*
GetIntegrationsActionTemplate retrieves text of templates for an action based on filename
*/
func (a *Client) GetIntegrationsActionTemplate(ctx context.Context, params *GetIntegrationsActionTemplateParams) (*GetIntegrationsActionTemplateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsActionTemplate",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/actions/{actionId}/templates/{fileName}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsActionTemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsActionTemplateOK), nil

}

/*
GetIntegrationsActions retrieves all actions associated with filters passed in via query param
*/
func (a *Client) GetIntegrationsActions(ctx context.Context, params *GetIntegrationsActionsParams) (*GetIntegrationsActionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsActions",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsActionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsActionsOK), nil

}

/*
GetIntegrationsActionsCategories retrieves all categories of available actions
*/
func (a *Client) GetIntegrationsActionsCategories(ctx context.Context, params *GetIntegrationsActionsCategoriesParams) (*GetIntegrationsActionsCategoriesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsActionsCategories",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/actions/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsActionsCategoriesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsActionsCategoriesOK), nil

}

/*
GetIntegrationsActionsDrafts retrieves all action drafts associated with the filters passed in via query param
*/
func (a *Client) GetIntegrationsActionsDrafts(ctx context.Context, params *GetIntegrationsActionsDraftsParams) (*GetIntegrationsActionsDraftsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsActionsDrafts",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/actions/drafts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsActionsDraftsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsActionsDraftsOK), nil

}

/*
GetIntegrationsBotconnectorIntegrationIDBot gets a specific bot connector bot plus versions for this integration
*/
func (a *Client) GetIntegrationsBotconnectorIntegrationIDBot(ctx context.Context, params *GetIntegrationsBotconnectorIntegrationIDBotParams) (*GetIntegrationsBotconnectorIntegrationIDBotOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsBotconnectorIntegrationIdBot",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/botconnector/{integrationId}/bots/{botId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsBotconnectorIntegrationIDBotReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsBotconnectorIntegrationIDBotOK), nil

}

/*
GetIntegrationsBotconnectorIntegrationIDBotVersions gets a list of bot versions for a bot
*/
func (a *Client) GetIntegrationsBotconnectorIntegrationIDBotVersions(ctx context.Context, params *GetIntegrationsBotconnectorIntegrationIDBotVersionsParams) (*GetIntegrationsBotconnectorIntegrationIDBotVersionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsBotconnectorIntegrationIdBotVersions",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/botconnector/{integrationId}/bots/{botId}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsBotconnectorIntegrationIDBotVersionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsBotconnectorIntegrationIDBotVersionsOK), nil

}

/*
GetIntegrationsBotconnectorIntegrationIDBots gets a list of bot connector bots for this integration
*/
func (a *Client) GetIntegrationsBotconnectorIntegrationIDBots(ctx context.Context, params *GetIntegrationsBotconnectorIntegrationIDBotsParams) (*GetIntegrationsBotconnectorIntegrationIDBotsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsBotconnectorIntegrationIdBots",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/botconnector/{integrationId}/bots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsBotconnectorIntegrationIDBotsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsBotconnectorIntegrationIDBotsOK), nil

}

/*
GetIntegrationsBotconnectorIntegrationIDBotsSummaries gets a summary list of bot connector bots for this integration
*/
func (a *Client) GetIntegrationsBotconnectorIntegrationIDBotsSummaries(ctx context.Context, params *GetIntegrationsBotconnectorIntegrationIDBotsSummariesParams) (*GetIntegrationsBotconnectorIntegrationIDBotsSummariesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsBotconnectorIntegrationIdBotsSummaries",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/botconnector/{integrationId}/bots/summaries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsBotconnectorIntegrationIDBotsSummariesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsBotconnectorIntegrationIDBotsSummariesOK), nil

}

/*
GetIntegrationsClientapps lists permitted client app integrations for the logged in user
*/
func (a *Client) GetIntegrationsClientapps(ctx context.Context, params *GetIntegrationsClientappsParams) (*GetIntegrationsClientappsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsClientapps",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/clientapps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsClientappsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsClientappsOK), nil

}

/*
GetIntegrationsClientappsUnifiedcommunications us c integration client application configuration

This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled for the current organization.
*/
func (a *Client) GetIntegrationsClientappsUnifiedcommunications(ctx context.Context, params *GetIntegrationsClientappsUnifiedcommunicationsParams) (*GetIntegrationsClientappsUnifiedcommunicationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsClientappsUnifiedcommunications",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/clientapps/unifiedcommunications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsClientappsUnifiedcommunicationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsClientappsUnifiedcommunicationsOK), nil

}

/*
GetIntegrationsCredential gets a single credential with sensitive fields redacted
*/
func (a *Client) GetIntegrationsCredential(ctx context.Context, params *GetIntegrationsCredentialParams) (*GetIntegrationsCredentialOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsCredential",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/credentials/{credentialId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsCredentialReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsCredentialOK), nil

}

/*
GetIntegrationsCredentials lists multiple sets of credentials
*/
func (a *Client) GetIntegrationsCredentials(ctx context.Context, params *GetIntegrationsCredentialsParams) (*GetIntegrationsCredentialsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsCredentials",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsCredentialsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsCredentialsOK), nil

}

/*
GetIntegrationsCredentialsTypes lists all credential types
*/
func (a *Client) GetIntegrationsCredentialsTypes(ctx context.Context, params *GetIntegrationsCredentialsTypesParams) (*GetIntegrationsCredentialsTypesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsCredentialsTypes",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/credentials/types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsCredentialsTypesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsCredentialsTypesOK), nil

}

/*
GetIntegrationsEventlog lists all events
*/
func (a *Client) GetIntegrationsEventlog(ctx context.Context, params *GetIntegrationsEventlogParams) (*GetIntegrationsEventlogOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsEventlog",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/eventlog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsEventlogReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsEventlogOK), nil

}

/*
GetIntegrationsEventlogEventID gets a single event
*/
func (a *Client) GetIntegrationsEventlogEventID(ctx context.Context, params *GetIntegrationsEventlogEventIDParams) (*GetIntegrationsEventlogEventIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsEventlogEventId",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/eventlog/{eventId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsEventlogEventIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsEventlogEventIDOK), nil

}

/*
GetIntegrationsSpeechDialogflowAgent gets details about a dialogflow agent
*/
func (a *Client) GetIntegrationsSpeechDialogflowAgent(ctx context.Context, params *GetIntegrationsSpeechDialogflowAgentParams) (*GetIntegrationsSpeechDialogflowAgentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsSpeechDialogflowAgent",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/speech/dialogflow/agents/{agentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsSpeechDialogflowAgentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsSpeechDialogflowAgentOK), nil

}

/*
GetIntegrationsSpeechDialogflowAgents gets a list of dialogflow agents in the customers google accounts
*/
func (a *Client) GetIntegrationsSpeechDialogflowAgents(ctx context.Context, params *GetIntegrationsSpeechDialogflowAgentsParams) (*GetIntegrationsSpeechDialogflowAgentsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsSpeechDialogflowAgents",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/speech/dialogflow/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsSpeechDialogflowAgentsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsSpeechDialogflowAgentsOK), nil

}

/*
GetIntegrationsSpeechLexBotAlias gets details about a lex bot alias
*/
func (a *Client) GetIntegrationsSpeechLexBotAlias(ctx context.Context, params *GetIntegrationsSpeechLexBotAliasParams) (*GetIntegrationsSpeechLexBotAliasOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsSpeechLexBotAlias",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/speech/lex/bot/alias/{aliasId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsSpeechLexBotAliasReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsSpeechLexBotAliasOK), nil

}

/*
GetIntegrationsSpeechLexBotBotIDAliases gets a list of aliases for a bot in the customer s a w s accounts
*/
func (a *Client) GetIntegrationsSpeechLexBotBotIDAliases(ctx context.Context, params *GetIntegrationsSpeechLexBotBotIDAliasesParams) (*GetIntegrationsSpeechLexBotBotIDAliasesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsSpeechLexBotBotIdAliases",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/speech/lex/bot/{botId}/aliases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsSpeechLexBotBotIDAliasesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsSpeechLexBotBotIDAliasesOK), nil

}

/*
GetIntegrationsSpeechLexBots gets a list of lex bots in the customers a w s accounts
*/
func (a *Client) GetIntegrationsSpeechLexBots(ctx context.Context, params *GetIntegrationsSpeechLexBotsParams) (*GetIntegrationsSpeechLexBotsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsSpeechLexBots",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/speech/lex/bots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsSpeechLexBotsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsSpeechLexBotsOK), nil

}

/*
GetIntegrationsSpeechTtsEngine gets details about a t t s engine
*/
func (a *Client) GetIntegrationsSpeechTtsEngine(ctx context.Context, params *GetIntegrationsSpeechTtsEngineParams) (*GetIntegrationsSpeechTtsEngineOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsSpeechTtsEngine",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/speech/tts/engines/{engineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsSpeechTtsEngineReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsSpeechTtsEngineOK), nil

}

/*
GetIntegrationsSpeechTtsEngineVoice gets details about a specific voice for a t t s engine
*/
func (a *Client) GetIntegrationsSpeechTtsEngineVoice(ctx context.Context, params *GetIntegrationsSpeechTtsEngineVoiceParams) (*GetIntegrationsSpeechTtsEngineVoiceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsSpeechTtsEngineVoice",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/speech/tts/engines/{engineId}/voices/{voiceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsSpeechTtsEngineVoiceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsSpeechTtsEngineVoiceOK), nil

}

/*
GetIntegrationsSpeechTtsEngineVoices gets a list of voices for a t t s engine
*/
func (a *Client) GetIntegrationsSpeechTtsEngineVoices(ctx context.Context, params *GetIntegrationsSpeechTtsEngineVoicesParams) (*GetIntegrationsSpeechTtsEngineVoicesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsSpeechTtsEngineVoices",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/speech/tts/engines/{engineId}/voices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsSpeechTtsEngineVoicesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsSpeechTtsEngineVoicesOK), nil

}

/*
GetIntegrationsSpeechTtsEngines gets a list of t t s engines enabled for org
*/
func (a *Client) GetIntegrationsSpeechTtsEngines(ctx context.Context, params *GetIntegrationsSpeechTtsEnginesParams) (*GetIntegrationsSpeechTtsEnginesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsSpeechTtsEngines",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/speech/tts/engines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsSpeechTtsEnginesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsSpeechTtsEnginesOK), nil

}

/*
GetIntegrationsSpeechTtsSettings gets t t s settings for an org
*/
func (a *Client) GetIntegrationsSpeechTtsSettings(ctx context.Context, params *GetIntegrationsSpeechTtsSettingsParams) (*GetIntegrationsSpeechTtsSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsSpeechTtsSettings",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/speech/tts/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsSpeechTtsSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsSpeechTtsSettingsOK), nil

}

/*
GetIntegrationsType gets integration type
*/
func (a *Client) GetIntegrationsType(ctx context.Context, params *GetIntegrationsTypeParams) (*GetIntegrationsTypeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsType",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/types/{typeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsTypeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsTypeOK), nil

}

/*
GetIntegrationsTypeConfigschema gets properties config schema for an integration type
*/
func (a *Client) GetIntegrationsTypeConfigschema(ctx context.Context, params *GetIntegrationsTypeConfigschemaParams) (*GetIntegrationsTypeConfigschemaOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsTypeConfigschema",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/types/{typeId}/configschemas/{configType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsTypeConfigschemaReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsTypeConfigschemaOK), nil

}

/*
GetIntegrationsTypes lists integration types
*/
func (a *Client) GetIntegrationsTypes(ctx context.Context, params *GetIntegrationsTypesParams) (*GetIntegrationsTypesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsTypes",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsTypesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsTypesOK), nil

}

/*
GetIntegrationsUserapps lists permitted user app integrations for the logged in user
*/
func (a *Client) GetIntegrationsUserapps(ctx context.Context, params *GetIntegrationsUserappsParams) (*GetIntegrationsUserappsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationsUserapps",
		Method:             "GET",
		PathPattern:        "/api/v2/integrations/userapps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsUserappsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationsUserappsOK), nil

}

/*
PatchIntegration updates an integration
*/
func (a *Client) PatchIntegration(ctx context.Context, params *PatchIntegrationParams) (*PatchIntegrationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchIntegration",
		Method:             "PATCH",
		PathPattern:        "/api/v2/integrations/{integrationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchIntegrationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchIntegrationOK), nil

}

/*
PatchIntegrationsAction patches an action
*/
func (a *Client) PatchIntegrationsAction(ctx context.Context, params *PatchIntegrationsActionParams) (*PatchIntegrationsActionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchIntegrationsAction",
		Method:             "PATCH",
		PathPattern:        "/api/v2/integrations/actions/{actionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchIntegrationsActionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchIntegrationsActionOK), nil

}

/*
PatchIntegrationsActionDraft updates an existing draft
*/
func (a *Client) PatchIntegrationsActionDraft(ctx context.Context, params *PatchIntegrationsActionDraftParams) (*PatchIntegrationsActionDraftOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchIntegrationsActionDraft",
		Method:             "PATCH",
		PathPattern:        "/api/v2/integrations/actions/{actionId}/draft",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchIntegrationsActionDraftReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchIntegrationsActionDraftOK), nil

}

/*
PostIntegrations creates an integration
*/
func (a *Client) PostIntegrations(ctx context.Context, params *PostIntegrationsParams) (*PostIntegrationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIntegrations",
		Method:             "POST",
		PathPattern:        "/api/v2/integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIntegrationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIntegrationsOK), nil

}

/*
PostIntegrationsActionDraft creates a new draft from existing action
*/
func (a *Client) PostIntegrationsActionDraft(ctx context.Context, params *PostIntegrationsActionDraftParams) (*PostIntegrationsActionDraftOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIntegrationsActionDraft",
		Method:             "POST",
		PathPattern:        "/api/v2/integrations/actions/{actionId}/draft",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIntegrationsActionDraftReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIntegrationsActionDraftOK), nil

}

/*
PostIntegrationsActionDraftPublish publishes a draft and make it the active action configuration
*/
func (a *Client) PostIntegrationsActionDraftPublish(ctx context.Context, params *PostIntegrationsActionDraftPublishParams) (*PostIntegrationsActionDraftPublishOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIntegrationsActionDraftPublish",
		Method:             "POST",
		PathPattern:        "/api/v2/integrations/actions/{actionId}/draft/publish",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIntegrationsActionDraftPublishReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIntegrationsActionDraftPublishOK), nil

}

/*
PostIntegrationsActionDraftTest tests the execution of a draft responses will show execution steps broken out with intermediate results to help in debugging
*/
func (a *Client) PostIntegrationsActionDraftTest(ctx context.Context, params *PostIntegrationsActionDraftTestParams) (*PostIntegrationsActionDraftTestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIntegrationsActionDraftTest",
		Method:             "POST",
		PathPattern:        "/api/v2/integrations/actions/{actionId}/draft/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIntegrationsActionDraftTestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIntegrationsActionDraftTestOK), nil

}

/*
PostIntegrationsActionExecute executes action and return response from 3rd party responses will follow the schemas defined on the action for success and error
*/
func (a *Client) PostIntegrationsActionExecute(ctx context.Context, params *PostIntegrationsActionExecuteParams) (*PostIntegrationsActionExecuteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIntegrationsActionExecute",
		Method:             "POST",
		PathPattern:        "/api/v2/integrations/actions/{actionId}/execute",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIntegrationsActionExecuteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIntegrationsActionExecuteOK), nil

}

/*
PostIntegrationsActionTest tests the execution of an action responses will show execution steps broken out with intermediate results to help in debugging
*/
func (a *Client) PostIntegrationsActionTest(ctx context.Context, params *PostIntegrationsActionTestParams) (*PostIntegrationsActionTestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIntegrationsActionTest",
		Method:             "POST",
		PathPattern:        "/api/v2/integrations/actions/{actionId}/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIntegrationsActionTestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIntegrationsActionTestOK), nil

}

/*
PostIntegrationsActions creates a new action
*/
func (a *Client) PostIntegrationsActions(ctx context.Context, params *PostIntegrationsActionsParams) (*PostIntegrationsActionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIntegrationsActions",
		Method:             "POST",
		PathPattern:        "/api/v2/integrations/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIntegrationsActionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIntegrationsActionsOK), nil

}

/*
PostIntegrationsActionsDrafts creates a new draft
*/
func (a *Client) PostIntegrationsActionsDrafts(ctx context.Context, params *PostIntegrationsActionsDraftsParams) (*PostIntegrationsActionsDraftsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIntegrationsActionsDrafts",
		Method:             "POST",
		PathPattern:        "/api/v2/integrations/actions/drafts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIntegrationsActionsDraftsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIntegrationsActionsDraftsOK), nil

}

/*
PostIntegrationsCredentials creates a set of credentials
*/
func (a *Client) PostIntegrationsCredentials(ctx context.Context, params *PostIntegrationsCredentialsParams) (*PostIntegrationsCredentialsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIntegrationsCredentials",
		Method:             "POST",
		PathPattern:        "/api/v2/integrations/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIntegrationsCredentialsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIntegrationsCredentialsOK), nil

}

/*
PostIntegrationsWorkforcemanagementVendorconnection adds a vendor connection
*/
func (a *Client) PostIntegrationsWorkforcemanagementVendorconnection(ctx context.Context, params *PostIntegrationsWorkforcemanagementVendorconnectionParams) (*PostIntegrationsWorkforcemanagementVendorconnectionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIntegrationsWorkforcemanagementVendorconnection",
		Method:             "POST",
		PathPattern:        "/api/v2/integrations/workforcemanagement/vendorconnection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIntegrationsWorkforcemanagementVendorconnectionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIntegrationsWorkforcemanagementVendorconnectionOK), nil

}

/*
PutIntegrationConfigCurrent updates integration configuration
*/
func (a *Client) PutIntegrationConfigCurrent(ctx context.Context, params *PutIntegrationConfigCurrentParams) (*PutIntegrationConfigCurrentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIntegrationConfigCurrent",
		Method:             "PUT",
		PathPattern:        "/api/v2/integrations/{integrationId}/config/current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIntegrationConfigCurrentReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIntegrationConfigCurrentOK), nil

}

/*
PutIntegrationsBotconnectorIntegrationIDBots sets a list of bot connector bots plus versions for this integration
*/
func (a *Client) PutIntegrationsBotconnectorIntegrationIDBots(ctx context.Context, params *PutIntegrationsBotconnectorIntegrationIDBotsParams) (*PutIntegrationsBotconnectorIntegrationIDBotsNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIntegrationsBotconnectorIntegrationIdBots",
		Method:             "PUT",
		PathPattern:        "/api/v2/integrations/botconnector/{integrationId}/bots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIntegrationsBotconnectorIntegrationIDBotsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIntegrationsBotconnectorIntegrationIDBotsNoContent), nil

}

/*
PutIntegrationsCredential updates a set of credentials
*/
func (a *Client) PutIntegrationsCredential(ctx context.Context, params *PutIntegrationsCredentialParams) (*PutIntegrationsCredentialOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIntegrationsCredential",
		Method:             "PUT",
		PathPattern:        "/api/v2/integrations/credentials/{credentialId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIntegrationsCredentialReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIntegrationsCredentialOK), nil

}

/*
PutIntegrationsSpeechTtsSettings updates t t s settings for an org
*/
func (a *Client) PutIntegrationsSpeechTtsSettings(ctx context.Context, params *PutIntegrationsSpeechTtsSettingsParams) (*PutIntegrationsSpeechTtsSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIntegrationsSpeechTtsSettings",
		Method:             "PUT",
		PathPattern:        "/api/v2/integrations/speech/tts/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIntegrationsSpeechTtsSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIntegrationsSpeechTtsSettingsOK), nil

}

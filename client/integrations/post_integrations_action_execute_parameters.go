// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostIntegrationsActionExecuteParams creates a new PostIntegrationsActionExecuteParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostIntegrationsActionExecuteParams() *PostIntegrationsActionExecuteParams {
	return &PostIntegrationsActionExecuteParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostIntegrationsActionExecuteParamsWithTimeout creates a new PostIntegrationsActionExecuteParams object
// with the ability to set a timeout on a request.
func NewPostIntegrationsActionExecuteParamsWithTimeout(timeout time.Duration) *PostIntegrationsActionExecuteParams {
	return &PostIntegrationsActionExecuteParams{
		timeout: timeout,
	}
}

// NewPostIntegrationsActionExecuteParamsWithContext creates a new PostIntegrationsActionExecuteParams object
// with the ability to set a context for a request.
func NewPostIntegrationsActionExecuteParamsWithContext(ctx context.Context) *PostIntegrationsActionExecuteParams {
	return &PostIntegrationsActionExecuteParams{
		Context: ctx,
	}
}

// NewPostIntegrationsActionExecuteParamsWithHTTPClient creates a new PostIntegrationsActionExecuteParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostIntegrationsActionExecuteParamsWithHTTPClient(client *http.Client) *PostIntegrationsActionExecuteParams {
	return &PostIntegrationsActionExecuteParams{
		HTTPClient: client,
	}
}

/*
PostIntegrationsActionExecuteParams contains all the parameters to send to the API endpoint

	for the post integrations action execute operation.

	Typically these are written to a http.Request.
*/
type PostIntegrationsActionExecuteParams struct {

	/* ActionID.

	   actionId
	*/
	ActionID string

	/* Body.

	   Map of parameters used for variable substitution.
	*/
	Body map[string]interface{}

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post integrations action execute params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostIntegrationsActionExecuteParams) WithDefaults() *PostIntegrationsActionExecuteParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post integrations action execute params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostIntegrationsActionExecuteParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post integrations action execute params
func (o *PostIntegrationsActionExecuteParams) WithTimeout(timeout time.Duration) *PostIntegrationsActionExecuteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post integrations action execute params
func (o *PostIntegrationsActionExecuteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post integrations action execute params
func (o *PostIntegrationsActionExecuteParams) WithContext(ctx context.Context) *PostIntegrationsActionExecuteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post integrations action execute params
func (o *PostIntegrationsActionExecuteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post integrations action execute params
func (o *PostIntegrationsActionExecuteParams) WithHTTPClient(client *http.Client) *PostIntegrationsActionExecuteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post integrations action execute params
func (o *PostIntegrationsActionExecuteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActionID adds the actionID to the post integrations action execute params
func (o *PostIntegrationsActionExecuteParams) WithActionID(actionID string) *PostIntegrationsActionExecuteParams {
	o.SetActionID(actionID)
	return o
}

// SetActionID adds the actionId to the post integrations action execute params
func (o *PostIntegrationsActionExecuteParams) SetActionID(actionID string) {
	o.ActionID = actionID
}

// WithBody adds the body to the post integrations action execute params
func (o *PostIntegrationsActionExecuteParams) WithBody(body map[string]interface{}) *PostIntegrationsActionExecuteParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post integrations action execute params
func (o *PostIntegrationsActionExecuteParams) SetBody(body map[string]interface{}) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *PostIntegrationsActionExecuteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param actionId
	if err := r.SetPathParam("actionId", o.ActionID); err != nil {
		return err
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

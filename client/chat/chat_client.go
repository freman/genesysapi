// Code generated by go-swagger; DO NOT EDIT.

package chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the chat client
type API interface {
	/*
	   GetChatSettings gets chat settings
	   This route is deprecated, please use /chats/settings instead
	*/
	GetChatSettings(ctx context.Context, params *GetChatSettingsParams) (*GetChatSettingsOK, error)
	/*
	   GetChatsSettings gets chat settings
	*/
	GetChatsSettings(ctx context.Context, params *GetChatsSettingsParams) (*GetChatsSettingsOK, error)
	/*
	   PatchChatSettings patches chat settings
	   This route is deprecated, please use /chats/settings instead
	*/
	PatchChatSettings(ctx context.Context, params *PatchChatSettingsParams) (*PatchChatSettingsOK, error)
	/*
	   PatchChatsSettings patches chat settings
	*/
	PatchChatsSettings(ctx context.Context, params *PatchChatsSettingsParams) (*PatchChatsSettingsOK, error)
	/*
	   PutChatSettings updates chat settings
	   This route is deprecated, please use /chats/settings instead
	*/
	PutChatSettings(ctx context.Context, params *PutChatSettingsParams) (*PutChatSettingsOK, error)
	/*
	   PutChatsSettings updates chat settings
	*/
	PutChatsSettings(ctx context.Context, params *PutChatsSettingsParams) (*PutChatsSettingsOK, error)
}

// New creates a new chat API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for chat API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetChatSettings gets chat settings

This route is deprecated, please use /chats/settings instead
*/
func (a *Client) GetChatSettings(ctx context.Context, params *GetChatSettingsParams) (*GetChatSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChatSettings",
		Method:             "GET",
		PathPattern:        "/api/v2/chat/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChatSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChatSettingsOK), nil

}

/*
GetChatsSettings gets chat settings
*/
func (a *Client) GetChatsSettings(ctx context.Context, params *GetChatsSettingsParams) (*GetChatsSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChatsSettings",
		Method:             "GET",
		PathPattern:        "/api/v2/chats/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChatsSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChatsSettingsOK), nil

}

/*
PatchChatSettings patches chat settings

This route is deprecated, please use /chats/settings instead
*/
func (a *Client) PatchChatSettings(ctx context.Context, params *PatchChatSettingsParams) (*PatchChatSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchChatSettings",
		Method:             "PATCH",
		PathPattern:        "/api/v2/chat/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchChatSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchChatSettingsOK), nil

}

/*
PatchChatsSettings patches chat settings
*/
func (a *Client) PatchChatsSettings(ctx context.Context, params *PatchChatsSettingsParams) (*PatchChatsSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchChatsSettings",
		Method:             "PATCH",
		PathPattern:        "/api/v2/chats/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchChatsSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchChatsSettingsOK), nil

}

/*
PutChatSettings updates chat settings

This route is deprecated, please use /chats/settings instead
*/
func (a *Client) PutChatSettings(ctx context.Context, params *PutChatSettingsParams) (*PutChatSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putChatSettings",
		Method:             "PUT",
		PathPattern:        "/api/v2/chat/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutChatSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutChatSettingsOK), nil

}

/*
PutChatsSettings updates chat settings
*/
func (a *Client) PutChatsSettings(ctx context.Context, params *PutChatsSettingsParams) (*PutChatsSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putChatsSettings",
		Method:             "PUT",
		PathPattern:        "/api/v2/chats/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutChatsSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutChatsSettingsOK), nil

}

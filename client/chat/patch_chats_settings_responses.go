// Code generated by go-swagger; DO NOT EDIT.

package chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchChatsSettingsReader is a Reader for the PatchChatsSettings structure.
type PatchChatsSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchChatsSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchChatsSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchChatsSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchChatsSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchChatsSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchChatsSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchChatsSettingsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchChatsSettingsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchChatsSettingsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchChatsSettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchChatsSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchChatsSettingsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchChatsSettingsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchChatsSettingsOK creates a PatchChatsSettingsOK with default headers values
func NewPatchChatsSettingsOK() *PatchChatsSettingsOK {
	return &PatchChatsSettingsOK{}
}

/*
PatchChatsSettingsOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchChatsSettingsOK struct {
	Payload *models.ChatSettings
}

// IsSuccess returns true when this patch chats settings o k response has a 2xx status code
func (o *PatchChatsSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch chats settings o k response has a 3xx status code
func (o *PatchChatsSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch chats settings o k response has a 4xx status code
func (o *PatchChatsSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch chats settings o k response has a 5xx status code
func (o *PatchChatsSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch chats settings o k response a status code equal to that given
func (o *PatchChatsSettingsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchChatsSettingsOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsOK  %+v", 200, o.Payload)
}

func (o *PatchChatsSettingsOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsOK  %+v", 200, o.Payload)
}

func (o *PatchChatsSettingsOK) GetPayload() *models.ChatSettings {
	return o.Payload
}

func (o *PatchChatsSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChatSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchChatsSettingsBadRequest creates a PatchChatsSettingsBadRequest with default headers values
func NewPatchChatsSettingsBadRequest() *PatchChatsSettingsBadRequest {
	return &PatchChatsSettingsBadRequest{}
}

/*
PatchChatsSettingsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchChatsSettingsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch chats settings bad request response has a 2xx status code
func (o *PatchChatsSettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch chats settings bad request response has a 3xx status code
func (o *PatchChatsSettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch chats settings bad request response has a 4xx status code
func (o *PatchChatsSettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch chats settings bad request response has a 5xx status code
func (o *PatchChatsSettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch chats settings bad request response a status code equal to that given
func (o *PatchChatsSettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchChatsSettingsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchChatsSettingsBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchChatsSettingsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchChatsSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchChatsSettingsUnauthorized creates a PatchChatsSettingsUnauthorized with default headers values
func NewPatchChatsSettingsUnauthorized() *PatchChatsSettingsUnauthorized {
	return &PatchChatsSettingsUnauthorized{}
}

/*
PatchChatsSettingsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchChatsSettingsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch chats settings unauthorized response has a 2xx status code
func (o *PatchChatsSettingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch chats settings unauthorized response has a 3xx status code
func (o *PatchChatsSettingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch chats settings unauthorized response has a 4xx status code
func (o *PatchChatsSettingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch chats settings unauthorized response has a 5xx status code
func (o *PatchChatsSettingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch chats settings unauthorized response a status code equal to that given
func (o *PatchChatsSettingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchChatsSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchChatsSettingsUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchChatsSettingsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchChatsSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchChatsSettingsForbidden creates a PatchChatsSettingsForbidden with default headers values
func NewPatchChatsSettingsForbidden() *PatchChatsSettingsForbidden {
	return &PatchChatsSettingsForbidden{}
}

/*
PatchChatsSettingsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchChatsSettingsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch chats settings forbidden response has a 2xx status code
func (o *PatchChatsSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch chats settings forbidden response has a 3xx status code
func (o *PatchChatsSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch chats settings forbidden response has a 4xx status code
func (o *PatchChatsSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch chats settings forbidden response has a 5xx status code
func (o *PatchChatsSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch chats settings forbidden response a status code equal to that given
func (o *PatchChatsSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchChatsSettingsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PatchChatsSettingsForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PatchChatsSettingsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchChatsSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchChatsSettingsNotFound creates a PatchChatsSettingsNotFound with default headers values
func NewPatchChatsSettingsNotFound() *PatchChatsSettingsNotFound {
	return &PatchChatsSettingsNotFound{}
}

/*
PatchChatsSettingsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchChatsSettingsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch chats settings not found response has a 2xx status code
func (o *PatchChatsSettingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch chats settings not found response has a 3xx status code
func (o *PatchChatsSettingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch chats settings not found response has a 4xx status code
func (o *PatchChatsSettingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch chats settings not found response has a 5xx status code
func (o *PatchChatsSettingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch chats settings not found response a status code equal to that given
func (o *PatchChatsSettingsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchChatsSettingsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PatchChatsSettingsNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PatchChatsSettingsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchChatsSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchChatsSettingsRequestTimeout creates a PatchChatsSettingsRequestTimeout with default headers values
func NewPatchChatsSettingsRequestTimeout() *PatchChatsSettingsRequestTimeout {
	return &PatchChatsSettingsRequestTimeout{}
}

/*
PatchChatsSettingsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchChatsSettingsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch chats settings request timeout response has a 2xx status code
func (o *PatchChatsSettingsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch chats settings request timeout response has a 3xx status code
func (o *PatchChatsSettingsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch chats settings request timeout response has a 4xx status code
func (o *PatchChatsSettingsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch chats settings request timeout response has a 5xx status code
func (o *PatchChatsSettingsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch chats settings request timeout response a status code equal to that given
func (o *PatchChatsSettingsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchChatsSettingsRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchChatsSettingsRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchChatsSettingsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchChatsSettingsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchChatsSettingsRequestEntityTooLarge creates a PatchChatsSettingsRequestEntityTooLarge with default headers values
func NewPatchChatsSettingsRequestEntityTooLarge() *PatchChatsSettingsRequestEntityTooLarge {
	return &PatchChatsSettingsRequestEntityTooLarge{}
}

/*
PatchChatsSettingsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchChatsSettingsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch chats settings request entity too large response has a 2xx status code
func (o *PatchChatsSettingsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch chats settings request entity too large response has a 3xx status code
func (o *PatchChatsSettingsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch chats settings request entity too large response has a 4xx status code
func (o *PatchChatsSettingsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch chats settings request entity too large response has a 5xx status code
func (o *PatchChatsSettingsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch chats settings request entity too large response a status code equal to that given
func (o *PatchChatsSettingsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchChatsSettingsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchChatsSettingsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchChatsSettingsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchChatsSettingsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchChatsSettingsUnsupportedMediaType creates a PatchChatsSettingsUnsupportedMediaType with default headers values
func NewPatchChatsSettingsUnsupportedMediaType() *PatchChatsSettingsUnsupportedMediaType {
	return &PatchChatsSettingsUnsupportedMediaType{}
}

/*
PatchChatsSettingsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchChatsSettingsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch chats settings unsupported media type response has a 2xx status code
func (o *PatchChatsSettingsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch chats settings unsupported media type response has a 3xx status code
func (o *PatchChatsSettingsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch chats settings unsupported media type response has a 4xx status code
func (o *PatchChatsSettingsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch chats settings unsupported media type response has a 5xx status code
func (o *PatchChatsSettingsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch chats settings unsupported media type response a status code equal to that given
func (o *PatchChatsSettingsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchChatsSettingsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchChatsSettingsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchChatsSettingsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchChatsSettingsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchChatsSettingsTooManyRequests creates a PatchChatsSettingsTooManyRequests with default headers values
func NewPatchChatsSettingsTooManyRequests() *PatchChatsSettingsTooManyRequests {
	return &PatchChatsSettingsTooManyRequests{}
}

/*
PatchChatsSettingsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchChatsSettingsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch chats settings too many requests response has a 2xx status code
func (o *PatchChatsSettingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch chats settings too many requests response has a 3xx status code
func (o *PatchChatsSettingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch chats settings too many requests response has a 4xx status code
func (o *PatchChatsSettingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch chats settings too many requests response has a 5xx status code
func (o *PatchChatsSettingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch chats settings too many requests response a status code equal to that given
func (o *PatchChatsSettingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchChatsSettingsTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchChatsSettingsTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchChatsSettingsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchChatsSettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchChatsSettingsInternalServerError creates a PatchChatsSettingsInternalServerError with default headers values
func NewPatchChatsSettingsInternalServerError() *PatchChatsSettingsInternalServerError {
	return &PatchChatsSettingsInternalServerError{}
}

/*
PatchChatsSettingsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchChatsSettingsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch chats settings internal server error response has a 2xx status code
func (o *PatchChatsSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch chats settings internal server error response has a 3xx status code
func (o *PatchChatsSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch chats settings internal server error response has a 4xx status code
func (o *PatchChatsSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch chats settings internal server error response has a 5xx status code
func (o *PatchChatsSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch chats settings internal server error response a status code equal to that given
func (o *PatchChatsSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchChatsSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchChatsSettingsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchChatsSettingsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchChatsSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchChatsSettingsServiceUnavailable creates a PatchChatsSettingsServiceUnavailable with default headers values
func NewPatchChatsSettingsServiceUnavailable() *PatchChatsSettingsServiceUnavailable {
	return &PatchChatsSettingsServiceUnavailable{}
}

/*
PatchChatsSettingsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchChatsSettingsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch chats settings service unavailable response has a 2xx status code
func (o *PatchChatsSettingsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch chats settings service unavailable response has a 3xx status code
func (o *PatchChatsSettingsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch chats settings service unavailable response has a 4xx status code
func (o *PatchChatsSettingsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch chats settings service unavailable response has a 5xx status code
func (o *PatchChatsSettingsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch chats settings service unavailable response a status code equal to that given
func (o *PatchChatsSettingsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchChatsSettingsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchChatsSettingsServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchChatsSettingsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchChatsSettingsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchChatsSettingsGatewayTimeout creates a PatchChatsSettingsGatewayTimeout with default headers values
func NewPatchChatsSettingsGatewayTimeout() *PatchChatsSettingsGatewayTimeout {
	return &PatchChatsSettingsGatewayTimeout{}
}

/*
PatchChatsSettingsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchChatsSettingsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch chats settings gateway timeout response has a 2xx status code
func (o *PatchChatsSettingsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch chats settings gateway timeout response has a 3xx status code
func (o *PatchChatsSettingsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch chats settings gateway timeout response has a 4xx status code
func (o *PatchChatsSettingsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch chats settings gateway timeout response has a 5xx status code
func (o *PatchChatsSettingsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch chats settings gateway timeout response a status code equal to that given
func (o *PatchChatsSettingsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchChatsSettingsGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchChatsSettingsGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/chats/settings][%d] patchChatsSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchChatsSettingsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchChatsSettingsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

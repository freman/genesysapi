// Code generated by go-swagger; DO NOT EDIT.

package telephony_providers_edge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the telephony providers edge client
type API interface {
	/*
	   DeleteTelephonyProvidersEdge deletes a edge
	*/
	DeleteTelephonyProvidersEdge(ctx context.Context, params *DeleteTelephonyProvidersEdgeParams) (*DeleteTelephonyProvidersEdgeOK, error)
	/*
	   DeleteTelephonyProvidersEdgeLogicalinterface deletes an edge logical interface
	*/
	DeleteTelephonyProvidersEdgeLogicalinterface(ctx context.Context, params *DeleteTelephonyProvidersEdgeLogicalinterfaceParams) error
	/*
	   DeleteTelephonyProvidersEdgeSoftwareupdate cancels any in progress update for this edge
	*/
	DeleteTelephonyProvidersEdgeSoftwareupdate(ctx context.Context, params *DeleteTelephonyProvidersEdgeSoftwareupdateParams) (*DeleteTelephonyProvidersEdgeSoftwareupdateOK, error)
	/*
	   DeleteTelephonyProvidersEdgesCertificateauthority deletes a certificate authority
	*/
	DeleteTelephonyProvidersEdgesCertificateauthority(ctx context.Context, params *DeleteTelephonyProvidersEdgesCertificateauthorityParams) (*DeleteTelephonyProvidersEdgesCertificateauthorityOK, error)
	/*
	   DeleteTelephonyProvidersEdgesDidpool deletes a d ID pool by ID
	*/
	DeleteTelephonyProvidersEdgesDidpool(ctx context.Context, params *DeleteTelephonyProvidersEdgesDidpoolParams) (*DeleteTelephonyProvidersEdgesDidpoolOK, error)
	/*
	   DeleteTelephonyProvidersEdgesEdgegroup deletes an edge group
	*/
	DeleteTelephonyProvidersEdgesEdgegroup(ctx context.Context, params *DeleteTelephonyProvidersEdgesEdgegroupParams) (*DeleteTelephonyProvidersEdgesEdgegroupOK, error)
	/*
	   DeleteTelephonyProvidersEdgesExtensionpool deletes an extension pool by ID
	*/
	DeleteTelephonyProvidersEdgesExtensionpool(ctx context.Context, params *DeleteTelephonyProvidersEdgesExtensionpoolParams) (*DeleteTelephonyProvidersEdgesExtensionpoolOK, error)
	/*
	   DeleteTelephonyProvidersEdgesOutboundroute deletes outbound route
	   This route is deprecated, use /telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId} instead.
	*/
	DeleteTelephonyProvidersEdgesOutboundroute(ctx context.Context, params *DeleteTelephonyProvidersEdgesOutboundrouteParams) (*DeleteTelephonyProvidersEdgesOutboundrouteOK, error)
	/*
	   DeleteTelephonyProvidersEdgesPhone deletes a phone by ID
	*/
	DeleteTelephonyProvidersEdgesPhone(ctx context.Context, params *DeleteTelephonyProvidersEdgesPhoneParams) (*DeleteTelephonyProvidersEdgesPhoneOK, error)
	/*
	   DeleteTelephonyProvidersEdgesPhonebasesetting deletes a phone base settings by ID
	*/
	DeleteTelephonyProvidersEdgesPhonebasesetting(ctx context.Context, params *DeleteTelephonyProvidersEdgesPhonebasesettingParams) (*DeleteTelephonyProvidersEdgesPhonebasesettingOK, error)
	/*
	   DeleteTelephonyProvidersEdgesSite deletes a site by ID
	*/
	DeleteTelephonyProvidersEdgesSite(ctx context.Context, params *DeleteTelephonyProvidersEdgesSiteParams) (*DeleteTelephonyProvidersEdgesSiteOK, error)
	/*
	   DeleteTelephonyProvidersEdgesSiteOutboundroute deletes outbound route
	*/
	DeleteTelephonyProvidersEdgesSiteOutboundroute(ctx context.Context, params *DeleteTelephonyProvidersEdgesSiteOutboundrouteParams) (*DeleteTelephonyProvidersEdgesSiteOutboundrouteOK, error)
	/*
	   DeleteTelephonyProvidersEdgesTrunkbasesetting deletes a trunk base settings object by ID
	*/
	DeleteTelephonyProvidersEdgesTrunkbasesetting(ctx context.Context, params *DeleteTelephonyProvidersEdgesTrunkbasesettingParams) (*DeleteTelephonyProvidersEdgesTrunkbasesettingOK, error)
	/*
	   GetConfigurationSchemasEdgesVnext lists available schema categories deprecated
	*/
	GetConfigurationSchemasEdgesVnext(ctx context.Context, params *GetConfigurationSchemasEdgesVnextParams) (*GetConfigurationSchemasEdgesVnextOK, error)
	/*
	   GetConfigurationSchemasEdgesVnextSchemaCategory lists schemas of a specific category deprecated
	*/
	GetConfigurationSchemasEdgesVnextSchemaCategory(ctx context.Context, params *GetConfigurationSchemasEdgesVnextSchemaCategoryParams) (*GetConfigurationSchemasEdgesVnextSchemaCategoryOK, error)
	/*
	   GetConfigurationSchemasEdgesVnextSchemaCategorySchemaType lists schemas of a specific category deprecated
	*/
	GetConfigurationSchemasEdgesVnextSchemaCategorySchemaType(ctx context.Context, params *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeParams) (*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeOK, error)
	/*
	   GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaID gets a json schema deprecated
	*/
	GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaID(ctx context.Context, params *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDParams) (*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDOK, error)
	/*
	   GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDExtensionTypeMetadataID gets metadata for a schema deprecated
	*/
	GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDExtensionTypeMetadataID(ctx context.Context, params *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDExtensionTypeMetadataIDParams) (*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDExtensionTypeMetadataIDOK, error)
	/*
	   GetTelephonyProvidersEdge gets edge
	*/
	GetTelephonyProvidersEdge(ctx context.Context, params *GetTelephonyProvidersEdgeParams) (*GetTelephonyProvidersEdgeOK, error)
	/*
	   GetTelephonyProvidersEdgeDiagnosticNslookup gets networking related information from an edge for a target IP or host
	*/
	GetTelephonyProvidersEdgeDiagnosticNslookup(ctx context.Context, params *GetTelephonyProvidersEdgeDiagnosticNslookupParams) (*GetTelephonyProvidersEdgeDiagnosticNslookupOK, error)
	/*
	   GetTelephonyProvidersEdgeDiagnosticPing gets networking related information from an edge for a target IP or host
	*/
	GetTelephonyProvidersEdgeDiagnosticPing(ctx context.Context, params *GetTelephonyProvidersEdgeDiagnosticPingParams) (*GetTelephonyProvidersEdgeDiagnosticPingOK, error)
	/*
	   GetTelephonyProvidersEdgeDiagnosticRoute gets networking related information from an edge for a target IP or host
	*/
	GetTelephonyProvidersEdgeDiagnosticRoute(ctx context.Context, params *GetTelephonyProvidersEdgeDiagnosticRouteParams) (*GetTelephonyProvidersEdgeDiagnosticRouteOK, error)
	/*
	   GetTelephonyProvidersEdgeDiagnosticTracepath gets networking related information from an edge for a target IP or host
	*/
	GetTelephonyProvidersEdgeDiagnosticTracepath(ctx context.Context, params *GetTelephonyProvidersEdgeDiagnosticTracepathParams) (*GetTelephonyProvidersEdgeDiagnosticTracepathOK, error)
	/*
	   GetTelephonyProvidersEdgeLine gets line
	*/
	GetTelephonyProvidersEdgeLine(ctx context.Context, params *GetTelephonyProvidersEdgeLineParams) (*GetTelephonyProvidersEdgeLineOK, error)
	/*
	   GetTelephonyProvidersEdgeLines gets the list of lines
	*/
	GetTelephonyProvidersEdgeLines(ctx context.Context, params *GetTelephonyProvidersEdgeLinesParams) (*GetTelephonyProvidersEdgeLinesOK, error)
	/*
	   GetTelephonyProvidersEdgeLogicalinterface gets an edge logical interface
	*/
	GetTelephonyProvidersEdgeLogicalinterface(ctx context.Context, params *GetTelephonyProvidersEdgeLogicalinterfaceParams) (*GetTelephonyProvidersEdgeLogicalinterfaceOK, error)
	/*
	   GetTelephonyProvidersEdgeLogicalinterfaces gets edge logical interfaces
	   Retrieve a list of all configured logical interfaces from a specific edge.
	*/
	GetTelephonyProvidersEdgeLogicalinterfaces(ctx context.Context, params *GetTelephonyProvidersEdgeLogicalinterfacesParams) (*GetTelephonyProvidersEdgeLogicalinterfacesOK, error)
	/*
	   GetTelephonyProvidersEdgeLogsJob gets an edge logs job
	*/
	GetTelephonyProvidersEdgeLogsJob(ctx context.Context, params *GetTelephonyProvidersEdgeLogsJobParams) (*GetTelephonyProvidersEdgeLogsJobOK, *GetTelephonyProvidersEdgeLogsJobAccepted, error)
	/*
	   GetTelephonyProvidersEdgeMetrics gets the edge metrics
	*/
	GetTelephonyProvidersEdgeMetrics(ctx context.Context, params *GetTelephonyProvidersEdgeMetricsParams) (*GetTelephonyProvidersEdgeMetricsOK, error)
	/*
	   GetTelephonyProvidersEdgePhysicalinterface gets edge physical interface
	   Retrieve a physical interface from a specific edge.
	*/
	GetTelephonyProvidersEdgePhysicalinterface(ctx context.Context, params *GetTelephonyProvidersEdgePhysicalinterfaceParams) (*GetTelephonyProvidersEdgePhysicalinterfaceOK, error)
	/*
	   GetTelephonyProvidersEdgePhysicalinterfaces retrieves a list of all configured physical interfaces from a specific edge
	*/
	GetTelephonyProvidersEdgePhysicalinterfaces(ctx context.Context, params *GetTelephonyProvidersEdgePhysicalinterfacesParams) (*GetTelephonyProvidersEdgePhysicalinterfacesOK, error)
	/*
	   GetTelephonyProvidersEdgeSetuppackage gets the setup package for a locally deployed edge device this is needed to complete the setup process for the virtual edge
	*/
	GetTelephonyProvidersEdgeSetuppackage(ctx context.Context, params *GetTelephonyProvidersEdgeSetuppackageParams) (*GetTelephonyProvidersEdgeSetuppackageOK, error)
	/*
	   GetTelephonyProvidersEdgeSoftwareupdate gets software update status information about any edge
	*/
	GetTelephonyProvidersEdgeSoftwareupdate(ctx context.Context, params *GetTelephonyProvidersEdgeSoftwareupdateParams) (*GetTelephonyProvidersEdgeSoftwareupdateOK, error)
	/*
	   GetTelephonyProvidersEdgeSoftwareversions gets all the available software versions for this edge
	*/
	GetTelephonyProvidersEdgeSoftwareversions(ctx context.Context, params *GetTelephonyProvidersEdgeSoftwareversionsParams) (*GetTelephonyProvidersEdgeSoftwareversionsOK, error)
	/*
	   GetTelephonyProvidersEdgeTrunks gets the list of available trunks for the given edge
	   Trunks are created by assigning trunk base settings to an Edge or Edge Group.
	*/
	GetTelephonyProvidersEdgeTrunks(ctx context.Context, params *GetTelephonyProvidersEdgeTrunksParams) (*GetTelephonyProvidersEdgeTrunksOK, error)
	/*
	   GetTelephonyProvidersEdges gets the list of edges
	*/
	GetTelephonyProvidersEdges(ctx context.Context, params *GetTelephonyProvidersEdgesParams) (*GetTelephonyProvidersEdgesOK, error)
	/*
	   GetTelephonyProvidersEdgesAvailablelanguages gets the list of available languages
	*/
	GetTelephonyProvidersEdgesAvailablelanguages(ctx context.Context, params *GetTelephonyProvidersEdgesAvailablelanguagesParams) (*GetTelephonyProvidersEdgesAvailablelanguagesOK, error)
	/*
	   GetTelephonyProvidersEdgesCertificateauthorities gets the list of certificate authorities
	*/
	GetTelephonyProvidersEdgesCertificateauthorities(ctx context.Context, params *GetTelephonyProvidersEdgesCertificateauthoritiesParams) (*GetTelephonyProvidersEdgesCertificateauthoritiesOK, error)
	/*
	   GetTelephonyProvidersEdgesCertificateauthority gets a certificate authority
	*/
	GetTelephonyProvidersEdgesCertificateauthority(ctx context.Context, params *GetTelephonyProvidersEdgesCertificateauthorityParams) (*GetTelephonyProvidersEdgesCertificateauthorityOK, error)
	/*
	   GetTelephonyProvidersEdgesDid gets a d ID by ID
	*/
	GetTelephonyProvidersEdgesDid(ctx context.Context, params *GetTelephonyProvidersEdgesDidParams) (*GetTelephonyProvidersEdgesDidOK, error)
	/*
	   GetTelephonyProvidersEdgesDidpool gets a d ID pool by ID
	*/
	GetTelephonyProvidersEdgesDidpool(ctx context.Context, params *GetTelephonyProvidersEdgesDidpoolParams) (*GetTelephonyProvidersEdgesDidpoolOK, error)
	/*
	   GetTelephonyProvidersEdgesDidpools gets a listing of d ID pools
	*/
	GetTelephonyProvidersEdgesDidpools(ctx context.Context, params *GetTelephonyProvidersEdgesDidpoolsParams) (*GetTelephonyProvidersEdgesDidpoolsOK, error)
	/*
	   GetTelephonyProvidersEdgesDidpoolsDids gets a listing of unassigned and or assigned numbers in a set of d ID pools
	*/
	GetTelephonyProvidersEdgesDidpoolsDids(ctx context.Context, params *GetTelephonyProvidersEdgesDidpoolsDidsParams) (*GetTelephonyProvidersEdgesDidpoolsDidsOK, error)
	/*
	   GetTelephonyProvidersEdgesDids gets a listing of d i ds
	*/
	GetTelephonyProvidersEdgesDids(ctx context.Context, params *GetTelephonyProvidersEdgesDidsParams) (*GetTelephonyProvidersEdgesDidsOK, error)
	/*
	   GetTelephonyProvidersEdgesEdgegroup gets edge group
	*/
	GetTelephonyProvidersEdgesEdgegroup(ctx context.Context, params *GetTelephonyProvidersEdgesEdgegroupParams) (*GetTelephonyProvidersEdgesEdgegroupOK, error)
	/*
	   GetTelephonyProvidersEdgesEdgegroupEdgetrunkbase gets the edge trunk base associated with the edge group
	*/
	GetTelephonyProvidersEdgesEdgegroupEdgetrunkbase(ctx context.Context, params *GetTelephonyProvidersEdgesEdgegroupEdgetrunkbaseParams) (*GetTelephonyProvidersEdgesEdgegroupEdgetrunkbaseOK, error)
	/*
	   GetTelephonyProvidersEdgesEdgegroups gets the list of edge groups
	*/
	GetTelephonyProvidersEdgesEdgegroups(ctx context.Context, params *GetTelephonyProvidersEdgesEdgegroupsParams) (*GetTelephonyProvidersEdgesEdgegroupsOK, error)
	/*
	   GetTelephonyProvidersEdgesEdgeversionreport gets the edge version report
	   The report will not have consistent data about the edge version(s) until all edges have been reset.
	*/
	GetTelephonyProvidersEdgesEdgeversionreport(ctx context.Context, params *GetTelephonyProvidersEdgesEdgeversionreportParams) (*GetTelephonyProvidersEdgesEdgeversionreportOK, error)
	/*
	   GetTelephonyProvidersEdgesExtension gets an extension by ID
	*/
	GetTelephonyProvidersEdgesExtension(ctx context.Context, params *GetTelephonyProvidersEdgesExtensionParams) (*GetTelephonyProvidersEdgesExtensionOK, error)
	/*
	   GetTelephonyProvidersEdgesExtensionpool gets an extension pool by ID
	*/
	GetTelephonyProvidersEdgesExtensionpool(ctx context.Context, params *GetTelephonyProvidersEdgesExtensionpoolParams) (*GetTelephonyProvidersEdgesExtensionpoolOK, error)
	/*
	   GetTelephonyProvidersEdgesExtensionpools gets a listing of extension pools
	*/
	GetTelephonyProvidersEdgesExtensionpools(ctx context.Context, params *GetTelephonyProvidersEdgesExtensionpoolsParams) (*GetTelephonyProvidersEdgesExtensionpoolsOK, error)
	/*
	   GetTelephonyProvidersEdgesExtensions gets a listing of extensions
	*/
	GetTelephonyProvidersEdgesExtensions(ctx context.Context, params *GetTelephonyProvidersEdgesExtensionsParams) (*GetTelephonyProvidersEdgesExtensionsOK, error)
	/*
	   GetTelephonyProvidersEdgesLine gets a line by ID
	*/
	GetTelephonyProvidersEdgesLine(ctx context.Context, params *GetTelephonyProvidersEdgesLineParams) (*GetTelephonyProvidersEdgesLineOK, error)
	/*
	   GetTelephonyProvidersEdgesLinebasesetting gets a line base settings object by ID
	*/
	GetTelephonyProvidersEdgesLinebasesetting(ctx context.Context, params *GetTelephonyProvidersEdgesLinebasesettingParams) (*GetTelephonyProvidersEdgesLinebasesettingOK, error)
	/*
	   GetTelephonyProvidersEdgesLinebasesettings gets a listing of line base settings objects
	*/
	GetTelephonyProvidersEdgesLinebasesettings(ctx context.Context, params *GetTelephonyProvidersEdgesLinebasesettingsParams) (*GetTelephonyProvidersEdgesLinebasesettingsOK, error)
	/*
	   GetTelephonyProvidersEdgesLines gets a list of lines
	*/
	GetTelephonyProvidersEdgesLines(ctx context.Context, params *GetTelephonyProvidersEdgesLinesParams) (*GetTelephonyProvidersEdgesLinesOK, error)
	/*
	   GetTelephonyProvidersEdgesLinesTemplate gets a line instance template based on a line base settings object this object can then be modified and saved as a new line instance
	*/
	GetTelephonyProvidersEdgesLinesTemplate(ctx context.Context, params *GetTelephonyProvidersEdgesLinesTemplateParams) (*GetTelephonyProvidersEdgesLinesTemplateOK, error)
	/*
	   GetTelephonyProvidersEdgesLogicalinterfaces gets edge logical interfaces
	   Retrieve the configured logical interfaces for a list edges. Only 100 edges can be requested at a time.
	*/
	GetTelephonyProvidersEdgesLogicalinterfaces(ctx context.Context, params *GetTelephonyProvidersEdgesLogicalinterfacesParams) (*GetTelephonyProvidersEdgesLogicalinterfacesOK, error)
	/*
	   GetTelephonyProvidersEdgesMetrics gets the metrics for a list of edges
	*/
	GetTelephonyProvidersEdgesMetrics(ctx context.Context, params *GetTelephonyProvidersEdgesMetricsParams) (*GetTelephonyProvidersEdgesMetricsOK, error)
	/*
	   GetTelephonyProvidersEdgesOutboundroute gets outbound route
	   This route is deprecated, use /telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId} instead.
	*/
	GetTelephonyProvidersEdgesOutboundroute(ctx context.Context, params *GetTelephonyProvidersEdgesOutboundrouteParams) (*GetTelephonyProvidersEdgesOutboundrouteOK, error)
	/*
	   GetTelephonyProvidersEdgesOutboundroutes gets outbound routes
	*/
	GetTelephonyProvidersEdgesOutboundroutes(ctx context.Context, params *GetTelephonyProvidersEdgesOutboundroutesParams) (*GetTelephonyProvidersEdgesOutboundroutesOK, error)
	/*
	   GetTelephonyProvidersEdgesPhone gets a phone by ID
	*/
	GetTelephonyProvidersEdgesPhone(ctx context.Context, params *GetTelephonyProvidersEdgesPhoneParams) (*GetTelephonyProvidersEdgesPhoneOK, error)
	/*
	   GetTelephonyProvidersEdgesPhonebasesetting gets a phone base settings object by ID
	*/
	GetTelephonyProvidersEdgesPhonebasesetting(ctx context.Context, params *GetTelephonyProvidersEdgesPhonebasesettingParams) (*GetTelephonyProvidersEdgesPhonebasesettingOK, error)
	/*
	   GetTelephonyProvidersEdgesPhonebasesettings gets a list of phone base settings objects
	*/
	GetTelephonyProvidersEdgesPhonebasesettings(ctx context.Context, params *GetTelephonyProvidersEdgesPhonebasesettingsParams) (*GetTelephonyProvidersEdgesPhonebasesettingsOK, error)
	/*
	   GetTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases gets a list of available makes and models to create a new phone base settings
	*/
	GetTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases(ctx context.Context, params *GetTelephonyProvidersEdgesPhonebasesettingsAvailablemetabasesParams) (*GetTelephonyProvidersEdgesPhonebasesettingsAvailablemetabasesOK, error)
	/*
	   GetTelephonyProvidersEdgesPhonebasesettingsTemplate gets a phone base settings instance template from a given make and model this object can then be modified and saved as a new phone base settings instance
	*/
	GetTelephonyProvidersEdgesPhonebasesettingsTemplate(ctx context.Context, params *GetTelephonyProvidersEdgesPhonebasesettingsTemplateParams) (*GetTelephonyProvidersEdgesPhonebasesettingsTemplateOK, error)
	/*
	   GetTelephonyProvidersEdgesPhones gets a list of phone instances
	*/
	GetTelephonyProvidersEdgesPhones(ctx context.Context, params *GetTelephonyProvidersEdgesPhonesParams) (*GetTelephonyProvidersEdgesPhonesOK, error)
	/*
	   GetTelephonyProvidersEdgesPhonesTemplate gets a phone instance template based on a phone base settings object this object can then be modified and saved as a new phone instance
	*/
	GetTelephonyProvidersEdgesPhonesTemplate(ctx context.Context, params *GetTelephonyProvidersEdgesPhonesTemplateParams) (*GetTelephonyProvidersEdgesPhonesTemplateOK, error)
	/*
	   GetTelephonyProvidersEdgesPhysicalinterfaces gets physical interfaces for edges
	   Retrieves a list of all configured physical interfaces for a list of edges. Only 100 edges can be requested at a time.
	*/
	GetTelephonyProvidersEdgesPhysicalinterfaces(ctx context.Context, params *GetTelephonyProvidersEdgesPhysicalinterfacesParams) (*GetTelephonyProvidersEdgesPhysicalinterfacesOK, error)
	/*
	   GetTelephonyProvidersEdgesSite gets a site by ID
	*/
	GetTelephonyProvidersEdgesSite(ctx context.Context, params *GetTelephonyProvidersEdgesSiteParams) (*GetTelephonyProvidersEdgesSiteOK, error)
	/*
	   GetTelephonyProvidersEdgesSiteNumberplan gets a number plan by ID
	*/
	GetTelephonyProvidersEdgesSiteNumberplan(ctx context.Context, params *GetTelephonyProvidersEdgesSiteNumberplanParams) (*GetTelephonyProvidersEdgesSiteNumberplanOK, error)
	/*
	   GetTelephonyProvidersEdgesSiteNumberplans gets the list of number plans for this site only fetches the first 200 records
	*/
	GetTelephonyProvidersEdgesSiteNumberplans(ctx context.Context, params *GetTelephonyProvidersEdgesSiteNumberplansParams) (*GetTelephonyProvidersEdgesSiteNumberplansOK, error)
	/*
	   GetTelephonyProvidersEdgesSiteNumberplansClassifications gets a list of classifications for this site
	*/
	GetTelephonyProvidersEdgesSiteNumberplansClassifications(ctx context.Context, params *GetTelephonyProvidersEdgesSiteNumberplansClassificationsParams) (*GetTelephonyProvidersEdgesSiteNumberplansClassificationsOK, error)
	/*
	   GetTelephonyProvidersEdgesSiteOutboundroute gets an outbound route
	*/
	GetTelephonyProvidersEdgesSiteOutboundroute(ctx context.Context, params *GetTelephonyProvidersEdgesSiteOutboundrouteParams) (*GetTelephonyProvidersEdgesSiteOutboundrouteOK, error)
	/*
	   GetTelephonyProvidersEdgesSiteOutboundroutes gets outbound routes
	*/
	GetTelephonyProvidersEdgesSiteOutboundroutes(ctx context.Context, params *GetTelephonyProvidersEdgesSiteOutboundroutesParams) (*GetTelephonyProvidersEdgesSiteOutboundroutesOK, error)
	/*
	   GetTelephonyProvidersEdgesSites gets the list of sites
	*/
	GetTelephonyProvidersEdgesSites(ctx context.Context, params *GetTelephonyProvidersEdgesSitesParams) (*GetTelephonyProvidersEdgesSitesOK, error)
	/*
	   GetTelephonyProvidersEdgesTimezones gets a list of edge compatible time zones
	*/
	GetTelephonyProvidersEdgesTimezones(ctx context.Context, params *GetTelephonyProvidersEdgesTimezonesParams) (*GetTelephonyProvidersEdgesTimezonesOK, error)
	/*
	   GetTelephonyProvidersEdgesTrunk gets a trunk by ID
	*/
	GetTelephonyProvidersEdgesTrunk(ctx context.Context, params *GetTelephonyProvidersEdgesTrunkParams) (*GetTelephonyProvidersEdgesTrunkOK, error)
	/*
	   GetTelephonyProvidersEdgesTrunkMetrics gets the trunk metrics
	*/
	GetTelephonyProvidersEdgesTrunkMetrics(ctx context.Context, params *GetTelephonyProvidersEdgesTrunkMetricsParams) (*GetTelephonyProvidersEdgesTrunkMetricsOK, error)
	/*
	   GetTelephonyProvidersEdgesTrunkbasesetting gets a trunk base settings object by ID
	   Managed properties will not be returned unless the user is assigned the internal:trunk:edit permission.
	*/
	GetTelephonyProvidersEdgesTrunkbasesetting(ctx context.Context, params *GetTelephonyProvidersEdgesTrunkbasesettingParams) (*GetTelephonyProvidersEdgesTrunkbasesettingOK, error)
	/*
	   GetTelephonyProvidersEdgesTrunkbasesettings gets trunk base settings listing
	   Managed properties will not be returned unless the user is assigned the internal:trunk:edit permission.
	*/
	GetTelephonyProvidersEdgesTrunkbasesettings(ctx context.Context, params *GetTelephonyProvidersEdgesTrunkbasesettingsParams) (*GetTelephonyProvidersEdgesTrunkbasesettingsOK, error)
	/*
	   GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases gets a list of available makes and models to create a new trunk base settings
	*/
	GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases(ctx context.Context, params *GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabasesParams) (*GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabasesOK, error)
	/*
	   GetTelephonyProvidersEdgesTrunkbasesettingsTemplate gets a trunk base settings instance template from a given make and model this object can then be modified and saved as a new trunk base settings instance
	*/
	GetTelephonyProvidersEdgesTrunkbasesettingsTemplate(ctx context.Context, params *GetTelephonyProvidersEdgesTrunkbasesettingsTemplateParams) (*GetTelephonyProvidersEdgesTrunkbasesettingsTemplateOK, error)
	/*
	   GetTelephonyProvidersEdgesTrunks gets the list of available trunks
	   Trunks are created by assigning trunk base settings to an Edge or Edge Group.
	*/
	GetTelephonyProvidersEdgesTrunks(ctx context.Context, params *GetTelephonyProvidersEdgesTrunksParams) (*GetTelephonyProvidersEdgesTrunksOK, error)
	/*
	   GetTelephonyProvidersEdgesTrunksMetrics gets the metrics for a list of trunks
	*/
	GetTelephonyProvidersEdgesTrunksMetrics(ctx context.Context, params *GetTelephonyProvidersEdgesTrunksMetricsParams) (*GetTelephonyProvidersEdgesTrunksMetricsOK, error)
	/*
	   GetTelephonyProvidersEdgesTrunkswithrecording gets counts of trunks that have recording disabled or enabled
	*/
	GetTelephonyProvidersEdgesTrunkswithrecording(ctx context.Context, params *GetTelephonyProvidersEdgesTrunkswithrecordingParams) (*GetTelephonyProvidersEdgesTrunkswithrecordingOK, error)
	/*
	   PostTelephonyProvidersEdgeDiagnosticNslookup nslookups request command to collect networking related information from an edge for a target IP or host
	*/
	PostTelephonyProvidersEdgeDiagnosticNslookup(ctx context.Context, params *PostTelephonyProvidersEdgeDiagnosticNslookupParams) (*PostTelephonyProvidersEdgeDiagnosticNslookupAccepted, error)
	/*
	   PostTelephonyProvidersEdgeDiagnosticPing pings request command to collect networking related information from an edge for a target IP or host
	*/
	PostTelephonyProvidersEdgeDiagnosticPing(ctx context.Context, params *PostTelephonyProvidersEdgeDiagnosticPingParams) (*PostTelephonyProvidersEdgeDiagnosticPingAccepted, error)
	/*
	   PostTelephonyProvidersEdgeDiagnosticRoute routes request command to collect networking related information from an edge for a target IP or host
	*/
	PostTelephonyProvidersEdgeDiagnosticRoute(ctx context.Context, params *PostTelephonyProvidersEdgeDiagnosticRouteParams) (*PostTelephonyProvidersEdgeDiagnosticRouteAccepted, error)
	/*
	   PostTelephonyProvidersEdgeDiagnosticTracepath tracepaths request command to collect networking related information from an edge for a target IP or host
	*/
	PostTelephonyProvidersEdgeDiagnosticTracepath(ctx context.Context, params *PostTelephonyProvidersEdgeDiagnosticTracepathParams) (*PostTelephonyProvidersEdgeDiagnosticTracepathAccepted, error)
	/*
	   PostTelephonyProvidersEdgeLogicalinterfaces creates an edge logical interface
	   Create
	*/
	PostTelephonyProvidersEdgeLogicalinterfaces(ctx context.Context, params *PostTelephonyProvidersEdgeLogicalinterfacesParams) (*PostTelephonyProvidersEdgeLogicalinterfacesOK, error)
	/*
	   PostTelephonyProvidersEdgeLogsJobUpload requests that the specified file ids be uploaded from the edge
	*/
	PostTelephonyProvidersEdgeLogsJobUpload(ctx context.Context, params *PostTelephonyProvidersEdgeLogsJobUploadParams) (*PostTelephonyProvidersEdgeLogsJobUploadAccepted, error)
	/*
	   PostTelephonyProvidersEdgeLogsJobs creates a job to upload a list of edge logs
	*/
	PostTelephonyProvidersEdgeLogsJobs(ctx context.Context, params *PostTelephonyProvidersEdgeLogsJobsParams) (*PostTelephonyProvidersEdgeLogsJobsAccepted, error)
	/*
	   PostTelephonyProvidersEdgeReboot reboots an edge
	*/
	PostTelephonyProvidersEdgeReboot(ctx context.Context, params *PostTelephonyProvidersEdgeRebootParams) (*PostTelephonyProvidersEdgeRebootOK, error)
	/*
	   PostTelephonyProvidersEdgeSoftwareupdate starts a software update for this edge
	*/
	PostTelephonyProvidersEdgeSoftwareupdate(ctx context.Context, params *PostTelephonyProvidersEdgeSoftwareupdateParams) (*PostTelephonyProvidersEdgeSoftwareupdateOK, error)
	/*
	   PostTelephonyProvidersEdgeStatuscode takes an edge in or out of service
	*/
	PostTelephonyProvidersEdgeStatuscode(ctx context.Context, params *PostTelephonyProvidersEdgeStatuscodeParams) (*PostTelephonyProvidersEdgeStatuscodeOK, error)
	/*
	   PostTelephonyProvidersEdgeUnpair unpairs an edge
	*/
	PostTelephonyProvidersEdgeUnpair(ctx context.Context, params *PostTelephonyProvidersEdgeUnpairParams) (*PostTelephonyProvidersEdgeUnpairOK, error)
	/*
	   PostTelephonyProvidersEdges creates an edge
	*/
	PostTelephonyProvidersEdges(ctx context.Context, params *PostTelephonyProvidersEdgesParams) (*PostTelephonyProvidersEdgesOK, error)
	/*
	   PostTelephonyProvidersEdgesAddressvalidation validates a street address
	*/
	PostTelephonyProvidersEdgesAddressvalidation(ctx context.Context, params *PostTelephonyProvidersEdgesAddressvalidationParams) (*PostTelephonyProvidersEdgesAddressvalidationOK, error)
	/*
	   PostTelephonyProvidersEdgesCertificateauthorities creates a certificate authority
	*/
	PostTelephonyProvidersEdgesCertificateauthorities(ctx context.Context, params *PostTelephonyProvidersEdgesCertificateauthoritiesParams) (*PostTelephonyProvidersEdgesCertificateauthoritiesOK, error)
	/*
	   PostTelephonyProvidersEdgesDidpools creates a new d ID pool
	*/
	PostTelephonyProvidersEdgesDidpools(ctx context.Context, params *PostTelephonyProvidersEdgesDidpoolsParams) (*PostTelephonyProvidersEdgesDidpoolsOK, error)
	/*
	   PostTelephonyProvidersEdgesEdgegroups creates an edge group
	*/
	PostTelephonyProvidersEdgesEdgegroups(ctx context.Context, params *PostTelephonyProvidersEdgesEdgegroupsParams) (*PostTelephonyProvidersEdgesEdgegroupsOK, error)
	/*
	   PostTelephonyProvidersEdgesExtensionpools creates a new extension pool
	*/
	PostTelephonyProvidersEdgesExtensionpools(ctx context.Context, params *PostTelephonyProvidersEdgesExtensionpoolsParams) (*PostTelephonyProvidersEdgesExtensionpoolsOK, error)
	/*
	   PostTelephonyProvidersEdgesOutboundroutes creates outbound rule
	   This route is deprecated, use /telephony/providers/edges/sites/{siteId}/outboundroutes instead.
	*/
	PostTelephonyProvidersEdgesOutboundroutes(ctx context.Context, params *PostTelephonyProvidersEdgesOutboundroutesParams) (*PostTelephonyProvidersEdgesOutboundroutesOK, error)
	/*
	   PostTelephonyProvidersEdgesPhoneReboot reboots a phone
	*/
	PostTelephonyProvidersEdgesPhoneReboot(ctx context.Context, params *PostTelephonyProvidersEdgesPhoneRebootParams) error
	/*
	   PostTelephonyProvidersEdgesPhonebasesettings creates a new phone base settings object
	*/
	PostTelephonyProvidersEdgesPhonebasesettings(ctx context.Context, params *PostTelephonyProvidersEdgesPhonebasesettingsParams) (*PostTelephonyProvidersEdgesPhonebasesettingsOK, error)
	/*
	   PostTelephonyProvidersEdgesPhones creates a new phone
	*/
	PostTelephonyProvidersEdgesPhones(ctx context.Context, params *PostTelephonyProvidersEdgesPhonesParams) (*PostTelephonyProvidersEdgesPhonesOK, error)
	/*
	   PostTelephonyProvidersEdgesPhonesReboot reboots multiple phones
	*/
	PostTelephonyProvidersEdgesPhonesReboot(ctx context.Context, params *PostTelephonyProvidersEdgesPhonesRebootParams) error
	/*
	   PostTelephonyProvidersEdgesSiteOutboundroutes creates outbound route
	*/
	PostTelephonyProvidersEdgesSiteOutboundroutes(ctx context.Context, params *PostTelephonyProvidersEdgesSiteOutboundroutesParams) (*PostTelephonyProvidersEdgesSiteOutboundroutesOK, error)
	/*
	   PostTelephonyProvidersEdgesSiteRebalance triggers the rebalance operation
	*/
	PostTelephonyProvidersEdgesSiteRebalance(ctx context.Context, params *PostTelephonyProvidersEdgesSiteRebalanceParams) (*PostTelephonyProvidersEdgesSiteRebalanceAccepted, error)
	/*
	   PostTelephonyProvidersEdgesSites creates a site
	*/
	PostTelephonyProvidersEdgesSites(ctx context.Context, params *PostTelephonyProvidersEdgesSitesParams) (*PostTelephonyProvidersEdgesSitesOK, error)
	/*
	   PostTelephonyProvidersEdgesTrunkbasesettings creates a trunk base settings object
	*/
	PostTelephonyProvidersEdgesTrunkbasesettings(ctx context.Context, params *PostTelephonyProvidersEdgesTrunkbasesettingsParams) (*PostTelephonyProvidersEdgesTrunkbasesettingsOK, error)
	/*
	   PutTelephonyProvidersEdge updates a edge
	*/
	PutTelephonyProvidersEdge(ctx context.Context, params *PutTelephonyProvidersEdgeParams) (*PutTelephonyProvidersEdgeOK, error)
	/*
	   PutTelephonyProvidersEdgeLine updates a line
	*/
	PutTelephonyProvidersEdgeLine(ctx context.Context, params *PutTelephonyProvidersEdgeLineParams) (*PutTelephonyProvidersEdgeLineOK, error)
	/*
	   PutTelephonyProvidersEdgeLogicalinterface updates an edge logical interface
	*/
	PutTelephonyProvidersEdgeLogicalinterface(ctx context.Context, params *PutTelephonyProvidersEdgeLogicalinterfaceParams) (*PutTelephonyProvidersEdgeLogicalinterfaceOK, error)
	/*
	   PutTelephonyProvidersEdgesCertificateauthority updates a certificate authority
	*/
	PutTelephonyProvidersEdgesCertificateauthority(ctx context.Context, params *PutTelephonyProvidersEdgesCertificateauthorityParams) (*PutTelephonyProvidersEdgesCertificateauthorityOK, error)
	/*
	   PutTelephonyProvidersEdgesDid updates a d ID by ID
	*/
	PutTelephonyProvidersEdgesDid(ctx context.Context, params *PutTelephonyProvidersEdgesDidParams) (*PutTelephonyProvidersEdgesDidOK, error)
	/*
	   PutTelephonyProvidersEdgesDidpool updates a d ID pool by ID
	*/
	PutTelephonyProvidersEdgesDidpool(ctx context.Context, params *PutTelephonyProvidersEdgesDidpoolParams) (*PutTelephonyProvidersEdgesDidpoolOK, error)
	/*
	   PutTelephonyProvidersEdgesEdgegroup updates an edge group
	*/
	PutTelephonyProvidersEdgesEdgegroup(ctx context.Context, params *PutTelephonyProvidersEdgesEdgegroupParams) (*PutTelephonyProvidersEdgesEdgegroupOK, error)
	/*
	   PutTelephonyProvidersEdgesEdgegroupEdgetrunkbase updates the edge trunk base associated with the edge group
	*/
	PutTelephonyProvidersEdgesEdgegroupEdgetrunkbase(ctx context.Context, params *PutTelephonyProvidersEdgesEdgegroupEdgetrunkbaseParams) (*PutTelephonyProvidersEdgesEdgegroupEdgetrunkbaseOK, error)
	/*
	   PutTelephonyProvidersEdgesExtension updates an extension by ID
	*/
	PutTelephonyProvidersEdgesExtension(ctx context.Context, params *PutTelephonyProvidersEdgesExtensionParams) (*PutTelephonyProvidersEdgesExtensionOK, error)
	/*
	   PutTelephonyProvidersEdgesExtensionpool updates an extension pool by ID
	*/
	PutTelephonyProvidersEdgesExtensionpool(ctx context.Context, params *PutTelephonyProvidersEdgesExtensionpoolParams) (*PutTelephonyProvidersEdgesExtensionpoolOK, error)
	/*
	   PutTelephonyProvidersEdgesOutboundroute updates outbound route
	   This route is deprecated, use /telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId} instead.
	*/
	PutTelephonyProvidersEdgesOutboundroute(ctx context.Context, params *PutTelephonyProvidersEdgesOutboundrouteParams) (*PutTelephonyProvidersEdgesOutboundrouteOK, error)
	/*
	   PutTelephonyProvidersEdgesPhone updates a phone by ID
	*/
	PutTelephonyProvidersEdgesPhone(ctx context.Context, params *PutTelephonyProvidersEdgesPhoneParams) (*PutTelephonyProvidersEdgesPhoneOK, error)
	/*
	   PutTelephonyProvidersEdgesPhonebasesetting updates a phone base settings by ID
	*/
	PutTelephonyProvidersEdgesPhonebasesetting(ctx context.Context, params *PutTelephonyProvidersEdgesPhonebasesettingParams) (*PutTelephonyProvidersEdgesPhonebasesettingOK, error)
	/*
	   PutTelephonyProvidersEdgesSite updates a site by ID
	*/
	PutTelephonyProvidersEdgesSite(ctx context.Context, params *PutTelephonyProvidersEdgesSiteParams) (*PutTelephonyProvidersEdgesSiteOK, error)
	/*
	   PutTelephonyProvidersEdgesSiteNumberplans updates the list of number plans a user can update maximum 200 number plans at a time
	*/
	PutTelephonyProvidersEdgesSiteNumberplans(ctx context.Context, params *PutTelephonyProvidersEdgesSiteNumberplansParams) (*PutTelephonyProvidersEdgesSiteNumberplansOK, error)
	/*
	   PutTelephonyProvidersEdgesSiteOutboundroute updates outbound route
	*/
	PutTelephonyProvidersEdgesSiteOutboundroute(ctx context.Context, params *PutTelephonyProvidersEdgesSiteOutboundrouteParams) (*PutTelephonyProvidersEdgesSiteOutboundrouteOK, error)
	/*
	   PutTelephonyProvidersEdgesTrunkbasesetting updates a trunk base settings object by ID
	*/
	PutTelephonyProvidersEdgesTrunkbasesetting(ctx context.Context, params *PutTelephonyProvidersEdgesTrunkbasesettingParams) (*PutTelephonyProvidersEdgesTrunkbasesettingOK, error)
}

// New creates a new telephony providers edge API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for telephony providers edge API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteTelephonyProvidersEdge deletes a edge
*/
func (a *Client) DeleteTelephonyProvidersEdge(ctx context.Context, params *DeleteTelephonyProvidersEdgeParams) (*DeleteTelephonyProvidersEdgeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTelephonyProvidersEdge",
		Method:             "DELETE",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTelephonyProvidersEdgeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTelephonyProvidersEdgeOK), nil

}

/*
DeleteTelephonyProvidersEdgeLogicalinterface deletes an edge logical interface
*/
func (a *Client) DeleteTelephonyProvidersEdgeLogicalinterface(ctx context.Context, params *DeleteTelephonyProvidersEdgeLogicalinterfaceParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTelephonyProvidersEdgeLogicalinterface",
		Method:             "DELETE",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces/{interfaceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTelephonyProvidersEdgeLogicalinterfaceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteTelephonyProvidersEdgeSoftwareupdate cancels any in progress update for this edge
*/
func (a *Client) DeleteTelephonyProvidersEdgeSoftwareupdate(ctx context.Context, params *DeleteTelephonyProvidersEdgeSoftwareupdateParams) (*DeleteTelephonyProvidersEdgeSoftwareupdateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTelephonyProvidersEdgeSoftwareupdate",
		Method:             "DELETE",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/softwareupdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTelephonyProvidersEdgeSoftwareupdateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTelephonyProvidersEdgeSoftwareupdateOK), nil

}

/*
DeleteTelephonyProvidersEdgesCertificateauthority deletes a certificate authority
*/
func (a *Client) DeleteTelephonyProvidersEdgesCertificateauthority(ctx context.Context, params *DeleteTelephonyProvidersEdgesCertificateauthorityParams) (*DeleteTelephonyProvidersEdgesCertificateauthorityOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTelephonyProvidersEdgesCertificateauthority",
		Method:             "DELETE",
		PathPattern:        "/api/v2/telephony/providers/edges/certificateauthorities/{certificateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTelephonyProvidersEdgesCertificateauthorityReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTelephonyProvidersEdgesCertificateauthorityOK), nil

}

/*
DeleteTelephonyProvidersEdgesDidpool deletes a d ID pool by ID
*/
func (a *Client) DeleteTelephonyProvidersEdgesDidpool(ctx context.Context, params *DeleteTelephonyProvidersEdgesDidpoolParams) (*DeleteTelephonyProvidersEdgesDidpoolOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTelephonyProvidersEdgesDidpool",
		Method:             "DELETE",
		PathPattern:        "/api/v2/telephony/providers/edges/didpools/{didPoolId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTelephonyProvidersEdgesDidpoolReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTelephonyProvidersEdgesDidpoolOK), nil

}

/*
DeleteTelephonyProvidersEdgesEdgegroup deletes an edge group
*/
func (a *Client) DeleteTelephonyProvidersEdgesEdgegroup(ctx context.Context, params *DeleteTelephonyProvidersEdgesEdgegroupParams) (*DeleteTelephonyProvidersEdgesEdgegroupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTelephonyProvidersEdgesEdgegroup",
		Method:             "DELETE",
		PathPattern:        "/api/v2/telephony/providers/edges/edgegroups/{edgeGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTelephonyProvidersEdgesEdgegroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTelephonyProvidersEdgesEdgegroupOK), nil

}

/*
DeleteTelephonyProvidersEdgesExtensionpool deletes an extension pool by ID
*/
func (a *Client) DeleteTelephonyProvidersEdgesExtensionpool(ctx context.Context, params *DeleteTelephonyProvidersEdgesExtensionpoolParams) (*DeleteTelephonyProvidersEdgesExtensionpoolOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTelephonyProvidersEdgesExtensionpool",
		Method:             "DELETE",
		PathPattern:        "/api/v2/telephony/providers/edges/extensionpools/{extensionPoolId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTelephonyProvidersEdgesExtensionpoolReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTelephonyProvidersEdgesExtensionpoolOK), nil

}

/*
DeleteTelephonyProvidersEdgesOutboundroute deletes outbound route

This route is deprecated, use /telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId} instead.
*/
func (a *Client) DeleteTelephonyProvidersEdgesOutboundroute(ctx context.Context, params *DeleteTelephonyProvidersEdgesOutboundrouteParams) (*DeleteTelephonyProvidersEdgesOutboundrouteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTelephonyProvidersEdgesOutboundroute",
		Method:             "DELETE",
		PathPattern:        "/api/v2/telephony/providers/edges/outboundroutes/{outboundRouteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTelephonyProvidersEdgesOutboundrouteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTelephonyProvidersEdgesOutboundrouteOK), nil

}

/*
DeleteTelephonyProvidersEdgesPhone deletes a phone by ID
*/
func (a *Client) DeleteTelephonyProvidersEdgesPhone(ctx context.Context, params *DeleteTelephonyProvidersEdgesPhoneParams) (*DeleteTelephonyProvidersEdgesPhoneOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTelephonyProvidersEdgesPhone",
		Method:             "DELETE",
		PathPattern:        "/api/v2/telephony/providers/edges/phones/{phoneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTelephonyProvidersEdgesPhoneReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTelephonyProvidersEdgesPhoneOK), nil

}

/*
DeleteTelephonyProvidersEdgesPhonebasesetting deletes a phone base settings by ID
*/
func (a *Client) DeleteTelephonyProvidersEdgesPhonebasesetting(ctx context.Context, params *DeleteTelephonyProvidersEdgesPhonebasesettingParams) (*DeleteTelephonyProvidersEdgesPhonebasesettingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTelephonyProvidersEdgesPhonebasesetting",
		Method:             "DELETE",
		PathPattern:        "/api/v2/telephony/providers/edges/phonebasesettings/{phoneBaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTelephonyProvidersEdgesPhonebasesettingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTelephonyProvidersEdgesPhonebasesettingOK), nil

}

/*
DeleteTelephonyProvidersEdgesSite deletes a site by ID
*/
func (a *Client) DeleteTelephonyProvidersEdgesSite(ctx context.Context, params *DeleteTelephonyProvidersEdgesSiteParams) (*DeleteTelephonyProvidersEdgesSiteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTelephonyProvidersEdgesSite",
		Method:             "DELETE",
		PathPattern:        "/api/v2/telephony/providers/edges/sites/{siteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTelephonyProvidersEdgesSiteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTelephonyProvidersEdgesSiteOK), nil

}

/*
DeleteTelephonyProvidersEdgesSiteOutboundroute deletes outbound route
*/
func (a *Client) DeleteTelephonyProvidersEdgesSiteOutboundroute(ctx context.Context, params *DeleteTelephonyProvidersEdgesSiteOutboundrouteParams) (*DeleteTelephonyProvidersEdgesSiteOutboundrouteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTelephonyProvidersEdgesSiteOutboundroute",
		Method:             "DELETE",
		PathPattern:        "/api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTelephonyProvidersEdgesSiteOutboundrouteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTelephonyProvidersEdgesSiteOutboundrouteOK), nil

}

/*
DeleteTelephonyProvidersEdgesTrunkbasesetting deletes a trunk base settings object by ID
*/
func (a *Client) DeleteTelephonyProvidersEdgesTrunkbasesetting(ctx context.Context, params *DeleteTelephonyProvidersEdgesTrunkbasesettingParams) (*DeleteTelephonyProvidersEdgesTrunkbasesettingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTelephonyProvidersEdgesTrunkbasesetting",
		Method:             "DELETE",
		PathPattern:        "/api/v2/telephony/providers/edges/trunkbasesettings/{trunkBaseSettingsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTelephonyProvidersEdgesTrunkbasesettingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTelephonyProvidersEdgesTrunkbasesettingOK), nil

}

/*
GetConfigurationSchemasEdgesVnext lists available schema categories deprecated
*/
func (a *Client) GetConfigurationSchemasEdgesVnext(ctx context.Context, params *GetConfigurationSchemasEdgesVnextParams) (*GetConfigurationSchemasEdgesVnextOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfigurationSchemasEdgesVnext",
		Method:             "GET",
		PathPattern:        "/api/v2/configuration/schemas/edges/vnext",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConfigurationSchemasEdgesVnextReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConfigurationSchemasEdgesVnextOK), nil

}

/*
GetConfigurationSchemasEdgesVnextSchemaCategory lists schemas of a specific category deprecated
*/
func (a *Client) GetConfigurationSchemasEdgesVnextSchemaCategory(ctx context.Context, params *GetConfigurationSchemasEdgesVnextSchemaCategoryParams) (*GetConfigurationSchemasEdgesVnextSchemaCategoryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfigurationSchemasEdgesVnextSchemaCategory",
		Method:             "GET",
		PathPattern:        "/api/v2/configuration/schemas/edges/vnext/{schemaCategory}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConfigurationSchemasEdgesVnextSchemaCategoryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConfigurationSchemasEdgesVnextSchemaCategoryOK), nil

}

/*
GetConfigurationSchemasEdgesVnextSchemaCategorySchemaType lists schemas of a specific category deprecated
*/
func (a *Client) GetConfigurationSchemasEdgesVnextSchemaCategorySchemaType(ctx context.Context, params *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeParams) (*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfigurationSchemasEdgesVnextSchemaCategorySchemaType",
		Method:             "GET",
		PathPattern:        "/api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeOK), nil

}

/*
GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaID gets a json schema deprecated
*/
func (a *Client) GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaID(ctx context.Context, params *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDParams) (*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaId",
		Method:             "GET",
		PathPattern:        "/api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDOK), nil

}

/*
GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDExtensionTypeMetadataID gets metadata for a schema deprecated
*/
func (a *Client) GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDExtensionTypeMetadataID(ctx context.Context, params *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDExtensionTypeMetadataIDParams) (*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDExtensionTypeMetadataIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataId",
		Method:             "GET",
		PathPattern:        "/api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}/{extensionType}/{metadataId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDExtensionTypeMetadataIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDExtensionTypeMetadataIDOK), nil

}

/*
GetTelephonyProvidersEdge gets edge
*/
func (a *Client) GetTelephonyProvidersEdge(ctx context.Context, params *GetTelephonyProvidersEdgeParams) (*GetTelephonyProvidersEdgeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdge",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgeOK), nil

}

/*
GetTelephonyProvidersEdgeDiagnosticNslookup gets networking related information from an edge for a target IP or host
*/
func (a *Client) GetTelephonyProvidersEdgeDiagnosticNslookup(ctx context.Context, params *GetTelephonyProvidersEdgeDiagnosticNslookupParams) (*GetTelephonyProvidersEdgeDiagnosticNslookupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgeDiagnosticNslookup",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/diagnostic/nslookup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgeDiagnosticNslookupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgeDiagnosticNslookupOK), nil

}

/*
GetTelephonyProvidersEdgeDiagnosticPing gets networking related information from an edge for a target IP or host
*/
func (a *Client) GetTelephonyProvidersEdgeDiagnosticPing(ctx context.Context, params *GetTelephonyProvidersEdgeDiagnosticPingParams) (*GetTelephonyProvidersEdgeDiagnosticPingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgeDiagnosticPing",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/diagnostic/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgeDiagnosticPingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgeDiagnosticPingOK), nil

}

/*
GetTelephonyProvidersEdgeDiagnosticRoute gets networking related information from an edge for a target IP or host
*/
func (a *Client) GetTelephonyProvidersEdgeDiagnosticRoute(ctx context.Context, params *GetTelephonyProvidersEdgeDiagnosticRouteParams) (*GetTelephonyProvidersEdgeDiagnosticRouteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgeDiagnosticRoute",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/diagnostic/route",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgeDiagnosticRouteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgeDiagnosticRouteOK), nil

}

/*
GetTelephonyProvidersEdgeDiagnosticTracepath gets networking related information from an edge for a target IP or host
*/
func (a *Client) GetTelephonyProvidersEdgeDiagnosticTracepath(ctx context.Context, params *GetTelephonyProvidersEdgeDiagnosticTracepathParams) (*GetTelephonyProvidersEdgeDiagnosticTracepathOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgeDiagnosticTracepath",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/diagnostic/tracepath",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgeDiagnosticTracepathReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgeDiagnosticTracepathOK), nil

}

/*
GetTelephonyProvidersEdgeLine gets line
*/
func (a *Client) GetTelephonyProvidersEdgeLine(ctx context.Context, params *GetTelephonyProvidersEdgeLineParams) (*GetTelephonyProvidersEdgeLineOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgeLine",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/lines/{lineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgeLineReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgeLineOK), nil

}

/*
GetTelephonyProvidersEdgeLines gets the list of lines
*/
func (a *Client) GetTelephonyProvidersEdgeLines(ctx context.Context, params *GetTelephonyProvidersEdgeLinesParams) (*GetTelephonyProvidersEdgeLinesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgeLines",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/lines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgeLinesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgeLinesOK), nil

}

/*
GetTelephonyProvidersEdgeLogicalinterface gets an edge logical interface
*/
func (a *Client) GetTelephonyProvidersEdgeLogicalinterface(ctx context.Context, params *GetTelephonyProvidersEdgeLogicalinterfaceParams) (*GetTelephonyProvidersEdgeLogicalinterfaceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgeLogicalinterface",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces/{interfaceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgeLogicalinterfaceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgeLogicalinterfaceOK), nil

}

/*
GetTelephonyProvidersEdgeLogicalinterfaces gets edge logical interfaces

Retrieve a list of all configured logical interfaces from a specific edge.
*/
func (a *Client) GetTelephonyProvidersEdgeLogicalinterfaces(ctx context.Context, params *GetTelephonyProvidersEdgeLogicalinterfacesParams) (*GetTelephonyProvidersEdgeLogicalinterfacesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgeLogicalinterfaces",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgeLogicalinterfacesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgeLogicalinterfacesOK), nil

}

/*
GetTelephonyProvidersEdgeLogsJob gets an edge logs job
*/
func (a *Client) GetTelephonyProvidersEdgeLogsJob(ctx context.Context, params *GetTelephonyProvidersEdgeLogsJobParams) (*GetTelephonyProvidersEdgeLogsJobOK, *GetTelephonyProvidersEdgeLogsJobAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgeLogsJob",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/logs/jobs/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgeLogsJobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetTelephonyProvidersEdgeLogsJobOK:
		return value, nil, nil
	case *GetTelephonyProvidersEdgeLogsJobAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetTelephonyProvidersEdgeMetrics gets the edge metrics
*/
func (a *Client) GetTelephonyProvidersEdgeMetrics(ctx context.Context, params *GetTelephonyProvidersEdgeMetricsParams) (*GetTelephonyProvidersEdgeMetricsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgeMetrics",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgeMetricsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgeMetricsOK), nil

}

/*
GetTelephonyProvidersEdgePhysicalinterface gets edge physical interface

Retrieve a physical interface from a specific edge.
*/
func (a *Client) GetTelephonyProvidersEdgePhysicalinterface(ctx context.Context, params *GetTelephonyProvidersEdgePhysicalinterfaceParams) (*GetTelephonyProvidersEdgePhysicalinterfaceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgePhysicalinterface",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/physicalinterfaces/{interfaceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgePhysicalinterfaceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgePhysicalinterfaceOK), nil

}

/*
GetTelephonyProvidersEdgePhysicalinterfaces retrieves a list of all configured physical interfaces from a specific edge
*/
func (a *Client) GetTelephonyProvidersEdgePhysicalinterfaces(ctx context.Context, params *GetTelephonyProvidersEdgePhysicalinterfacesParams) (*GetTelephonyProvidersEdgePhysicalinterfacesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgePhysicalinterfaces",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/physicalinterfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgePhysicalinterfacesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgePhysicalinterfacesOK), nil

}

/*
GetTelephonyProvidersEdgeSetuppackage gets the setup package for a locally deployed edge device this is needed to complete the setup process for the virtual edge
*/
func (a *Client) GetTelephonyProvidersEdgeSetuppackage(ctx context.Context, params *GetTelephonyProvidersEdgeSetuppackageParams) (*GetTelephonyProvidersEdgeSetuppackageOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgeSetuppackage",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/setuppackage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgeSetuppackageReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgeSetuppackageOK), nil

}

/*
GetTelephonyProvidersEdgeSoftwareupdate gets software update status information about any edge
*/
func (a *Client) GetTelephonyProvidersEdgeSoftwareupdate(ctx context.Context, params *GetTelephonyProvidersEdgeSoftwareupdateParams) (*GetTelephonyProvidersEdgeSoftwareupdateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgeSoftwareupdate",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/softwareupdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgeSoftwareupdateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgeSoftwareupdateOK), nil

}

/*
GetTelephonyProvidersEdgeSoftwareversions gets all the available software versions for this edge
*/
func (a *Client) GetTelephonyProvidersEdgeSoftwareversions(ctx context.Context, params *GetTelephonyProvidersEdgeSoftwareversionsParams) (*GetTelephonyProvidersEdgeSoftwareversionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgeSoftwareversions",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/softwareversions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgeSoftwareversionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgeSoftwareversionsOK), nil

}

/*
GetTelephonyProvidersEdgeTrunks gets the list of available trunks for the given edge

Trunks are created by assigning trunk base settings to an Edge or Edge Group.
*/
func (a *Client) GetTelephonyProvidersEdgeTrunks(ctx context.Context, params *GetTelephonyProvidersEdgeTrunksParams) (*GetTelephonyProvidersEdgeTrunksOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgeTrunks",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/trunks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgeTrunksReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgeTrunksOK), nil

}

/*
GetTelephonyProvidersEdges gets the list of edges
*/
func (a *Client) GetTelephonyProvidersEdges(ctx context.Context, params *GetTelephonyProvidersEdgesParams) (*GetTelephonyProvidersEdgesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdges",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesOK), nil

}

/*
GetTelephonyProvidersEdgesAvailablelanguages gets the list of available languages
*/
func (a *Client) GetTelephonyProvidersEdgesAvailablelanguages(ctx context.Context, params *GetTelephonyProvidersEdgesAvailablelanguagesParams) (*GetTelephonyProvidersEdgesAvailablelanguagesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesAvailablelanguages",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/availablelanguages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesAvailablelanguagesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesAvailablelanguagesOK), nil

}

/*
GetTelephonyProvidersEdgesCertificateauthorities gets the list of certificate authorities
*/
func (a *Client) GetTelephonyProvidersEdgesCertificateauthorities(ctx context.Context, params *GetTelephonyProvidersEdgesCertificateauthoritiesParams) (*GetTelephonyProvidersEdgesCertificateauthoritiesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesCertificateauthorities",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/certificateauthorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesCertificateauthoritiesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesCertificateauthoritiesOK), nil

}

/*
GetTelephonyProvidersEdgesCertificateauthority gets a certificate authority
*/
func (a *Client) GetTelephonyProvidersEdgesCertificateauthority(ctx context.Context, params *GetTelephonyProvidersEdgesCertificateauthorityParams) (*GetTelephonyProvidersEdgesCertificateauthorityOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesCertificateauthority",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/certificateauthorities/{certificateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesCertificateauthorityReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesCertificateauthorityOK), nil

}

/*
GetTelephonyProvidersEdgesDid gets a d ID by ID
*/
func (a *Client) GetTelephonyProvidersEdgesDid(ctx context.Context, params *GetTelephonyProvidersEdgesDidParams) (*GetTelephonyProvidersEdgesDidOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesDid",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/dids/{didId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesDidReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesDidOK), nil

}

/*
GetTelephonyProvidersEdgesDidpool gets a d ID pool by ID
*/
func (a *Client) GetTelephonyProvidersEdgesDidpool(ctx context.Context, params *GetTelephonyProvidersEdgesDidpoolParams) (*GetTelephonyProvidersEdgesDidpoolOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesDidpool",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/didpools/{didPoolId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesDidpoolReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesDidpoolOK), nil

}

/*
GetTelephonyProvidersEdgesDidpools gets a listing of d ID pools
*/
func (a *Client) GetTelephonyProvidersEdgesDidpools(ctx context.Context, params *GetTelephonyProvidersEdgesDidpoolsParams) (*GetTelephonyProvidersEdgesDidpoolsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesDidpools",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/didpools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesDidpoolsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesDidpoolsOK), nil

}

/*
GetTelephonyProvidersEdgesDidpoolsDids gets a listing of unassigned and or assigned numbers in a set of d ID pools
*/
func (a *Client) GetTelephonyProvidersEdgesDidpoolsDids(ctx context.Context, params *GetTelephonyProvidersEdgesDidpoolsDidsParams) (*GetTelephonyProvidersEdgesDidpoolsDidsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesDidpoolsDids",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/didpools/dids",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesDidpoolsDidsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesDidpoolsDidsOK), nil

}

/*
GetTelephonyProvidersEdgesDids gets a listing of d i ds
*/
func (a *Client) GetTelephonyProvidersEdgesDids(ctx context.Context, params *GetTelephonyProvidersEdgesDidsParams) (*GetTelephonyProvidersEdgesDidsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesDids",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/dids",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesDidsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesDidsOK), nil

}

/*
GetTelephonyProvidersEdgesEdgegroup gets edge group
*/
func (a *Client) GetTelephonyProvidersEdgesEdgegroup(ctx context.Context, params *GetTelephonyProvidersEdgesEdgegroupParams) (*GetTelephonyProvidersEdgesEdgegroupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesEdgegroup",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/edgegroups/{edgeGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesEdgegroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesEdgegroupOK), nil

}

/*
GetTelephonyProvidersEdgesEdgegroupEdgetrunkbase gets the edge trunk base associated with the edge group
*/
func (a *Client) GetTelephonyProvidersEdgesEdgegroupEdgetrunkbase(ctx context.Context, params *GetTelephonyProvidersEdgesEdgegroupEdgetrunkbaseParams) (*GetTelephonyProvidersEdgesEdgegroupEdgetrunkbaseOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesEdgegroupEdgetrunkbase",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/edgegroups/{edgegroupId}/edgetrunkbases/{edgetrunkbaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesEdgegroupEdgetrunkbaseReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesEdgegroupEdgetrunkbaseOK), nil

}

/*
GetTelephonyProvidersEdgesEdgegroups gets the list of edge groups
*/
func (a *Client) GetTelephonyProvidersEdgesEdgegroups(ctx context.Context, params *GetTelephonyProvidersEdgesEdgegroupsParams) (*GetTelephonyProvidersEdgesEdgegroupsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesEdgegroups",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/edgegroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesEdgegroupsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesEdgegroupsOK), nil

}

/*
GetTelephonyProvidersEdgesEdgeversionreport gets the edge version report

The report will not have consistent data about the edge version(s) until all edges have been reset.
*/
func (a *Client) GetTelephonyProvidersEdgesEdgeversionreport(ctx context.Context, params *GetTelephonyProvidersEdgesEdgeversionreportParams) (*GetTelephonyProvidersEdgesEdgeversionreportOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesEdgeversionreport",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/edgeversionreport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesEdgeversionreportReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesEdgeversionreportOK), nil

}

/*
GetTelephonyProvidersEdgesExtension gets an extension by ID
*/
func (a *Client) GetTelephonyProvidersEdgesExtension(ctx context.Context, params *GetTelephonyProvidersEdgesExtensionParams) (*GetTelephonyProvidersEdgesExtensionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesExtension",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/extensions/{extensionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesExtensionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesExtensionOK), nil

}

/*
GetTelephonyProvidersEdgesExtensionpool gets an extension pool by ID
*/
func (a *Client) GetTelephonyProvidersEdgesExtensionpool(ctx context.Context, params *GetTelephonyProvidersEdgesExtensionpoolParams) (*GetTelephonyProvidersEdgesExtensionpoolOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesExtensionpool",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/extensionpools/{extensionPoolId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesExtensionpoolReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesExtensionpoolOK), nil

}

/*
GetTelephonyProvidersEdgesExtensionpools gets a listing of extension pools
*/
func (a *Client) GetTelephonyProvidersEdgesExtensionpools(ctx context.Context, params *GetTelephonyProvidersEdgesExtensionpoolsParams) (*GetTelephonyProvidersEdgesExtensionpoolsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesExtensionpools",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/extensionpools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesExtensionpoolsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesExtensionpoolsOK), nil

}

/*
GetTelephonyProvidersEdgesExtensions gets a listing of extensions
*/
func (a *Client) GetTelephonyProvidersEdgesExtensions(ctx context.Context, params *GetTelephonyProvidersEdgesExtensionsParams) (*GetTelephonyProvidersEdgesExtensionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesExtensions",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/extensions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesExtensionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesExtensionsOK), nil

}

/*
GetTelephonyProvidersEdgesLine gets a line by ID
*/
func (a *Client) GetTelephonyProvidersEdgesLine(ctx context.Context, params *GetTelephonyProvidersEdgesLineParams) (*GetTelephonyProvidersEdgesLineOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesLine",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/lines/{lineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesLineReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesLineOK), nil

}

/*
GetTelephonyProvidersEdgesLinebasesetting gets a line base settings object by ID
*/
func (a *Client) GetTelephonyProvidersEdgesLinebasesetting(ctx context.Context, params *GetTelephonyProvidersEdgesLinebasesettingParams) (*GetTelephonyProvidersEdgesLinebasesettingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesLinebasesetting",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/linebasesettings/{lineBaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesLinebasesettingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesLinebasesettingOK), nil

}

/*
GetTelephonyProvidersEdgesLinebasesettings gets a listing of line base settings objects
*/
func (a *Client) GetTelephonyProvidersEdgesLinebasesettings(ctx context.Context, params *GetTelephonyProvidersEdgesLinebasesettingsParams) (*GetTelephonyProvidersEdgesLinebasesettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesLinebasesettings",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/linebasesettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesLinebasesettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesLinebasesettingsOK), nil

}

/*
GetTelephonyProvidersEdgesLines gets a list of lines
*/
func (a *Client) GetTelephonyProvidersEdgesLines(ctx context.Context, params *GetTelephonyProvidersEdgesLinesParams) (*GetTelephonyProvidersEdgesLinesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesLines",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/lines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesLinesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesLinesOK), nil

}

/*
GetTelephonyProvidersEdgesLinesTemplate gets a line instance template based on a line base settings object this object can then be modified and saved as a new line instance
*/
func (a *Client) GetTelephonyProvidersEdgesLinesTemplate(ctx context.Context, params *GetTelephonyProvidersEdgesLinesTemplateParams) (*GetTelephonyProvidersEdgesLinesTemplateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesLinesTemplate",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/lines/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesLinesTemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesLinesTemplateOK), nil

}

/*
GetTelephonyProvidersEdgesLogicalinterfaces gets edge logical interfaces

Retrieve the configured logical interfaces for a list edges. Only 100 edges can be requested at a time.
*/
func (a *Client) GetTelephonyProvidersEdgesLogicalinterfaces(ctx context.Context, params *GetTelephonyProvidersEdgesLogicalinterfacesParams) (*GetTelephonyProvidersEdgesLogicalinterfacesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesLogicalinterfaces",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/logicalinterfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesLogicalinterfacesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesLogicalinterfacesOK), nil

}

/*
GetTelephonyProvidersEdgesMetrics gets the metrics for a list of edges
*/
func (a *Client) GetTelephonyProvidersEdgesMetrics(ctx context.Context, params *GetTelephonyProvidersEdgesMetricsParams) (*GetTelephonyProvidersEdgesMetricsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesMetrics",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesMetricsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesMetricsOK), nil

}

/*
GetTelephonyProvidersEdgesOutboundroute gets outbound route

This route is deprecated, use /telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId} instead.
*/
func (a *Client) GetTelephonyProvidersEdgesOutboundroute(ctx context.Context, params *GetTelephonyProvidersEdgesOutboundrouteParams) (*GetTelephonyProvidersEdgesOutboundrouteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesOutboundroute",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/outboundroutes/{outboundRouteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesOutboundrouteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesOutboundrouteOK), nil

}

/*
GetTelephonyProvidersEdgesOutboundroutes gets outbound routes
*/
func (a *Client) GetTelephonyProvidersEdgesOutboundroutes(ctx context.Context, params *GetTelephonyProvidersEdgesOutboundroutesParams) (*GetTelephonyProvidersEdgesOutboundroutesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesOutboundroutes",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/outboundroutes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesOutboundroutesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesOutboundroutesOK), nil

}

/*
GetTelephonyProvidersEdgesPhone gets a phone by ID
*/
func (a *Client) GetTelephonyProvidersEdgesPhone(ctx context.Context, params *GetTelephonyProvidersEdgesPhoneParams) (*GetTelephonyProvidersEdgesPhoneOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesPhone",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/phones/{phoneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesPhoneReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesPhoneOK), nil

}

/*
GetTelephonyProvidersEdgesPhonebasesetting gets a phone base settings object by ID
*/
func (a *Client) GetTelephonyProvidersEdgesPhonebasesetting(ctx context.Context, params *GetTelephonyProvidersEdgesPhonebasesettingParams) (*GetTelephonyProvidersEdgesPhonebasesettingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesPhonebasesetting",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/phonebasesettings/{phoneBaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesPhonebasesettingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesPhonebasesettingOK), nil

}

/*
GetTelephonyProvidersEdgesPhonebasesettings gets a list of phone base settings objects
*/
func (a *Client) GetTelephonyProvidersEdgesPhonebasesettings(ctx context.Context, params *GetTelephonyProvidersEdgesPhonebasesettingsParams) (*GetTelephonyProvidersEdgesPhonebasesettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesPhonebasesettings",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/phonebasesettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesPhonebasesettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesPhonebasesettingsOK), nil

}

/*
GetTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases gets a list of available makes and models to create a new phone base settings
*/
func (a *Client) GetTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases(ctx context.Context, params *GetTelephonyProvidersEdgesPhonebasesettingsAvailablemetabasesParams) (*GetTelephonyProvidersEdgesPhonebasesettingsAvailablemetabasesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/phonebasesettings/availablemetabases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesPhonebasesettingsAvailablemetabasesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesPhonebasesettingsAvailablemetabasesOK), nil

}

/*
GetTelephonyProvidersEdgesPhonebasesettingsTemplate gets a phone base settings instance template from a given make and model this object can then be modified and saved as a new phone base settings instance
*/
func (a *Client) GetTelephonyProvidersEdgesPhonebasesettingsTemplate(ctx context.Context, params *GetTelephonyProvidersEdgesPhonebasesettingsTemplateParams) (*GetTelephonyProvidersEdgesPhonebasesettingsTemplateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesPhonebasesettingsTemplate",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/phonebasesettings/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesPhonebasesettingsTemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesPhonebasesettingsTemplateOK), nil

}

/*
GetTelephonyProvidersEdgesPhones gets a list of phone instances
*/
func (a *Client) GetTelephonyProvidersEdgesPhones(ctx context.Context, params *GetTelephonyProvidersEdgesPhonesParams) (*GetTelephonyProvidersEdgesPhonesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesPhones",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/phones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesPhonesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesPhonesOK), nil

}

/*
GetTelephonyProvidersEdgesPhonesTemplate gets a phone instance template based on a phone base settings object this object can then be modified and saved as a new phone instance
*/
func (a *Client) GetTelephonyProvidersEdgesPhonesTemplate(ctx context.Context, params *GetTelephonyProvidersEdgesPhonesTemplateParams) (*GetTelephonyProvidersEdgesPhonesTemplateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesPhonesTemplate",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/phones/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesPhonesTemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesPhonesTemplateOK), nil

}

/*
GetTelephonyProvidersEdgesPhysicalinterfaces gets physical interfaces for edges

Retrieves a list of all configured physical interfaces for a list of edges. Only 100 edges can be requested at a time.
*/
func (a *Client) GetTelephonyProvidersEdgesPhysicalinterfaces(ctx context.Context, params *GetTelephonyProvidersEdgesPhysicalinterfacesParams) (*GetTelephonyProvidersEdgesPhysicalinterfacesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesPhysicalinterfaces",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/physicalinterfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesPhysicalinterfacesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesPhysicalinterfacesOK), nil

}

/*
GetTelephonyProvidersEdgesSite gets a site by ID
*/
func (a *Client) GetTelephonyProvidersEdgesSite(ctx context.Context, params *GetTelephonyProvidersEdgesSiteParams) (*GetTelephonyProvidersEdgesSiteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesSite",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/sites/{siteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesSiteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesSiteOK), nil

}

/*
GetTelephonyProvidersEdgesSiteNumberplan gets a number plan by ID
*/
func (a *Client) GetTelephonyProvidersEdgesSiteNumberplan(ctx context.Context, params *GetTelephonyProvidersEdgesSiteNumberplanParams) (*GetTelephonyProvidersEdgesSiteNumberplanOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesSiteNumberplan",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/sites/{siteId}/numberplans/{numberPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesSiteNumberplanReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesSiteNumberplanOK), nil

}

/*
GetTelephonyProvidersEdgesSiteNumberplans gets the list of number plans for this site only fetches the first 200 records
*/
func (a *Client) GetTelephonyProvidersEdgesSiteNumberplans(ctx context.Context, params *GetTelephonyProvidersEdgesSiteNumberplansParams) (*GetTelephonyProvidersEdgesSiteNumberplansOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesSiteNumberplans",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/sites/{siteId}/numberplans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesSiteNumberplansReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesSiteNumberplansOK), nil

}

/*
GetTelephonyProvidersEdgesSiteNumberplansClassifications gets a list of classifications for this site
*/
func (a *Client) GetTelephonyProvidersEdgesSiteNumberplansClassifications(ctx context.Context, params *GetTelephonyProvidersEdgesSiteNumberplansClassificationsParams) (*GetTelephonyProvidersEdgesSiteNumberplansClassificationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesSiteNumberplansClassifications",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/sites/{siteId}/numberplans/classifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesSiteNumberplansClassificationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesSiteNumberplansClassificationsOK), nil

}

/*
GetTelephonyProvidersEdgesSiteOutboundroute gets an outbound route
*/
func (a *Client) GetTelephonyProvidersEdgesSiteOutboundroute(ctx context.Context, params *GetTelephonyProvidersEdgesSiteOutboundrouteParams) (*GetTelephonyProvidersEdgesSiteOutboundrouteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesSiteOutboundroute",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesSiteOutboundrouteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesSiteOutboundrouteOK), nil

}

/*
GetTelephonyProvidersEdgesSiteOutboundroutes gets outbound routes
*/
func (a *Client) GetTelephonyProvidersEdgesSiteOutboundroutes(ctx context.Context, params *GetTelephonyProvidersEdgesSiteOutboundroutesParams) (*GetTelephonyProvidersEdgesSiteOutboundroutesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesSiteOutboundroutes",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesSiteOutboundroutesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesSiteOutboundroutesOK), nil

}

/*
GetTelephonyProvidersEdgesSites gets the list of sites
*/
func (a *Client) GetTelephonyProvidersEdgesSites(ctx context.Context, params *GetTelephonyProvidersEdgesSitesParams) (*GetTelephonyProvidersEdgesSitesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesSites",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/sites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesSitesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesSitesOK), nil

}

/*
GetTelephonyProvidersEdgesTimezones gets a list of edge compatible time zones
*/
func (a *Client) GetTelephonyProvidersEdgesTimezones(ctx context.Context, params *GetTelephonyProvidersEdgesTimezonesParams) (*GetTelephonyProvidersEdgesTimezonesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesTimezones",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/timezones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesTimezonesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesTimezonesOK), nil

}

/*
GetTelephonyProvidersEdgesTrunk gets a trunk by ID
*/
func (a *Client) GetTelephonyProvidersEdgesTrunk(ctx context.Context, params *GetTelephonyProvidersEdgesTrunkParams) (*GetTelephonyProvidersEdgesTrunkOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesTrunk",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/trunks/{trunkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesTrunkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesTrunkOK), nil

}

/*
GetTelephonyProvidersEdgesTrunkMetrics gets the trunk metrics
*/
func (a *Client) GetTelephonyProvidersEdgesTrunkMetrics(ctx context.Context, params *GetTelephonyProvidersEdgesTrunkMetricsParams) (*GetTelephonyProvidersEdgesTrunkMetricsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesTrunkMetrics",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/trunks/{trunkId}/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesTrunkMetricsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesTrunkMetricsOK), nil

}

/*
GetTelephonyProvidersEdgesTrunkbasesetting gets a trunk base settings object by ID

Managed properties will not be returned unless the user is assigned the internal:trunk:edit permission.
*/
func (a *Client) GetTelephonyProvidersEdgesTrunkbasesetting(ctx context.Context, params *GetTelephonyProvidersEdgesTrunkbasesettingParams) (*GetTelephonyProvidersEdgesTrunkbasesettingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesTrunkbasesetting",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/trunkbasesettings/{trunkBaseSettingsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesTrunkbasesettingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesTrunkbasesettingOK), nil

}

/*
GetTelephonyProvidersEdgesTrunkbasesettings gets trunk base settings listing

Managed properties will not be returned unless the user is assigned the internal:trunk:edit permission.
*/
func (a *Client) GetTelephonyProvidersEdgesTrunkbasesettings(ctx context.Context, params *GetTelephonyProvidersEdgesTrunkbasesettingsParams) (*GetTelephonyProvidersEdgesTrunkbasesettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesTrunkbasesettings",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/trunkbasesettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesTrunkbasesettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesTrunkbasesettingsOK), nil

}

/*
GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases gets a list of available makes and models to create a new trunk base settings
*/
func (a *Client) GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases(ctx context.Context, params *GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabasesParams) (*GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabasesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/trunkbasesettings/availablemetabases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabasesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabasesOK), nil

}

/*
GetTelephonyProvidersEdgesTrunkbasesettingsTemplate gets a trunk base settings instance template from a given make and model this object can then be modified and saved as a new trunk base settings instance
*/
func (a *Client) GetTelephonyProvidersEdgesTrunkbasesettingsTemplate(ctx context.Context, params *GetTelephonyProvidersEdgesTrunkbasesettingsTemplateParams) (*GetTelephonyProvidersEdgesTrunkbasesettingsTemplateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesTrunkbasesettingsTemplate",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/trunkbasesettings/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesTrunkbasesettingsTemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesTrunkbasesettingsTemplateOK), nil

}

/*
GetTelephonyProvidersEdgesTrunks gets the list of available trunks

Trunks are created by assigning trunk base settings to an Edge or Edge Group.
*/
func (a *Client) GetTelephonyProvidersEdgesTrunks(ctx context.Context, params *GetTelephonyProvidersEdgesTrunksParams) (*GetTelephonyProvidersEdgesTrunksOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesTrunks",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/trunks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesTrunksReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesTrunksOK), nil

}

/*
GetTelephonyProvidersEdgesTrunksMetrics gets the metrics for a list of trunks
*/
func (a *Client) GetTelephonyProvidersEdgesTrunksMetrics(ctx context.Context, params *GetTelephonyProvidersEdgesTrunksMetricsParams) (*GetTelephonyProvidersEdgesTrunksMetricsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesTrunksMetrics",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/trunks/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesTrunksMetricsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesTrunksMetricsOK), nil

}

/*
GetTelephonyProvidersEdgesTrunkswithrecording gets counts of trunks that have recording disabled or enabled
*/
func (a *Client) GetTelephonyProvidersEdgesTrunkswithrecording(ctx context.Context, params *GetTelephonyProvidersEdgesTrunkswithrecordingParams) (*GetTelephonyProvidersEdgesTrunkswithrecordingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTelephonyProvidersEdgesTrunkswithrecording",
		Method:             "GET",
		PathPattern:        "/api/v2/telephony/providers/edges/trunkswithrecording",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTelephonyProvidersEdgesTrunkswithrecordingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTelephonyProvidersEdgesTrunkswithrecordingOK), nil

}

/*
PostTelephonyProvidersEdgeDiagnosticNslookup nslookups request command to collect networking related information from an edge for a target IP or host
*/
func (a *Client) PostTelephonyProvidersEdgeDiagnosticNslookup(ctx context.Context, params *PostTelephonyProvidersEdgeDiagnosticNslookupParams) (*PostTelephonyProvidersEdgeDiagnosticNslookupAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgeDiagnosticNslookup",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/diagnostic/nslookup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgeDiagnosticNslookupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgeDiagnosticNslookupAccepted), nil

}

/*
PostTelephonyProvidersEdgeDiagnosticPing pings request command to collect networking related information from an edge for a target IP or host
*/
func (a *Client) PostTelephonyProvidersEdgeDiagnosticPing(ctx context.Context, params *PostTelephonyProvidersEdgeDiagnosticPingParams) (*PostTelephonyProvidersEdgeDiagnosticPingAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgeDiagnosticPing",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/diagnostic/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgeDiagnosticPingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgeDiagnosticPingAccepted), nil

}

/*
PostTelephonyProvidersEdgeDiagnosticRoute routes request command to collect networking related information from an edge for a target IP or host
*/
func (a *Client) PostTelephonyProvidersEdgeDiagnosticRoute(ctx context.Context, params *PostTelephonyProvidersEdgeDiagnosticRouteParams) (*PostTelephonyProvidersEdgeDiagnosticRouteAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgeDiagnosticRoute",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/diagnostic/route",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgeDiagnosticRouteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgeDiagnosticRouteAccepted), nil

}

/*
PostTelephonyProvidersEdgeDiagnosticTracepath tracepaths request command to collect networking related information from an edge for a target IP or host
*/
func (a *Client) PostTelephonyProvidersEdgeDiagnosticTracepath(ctx context.Context, params *PostTelephonyProvidersEdgeDiagnosticTracepathParams) (*PostTelephonyProvidersEdgeDiagnosticTracepathAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgeDiagnosticTracepath",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/diagnostic/tracepath",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgeDiagnosticTracepathReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgeDiagnosticTracepathAccepted), nil

}

/*
PostTelephonyProvidersEdgeLogicalinterfaces creates an edge logical interface

Create
*/
func (a *Client) PostTelephonyProvidersEdgeLogicalinterfaces(ctx context.Context, params *PostTelephonyProvidersEdgeLogicalinterfacesParams) (*PostTelephonyProvidersEdgeLogicalinterfacesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgeLogicalinterfaces",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgeLogicalinterfacesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgeLogicalinterfacesOK), nil

}

/*
PostTelephonyProvidersEdgeLogsJobUpload requests that the specified file ids be uploaded from the edge
*/
func (a *Client) PostTelephonyProvidersEdgeLogsJobUpload(ctx context.Context, params *PostTelephonyProvidersEdgeLogsJobUploadParams) (*PostTelephonyProvidersEdgeLogsJobUploadAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgeLogsJobUpload",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/logs/jobs/{jobId}/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgeLogsJobUploadReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgeLogsJobUploadAccepted), nil

}

/*
PostTelephonyProvidersEdgeLogsJobs creates a job to upload a list of edge logs
*/
func (a *Client) PostTelephonyProvidersEdgeLogsJobs(ctx context.Context, params *PostTelephonyProvidersEdgeLogsJobsParams) (*PostTelephonyProvidersEdgeLogsJobsAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgeLogsJobs",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/logs/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgeLogsJobsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgeLogsJobsAccepted), nil

}

/*
PostTelephonyProvidersEdgeReboot reboots an edge
*/
func (a *Client) PostTelephonyProvidersEdgeReboot(ctx context.Context, params *PostTelephonyProvidersEdgeRebootParams) (*PostTelephonyProvidersEdgeRebootOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgeReboot",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/reboot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgeRebootReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgeRebootOK), nil

}

/*
PostTelephonyProvidersEdgeSoftwareupdate starts a software update for this edge
*/
func (a *Client) PostTelephonyProvidersEdgeSoftwareupdate(ctx context.Context, params *PostTelephonyProvidersEdgeSoftwareupdateParams) (*PostTelephonyProvidersEdgeSoftwareupdateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgeSoftwareupdate",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/softwareupdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgeSoftwareupdateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgeSoftwareupdateOK), nil

}

/*
PostTelephonyProvidersEdgeStatuscode takes an edge in or out of service
*/
func (a *Client) PostTelephonyProvidersEdgeStatuscode(ctx context.Context, params *PostTelephonyProvidersEdgeStatuscodeParams) (*PostTelephonyProvidersEdgeStatuscodeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgeStatuscode",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/statuscode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgeStatuscodeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgeStatuscodeOK), nil

}

/*
PostTelephonyProvidersEdgeUnpair unpairs an edge
*/
func (a *Client) PostTelephonyProvidersEdgeUnpair(ctx context.Context, params *PostTelephonyProvidersEdgeUnpairParams) (*PostTelephonyProvidersEdgeUnpairOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgeUnpair",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/unpair",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgeUnpairReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgeUnpairOK), nil

}

/*
PostTelephonyProvidersEdges creates an edge
*/
func (a *Client) PostTelephonyProvidersEdges(ctx context.Context, params *PostTelephonyProvidersEdgesParams) (*PostTelephonyProvidersEdgesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdges",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgesOK), nil

}

/*
PostTelephonyProvidersEdgesAddressvalidation validates a street address
*/
func (a *Client) PostTelephonyProvidersEdgesAddressvalidation(ctx context.Context, params *PostTelephonyProvidersEdgesAddressvalidationParams) (*PostTelephonyProvidersEdgesAddressvalidationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgesAddressvalidation",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/addressvalidation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgesAddressvalidationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgesAddressvalidationOK), nil

}

/*
PostTelephonyProvidersEdgesCertificateauthorities creates a certificate authority
*/
func (a *Client) PostTelephonyProvidersEdgesCertificateauthorities(ctx context.Context, params *PostTelephonyProvidersEdgesCertificateauthoritiesParams) (*PostTelephonyProvidersEdgesCertificateauthoritiesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgesCertificateauthorities",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/certificateauthorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgesCertificateauthoritiesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgesCertificateauthoritiesOK), nil

}

/*
PostTelephonyProvidersEdgesDidpools creates a new d ID pool
*/
func (a *Client) PostTelephonyProvidersEdgesDidpools(ctx context.Context, params *PostTelephonyProvidersEdgesDidpoolsParams) (*PostTelephonyProvidersEdgesDidpoolsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgesDidpools",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/didpools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgesDidpoolsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgesDidpoolsOK), nil

}

/*
PostTelephonyProvidersEdgesEdgegroups creates an edge group
*/
func (a *Client) PostTelephonyProvidersEdgesEdgegroups(ctx context.Context, params *PostTelephonyProvidersEdgesEdgegroupsParams) (*PostTelephonyProvidersEdgesEdgegroupsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgesEdgegroups",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/edgegroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgesEdgegroupsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgesEdgegroupsOK), nil

}

/*
PostTelephonyProvidersEdgesExtensionpools creates a new extension pool
*/
func (a *Client) PostTelephonyProvidersEdgesExtensionpools(ctx context.Context, params *PostTelephonyProvidersEdgesExtensionpoolsParams) (*PostTelephonyProvidersEdgesExtensionpoolsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgesExtensionpools",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/extensionpools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgesExtensionpoolsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgesExtensionpoolsOK), nil

}

/*
PostTelephonyProvidersEdgesOutboundroutes creates outbound rule

This route is deprecated, use /telephony/providers/edges/sites/{siteId}/outboundroutes instead.
*/
func (a *Client) PostTelephonyProvidersEdgesOutboundroutes(ctx context.Context, params *PostTelephonyProvidersEdgesOutboundroutesParams) (*PostTelephonyProvidersEdgesOutboundroutesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgesOutboundroutes",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/outboundroutes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgesOutboundroutesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgesOutboundroutesOK), nil

}

/*
PostTelephonyProvidersEdgesPhoneReboot reboots a phone
*/
func (a *Client) PostTelephonyProvidersEdgesPhoneReboot(ctx context.Context, params *PostTelephonyProvidersEdgesPhoneRebootParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgesPhoneReboot",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/phones/{phoneId}/reboot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgesPhoneRebootReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostTelephonyProvidersEdgesPhonebasesettings creates a new phone base settings object
*/
func (a *Client) PostTelephonyProvidersEdgesPhonebasesettings(ctx context.Context, params *PostTelephonyProvidersEdgesPhonebasesettingsParams) (*PostTelephonyProvidersEdgesPhonebasesettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgesPhonebasesettings",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/phonebasesettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgesPhonebasesettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgesPhonebasesettingsOK), nil

}

/*
PostTelephonyProvidersEdgesPhones creates a new phone
*/
func (a *Client) PostTelephonyProvidersEdgesPhones(ctx context.Context, params *PostTelephonyProvidersEdgesPhonesParams) (*PostTelephonyProvidersEdgesPhonesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgesPhones",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/phones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgesPhonesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgesPhonesOK), nil

}

/*
PostTelephonyProvidersEdgesPhonesReboot reboots multiple phones
*/
func (a *Client) PostTelephonyProvidersEdgesPhonesReboot(ctx context.Context, params *PostTelephonyProvidersEdgesPhonesRebootParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgesPhonesReboot",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/phones/reboot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgesPhonesRebootReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostTelephonyProvidersEdgesSiteOutboundroutes creates outbound route
*/
func (a *Client) PostTelephonyProvidersEdgesSiteOutboundroutes(ctx context.Context, params *PostTelephonyProvidersEdgesSiteOutboundroutesParams) (*PostTelephonyProvidersEdgesSiteOutboundroutesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgesSiteOutboundroutes",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgesSiteOutboundroutesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgesSiteOutboundroutesOK), nil

}

/*
PostTelephonyProvidersEdgesSiteRebalance triggers the rebalance operation
*/
func (a *Client) PostTelephonyProvidersEdgesSiteRebalance(ctx context.Context, params *PostTelephonyProvidersEdgesSiteRebalanceParams) (*PostTelephonyProvidersEdgesSiteRebalanceAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgesSiteRebalance",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/sites/{siteId}/rebalance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgesSiteRebalanceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgesSiteRebalanceAccepted), nil

}

/*
PostTelephonyProvidersEdgesSites creates a site
*/
func (a *Client) PostTelephonyProvidersEdgesSites(ctx context.Context, params *PostTelephonyProvidersEdgesSitesParams) (*PostTelephonyProvidersEdgesSitesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgesSites",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/sites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgesSitesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgesSitesOK), nil

}

/*
PostTelephonyProvidersEdgesTrunkbasesettings creates a trunk base settings object
*/
func (a *Client) PostTelephonyProvidersEdgesTrunkbasesettings(ctx context.Context, params *PostTelephonyProvidersEdgesTrunkbasesettingsParams) (*PostTelephonyProvidersEdgesTrunkbasesettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTelephonyProvidersEdgesTrunkbasesettings",
		Method:             "POST",
		PathPattern:        "/api/v2/telephony/providers/edges/trunkbasesettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTelephonyProvidersEdgesTrunkbasesettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTelephonyProvidersEdgesTrunkbasesettingsOK), nil

}

/*
PutTelephonyProvidersEdge updates a edge
*/
func (a *Client) PutTelephonyProvidersEdge(ctx context.Context, params *PutTelephonyProvidersEdgeParams) (*PutTelephonyProvidersEdgeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdge",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgeOK), nil

}

/*
PutTelephonyProvidersEdgeLine updates a line
*/
func (a *Client) PutTelephonyProvidersEdgeLine(ctx context.Context, params *PutTelephonyProvidersEdgeLineParams) (*PutTelephonyProvidersEdgeLineOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgeLine",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/lines/{lineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgeLineReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgeLineOK), nil

}

/*
PutTelephonyProvidersEdgeLogicalinterface updates an edge logical interface
*/
func (a *Client) PutTelephonyProvidersEdgeLogicalinterface(ctx context.Context, params *PutTelephonyProvidersEdgeLogicalinterfaceParams) (*PutTelephonyProvidersEdgeLogicalinterfaceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgeLogicalinterface",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces/{interfaceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgeLogicalinterfaceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgeLogicalinterfaceOK), nil

}

/*
PutTelephonyProvidersEdgesCertificateauthority updates a certificate authority
*/
func (a *Client) PutTelephonyProvidersEdgesCertificateauthority(ctx context.Context, params *PutTelephonyProvidersEdgesCertificateauthorityParams) (*PutTelephonyProvidersEdgesCertificateauthorityOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgesCertificateauthority",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/certificateauthorities/{certificateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgesCertificateauthorityReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgesCertificateauthorityOK), nil

}

/*
PutTelephonyProvidersEdgesDid updates a d ID by ID
*/
func (a *Client) PutTelephonyProvidersEdgesDid(ctx context.Context, params *PutTelephonyProvidersEdgesDidParams) (*PutTelephonyProvidersEdgesDidOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgesDid",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/dids/{didId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgesDidReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgesDidOK), nil

}

/*
PutTelephonyProvidersEdgesDidpool updates a d ID pool by ID
*/
func (a *Client) PutTelephonyProvidersEdgesDidpool(ctx context.Context, params *PutTelephonyProvidersEdgesDidpoolParams) (*PutTelephonyProvidersEdgesDidpoolOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgesDidpool",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/didpools/{didPoolId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgesDidpoolReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgesDidpoolOK), nil

}

/*
PutTelephonyProvidersEdgesEdgegroup updates an edge group
*/
func (a *Client) PutTelephonyProvidersEdgesEdgegroup(ctx context.Context, params *PutTelephonyProvidersEdgesEdgegroupParams) (*PutTelephonyProvidersEdgesEdgegroupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgesEdgegroup",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/edgegroups/{edgeGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgesEdgegroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgesEdgegroupOK), nil

}

/*
PutTelephonyProvidersEdgesEdgegroupEdgetrunkbase updates the edge trunk base associated with the edge group
*/
func (a *Client) PutTelephonyProvidersEdgesEdgegroupEdgetrunkbase(ctx context.Context, params *PutTelephonyProvidersEdgesEdgegroupEdgetrunkbaseParams) (*PutTelephonyProvidersEdgesEdgegroupEdgetrunkbaseOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgesEdgegroupEdgetrunkbase",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/edgegroups/{edgegroupId}/edgetrunkbases/{edgetrunkbaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgesEdgegroupEdgetrunkbaseReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgesEdgegroupEdgetrunkbaseOK), nil

}

/*
PutTelephonyProvidersEdgesExtension updates an extension by ID
*/
func (a *Client) PutTelephonyProvidersEdgesExtension(ctx context.Context, params *PutTelephonyProvidersEdgesExtensionParams) (*PutTelephonyProvidersEdgesExtensionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgesExtension",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/extensions/{extensionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgesExtensionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgesExtensionOK), nil

}

/*
PutTelephonyProvidersEdgesExtensionpool updates an extension pool by ID
*/
func (a *Client) PutTelephonyProvidersEdgesExtensionpool(ctx context.Context, params *PutTelephonyProvidersEdgesExtensionpoolParams) (*PutTelephonyProvidersEdgesExtensionpoolOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgesExtensionpool",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/extensionpools/{extensionPoolId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgesExtensionpoolReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgesExtensionpoolOK), nil

}

/*
PutTelephonyProvidersEdgesOutboundroute updates outbound route

This route is deprecated, use /telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId} instead.
*/
func (a *Client) PutTelephonyProvidersEdgesOutboundroute(ctx context.Context, params *PutTelephonyProvidersEdgesOutboundrouteParams) (*PutTelephonyProvidersEdgesOutboundrouteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgesOutboundroute",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/outboundroutes/{outboundRouteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgesOutboundrouteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgesOutboundrouteOK), nil

}

/*
PutTelephonyProvidersEdgesPhone updates a phone by ID
*/
func (a *Client) PutTelephonyProvidersEdgesPhone(ctx context.Context, params *PutTelephonyProvidersEdgesPhoneParams) (*PutTelephonyProvidersEdgesPhoneOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgesPhone",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/phones/{phoneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgesPhoneReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgesPhoneOK), nil

}

/*
PutTelephonyProvidersEdgesPhonebasesetting updates a phone base settings by ID
*/
func (a *Client) PutTelephonyProvidersEdgesPhonebasesetting(ctx context.Context, params *PutTelephonyProvidersEdgesPhonebasesettingParams) (*PutTelephonyProvidersEdgesPhonebasesettingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgesPhonebasesetting",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/phonebasesettings/{phoneBaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgesPhonebasesettingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgesPhonebasesettingOK), nil

}

/*
PutTelephonyProvidersEdgesSite updates a site by ID
*/
func (a *Client) PutTelephonyProvidersEdgesSite(ctx context.Context, params *PutTelephonyProvidersEdgesSiteParams) (*PutTelephonyProvidersEdgesSiteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgesSite",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/sites/{siteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgesSiteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgesSiteOK), nil

}

/*
PutTelephonyProvidersEdgesSiteNumberplans updates the list of number plans a user can update maximum 200 number plans at a time
*/
func (a *Client) PutTelephonyProvidersEdgesSiteNumberplans(ctx context.Context, params *PutTelephonyProvidersEdgesSiteNumberplansParams) (*PutTelephonyProvidersEdgesSiteNumberplansOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgesSiteNumberplans",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/sites/{siteId}/numberplans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgesSiteNumberplansReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgesSiteNumberplansOK), nil

}

/*
PutTelephonyProvidersEdgesSiteOutboundroute updates outbound route
*/
func (a *Client) PutTelephonyProvidersEdgesSiteOutboundroute(ctx context.Context, params *PutTelephonyProvidersEdgesSiteOutboundrouteParams) (*PutTelephonyProvidersEdgesSiteOutboundrouteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgesSiteOutboundroute",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgesSiteOutboundrouteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgesSiteOutboundrouteOK), nil

}

/*
PutTelephonyProvidersEdgesTrunkbasesetting updates a trunk base settings object by ID
*/
func (a *Client) PutTelephonyProvidersEdgesTrunkbasesetting(ctx context.Context, params *PutTelephonyProvidersEdgesTrunkbasesettingParams) (*PutTelephonyProvidersEdgesTrunkbasesettingOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTelephonyProvidersEdgesTrunkbasesetting",
		Method:             "PUT",
		PathPattern:        "/api/v2/telephony/providers/edges/trunkbasesettings/{trunkBaseSettingsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTelephonyProvidersEdgesTrunkbasesettingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTelephonyProvidersEdgesTrunkbasesettingOK), nil

}

// Code generated by go-swagger; DO NOT EDIT.

package telephony_providers_edge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDReader is a Reader for the GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaID structure.
type GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDOK creates a GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDOK with default headers values
func NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDOK() *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDOK {
	return &GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDOK{}
}

/*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDOK handles this case with default header values.

successful operation
*/
type GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDOK struct {
	Payload *models.Organization
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}][%d] getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdOK  %+v", 200, o.Payload)
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDOK) GetPayload() *models.Organization {
	return o.Payload
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Organization)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDBadRequest creates a GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDBadRequest with default headers values
func NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDBadRequest() *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDBadRequest {
	return &GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDBadRequest{}
}

/*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}][%d] getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnauthorized creates a GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnauthorized with default headers values
func NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnauthorized() *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnauthorized {
	return &GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnauthorized{}
}

/*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}][%d] getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDForbidden creates a GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDForbidden with default headers values
func NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDForbidden() *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDForbidden {
	return &GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDForbidden{}
}

/*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}][%d] getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdForbidden  %+v", 403, o.Payload)
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDNotFound creates a GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDNotFound with default headers values
func NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDNotFound() *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDNotFound {
	return &GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDNotFound{}
}

/*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}][%d] getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdNotFound  %+v", 404, o.Payload)
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDRequestEntityTooLarge creates a GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDRequestEntityTooLarge with default headers values
func NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDRequestEntityTooLarge() *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDRequestEntityTooLarge {
	return &GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDRequestEntityTooLarge{}
}

/*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}][%d] getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnsupportedMediaType creates a GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnsupportedMediaType with default headers values
func NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnsupportedMediaType() *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnsupportedMediaType {
	return &GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnsupportedMediaType{}
}

/*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}][%d] getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDTooManyRequests creates a GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDTooManyRequests with default headers values
func NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDTooManyRequests() *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDTooManyRequests {
	return &GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDTooManyRequests{}
}

/*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}][%d] getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDInternalServerError creates a GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDInternalServerError with default headers values
func NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDInternalServerError() *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDInternalServerError {
	return &GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDInternalServerError{}
}

/*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}][%d] getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDServiceUnavailable creates a GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDServiceUnavailable with default headers values
func NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDServiceUnavailable() *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDServiceUnavailable {
	return &GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDServiceUnavailable{}
}

/*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}][%d] getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDGatewayTimeout creates a GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDGatewayTimeout with default headers values
func NewGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDGatewayTimeout() *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDGatewayTimeout {
	return &GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDGatewayTimeout{}
}

/*GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}][%d] getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

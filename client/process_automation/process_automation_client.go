// Code generated by go-swagger; DO NOT EDIT.

package process_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the process automation client
type API interface {
	/*
	   DeleteProcessautomationTrigger deletes a trigger
	*/
	DeleteProcessautomationTrigger(ctx context.Context, params *DeleteProcessautomationTriggerParams) (*DeleteProcessautomationTriggerNoContent, error)
	/*
	   GetProcessautomationTrigger retrieves a single trigger matching id
	*/
	GetProcessautomationTrigger(ctx context.Context, params *GetProcessautomationTriggerParams) (*GetProcessautomationTriggerOK, error)
	/*
	   GetProcessautomationTriggers retrieves all triggers
	*/
	GetProcessautomationTriggers(ctx context.Context, params *GetProcessautomationTriggersParams) (*GetProcessautomationTriggersOK, error)
	/*
	   GetProcessautomationTriggersTopics gets topics available for organization
	*/
	GetProcessautomationTriggersTopics(ctx context.Context, params *GetProcessautomationTriggersTopicsParams) (*GetProcessautomationTriggersTopicsOK, error)
	/*
	   PostProcessautomationTriggerTest tests the matching of a trigger based on provided event body
	*/
	PostProcessautomationTriggerTest(ctx context.Context, params *PostProcessautomationTriggerTestParams) (*PostProcessautomationTriggerTestOK, error)
	/*
	   PostProcessautomationTriggers creates a trigger
	*/
	PostProcessautomationTriggers(ctx context.Context, params *PostProcessautomationTriggersParams) (*PostProcessautomationTriggersOK, error)
	/*
	   PostProcessautomationTriggersTopicTest tests the matching of all organization triggers on given topic using provided event body
	*/
	PostProcessautomationTriggersTopicTest(ctx context.Context, params *PostProcessautomationTriggersTopicTestParams) (*PostProcessautomationTriggersTopicTestOK, error)
	/*
	   PutProcessautomationTrigger updates a trigger
	*/
	PutProcessautomationTrigger(ctx context.Context, params *PutProcessautomationTriggerParams) (*PutProcessautomationTriggerOK, error)
}

// New creates a new process automation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for process automation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteProcessautomationTrigger deletes a trigger
*/
func (a *Client) DeleteProcessautomationTrigger(ctx context.Context, params *DeleteProcessautomationTriggerParams) (*DeleteProcessautomationTriggerNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProcessautomationTrigger",
		Method:             "DELETE",
		PathPattern:        "/api/v2/processautomation/triggers/{triggerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProcessautomationTriggerReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProcessautomationTriggerNoContent), nil

}

/*
GetProcessautomationTrigger retrieves a single trigger matching id
*/
func (a *Client) GetProcessautomationTrigger(ctx context.Context, params *GetProcessautomationTriggerParams) (*GetProcessautomationTriggerOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProcessautomationTrigger",
		Method:             "GET",
		PathPattern:        "/api/v2/processautomation/triggers/{triggerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProcessautomationTriggerReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProcessautomationTriggerOK), nil

}

/*
GetProcessautomationTriggers retrieves all triggers
*/
func (a *Client) GetProcessautomationTriggers(ctx context.Context, params *GetProcessautomationTriggersParams) (*GetProcessautomationTriggersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProcessautomationTriggers",
		Method:             "GET",
		PathPattern:        "/api/v2/processautomation/triggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProcessautomationTriggersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProcessautomationTriggersOK), nil

}

/*
GetProcessautomationTriggersTopics gets topics available for organization
*/
func (a *Client) GetProcessautomationTriggersTopics(ctx context.Context, params *GetProcessautomationTriggersTopicsParams) (*GetProcessautomationTriggersTopicsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProcessautomationTriggersTopics",
		Method:             "GET",
		PathPattern:        "/api/v2/processautomation/triggers/topics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProcessautomationTriggersTopicsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProcessautomationTriggersTopicsOK), nil

}

/*
PostProcessautomationTriggerTest tests the matching of a trigger based on provided event body
*/
func (a *Client) PostProcessautomationTriggerTest(ctx context.Context, params *PostProcessautomationTriggerTestParams) (*PostProcessautomationTriggerTestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postProcessautomationTriggerTest",
		Method:             "POST",
		PathPattern:        "/api/v2/processautomation/triggers/{triggerId}/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostProcessautomationTriggerTestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostProcessautomationTriggerTestOK), nil

}

/*
PostProcessautomationTriggers creates a trigger
*/
func (a *Client) PostProcessautomationTriggers(ctx context.Context, params *PostProcessautomationTriggersParams) (*PostProcessautomationTriggersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postProcessautomationTriggers",
		Method:             "POST",
		PathPattern:        "/api/v2/processautomation/triggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostProcessautomationTriggersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostProcessautomationTriggersOK), nil

}

/*
PostProcessautomationTriggersTopicTest tests the matching of all organization triggers on given topic using provided event body
*/
func (a *Client) PostProcessautomationTriggersTopicTest(ctx context.Context, params *PostProcessautomationTriggersTopicTestParams) (*PostProcessautomationTriggersTopicTestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postProcessautomationTriggersTopicTest",
		Method:             "POST",
		PathPattern:        "/api/v2/processautomation/triggers/topics/{topicName}/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostProcessautomationTriggersTopicTestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostProcessautomationTriggersTopicTestOK), nil

}

/*
PutProcessautomationTrigger updates a trigger
*/
func (a *Client) PutProcessautomationTrigger(ctx context.Context, params *PutProcessautomationTriggerParams) (*PutProcessautomationTriggerOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putProcessautomationTrigger",
		Method:             "PUT",
		PathPattern:        "/api/v2/processautomation/triggers/{triggerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutProcessautomationTriggerReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutProcessautomationTriggerOK), nil

}

// Code generated by go-swagger; DO NOT EDIT.

package process_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProcessautomationTriggersParams creates a new GetProcessautomationTriggersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProcessautomationTriggersParams() *GetProcessautomationTriggersParams {
	return &GetProcessautomationTriggersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProcessautomationTriggersParamsWithTimeout creates a new GetProcessautomationTriggersParams object
// with the ability to set a timeout on a request.
func NewGetProcessautomationTriggersParamsWithTimeout(timeout time.Duration) *GetProcessautomationTriggersParams {
	return &GetProcessautomationTriggersParams{
		timeout: timeout,
	}
}

// NewGetProcessautomationTriggersParamsWithContext creates a new GetProcessautomationTriggersParams object
// with the ability to set a context for a request.
func NewGetProcessautomationTriggersParamsWithContext(ctx context.Context) *GetProcessautomationTriggersParams {
	return &GetProcessautomationTriggersParams{
		Context: ctx,
	}
}

// NewGetProcessautomationTriggersParamsWithHTTPClient creates a new GetProcessautomationTriggersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProcessautomationTriggersParamsWithHTTPClient(client *http.Client) *GetProcessautomationTriggersParams {
	return &GetProcessautomationTriggersParams{
		HTTPClient: client,
	}
}

/*
GetProcessautomationTriggersParams contains all the parameters to send to the API endpoint

	for the get processautomation triggers operation.

	Typically these are written to a http.Request.
*/
type GetProcessautomationTriggersParams struct {

	/* After.

	   The cursor that points to the end of the set of entities that has been returned.
	*/
	After *string

	/* Before.

	   The cursor that points to the start of the set of entities that has been returned.
	*/
	Before *string

	/* Enabled.

	   Boolean indicating desired enabled state of triggers
	*/
	Enabled *bool

	/* HasDelayBy.

	   Boolean to filter based on delayBySeconds being set in triggers. Default returns all, true returns only those with delayBySeconds set, false returns those without delayBySeconds set.
	*/
	HasDelayBy *bool

	/* PageSize.

	   Number of entities to return. Maximum of 200.
	*/
	PageSize *string

	/* TopicName.

	   Topic name(s). Separated by commas
	*/
	TopicName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get processautomation triggers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProcessautomationTriggersParams) WithDefaults() *GetProcessautomationTriggersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get processautomation triggers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProcessautomationTriggersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) WithTimeout(timeout time.Duration) *GetProcessautomationTriggersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) WithContext(ctx context.Context) *GetProcessautomationTriggersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) WithHTTPClient(client *http.Client) *GetProcessautomationTriggersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) WithAfter(after *string) *GetProcessautomationTriggersParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) SetAfter(after *string) {
	o.After = after
}

// WithBefore adds the before to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) WithBefore(before *string) *GetProcessautomationTriggersParams {
	o.SetBefore(before)
	return o
}

// SetBefore adds the before to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) SetBefore(before *string) {
	o.Before = before
}

// WithEnabled adds the enabled to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) WithEnabled(enabled *bool) *GetProcessautomationTriggersParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithHasDelayBy adds the hasDelayBy to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) WithHasDelayBy(hasDelayBy *bool) *GetProcessautomationTriggersParams {
	o.SetHasDelayBy(hasDelayBy)
	return o
}

// SetHasDelayBy adds the hasDelayBy to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) SetHasDelayBy(hasDelayBy *bool) {
	o.HasDelayBy = hasDelayBy
}

// WithPageSize adds the pageSize to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) WithPageSize(pageSize *string) *GetProcessautomationTriggersParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WithTopicName adds the topicName to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) WithTopicName(topicName *string) *GetProcessautomationTriggersParams {
	o.SetTopicName(topicName)
	return o
}

// SetTopicName adds the topicName to the get processautomation triggers params
func (o *GetProcessautomationTriggersParams) SetTopicName(topicName *string) {
	o.TopicName = topicName
}

// WriteToRequest writes these params to a swagger request
func (o *GetProcessautomationTriggersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter string

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	if o.Before != nil {

		// query param before
		var qrBefore string

		if o.Before != nil {
			qrBefore = *o.Before
		}
		qBefore := qrBefore
		if qBefore != "" {

			if err := r.SetQueryParam("before", qBefore); err != nil {
				return err
			}
		}
	}

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled bool

		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.HasDelayBy != nil {

		// query param hasDelayBy
		var qrHasDelayBy bool

		if o.HasDelayBy != nil {
			qrHasDelayBy = *o.HasDelayBy
		}
		qHasDelayBy := swag.FormatBool(qrHasDelayBy)
		if qHasDelayBy != "" {

			if err := r.SetQueryParam("hasDelayBy", qHasDelayBy); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize string

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.TopicName != nil {

		// query param topicName
		var qrTopicName string

		if o.TopicName != nil {
			qrTopicName = *o.TopicName
		}
		qTopicName := qrTopicName
		if qTopicName != "" {

			if err := r.SetQueryParam("topicName", qTopicName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

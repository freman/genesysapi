// Code generated by go-swagger; DO NOT EDIT.

package uploads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the uploads client
type API interface {
	/*
	   PostLanguageunderstandingMinerUploads creates a presigned URL for uploading a chat corpus which will be used for mining by intent miner
	*/
	PostLanguageunderstandingMinerUploads(ctx context.Context, params *PostLanguageunderstandingMinerUploadsParams) (*PostLanguageunderstandingMinerUploadsOK, error)
	/*
	   PostUploadsLearningCoverart generates pre signed URL to upload cover art for learning modules
	*/
	PostUploadsLearningCoverart(ctx context.Context, params *PostUploadsLearningCoverartParams) (*PostUploadsLearningCoverartOK, error)
	/*
	   PostUploadsPublicassetsImages creates presigned url for uploading a public asset image
	*/
	PostUploadsPublicassetsImages(ctx context.Context, params *PostUploadsPublicassetsImagesParams) (*PostUploadsPublicassetsImagesOK, error)
	/*
	   PostUploadsRecordings creates presigned url for uploading a recording file
	*/
	PostUploadsRecordings(ctx context.Context, params *PostUploadsRecordingsParams) (*PostUploadsRecordingsOK, error)
	/*
	   PostUploadsWorkforcemanagementHistoricaldataCsv creates presigned url for uploading w f m historical data file requires data in csv format
	*/
	PostUploadsWorkforcemanagementHistoricaldataCsv(ctx context.Context, params *PostUploadsWorkforcemanagementHistoricaldataCsvParams) (*PostUploadsWorkforcemanagementHistoricaldataCsvOK, error)
}

// New creates a new uploads API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for uploads API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
PostLanguageunderstandingMinerUploads creates a presigned URL for uploading a chat corpus which will be used for mining by intent miner
*/
func (a *Client) PostLanguageunderstandingMinerUploads(ctx context.Context, params *PostLanguageunderstandingMinerUploadsParams) (*PostLanguageunderstandingMinerUploadsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLanguageunderstandingMinerUploads",
		Method:             "POST",
		PathPattern:        "/api/v2/languageunderstanding/miners/{minerId}/uploads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLanguageunderstandingMinerUploadsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLanguageunderstandingMinerUploadsOK), nil

}

/*
PostUploadsLearningCoverart generates pre signed URL to upload cover art for learning modules
*/
func (a *Client) PostUploadsLearningCoverart(ctx context.Context, params *PostUploadsLearningCoverartParams) (*PostUploadsLearningCoverartOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUploadsLearningCoverart",
		Method:             "POST",
		PathPattern:        "/api/v2/uploads/learning/coverart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUploadsLearningCoverartReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUploadsLearningCoverartOK), nil

}

/*
PostUploadsPublicassetsImages creates presigned url for uploading a public asset image
*/
func (a *Client) PostUploadsPublicassetsImages(ctx context.Context, params *PostUploadsPublicassetsImagesParams) (*PostUploadsPublicassetsImagesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUploadsPublicassetsImages",
		Method:             "POST",
		PathPattern:        "/api/v2/uploads/publicassets/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUploadsPublicassetsImagesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUploadsPublicassetsImagesOK), nil

}

/*
PostUploadsRecordings creates presigned url for uploading a recording file
*/
func (a *Client) PostUploadsRecordings(ctx context.Context, params *PostUploadsRecordingsParams) (*PostUploadsRecordingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUploadsRecordings",
		Method:             "POST",
		PathPattern:        "/api/v2/uploads/recordings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUploadsRecordingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUploadsRecordingsOK), nil

}

/*
PostUploadsWorkforcemanagementHistoricaldataCsv creates presigned url for uploading w f m historical data file requires data in csv format
*/
func (a *Client) PostUploadsWorkforcemanagementHistoricaldataCsv(ctx context.Context, params *PostUploadsWorkforcemanagementHistoricaldataCsvParams) (*PostUploadsWorkforcemanagementHistoricaldataCsvOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUploadsWorkforcemanagementHistoricaldataCsv",
		Method:             "POST",
		PathPattern:        "/api/v2/uploads/workforcemanagement/historicaldata/csv",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUploadsWorkforcemanagementHistoricaldataCsvReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUploadsWorkforcemanagementHistoricaldataCsvOK), nil

}

// Code generated by go-swagger; DO NOT EDIT.

package uploads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostUploadsWorkforcemanagementHistoricaldataCsvReader is a Reader for the PostUploadsWorkforcemanagementHistoricaldataCsv structure.
type PostUploadsWorkforcemanagementHistoricaldataCsvReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUploadsWorkforcemanagementHistoricaldataCsvOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUploadsWorkforcemanagementHistoricaldataCsvBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostUploadsWorkforcemanagementHistoricaldataCsvForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostUploadsWorkforcemanagementHistoricaldataCsvNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostUploadsWorkforcemanagementHistoricaldataCsvOK creates a PostUploadsWorkforcemanagementHistoricaldataCsvOK with default headers values
func NewPostUploadsWorkforcemanagementHistoricaldataCsvOK() *PostUploadsWorkforcemanagementHistoricaldataCsvOK {
	return &PostUploadsWorkforcemanagementHistoricaldataCsvOK{}
}

/*
PostUploadsWorkforcemanagementHistoricaldataCsvOK describes a response with status code 200, with default header values.

Presigned url successfully created.
*/
type PostUploadsWorkforcemanagementHistoricaldataCsvOK struct {
	Payload *models.UploadURLResponse
}

// IsSuccess returns true when this post uploads workforcemanagement historicaldata csv o k response has a 2xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post uploads workforcemanagement historicaldata csv o k response has a 3xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads workforcemanagement historicaldata csv o k response has a 4xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post uploads workforcemanagement historicaldata csv o k response has a 5xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads workforcemanagement historicaldata csv o k response a status code equal to that given
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvOK  %+v", 200, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvOK) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvOK  %+v", 200, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvOK) GetPayload() *models.UploadURLResponse {
	return o.Payload
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UploadURLResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsWorkforcemanagementHistoricaldataCsvBadRequest creates a PostUploadsWorkforcemanagementHistoricaldataCsvBadRequest with default headers values
func NewPostUploadsWorkforcemanagementHistoricaldataCsvBadRequest() *PostUploadsWorkforcemanagementHistoricaldataCsvBadRequest {
	return &PostUploadsWorkforcemanagementHistoricaldataCsvBadRequest{}
}

/*
PostUploadsWorkforcemanagementHistoricaldataCsvBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostUploadsWorkforcemanagementHistoricaldataCsvBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads workforcemanagement historicaldata csv bad request response has a 2xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads workforcemanagement historicaldata csv bad request response has a 3xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads workforcemanagement historicaldata csv bad request response has a 4xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads workforcemanagement historicaldata csv bad request response has a 5xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads workforcemanagement historicaldata csv bad request response a status code equal to that given
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvBadRequest  %+v", 400, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvBadRequest  %+v", 400, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized creates a PostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized with default headers values
func NewPostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized() *PostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized {
	return &PostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized{}
}

/*
PostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads workforcemanagement historicaldata csv unauthorized response has a 2xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads workforcemanagement historicaldata csv unauthorized response has a 3xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads workforcemanagement historicaldata csv unauthorized response has a 4xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads workforcemanagement historicaldata csv unauthorized response has a 5xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads workforcemanagement historicaldata csv unauthorized response a status code equal to that given
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvUnauthorized  %+v", 401, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvUnauthorized  %+v", 401, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsWorkforcemanagementHistoricaldataCsvForbidden creates a PostUploadsWorkforcemanagementHistoricaldataCsvForbidden with default headers values
func NewPostUploadsWorkforcemanagementHistoricaldataCsvForbidden() *PostUploadsWorkforcemanagementHistoricaldataCsvForbidden {
	return &PostUploadsWorkforcemanagementHistoricaldataCsvForbidden{}
}

/*
PostUploadsWorkforcemanagementHistoricaldataCsvForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostUploadsWorkforcemanagementHistoricaldataCsvForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads workforcemanagement historicaldata csv forbidden response has a 2xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads workforcemanagement historicaldata csv forbidden response has a 3xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads workforcemanagement historicaldata csv forbidden response has a 4xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads workforcemanagement historicaldata csv forbidden response has a 5xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads workforcemanagement historicaldata csv forbidden response a status code equal to that given
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvForbidden  %+v", 403, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvForbidden  %+v", 403, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsWorkforcemanagementHistoricaldataCsvNotFound creates a PostUploadsWorkforcemanagementHistoricaldataCsvNotFound with default headers values
func NewPostUploadsWorkforcemanagementHistoricaldataCsvNotFound() *PostUploadsWorkforcemanagementHistoricaldataCsvNotFound {
	return &PostUploadsWorkforcemanagementHistoricaldataCsvNotFound{}
}

/*
PostUploadsWorkforcemanagementHistoricaldataCsvNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostUploadsWorkforcemanagementHistoricaldataCsvNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads workforcemanagement historicaldata csv not found response has a 2xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads workforcemanagement historicaldata csv not found response has a 3xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads workforcemanagement historicaldata csv not found response has a 4xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads workforcemanagement historicaldata csv not found response has a 5xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads workforcemanagement historicaldata csv not found response a status code equal to that given
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvNotFound  %+v", 404, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvNotFound  %+v", 404, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout creates a PostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout with default headers values
func NewPostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout() *PostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout {
	return &PostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout{}
}

/*
PostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads workforcemanagement historicaldata csv request timeout response has a 2xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads workforcemanagement historicaldata csv request timeout response has a 3xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads workforcemanagement historicaldata csv request timeout response has a 4xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads workforcemanagement historicaldata csv request timeout response has a 5xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads workforcemanagement historicaldata csv request timeout response a status code equal to that given
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge creates a PostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge with default headers values
func NewPostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge() *PostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge {
	return &PostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge{}
}

/*
PostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads workforcemanagement historicaldata csv request entity too large response has a 2xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads workforcemanagement historicaldata csv request entity too large response has a 3xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads workforcemanagement historicaldata csv request entity too large response has a 4xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads workforcemanagement historicaldata csv request entity too large response has a 5xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads workforcemanagement historicaldata csv request entity too large response a status code equal to that given
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType creates a PostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType with default headers values
func NewPostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType() *PostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType {
	return &PostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType{}
}

/*
PostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads workforcemanagement historicaldata csv unsupported media type response has a 2xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads workforcemanagement historicaldata csv unsupported media type response has a 3xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads workforcemanagement historicaldata csv unsupported media type response has a 4xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads workforcemanagement historicaldata csv unsupported media type response has a 5xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads workforcemanagement historicaldata csv unsupported media type response a status code equal to that given
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests creates a PostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests with default headers values
func NewPostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests() *PostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests {
	return &PostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests{}
}

/*
PostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads workforcemanagement historicaldata csv too many requests response has a 2xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads workforcemanagement historicaldata csv too many requests response has a 3xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads workforcemanagement historicaldata csv too many requests response has a 4xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads workforcemanagement historicaldata csv too many requests response has a 5xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads workforcemanagement historicaldata csv too many requests response a status code equal to that given
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError creates a PostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError with default headers values
func NewPostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError() *PostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError {
	return &PostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError{}
}

/*
PostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads workforcemanagement historicaldata csv internal server error response has a 2xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads workforcemanagement historicaldata csv internal server error response has a 3xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads workforcemanagement historicaldata csv internal server error response has a 4xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post uploads workforcemanagement historicaldata csv internal server error response has a 5xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post uploads workforcemanagement historicaldata csv internal server error response a status code equal to that given
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable creates a PostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable with default headers values
func NewPostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable() *PostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable {
	return &PostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable{}
}

/*
PostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads workforcemanagement historicaldata csv service unavailable response has a 2xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads workforcemanagement historicaldata csv service unavailable response has a 3xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads workforcemanagement historicaldata csv service unavailable response has a 4xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post uploads workforcemanagement historicaldata csv service unavailable response has a 5xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post uploads workforcemanagement historicaldata csv service unavailable response a status code equal to that given
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout creates a PostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout with default headers values
func NewPostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout() *PostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout {
	return &PostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout{}
}

/*
PostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads workforcemanagement historicaldata csv gateway timeout response has a 2xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads workforcemanagement historicaldata csv gateway timeout response has a 3xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads workforcemanagement historicaldata csv gateway timeout response has a 4xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post uploads workforcemanagement historicaldata csv gateway timeout response has a 5xx status code
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post uploads workforcemanagement historicaldata csv gateway timeout response a status code equal to that given
func (o *PostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/workforcemanagement/historicaldata/csv][%d] postUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsWorkforcemanagementHistoricaldataCsvGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

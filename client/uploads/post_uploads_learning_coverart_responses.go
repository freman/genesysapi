// Code generated by go-swagger; DO NOT EDIT.

package uploads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostUploadsLearningCoverartReader is a Reader for the PostUploadsLearningCoverart structure.
type PostUploadsLearningCoverartReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUploadsLearningCoverartReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUploadsLearningCoverartOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUploadsLearningCoverartBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostUploadsLearningCoverartUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostUploadsLearningCoverartForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostUploadsLearningCoverartNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostUploadsLearningCoverartRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostUploadsLearningCoverartRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostUploadsLearningCoverartUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostUploadsLearningCoverartTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostUploadsLearningCoverartInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostUploadsLearningCoverartServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostUploadsLearningCoverartGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostUploadsLearningCoverartOK creates a PostUploadsLearningCoverartOK with default headers values
func NewPostUploadsLearningCoverartOK() *PostUploadsLearningCoverartOK {
	return &PostUploadsLearningCoverartOK{}
}

/*
PostUploadsLearningCoverartOK describes a response with status code 200, with default header values.

Pre-signed urls successfully created.
*/
type PostUploadsLearningCoverartOK struct {
	Payload *models.UploadURLResponse
}

// IsSuccess returns true when this post uploads learning coverart o k response has a 2xx status code
func (o *PostUploadsLearningCoverartOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post uploads learning coverart o k response has a 3xx status code
func (o *PostUploadsLearningCoverartOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads learning coverart o k response has a 4xx status code
func (o *PostUploadsLearningCoverartOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post uploads learning coverart o k response has a 5xx status code
func (o *PostUploadsLearningCoverartOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads learning coverart o k response a status code equal to that given
func (o *PostUploadsLearningCoverartOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostUploadsLearningCoverartOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartOK  %+v", 200, o.Payload)
}

func (o *PostUploadsLearningCoverartOK) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartOK  %+v", 200, o.Payload)
}

func (o *PostUploadsLearningCoverartOK) GetPayload() *models.UploadURLResponse {
	return o.Payload
}

func (o *PostUploadsLearningCoverartOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UploadURLResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsLearningCoverartBadRequest creates a PostUploadsLearningCoverartBadRequest with default headers values
func NewPostUploadsLearningCoverartBadRequest() *PostUploadsLearningCoverartBadRequest {
	return &PostUploadsLearningCoverartBadRequest{}
}

/*
PostUploadsLearningCoverartBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostUploadsLearningCoverartBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads learning coverart bad request response has a 2xx status code
func (o *PostUploadsLearningCoverartBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads learning coverart bad request response has a 3xx status code
func (o *PostUploadsLearningCoverartBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads learning coverart bad request response has a 4xx status code
func (o *PostUploadsLearningCoverartBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads learning coverart bad request response has a 5xx status code
func (o *PostUploadsLearningCoverartBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads learning coverart bad request response a status code equal to that given
func (o *PostUploadsLearningCoverartBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostUploadsLearningCoverartBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartBadRequest  %+v", 400, o.Payload)
}

func (o *PostUploadsLearningCoverartBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartBadRequest  %+v", 400, o.Payload)
}

func (o *PostUploadsLearningCoverartBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsLearningCoverartBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsLearningCoverartUnauthorized creates a PostUploadsLearningCoverartUnauthorized with default headers values
func NewPostUploadsLearningCoverartUnauthorized() *PostUploadsLearningCoverartUnauthorized {
	return &PostUploadsLearningCoverartUnauthorized{}
}

/*
PostUploadsLearningCoverartUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostUploadsLearningCoverartUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads learning coverart unauthorized response has a 2xx status code
func (o *PostUploadsLearningCoverartUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads learning coverart unauthorized response has a 3xx status code
func (o *PostUploadsLearningCoverartUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads learning coverart unauthorized response has a 4xx status code
func (o *PostUploadsLearningCoverartUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads learning coverart unauthorized response has a 5xx status code
func (o *PostUploadsLearningCoverartUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads learning coverart unauthorized response a status code equal to that given
func (o *PostUploadsLearningCoverartUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostUploadsLearningCoverartUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartUnauthorized  %+v", 401, o.Payload)
}

func (o *PostUploadsLearningCoverartUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartUnauthorized  %+v", 401, o.Payload)
}

func (o *PostUploadsLearningCoverartUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsLearningCoverartUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsLearningCoverartForbidden creates a PostUploadsLearningCoverartForbidden with default headers values
func NewPostUploadsLearningCoverartForbidden() *PostUploadsLearningCoverartForbidden {
	return &PostUploadsLearningCoverartForbidden{}
}

/*
PostUploadsLearningCoverartForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostUploadsLearningCoverartForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads learning coverart forbidden response has a 2xx status code
func (o *PostUploadsLearningCoverartForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads learning coverart forbidden response has a 3xx status code
func (o *PostUploadsLearningCoverartForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads learning coverart forbidden response has a 4xx status code
func (o *PostUploadsLearningCoverartForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads learning coverart forbidden response has a 5xx status code
func (o *PostUploadsLearningCoverartForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads learning coverart forbidden response a status code equal to that given
func (o *PostUploadsLearningCoverartForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostUploadsLearningCoverartForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartForbidden  %+v", 403, o.Payload)
}

func (o *PostUploadsLearningCoverartForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartForbidden  %+v", 403, o.Payload)
}

func (o *PostUploadsLearningCoverartForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsLearningCoverartForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsLearningCoverartNotFound creates a PostUploadsLearningCoverartNotFound with default headers values
func NewPostUploadsLearningCoverartNotFound() *PostUploadsLearningCoverartNotFound {
	return &PostUploadsLearningCoverartNotFound{}
}

/*
PostUploadsLearningCoverartNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostUploadsLearningCoverartNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads learning coverart not found response has a 2xx status code
func (o *PostUploadsLearningCoverartNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads learning coverart not found response has a 3xx status code
func (o *PostUploadsLearningCoverartNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads learning coverart not found response has a 4xx status code
func (o *PostUploadsLearningCoverartNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads learning coverart not found response has a 5xx status code
func (o *PostUploadsLearningCoverartNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads learning coverart not found response a status code equal to that given
func (o *PostUploadsLearningCoverartNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostUploadsLearningCoverartNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartNotFound  %+v", 404, o.Payload)
}

func (o *PostUploadsLearningCoverartNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartNotFound  %+v", 404, o.Payload)
}

func (o *PostUploadsLearningCoverartNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsLearningCoverartNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsLearningCoverartRequestTimeout creates a PostUploadsLearningCoverartRequestTimeout with default headers values
func NewPostUploadsLearningCoverartRequestTimeout() *PostUploadsLearningCoverartRequestTimeout {
	return &PostUploadsLearningCoverartRequestTimeout{}
}

/*
PostUploadsLearningCoverartRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostUploadsLearningCoverartRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads learning coverart request timeout response has a 2xx status code
func (o *PostUploadsLearningCoverartRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads learning coverart request timeout response has a 3xx status code
func (o *PostUploadsLearningCoverartRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads learning coverart request timeout response has a 4xx status code
func (o *PostUploadsLearningCoverartRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads learning coverart request timeout response has a 5xx status code
func (o *PostUploadsLearningCoverartRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads learning coverart request timeout response a status code equal to that given
func (o *PostUploadsLearningCoverartRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostUploadsLearningCoverartRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostUploadsLearningCoverartRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostUploadsLearningCoverartRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsLearningCoverartRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsLearningCoverartRequestEntityTooLarge creates a PostUploadsLearningCoverartRequestEntityTooLarge with default headers values
func NewPostUploadsLearningCoverartRequestEntityTooLarge() *PostUploadsLearningCoverartRequestEntityTooLarge {
	return &PostUploadsLearningCoverartRequestEntityTooLarge{}
}

/*
PostUploadsLearningCoverartRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PostUploadsLearningCoverartRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads learning coverart request entity too large response has a 2xx status code
func (o *PostUploadsLearningCoverartRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads learning coverart request entity too large response has a 3xx status code
func (o *PostUploadsLearningCoverartRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads learning coverart request entity too large response has a 4xx status code
func (o *PostUploadsLearningCoverartRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads learning coverart request entity too large response has a 5xx status code
func (o *PostUploadsLearningCoverartRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads learning coverart request entity too large response a status code equal to that given
func (o *PostUploadsLearningCoverartRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostUploadsLearningCoverartRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostUploadsLearningCoverartRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostUploadsLearningCoverartRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsLearningCoverartRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsLearningCoverartUnsupportedMediaType creates a PostUploadsLearningCoverartUnsupportedMediaType with default headers values
func NewPostUploadsLearningCoverartUnsupportedMediaType() *PostUploadsLearningCoverartUnsupportedMediaType {
	return &PostUploadsLearningCoverartUnsupportedMediaType{}
}

/*
PostUploadsLearningCoverartUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostUploadsLearningCoverartUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads learning coverart unsupported media type response has a 2xx status code
func (o *PostUploadsLearningCoverartUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads learning coverart unsupported media type response has a 3xx status code
func (o *PostUploadsLearningCoverartUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads learning coverart unsupported media type response has a 4xx status code
func (o *PostUploadsLearningCoverartUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads learning coverart unsupported media type response has a 5xx status code
func (o *PostUploadsLearningCoverartUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads learning coverart unsupported media type response a status code equal to that given
func (o *PostUploadsLearningCoverartUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostUploadsLearningCoverartUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostUploadsLearningCoverartUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostUploadsLearningCoverartUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsLearningCoverartUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsLearningCoverartTooManyRequests creates a PostUploadsLearningCoverartTooManyRequests with default headers values
func NewPostUploadsLearningCoverartTooManyRequests() *PostUploadsLearningCoverartTooManyRequests {
	return &PostUploadsLearningCoverartTooManyRequests{}
}

/*
PostUploadsLearningCoverartTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostUploadsLearningCoverartTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads learning coverart too many requests response has a 2xx status code
func (o *PostUploadsLearningCoverartTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads learning coverart too many requests response has a 3xx status code
func (o *PostUploadsLearningCoverartTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads learning coverart too many requests response has a 4xx status code
func (o *PostUploadsLearningCoverartTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post uploads learning coverart too many requests response has a 5xx status code
func (o *PostUploadsLearningCoverartTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post uploads learning coverart too many requests response a status code equal to that given
func (o *PostUploadsLearningCoverartTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostUploadsLearningCoverartTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostUploadsLearningCoverartTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostUploadsLearningCoverartTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsLearningCoverartTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsLearningCoverartInternalServerError creates a PostUploadsLearningCoverartInternalServerError with default headers values
func NewPostUploadsLearningCoverartInternalServerError() *PostUploadsLearningCoverartInternalServerError {
	return &PostUploadsLearningCoverartInternalServerError{}
}

/*
PostUploadsLearningCoverartInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostUploadsLearningCoverartInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads learning coverart internal server error response has a 2xx status code
func (o *PostUploadsLearningCoverartInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads learning coverart internal server error response has a 3xx status code
func (o *PostUploadsLearningCoverartInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads learning coverart internal server error response has a 4xx status code
func (o *PostUploadsLearningCoverartInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post uploads learning coverart internal server error response has a 5xx status code
func (o *PostUploadsLearningCoverartInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post uploads learning coverart internal server error response a status code equal to that given
func (o *PostUploadsLearningCoverartInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostUploadsLearningCoverartInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUploadsLearningCoverartInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUploadsLearningCoverartInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsLearningCoverartInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsLearningCoverartServiceUnavailable creates a PostUploadsLearningCoverartServiceUnavailable with default headers values
func NewPostUploadsLearningCoverartServiceUnavailable() *PostUploadsLearningCoverartServiceUnavailable {
	return &PostUploadsLearningCoverartServiceUnavailable{}
}

/*
PostUploadsLearningCoverartServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostUploadsLearningCoverartServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads learning coverart service unavailable response has a 2xx status code
func (o *PostUploadsLearningCoverartServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads learning coverart service unavailable response has a 3xx status code
func (o *PostUploadsLearningCoverartServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads learning coverart service unavailable response has a 4xx status code
func (o *PostUploadsLearningCoverartServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post uploads learning coverart service unavailable response has a 5xx status code
func (o *PostUploadsLearningCoverartServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post uploads learning coverart service unavailable response a status code equal to that given
func (o *PostUploadsLearningCoverartServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostUploadsLearningCoverartServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostUploadsLearningCoverartServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostUploadsLearningCoverartServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsLearningCoverartServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUploadsLearningCoverartGatewayTimeout creates a PostUploadsLearningCoverartGatewayTimeout with default headers values
func NewPostUploadsLearningCoverartGatewayTimeout() *PostUploadsLearningCoverartGatewayTimeout {
	return &PostUploadsLearningCoverartGatewayTimeout{}
}

/*
PostUploadsLearningCoverartGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostUploadsLearningCoverartGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post uploads learning coverart gateway timeout response has a 2xx status code
func (o *PostUploadsLearningCoverartGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post uploads learning coverart gateway timeout response has a 3xx status code
func (o *PostUploadsLearningCoverartGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post uploads learning coverart gateway timeout response has a 4xx status code
func (o *PostUploadsLearningCoverartGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post uploads learning coverart gateway timeout response has a 5xx status code
func (o *PostUploadsLearningCoverartGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post uploads learning coverart gateway timeout response a status code equal to that given
func (o *PostUploadsLearningCoverartGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostUploadsLearningCoverartGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostUploadsLearningCoverartGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/uploads/learning/coverart][%d] postUploadsLearningCoverartGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostUploadsLearningCoverartGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostUploadsLearningCoverartGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

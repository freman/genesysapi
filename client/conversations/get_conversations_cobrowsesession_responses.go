// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetConversationsCobrowsesessionReader is a Reader for the GetConversationsCobrowsesession structure.
type GetConversationsCobrowsesessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConversationsCobrowsesessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConversationsCobrowsesessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConversationsCobrowsesessionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetConversationsCobrowsesessionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConversationsCobrowsesessionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConversationsCobrowsesessionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetConversationsCobrowsesessionRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetConversationsCobrowsesessionRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetConversationsCobrowsesessionUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetConversationsCobrowsesessionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetConversationsCobrowsesessionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetConversationsCobrowsesessionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetConversationsCobrowsesessionGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetConversationsCobrowsesessionOK creates a GetConversationsCobrowsesessionOK with default headers values
func NewGetConversationsCobrowsesessionOK() *GetConversationsCobrowsesessionOK {
	return &GetConversationsCobrowsesessionOK{}
}

/*GetConversationsCobrowsesessionOK handles this case with default header values.

successful operation
*/
type GetConversationsCobrowsesessionOK struct {
	Payload *models.CobrowseConversation
}

func (o *GetConversationsCobrowsesessionOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/cobrowsesessions/{conversationId}][%d] getConversationsCobrowsesessionOK  %+v", 200, o.Payload)
}

func (o *GetConversationsCobrowsesessionOK) GetPayload() *models.CobrowseConversation {
	return o.Payload
}

func (o *GetConversationsCobrowsesessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CobrowseConversation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsCobrowsesessionBadRequest creates a GetConversationsCobrowsesessionBadRequest with default headers values
func NewGetConversationsCobrowsesessionBadRequest() *GetConversationsCobrowsesessionBadRequest {
	return &GetConversationsCobrowsesessionBadRequest{}
}

/*GetConversationsCobrowsesessionBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetConversationsCobrowsesessionBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetConversationsCobrowsesessionBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/cobrowsesessions/{conversationId}][%d] getConversationsCobrowsesessionBadRequest  %+v", 400, o.Payload)
}

func (o *GetConversationsCobrowsesessionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsCobrowsesessionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsCobrowsesessionUnauthorized creates a GetConversationsCobrowsesessionUnauthorized with default headers values
func NewGetConversationsCobrowsesessionUnauthorized() *GetConversationsCobrowsesessionUnauthorized {
	return &GetConversationsCobrowsesessionUnauthorized{}
}

/*GetConversationsCobrowsesessionUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetConversationsCobrowsesessionUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetConversationsCobrowsesessionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/cobrowsesessions/{conversationId}][%d] getConversationsCobrowsesessionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetConversationsCobrowsesessionUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsCobrowsesessionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsCobrowsesessionForbidden creates a GetConversationsCobrowsesessionForbidden with default headers values
func NewGetConversationsCobrowsesessionForbidden() *GetConversationsCobrowsesessionForbidden {
	return &GetConversationsCobrowsesessionForbidden{}
}

/*GetConversationsCobrowsesessionForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetConversationsCobrowsesessionForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetConversationsCobrowsesessionForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/cobrowsesessions/{conversationId}][%d] getConversationsCobrowsesessionForbidden  %+v", 403, o.Payload)
}

func (o *GetConversationsCobrowsesessionForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsCobrowsesessionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsCobrowsesessionNotFound creates a GetConversationsCobrowsesessionNotFound with default headers values
func NewGetConversationsCobrowsesessionNotFound() *GetConversationsCobrowsesessionNotFound {
	return &GetConversationsCobrowsesessionNotFound{}
}

/*GetConversationsCobrowsesessionNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetConversationsCobrowsesessionNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetConversationsCobrowsesessionNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/cobrowsesessions/{conversationId}][%d] getConversationsCobrowsesessionNotFound  %+v", 404, o.Payload)
}

func (o *GetConversationsCobrowsesessionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsCobrowsesessionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsCobrowsesessionRequestTimeout creates a GetConversationsCobrowsesessionRequestTimeout with default headers values
func NewGetConversationsCobrowsesessionRequestTimeout() *GetConversationsCobrowsesessionRequestTimeout {
	return &GetConversationsCobrowsesessionRequestTimeout{}
}

/*GetConversationsCobrowsesessionRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetConversationsCobrowsesessionRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetConversationsCobrowsesessionRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/cobrowsesessions/{conversationId}][%d] getConversationsCobrowsesessionRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetConversationsCobrowsesessionRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsCobrowsesessionRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsCobrowsesessionRequestEntityTooLarge creates a GetConversationsCobrowsesessionRequestEntityTooLarge with default headers values
func NewGetConversationsCobrowsesessionRequestEntityTooLarge() *GetConversationsCobrowsesessionRequestEntityTooLarge {
	return &GetConversationsCobrowsesessionRequestEntityTooLarge{}
}

/*GetConversationsCobrowsesessionRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetConversationsCobrowsesessionRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetConversationsCobrowsesessionRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/cobrowsesessions/{conversationId}][%d] getConversationsCobrowsesessionRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetConversationsCobrowsesessionRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsCobrowsesessionRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsCobrowsesessionUnsupportedMediaType creates a GetConversationsCobrowsesessionUnsupportedMediaType with default headers values
func NewGetConversationsCobrowsesessionUnsupportedMediaType() *GetConversationsCobrowsesessionUnsupportedMediaType {
	return &GetConversationsCobrowsesessionUnsupportedMediaType{}
}

/*GetConversationsCobrowsesessionUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetConversationsCobrowsesessionUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetConversationsCobrowsesessionUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/cobrowsesessions/{conversationId}][%d] getConversationsCobrowsesessionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetConversationsCobrowsesessionUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsCobrowsesessionUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsCobrowsesessionTooManyRequests creates a GetConversationsCobrowsesessionTooManyRequests with default headers values
func NewGetConversationsCobrowsesessionTooManyRequests() *GetConversationsCobrowsesessionTooManyRequests {
	return &GetConversationsCobrowsesessionTooManyRequests{}
}

/*GetConversationsCobrowsesessionTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetConversationsCobrowsesessionTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetConversationsCobrowsesessionTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/cobrowsesessions/{conversationId}][%d] getConversationsCobrowsesessionTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetConversationsCobrowsesessionTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsCobrowsesessionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsCobrowsesessionInternalServerError creates a GetConversationsCobrowsesessionInternalServerError with default headers values
func NewGetConversationsCobrowsesessionInternalServerError() *GetConversationsCobrowsesessionInternalServerError {
	return &GetConversationsCobrowsesessionInternalServerError{}
}

/*GetConversationsCobrowsesessionInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetConversationsCobrowsesessionInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetConversationsCobrowsesessionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/cobrowsesessions/{conversationId}][%d] getConversationsCobrowsesessionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConversationsCobrowsesessionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsCobrowsesessionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsCobrowsesessionServiceUnavailable creates a GetConversationsCobrowsesessionServiceUnavailable with default headers values
func NewGetConversationsCobrowsesessionServiceUnavailable() *GetConversationsCobrowsesessionServiceUnavailable {
	return &GetConversationsCobrowsesessionServiceUnavailable{}
}

/*GetConversationsCobrowsesessionServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetConversationsCobrowsesessionServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetConversationsCobrowsesessionServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/cobrowsesessions/{conversationId}][%d] getConversationsCobrowsesessionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetConversationsCobrowsesessionServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsCobrowsesessionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsCobrowsesessionGatewayTimeout creates a GetConversationsCobrowsesessionGatewayTimeout with default headers values
func NewGetConversationsCobrowsesessionGatewayTimeout() *GetConversationsCobrowsesessionGatewayTimeout {
	return &GetConversationsCobrowsesessionGatewayTimeout{}
}

/*GetConversationsCobrowsesessionGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetConversationsCobrowsesessionGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetConversationsCobrowsesessionGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/cobrowsesessions/{conversationId}][%d] getConversationsCobrowsesessionGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetConversationsCobrowsesessionGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsCobrowsesessionGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
